<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="TCSModule">
	<!-- Common SQL Get for TCS Tables (Begin) -->
	<select id="sqlGetCustAgentSchCollTime" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSCustAgentSchCollTimeBO">
		<![CDATA[
			SELECT
			SCH.TR_NO trNo, CUST_NO custNo, 
			SUBSTR(TRIM(TO_CHAR(TIME_FROM, '0000')), 0, 2) || NVL2(TIME_FROM, ':', '') || SUBSTR(TRIM(TO_CHAR(TIME_FROM, '0000')), 3, 4) timeFrom, 
			SUBSTR(TRIM(TO_CHAR(TIME_TO, '0000')), 0, 2) || NVL2(TIME_TO, ':', '') || SUBSTR(TRIM(TO_CHAR(TIME_TO, '0000')), 3, 4) timeTo,
			DAY_FRQ dayFrq, RMK rmk,
			TO_CHAR(EFF_FROM, 'DDMONYY') effFrom, TO_CHAR(EFF_TO, 'DDMONYY') effTo,
			SCH.PURPOSE purpose, PURP.CODE_DESC purposeDesc,
			SCH.CR_USER_ID crUserId, TO_CHAR(SCH.CR_DATE, 'DDMONYY HH24:MI') crDate,
			SCH.LM_USER_ID lmUserId, TO_CHAR(SCH.LM_DATE, 'DDMONYY HH24:MI') lmDate
			FROM CUST_AGENT_SCH_COLL_TIME SCH
			LEFT OUTER JOIN MAST_CODE_DTL PURP
			ON SCH.PURPOSE = PURP.CODE AND PURP.CODE_TYPE = 'COLL_PURPOSE'
			WHERE TR_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetCustAgentSchCollTimeDtl" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSCustAgentSchCollTruckDockBO">
		<![CDATA[
			SELECT
			TR_NO trNo, TRUCK_DOCK truckDock,
			CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate,
			LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate
			FROM CUST_AGENT_SCH_COLL_TRUCK_DOCK
			WHERE TR_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetiPassList" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSIPassListBO">
		<![CDATA[
			SELECT IPASS_NO iPassNo, IPASS_TYPE iPassType, VALID_YN validYN,
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate,
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_IPASS_LIST
			WHERE IPASS_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetiPassMaster" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSIPassMasterBO">
		<![CDATA[
			SELECT IPASS.IPASS_NO iPassNo, IPASS_TYPE iPassType, (
				SELECT TYPE.CODE_DESC FROM MAST_CODE_DTL TYPE 
				WHERE TYPE.CODE = IPASS.IPASS_TYPE AND TYPE.CODE_TYPE = 'TCS_IPASS_TYPE'
			) iPassTypeDesc,
			TO_CHAR(ISSUED_ON, 'DDMONYY HH24:MI') issuedOn, 
			IPASS.STATUS status, (
				SELECT STAT.CODE_DESC FROM MAST_CODE_DTL STAT 
				WHERE STAT.CODE = IPASS.STATUS AND STAT.CODE_TYPE = 'TCS_IPASS_STATUS'
			) statusDesc, 
			DOCKET_NO docketNo, 
			PURPOSE purpose, (
				SELECT PURPOSE.CODE_DESC FROM MAST_TCS_INCOMING_PURPOSE PURPOSE 
				WHERE PURPOSE.CODE = IPASS.PURPOSE
			) purposeDesc,
			REISSUED reissued, REISSUE_REASON reissueReason, 
			IPASS.TRUCK_NO truckNo, TRUCK_TYPE truckType, (
				SELECT TRUCKTYPE.CODE_DESC FROM MAST_TCS_TRUCK_TYPE TRUCKTYPE 
				WHERE TRUCKTYPE.CODE = IPASS.TRUCK_TYPE
			) truckTypeDesc, 
			DECODE((
				SELECT COUNT(TRUCK_NO) FROM TCS_BAN_TRUCK 
				WHERE TRUCK_NO = IPASS.TRUCK_NO AND STATUS IN('BANNED', 'ONETIME') AND 
			  BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
			), 0, 'N', 'Y') banned,
			TRUCK_CATEGORY truckCategory, (
				SELECT TRUCKCAT.CODE_DESC FROM MAST_CODE_DTL TRUCKCAT 
				WHERE TRUCKCAT.CODE = IPASS.TRUCK_CATEGORY AND TRUCKCAT.CODE_TYPE = 'TCS_TRUCK_CATEGORY'
			) truckCategoryDesc,
			CUST_NO custNo, CUST_TYPE custType, (
				SELECT CUST.CODE_DESC FROM MAST_CODE_DTL CUST 
				WHERE CUST.CODE = IPASS.CUST_TYPE AND CUST.CODE_TYPE = 'TCS_IPASS_CUST_TYPE'
			) custTypeDesc, 
			APPLICANT_NAME applicantName, APPLICANT_HKID applicantHKID, PASSWORD password, 
			CARGO_COLL_ALLOWED cargoCollAllowed, ULD_COLL_ALLOWED ULDCollAllowed, 
			CONTACT_NO contactNo, NTFY_CONTACT_NO ntfyContactNo, 
			WAIVE_CHARGE waiveCharge,
			IPASS.CR_USER_ID crUserId, TO_CHAR(IPASS.CR_DATE, 'DDMONYY HH24:MI') crDate, 
			IPASS.LM_USER_ID lmUserId, TO_CHAR(IPASS.LM_DATE, 'DDMONYY HH24:MI') lmDate, (
				SELECT BANSTAT.CODE_DESC FROM MAST_CODE_DTL BANSTAT 
				WHERE BANSTAT.CODE = BAN.STATUS AND BANSTAT.CODE_TYPE = 'TCS_BAN_STATUS'
			) banStatusDesc,
			REASON.BAN_DESC banReasonDesc,
			TO_CHAR(IPASS.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_IPASS_MASTER IPASS
			LEFT OUTER JOIN TCS_BAN_TRUCK BAN
			ON IPASS.TRUCK_NO = BAN.TRUCK_NO AND BAN.STATUS IN ('BANNED', 'ONTIME') AND 
				BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
			LEFT OUTER JOIN TCS_BAN_MASTER REASON
			ON BAN.BAN_REASON = REASON.BAN_REASON
			WHERE IPASS.IPASS_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetiPassHistory" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSIPassMasterBO">
		<![CDATA[
			SELECT IPASS.IPASS_NO iPassNo, IPASS_TYPE iPassType, (
				SELECT TYPE.CODE_DESC FROM MAST_CODE_DTL TYPE 
				WHERE TYPE.CODE = IPASS.IPASS_TYPE AND TYPE.CODE_TYPE = 'TCS_IPASS_TYPE'
			) iPassTypeDesc,
			TO_CHAR(ISSUED_ON, 'DDMONYY HH24:MI') issuedOn, 
			'VOID' status, 'Void' statusDesc, 
			DOCKET_NO docketNo, 
			'' purpose, '' purposeDesc,
			REISSUED reissued, REISSUE_REASON reissueReason, 
			IPASS.TRUCK_NO truckNo, TRUCK_TYPE truckType, (
				SELECT TRUCKTYPE.CODE_DESC FROM MAST_TCS_TRUCK_TYPE TRUCKTYPE 
				WHERE TRUCKTYPE.CODE = IPASS.TRUCK_TYPE
			) truckTypeDesc, 
			DECODE((
				SELECT COUNT(TRUCK_NO) FROM TCS_BAN_TRUCK 
				WHERE TRUCK_NO = IPASS.TRUCK_NO AND STATUS IN('BANNED', 'ONETIME') AND 
			    BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
			), 0, 'N', 'Y') banned,
			TRUCK_CATEGORY truckCategory, (
				SELECT TRUCKCAT.CODE_DESC FROM MAST_CODE_DTL TRUCKCAT 
				WHERE TRUCKCAT.CODE = IPASS.TRUCK_CATEGORY AND TRUCKCAT.CODE_TYPE = 'TCS_TRUCK_CATEGORY'
			) truckCategoryDesc,
			CUST_NO custNo, CUST_TYPE custType, (
				SELECT CUST.CODE_DESC FROM MAST_CODE_DTL CUST 
				WHERE CUST.CODE = IPASS.CUST_TYPE AND CUST.CODE_TYPE = 'TCS_IPASS_CUST_TYPE'
			) custTypeDesc, 
			APPLICANT_NAME applicantName, APPLICANT_HKID applicantHKID, '' password, 
			CARGO_COLL_ALLOWED cargoCollAllowed, ULD_COLL_ALLOWED ULDCollAllowed, 
			CONTACT_NO contactNo, '' ntfyContactNo, 
			WAIVE_CHARGE waiveCharge,
			IPASS.CR_USER_ID crUserId, TO_CHAR(IPASS.CR_DATE, 'DDMONYY HH24:MI') crDate, 
			IPASS.LM_USER_ID lmUserId, TO_CHAR(IPASS.LM_DATE, 'DDMONYY HH24:MI') lmDate, (
				SELECT BANSTAT.CODE_DESC FROM MAST_CODE_DTL BANSTAT 
				WHERE BANSTAT.CODE = BAN.STATUS AND BANSTAT.CODE_TYPE = 'TCS_BAN_STATUS'
			) banStatusDesc,
			REASON.BAN_DESC banReasonDesc,
			TO_CHAR(IPASS.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_IPASS_HIST IPASS
			LEFT OUTER JOIN TCS_BAN_TRUCK BAN
			ON IPASS.TRUCK_NO = BAN.TRUCK_NO AND BAN.STATUS IN ('BANNED', 'ONTIME') AND 
				BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
			LEFT OUTER JOIN TCS_BAN_MASTER REASON
			ON BAN.BAN_REASON = REASON.BAN_REASON
			WHERE IPASS.IPASS_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetiPassLog" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSIPassMasterBO">
		<![CDATA[
			SELECT IPASS_NO iPassNo, IPASS_TYPE iPassType, DOCKET_NO docketNo, 
			  TRUCK_NO truckNo, TRUCK_TYPE truckType, TRUCK_CATEGORY truckCategory, 
			  CUST_NO custNo, CUST_TYPE custType, 
			  APPLICANT_NAME applicantName, APPLICANT_HKID applicantHKID, 
			  CONTACT_NO contactNo, NTFY_CONTACT_NO ntfyContactNo, 
			  TR_TYPE trType, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_IPASS_LOG
			WHERE IPASS_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetDocket" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDocketBO">
		<![CDATA[
			SELECT DOCKET_NO docketNo, IMAGE image, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCKET
			WHERE DOCKET_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetBanMaster" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSBanMasterBO">
		<![CDATA[
			SELECT BAN_REASON banReason, BAN_DESC banDesc, BAN_TYPE banType, BAN_NATURE banNature, 
			  NO_BOOKING noBooking, FINE_YN fineYn, NO_ENTRY noEntry, NO_EXIT noExit, 
			  ITM_CODE itmCode, BAN_DAYS banDays, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_BAN_MASTER
			WHERE UPPER(BAN_REASON) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetBanTruck" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSBanTruckBO">
		<![CDATA[
			SELECT TR_NO trNo, TRUCK_NO truckNo, IPASS_NO iPassNo, 
			  BAN_REASON banReason, RESTRICTIONS restrictions, BAN_RMK banRmk, 
			  TO_CHAR(BAN_FROM, 'DDMONYY') banFrom, 
			  TO_CHAR(BAN_TO, 'DDMONYY') banTo, 
			  STATUS status, 
			  RLS_USER_ID rlsUserId, TO_CHAR(RLS_DATE, 'DDMONYY HH24:MI') rlsDate, RLS_RMK rlsRmk, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_BAN_TRUCK
			WHERE TR_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetWarningLetter" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSWrngLetterBO">
		<![CDATA[
			SELECT TRIP_ID tripId, WARNING_RMK warningRmk, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_WRNG_LETTER
			WHERE TRIP_ID = #PARAM#
		]]>
	</select>
	<select id="sqlGetTruckTrip" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTruckTripBO">
		<![CDATA[
			SELECT
			  TRIP_ID tripId, TRUCK_NO truckNo,
			  TO_CHAR(ARR_TIME, 'DDMONYY HH24:MI') arrTime, 
			  PURPOSE purpose, PURP.CODE_DESC purposeDesc,
			  TO_CHAR(CLOSE_TIME, 'DDMONYY HH24:MI') closeTime, CLOSE_USER_ID closeUserId,
			  TRUCK_DOCK truckDock,
			  CLOSED closed, REJ_RMK rejRmk, EXIT_IND exitInd, TRUCK_QUEUE_IND truckQueueInd,
			  REASON.CODE_DESC incomingReason, TRIP.ALLOCATION_DURATION allocationDuration,
			  CURR_LOC currLoc, ASSIGN_COMPL assignCompl, ASSIGN_COMPL_BY assignComplBy,
			  TO_CHAR(ASSIGN_COMPL_DATE, 'DDMONYY HH24:MI') assignComplDate,
			  SPL_ATTN splAttn, EXTRA_URF extraURF, QUEUE_ORDER_NO priority, 
			  SH_AGT_CODE shAgtCode, CUST.CODE_DESC shAgtName,
			  TRIP.CR_USER_ID crUserId, TO_CHAR(TRIP.CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  TRIP.LM_USER_ID lmUserId, TO_CHAR(TRIP.LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(TRIP.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TRUCK_TRIP TRIP
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON TRIP.SH_AGT_CODE = CUST.CODE AND CUST.ACTIVE = 'Y'
			LEFT OUTER JOIN MAST_CODE_DTL REASON
			ON TRIP.INCOMING_REASON = REASON.CODE AND REASON.CODE_TYPE = 'TCS_INCOMING_REASON'			
			WHERE TRIP_ID = #PARAM#	
		]]>
	</select>
	<select id="sqlGetSHAConfig" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSShaConfigBO">
		<![CDATA[
			SELECT CUST_NO custNo, CUST.CODE_DESC companyName, TRUCK_QUOTA truckQuota, 
			  ENTRY_CHK_POINT entryChkPoint, EXIT_CHK_POINT exitChkPoint, 
			  CONFIG.CR_USER_ID crUserId, TO_CHAR(CONFIG.CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  CONFIG.LM_USER_ID lmUserId, TO_CHAR(CONFIG.LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(CONFIG.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_SHA_CONFIG CONFIG
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON CONFIG.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			WHERE CUST_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetSHADocks" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSShaDocksBO">
		<![CDATA[
			SELECT CUST_NO custNo, TRUCK_DOCK truckDock, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_SHA_DOCKS
			WHERE CUST_NO = #custNo#
		]]>
	</select>
	<select id="sqlGetTruckTripEvents" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTruckTripEventsBO">
		<![CDATA[
			SELECT TRIP_ID tripId, 
			  TO_CHAR(TRUCK_PARK_ENTRY_TIME, 'DDMONYY HH24:MI') truckParkEntryTime, 
			  TO_CHAR(DECL_PURPOSE_TIME, 'DDMONYY HH24:MI') declPurposeTime, 
			  TO_CHAR(TRUCK_IN_QUEUE_TIME, 'DDMONYY HH24:MI') truckInQueueTime, 
			  TO_CHAR(DOCK_ALLOCATION_TIME, 'DDMONYY HH24:MI') dockAllocationTime, 
			  TO_CHAR(LEAVE_TRUCKPARK_TIME, 'DDMONYY HH24:MI') leaveTruckParkTime, 
			  TO_CHAR(TERMINAL_ENTRY_TIME, 'DDMONYY HH24:MI') terminalEntryTime, 
			  TO_CHAR(LVL2_RAMP_CHKPT_TIME, 'DDMONYY HH24:MI') lvl2RampChkPtTime, 
			  TO_CHAR(LVL3_RAMP_CHKPT_TIME, 'DDMONYY HH24:MI') lvl3RampChkPtTime, 
			  TO_CHAR(LVL3_EAST_CHKPT_TIME, 'DDMONYY HH24:MI') lvl3EastChkPtTime, 
			  TO_CHAR(LVL3_WEST_CHKPT_TIME, 'DDMONYY HH24:MI') lvl3WestChkPtTime, 
			  TO_CHAR(LVL5_RAMP_CHKPT_TIME, 'DDMONYY HH24:MI') lvl5RampChkPtTime, 
			  TO_CHAR(LVL5_EAST_CHKPT_TIME, 'DDMONYY HH24:MI') lvl5EastChkPtTime, 
			  TO_CHAR(LVL5_WEST_CHKPT_TIME, 'DDMONYY HH24:MI') lvl5WestChkPtTime, 
			  TO_CHAR(LVL7_UP_CHKPT, 'DDMONYY HH24:MI') lvl7UpChkPt, 
			  TO_CHAR(LVL7_DOWN_CHKPT, 'DDMONYY HH24:MI') lvl7DownChkPt, 
			  TO_CHAR(DOCK_OCCUPY_TIME, 'DDMONYY HH24:MI') dockOccupyTime, 
			  TO_CHAR(LEAVE_DOCK_TIME, 'DDMONYY HH24:MI') leaveDockTime, 
			  TO_CHAR(LVL3_EXIT_CHKPT_TIME, 'DDMONYY HH24:MI') lvl3ExitChkPtTime, 
			  TO_CHAR(LVL5_EXIT_CHKPT_TIME, 'DDMONYY HH24:MI') lvl5ExitChkPtTime, 
			  TO_CHAR(TERMINAL_EXIT_TIME, 'DDMONYY HH24:MI') terminalExitTime, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TRUCK_TRIP_EVENTS
			WHERE TRIP_ID = #PARAM#	
		]]>
	</select>
	<select id="sqlGetDockMaster" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockMasterBO">
		<![CDATA[
			SELECT TRUCK_DOCK truckDock, DOCK_NAME dockDesc, 
			  DOCK_LEVEL dockLevel, ZONE zone, SIDE side, 
			  PURPOSE_1 purpose1, PURPOSE_2 purpose2, PURPOSE_3 purpose3, PURPOSE_4 purpose4, PURPOSE_5 purpose5, 
		      (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DOCK.PURPOSE_1) purpose1Desc,
		      (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DOCK.PURPOSE_2) purpose2Desc,
		      (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DOCK.PURPOSE_3) purpose3Desc,
		      (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DOCK.PURPOSE_4) purpose4Desc,
		      (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DOCK.PURPOSE_5) purpose5Desc,
			  IN_SERVICE svcStatus, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_MASTER DOCK
			WHERE TRUCK_DOCK = #PARAM#		
		]]>
	</select>
	<select id="sqlGetDockAllocation" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockAllocationBO">
		<![CDATA[
			SELECT TRUCK_DOCK truckDock, 
			  STATUS status, OCCUPIED occupied, 
			  ALLOCATION_DURATION allocationDuration, TRIP_ID tripId, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_ALLOCATION
			WHERE TRUCK_DOCK = #PARAM#	
		]]>
	</select>
	<select id="sqlGetDockTemplate" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockTemplateBO">
		<![CDATA[
			SELECT TEMPLATE_ID templateId, TEMPLATE_DESC templateDesc, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_TEMPLATE
			WHERE TEMPLATE_ID = #PARAM#	
		]]>
	</select>
	<select id="sqlGetDockTemplateDtl" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockTemplateDtlBO">
		<![CDATA[
			SELECT TEMPLATE_ID templateId, TRUCK_DOCK truckDock, 
			  PURPOSE_1 purpose1, PURPOSE_2 purpose2, PURPOSE_3 purpose3, PURPOSE_4 purpose4, PURPOSE_5 purpose5, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_TEMPLATE_DTL
			WHERE TEMPLATE_ID = #PARAM#	
		]]>
	</select>
	<select id="sqlGetDockTemplateWalkin" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockTemplateWalkinBO">
		<![CDATA[
			SELECT TEMPLATE_ID templateId, 
			  PURPOSE purpose, QUOTA quota, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_TEMPLATE_WALKIN
			WHERE TEMPLATE_ID = #PARAM#	
		]]>
	</select>
	<select id="sqlGetDockTemplateSch" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockTemplateSchBO">
		<![CDATA[
			SELECT TR_NO trNo, 
			  TO_CHAR(EFF_FROM, 'DDMONYY HH24:MI') effFrom, TO_CHAR(EFF_TO, 'DDMONYY HH24:MI') effTo, 
			  FREQUENCY frequency, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_TEMPLATE_SCH
			WHERE TR_NO = #PARAM#	
		]]>
	</select>
	<select id="sqlGetDockTemplateSchDtl" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockTemplateSchDtlBO">
		<![CDATA[
			SELECT TR_NO trNo, DOC_LINE_NO docLineNo, 
			  TRIM(TO_CHAR(TIME_FROM, '00')) timeFrom, TRIM(TO_CHAR(TIME_TO, '00')) timeTo, 
			  TEMPLATE_ID templateId, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_TEMPLATE_SCH_DTL
			WHERE TR_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetDockReserve" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockResvBO">
		<![CDATA[
			SELECT TR_NO trNo, TRUCK_DOCK truckDock, TRUCK_NO truckNo, 
			  TO_CHAR(RESV_FROM, 'DDMONYY HH24:MI') resvFrom, TO_CHAR(RESV_TO, 'DDMONYY HH24:MI') resvTo, 
			  REASON reason, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_RESV
			WHERE TR_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetDockReserveCommon" parameterClass="java.lang.String"
		resultClass="cargo.cms.common.tcs.bo.TCSDockResvBO">
		<![CDATA[
			SELECT TR_NO trNo, TRUCK_DOCK truckDock, TRUCK_NO truckNo, 
			  TO_CHAR(RESV_FROM, 'DDMONYY HH24:MI') resvFrom, TO_CHAR(RESV_TO, 'DDMONYY HH24:MI') resvTo, 
			  REASON reason, 
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_RESV
			WHERE TR_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetTruckEvents" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTruckEventsBO">
		<![CDATA[
			SELECT TR_NO trNo, TRUCK_NO truckNo,
			  EVENT_ID eventId, EVENT_DESC eventDesc,
			  CR_USER_ID crUserId, TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_TRUCK_EVENTS
			WHERE TR_NO = #PARAM#	
		]]>
	</select>
	<!-- -->
	<!-- Common SQL Get for TCS Tables (End) -->
	<!-- -->
	<!-- -->
	<!-- Common/Misc Call SQL Read (Begin) -->
	<!-- -->
	<select id="sqlGetTCSCMSRuleValue" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSTermsANDConditionState" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TC_IND) FROM MAINTAIN_TC WHERE FUNCTION_CODE = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSTotalTrucksInPark" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(TRIP_ID) FROM TRUCK_TRIP WHERE CURR_LOC IN('TPA') AND CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSOpenTruckTripID" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP	WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSOpenNonSpecificTripID" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP	WHERE TRUCK_NO = UPPER(#PARAM#) AND TRIP_CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSOpenServiceTruckTripID" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) 
			FROM TRUCK_TRIP	WHERE PURPOSE IN('SERVICE', 'REFUSE', 'VIP') AND
			TRUCK_NO = UPPER(#PARAM#) AND TRIP_CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSLastTotalCloseTripId" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TO_NUMBER(TRIP_ID)) FROM TRUCK_TRIP	WHERE TRUCK_NO = UPPER(#PARAM#) AND TRIP_CLOSED = 'Y'
		]]>
	</select>
	<select id="sqlGetTCSIsiPassInCPCT" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(TRIP_ID), 0, 'N', 'Y') 
			FROM TRUCK_TRIP TRIP
			WHERE TRIP.IPASS_NO = UPPER(#PARAM#) AND TRIP_CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSOpenDocketTripID" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP	WHERE DOCKET_NO = UPPER(#PARAM#) AND CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSStrongRoomClient" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(IP_ADDRESS) FROM MAST_TCS_STRONG_ROOM_IP	WHERE IP_ADDRESS = #PARAM# AND IP_ADDRESS <> '127.0.0.1'
		]]>
	</select>
	<select id="sqlGetTCSTruckInPark" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP
			WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N' AND CURR_LOC IN('TPA')
		]]>
	</select>
	
	<select id="sqlGetTCSTruckInParkAssignESRF" parameterClass="java.lang.String" resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP
			WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N' AND CURR_LOC IN('TPA')
			AND EXISTS (SELECT null FROM IMP_CDP_TRUCK_REGISTRATION where nvl(comp_ind,'N') = 'N' and truck_no = UPPER(#PARAM#))
		]]>
	</select>
	
	<select id="sqlGetTCSTruckInSRPark" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP
			WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N' AND CURR_LOC IN('TPA', 'L1SR')
		]]>
	</select>
	<select id="sqlGetTCSTruckInQueue" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP
			WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N' AND CURR_LOC IN('TPA', 'L1SR') AND TRUCK_QUEUE_IND = 'Y'
		]]>
	</select>
	<select id="sqlGetTCSDocketInPark" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP
			WHERE DOCKET_NO = UPPER(#PARAM#) AND CLOSED = 'N' AND CURR_LOC IN('TPA')
		]]>
	</select>
	<!-- Verify whether the truck trip is Refuse/Service Truck Trip -->
	<select id="sqlGetTCSIsServiceTruckTrip" parameterClass="java.lang.String"
		resultClass="java.lang.String">
  		<![CDATA[
			SELECT DECODE(COUNT(IPASS_NO), 0, 'N', 'Y') 
			FROM TCS_IPASS_MASTER 
			WHERE TRUCK_CATEGORY IN('REFUGE', 'SERVICE', 'VIP') AND TRUCK_NO = (
				SELECT TRUCK_NO FROM TRUCK_TRIP WHERE TRIP_ID = #PARAM#
			)
      	]]>
	</select>
	<!-- Verify whether the truck is Refuse/Service Truck -->
	<select id="sqlGetTCSIsServiceTruck" parameterClass="java.lang.String"
		resultClass="java.lang.String">
  		<![CDATA[
			SELECT DECODE(COUNT(IPASS_NO), 0, 'N', 'Y') 
			FROM TCS_IPASS_MASTER 
			WHERE TRUCK_CATEGORY IN('REFUGE', 'SERVICE', 'VIP') AND TRUCK_NO = #PARAM#
      	]]>
	</select>
	<select id="sqlGetTCSIsDocket" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP
			WHERE DOCKET_NO = UPPER(#PARAM#) AND CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSTruckPurpose" parameterClass="java.lang.String"
		resultClass="java.lang.String">
	<![CDATA[
		SELECT MAX(TRIP.PURPOSE) purpose
		FROM TRUCK_TRIP TRIP 
		WHERE (TRIP.CLOSED = 'N' OR TRIP.TRIP_CLOSED = 'N') AND TRUCK_NO = UPPER(#PARAM#)
	]]>
	</select>
	<select id="sqlGetTCSTruckPurposeDesc" parameterClass="java.lang.String"
		resultClass="java.lang.String">
	<![CDATA[
		SELECT MAX(PURP.CODE_DESC) purpose
		FROM TRUCK_TRIP TRIP
		LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
		ON TRIP.PURPOSE = PURP.CODE
		WHERE (TRIP.CLOSED = 'N' OR TRIP.TRIP_CLOSED = 'N') AND TRUCK_NO = UPPER(#PARAM#)
	]]>
	</select>
	<select id="sqlGetTCSPurposeCategory" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CATEGORY FROM MAST_TCS_INCOMING_PURPOSE WHERE CODE = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSTruckPurposeCategory" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CATEGORY FROM MAST_TCS_INCOMING_PURPOSE 
			WHERE CODE = (SELECT MAX(PURPOSE) FROM TRUCK_TRIP WHERE TRUCK_NO = #PARAM# AND CLOSED = 'N')
		]]>
	</select>
	<select id="sqlGetTCSTruckInTerminal" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP
			WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N' AND CURR_LOC IS NOT NULL AND
			CURR_LOC NOT IN('TPA', 'TPX')
		]]>
	</select>
	<select id="sqlGetTCSNonSpecificTruckInTerminal" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP
			WHERE TRUCK_NO = UPPER(#PARAM#) AND TRIP_CLOSED = 'N' AND CURR_LOC IS NOT NULL AND
			CURR_LOC NOT IN('TPA', 'TPX')
		]]>
	</select>
	<select id="sqlGetTCSIsInPurpose" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(CODE), 0, 'N', 'Y') FROM MAST_TCS_INCOMING_PURPOSE WHERE CODE = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSDocketTripId" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRIP_ID) FROM TRUCK_TRIP WHERE DOCKET_NO = UPPER(#PARAM#) AND CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSDocketTruckNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRUCK_NO) FROM TRUCK_TRIP
			WHERE DOCKET_NO = UPPER(#PARAM#) AND CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSTruckDocketNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(DOCKET_NO) FROM TRUCK_TRIP WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSTruckEntryTime" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TO_CHAR(ARR_TIME, 'DDMONYY HH24:MI') FROM TRUCK_TRIP
			WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSTruckEntryTimeByDocket" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TO_CHAR(ARR_TIME, 'DDMONYY HH24:MI') FROM TRUCK_TRIP
			WHERE DOCKET_NO = UPPER(#PARAM#) AND CLOSED = 'N' AND TRUCK_NO IS NULL
		]]>
	</select>
	<select id="sqlGetTCSParkingDuration" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT
			FLOOR((NVL(EVENT.LEAVE_TRUCKPARK_TIME, SYSDATE) - EVENT.TRUCK_PARK_ENTRY_TIME) * 24) || ':' || 
			TRIM(TO_CHAR((FLOOR((NVL(EVENT.LEAVE_TRUCKPARK_TIME, SYSDATE) - EVENT.TRUCK_PARK_ENTRY_TIME) * 24 * 60) - (FLOOR((NVL(EVENT.LEAVE_TRUCKPARK_TIME, SYSDATE) - EVENT.TRUCK_PARK_ENTRY_TIME) * 24) * 60)), '00'))
			FROM TRUCK_TRIP TRIP
			JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSParkingDurationByDocket" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT
			FLOOR((NVL(EVENT.LEAVE_TRUCKPARK_TIME, SYSDATE) - EVENT.TRUCK_PARK_ENTRY_TIME) * 24) || ':' || 
			TRIM(TO_CHAR((FLOOR((NVL(EVENT.LEAVE_TRUCKPARK_TIME, SYSDATE) - EVENT.TRUCK_PARK_ENTRY_TIME) * 24 * 60) - (FLOOR((NVL(EVENT.LEAVE_TRUCKPARK_TIME, SYSDATE) - EVENT.TRUCK_PARK_ENTRY_TIME) * 24) * 60)), '00'))
			FROM TRUCK_TRIP TRIP
			JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			WHERE DOCKET_NO = UPPER(#PARAM#) AND CLOSED = 'N' AND TRUCK_NO IS NULL
		]]>
	</select>
	<select id="sqlGetTCSParkingDurationAsQty" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			WITH PARKING AS (
			  SELECT TRUCK_NO, TRIP.TRIP_ID,
			  EVENT.TRUCK_PARK_ENTRY_TIME ENTRY_TM,
			  NVL(FLOOR((SYSDATE - EVENT.TRUCK_PARK_ENTRY_TIME)*24*60), 0) PARK_DURATION,
			  EVENT.TRUCK_IN_QUEUE_TIME Q_TM,
			  CASE 
			    WHEN EVENT.DOCK_RELEASE_TIME IS NULL THEN
			      CASE
			        WHEN TRIP.TRUCK_QUEUE_IND = 'Y' THEN
			        NVL(FLOOR((SYSDATE - EVENT.TRUCK_IN_QUEUE_TIME)*24*60), 0)
			        WHEN EVENT.DOCK_RELEASE_TIME IS NOT NULL THEN 0
			        ELSE
			        NVL(FLOOR((NVL(EVENT.DOCK_ALLOCATION_TIME, SYSDATE) - EVENT.TRUCK_IN_QUEUE_TIME)*24*60), 0)
			      END
			    ELSE 0
			  END QUEUE_DURATION,
			  EVENT.DOCK_ALLOCATION_TIME ALLOC_TM,
			  CASE 
			    WHEN EVENT.DOCK_RELEASE_TIME IS NULL THEN
			      NVL(FLOOR((EVENT.DOCK_ALLOCATION_TIME - NVL(EVENT.TRUCK_IN_QUEUE_TIME, EVENT.TRUCK_PARK_ENTRY_TIME))*24*60), 0)
			    ELSE 0
			  END ALLOC_DURATION,
			  (SELECT FREE_TRUCK_PARK_TIME FROM MAST_TCS_INCOMING_PURPOSE WHERE CODE = TRIP.PURPOSE) FREE_DURATION
			  FROM TRUCK_TRIP TRIP
			  JOIN TRUCK_TRIP_EVENTS EVENT
			  ON TRIP.TRIP_ID = EVENT.TRIP_ID
			  WHERE CLOSED = 'N' AND EVENT.TRUCK_PARK_ENTRY_TIME IS NOT NULL AND TRIP.CURR_LOC = 'TPA' AND TRIP.TRUCK_NO = UPPER(#PARAM#)
			)
			SELECT 
			CASE 
			  WHEN (PARK_DURATION - (FREE_DURATION + QUEUE_DURATION + ALLOC_DURATION)) < 0 THEN 0
			  ELSE CEIL((
			  	((PARK_DURATION - (FREE_DURATION + QUEUE_DURATION + ALLOC_DURATION))/60) - (
					SELECT NVL(SUM(QTY), 0) FROM BILL_CHARGE_DTL 
					WHERE ITM_CODE = 'PARKCHRG' AND TRUCK_NO = PARKING.TRUCK_NO AND TRIP_ID = PARKING.TRIP_ID
				)
			))		  	
			END CHARGE_HOURS
			FROM PARKING
		]]>
	</select>
	<select id="sqlGetTCSOutstandCharge" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT ROUND(((TOTAL - WAIVED) - (CASH + CREDIT)), 2) OUTSTANDING
			FROM (
				SELECT NVL(SUM(CALC_CHRG), 0.0) TOTAL, NVL(SUM(WAVR_AMT), 0.0) WAIVED, 
				NVL(SUM(PAID_AMT_CASH), 0.0) CASH, NVL(SUM(PAID_AMT_CREDIT), 0.0) CREDIT
				FROM BILL_CHARGE_DTL
				WHERE TRUCK_NO = UPPER(#PARAM#) AND STATUS = 'PENDING'
			)
		]]>
	</select>
	<select id="sqlGetTCSParkingChargeActual" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT ROUND(NVL(SUM(CALC_CHRG), 0), 2) TOTAL
			FROM BILL_CHARGE_DTL 
			WHERE ITM_CODE = 'PARKCHRG' AND UPPER(TRUCK_NO) = UPPER(#TRUCK_NO#) AND TRIP_ID = #TRIP_ID#
		]]>
	</select>
	<select id="sqlGetTCSIsParkChargeWaived" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(TR_NO), 0, 'N', 'Y')
			FROM BILL_CHARGE_DTL 
			WHERE 
			ITM_CODE = 'PARKCHRG' AND WAVR_IND = 'Y' AND WAVR_DONE = 'Y' AND
			UPPER(TRUCK_NO) = UPPER(#TRUCK_NO#) AND TRIP_ID = #TRIP_ID#
		]]>
	</select>
	<select id="sqlGetTCSOutstandingParkingCharge" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT ROUND(((TOTAL - WAIVED) - (CASH + CREDIT)), 2) OUTSTANDING
			FROM (
				SELECT NVL(SUM(CALC_CHRG), 0.0) TOTAL, NVL(SUM(WAVR_AMT), 0.0) WAIVED, 
				NVL(SUM(PAID_AMT_CASH), 0.0) CASH, NVL(SUM(PAID_AMT_CREDIT), 0.0) CREDIT
				FROM BILL_CHARGE_DTL
				WHERE UPPER(TRUCK_NO) = UPPER(#TRUCK_NO#) AND TRIP_ID = #TRIP_ID# AND ITM_CODE = 'PARKCHRG' AND STATUS = 'PENDING'
			)
		]]>
	</select>
	<select id="sqlGetTCSMinParkingCharge" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT NVL(MIN_CHRG, 0) FROM BILL_ITM_MASTER WHERE ITM_CODE = 'PARKCHRG'
		]]>
	</select>
	<select id="sqlGetTCSParkingChargeCurrent" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			WITH PARKING AS (
			  SELECT TRUCK_NO, TRIP.TRIP_ID,
			  EVENT.TRUCK_PARK_ENTRY_TIME ENTRY_TM,
			  NVL(FLOOR((SYSDATE - EVENT.TRUCK_PARK_ENTRY_TIME)*24*60), 0) PARK_DURATION,
			  EVENT.TRUCK_IN_QUEUE_TIME Q_TM,
			  CASE 
			    WHEN EVENT.DOCK_RELEASE_TIME IS NULL THEN
			      CASE
			        WHEN TRIP.TRUCK_QUEUE_IND = 'Y' THEN
			        NVL(FLOOR((SYSDATE - EVENT.TRUCK_IN_QUEUE_TIME)*24*60), 0)
			        WHEN EVENT.DOCK_RELEASE_TIME IS NOT NULL THEN 0
			        ELSE
			        NVL(FLOOR((NVL(EVENT.DOCK_ALLOCATION_TIME, SYSDATE) - EVENT.TRUCK_IN_QUEUE_TIME)*24*60), 0)
			      END
			    ELSE 0
			  END QUEUE_DURATION,
			  EVENT.DOCK_ALLOCATION_TIME ALLOC_TM,
			  CASE 
			    WHEN EVENT.DOCK_RELEASE_TIME IS NULL THEN
			      NVL(FLOOR((EVENT.DOCK_ALLOCATION_TIME - NVL(EVENT.TRUCK_IN_QUEUE_TIME, EVENT.TRUCK_PARK_ENTRY_TIME))*24*60), 0)
			    ELSE 0
			  END ALLOC_DURATION,
			  (SELECT FREE_TRUCK_PARK_TIME FROM MAST_TCS_INCOMING_PURPOSE WHERE CODE = TRIP.PURPOSE) FREE_DURATION
			  FROM TRUCK_TRIP TRIP
			  JOIN TRUCK_TRIP_EVENTS EVENT
			  ON TRIP.TRIP_ID = EVENT.TRIP_ID
			  WHERE CLOSED = 'N' AND EVENT.TRUCK_PARK_ENTRY_TIME IS NOT NULL AND TRIP.CURR_LOC = 'TPA' AND TRIP.TRUCK_NO = UPPER(#PARAM#)
			)
			SELECT 
			CASE 
			  WHEN (PARK_DURATION - (FREE_DURATION + QUEUE_DURATION + ALLOC_DURATION)) < 0 THEN 0
			  ELSE CEIL(((PARK_DURATION - (FREE_DURATION + QUEUE_DURATION + ALLOC_DURATION))/60))		  	
			END * (
			      SELECT DECODE(NVL(MIN_CHRG, 0), 0, PKG_CALCULATE.GET_UNIT_PRICE(ITM_CODE, NULL), MIN_CHRG) 
			      FROM BILL_ITM_MASTER 
			      WHERE ITM_CODE = 'PARKCHRG'
      		) PARKING_CHARGE
			FROM PARKING			
		]]>
	</select>
	<select id="sqlGetTCSParkingChargeCurrentByDocket"
		parameterClass="java.lang.String" resultClass="java.lang.String">
		<![CDATA[
			WITH PARKING AS (
			  SELECT TRUCK_NO, TRIP.TRIP_ID,
			  EVENT.TRUCK_PARK_ENTRY_TIME ENTRY_TM,
			  NVL(FLOOR((SYSDATE - EVENT.TRUCK_PARK_ENTRY_TIME)*24*60), 0) PARK_DURATION,
			  EVENT.TRUCK_IN_QUEUE_TIME Q_TM,
			  CASE 
			    WHEN EVENT.DOCK_RELEASE_TIME IS NULL THEN
			      CASE
			        WHEN TRIP.TRUCK_QUEUE_IND = 'Y' THEN
			        NVL(FLOOR((SYSDATE - EVENT.TRUCK_IN_QUEUE_TIME)*24*60), 0)
			        WHEN EVENT.DOCK_RELEASE_TIME IS NOT NULL THEN 0
			        ELSE
			        NVL(FLOOR((NVL(EVENT.DOCK_ALLOCATION_TIME, SYSDATE) - EVENT.TRUCK_IN_QUEUE_TIME)*24*60), 0)
			      END
			    ELSE 0
			  END QUEUE_DURATION,
			  EVENT.DOCK_ALLOCATION_TIME ALLOC_TM,
			  CASE 
			    WHEN EVENT.DOCK_RELEASE_TIME IS NULL THEN
			      NVL(FLOOR((EVENT.DOCK_ALLOCATION_TIME - NVL(EVENT.TRUCK_IN_QUEUE_TIME, EVENT.TRUCK_PARK_ENTRY_TIME))*24*60), 0)
			    ELSE 0
			  END ALLOC_DURATION,
			  (SELECT FREE_TRUCK_PARK_TIME FROM MAST_TCS_INCOMING_PURPOSE WHERE CODE = TRIP.PURPOSE) FREE_DURATION
			  FROM TRUCK_TRIP TRIP
			  JOIN TRUCK_TRIP_EVENTS EVENT
			  ON TRIP.TRIP_ID = EVENT.TRIP_ID
			  WHERE CLOSED = 'N' AND EVENT.TRUCK_PARK_ENTRY_TIME IS NOT NULL AND TRIP.CURR_LOC = 'TPA' AND 
			  TRIP.DOCKET_NO = UPPER(#PARAM#) AND TRIP.TRUCK_NO IS NULL
			)
			SELECT 
			CASE 
			  WHEN (PARK_DURATION - (FREE_DURATION + QUEUE_DURATION + ALLOC_DURATION)) < 0 THEN 0
			  ELSE CEIL(((PARK_DURATION - (FREE_DURATION + QUEUE_DURATION + ALLOC_DURATION))/60))		  	
			END * (
			      SELECT DECODE(NVL(MIN_CHRG, 0), 0, PKG_CALCULATE.GET_UNIT_PRICE(ITM_CODE, NULL), MIN_CHRG) 
			      FROM BILL_ITM_MASTER 
			      WHERE ITM_CODE = 'PARKCHRG'
      		) PARKING_CHARGE
			FROM PARKING
		]]>
	</select>
	<select id="sqlGetTCSTempiPassResvMessage" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX('Reservation exist against Dock ' || TRUCK_DOCK || ' between ' || 
			TO_CHAR(RESV_FROM, 'DDMONYY HH24:MI') || ' - ' || TO_CHAR(RESV_TO, 'DDMONYY HH24:MI')) MSG 
			FROM TCS_DOCK_RESV 
			WHERE TRUCK_NO = UPPER(#PARAM#) AND RESV_FROM <= SYSDATE AND RESV_TO >= SYSDATE
		]]>
	</select>
	<select id="sqlGetTCSHasAnyParkingChargeRecord" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT COUNT(TR_NO) CNT
			FROM BILL_CHARGE_DTL 
			WHERE ITM_CODE = 'PARKCHRG' AND UPPER(TRUCK_NO) = UPPER(#TRUCK_NO#) AND TRIP_ID = #TRIP_ID#
		]]>
	</select>
	<select id="sqlGetTCSValidiPassNo" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(IPASS_NO) FROM TCS_IPASS_LIST LIST 
			WHERE LIST.IPASS_NO = #IPASS_NO# AND LIST.IPASS_TYPE = #IPASS_TYPE#
		]]>
	</select>
	<select id="sqlGetTCSCustomerName" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE_DESC FROM CUST_COMPANY	WHERE ACTIVE = 'Y' AND CODE = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSCustomerCode" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND UPPER(CODE_DESC) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSiPassCustomerCode" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE FROM CUST_COMPANY
			WHERE ACTIVE = 'Y'  
			AND (AGENT_YN = 'Y' OR CONS_YN = 'Y' OR SHPR_YN = 'Y' OR TRUCKER_YN = 'Y') 
			AND UPPER(CODE_DESC) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSiPassCustomerType" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT
			CASE 
			  WHEN AGENT_YN = 'Y' THEN 'AGENT'
			  WHEN CONS_YN = 'Y' THEN 'CONSIGNEE'
			  WHEN SHPR_YN = 'Y' THEN 'SHIPPER'
			  WHEN TRUCKER_YN = 'Y' THEN 'TRUCKER'
			END
			FROM CUST_COMPANY
			WHERE ACTIVE = 'Y'
			AND (AGENT_YN = 'Y' OR CONS_YN = 'Y' OR SHPR_YN = 'Y' OR TRUCKER_YN = 'Y')
			AND UPPER(CODE_DESC) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSiPassCustomerTypeDesc" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE_DESC 
	    	FROM MAST_CODE_DTL CODE 
	    	WHERE CODE.CODE_TYPE = 'TCS_IPASS_CUST_TYPE' AND 
	    	CODE.CODE = (
		    	SELECT
				CASE 
				  WHEN AGENT_YN = 'Y' THEN 'AGENT'
				  WHEN CONS_YN = 'Y' THEN 'CONSIGNEE'
				  WHEN SHPR_YN = 'Y' THEN 'SHIPPER'
				  WHEN TRUCKER_YN = 'Y' THEN 'TRUCKER'
				END
				FROM CUST_COMPANY
				WHERE ACTIVE = 'Y'
				AND (AGENT_YN = 'Y' OR CONS_YN = 'Y' OR SHPR_YN = 'Y' OR TRUCKER_YN = 'Y')
				AND UPPER(CODE_DESC) = UPPER(#PARAM#)
	    	)
		]]>
	</select>
	<select id="sqlGetTCSAgentCode" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE FROM CUST_COMPANY
			WHERE AGENT_YN = 'Y' AND ACTIVE = 'Y' AND UPPER(CODE_DESC) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSConsigneeCode" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE FROM CUST_COMPANY 
			WHERE CONS_YN = 'Y' AND ACTIVE = 'Y' AND UPPER(CODE_DESC) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSShipperCode" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE FROM CUST_COMPANY 
			WHERE SHPR_YN = 'Y' AND ACTIVE = 'Y' AND UPPER(CODE_DESC) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSTruckerCode" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE FROM CUST_COMPANY 
			WHERE TRUCKER_YN = 'Y' AND ACTIVE = 'Y' AND UPPER(CODE_DESC) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSSHACode" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE FROM CUST_COMPANY
			WHERE SHA_YN = 'Y' AND ACTIVE = 'Y' AND UPPER(CODE_DESC) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSUserCode" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE FROM CUST_COMPANY
			WHERE TCS_YN = 'Y' AND ACTIVE = 'Y' AND UPPER(CODE_DESC) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSValidMasterDock" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TRUCK_DOCK FROM TCS_DOCK_MASTER WHERE TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSValidWHDock" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(CODE) FROM MAST_WH_LOC WHERE WH_GROUP IN (
  				SELECT WH_GROUP FROM MAST_WH_GROUP GRP WHERE GRP.WH_TYPE = 'TD'
			)
			AND CODE = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSValidDockTemplate" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TEMPLATE_ID FROM TCS_DOCK_TEMPLATE WHERE TEMPLATE_ID = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSMasterCodeValue" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE = #CODE_TYPE# AND CODE = #CODE#
		]]>
	</select>
	<select id="sqlGetTCSDockServiceStatus" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(IN_SERVICE, 'Y', 'IN', 'OUT') FROM TCS_DOCK_MASTER DOCK WHERE TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSDockServiceStatusDesc" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT SVC.CODE_DESC 
			FROM TCS_DOCK_MASTER DOCK
			LEFT OUTER JOIN MAST_CODE_DTL SVC
			ON DECODE(DOCK.IN_SERVICE, 'Y', 'IN', 'OUT') = SVC.CODE AND SVC.CODE_TYPE = 'TCS_DOCK_STATUS'
			WHERE TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSIsDockOccupied" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT NVL(OCCUPIED, 'N') FROM TCS_DOCK_ALLOCATION DOCK WHERE TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSIsDockOccupiedByThisTruck" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT NVL(OCCUPIED, 'N') FROM TCS_DOCK_ALLOCATION DOCK WHERE TRUCK_DOCK = #DOCK_NO# AND 
				TRIP_ID = (SELECT MAX(TRIP_ID) FROM TRUCK_TRIP WHERE CLOSED = 'N' AND TRUCK_NO = #TRUCK_NO#)
		]]>
	</select>
	<select id="sqlGetTCSIsDockAvailableCurrent" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT 
			CASE WHEN STATUS = 'FREE' THEN 'Y' ELSE 'N' END available 
			FROM TCS_DOCK_ALLOCATION DOCK
			WHERE TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSGetAllocTruckForDock" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TRUCK_NO	
			FROM TCS_DOCK_ALLOCATION DOCK 
			WHERE TRUCK_DOCK = #PARAM# AND STATUS = 'ALLOCATED'
		]]>
	</select>
	<select id="sqlGetTCSIsDockReserved" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			WITH INDATE AS (
			  SELECT #DOCK_NO# TRUCK_DOCK, 
			  TO_DATE(#FROM#, 'DDMONYY HH24:MI') + (1 / 24 / 60) FROM_DATE, 
			  TO_DATE(#TO#, 'DDMONYY HH24:MI') - (1 / 24 / 60) TO_DATE
			  FROM DUAL
			)
			SELECT DECODE(COUNT(TR_NO), 0, 'N', 'Y')
			FROM TCS_DOCK_RESV RESV
			JOIN INDATE
			ON RESV.TRUCK_DOCK = INDATE.TRUCK_DOCK
			WHERE
			(RESV.RESV_FROM >= INDATE.FROM_DATE AND RESV.RESV_FROM <= INDATE.TO_DATE) OR
			(RESV.RESV_TO >= INDATE.FROM_DATE AND RESV.RESV_TO <= INDATE.TO_DATE) OR
			(INDATE.FROM_DATE >= RESV.RESV_FROM AND INDATE.FROM_DATE <= RESV.RESV_TO) OR
			(INDATE.TO_DATE >= RESV.RESV_FROM AND INDATE.TO_DATE <= RESV.RESV_TO)
		]]>
	</select>
	<select id="sqlGetTCSIsDockReservedNotForManualAlloc"
		parameterClass="java.util.Map" resultClass="java.lang.String">
		<![CDATA[
			WITH INDATE AS (
			  SELECT #DOCK_NO# TRUCK_DOCK, 
			  TO_DATE(#FROM#, 'DDMONYY HH24:MI') + (1 / 24 / 60) FROM_DATE,
			  TO_DATE(#TO#, 'DDMONYY HH24:MI') - (1 / 24 / 60) TO_DATE 
			  FROM DUAL
			)
			SELECT DECODE(COUNT(TR_NO), 0, 'N', 'Y')
			FROM TCS_DOCK_RESV RESV
			JOIN INDATE
			ON RESV.TRUCK_DOCK = INDATE.TRUCK_DOCK
			WHERE (TRUCK_NO IS NOT NULL OR TRUCK_NO <> #TRUCK_NO#) AND (
				(RESV.RESV_FROM >= INDATE.FROM_DATE AND RESV.RESV_FROM <= INDATE.TO_DATE) OR
				(RESV.RESV_TO >= INDATE.FROM_DATE AND RESV.RESV_TO <= INDATE.TO_DATE) OR
				(INDATE.FROM_DATE >= RESV.RESV_FROM AND INDATE.FROM_DATE <= RESV.RESV_TO) OR
				(INDATE.TO_DATE >= RESV.RESV_FROM AND INDATE.TO_DATE <= RESV.RESV_TO)
			)		
		]]>
	</select>
	<select id="sqlGetTCSIsDockSchColl" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(TRUCK_DOCK), 0, 'N', 'Y') RESERVED
			FROM (
				SELECT DOCK.TRUCK_DOCK, 
				    TO_DATE(DT.PROC_DATE || ' ' || TRIM(TO_CHAR(SCH.TIME_FROM,'0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
				    TO_DATE(DT.PROC_DATE || ' ' || TRIM(TO_CHAR(SCH.TIME_TO,'0000')), 'DDMONYY HH24MI') - (1 / 24 / 60) TO_DATE
				FROM CUST_AGENT_SCH_COLL_TIME SCH
				JOIN CUST_AGENT_SCH_COLL_TRUCK_DOCK DOCK
				ON SCH.TR_NO = DOCK.TR_NO
				JOIN (
				  SELECT TO_CHAR(FROMDATE + COUNTER, 'DDMONYY') AS PROC_DATE, 
				  CASE WHEN (TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1) = 0 THEN 7 ELSE TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1 END AS WEEK
				  FROM (
					  SELECT TO_DATE(TO_CHAR(TO_DATE(#FROM#, 'DDMONYY HH24:MI'), 'DDMONYY'), 'DDMONYY') FROMDATE, 
					  TO_DATE(TO_CHAR(TO_DATE(#TO#, 'DDMONYY HH24:MI'), 'DDMONYY'), 'DDMONYY') TODATE 
					  FROM DUAL			   
				  ) DTINPUT, XMLTABLE('for $$counter in 0 to xs:int(D) return $$counter'
				  PASSING XMLELEMENT(D, ROUND(TODATE - FROMDATE))
				  COLUMNS COUNTER INTEGER PATH '.')				
				) DT
				ON SCH.EFF_FROM <= DT.PROC_DATE AND SCH.EFF_TO >= DT.PROC_DATE AND SCH.DAY_FRQ LIKE ('%' || DT.WEEK || '%')
				WHERE PURPOSE IN('CRG', 'ULD') AND DOCK.TRUCK_DOCK = #DOCK_NO#
			) SCH
			WHERE
			(SCH.FROM_DATE >= TO_DATE(#FROM#, 'DDMONYY HH24:MI') AND SCH.FROM_DATE <= TO_DATE(#TO#, 'DDMONYY HH24:MI')) OR
			(SCH.TO_DATE >= TO_DATE(#FROM#, 'DDMONYY HH24:MI') AND SCH.TO_DATE <= TO_DATE(#TO#, 'DDMONYY HH24:MI')) OR
			(TO_DATE(#FROM#, 'DDMONYY HH24:MI') >= SCH.FROM_DATE AND TO_DATE(#FROM#, 'DDMONYY HH24:MI') <= SCH.TO_DATE) OR
			(TO_DATE(#TO#, 'DDMONYY HH24:MI') >= SCH.FROM_DATE AND TO_DATE(#TO#, 'DDMONYY HH24:MI') <= SCH.TO_DATE)
		]]>
	</select>
	<select id="sqlGetTCSIsDockAvailable" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			WITH INDATE AS (
			  SELECT #DOCK_NO# TRUCK_DOCK, 
			  TO_DATE(#FROM#, 'DDMONYY HH24:MI') + (1 / 24 / 60) FROM_DATE, 
			  TO_DATE(#TO#, 'DDMONYY HH24:MI') - (1 / 24 / 60) TO_DATE 
			  FROM DUAL
			)
			SELECT DECODE(COUNT(ALLOC.TRUCK_DOCK), 0, 'Y', 'N')
			FROM TCS_DOCK_ALLOCATION ALLOC
			JOIN INDATE
			ON ALLOC.TRUCK_DOCK = INDATE.TRUCK_DOCK
			WHERE
			(
	          ALLOC.ALLOCATED_FROM BETWEEN FROM_DATE AND TO_DATE OR
	          ALLOC.ALLOCATED_TILL BETWEEN FROM_DATE AND TO_DATE OR
	          (ALLOC.ALLOCATED_FROM <= FROM_DATE AND ALLOC.ALLOCATED_TILL >= TO_DATE)
			)
		]]>
	</select>
	<select id="sqlGetTCSTruckAllocDock" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRUCK_DOCK) TRUCK_DOCK FROM TCS_DOCK_ALLOCATION
			WHERE TRIP_ID = (SELECT MAX(TRIP.TRIP_ID) FROM TRUCK_TRIP TRIP WHERE TRIP.CLOSED = 'N' AND TRIP.TRUCK_NO = UPPER(#PARAM#))
		]]>
	</select>
	<select id="sqlGetTCSIsStrongRoom" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(PURPOSE_1, 'VAL', 'Y', 'N') 
			FROM TCS_DOCK_MASTER DOCK WHERE TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSIsSHADock" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(PURPOSE_1, 'SHC', 'Y', 'N') 
			FROM TCS_DOCK_MASTER DOCK WHERE TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSIsSHATruckForAgent" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(IPASS_NO), 0, 'N', 'Y')
			FROM TCS_IPASS_MASTER IPASS
			WHERE IPASS.CUST_TYPE = 'SHA' AND 
			IPASS.CUST_NO = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #AGENT# AND ACTIVE = 'Y') AND
			TRUCK_NO = #TRUCK#
		]]>
	</select>
	<select id="sqlGetTCSIsSHATruck" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(IPASS_NO), 0, 'N', 'Y')
			FROM TCS_IPASS_MASTER IPASS
			WHERE IPASS.CUST_TYPE = 'SHA' AND TRUCK_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSSHATruckAgent" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT IPASS.CUST_NO
			FROM TCS_IPASS_MASTER IPASS
			WHERE IPASS.CUST_TYPE = 'SHA' AND TRUCK_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSDockReleaseInfo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TRUCK_NO || ',' || NVL(PURP.CODE_DESC, PURPOSE) || '(' || REASON.CODE_DESC || ')' AS dockInfo
			FROM TRUCK_TRIP TRIP
			LEFT OUTER JOIN MAST_CODE_DTL REASON
			ON TRIP.INCOMING_REASON = REASON.CODE AND REASON.CODE_TYPE = 'TCS_INCOMING_REASON'
			JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE			
			WHERE TRIP.TRIP_ID = (
				SELECT TRIP_ID
				FROM TCS_DOCK_ALLOCATION DOCK
				WHERE TRUCK_DOCK = #PARAM#
			)
		]]>
	</select>
	<select id="sqlGetTCSDockLevel" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DOCK_LEVEL FROM TCS_DOCK_MASTER WHERE TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSDockLevelDesc" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CODE.CODE_DESC 
			FROM TCS_DOCK_MASTER DOCK
			JOIN MAST_CODE_DTL CODE
			ON DOCK.DOCK_LEVEL = CODE.CODE AND CODE.CODE_TYPE = 'TCS_DOCK_LEVEL'
			WHERE TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSTruckiPassNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT IPASS_NO FROM TCS_IPASS_MASTER IPASS	WHERE TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSTruckCustomerCode" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CUST.CODE
			FROM TCS_IPASS_MASTER IPASS
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			WHERE 
			IPASS.TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSTruckCustomerName" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT NVL(CUST.CODE_DESC, 'NULL')
			FROM TCS_IPASS_MASTER IPASS
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			WHERE 
			IPASS.TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSCustomerMailFax" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSMailFaxBO">
		<![CDATA[
			SELECT 
				EMAIL1 AS emailAddress1 ,EMAIL2 AS emailAddress2, 
				EMAIL3 AS emailAddress3 , EMAIL4 AS emailAddress4 , 
				EMAIL5 AS emailAddress5 , 
				FAX1 AS faxNumber1, FAX2 AS faxNumber2, FAX3 AS faxNumber3
			FROM CUST_COMPANY 
			WHERE CODE = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSBanChargeItemDesc" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT ITM_DESC FROM BILL_ITM_MASTER WHERE OWNER_IND = 'OPS' AND ITM_CODE = #PARAM#
		]]>
	</select>
	<!-- -->
	<!-- Common/Misc Call SQL Read (Begin) -->
	<!-- -->
	<!-- -->
	<!-- Common Insert SQL for TCS Tables (Begin) -->
	<!-- -->
	<insert id="sqlInsertiPassList" parameterClass="cargo.cms.tcs.bo.TCSIPassListBO">
		<![CDATA[
			INSERT INTO TCS_IPASS_LIST
			  (
			    IPASS_NO, IPASS_TYPE, VALID_YN,
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    UPPER(#IPassNo#), #IPassType#, #validYN#,
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertiPassMaster" parameterClass="cargo.cms.tcs.bo.TCSIPassMasterBO">
		<![CDATA[
			INSERT INTO TCS_IPASS_MASTER
			  (
			    IPASS_NO, IPASS_TYPE, 
			    ISSUED_ON, STATUS, DOCKET_NO, PURPOSE, 
			    REISSUED, REISSUE_REASON, 
			    TRUCK_NO, TRUCK_TYPE, TRUCK_CATEGORY, 
			    CUST_NO, CUST_TYPE, 
			    APPLICANT_NAME, APPLICANT_HKID, 
			    PASSWORD, 
			    CARGO_COLL_ALLOWED, ULD_COLL_ALLOWED, 
			    CONTACT_NO, NTFY_CONTACT_NO, 
			    WAIVE_CHARGE,
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    UPPER(#IPassNo#), #IPassType#, 
			    TO_DATE(#issuedOn#, 'DDMONYY HH24:MI'), #status#, #docketNo#, #purpose#, 
			    #reissued#, #reissueReason#, 
			    UPPER(#truckNo#), #truckType#, #truckCategory#, 
			    #custNo#, #custType#, 
			    #applicantName#, #applicantHKID#, 
			    #password#, 
			    #cargoCollAllowed#, #ULDCollAllowed#, 
			    #contactNo#, #ntfyContactNo#, 
			    #waiveCharge#,
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertiPassHistory" parameterClass="cargo.cms.tcs.bo.TCSIPassMasterBO">
		<![CDATA[
			INSERT INTO TCS_IPASS_HIST
			  (
			    IPASS_NO, IPASS_TYPE, 
			    ISSUED_ON, DOCKET_NO, REISSUED,	REISSUE_REASON, 
			    TRUCK_NO, TRUCK_TYPE, TRUCK_CATEGORY, 
			    CUST_NO, CUST_TYPE, 
			    APPLICANT_NAME, APPLICANT_HKID, 
			    CARGO_COLL_ALLOWED, ULD_COLL_ALLOWED, 
			    CONTACT_NO, WAIVE_CHARGE, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    UPPER(#IPassNo#), #IPassType#, 
			    TO_DATE(#issuedOn#, 'DDMONYY HH24:MI'), #docketNo#, 
			    #reissued#, #reissueReason#, 
			    UPPER(#truckNo#), #truckType#, #truckCategory#, 
			    #custNo#, #custType#, 
			    #applicantName#, #applicantHKID#, 
			    #cargoCollAllowed#, #ULDCollAllowed#, 
			    #contactNo#, #waiveCharge#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertiPassLog" parameterClass="cargo.cms.tcs.bo.TCSIPassMasterBO">
		<![CDATA[
			INSERT INTO TCS_IPASS_LOG
			  (
			    IPASS_NO, IPASS_TYPE, DOCKET_NO, 
			    TRUCK_NO, TRUCK_TYPE, TRUCK_CATEGORY, 
			    CUST_NO, CUST_TYPE, 
			    APPLICANT_NAME, APPLICANT_HKID, 
			    CONTACT_NO, NTFY_CONTACT_NO, TR_TYPE, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    UPPER(#IPassNo#), #IPassType#, #docketNo#, 
			    UPPER(#truckNo#), #truckType#, #truckCategory#, 
			    #custNo#, #custType#, 
			    #applicantName#, #applicantHKID#, 
			    #contactNo#, #ntfyContactNo#, #trType#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertDocket" parameterClass="cargo.cms.tcs.bo.TCSDocketBO">
		<![CDATA[
			INSERT INTO TCS_DOCKET
			  (
			    DOCKET_NO, IMAGE, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    UPPER(#docketNo#), #image#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertBanMaster" parameterClass="cargo.cms.tcs.bo.TCSBanMasterBO">
		<![CDATA[
			INSERT INTO TCS_BAN_MASTER
			  (
			    BAN_REASON, BAN_DESC, BAN_TYPE, BAN_NATURE, 
			    NO_BOOKING, FINE_YN, NO_ENTRY, NO_EXIT, 
			    ITM_CODE, BAN_DAYS, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    #banReason#, #banDesc#, #banType#, #banNature#, 
			    #noBooking#, #fineYn#, #noEntry#, #noExit#, 
			    #itmCode#, #banDays#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertBanTruck" parameterClass="cargo.cms.tcs.bo.TCSBanTruckBO">
		<![CDATA[
			INSERT INTO TCS_BAN_TRUCK
			  (
			    TR_NO, TRUCK_NO, IPASS_NO, 
			    BAN_REASON, RESTRICTIONS, BAN_RMK, 
			    BAN_FROM, BAN_TO, 
			    STATUS, 
			    RLS_USER_ID, RLS_DATE, RLS_RMK, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    TCS_BAN_TRUCK_SEQ.NEXTVAL, UPPER(#truckNo#), UPPER(#IPassNo#), 
			    #banReason#, #restrictions#, #banRmk#, 
			    TO_DATE(#banFrom#, 'DDMONYY'), TO_DATE(#banTo#, 'DDMONYY'), 
			    #status#, 
			    NULL, NULL, NULL,
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertWarningLetter" parameterClass="cargo.cms.tcs.bo.TCSWrngLetterBO">
		<![CDATA[
			INSERT INTO TCS_WRNG_LETTER
			  (
			    TRIP_ID, WARNING_RMK, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    #tripId#, #warningRmk#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertSHAConfig" parameterClass="cargo.cms.tcs.bo.TCSShaConfigBO">
		<![CDATA[
			INSERT INTO TCS_SHA_CONFIG
			  (
			    CUST_NO, TRUCK_QUOTA, 
			    ENTRY_CHK_POINT, EXIT_CHK_POINT, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    #custNo#, #truckQuota#, 
			    #entryChkPoint#, #exitChkPoint#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertSHADocks" parameterClass="cargo.cms.tcs.bo.TCSShaDocksBO">
		<![CDATA[
			INSERT INTO TCS_SHA_DOCKS
			  (
			    CUST_NO, TRUCK_DOCK, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    #custNo#, UPPER(#truckDock#), 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertTruckTripEvents" parameterClass="cargo.cms.tcs.bo.TCSTruckTripEventsBO">
		<![CDATA[
			INSERT INTO TRUCK_TRIP_EVENTS
			  (
			    TRIP_ID, 
			    TRUCK_PARK_ENTRY_TIME, DECL_PURPOSE_TIME, TRUCK_IN_QUEUE_TIME, 
			    DOCK_ALLOCATION_TIME, LEAVE_TRUCKPARK_TIME, TERMINAL_ENTRY_TIME, 
			    LVL2_RAMP_CHKPT_TIME, LVL3_RAMP_CHKPT_TIME, LVL3_EAST_CHKPT_TIME, 
			    LVL3_WEST_CHKPT_TIME, LVL5_RAMP_CHKPT_TIME, LVL5_EAST_CHKPT_TIME, 
			    LVL5_WEST_CHKPT_TIME, LVL7_UP_CHKPT, LVL7_DOWN_CHKPT, 
			    DOCK_OCCUPY_TIME, LEAVE_DOCK_TIME, LVL3_EXIT_CHKPT_TIME, 
			    LVL5_EXIT_CHKPT_TIME, TERMINAL_EXIT_TIME, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    #tripId#, 
			    TO_DATE(#truckParkEntryTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#declPurposeTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#truckInQueueTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#dockAllocationTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#leaveTruckParkTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#terminalEntryTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl2RampChkPtTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl3RampChkPtTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl3EastChkPtTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl3WestChkPtTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl5RampChkPtTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl5EastChkPtTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl5WestChkPtTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl7UpChkPt#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl7DownChkPt#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#dockOccupyTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#leaveDockTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl3ExitChkPtTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#lvl5ExitChkPtTime#, 'DDMONYY HH24:MI'), 
			    TO_DATE(#terminalExitTime#, 'DDMONYY HH24:MI'), 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertDockMaster" parameterClass="cargo.cms.tcs.bo.TCSDockMasterBO">
		<![CDATA[
			INSERT INTO TCS_DOCK_MASTER
			  (
			    TRUCK_DOCK, DOCK_NAME, 
			    DOCK_LEVEL, ZONE, SIDE, 
			    PURPOSE_1, PURPOSE_2, PURPOSE_3, PURPOSE_4, PURPOSE_5, 
			    IN_SERVICE, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    UPPER(#truckDock#), #dockDesc#, 
			    #level#, #zone#, #side#, 
			    #purpose1#, #purpose2#, #purpose3#, #purpose4#, #purpose5#, 
			    #svcStatus#,
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertDockAllocation" parameterClass="cargo.cms.tcs.bo.TCSDockAllocationBO">
		<![CDATA[
			INSERT INTO TCS_DOCK_ALLOCATION
			  (
			    TRUCK_DOCK, STATUS, OCCUPIED, 
			    ALLOCATION_DURATION, TRIP_ID, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    UPPER(#truckDock#), #status#, #occupied#, 
			    #allocationDuration#, #tripId#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertDockTemplate" parameterClass="cargo.cms.tcs.bo.TCSDockTemplateBO">
		<![CDATA[
			INSERT INTO TCS_DOCK_TEMPLATE
			  (
			    TEMPLATE_ID, TEMPLATE_DESC, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    #templateId#, #templateDesc#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertDockTemplateDtl" parameterClass="cargo.cms.tcs.bo.TCSDockTemplateDtlBO">
		<![CDATA[
			INSERT INTO TCS_DOCK_TEMPLATE_DTL
			  (
			    TEMPLATE_ID, TRUCK_DOCK, 
			    PURPOSE_1, PURPOSE_2, PURPOSE_3, PURPOSE_4, PURPOSE_5, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    #templateId#, #truckDock#, 
			    #purpose1#, #purpose2#, #purpose3#, #purpose4#, #purpose5#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertDockTemplateWalkin" parameterClass="cargo.cms.tcs.bo.TCSDockTemplateWalkinBO">
		<![CDATA[
			INSERT INTO TCS_DOCK_TEMPLATE_WALKIN
			  (
			    TEMPLATE_ID, PURPOSE, QUOTA, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    #templateId#, #purpose#, #quota#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertDockTemplateSch" parameterClass="cargo.cms.tcs.bo.TCSDockTemplateSchBO">
		<![CDATA[
			INSERT INTO TCS_DOCK_TEMPLATE_SCH
			  (
			    TR_NO, 
			    EFF_FROM, EFF_TO, 
			    FREQUENCY, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    #trNo#, 
			    TO_DATE(#effFrom# || ' 0000', 'DDMONYY HH24MI'), TO_DATE(#effTo# || ' 2359', 'DDMONYY HH24MI'), 
			    #frequency#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertDockTemplateSchDtl" parameterClass="cargo.cms.tcs.bo.TCSDockTemplateSchDtlBO">
		<![CDATA[
			INSERT INTO TCS_DOCK_TEMPLATE_SCH_DTL
			  (
			    TR_NO, DOC_LINE_NO, 
			    TIME_FROM, TIME_TO, TIME_FROM_HHMI, TIME_TO_HHMI,  
			    TEMPLATE_ID, 
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    #trNo#, #docLineNo#, 
			    #timeFrom#, #timeTo#, #timeFromHHMI#, #timeToHHMI#, 
			    #templateId#, 
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertDockReserve" parameterClass="cargo.cms.tcs.bo.TCSDockResvBO">
		<![CDATA[
			INSERT INTO TCS_DOCK_RESV
			  (
			    TR_NO, TRUCK_DOCK, TRUCK_NO, 
			    RESV_FROM, RESV_TO, 
			    REASON, DURATION,
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    TCS_DOCK_RESV_SEQ.NEXTVAL, UPPER(#truckDock#), UPPER(#truckNo#), 
			    TO_DATE(#resvFrom#, 'DDMONYY HH24:MI'), TO_DATE(#resvTo#, 'DDMONYY HH24:MI'), #reason#,
			    DECODE(#duration#, NULL, (TO_DATE(#resvTo#, 'DDMONYY HH24:MI') - TO_DATE(#resvFrom#, 'DDMONYY HH24:MI')) * 1440, #duration#),
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertDockReserveCommon" parameterClass="cargo.cms.common.tcs.bo.TCSDockResvBO">
		<![CDATA[
			INSERT INTO TCS_DOCK_RESV
			  (
			    TR_NO, TRUCK_DOCK, TRUCK_NO, 
			    RESV_FROM, RESV_TO, 
			    REASON, DURATION,
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    TCS_DOCK_RESV_SEQ.NEXTVAL, UPPER(#truckDock#), UPPER(#truckNo#), 
			    TO_DATE(#resvFrom#, 'DDMONYY HH24:MI'), TO_DATE(#resvTo#, 'DDMONYY HH24:MI'), #reason#,
			    DECODE(#duration#, NULL, (TO_DATE(#resvTo#, 'DDMONYY HH24:MI') - TO_DATE(#resvFrom#, 'DDMONYY HH24:MI')) * 1440, #duration#),
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertTruckEvents" parameterClass="cargo.cms.tcs.bo.TCSTruckEventsBO">
		<![CDATA[
			INSERT INTO TCS_TRUCK_EVENTS
			(
			TR_NO, TRUCK_NO, 
			EVENT_ID, EVENT_DESC, 
			CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			)
			VALUES
			(
			TCS_TRUCK_EVENT_SEQ.NEXTVAL, UPPER(#truckNo#), 
			#eventId#, #eventDesc#, 
			#crUserId#, SYSDATE, #lmUserId#, SYSDATE
			)
		]]>
	</insert>
	<insert id="sqlInsertTruckEventsCommon" parameterClass="cargo.cms.common.tcs.bo.TruckEventsBO">
		<![CDATA[
			INSERT INTO TCS_TRUCK_EVENTS
			(
			TR_NO, TRUCK_NO, 
			EVENT_ID, EVENT_DESC, 
			CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			)
			VALUES
			(
			TCS_TRUCK_EVENT_SEQ.NEXTVAL, UPPER(#truckNo#), 
			#eventId#, #eventDesc#, 
			#crUserId#, SYSDATE, #lmUserId#, SYSDATE
			)
		]]>
	</insert>
	<insert id="sqlInsertIPCEvents" parameterClass="cargo.cms.tcs.bo.TCSIPCEventsBO">
		<![CDATA[
			INSERT INTO TCS_IPC_EVENTS
			(
			TR_NO, EVENT_ID, CR_USER_ID, CR_DATE,
			REQUEST, RESPONSE
			)
			VALUES
			(
			TCS_IPC_EVENT_SEQ.NEXTVAL, #eventId#, #crUserId#, SYSDATE, 
			#request#, #response#
			)
		]]>
	</insert>
	<!-- -->
	<!-- Common Insert SQL for TCS Tables (End) -->
	<!-- -->
	<!-- -->
	<!-- Drop Down List (Begin) -->
	<!-- -->
	<select id="sqlGetTCSSHAList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT CODE codeId, CODE_DESC codeDesc FROM CUST_COMPANY
			WHERE SHA_YN = 'Y' AND ACTIVE = 'Y'
		]]>
	</select>
	<select id="sqlGetTCSTemplateList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT TEMPLATE_ID codeDesc, TEMPLATE_ID codeId FROM TCS_DOCK_TEMPLATE
			ORDER BY TEMPLATE_ID
		]]>
	</select>
	<select id="sqlGetTCSBanReasonList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT BAN_REASON codeDesc, BAN_REASON codeId FROM TCS_BAN_MASTER
			ORDER BY BAN_REASON
		]]>
	</select>
	<select id="sqlGetTCSManualBanReasonList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT BAN_REASON codeDesc, BAN_REASON codeId FROM TCS_BAN_MASTER
			WHERE BAN_TYPE = 'MANUAL'
			ORDER BY BAN_REASON
		]]>
	</select>
	<select id="sqlGetTCSUserDivisionList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT CODE_DESC codeDesc, CODE codeId FROM SEC_DIVISION
		]]>
	</select>
	<select id="sqlGetTCSTruckTypeList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT CODE codeId, CODE_DESC codeDesc FROM MAST_TCS_TRUCK_TYPE ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSInPurposeList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT CODE_DESC codeDesc, CODE codeId 
			FROM MAST_TCS_INCOMING_PURPOSE
			WHERE APPLICABLE_AT_PARKING = 'Y' OR APPLICABLE_AT_ENTRANCE = 'Y'
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSDockPurposeList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT CODE_DESC codeDesc, CODE codeId FROM MAST_TCS_DOCK_PURPOSE ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSTemplateDockPurposeList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT CODE_DESC codeDesc, CODE codeId FROM MAST_TCS_DOCK_PURPOSE 
			WHERE CODE NOT IN('SHC', 'VAL')
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSBkgPurposeList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT CODE_DESC codeDesc, CODE codeId FROM MAST_TCS_DOCK_PURPOSE 
			WHERE CODE NOT IN('SHC', 'VAL', 'URGENT_PPK')
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSCheckPointList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT SENSORY_LOCATION_CODE codeDesc, SENSORY_LOCATION_CODE codeId 
			FROM TCS_SENSORY_LOCATION
			WHERE SUBSTR(SENSORY_LOCATION_CODE, 1, 3) = 'CPO'
		]]>
	</select>
	<select id="sqlGetTCSIPCFallbackCheckPointList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT 'TME1' codeId, 'Terminal/Dock Entrance' codeDesc, 1 colum FROM DUAL
			UNION
			SELECT 'TPE1' codeId, 'Truck Park Entrance' codeDesc, 2 colum FROM DUAL
			UNION
			SELECT 'TPX1' codeId, 'Truck Park Exit' codeDesc, 3 colum FROM DUAL
			UNION
			SELECT 'TMX1' codeId, 'Terminal Exit - G/F' codeDesc, 4 colum FROM DUAL	
			UNION
			SELECT 'TMX3' codeId, 'Terminal Exit - L3' codeDesc, 5 colum FROM DUAL
			UNION
			SELECT 'TMX5' codeId, 'Terminal Exit - L5' codeDesc, 6 colum FROM DUAL
      		ORDER BY 3
		]]>
	</select>
	<select id="sqlGetTCSRecordEventTruckParkPurposeCategoryList"
		parameterClass="java.lang.String" resultClass="cargo.cms.tcs.bo.TCSNameValueBO">
		<![CDATA[
			SELECT DISTINCT
			CASE 
			WHEN CATEGORY = 'SCH' THEN CODE
			WHEN CATEGORY = 'EHU' THEN CODE
      		WHEN CATEGORY = 'CBX' THEN CODE
			ELSE CATEGORY
			END value,
			CASE 
			WHEN CATEGORY = 'EXP' THEN 'Export'
			WHEN CATEGORY = 'IMP' THEN 'Import'
			WHEN CATEGORY = 'ULD' THEN 'ULD'
			WHEN CATEGORY = 'OTH' THEN 'Other'
			ELSE CODE_DESC
			END name
			FROM MAST_TCS_INCOMING_PURPOSE
			WHERE APPLICABLE_AT_PARKING = 'Y'
			ORDER BY 1
		]]>
	</select>
	<select id="sqlGetTCSRecordEventTruckParkPurposeList"
		parameterClass="java.lang.String" resultClass="cargo.cms.tcs.bo.TCSNameValueBO">
		<![CDATA[
			SELECT CODE value, CODE_DESC name
			FROM MAST_TCS_INCOMING_PURPOSE
			WHERE APPLICABLE_AT_PARKING = 'Y' AND CATEGORY = #PARAM#
			ORDER BY 2
		]]>
	</select>
	<select id="sqlGetTCSRecordEventTerminalPurposeList"
		parameterClass="java.lang.String" resultClass="cargo.cms.tcs.bo.TCSNameValueBO">
		<![CDATA[
			SELECT CODE value, CODE_DESC name
			FROM MAST_TCS_INCOMING_PURPOSE
			WHERE APPLICABLE_AT_ENTRANCE = 'Y' 
			ORDER BY 2
		]]>
	</select>
	<select id="sqlGetTCSRecordEventTruckParkSHCList"
		parameterClass="java.lang.String" resultClass="cargo.cms.tcs.bo.TCSNameValueBO">
		<![CDATA[
			SELECT ('SHC_' || CODE) value, CODE_DESC name FROM CUST_COMPANY
			WHERE SHA_YN = 'Y' AND ACTIVE = 'Y'
		]]>
	</select>
	<select id="sqlGetTCSRecordEventTruckParkSCHList"
		parameterClass="java.lang.String" resultClass="cargo.cms.tcs.bo.TCSNameValueBO">
		<![CDATA[
			SELECT DISTINCT ('SCH_' || CUST_NO) value, CUST.CODE_DESC name
			FROM (
			  SELECT AGENT_CUST_NO CUST_NO FROM EIR_SCH_COLL URF 
			  WHERE 
			  URF.TIME_SLOT_DATE >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') AND 
			  URF.TIME_SLOT_DATE <= TO_DATE(TO_CHAR(SYSDATE + 1, 'DDMONYY'), 'DDMONYY')
			  UNION
			  SELECT AGENT_ID CUST_NO FROM IMP_SCH_COLL IMP 
			  WHERE 
			  IMP.SCH_COLL_DATE >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') AND
			  IMP.SCH_COLL_DATE <= TO_DATE(TO_CHAR(SYSDATE + 1, 'DDMONYY'), 'DDMONYY')
			) SCH
			JOIN CUST_COMPANY CUST
			ON SCH.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
		]]>
	</select>
	<!-- -->
	<!-- Drop Down List (End) -->
	<!-- -->
	<!-- -->
	<!-- Auto Completion (Begin) -->
	<!-- -->
	<select id="sqlGetTCSPermiPassCustomerListAjax" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT CODE_DESC AS customerName FROM CUST_COMPANY
			WHERE ACTIVE = 'Y'
			AND (AGENT_YN = 'Y' OR TCS_YN = 'Y' OR TRUCKER_YN = 'Y' OR SHA_YN = 'Y') 
			AND UPPER(CODE_DESC) LIKE UPPER(#keySearchStr# ||'%') AND ROWNUM <= #maxRecFetch#
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSCompanyListAjax" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT CODE_DESC AS customerName FROM CUST_COMPANY
			WHERE ACTIVE = 'Y'
			AND (AGENT_YN = 'Y' OR CONS_YN = 'Y' OR SHPR_YN = 'Y' OR TRUCKER_YN = 'Y' OR SHA_YN = 'Y' OR TCS_YN = 'Y') 
			AND UPPER(CODE_DESC) LIKE UPPER(#keySearchStr# ||'%') AND ROWNUM <= #maxRecFetch#
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSAgentListAjax" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT CODE_DESC AS customerName FROM CUST_COMPANY
			WHERE 
			AGENT_YN = 'Y' AND ACTIVE = 'Y' 
			AND UPPER(CODE_DESC) LIKE UPPER(#keySearchStr# ||'%') AND ROWNUM <= #maxRecFetch#
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSConsigneeListAjax" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT CODE_DESC AS customerName FROM CUST_COMPANY 
			WHERE 
			CONS_YN = 'Y' AND ACTIVE = 'Y' 
			AND UPPER(CODE_DESC) LIKE UPPER(#keySearchStr# ||'%') AND ROWNUM <= #maxRecFetch#
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSShipperListAjax" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT CODE_DESC AS customerName FROM CUST_COMPANY 
			WHERE 
			SHPR_YN = 'Y' AND ACTIVE = 'Y' 
			AND UPPER(CODE_DESC) LIKE UPPER(#keySearchStr# ||'%') AND ROWNUM <= #maxRecFetch#
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSTruckerListAjax" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT CODE_DESC AS customerName FROM CUST_COMPANY 
			WHERE 
			TRUCKER_YN = 'Y' AND ACTIVE = 'Y' 
			AND UPPER(CODE_DESC) LIKE UPPER(#keySearchStr# ||'%') AND ROWNUM <= #maxRecFetch#
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSSHAListAjax" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT CODE_DESC AS customerName FROM CUST_COMPANY 
			WHERE 
			SHA_YN = 'Y' AND ACTIVE = 'Y' 
			AND UPPER(CODE_DESC) LIKE UPPER(#keySearchStr# ||'%') AND ROWNUM <= #maxRecFetch#
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSUserListAjax" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT CODE_DESC AS customerName FROM CUST_COMPANY 
			WHERE 
			TCS_YN = 'Y' AND ACTIVE = 'Y' 
			AND UPPER(CODE_DESC) LIKE UPPER(#keySearchStr# ||'%') AND ROWNUM <= #maxRecFetch#
			ORDER BY CODE_DESC
		]]>
	</select>
	<!-- -->
	<!-- Auto Completion (End) -->
	<!-- -->
	<!-- -->
	<!-- Use case SQL Statements (Begin) -->
	<!-- -->
	<!-- REGISTRATION (BEGIN) -->
	<!-- -->
	<!-- Create Temporary iPass -->
	<select id="sqlGetTCSiPassType" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(IPASS_TYPE) FROM TCS_IPASS_MASTER IPASS WHERE TRUCK_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSiPassStatus" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT 
			CASE WHEN LIST.VALID_YN = 'N' THEN 'Void'
			ELSE NVL(CODE_DESC, 'Inactive')
			END
			FROM TCS_IPASS_LIST LIST
	   	 	LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
	    	ON LIST.IPASS_NO = IPASS.IPASS_NO
			LEFT OUTER JOIN MAST_CODE_DTL CODE
			ON IPASS.STATUS = CODE.CODE AND CODE.CODE_TYPE = 'TCS_IPASS_STATUS'
			WHERE
			LIST.IPASS_NO = #IPASS_NO#
		]]>
		<isNotEmpty property="IPASS_TYPE">
			<![CDATA[ AND LIST.IPASS_TYPE = #IPASS_TYPE# ]]>
		</isNotEmpty>
	</select>
	<select id="sqlGetTCSiPassStatusCode" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT
			CASE WHEN LIST.VALID_YN = 'N' THEN 'VOID'
			ELSE NVL(CODE, 'INACTIVE')
			END			
			FROM TCS_IPASS_LIST LIST
	   	 	LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
	    	ON LIST.IPASS_NO = IPASS.IPASS_NO
			LEFT OUTER JOIN MAST_CODE_DTL CODE
			ON IPASS.STATUS = CODE.CODE AND CODE.CODE_TYPE = 'TCS_IPASS_STATUS'
			WHERE
			LIST.IPASS_NO = #IPASS_NO#
		]]>
		<isNotEmpty property="IPASS_TYPE">
			<![CDATA[ AND LIST.IPASS_TYPE = #IPASS_TYPE# ]]>
		</isNotEmpty>
	</select>
	<select id="sqlGetTCSTempiPassAssoc" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT 
			   CASE WHEN LIST.VALID_YN = 'N' THEN 'X'
			   WHEN IPASS.IPASS_NO IS NULL THEN 'N'
			   ELSE 'Y' END STATUS
			FROM TCS_IPASS_LIST LIST
			   LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
			   ON IPASS.IPASS_NO = LIST.IPASS_NO
			WHERE
			LIST.IPASS_NO = #PARAM# AND LIST.IPASS_TYPE = 'T'
		]]>
	</select>
	<select id="sqlGetTCSPermiPassAssoc" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT 
			   CASE WHEN LIST.VALID_YN = 'N' THEN 'X'
			   WHEN IPASS.IPASS_NO IS NULL THEN 'N'
			   ELSE 'Y' END STATUS
			FROM TCS_IPASS_LIST LIST
			   LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
			   ON IPASS.IPASS_NO = LIST.IPASS_NO
			WHERE
			LIST.IPASS_NO = #PARAM# AND LIST.IPASS_TYPE = 'P'	
		]]>
	</select>
	<select id="sqlGetTCSIsiPassActive" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(IPASS_NO), 0, 'N', 'Y') FROM TCS_IPASS_MASTER
			WHERE TRUCK_NO = UPPER(#PARAM#) AND STATUS = 'ACTIVE'
		]]>
	</select>
	<select id="sqlGetTCSHasTemporaryiPass" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(IPASS_NO), 0, 'N', 'Y') FROM TCS_IPASS_MASTER
			WHERE TRUCK_NO = UPPER(#PARAM#) AND IPASS_TYPE = 'T'
		]]>
	</select>
	<select id="sqlGetTCSHasPermanentiPass" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(IPASS_NO), 0, 'N', 'Y') FROM TCS_IPASS_MASTER
			WHERE TRUCK_NO = UPPER(#PARAM#) AND IPASS_TYPE = 'P'
		]]>
	</select>
	<select id="sqlGetTCSiPassMasterModifyDate" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') 
			FROM TCS_IPASS_MASTER IPASS WHERE IPASS.IPASS_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSTruckMaxTempiPassNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(IPASS_NO) FROM TCS_IPASS_MASTER
			WHERE TRUCK_NO = UPPER(#PARAM#) AND IPASS_TYPE = 'T'
		]]>
	</select>
	<select id="sqlGetTCSTruckMaxPermiPassNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(IPASS_NO) FROM TCS_IPASS_MASTER
			WHERE TRUCK_NO = UPPER(#PARAM#) AND IPASS_TYPE = 'P'
		]]>
	</select>
	<select id="sqlGetTCSIsTruckHasValidiPass" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(IPASS_NO), 0, 'N', 'Y')
			FROM TCS_IPASS_MASTER
			WHERE TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSDocketMaxiPassNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(IPASS_NO)
			FROM (
				SELECT MAX(IPASS_NO) IPASS_NO FROM TCS_IPASS_MASTER WHERE DOCKET_NO = #PARAM#
				UNION
				SELECT MAX(IPASS_NO) IPASS_NO FROM TCS_IPASS_HIST WHERE DOCKET_NO = #PARAM#
			)
		]]>
	</select>
	<select id="sqlGetTCSValidDocketNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(DOCKET_NO) FROM TCS_DOCKET WHERE DOCKET_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSDocketImageId" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(IMAGE) FROM TCS_DOCKET WHERE DOCKET_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSDockets" parameterClass="cargo.cms.tcs.bo.TCSRegisterSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSDocketBO">
		<![CDATA[
			SELECT DOCKET.DOCKET_NO docketNo, DOCKET.IMAGE image, TO_CHAR(DOCKET.CR_DATE, 'DDMONYY HH24:MI') crDate
			FROM TCS_DOCKET DOCKET
			JOIN TRUCK_TRIP TRIP
		    ON DOCKET.DOCKET_NO = TRIP.DOCKET_NO AND TRIP.TRUCK_NO IS NULL AND TRIP.CLOSED = 'N'
		    WHERE TRIP.CURR_LOC IS NOT NULL
		]]>
		<isNotEmpty property="dateFrom">
		<![CDATA[ AND DOCKET.CR_DATE >= TO_DATE(#dateFrom#, 'DDMONYY HH24:MI') ]]>
		</isNotEmpty>
		<isNotEmpty property="dateTo">
		<![CDATA[ AND DOCKET.CR_DATE <= TO_DATE(#dateTo#, 'DDMONYY HH24:MI') ]]>
		</isNotEmpty>
		<dynamic>
			<![CDATA[ ORDER BY DOCKET.CR_DATE ]]>
		</dynamic>
	</select>
	<resultMap class="cargo.cms.tcs.bo.TCSImageBO" id="docketImageMap">
		<result property="transactionId" column="IMG_SESSION_ID"
			jdbcType="VARCHAR" javaType="java.lang.String" />
		<result property="image" column="IMG_THUMBNAIL" jdbcType="BLOB"
			javaType="[B" />
	</resultMap>
	<select id="sqlGetTCSDocketImage" parameterClass="java.lang.String"
		resultMap="docketImageMap">
		<![CDATA[
			SELECT IMG_SESSION_ID, IMG_THUMBNAIL FROM FW_IMAGE_STORE WHERE IMG_SESSION_ID = #PARAM#
		]]>
	</select>
	<update id="sqlUpdateTCSTruckInPurpose" parameterClass="cargo.cms.tcs.bo.TCSRegisterBO">
		<![CDATA[
			UPDATE TRUCK_TRIP
			SET PURPOSE = #purpose#, LM_DATE = SYSDATE, LM_USER_ID = #lmUserId# 
			WHERE TRIP_ID = #tripId#
		]]>
	</update>
	<!-- Maintain Temporary iPass -->
	<select id="sqlGetTCSSearchMaintTempiPass" parameterClass="cargo.cms.tcs.bo.TCSRegisterSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSRegisterResultBO">
		<![CDATA[
			SELECT IPASS_NO ipassNo, TRUCK_NO truckNo,
			  DOCKET_NO docketNo, TO_CHAR(ISSUED_ON, 'DDMONYY HH24:MI') issueDateTime,
			  CONTACT_NO contactNo, STAT.CODE_DESC ipassStatus,
			  TO_CHAR(IPASS.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_IPASS_MASTER IPASS
			LEFT OUTER JOIN MAST_CODE_DTL STAT
			ON IPASS.STATUS = STAT.CODE	AND STAT.CODE_TYPE = 'TCS_IPASS_STATUS'
			WHERE
			IPASS.IPASS_TYPE = 'T'
		]]>
		<isEqual property="searchByOpt2" compareValue="Y">
			<isNotEmpty property="dateFrom">
				<![CDATA[
					AND IPASS.ISSUED_ON >= TO_DATE(#dateFrom#, 'DDMONYY HH24:MI')
				]]>
			</isNotEmpty>
			<isNotEmpty property="dateTo">
				<![CDATA[
					AND IPASS.ISSUED_ON <= TO_DATE(#dateTo#, 'DDMONYY HH24:MI')
				]]>
			</isNotEmpty>
		</isEqual>
		<isEqual property="searchByOpt2" compareValue="N">
			<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(IPASS.TRUCK_NO) = UPPER(#truckNo#) ]]>
			</isNotEmpty>
			<isNotEmpty property="docketNo"><![CDATA[ AND IPASS.DOCKET_NO = #docketNo# ]]>
			</isNotEmpty>
			<isNotEmpty property="ipassNo"><![CDATA[ AND IPASS.IPASS_NO = #ipassNo# ]]>
			</isNotEmpty>
		</isEqual>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				IPASS.IPASS_NO, IPASS.TRUCK_NO,
				IPASS.ISSUED_ON, IPASS.STATUS
			</isEmpty>
		</dynamic>
	</select>
	<update id="sqlUpdateTCSiPassMasterStatus" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TCS_IPASS_MASTER SET STATUS = #STATUS#, LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE WHERE IPASS_NO = #IPASS_NO#
		]]>
	</update>
	<update id="sqlUpdateTCSActivateTempiPass" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TCS_IPASS_MASTER 
			SET STATUS = 'ACTIVE', LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE 
			WHERE TRUCK_NO = #TRUCK_NO# AND IPASS_TYPE = 'T'
		]]>
	</update>
	<update id="sqlUpdateTCSActivatePermiPass" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TCS_IPASS_MASTER 
			SET STATUS = 'ACTIVE', LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE 
			WHERE TRUCK_NO = #TRUCK_NO# AND IPASS_TYPE = 'P'
		]]>
	</update>
	<update id="sqlUpdateTempiPassMaster" parameterClass="cargo.cms.tcs.bo.TCSIPassMasterBO">
		<![CDATA[
			UPDATE TCS_IPASS_MASTER
			SET 
			PURPOSE = #purpose#, TRUCK_TYPE = #truckType#,
			CUST_NO = #custNo#, CUST_TYPE = #custType#,
			APPLICANT_NAME = #applicantName#, APPLICANT_HKID = #applicantHKID#, 
			PASSWORD = #password#, CONTACT_NO = #contactNo#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE
			IPASS_NO = #IPassNo#
		]]>
	</update>
	<delete id="sqlDeleteiPassMaster" parameterClass="java.util.Map">
		<![CDATA[
			DELETE FROM TCS_IPASS_MASTER WHERE IPASS_NO = #IPASS_NO# AND IPASS_TYPE = #IPASS_TYPE#
		]]>
	</delete>
	<delete id="sqlInvalidatgeiPassNo" parameterClass="java.lang.String">
		<![CDATA[
			UPDATE TCS_IPASS_LIST SET VALID_YN = 'N' WHERE IPASS_NO = #PARAM# 
		]]>
	</delete>
	<!-- Maintain Truck Master -->
	<select id="sqlGetTCSSearchMaintTruckMaster" parameterClass="cargo.cms.tcs.bo.TCSRegisterSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSRegisterResultBO">
		<![CDATA[
			SELECT TRUCK_NO truckNo, TRUCK_TYPE truckType,
			(SELECT CODE_DESC FROM MAST_TCS_TRUCK_TYPE WHERE CODE = IPASS.TRUCK_TYPE) truckTypeDesc, 
			CUST.CODE_DESC customerName, CONTACT_NO contactNo,
			IPASS_NO ipassNo, STAT.CODE_DESC ipassStatus,
			lmMultiUserTime
			FROM (
				SELECT TRUCK_NO, TRUCK_TYPE, CUST_NO,
				  CONTACT_NO, IPASS_NO, STATUS,
				  TO_CHAR(IPASS.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
				FROM TCS_IPASS_MASTER IPASS
				WHERE 
				IPASS_TYPE = 'P'
				UNION
				SELECT TRUCK_NO, TRUCK_TYPE, CUST_NO,
				  CONTACT_NO, IPASS_NO, 'VOID' STATUS,
				  TO_CHAR(IPASS.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
				FROM TCS_IPASS_HIST IPASS
				WHERE 
				IPASS_TYPE = 'P'
			) IPASS
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			LEFT OUTER JOIN MAST_CODE_DTL STAT
			ON IPASS.STATUS = STAT.CODE AND STAT.CODE_TYPE = 'TCS_IPASS_STATUS'
			WHERE 1 = 1
		]]>
		<isNotEmpty property="truckNo"> AND UPPER(IPASS.TRUCK_NO) =
			UPPER(#truckNo#)
		</isNotEmpty>
		<isNotEmpty property="truckType"> AND IPASS.TRUCK_TYPE = #truckType#
		</isNotEmpty>
		<isNotEmpty property="status"> AND IPASS.STATUS = #status#
		</isNotEmpty>
		<isNotEmpty property="customerName"> AND UPPER(CUST.CODE_DESC) =
			UPPER(#customerName#)
		</isNotEmpty>
		<isNotEmpty property="ipassNo"> AND IPASS.IPASS_NO = #ipassNo#
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				IPASS.TRUCK_NO, IPASS.TRUCK_TYPE,
				CUST.CODE_DESC
			</isEmpty>
		</dynamic>
	</select>
	<update id="sqlUpdatePermiPassMaster" parameterClass="cargo.cms.tcs.bo.TCSIPassMasterBO">
		<![CDATA[
			UPDATE TCS_IPASS_MASTER
			SET 
			ISSUED_ON = TO_DATE(#issuedOn#, 'DDMONYY HH24:MI'),
			REISSUED = #reissued#, REISSUE_REASON = #reissueReason#,
			TRUCK_TYPE = #truckType#, TRUCK_CATEGORY = #truckCategory#, 
			CUST_NO = #custNo#, CUST_TYPE = #custType#,
			CARGO_COLL_ALLOWED = #cargoCollAllowed#, ULD_COLL_ALLOWED = #ULDCollAllowed#,
			CONTACT_NO = #contactNo#, NTFY_CONTACT_NO = #ntfyContactNo#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE
			IPASS_NO = #IPassNo#
		]]>
	</update>
	<update id="sqlUpdatePermiPassPassword" parameterClass="cargo.cms.tcs.bo.TCSIPassMasterBO">
		<![CDATA[
			UPDATE TCS_IPASS_MASTER
			SET 
			PASSWORD = #password#, 
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE
			IPASS_NO = #IPassNo#
		]]>
	</update>
	<update id="sqlUpdatePermiPassNotifyNo" parameterClass="cargo.cms.tcs.bo.TCSIPassMasterBO">
		<![CDATA[
			UPDATE TCS_IPASS_MASTER
			SET 
			NTFY_CONTACT_NO = #ntfyContactNo#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE
			IPASS_NO = #IPassNo#
		]]>
	</update>
	<!-- Maintain Truck By Customer -->
	<select id="sqlGetTCSSearchMaintTruckByCustomer" parameterClass="cargo.cms.tcs.bo.TCSRegisterSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSRegisterResultBO">
		<![CDATA[
			SELECT TRUCK_NO truckNo, TRUCK_TYPE truckType,
			(SELECT CODE_DESC FROM MAST_TCS_TRUCK_TYPE WHERE CODE = IPASS.TRUCK_TYPE) truckTypeDesc, 
			CONTACT_NO contactNo, IPASS_NO ipassNo, STAT.CODE_DESC ipassStatus,
			TO_CHAR(IPASS.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_IPASS_MASTER IPASS
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			LEFT OUTER JOIN MAST_CODE_DTL STAT
			ON IPASS.STATUS = STAT.CODE AND STAT.CODE_TYPE = 'TCS_IPASS_STATUS'
			WHERE 
			IPASS_TYPE = 'P' AND TRUCK_CATEGORY = 'CUSTOMER' AND CUST_NO IS NOT NULL
		]]>
		<isNotEmpty property="customerName"> AND UPPER(CUST.CODE_DESC) =
			UPPER(#customerName#)
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				IPASS.TRUCK_NO, IPASS.TRUCK_TYPE,
				IPASS.STATUS
			</isEmpty>
		</dynamic>
	</select>
	<!-- Enquire iPass Log -->
	<select id="sqlGetTCSSearchEnquireiPassLog" parameterClass="cargo.cms.tcs.bo.TCSRegisterSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSRegisterResultBO">
		<![CDATA[
			SELECT LOG.IPASS_NO ipassNo, LOG.TRUCK_NO truckNo, LOG.DOCKET_NO docketNo,
			  NVL2(LOG.CUST_TYPE, CUST.CODE_DESC, LOG.APPLICANT_NAME) customerName, 
			  NVL2(LOG.CUST_TYPE, CUSTTYPE.CODE_DESC, 'Walk-in') customerType,
			  IPASSTYPE.CODE_DESC ipassType, LOG.CR_USER_ID crUserId, 
			  TO_CHAR(LOG.CR_DATE, 'DDMONYY HH24:MI') transactionDate, IPASSACT.CODE_DESC transactionType,
			  LOG.CONTACT_NO contactNo, LOG.NTFY_CONTACT_NO notifyContactNo, IPASSACT.SNO
			FROM TCS_IPASS_LOG LOG
			LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
			ON LOG.IPASS_NO = IPASS.IPASS_NO
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON LOG.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			LEFT OUTER JOIN MAST_CODE_DTL CUSTTYPE
			ON LOG.CUST_TYPE = CUSTTYPE.CODE AND CUSTTYPE.CODE_TYPE = 'TCS_IPASS_CUST_TYPE'
			LEFT OUTER JOIN MAST_CODE_DTL IPASSTYPE
			ON LOG.IPASS_TYPE = IPASSTYPE.CODE AND IPASSTYPE.CODE_TYPE = 'TCS_IPASS_TYPE'
			LEFT OUTER JOIN MAST_CODE_DTL IPASSACT
			ON LOG.TR_TYPE = IPASSACT.CODE AND IPASSACT.CODE_TYPE = 'TCS_IPASS_ACTION'
			WHERE 1 = 1	
		]]>
		<isNotEmpty property="dateFrom">
		<![CDATA[
			AND LOG.CR_DATE >= TO_DATE(#dateFrom#, 'DDMONYY HH24:MI:SS')
		]]>
		</isNotEmpty>
		<isNotEmpty property="dateTo">
		<![CDATA[
			AND LOG.CR_DATE <= TO_DATE(#dateTo#, 'DDMONYY HH24:MI:SS')
		]]>
		</isNotEmpty>
		<isNotEmpty property="truckNo"> AND UPPER(LOG.TRUCK_NO) =
			UPPER(#truckNo#)
		</isNotEmpty>
		<isNotEmpty property="type"> AND LOG.IPASS_TYPE = #type#
		</isNotEmpty>
		<isNotEmpty property="ipassNo"> AND LOG.IPASS_NO = #ipassNo#
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<!-- Fix: SNO is added to display re-issue with same time; issue will 
				have VOID record as well as ISSUE record -->
			<isEmpty property="sortOrder.sortField">
				LOG.CR_DATE DESC, IPASSACT.SNO,
				LOG.TRUCK_NO, CUST.CODE_DESC
			</isEmpty>
		</dynamic>
	</select>
	<!-- -->
	<!-- REGISTRATION (END) -->
	<!-- -->
	<!-- -->
	<!-- BAN TRUCK (BEGIN) -->
	<!-- -->
	<!-- Auto Ban -->
	<select id="sqlGetTCSTruckDidNotReachTerminal" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TRUCK_NO truckNo
			FROM (
				SELECT TRIP.TRUCK_NO, FLOOR((SYSDATE - EVENT.DOCK_ALLOCATION_TIME) * 24 * 60) MINUTES,
				NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'TCS_BAN_PARK_TO_DOCK_DURATION'), 0) VALUE,
				(SELECT COUNT(TRUCK_NO) FROM TCS_BAN_TRUCK	
				  WHERE TRUCK_NO = TRIP.TRUCK_NO AND STATUS IN('BANNED', 'ONETIME') AND 
				  BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')) BANNED
				FROM TRUCK_TRIP TRIP
        		JOIN TRUCK_TRIP_EVENTS EVENT
				ON TRIP.TRIP_ID = EVENT.TRIP_ID AND EVENT.DOCK_OCCUPY_TIME IS NULL
				WHERE CLOSED = 'N' AND TRIP.TRUCK_DOCK IS NOT NULL AND TRIP.CURR_LOC NOT IN('TPA', 'L1SR')
			)
			WHERE BANNED = 0 AND MINUTES > VALUE
		]]>
	</select>
	<select id="sqlGetTCSTruckOverstayedAfterWarn" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TRUCK_NO truckNo
			FROM (
				SELECT TRIP.TRUCK_NO, FLOOR((SYSDATE - WARN.CR_DATE) * 24 * 60) MINUTES,
				NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'TCS_BAN_LEAVE_TERMINAL_DURATION'), 0) VALUE,
				(SELECT COUNT(TRUCK_NO) FROM TCS_BAN_TRUCK	
				  WHERE TRUCK_NO = TRIP.TRUCK_NO AND STATUS IN('BANNED', 'ONETIME') AND 
				  BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')) BANNED
				FROM TCS_WRNG_LETTER WARN
				LEFT OUTER JOIN TRUCK_TRIP TRIP
				ON WARN.TRIP_ID = TRIP.TRIP_ID
				WHERE CLOSED = 'N' AND TRIP.TRUCK_DOCK IS NOT NULL AND TRIP.CURR_LOC NOT IN('TPA', 'L1SR')
			)
			WHERE BANNED = 0 AND MINUTES > VALUE
		]]>
	</select>
	<update id="sqlTCSUpdateBanTruck" parameterClass="cargo.cms.tcs.bo.TCSBanTruckBO">
		<![CDATA[
			UPDATE TCS_BAN_TRUCK
			SET BAN_FROM = TO_DATE(#banFrom#, 'DDMONYY'), BAN_TO = TO_DATE(#banTo#, 'DDMONYY'), 
			BAN_REASON =#banReason#, RESTRICTIONS = #restrictions#, BAN_RMK = #banRmk#,
			STATUS = #status#, LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TR_NO = #trNo#
		]]>
	</update>
	<!-- Auto Release -->
	<update id="sqlTCSUpdateAutoBanRelease" parameterClass="java.lang.String">
		<![CDATA[
			UPDATE TCS_BAN_TRUCK
			SET STATUS = 'RELEASED', LM_USER_ID = 'SYSTEM', LM_DATE = SYSDATE,
			RLS_USER_ID = 'SYSTEM', RLS_DATE = SYSDATE, RLS_RMK = 'Auto Release'
			WHERE BAN_TO < TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') AND STATUS IN('ONETIME', 'BANNED')
		]]>
	</update>
	<insert id="sqlInsertTCSAutoReleaseEvent" parameterClass="cargo.cms.tcs.bo.TCSTruckEventsBO">
		<![CDATA[
			INSERT INTO TCS_TRUCK_EVENTS
			(
			  TR_NO, TRUCK_NO, 
			  EVENT_ID, EVENT_DESC, 
			  CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			)
			SELECT
			TCS_TRUCK_EVENT_SEQ.NEXTVAL TR_NO, TRUCK_NO, 
			'RELEASE_BAN' EVENT_ID, 
			('Auto Release (' || TO_CHAR(BAN_FROM, 'DDMONYY') || '-' || TO_CHAR(BAN_TO, 'DDMONYY') || ')') EVENT_DESC, 
			'SYSTEM' CR_USER_ID, SYSDATE CR_DATE, 'SYSTEM' LM_USER_ID, SYSDATE LM_DATE
			FROM
			TCS_BAN_TRUCK BAN
			WHERE BAN_TO < TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') AND STATUS IN('ONETIME', 'BANNED')
		]]>
	</insert>
	<!-- Create Ban Truck -->
	<select id="sqlGetTCSiPassOfTruck" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(IPASS_NO) FROM TCS_IPASS_MASTER
			WHERE TRUCK_NO = UPPER(#PARAM#) AND STATUS IN ('ACTIVE', 'INACTIVE')
		]]>
	</select>
	<select id="sqlGetTCSTruckOfiPass" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TRUCK_NO) FROM TCS_IPASS_MASTER
			WHERE IPASS_NO = #PARAM# AND STATUS IN ('ACTIVE', 'INACTIVE')
		]]>
	</select>
	<select id="sqlGetTCSIsTruckBanned" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(TRUCK_NO) FROM TCS_BAN_TRUCK 
			WHERE TRUCK_NO = UPPER(#PARAM#) AND STATUS IN('BANNED', 'ONETIME') AND 
			BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
		]]>
	</select>
	<select id="sqlGetTCSIsTruckAllowedBooking" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT NVL(REASON.NO_BOOKING, 'N')
			FROM TCS_BAN_TRUCK BAN
			JOIN TCS_BAN_MASTER REASON
			ON BAN.BAN_REASON = REASON.BAN_REASON
			WHERE TRUCK_NO = UPPER(#PARAM#) AND STATUS IN('BANNED', 'ONETIME') 
			AND BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
		]]>
	</select>
	<select id="sqlGetTCSIsTruckAllowedEntry" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT NVL(REASON.NO_ENTRY, 'N')
			FROM TCS_BAN_TRUCK BAN
			JOIN TCS_BAN_MASTER REASON
			ON BAN.BAN_REASON = REASON.BAN_REASON
			WHERE TRUCK_NO = UPPER(#PARAM#) AND STATUS IN('BANNED', 'ONETIME') 
			AND BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
		]]>
	</select>
	<select id="sqlGetTCSIsTruckAllowedExit" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT NVL(REASON.NO_EXIT, 'N')
			FROM TCS_BAN_TRUCK BAN
			JOIN TCS_BAN_MASTER REASON
			ON BAN.BAN_REASON = REASON.BAN_REASON
			WHERE TRUCK_NO = UPPER(#PARAM#) AND STATUS IN('BANNED') 
			AND BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
		]]>
	</select>
	<select id="sqlGetTCSIsTruckOnetimeReleased" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(TRUCK_NO) FROM TCS_BAN_TRUCK 
			WHERE TRUCK_NO = UPPER(#PARAM#) AND STATUS = 'ONETIME' AND 
			BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
		]]>
	</select>
	<!-- Maintain Ban Truck -->
	<select id="sqlGetTCSHHTSearchBanTruck" parameterClass="cargo.cms.tcs.bo.TCSBanSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSBanResultBO">
		<![CDATA[
			SELECT
			TRUCK.TR_NO trNo, TRUCK.TRUCK_NO truckNo, CUST.CODE_DESC companyName,
			TRUCK.IPASS_NO ipassNo,	TRUCK.BAN_REASON banReason, TRUCK.RESTRICTIONS restrictions,
			BANTYP.CODE_DESC type, BANNAT.CODE_DESC nature,
			TO_CHAR(BAN_FROM, 'DDMONYY') || '-' || TO_CHAR(BAN_TO, 'DDMONYY') banPeriod,
			TO_CHAR(BAN_FROM, 'DDMONYY') banFrom,
			BANSTAT.CODE_DESC status, TO_CHAR(TRUCK.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM
			TCS_BAN_TRUCK TRUCK
			LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
			ON TRUCK.IPASS_NO = IPASS.IPASS_NO
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			LEFT OUTER JOIN MAST_CODE_DTL BANSTAT
			ON TRUCK.STATUS = BANSTAT.CODE AND BANSTAT.CODE_TYPE = 'TCS_BAN_STATUS'
			LEFT OUTER JOIN TCS_BAN_MASTER BAN
			ON TRUCK.BAN_REASON = BAN.BAN_REASON
			LEFT OUTER JOIN MAST_CODE_DTL BANTYP
			ON BAN.BAN_TYPE = BANTYP.CODE AND BANTYP.CODE_TYPE = 'TCS_BAN_TYPE'
			LEFT OUTER JOIN MAST_CODE_DTL BANNAT
			ON BAN.BAN_NATURE = BANNAT.CODE AND BANNAT.CODE_TYPE = 'TCS_BAN_NATURE'
			WHERE TRUCK.STATUS IN('BANNED', 'ONETIME')
		]]>
		<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(TRUCK.TRUCK_NO) = UPPER(#truckNo#) ]]>
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				TRUCK.BAN_FROM DESC, TRUCK.BAN_TO
			</isEmpty>
		</dynamic>
	</select>
	<select id="sqlGetTCSSearchBanTruck" parameterClass="cargo.cms.tcs.bo.TCSBanSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSBanResultBO">
		<![CDATA[
			SELECT
			TRUCK.TR_NO trNo, TRUCK.TRUCK_NO truckNo, CUST.CODE_DESC companyName,
			TRUCK.IPASS_NO ipassNo,	TRUCK.BAN_REASON banReason, TRUCK.RESTRICTIONS restrictions,
			BANTYP.CODE_DESC type, BANNAT.CODE_DESC nature,
			TO_CHAR(BAN_FROM, 'DDMONYY') || NVL2(BAN_FROM, '-', '') || TO_CHAR(BAN_TO, 'DDMONYY') banPeriod,
			TO_CHAR(BAN_FROM, 'DDMONYY') banFrom,
			BANSTAT.CODE_DESC status, TO_CHAR(TRUCK.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM
			TCS_BAN_TRUCK TRUCK
			LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
			ON TRUCK.IPASS_NO = IPASS.IPASS_NO
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			LEFT OUTER JOIN MAST_CODE_DTL BANSTAT
			ON TRUCK.STATUS = BANSTAT.CODE AND BANSTAT.CODE_TYPE = 'TCS_BAN_STATUS'
			LEFT OUTER JOIN TCS_BAN_MASTER BAN
			ON TRUCK.BAN_REASON = BAN.BAN_REASON
			LEFT OUTER JOIN MAST_CODE_DTL BANTYP
			ON BAN.BAN_TYPE = BANTYP.CODE AND BANTYP.CODE_TYPE = 'TCS_BAN_TYPE'
			LEFT OUTER JOIN MAST_CODE_DTL BANNAT
			ON BAN.BAN_NATURE = BANNAT.CODE AND BANNAT.CODE_TYPE = 'TCS_BAN_NATURE'
			WHERE 1 = 1
		]]>
		<isNotEmpty property="banned"><![CDATA[ AND TRUCK.STATUS IN('BANNED', 'ONETIME') ]]>
		</isNotEmpty>
		<isNotEmpty property="companyName"><![CDATA[ AND UPPER(CUST.CODE_DESC) = UPPER(#companyName#) ]]>
		</isNotEmpty>
		<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(TRUCK.TRUCK_NO) = UPPER(#truckNo#) ]]>
		</isNotEmpty>
		<isNotEmpty property="ipassNo"><![CDATA[ AND TRUCK.IPASS_NO = #ipassNo# ]]>
		</isNotEmpty>
		<isNotEmpty property="banType"><![CDATA[ AND BAN.BAN_TYPE = #banType# ]]>
		</isNotEmpty>
		<isNotEmpty property="banNature"><![CDATA[ AND BAN.BAN_NATURE = #banNature# ]]>
		</isNotEmpty>
		<isNotEmpty property="banFrom">
			<isNotEmpty property="banTo">
				<![CDATA[
					AND (
						TO_DATE(#banFrom#, 'DDMONYY') BETWEEN TRUCK.BAN_FROM AND TRUCK.BAN_TO OR
						TO_DATE(#banTo#, 'DDMONYY') BETWEEN TRUCK.BAN_FROM AND TRUCK.BAN_TO OR
						TRUCK.BAN_FROM BETWEEN TO_DATE(#banFrom#, 'DDMONYY') AND TO_DATE(#banTo#, 'DDMONYY') OR
						TRUCK.BAN_TO BETWEEN TO_DATE(#banFrom#, 'DDMONYY') AND TO_DATE(#banTo#, 'DDMONYY')
					)
				]]>
			</isNotEmpty>
		</isNotEmpty>
		<isNotEmpty property="banFrom">
			<isEmpty property="banTo">
				<![CDATA[
					AND TO_DATE(#from#, 'DDMONYY') BETWEEN TRUCK.BAN_FROM AND TRUCK.BAN_TO
				]]>
			</isEmpty>
		</isNotEmpty>
		<isNotEmpty property="banTo">
			<isEmpty property="banFrom">
				<![CDATA[
					AND TO_DATE(#banTo#, 'DDMONYY') BETWEEN TRUCK.BAN_FROM AND TRUCK.BAN_TO
				]]>
			</isEmpty>
		</isNotEmpty>		
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				TRUCK.BAN_FROM DESC, TRUCK.BAN_TO
			</isEmpty>
		</dynamic>
	</select>
	<select id="sqlGetTCSBanTruckModifyDate" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') 
			FROM TCS_BAN_TRUCK BAN 
			WHERE TR_NO = #PARAM#
		]]>
	</select>
	<update id="sqlUpdateTCSBanOnetime" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TCS_BAN_TRUCK SET STATUS = 'BANNED', LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE UPPER(TRUCK_NO) = UPPER(#TRUCK_NO#) AND STATUS = 'ONETIME' AND 
			BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
		]]>
	</update>
	<update id="sqlUpdateBanTruckReleaseRemark" parameterClass="cargo.cms.tcs.bo.TCSBanBO">
		<![CDATA[
			UPDATE TCS_BAN_TRUCK
			SET RLS_RMK = #releaseRemark#, RLS_USER_ID = #lmUserId#, RLS_DATE = SYSDATE, STATUS = #status#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TR_NO = #trNo#
		]]>
	</update>
	<update id="sqlUpdateBanTruckReleasePeriod" parameterClass="cargo.cms.tcs.bo.TCSBanBO">
		<![CDATA[
			UPDATE TCS_BAN_TRUCK
			SET BAN_FROM = TO_DATE(#newBanFrom#, 'DDMONYY'), BAN_TO = TO_DATE(#newBanTo#, 'DDMONYY'), 
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TR_NO = #trNo#
		]]>
	</update>
	<select id="sqlGetTCSSearchBanTruckCurrent" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSBanBO">
		<![CDATA[
			SELECT TRUCK_NO truckNo, IPASS_NO ipassNo, DECODE(STATUS, 'BANNED', 'Y', 'ONETIME', 'Y', 'N') banned
			FROM TCS_BAN_TRUCK
			WHERE 
			TRUCK_NO = UPPER(#PARAM#) AND TR_NO = (SELECT MAX(TR_NO) FROM TCS_BAN_TRUCK WHERE TRUCK_NO = UPPER(#PARAM#))
		]]>
	</select>
	<select id="sqlGetTCSSearchBanTruckHistory" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSBanBO">
		<![CDATA[
			SELECT
			TRUCK.IPASS_NO ipassNo, TRUCK.BAN_REASON banReason, RESTRICTIONS restrictions, BANTYP.CODE_DESC type, 
			TO_CHAR(BAN_FROM, 'DDMONYY') || '-' || TO_CHAR(BAN_TO, 'DDMONYY') banPeriod,
			BAN_RMK remark, DECODE(TRUCK.STATUS, 'BANNED', 'N', 'ONETIME', 'N', 'Y') released, RLS_USER_ID releasedBy, 
			DECODE(IPASS.STATUS, 'ACTIVE', 'Y', 'N') active,
			TRUCK.CR_USER_ID crUserId, TO_CHAR(TRUCK.CR_DATE, 'DDMONYY HH24:MI') crDate,
			TRUCK.LM_USER_ID lmUserId, TO_CHAR(TRUCK.LM_DATE, 'DDMONYY HH24:MI') lmDate
			FROM
			TCS_BAN_TRUCK TRUCK
			LEFT OUTER JOIN TCS_BAN_MASTER BAN
			ON TRUCK.BAN_REASON = BAN.BAN_REASON
			LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
			ON TRUCK.IPASS_NO = IPASS.IPASS_NO
			LEFT OUTER JOIN MAST_CODE_DTL BANTYP
			ON BAN.BAN_TYPE = BANTYP.CODE AND BANTYP.CODE_TYPE = 'TCS_BAN_TYPE'		
			WHERE
			TRUCK.TRUCK_NO = UPPER(#PARAM#)
			ORDER BY TRUCK.LM_DATE DESC
		]]>
	</select>
	<!-- Maintain Ban Reason -->
	<select id="sqlGetTCSSearchBanReason" parameterClass="cargo.cms.tcs.bo.TCSBanSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSBanResultBO">
		<![CDATA[
			SELECT BAN_REASON reasonName, BAN_DESC reasonDesc, 
			BAN.BAN_TYPE banType, TYP.CODE_DESC type,
			  SUBSTR(
			  (
			    CASE WHEN NO_BOOKING = 'Y' THEN 'No Booking, ' END ||
			    CASE WHEN NO_ENTRY = 'Y' THEN 'No Entry, ' END ||
			    CASE WHEN FINE_YN = 'Y' THEN 'Fine, ' END ||
			    CASE WHEN NO_EXIT = 'Y' THEN 'No Exit, ' END  
			  ), 1, 
			  INSTR((
			    CASE WHEN NO_BOOKING = 'Y' THEN 'No Booking, ' END ||
			    CASE WHEN NO_ENTRY = 'Y' THEN 'No Entry, ' END ||
			    CASE WHEN FINE_YN = 'Y' THEN 'Fine, ' END ||
			    CASE WHEN NO_EXIT = 'Y' THEN 'No Exit, ' END
			  ), ',', -1) - 1) restrictions,
			ITM_CODE chargeItem, BAN_DAYS banDays,
			TO_CHAR(BAN.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM
			TCS_BAN_MASTER BAN
			LEFT OUTER JOIN MAST_CODE_DTL TYP
			ON BAN.BAN_TYPE = TYP.CODE AND TYP.CODE_TYPE = 'TCS_BAN_TYPE'
			WHERE 1 = 1
		]]>
		<isNotEmpty property="reasonName">
			<![CDATA[ AND UPPER(BAN_REASON) = UPPER(#reasonName#) ]]>
		</isNotEmpty>
		<isNotEmpty property="type"> AND BAN_TYPE = #type#</isNotEmpty>
		<isNotEmpty property="nature"> AND BAN_NATURE = #nature#
		</isNotEmpty>
		<dynamic>
			<![CDATA[ ORDER BY 1 ]]>
		</dynamic>
	</select>
	<update id="sqlUpdateTCSBanReason" parameterClass="cargo.cms.tcs.bo.TCSBanMasterBO">
		<![CDATA[
			UPDATE TCS_BAN_MASTER
			SET BAN_DESC = #banDesc#, BAN_NATURE = #banNature#, 
			NO_BOOKING = #noBooking#, FINE_YN = #fineYn#, NO_ENTRY = #noEntry#, NO_EXIT = #noExit#,
			ITM_CODE = #itmCode#, BAN_DAYS = #banDays#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE BAN_REASON = #banReason#
		]]>
	</update>
	<delete id="sqlDeleteTCSBanReason" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM TCS_BAN_MASTER WHERE BAN_REASON = #PARAM#
		]]>
	</delete>
	<select id="sqlGetTCSBanMasterHasRecord" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(BAN_REASON) FROM TCS_BAN_TRUCK WHERE UPPER(BAN_REASON) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSIsValidBanReason" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(BAN_REASON), 0, 'N', 'Y') FROM TCS_BAN_MASTER WHERE UPPER(BAN_REASON) = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSBanTruckCustomerNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT CUST_NO FROM TCS_IPASS_MASTER IPASS WHERE TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSBanTransactionNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TR_NO)
			FROM TCS_BAN_TRUCK 
			WHERE 
			BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') AND 
			STATUS IN('BANNED', 'ONETIME') AND TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<!-- Issue Warning Letter -->
	<select id="sqlGetTCSBanRestrictions" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(BAN_REASON) FROM TCS_BAN_TRUCK WHERE UPPER(BAN_REASON) = UPPER(#PARAM#)
		]]>
	</select>
	<update id="sqlUpdateTCSWarnLetter" parameterClass="cargo.cms.tcs.bo.TCSWrngLetterBO">
		<![CDATA[
			UPDATE TCS_WRNG_LETTER SET WARNING_RMK = #warningRmk# WHERE TRIP_ID = #tripId#
		]]>
	</update>
	<delete id="sqlDeleteTCSWarnLetter" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM TCS_WRNG_LETTER WHERE TRIP_ID = #PARAM#
		]]>
	</delete>
	<!-- -->
	<!-- BAN TRUCK (END) -->
	<!-- -->
	<!-- -->
	<!-- TRUCK DOCK ALLOCATION (BEGIN) -->
	<!-- -->
	<!-- Enquire Truck Dock Calendar -->
	<select id="sqlGetTCSEnquireCalendarTime" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT HOURS.TIME time, SCHEDULE.TEMPLATE_ID templateNo
			FROM
			(
				SELECT TRIM(TO_CHAR(2 * (counter - 1), '00')) || '-' || TRIM(TO_CHAR(2 * counter, '00')) TIME,
        		TO_DATE(#PARAM# || ' ' || TRIM(TO_CHAR(2 * (counter - 1), '00')) || ':' || '00', 'DDMONYY HH24:MI') FROM_TM,
        		CASE WHEN counter = 12 
        		THEN TO_DATE(TO_CHAR(TO_DATE(#PARAM#) + 1, 'DDMONYY') || '00' || ':' || '00', 'DDMONYY HH24:MI')
        		ELSE TO_DATE(#PARAM# || ' ' || TRIM(TO_CHAR(2 * counter, '00')) || ':' || '00', 'DDMONYY HH24:MI')
        		END TO_TM
				FROM DUAL, 
				XMLTABLE('for $$counter in 1 to xs:int(TOTAL) return $$counter' 
				PASSING XMLELEMENT(total, 12) COLUMNS counter INTEGER path '.')
			) HOURS
			LEFT OUTER JOIN (
				SELECT TEMPLATE_ID,
	      		TO_DATE(#PARAM# || ' ' || TRIM(TO_CHAR(TIME_FROM, '00')) || ':' || '01', 'DDMONYY HH24:MI') FROM_TM,
	      		TO_DATE(#PARAM# || ' ' || TRIM(TO_CHAR(TIME_TO - 1, '00')) || ':' || '59', 'DDMONYY HH24:MI') TO_TM
				FROM TCS_DOCK_TEMPLATE_SCH HDR
				JOIN TCS_DOCK_TEMPLATE_SCH_DTL DTL
				ON HDR.TR_NO = DTL.TR_NO
				WHERE
				INSTR(HDR.FREQUENCY, DECODE(TO_CHAR(TO_DATE(#PARAM#), 'D'), 7, 1, TO_CHAR(TO_DATE(#PARAM#), 'D') + 1)) > 0 AND
				EFF_FROM <= TO_DATE(#PARAM#, 'DDMONYY') AND EFF_TO >= TO_DATE(#PARAM#, 'DDMONYY')
			) SCHEDULE
			ON 
			(SCHEDULE.FROM_TM >= HOURS.FROM_TM AND SCHEDULE.FROM_TM <= HOURS.TO_TM) OR
			(SCHEDULE.TO_TM >= HOURS.FROM_TM AND SCHEDULE.TO_TM <= HOURS.TO_TM) OR
			(HOURS.FROM_TM >= SCHEDULE.FROM_TM AND HOURS.FROM_TM <= SCHEDULE.TO_TM) OR
			(HOURS.TO_TM >= SCHEDULE.FROM_TM AND HOURS.TO_TM <= SCHEDULE.TO_TM)
			ORDER BY HOURS.TIME
		]]>
	</select>
	<select id="sqlGetTCSEnquireCalendarPurpose" parameterClass="java.util.Map"
		resultClass="cargo.cms.tcs.bo.TCSDockResultBO">
		<![CDATA[
			SELECT DOCK.TRUCK_DOCK dockNo,
			NVL(TEMP1.PURPOSE_1, ' ') column1, NVL(TEMP2.PURPOSE_1, ' ') column2, NVL(TEMP3.PURPOSE_1, ' ') column3, NVL(TEMP4.PURPOSE_1, ' ') column4,
			NVL(TEMP5.PURPOSE_1, ' ') column5, NVL(TEMP6.PURPOSE_1, ' ') column6, NVL(TEMP7.PURPOSE_1, ' ') column7, NVL(TEMP8.PURPOSE_1, ' ') column8,
			NVL(TEMP9.PURPOSE_1, ' ') column9, NVL(TEMP10.PURPOSE_1, ' ') column10, NVL(TEMP11.PURPOSE_1, ' ') column11, NVL(TEMP12.PURPOSE_1, ' ') column12,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP1.PURPOSE_1) columnDesc1,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP2.PURPOSE_1) columnDesc2,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP3.PURPOSE_1) columnDesc3,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP4.PURPOSE_1) columnDesc4,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP5.PURPOSE_1) columnDesc5,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP6.PURPOSE_1) columnDesc6,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP7.PURPOSE_1) columnDesc7,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP8.PURPOSE_1) columnDesc8,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP9.PURPOSE_1) columnDesc9,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP10.PURPOSE_1) columnDesc10,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP11.PURPOSE_1) columnDesc11,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE DTL WHERE DTL.CODE = TEMP12.PURPOSE_1) columnDesc12		
			FROM
			TCS_DOCK_MASTER DOCK
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP1
			ON DOCK.TRUCK_DOCK = TEMP1.TRUCK_DOCK AND TEMP1.TEMPLATE_ID = #TEMPLATE_1#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP2
			ON DOCK.TRUCK_DOCK = TEMP2.TRUCK_DOCK AND TEMP2.TEMPLATE_ID = #TEMPLATE_2#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP3
			ON DOCK.TRUCK_DOCK = TEMP3.TRUCK_DOCK AND TEMP3.TEMPLATE_ID = #TEMPLATE_3#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP4
			ON DOCK.TRUCK_DOCK = TEMP4.TRUCK_DOCK AND TEMP4.TEMPLATE_ID = #TEMPLATE_4#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP5
			ON DOCK.TRUCK_DOCK = TEMP5.TRUCK_DOCK AND TEMP5.TEMPLATE_ID = #TEMPLATE_5#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP6
			ON DOCK.TRUCK_DOCK = TEMP6.TRUCK_DOCK AND TEMP6.TEMPLATE_ID = #TEMPLATE_6#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP7
			ON DOCK.TRUCK_DOCK = TEMP7.TRUCK_DOCK AND TEMP7.TEMPLATE_ID = #TEMPLATE_7#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP8
			ON DOCK.TRUCK_DOCK = TEMP8.TRUCK_DOCK AND TEMP8.TEMPLATE_ID = #TEMPLATE_8#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP9
			ON DOCK.TRUCK_DOCK = TEMP9.TRUCK_DOCK AND TEMP9.TEMPLATE_ID = #TEMPLATE_9#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP10
			ON DOCK.TRUCK_DOCK = TEMP10.TRUCK_DOCK AND TEMP10.TEMPLATE_ID = #TEMPLATE_10#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP11
			ON DOCK.TRUCK_DOCK = TEMP11.TRUCK_DOCK AND TEMP11.TEMPLATE_ID = #TEMPLATE_11#
			LEFT OUTER JOIN TCS_DOCK_TEMPLATE_DTL TEMP12
			ON DOCK.TRUCK_DOCK = TEMP12.TRUCK_DOCK AND TEMP12.TEMPLATE_ID = #TEMPLATE_12#
			WHERE DOCK.PURPOSE_1 NOT IN('SHC', 'VAL')
			ORDER BY DOCK.TRUCK_DOCK
		]]>
	</select>
	<!-- Maintain Template Calendar -->
	<select id="sqlGetTCSSearchTemplateCalendar" parameterClass="cargo.cms.tcs.bo.TCSDockSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSDockResultBO">
		<![CDATA[
	    	SELECT TO_CHAR(EFF_FROM, 'DDMONYY') effectiveFrom, TO_CHAR(EFF_TO, 'DDMONYY') effectiveTo, 
			TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate, LM_USER_ID lmUserId
			FROM TCS_DOCK_TEMPLATE_SCH SCH
			WHERE
			(SCH.EFF_FROM >= #from# AND SCH.EFF_FROM <= #to#) OR
			(SCH.EFF_TO >= #from# AND SCH.EFF_TO <= #to#) OR
			(#from# >= SCH.EFF_FROM AND #from# <= SCH.EFF_TO) OR
			(#to# >= SCH.EFF_FROM AND #to# <= SCH.EFF_TO)    			
		]]>
	</select>
	<select id="sqlGetTCSCalendarOverlapped" parameterClass="cargo.cms.tcs.bo.TCSDockBO"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(TR_NO)
			FROM TCS_DOCK_TEMPLATE_SCH SCH
			WHERE 
			(SCH.EFF_FROM >= #effectiveFrom# AND SCH.EFF_FROM <= #effectiveTo#) OR
			(SCH.EFF_TO >= #effectiveFrom# AND SCH.EFF_TO <= #effectiveTo#) OR
			(#effectiveFrom# >= SCH.EFF_FROM AND #effectiveFrom# <= SCH.EFF_TO) OR
			(#effectiveTo# >= SCH.EFF_FROM AND #effectiveTo# <= SCH.EFF_TO)			
		]]>
	</select>
	<select id="sqlGetTCSTemplateCalendarEff" parameterClass="cargo.cms.tcs.bo.TCSDockBO"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT TR_NO trNo, 
			  TO_CHAR(EFF_FROM, 'DDMONYY HH24:MI') effectiveFrom, TO_CHAR(EFF_TO, 'DDMONYY HH24:MI') effectiveTo, 
			  FREQUENCY frequency, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_TEMPLATE_SCH
			WHERE TO_CHAR(EFF_FROM, 'DDMONYY') = #effectiveFrom# AND TO_CHAR(EFF_TO, 'DDMONYY') = #effectiveTo#
		]]>
	</select>
	<update id="sqlUpdateTemplateCalendarEffDate" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			UPDATE TCS_DOCK_TEMPLATE_SCH
			SET EFF_TO = TO_DATE(#timeTo# || ' 2359', 'DDMONYY HH24MI'),
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TR_NO = #trNo#
		]]>
	</update>
	<delete id="sqlDeleteTemplateCalendarHdr" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			DELETE FROM TCS_DOCK_TEMPLATE_SCH 
			WHERE TO_CHAR(EFF_FROM, 'DDMONYY') = #effectiveFrom# AND TO_CHAR(EFF_TO, 'DDMONYY') = #effectiveTo#
		]]>
	</delete>
	<delete id="sqlDeleteTemplateCalendarDtl" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			DELETE FROM TCS_DOCK_TEMPLATE_SCH_DTL 
			WHERE 
			TR_NO IN(
				SELECT TR_NO FROM TCS_DOCK_TEMPLATE_SCH 
				WHERE TO_CHAR(EFF_FROM, 'DDMONYY') = #effectiveFrom# AND TO_CHAR(EFF_TO, 'DDMONYY') = #effectiveTo#
			)
		]]>
	</delete>
	<!-- Maintain Truck Dock Master -->
	<select id="sqlGetTCSSearchMaintTDMaster" parameterClass="cargo.cms.tcs.bo.TCSDockSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSDockResultBO">
		<![CDATA[
			SELECT TRUCK_DOCK dockNo, LVL.CODE_DESC AS dockLevel, ZONE.CODE_DESC AS zone, SIDE.CODE_DESC side,
			TO_CHAR(DOCK.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_MASTER DOCK
	    	LEFT OUTER JOIN MAST_CODE_DTL SIDE
	    	ON DOCK.SIDE = SIDE.CODE AND SIDE.CODE_TYPE = 'TCS_DOCK_SIDE'
	    	LEFT OUTER JOIN MAST_CODE_DTL LVL
	    	ON DOCK.DOCK_LEVEL = LVL.CODE AND LVL.CODE_TYPE = 'TCS_DOCK_LEVEL'
	    	LEFT OUTER JOIN MAST_CODE_DTL ZONE
	    	ON DOCK.ZONE = ZONE.CODE AND ZONE.CODE_TYPE = 'TCS_DOCK_ZONE'
			WHERE 1 = 1	
		]]>
		<isNotEmpty property="dockNo"> AND DOCK.TRUCK_DOCK = #dockNo#
		</isNotEmpty>
		<isNotEmpty property="level"> AND DOCK.DOCK_LEVEL = #level#
		</isNotEmpty>
		<isNotEmpty property="side"> AND DOCK.SIDE = #side#
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				DOCK.TRUCK_DOCK, DOCK.DOCK_LEVEL,
				DOCK.SIDE, DOCK.ZONE
			</isEmpty>
		</dynamic>
	</select>
	<select id="sqlGetTCSDockHasData" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(TEMPLATE_ID) FROM TCS_DOCK_TEMPLATE_DTL WHERE TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<update id="sqlUpdateDockMaster" parameterClass="cargo.cms.tcs.bo.TCSDockMasterBO">
		<![CDATA[
			UPDATE TCS_DOCK_MASTER
			SET
			DOCK_NAME = #dockDesc#, DOCK_LEVEL = #dockLevel#, ZONE = #zone#, SIDE = #side#,
			PURPOSE_1 = #purpose1#, PURPOSE_2 = #purpose2#, PURPOSE_3 = #purpose3#,
			PURPOSE_4 = #purpose4#, PURPOSE_5 = #purpose5#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE
			TRUCK_DOCK = #truckDock#
		]]>
	</update>
	<delete id="sqlDeleteDockMaster" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM TCS_DOCK_MASTER WHERE TRUCK_DOCK = #PARAM#
		]]>
	</delete>
	<delete id="sqlDeleteDockAlloc" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM TCS_DOCK_ALLOCATION WHERE TRUCK_DOCK = #PARAM#
		]]>
	</delete>
	<!-- Maintain Truck Dock Purpose Template Master -->
	<select id="sqlGetTCSSearchDockTemplate" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockResultBO">
		<![CDATA[
			SELECT TEMPLATE_ID templateNo, TEMPLATE_DESC description, 
			  LM_USER_ID lmUserId, TO_CHAR(LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_DOCK_TEMPLATE
		]]>
	</select>
	<select id="sqlGetTCSAllLevels" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSNameValueBO">
		<![CDATA[
			SELECT CODE value, CODE_DESC name
			FROM MAST_CODE_DTL LVL
			WHERE CODE_TYPE = 'TCS_DOCK_LEVEL'
			ORDER BY CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSAllDocks" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT TRUCK_DOCK dockNo, DOCK.DOCK_LEVEL dockLevel, LVL.CODE_DESC dockLevelDesc,
			PURPOSE_1 primaryPurpose, PURPOSE_2 secondaryPurpose, PURPOSE_3 thirdPurpose, PURPOSE_4 fourthPurpose, PURPOSE_5 fifthPurpose
			FROM TCS_DOCK_MASTER DOCK
			LEFT OUTER JOIN MAST_CODE_DTL LVL
			ON DOCK.DOCK_LEVEL = LVL.CODE AND LVL.CODE_TYPE = 'TCS_DOCK_LEVEL'
			WHERE DOCK.PURPOSE_1 NOT IN('SHC', 'VAL')
			ORDER BY DOCK.DOCK_LEVEL, TRUCK_DOCK
		]]>
	</select>
	<select id="sqlGetTCSAllQuotaTypes" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT PURPOSE_1 purpose, PURP.CODE_DESC purposeDesc, 
			COUNT(TRUCK_DOCK) noOfDocks, 0 quota
			FROM
			TCS_DOCK_MASTER DOCK
			LEFT OUTER JOIN MAST_TCS_DOCK_PURPOSE PURP
			ON DOCK.PURPOSE_1 = PURP.CODE
			WHERE DOCK.PURPOSE_1 NOT IN('SHC', 'VAL')
			GROUP BY DOCK.PURPOSE_1, PURP.CODE_DESC
			ORDER BY PURP.CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSTemplatePurposes" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			WITH SAVED AS (
			  SELECT TEMPLATE_ID templateId, DOCK.DOCK_LEVEL dockLevel, DTL.TRUCK_DOCK dockNo,
			  (SELECT CODE_DESC FROM MAST_CODE_DTL COD WHERE CODE_TYPE = 'TCS_DOCK_LEVEL' AND COD.CODE = DOCK.DOCK_LEVEL) dockLevelDesc,
			  DTL.PURPOSE_1 primaryPurpose,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DTL.PURPOSE_1) primaryPurposeCurrent,
			  DTL.PURPOSE_2 secondaryPurpose, 
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DTL.PURPOSE_2) secondaryPurposeCurrent,
			  DTL.PURPOSE_3 thirdPurpose,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DTL.PURPOSE_3) thirdPurposeCurrent,
			  DTL.PURPOSE_4 fourthPurpose,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DTL.PURPOSE_4) fourthPurposeCurrent,
			  DTL.PURPOSE_5 fifthPurpose, 
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DTL.PURPOSE_5) fifthPurposeCurrent,
			  DTL.CR_USER_ID crUserId, TO_CHAR(DTL.CR_DATE, 'DDMONYY HH24:MI') crDate, 
			  DTL.LM_USER_ID lmUserId, TO_CHAR(DTL.LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(DTL.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			  FROM TCS_DOCK_TEMPLATE_DTL DTL
			  JOIN TCS_DOCK_MASTER DOCK
			  ON DOCK.TRUCK_DOCK = DTL.TRUCK_DOCK AND DOCK.PURPOSE_1 NOT IN('SHC', 'VAL')
			  WHERE TEMPLATE_ID =  #PARAM#
			),
			ORG AS (
			  SELECT '' templateId, DOCK.DOCK_LEVEL dockLevel, TRUCK_DOCK dockNo, 
			  (SELECT CODE_DESC FROM MAST_CODE_DTL COD WHERE CODE_TYPE = 'TCS_DOCK_LEVEL' AND COD.CODE = DOCK.DOCK_LEVEL) dockLevelDesc,
			  PURPOSE_1 primaryPurpose,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DOCK.PURPOSE_1) primaryPurposeCurrent,
			  PURPOSE_2 secondaryPurpose, 
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DOCK.PURPOSE_2) secondaryPurposeCurrent,
			  PURPOSE_3 thirdPurpose,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DOCK.PURPOSE_3) thirdPurposeCurrent,
			  PURPOSE_4 fourthPurpose,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DOCK.PURPOSE_4) fourthPurposeCurrent,
			  PURPOSE_5 fifthPurpose, 
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = DOCK.PURPOSE_5) fifthPurposeCurrent, 
			  '' crUserId, '' crDate, 
			  '' lmUserId, '' lmDate,
			  '' lmMultiUserTime  
			  FROM TCS_DOCK_MASTER DOCK
			  WHERE DOCK.PURPOSE_1 NOT IN('SHC', 'VAL')
			)
			SELECT * FROM SAVED
			UNION
			SELECT * FROM ORG WHERE dockNo NOT IN(SELECT dockNo FROM SAVED)
			ORDER BY 2, 3
		]]>
	</select>
	<select id="sqlGetTCSTemplateQuota" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT PURPOSE purpose, PURP.CODE_DESC purposeDesc, QUOTA quota,
			(SELECT COUNT(TRUCK_DOCK) FROM TCS_DOCK_MASTER DOCK WHERE DOCK.PURPOSE_1 = WALKIN.PURPOSE) noOfDocks
			FROM TCS_DOCK_TEMPLATE_WALKIN WALKIN
			LEFT OUTER JOIN MAST_TCS_DOCK_PURPOSE PURP
			ON WALKIN.PURPOSE = PURP.CODE
			WHERE TEMPLATE_ID = #PARAM#
			ORDER BY PURPOSE
		]]>
	</select>
	<select id="sqlGetTCSTemplateHasData" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(TEMPLATE_ID) FROM TCS_DOCK_TEMPLATE_SCH_DTL WHERE TEMPLATE_ID = #PARAM#
		]]>
	</select>
	<update id="sqlUpdateDockTemplate" parameterClass="cargo.cms.tcs.bo.TCSDockTemplateBO">
		<![CDATA[
			UPDATE TCS_DOCK_TEMPLATE
			SET TEMPLATE_DESC = #templateDesc#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE
			TEMPLATE_ID = #templateId#
		]]>
	</update>
	<update id="sqlUpdateDockTemplateDtl" parameterClass="cargo.cms.tcs.bo.TCSDockTemplateDtlBO">
		<![CDATA[
			UPDATE TCS_DOCK_TEMPLATE_DTL
			SET
			PURPOSE_1 = #purpose1#, PURPOSE_2 = #purpose2#, PURPOSE_3 = #purpose3#,
			PURPOSE_4 = #purpose4#, PURPOSE_5 = #purpose5#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE
			TEMPLATE_ID = #templateId# AND TRUCK_DOCK = #truckDock#
		]]>
	</update>
	<update id="sqlUpdateDockTemplateQuota" parameterClass="cargo.cms.tcs.bo.TCSDockTemplateWalkinBO">
		<![CDATA[
			UPDATE TCS_DOCK_TEMPLATE_WALKIN
			SET	QUOTA = #quota#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE
			TEMPLATE_ID = #templateId# AND PURPOSE = #purpose#
		]]>
	</update>
	<delete id="sqlDeleteDockTemplate" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM TCS_DOCK_TEMPLATE WHERE TEMPLATE_ID = #PARAM#
		]]>
	</delete>
	<delete id="sqlDeleteDockTemplateDtl" parameterClass="cargo.cms.tcs.bo.TCSDockTemplateDtlBO">
		<![CDATA[
			DELETE FROM TCS_DOCK_TEMPLATE_DTL WHERE TEMPLATE_ID = #templateId# AND TRUCK_DOCK = #truckDock#
		]]>
	</delete>
	<delete id="sqlDeleteDockTemplateDtlNotIn" parameterClass="list">
		<![CDATA[
			DELETE FROM TCS_DOCK_TEMPLATE_DTL 
			WHERE TRUCK_DOCK NOT IN
		]]>
		<iterate open="(" close=")" conjunction=",">
			#[]#
		</iterate>
	</delete>
	<delete id="sqlDeleteDockTemplateQuota" parameterClass="cargo.cms.tcs.bo.TCSDockTemplateWalkinBO">
		<![CDATA[
			DELETE FROM TCS_DOCK_TEMPLATE_WALKIN WHERE TEMPLATE_ID = #templateId#  AND PURPOSE = #purpose#
		]]>
	</delete>
	<delete id="sqlDeleteAllDockTemplateDtl" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM TCS_DOCK_TEMPLATE_DTL WHERE TEMPLATE_ID = #PARAM#
		]]>
	</delete>
	<delete id="sqlDeleteAllDockTemplateQuota" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM TCS_DOCK_TEMPLATE_WALKIN WHERE TEMPLATE_ID = #PARAM#
		]]>
	</delete>
	<!-- Adhoc Truck Dock Purpose Change -->
	<select id="sqlGetTCSAdhocDockPoolId" parameterClass="java.lang.String"
		resultClass="java.lang.Long">
		<![CDATA[
			SELECT POOL_ID FROM TCS_ADHOC_DOCK 
			WHERE TRUCK_DOCK = #PARAM# AND NVL(REVERTED_IND, 'N') = 'N' AND (
				SYSDATE BETWEEN FROM_DT AND TO_DT OR
				TO_DATE(TO_CHAR((SYSDATE - MOD(TO_NUMBER(TO_CHAR(SYSDATE, 'MI')), 15) / 1440) + 15/24/60, 'DDMONYY HH24:MI'), 'DDMONYY HH24:MI') BETWEEN FROM_DT AND TO_DT
			)
		]]>
	</select>
	<select id="sqlGetTCSCurrentTemplatePurpose" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT TEMPL.TRUCK_DOCK dockNo,
			  TEMPL.PURPOSE_1 primaryPurposeCurrent, TEMPL.PURPOSE_2 secondaryPurposeCurrent, 
			  TEMPL.PURPOSE_3 thirdPurposeCurrent, TEMPL.PURPOSE_4 fourthPurposeCurrent, TEMPL.PURPOSE_5 fifthPurposeCurrent,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = TEMPL.PURPOSE_1) primaryPurpose,
		      (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = TEMPL.PURPOSE_2) secondaryPurpose,
		      (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = TEMPL.PURPOSE_3) thirdPurpose,
		      (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = TEMPL.PURPOSE_4) fourthPurpose,
		      (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = TEMPL.PURPOSE_5) fifthPurpose
			FROM TCS_DOCK_TEMPLATE_DTL TEMPL
			  LEFT OUTER JOIN TCS_DOCK_TEMPLATE_SCH_DTL DTL
			  ON TEMPL.TEMPLATE_ID = DTL.TEMPLATE_ID
			  LEFT OUTER JOIN TCS_DOCK_TEMPLATE_SCH HDR
			  ON DTL.TR_NO = HDR.TR_NO
			WHERE
			  TEMPL.TRUCK_DOCK = #PARAM# AND HDR.EFF_FROM <= SYSDATE AND HDR.EFF_TO >= SYSDATE AND 
			  (DTL.TIME_FROM <= TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')) AND DTL.TIME_TO >= TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')))
		]]>
	</select>
	<select id="sqlGetTCSCurrentAdhocPurpose" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT
				DOCK.TRUCK_DOCK dockNo,
				POOL.PURPOSE_1 primaryPurposeCurrent, POOL.PURPOSE_2 secondaryPurposeCurrent,
				POOL.PURPOSE_3 thirdPurposeCurrent, POOL.PURPOSE_4 fourthPurposeCurrent, POOL.PURPOSE_5 fifthPurposeCurrent,
				(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = POOL.PURPOSE_1) primaryPurpose,
				(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = POOL.PURPOSE_2) secondaryPurpose,
				(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = POOL.PURPOSE_3) thirdPurpose,
				(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = POOL.PURPOSE_4) fourthPurpose,
				(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = POOL.PURPOSE_5) fifthPurpose,
				ADHOC.DURATION duration,
				TO_CHAR(NVL(ADHOC.FROM_DT, 
					TO_DATE(TO_CHAR((SYSDATE - MOD(TO_NUMBER(TO_CHAR(SYSDATE, 'MI')), 15) / 1440) + 15/24/60, 'DDMONYY HH24:MI'), 'DDMONYY HH24:MI')), 'DDMONYY HH24:MI') startTime 
			FROM TCS_DOCK_POOL POOL
			JOIN TCS_DOCK_POOL_DOCK DOCK
			ON POOL.POOL_ID = DOCK.POOL_ID
      		JOIN TCS_ADHOC_DOCK ADHOC
      		ON DOCK.TRUCK_DOCK = ADHOC.TRUCK_DOCK  AND DOCK.POOL_ID = ADHOC.POOL_ID AND (
      			SYSDATE BETWEEN ADHOC.FROM_DT AND ADHOC.TO_DT OR
      			TO_DATE(TO_CHAR((SYSDATE - MOD(TO_NUMBER(TO_CHAR(SYSDATE, 'MI')), 15) / 1440) + 15/24/60, 'DDMONYY HH24:MI'), 'DDMONYY HH24:MI')
      				BETWEEN ADHOC.FROM_DT AND ADHOC.TO_DT
      		) AND NVL(ADHOC.REVERTED_IND, 'N') = 'N'
			WHERE ADHOC.TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSCurrentDockPurpose" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT
			  DOCK.TRUCK_DOCK dockNo,
			  POOL.PURPOSE_1 primaryPurposeCurrent, POOL.PURPOSE_2 secondaryPurposeCurrent,
			  POOL.PURPOSE_3 thirdPurposeCurrent, POOL.PURPOSE_4 fourthPurposeCurrent, POOL.PURPOSE_5 fifthPurposeCurrent,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = POOL.PURPOSE_1) primaryPurpose,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = POOL.PURPOSE_2) secondaryPurpose,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = POOL.PURPOSE_3) thirdPurpose,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = POOL.PURPOSE_4) fourthPurpose,
			  (SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE COD WHERE COD.CODE = POOL.PURPOSE_5) fifthPurpose,
			  0 duration,
			  TO_CHAR((SYSDATE - MOD(TO_NUMBER(TO_CHAR(SYSDATE, 'MI')), 15) / 1440) + 15/24/60, 'DDMONYY HH24:MI') startTime 
			FROM TCS_DOCK_POOL POOL
			JOIN TCS_DOCK_POOL_DOCK DOCK
			ON POOL.POOL_ID = DOCK.POOL_ID
			WHERE DOCK.TRUCK_DOCK = #PARAM# AND SYSDATE BETWEEN POOL.FROM_DT AND POOL.TO_DT
		]]>
	</select>
	<!-- Follow-on Truck -->
	<select id="sqlGetTCSSRFTruck" parameterClass="java.lang.String"
		resultClass="java.lang.String">
	<![CDATA[
		SELECT SRF.TRUCK_NO FROM IMP_SRF SRF WHERE SRF.SRF_NO = #PARAM#
	]]>
	</select>
	<select id="sqlGetTCSCDIFTruck" parameterClass="java.lang.String"
		resultClass="java.lang.String">
	<![CDATA[
		SELECT FOLLOW_ON_TRUCK FROM IMP_CDIF WHERE CDIF_NO = #PARAM#
	]]>
	</select>
	<!-- Connecting Truck -->
	<select id="sqlGetTCSIsSRFAssignedTruck" parameterClass="java.lang.String"
		resultClass="java.lang.String">
	<![CDATA[
		SELECT DECODE(COUNT(TRIP_ID), 0, 'N', 'Y')
		FROM IMP_TRUCK_SRF TRUCK
		JOIN IMP_SRF SRF
		ON TRUCK.SRF_NO = SRF.SRF_NO AND SRF.STATUS = 'ISSUED'
		WHERE TRIP_ID = (SELECT MAX(TRIP_ID) FROM TRUCK_TRIP WHERE TRUCK_NO = #PARAM# AND CLOSED = 'N')
	]]>
	</select>
	<select id="sqlGetTCSIsURFAssignedTruck" parameterClass="java.lang.String"
		resultClass="java.lang.String">
	<![CDATA[
		SELECT DECODE(COUNT(TRIP_ID), 0, 'N', 'Y')
		FROM ULD_TRUCK_EIR 
		WHERE TRIP_ID = (SELECT MAX(TRIP_ID) FROM TRUCK_TRIP WHERE TRUCK_NO = #PARAM# AND CLOSED = 'N')
	]]>
	</select>
	<select id="sqlGetTCSIsTruckHasBookingForConnect"
		parameterClass="java.lang.String" resultClass="java.lang.String">
	<![CDATA[
		WITH CURR AS (
		  SELECT SYSDATE + (
		      (NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'TCS_CONNECT_BKG_GAP_HOURS'), 1) * 60) / 24 / 60
		    ) TILL_NOBKG_TIME,
		    SYSDATE CURDATE
		  FROM DUAL
		),
		BKG AS (
		  SELECT BOOKING_NO,
		    TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
		    TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) TO_DATE
		  FROM IMP_BOOKING BKG
		  WHERE BKG.STATUS <> 'CANCEL' AND 
		  BKG.BKG_SLOT_DATE >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
		  AND BKG.BKG_SLOT_DATE <= SYSDATE AND NVL(EXP_DURATION, 0) > 0 AND
		  #PARAM# IN(TRUCK1, TRUCK2, TRUCK3, TRUCK4, TRUCK5, TRUCK6)
		  UNION
		  SELECT BOOKING_NO,
		    TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
		    TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) TO_DATE
		  FROM EXP_BOOKING BKG
		  WHERE
		  BKG.BOOKING_DATE >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
		  AND BKG.BOOKING_DATE <= SYSDATE AND NVL(EXP_DURATION, 0) > 0 AND TRUCK = #PARAM#
		)
		SELECT DECODE(COUNT(BOOKING_NO), 0, 'N', 'Y')
		FROM BKG
		JOIN CURR
		ON CURR.TILL_NOBKG_TIME IS NOT NULL
		WHERE
		(BKG.FROM_DATE >= CURR.CURDATE AND BKG.FROM_DATE <= CURR.TILL_NOBKG_TIME) OR
		(BKG.TO_DATE >= CURR.CURDATE AND BKG.TO_DATE <= CURR.TILL_NOBKG_TIME) OR
		(CURR.CURDATE >= BKG.FROM_DATE AND CURR.CURDATE <= BKG.TO_DATE) OR
		(CURR.TILL_NOBKG_TIME >= BKG.FROM_DATE AND CURR.TILL_NOBKG_TIME <= BKG.TO_DATE)
	]]>
	</select>
	<!-- Manual Truck Dock Allocation -->
	<select id="sqlGetTCSDockAvailableDuration" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			WITH ACTUAL AS (
			  SELECT
			  MIN(ALLOC.ALLOCATED_FROM) FROM_DATE
			  FROM
			  TCS_DOCK_ALLOCATION ALLOC
			  WHERE TRUCK_DOCK = #PARAM# AND STATUS = 'FREE' AND ALLOC.ALLOCATED_TILL >= SYSDATE
			  UNION ALL
			  SELECT
			  MIN(RESV.RESV_FROM) FROMDATE
			  FROM
			  TCS_DOCK_RESV RESV
			  WHERE TRUCK_DOCK = #PARAM# AND RESV.RESV_FROM IS NOT NULL AND RESV.RESV_TO >= SYSDATE
			  UNION ALL
			  SELECT
			  MIN(TO_DATE(DT.PROC_DATE || ' ' || TRIM(TO_CHAR(SCH.TIME_FROM,'0000')), 'DDMONYY HH24MI') + (1 / 24 / 60)) FROM_DATE
			  FROM CUST_AGENT_SCH_COLL_TIME SCH
			  JOIN CUST_AGENT_SCH_COLL_TRUCK_DOCK DOCK
			  ON SCH.TR_NO = DOCK.TR_NO
			  JOIN (
			    SELECT TO_CHAR(FROMDATE + COUNTER, 'DDMONYY') AS PROC_DATE, 
			    CASE WHEN (TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1) = 0 THEN 7 ELSE TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1 END AS WEEK
			    FROM (
			      SELECT TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') FROMDATE, 
			      TO_DATE(TO_CHAR(SYSDATE + 
			        (NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'TCS_MANUAL_FUTURE_AVAIL_DURATION_SLOTS'), 1) * 15) / 24 / 60, 
			        'DDMONYY'), 'DDMONYY') TODATE 
			      FROM DUAL
			    ) DATESEL, XMLTABLE('for $$counter in 0 to xs:int(D) return $$counter'
			    PASSING XMLELEMENT(D, (TODATE - FROMDATE))
			    COLUMNS COUNTER INTEGER PATH '.')			
			  ) DT
			  ON SCH.EFF_FROM <= DT.PROC_DATE AND SCH.EFF_TO >= DT.PROC_DATE AND SCH.DAY_FRQ LIKE ('%' || DT.WEEK || '%')
			  WHERE PURPOSE IN('ULD', 'CRG') AND DOCK.TRUCK_DOCK = #PARAM#
			),
			FINAL AS (
			  SELECT ((SYSDATE - NVL(MIN(FROM_DATE), SYSDATE)) * 24 * 60) MINS,
			  (NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'TCS_MANUAL_FUTURE_AVAIL_DURATION_SLOTS'), 1) * 24 * 60) / 4 TOTALMINS
			  FROM ACTUAL
			  GROUP BY 2
			)
			SELECT 
			CASE 
			  WHEN MINS > TOTALMINS THEN TOTALMINS 
			  WHEN MINS = 0 THEN TOTALMINS
			  ELSE MINS
			END AS DURATION
			FROM FINAL
		]]>
	</select>
	<select id="sqlGetTCSDockAvailableDurationSR" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT 
			CASE 
			  WHEN MINS > TOTALMINS THEN TOTALMINS 
			  WHEN MINS = 0 THEN TOTALMINS
			  ELSE MINS
			END AS DURATION
			FROM
			(
			  SELECT ((SYSDATE - NVL(MIN(FROM_DATE), SYSDATE)) * 24 * 60) MINS,
			  (NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'TCS_MANUAL_FUTURE_AVAIL_DURATION_SLOTS'), 1) * 24 * 60) / 4 TOTALMINS
			  FROM (
			        SELECT
			        MIN(ALLOC.ALLOCATED_FROM) FROM_DATE
			        FROM
			        TCS_DOCK_ALLOCATION ALLOC
			        WHERE TRUCK_DOCK = #PARAM# AND STATUS = 'FREE' AND ALLOC.ALLOCATED_TILL >= SYSDATE
			        UNION ALL
			        SELECT
			        MIN(RESV.RESV_FROM) FROMDATE
			        FROM
			        TCS_DOCK_RESV RESV
			        WHERE TRUCK_DOCK = #PARAM#	AND RESV.RESV_FROM IS NOT NULL AND RESV.RESV_TO >= SYSDATE
			  )
			  GROUP BY 2
			)
		]]>
	</select>
	<select id="sqlGetTCSGetDockAllocInfo" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT
			TRIP.TRUCK_NO truckNo,
			TO_CHAR(ALLOC.ALLOCATED_TILL, 'DDMONYY HH24:MI') allocatedUpto,
			FLOOR(((ALLOC.ALLOCATED_TILL + (ALLOC.ALLOCATION_DURATION / 24 / 60)) - SYSDATE) * 24 * 60) availableDuration
			FROM
			TCS_DOCK_ALLOCATION ALLOC
			LEFT OUTER JOIN TRUCK_TRIP TRIP
			ON ALLOC.TRIP_ID = TRIP.TRIP_ID
			WHERE ALLOC.STATUS = 'ALLOCATED' AND ALLOC.TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<update id="sqlUpdateTCSDockAlloc" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			UPDATE TCS_DOCK_ALLOCATION
			SET STATUS = #status#, OCCUPIED = #occupied#,
			ALLOCATION_DURATION = #duration#, TRIP_ID = #tripId#,
			CR_USER_ID = #crUserId#, CR_DATE = SYSDATE, LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TRUCK_DOCK = #dockNo#
		]]>
	</update>
	<insert id="sqlInsertTCSManulDockAllocLog" parameterClass="java.util.Map">
		<![CDATA[
			INSERT INTO TCS_MANUAL_ALLOC_LOG
			(
			  TRUCK_DOCK, TRUCK_NO, 
			  IPASS_NO, IPASS_TYPE_DESC,
			  COMPANY_NAME,
			  IN_PURPOSE_DESC,
			  DOCK_LEVEL_DESC,
			  ALLOCATED_DURATION, ALLOCATED_BY, ALLOCATED_TIME
			) 
			SELECT
			  ALLOC.TRUCK_DOCK, ALLOC.TRUCK_NO, IPASS.IPASS_NO, 
			  (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE = IPASS.IPASS_TYPE AND CODE_TYPE = 'TCS_IPASS_TYPE') IPASS_TYPE_DESC,
			  (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = IPASS.CUST_NO AND ACTIVE = 'Y') COMPANY_NAME,
			  (SELECT CODE_DESC FROM MAST_TCS_INCOMING_PURPOSE WHERE CODE = (
			  	SELECT PURPOSE FROM TRUCK_TRIP WHERE TRIP_ID = ALLOC.TRIP_ID AND CLOSED = 'N')
			  ) IN_PURPOSE_DESC,
			  (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE = (
			  	SELECT DOCK_LEVEL FROM TCS_DOCK_MASTER WHERE TRUCK_DOCK = ALLOC.TRUCK_DOCK) AND CODE_TYPE = 'TCS_DOCK_LEVEL'
			  ) DOCK_LEVEL_DESC,
			  ALLOC.ALLOCATION_DURATION ALLOCATED_DURATION, ALLOC.LM_USER_ID ALLOCATED_BY, ALLOC.LM_DATE ALLOCATED_TIME
			FROM TCS_DOCK_ALLOCATION ALLOC
			LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
			ON ALLOC.TRUCK_NO = IPASS.TRUCK_NO
			WHERE ALLOC.TRUCK_DOCK = #DOCK_NO#
		]]>
	</insert>
	<!-- Release Truck Dock -->
	<update id="sqlUpdateTCSReleaseDock" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			UPDATE TCS_DOCK_ALLOCATION 
			SET STATUS = 'FREE', OCCUPIED = 'N', ALLOCATION_DURATION = 0, TRIP_ID = NULL,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TRUCK_DOCK = #dockNo#
		]]>
	</update>
	<!-- Reserve Truck Dock -->
	<select id="sqlGetTCSSearchReserveAvailability" parameterClass="cargo.cms.tcs.bo.TCSDockSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[	
			SELECT 
			TO_CHAR(DATETIME1, 'DDMONYY') nowDate,
			TO_CHAR(DATETIME2, 'DDMONYY') toDate,  
			TO_CHAR(DATETIME1, 'HH24:MI') || '-' || TO_CHAR(DATETIME2, 'HH24:MI') timeSlot,
			nonAvailableReason,
			NVL(availability, 'Y') availability
			FROM
			(
			SELECT
				ALLOC.TRUCK_DOCK,
				ALLOC.ALLOCATED_FROM FROM_DATE,
				ALLOC.ALLOCATED_TILL TO_DATE,
				STAT.CODE_DESC nonAvailableReason, 
				CASE WHEN STATUS = 'FREE' THEN 'Y' ELSE 'N' END availability
			FROM
			TCS_DOCK_ALLOCATION ALLOC
			LEFT OUTER JOIN MAST_CODE_DTL STAT
			ON ALLOC.STATUS = STAT.CODE AND STAT.CODE_TYPE = 'TCS_ALLOC_STATUS'
			WHERE TRUCK_DOCK = #dockNo# AND ALLOC.ALLOCATED_TILL >= TO_DATE(#timeFrom#, 'DDMONYY HH24:MI')
			UNION ALL
			SELECT
				RESV.TRUCK_DOCK,
				(NVL(RESV.RESV_FROM, SYSDATE) + (1 / 24 / 60)) FROM_DATE,
				(NVL(RESV.RESV_TO, SYSDATE) - (1 / 24 / 60)) TO_DATE,
				(RESV.REASON || NVL2(RESV.RESV_FROM, '(Reserved)', '(ASAP)')) nonAvailableReason,
				'N' availability
			FROM
			TCS_DOCK_RESV RESV
			WHERE TRUCK_DOCK = #dockNo#	AND RESV.RESV_FROM IS NOT NULL AND RESV.RESV_TO >= TO_DATE(#timeFrom#, 'DDMONYY HH24:MI')
			UNION ALL
			SELECT DOCK.TRUCK_DOCK, 
			    TO_DATE(DT.PROC_DATE || ' ' || TRIM(TO_CHAR(SCH.TIME_FROM,'0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
			    TO_DATE(DT.PROC_DATE || ' ' || TRIM(TO_CHAR(SCH.TIME_TO,'0000')), 'DDMONYY HH24MI') - (1 / 24 / 60) TO_DATE,
			    'Scheduled Collection (ULD)' nonAvailableReason,
			    'N' availability
			FROM CUST_AGENT_SCH_COLL_TIME SCH
			JOIN CUST_AGENT_SCH_COLL_TRUCK_DOCK DOCK
			ON SCH.TR_NO = DOCK.TR_NO
			JOIN (
			  SELECT TO_CHAR(FROMDATE + COUNTER, 'DDMONYY') AS PROC_DATE, 
			  CASE WHEN (TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1) = 0 THEN 7 ELSE TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1 END AS WEEK
			  FROM (
			  	SELECT TO_DATE(#reserveFrom#, 'DDMONYY') FROMDATE, TO_DATE(#reserveTo#, 'DDMONYY') TODATE FROM DUAL
			  ) DATESEL, XMLTABLE('for $$counter in 0 to xs:int(D) return $$counter'
			  PASSING XMLELEMENT(D, ROUND(TODATE - FROMDATE))
			  COLUMNS COUNTER INTEGER PATH '.')			
			) DT
			ON SCH.EFF_FROM <= DT.PROC_DATE AND SCH.EFF_TO >= DT.PROC_DATE AND SCH.DAY_FRQ LIKE ('%' || DT.WEEK || '%')
			WHERE 'DR' = #from# AND PURPOSE = 'ULD' AND DOCK.TRUCK_DOCK = #dockNo#
			UNION ALL
			SELECT DOCK.TRUCK_DOCK, 
			    TO_DATE(DT.PROC_DATE || ' ' || TRIM(TO_CHAR(SCH.TIME_FROM,'0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
			    TO_DATE(DT.PROC_DATE || ' ' || TRIM(TO_CHAR(SCH.TIME_TO,'0000')), 'DDMONYY HH24MI') - (1 / 24 / 60) TO_DATE,
			    'Scheduled Collection (Cargo)' nonAvailableReason,
			    'N' availability
			FROM CUST_AGENT_SCH_COLL_TIME SCH
			JOIN CUST_AGENT_SCH_COLL_TRUCK_DOCK DOCK
			ON SCH.TR_NO = DOCK.TR_NO
			JOIN (
			  SELECT TO_CHAR(FROMDATE + COUNTER, 'DDMONYY') AS PROC_DATE, 
			  CASE WHEN (TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1) = 0 THEN 7 ELSE TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1 END AS WEEK
			  FROM (
			  	SELECT TO_DATE(#reserveFrom#, 'DDMONYY') FROMDATE, TO_DATE(#reserveTo#, 'DDMONYY') TODATE FROM DUAL
			  ) DATESEL, XMLTABLE('for $$counter in 0 to xs:int(D) return $$counter'
			  PASSING XMLELEMENT(D, ROUND(TODATE - FROMDATE))
			  COLUMNS COUNTER INTEGER PATH '.')			
			) DT
			ON SCH.EFF_FROM <= DT.PROC_DATE AND SCH.EFF_TO >= DT.PROC_DATE AND SCH.DAY_FRQ LIKE ('%' || DT.WEEK || '%')
			WHERE 'DR' = #from# AND PURPOSE = 'CRG' AND DOCK.TRUCK_DOCK = #dockNo#			
			) DOCK
			RIGHT OUTER JOIN (
			SELECT
				TO_DATE(PROC_DATE || ' ' || PROC_TIME1, 'DDMONYY HH24:MI') AS DATETIME1, 
				CASE WHEN PROC_TIME1 = '23:45' 
				  THEN TO_DATE(TO_CHAR((TO_DATE(PROC_DATE, 'DDMONYY') + 1), 'DDMONYY') || ' ' || PROC_TIME2, 'DDMONYY HH24:MI')
				  ELSE TO_DATE(PROC_DATE || ' ' || PROC_TIME2, 'DDMONYY HH24:MI')
				END DATETIME2
			FROM
			(
			  SELECT TO_CHAR(FROMDATE + COUNTER, 'DDMONYY') AS PROC_DATE, 
			  CASE WHEN (TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1) = 0 THEN 7 ELSE TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1 END AS WEEK
			  FROM (
			  	SELECT TO_DATE(#reserveFrom#, 'DDMONYY') FROMDATE, TO_DATE(#reserveTo#, 'DDMONYY') TODATE FROM DUAL
			  ) DATESEL, XMLTABLE('for $$counter in 0 to xs:int(D) return $$counter'
			  PASSING XMLELEMENT(D, ROUND(TODATE - FROMDATE))
			  COLUMNS COUNTER INTEGER PATH '.')			
			)
			LEFT OUTER JOIN (
			  SELECT 
			  TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') + (((HRS * 60) + MINUTES) / 24 / 60), 'HH24:MI') PROC_TIME1,
			  TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') + (((HRS * 60) + (MINUTES + 15)) / 24 / 60), 'HH24:MI') PROC_TIME2
			  FROM (
			    SELECT (counter - 1) HRS
			    FROM DUAL, 
			    XMLTABLE('for $$counter in 1 to xs:int(TOTAL) return $$counter'
			    PASSING XMLELEMENT(total, 24) COLUMNS counter INTEGER path '.')
			  ) HRTAB
			  LEFT OUTER JOIN (
			    SELECT 15 * (counter - 1) MINUTES
			    FROM DUAL, 
			    XMLTABLE('for $$counter in 1 to xs:int(TOTAL) return $$counter'
			    PASSING XMLELEMENT(total, 4) COLUMNS counter INTEGER path '.')
			  ) TIMETAB
			  ON 1 = 1
			)
			ON 1 = 1
			) DAYS
			ON 
			(DOCK.FROM_DATE >= DAYS.DATETIME1 AND DOCK.FROM_DATE <= DAYS.DATETIME2) OR
			(DOCK.TO_DATE >= DAYS.DATETIME1 AND DOCK.TO_DATE <= DAYS.DATETIME2) OR
			(DAYS.DATETIME1 >= DOCK.FROM_DATE AND DAYS.DATETIME1 <= DOCK.TO_DATE) OR
			(DAYS.DATETIME2 >= DOCK.FROM_DATE AND DAYS.DATETIME2 <= DOCK.TO_DATE)
			WHERE DAYS.DATETIME1 >= SYSDATE AND
			DAYS.DATETIME1 >= TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') AND
			DAYS.DATETIME2 <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI') AND
			DAYS.DATETIME1 < TO_DATE(#timeTo#, 'DDMONYY HH24:MI')
			ORDER BY DAYS.DATETIME1
		]]>
	</select>
	<select id="sqlGetTCSSearchReserveTD" parameterClass="cargo.cms.tcs.bo.TCSDockSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSDockResultBO">
		<![CDATA[
			SELECT RESERVE.TR_NO trNo,
			RESERVE.TRUCK_DOCK dockNo, RESERVE.TRUCK_NO truckNo, 
			NVL(TO_CHAR(RESV_FROM, 'DDMONYY HH24:MI'), 'ASAP') reserveFrom, 
      		NVL(TO_CHAR(RESV_TO, 'DDMONYY HH24:MI'), 'ASAP + ' || DURATION || ' min') reserveTo,
			REASON reason,
			TO_CHAR(RESERVE.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime,
			CASE 
				WHEN RESERVE.RESV_FROM < SYSDATE THEN 'Y'
				WHEN RESERVE.ALLOCATED = 'Y' THEN 'Y'
				ELSE 'N' 
			END disabled
			FROM
			TCS_DOCK_RESV RESERVE
			JOIN TCS_DOCK_MASTER DOCK
			ON RESERVE.TRUCK_DOCK = DOCK.TRUCK_DOCK AND (DOCK.PURPOSE_1 <> 'VAL' OR DOCK.PURPOSE_1 <> 'SHC') 
			WHERE 1 = 1
		]]>
		<isNotEmpty property="from">
			<isNotEmpty property="to"><![CDATA[
			 AND (
			 	(RESV_FROM >= TO_DATE(#from#, 'DDMONYY HH24:MI') AND RESV_FROM <= TO_DATE(#to#, 'DDMONYY HH24:MI')) OR 
			 	(RESV_TO >= TO_DATE(#from#, 'DDMONYY HH24:MI') AND RESV_TO <= TO_DATE(#to#, 'DDMONYY HH24:MI')) OR
        		(TO_DATE(#from#, 'DDMONYY HH24:MI') <= RESV_FROM AND TO_DATE(#to#, 'DDMONYY HH24:MI') >= RESV_FROM) OR 
			 	(TO_DATE(#from#, 'DDMONYY HH24:MI') <= RESV_TO AND TO_DATE(#to#, 'DDMONYY HH24:MI') >= RESV_TO)			 	
			 	)
			 ]]>
			</isNotEmpty>
		</isNotEmpty>
		<isEmpty property="to">
			<isNotEmpty property="from"><![CDATA[
			 AND RESV_FROM >= TO_DATE(#from#, 'DDMONYY HH24:MI')
			 ]]>
			</isNotEmpty>
		</isEmpty>
		<isEmpty property="from">
			<isNotEmpty property="to"><![CDATA[
			 AND RESV_TO <= TO_DATE(#to#, 'DDMONYY HH24:MI')
			 ]]>
			</isNotEmpty>
		</isEmpty>
		<isNotEmpty property="dockNo"><![CDATA[ AND RESERVE.TRUCK_DOCK = #dockNo# ]]>
		</isNotEmpty>
		<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(RESERVE.TRUCK_NO) = UPPER(#truckNo#) ]]>
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			RESV_FROM, RESV_TO
		</dynamic>
	</select>
	<select id="sqlGetTCSSearchReserveTDSR" parameterClass="cargo.cms.tcs.bo.TCSDockSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSDockResultBO">
		<![CDATA[
			SELECT RESERVE.TR_NO trNo,
			RESERVE.TRUCK_DOCK dockNo, RESERVE.TRUCK_NO truckNo, 
			TO_CHAR(RESV_FROM, 'DDMONYY HH24:MI') reserveFrom, TO_CHAR(RESV_TO, 'DDMONYY HH24:MI') reserveTo,
			REASON reason, TO_CHAR(RESERVE.CR_DATE, 'DDMONYY HH24:MI') reserveByTime,
			TO_CHAR(RESERVE.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime,
			CASE 
				WHEN RESERVE.RESV_FROM < SYSDATE THEN 'Y'
				WHEN RESERVE.ALLOCATED = 'Y' THEN 'Y'
				ELSE 'N' 
			END disabled		
			FROM
			TCS_DOCK_RESV RESERVE
			JOIN TCS_DOCK_MASTER DOCK
			ON RESERVE.TRUCK_DOCK = DOCK.TRUCK_DOCK AND DOCK.PURPOSE_1 = 'VAL'
			WHERE 1 = 1
		]]>
		<isNotEmpty property="from">
			<isNotEmpty property="to">
			<![CDATA[
				 AND (
				 	(RESV_FROM >= TO_DATE(#from#, 'DDMONYY HH24:MI') AND RESV_FROM <= TO_DATE(#to#, 'DDMONYY HH24:MI')) OR 
				 	(RESV_TO >= TO_DATE(#from#, 'DDMONYY HH24:MI') AND RESV_TO <= TO_DATE(#to#, 'DDMONYY HH24:MI')) OR
	        		(TO_DATE(#from#, 'DDMONYY HH24:MI') <= RESV_FROM AND TO_DATE(#to#, 'DDMONYY HH24:MI') >= RESV_FROM) OR 
				 	(TO_DATE(#from#, 'DDMONYY HH24:MI') <= RESV_TO AND TO_DATE(#to#, 'DDMONYY HH24:MI') >= RESV_TO)			 	
				 )
			 ]]>
			</isNotEmpty>
		</isNotEmpty>
		<isEmpty property="to">
			<isNotEmpty property="from"><![CDATA[
			 AND RESV_FROM >= TO_DATE(#from#, 'DDMONYY HH24:MI')
			 ]]>
			</isNotEmpty>
		</isEmpty>
		<isEmpty property="from">
			<isNotEmpty property="to"><![CDATA[
			 AND RESV_TO <= TO_DATE(#to#, 'DDMONYY HH24:MI')
			 ]]>
			</isNotEmpty>
		</isEmpty>
		<isNotEmpty property="dockNo"><![CDATA[ AND RESERVE.TRUCK_DOCK = #dockNo# ]]>
		</isNotEmpty>
		<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(RESERVE.TRUCK_NO) = UPPER(#truckNo#) ]]>
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			RESV_FROM, RESV_TO
		</dynamic>
	</select>
	<delete id="sqlDeleteReserveTD" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM TCS_DOCK_RESV WHERE TR_NO = #PARAM#
		]]>
	</delete>
	<delete id="sqlDeleteReserveTDWithDock" parameterClass="java.util.Map">
		<![CDATA[
			DELETE FROM TCS_DOCK_RESV WHERE TR_NO IN (
			  SELECT TR_NO FROM TCS_DOCK_RESV
			  WHERE TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') BETWEEN RESV_FROM AND RESV_TO AND
			  TRUCK_DOCK = #DOCK_NO#
			)
		]]>
	</delete>
	<select id="sqlGetTCSReservationData" parameterClass="java.util.Map"
		resultClass="cargo.cms.common.tcs.bo.TCSDockResvBO">
		<![CDATA[
			SELECT TO_CHAR(RESV.RESV_FROM, 'DDMONYY HH24:MI') resvFrom, TO_CHAR(RESV.RESV_TO, 'DDMONYY HH24:MI') resvTo, 
			TRUCK_NO truckNo
			FROM TCS_DOCK_RESV RESV
			WHERE (TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') BETWEEN RESV_FROM AND (RESV_TO - 1/24/60)) AND TRUCK_DOCK = #DOCK_NO#
		]]>
	</select>
	<select id="sqlGetTCSIsTruckReservedAfterBeforeGapTime"
		parameterClass="java.util.Map" resultClass="java.lang.String">
		<![CDATA[
			WITH RULE_VAL AS (
			  SELECT RULE_VALUE, 
			  (TO_DATE(#FROM#, 'DDMONYY HH24:MI') - (NVL(RULE_VALUE, 30)/24/60)) FROM_TIME, 
			  (TO_DATE(#TO#, 'DDMONYY HH24:MI') + (NVL(RULE_VALUE, 30)/24/60)) TO_TIME,
			  #TRUCK_NO# TRUCK_NO
			  FROM DUAL 
			  JOIN CMSRULES
			  ON 1 = 1
			  WHERE RULE_CODE = 'TCS_NEXT_RESERVE_GAP_MINS'
			)
			SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM TCS_DOCK_RESV RESV
			JOIN RULE_VAL RUL
			ON RESV.TRUCK_NO = RUL.TRUCK_NO
			WHERE
			(
			  (RESV_FROM >= RUL.FROM_TIME AND RESV_FROM <= RUL.TO_TIME) OR 
			  (RESV_TO >= RUL.FROM_TIME AND RESV_TO <= RUL.TO_TIME) OR
			  (RUL.FROM_TIME <= RESV_FROM AND RUL.TO_TIME >= RESV_FROM) OR 
			  (RUL.FROM_TIME <= RESV_TO AND RUL.TO_TIME >= RESV_TO)			 	
			)
		]]>
	</select>
	<select id="sqlGetTCSIsTruckBookingAfterBeforeGapTime"
		parameterClass="java.util.Map" resultClass="java.lang.String">
		<![CDATA[
			WITH RULE_VAL AS (
			  SELECT RULE_VALUE, 
			  (TO_DATE(#FROM#, 'DDMONYY HH24:MI') - (NVL(RULE_VALUE, 30)/24/60)) FROM_TIME, 
			  (TO_DATE(#TO#, 'DDMONYY HH24:MI') + (NVL(RULE_VALUE, 30)/24/60)) TO_TIME,
			  #TRUCK_NO# TRUCK_NO
			  FROM DUAL 
			  JOIN CMSRULES
			  ON 1 = 1
			  WHERE RULE_CODE = 'TCS_NEXT_RESERVE_GAP_MINS'
			),
			IMP_BKG AS (
			  SELECT RUL.TRUCK_NO,
			  TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(NVL(BKG_SLOT_FROM, 0), '0000')), 'DDMONYY HH24MI') BKG_FROM,
			  TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(NVL(BKG_SLOT_FROM, 0), '0000')), 'DDMONYY HH24MI') 
			    + (EXP_DURATION / 24 / 60) BKG_TO
			  FROM IMP_BOOKING BKG
			  JOIN RULE_VAL RUL
			  ON RUL.TRUCK_NO IN(TRUCK1, TRUCK2, TRUCK3, TRUCK4, TRUCK5, TRUCK6)
			  WHERE STATUS = 'ISSUED' AND BKG_SLOT_DATE > SYSDATE - 1
			),
			EXP_BKG AS (
			  SELECT RUL.TRUCK_NO,
			  TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(NVL(TIME_SLOT_FROM, 0), '0000')), 'DDMONYY HH24MI') BKG_FROM,
			  TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(NVL(TIME_SLOT_FROM, 0), '0000')), 'DDMONYY HH24MI') 
			    + (EXP_DURATION / 24 / 60) BKG_TO
			  FROM EXP_BOOKING BKG
			  JOIN RULE_VAL RUL
			  ON RUL.TRUCK_NO = TRUCK
			  WHERE
			  BOOKING_DATE > SYSDATE - 1
			)
			SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM (
			  SELECT * FROM IMP_BKG
			  UNION
			  SELECT * FROM EXP_BKG
			) BKG
			JOIN RULE_VAL RUL
			ON BKG.TRUCK_NO = RUL.TRUCK_NO
			WHERE
			(
			  (BKG.BKG_FROM >= RUL.FROM_TIME AND BKG.BKG_FROM <= RUL.TO_TIME) OR 
			  (BKG.BKG_TO >= RUL.FROM_TIME AND BKG.BKG_TO <= RUL.TO_TIME) OR
			  (RUL.FROM_TIME <= BKG.BKG_FROM AND RUL.TO_TIME >= BKG.BKG_FROM) OR 
			  (RUL.FROM_TIME <= BKG.BKG_TO AND RUL.TO_TIME >= BKG.BKG_TO)			 	
			)
		]]>
	</select>
	<!-- Swap Truck Dock -->
	<update id="sqlUpdateTCSSwapDock" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			UPDATE TCS_DOCK_ALLOCATION
			SET STATUS = #status#, OCCUPIED = #occupied#,
			ALLOCATION_DURATION = #duration#, TRIP_ID = #tripId#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TRUCK_DOCK = #dockNo#
		]]>
	</update>
	<update id="sqlUpdateTCSTripTruckDock" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TRUCK_TRIP
			SET TRUCK_DOCK = #DOCK_NO#, LM_DATE = SYSDATE, LM_USER_ID = #USER_ID# 
			WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>
	<update id="sqlUpdateTCSTripDockAllocTime" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TRUCK_TRIP_EVENTS SET DOCK_ALLOCATION_TIME = SYSDATE, 
			LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>
	<!-- Truck Queue Monitoring -->
	<select id="sqlGetSearchTCSTruckQMonitoring" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT PURPOSE purpose, PURP.CODE_DESC incomingPurpose, COUNT(TRIP_ID) noOfTrucks
			FROM
			TRUCK_TRIP TRIP
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE
			CLOSED = 'N' AND TRUCK_QUEUE_IND = 'Y' AND CURR_LOC IN('TPA')
			GROUP BY PURPOSE, PURP.CODE_DESC
			ORDER BY PURP.CODE_DESC
		]]>
	</select>
	<select id="sqlGetTCSTruckQMonitoringByPurpose" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT NVL(QUEUE_ORDER_NO, 0) priority, TRIP.TRUCK_NO truckNo, 
			NVL(NVL(REASON.CODE_DESC, TRIP.INCOMING_REASON), 'UNKNOWN') reason,
			TO_CHAR(ARR_TIME, 'DDMONYY HH24:MI') arrivalTime,
			TO_CHAR(ASSIGN_COMPL_DATE, 'DDMONYY HH24:MI') assignmentCompletionTime,
			FLOOR((SYSDATE - ASSIGN_COMPL_DATE) * 24 * 60) dockQueueingTime,
			FLOOR((SYSDATE - ARR_TIME) * 24 * 60) waitingTimeMin,
			IPASS.IPASS_NO ipassNo, CUST.CODE_DESC customerName, CONTACT_NO contactNo,
			TRIP.TRIP_ID tripId,
			CASE WHEN FLOOR((SYSDATE - ASSIGN_COMPL_DATE) * 24 * 60) > purpose.sla_time then 'R' 
             WHEN FLOOR((SYSDATE - ASSIGN_COMPL_DATE) * 24 * 60) > (purpose.sla_time - purpose.sla_alert_time) then 'Y'
             ELSE '' END as colorInd
			FROM TRUCK_TRIP TRIP
			LEFT OUTER JOIN (
			  SELECT IPASS_NO, IPASS.TRUCK_NO, IPASS.CUST_NO, IPASS.CONTACT_NO
			  FROM TCS_IPASS_MASTER IPASS
			  JOIN (
			  SELECT MAX(CR_DATE) CR_DATE, TRUCK_NO
			  FROM TCS_IPASS_MASTER IPASS
			  GROUP BY TRUCK_NO
			  ) GRP
			  ON IPASS.TRUCK_NO = GRP.TRUCK_NO AND IPASS.CR_DATE = GRP.CR_DATE
			  WHERE IPASS.CUST_NO IS NOT NULL    
			) IPASS
			ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
			LEFT OUTER JOIN MAST_CODE_DTL REASON
			ON TRIP.INCOMING_REASON = REASON.CODE AND REASON.CODE_TYPE = 'TCS_INCOMING_REASON'			
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND ACTIVE = 'Y'
			LEFT JOIN MAST_TCS_DOCK_PURPOSE PURPOSE ON PURPOSE.CODE = TRIP.INCOMING_REASON 
			WHERE
			CLOSED = 'N' AND TRUCK_QUEUE_IND = 'Y' AND CURR_LOC IN('TPA')
			AND TRIP.PURPOSE = #PARAM#
			ORDER BY QUEUE_ORDER_NO, ARR_TIME
		]]>
	</select>
	<update id="sqlUpdateTCSTruckQPriority" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			UPDATE TRUCK_TRIP SET QUEUE_ORDER_NO = #priority# WHERE TRIP_ID = #tripId#
		]]>
	</update>
	<!-- Update Truck Dock Occupy Status -->
	<select id="sqlGetTCSGetDockOccupyInfo" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT
			ALLOC.TRUCK_DOCK dockNo, TRIP.TRUCK_NO truckNo, ALLOC.OCCUPIED occupied
			FROM
			TCS_DOCK_ALLOCATION ALLOC
			LEFT OUTER JOIN TRUCK_TRIP TRIP
			ON ALLOC.TRIP_ID = TRIP.TRIP_ID
			WHERE ALLOC.TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<!-- Update Truck Dock Occupation -->
	<select id="sqlGetTCSIsTruckParkedInDock" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(1), 0, 'N', 'Y') 
			FROM TRUCK_TRIP
			WHERE TRIP_CLOSED = 'N' AND PARKED_DOCK = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSParkedTruckDock" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT PARKED_DOCK
			FROM TRUCK_TRIP 
			WHERE TRIP_CLOSED = 'N' AND TRUCK_NO = #PARAM#
		]]>
	</select>
	<update id="sqlUpdateTCSTripDockOccupancy" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TRUCK_TRIP 
			SET CURR_LOC = #LOCATION#, TRUCK_STATE = 'D',
			PARKED_DOCK = #DOCK_NO#, PARKED_REMARKS = #REMARKS#, PARKED_USER_ID = #USER_ID#,
			LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>
	<update id="sqlUpdateTCSResetTripOccupancy" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TRUCK_TRIP
			SET TRUCK_STATE = 'L', PARKED_DOCK = NULL, PARKED_REMARKS = NULL,
			LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE PARKED_DOCK = #DOCK_NO# AND TRIP_CLOSED = 'N'
		]]>
	</update>
	<update id="sqlUpdateTCSResetOccupancy" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TCS_DOCK_ALLOCATION 
			SET PROXIMITY_FACTOR = 0, OCCUPIED = 'N',
			LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE TRUCK_DOCK = (
				SELECT MAX(PARKED_DOCK)
				FROM TRUCK_TRIP TRIP 
				WHERE TRIP.TRIP_CLOSED = 'N' AND TRIP.TRUCK_NO = #TRUCK_NO#
			)
		]]>
	</update>
	<update id="sqlUpdateTCSAllocDockOccupancy" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TCS_DOCK_ALLOCATION 
			SET PROXIMITY_FACTOR = 100, OCCUPIED = 'Y',
			LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE TRUCK_DOCK = #DOCK_NO#
		]]>
	</update>
	<!-- Update Incoming Purpose -->
	<update id="sqlUpdateTCSInPurpose" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			UPDATE TRUCK_TRIP 
			SET PURPOSE = #newPurpose#, SH_AGT_CODE = #customerNo#, 
			DERIVED_PURPOSE = (SELECT DERIVED_PURPOSE FROM MAST_TCS_INCOMING_PURPOSE WHERE CODE = #newPurpose#),
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TRIP_ID = #tripId#
		]]>
	</update>
	<update id="sqlUpdateTCSInPurposeTime" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			UPDATE TRUCK_TRIP_EVENTS 
			SET DECL_PURPOSE_TIME = SYSDATE, LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TRIP_ID = #tripId#
		]]>
	</update>
	<update id="sqlUpdateTCSInPurposeTempiPass" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			UPDATE TCS_IPASS_MASTER 
			SET PURPOSE = #newPurpose#, LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TRUCK_NO = #truckNo# AND IPASS_TYPE = 'T'
		]]>
	</update>
	<!-- Assign URF -->
	<select id="sqlGetTCSURFTruckRegURFs" parameterClass="cargo.cms.tcs.bo.TCSDockSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT	EIR_NO eirNo, EIR_NO oldEirNo, a.TRIP_ID tripId, RELEASED_YN releasedYN, 
			TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM ULD_TRUCK_EIR a WHERE a.TRIP_ID = #tripId#
		]]>
	</select>
	<select id="sqlGetTCSURFTruckRegMultiUserCheck" parameterClass="java.util.Map"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(TRIP_ID) 
			FROM ULD_TRUCK_EIR 
			WHERE TRIP_ID =	#tripId# AND EIR_NO = #eirNo# 
			AND TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') = #lmDate#
		]]>
	</select>
	<insert id="sqlInsertTCSURFTruckReg" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			INSERT INTO	ULD_TRUCK_EIR
			(TRIP_ID, EIR_NO, RELEASED_YN, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE)
			VALUES(#tripId#, #eirNo#, #releasedYN#, #crUserId#, SYSDATE, #lmUserId#, SYSDATE)
		]]>
	</insert>
	<select id="sqlGetTCSURFTruckRegInQueue" parameterClass="cargo.cms.tcs.bo.TCSDockBO"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(TRIP_ID) 
			FROM TRUCK_TRIP
			WHERE TRIP_ID = #tripId# AND CLOSED = 'N' AND TRUCK_QUEUE_IND = 'Y'
		]]>
	</select>
	<select id="sqlGetTCSURFTruckRegMaxAck" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT NVL(MAX(RULE_VALUE), 2) FROM CMSRULES WHERE RULE_CODE = 'URF_TRUCK_REG_EXTRA'
		]]>
	</select>
	<delete id="sqlDeleteTCSURFTruckRegURF" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			DELETE FROM	ULD_TRUCK_EIR WHERE TRIP_ID = #tripId# AND EIR_NO = #oldEirNo#
		]]>
	</delete>
	<update id="sqlUpdateTCSURFTruckRegExtraURFs" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			UPDATE TRUCK_TRIP
			SET EXTRA_URF = #extraURFs#, LM_DATE = SYSDATE, LM_USER_ID = #lmUserId# 
			WHERE TRIP_ID = #tripId#
		]]>
	</update>
	<select id="sqlGetTCSURFTruckRegExtraURF" parameterClass="cargo.cms.tcs.bo.TCSDockBO"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT NVL(EXTRA_URF, 0) FROM TRUCK_TRIP WHERE TRIP_ID = #tripId#
		]]>
	</select>
	<select id="sqlGetTCSURFStatusValue" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT b.CODE_DESC FROM ULD_ISS_HD a
			LEFT OUTER JOIN MAST_CODE_DTL b
			ON a.STATUS = b.CODE
			WHERE EIR_NO = #PARAM# AND B.CODE_TYPE = 'URF_STATUS'
		]]>
	</select>
	<select id="sqlGetTCSURFStatus" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT STATUS FROM ULD_ISS_HD a	WHERE EIR_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSValidURFCount" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(1) FROM ULD_ISS_HD a WHERE EIR_NO = #PARAM# AND STATUS <> 'DELETED'
		]]>
	</select>
	<select id="sqlGetTCSURFTruckRegIsValidURF" parameterClass="cargo.cms.tcs.bo.TCSDockBO"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(EIR_NO) FROM ULD_ISS_HD
			WHERE STATUS IN('APPROVED', 'PARTRELEASED') AND EIR_NO = #eirNo# AND PURPOSE = 'Agt'
		]]>
	</select>
	<select id="sqlGetTCSURFTruckRegURFAllocCount" parameterClass="cargo.cms.tcs.bo.TCSDockBO"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(a.TRIP_ID) FROM
			ULD_TRUCK_EIR a, TRUCK_TRIP b
			WHERE
			a.TRIP_ID = b.TRIP_ID AND EIR_NO = #eirNo# AND RELEASED_YN = 'N'
			AND a.TRIP_ID <> #tripId# AND b.CLOSED = 'N' AND b.EXIT_IND = 'N'
		]]>
	</select>
	<select id="sqlGetTCSURFSchCollURFAllocCount" parameterClass="cargo.cms.tcs.bo.TCSDockBO"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(a.SCH_COLL_NO) FROM
			EIR_SCH_COLL a,
			EIR_SCH_COLL_DTL b
			WHERE
			a.SCH_COLL_NO = b.SCH_COLL_NO AND
			EIR_NO = #eirNo# AND 
			(
			TO_DATE(TO_CHAR(TIME_SLOT_DATE, 'DDMONYY')) = TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY')) AND TIME_SLOT_TO >= TO_NUMBER(TO_CHAR(SYSDATE, 'HH24MI')) OR 
			TO_DATE(TO_CHAR(TIME_SLOT_DATE, 'DDMONYY')) > TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'))
			)
		]]>
	</select>
	<select id="sqlGetTCSURFExpireCount" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(1) FROM ULD_ISS_HD a WHERE EIR_NO = #PARAM#
			AND a.EIR_EXPIRY_DATE < SYSDATE 
			AND a.STATUS IN('APPROVED','PARTRELEASED','RELEASED','CLOSED','SPLITTED')
		]]>
	</select>
	<select id="sqlGetTCSValidAgentURFCount" parameterClass="java.util.Map"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(1) FROM ULD_ISS_HD a 
			WHERE EIR_NO = #EIR_NO# AND AGENT_CUST_NO = #AGENT# AND PURPOSE = 'Agt'
		]]>
	</select>
	<update id="sqlUpdateTCSURFTruckPurposeAsColl" parameterClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			UPDATE TRUCK_TRIP
			SET PURPOSE = 'ULD_COLL', DERIVED_PURPOSE = (SELECT DERIVED_PURPOSE FROM MAST_TCS_INCOMING_PURPOSE WHERE CODE = 'ULD_COLL'),
			LM_DATE = SYSDATE, LM_USER_ID = #lmUserId# 
			WHERE TRIP_ID = #tripId#
		]]>
	</update>
	<update id="sqlUpdateTCSTripExtraURFs" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TRUCK_TRIP SET EXTRA_URF = 0, LM_DATE = SYSDATE, LM_USER_ID = #USER_ID# 
			WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>
	<delete id="sqlDeleteTCSURFAssignment" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM ULD_TRUCK_EIR WHERE TRIP_ID = #PARAM#
		]]>
	</delete>
	<!-- -->
	<!-- TRUCK DOCK ALLOCATION (END) -->
	<!-- -->
	<!-- -->
	<!-- TRAFFIC MONITORING (BEGIN) -->
	<!-- -->
	<!-- Self Handling Company Configuration Master -->
	<select id="sqlGetTCSSHCDockExist" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(TRUCK_DOCK), 0, 'N', 'Y') EXIST
			FROM TCS_SHA_CONFIG CONFIG
			JOIN TCS_SHA_DOCKS DOCKS
			ON CONFIG.CUST_NO = DOCKS.CUST_NO
			WHERE
			DOCKS.TRUCK_DOCK = #DOCK_NO# AND CONFIG.CUST_NO <> #CUSTOMER_NO#
		]]>
	</select>
	<update id="sqlUpdateTCSSHCConfig" parameterClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			UPDATE TCS_SHA_CONFIG
			SET TRUCK_QUOTA = #quota#, 
			ENTRY_CHK_POINT = #entryToDockChkPt#, EXIT_CHK_POINT = #exitFromDockChkPt#,
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE
			CUST_NO = #companyCode#
		]]>
	</update>
	<update id="sqlUpdateTCSSHCConfigDock" parameterClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			UPDATE TCS_SHA_DOCKS SET TRUCK_DOCK = #dockNo#, LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
		]]>
	</update>
	<update id="sqlDeleteTCSSHCConfigDock" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM TCS_SHA_DOCKS WHERE CUST_NO = #PARAM#
		]]>
	</update>
	<select id="sqlGetTCSSearchSHCConfig" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficResultBO">
		<![CDATA[
			SELECT CUST_NO companyCode, CUST.CODE_DESC companyName,
			(SELECT COUNT(TRUCK_DOCK) FROM TCS_SHA_DOCKS DOCKS WHERE DOCKS.CUST_NO = SHC.CUST_NO) noOfDocks,
			TRUCK_QUOTA quota,
			SHC.LM_USER_ID lastUpdateUser,
			TO_CHAR(SHC.LM_DATE, 'DDMONYY HH24:MI') lastUpdateTime,
			TO_CHAR(SHC.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM
			TCS_SHA_CONFIG SHC
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON SHC.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
		]]>
	</select>
	<!-- Create Special Attention -->
	<select id="sqlGetTCSSpecialAttention" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT TRIP.TRUCK_NO truckNo, IPASS.IPASS_NO ipassNo, 
			PURP.CODE_DESC incomingPurpose, 
			(
				SELECT MAX(TRUCK_DOCK) FROM TCS_DOCK_ALLOCATION WHERE TRIP_ID = TRIP.TRIP_ID
			) allocatedDockNo,
			SPL_ATTN remark
			FROM TRUCK_TRIP TRIP
			JOIN TCS_IPASS_MASTER IPASS
			ON TRIP.TRUCK_NO = IPASS.TRUCK_NO AND TRIP.CLOSED = 'N'
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE
			TRIP.TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<update id="sqlUpdateTCSSpecialAttention" parameterClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			UPDATE TRUCK_TRIP SET SPL_ATTN = #remark#, LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE TRIP_ID = (SELECT MAX(TRIP_ID) FROM TRUCK_TRIP WHERE UPPER(TRUCK_NO) = UPPER(#truckNo#) AND CLOSED = 'N')	
		]]>
	</update>
	<!-- Truck Activity Time -->
	<select id="sqlGetTCSTruckActivityTimeAll" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSMiscBO">
		<![CDATA[
			WITH CODE AS (
			  SELECT 1 SEQ, 'PURP' CODE, 'Declare Incoming Purpose Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 2 SEQ, 'TPE' CODE, 'Truck Park Entry Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 3 SEQ, 'QUE' CODE, 'Truck in Queue Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 4 SEQ, 'ALOC' CODE, 'Truck Dock Allocation Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 5 SEQ, 'TPX' CODE, 'Leave Truck Park Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 6 SEQ, 'TME1' CODE, 'Terminal Entry Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 7 SEQ, 'CPO2R' CODE, 'Level 2 Ramp Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 8 SEQ, 'CPO3R' CODE, 'Level 3 Ramp Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 9 SEQ, 'CPO3N' CODE, 'Level 3 East Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 10 SEQ, 'CPO3W' CODE, 'Level 3 West Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 11 SEQ, 'CPO5R' CODE, 'Level 5 Ramp Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 12 SEQ, 'CPO5N' CODE, 'Level 5 East Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 13 SEQ, 'CPO5W' CODE, 'Level 5 West Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 14 SEQ, 'CPO7U' CODE, 'Level 7 Up Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 15 SEQ, 'TDOCC' CODE, 'Truck Dock Occupancy Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 16 SEQ, 'TDREL' CODE, 'Leave Truck Dock Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 17 SEQ, 'CPO7D' CODE, 'Level 7 Down Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 18 SEQ, 'TMX1' CODE, 'Ground Floor Exit Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 19 SEQ, 'TMX3' CODE, 'Level 3 Exit Checkpoint Time' CODE_DESC FROM DUAL
			  UNION
			  SELECT 20 SEQ, 'TMX5' CODE, 'Level 5 Exit Checkpoint Time' CODE_DESC FROM DUAL
			)
			SELECT CODE_DESC activity, EVENT_TIME, TO_CHAR(EVENT_TIME, 'DDMONYY HH24:MI') time
			FROM
			(			
				SELECT PATH.CODE, PATH.CODE_DESC, PATH.SEQ,
				CASE 
				  WHEN PATH.CODE = 'TPE' THEN EVENT.TRUCK_PARK_ENTRY_TIME
				  WHEN PATH.CODE = 'PURP' THEN EVENT.DECL_PURPOSE_TIME
				  WHEN PATH.CODE = 'QUE' THEN EVENT.TRUCK_IN_QUEUE_TIME
				  WHEN PATH.CODE = 'ALOC' THEN EVENT.DOCK_ALLOCATION_TIME
				  WHEN PATH.CODE = 'TPX' THEN EVENT.LEAVE_TRUCKPARK_TIME
				  WHEN PATH.CODE = 'TME1' THEN EVENT.TERMINAL_ENTRY_TIME
				  WHEN PATH.CODE = 'TDOCC' THEN EVENT.DOCK_OCCUPY_TIME
				  WHEN PATH.CODE = 'TDREL' THEN EVENT.LEAVE_DOCK_TIME
				  WHEN PATH.CODE = 'CPO2R' THEN EVENT.LVL2_RAMP_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO3R' THEN EVENT.LVL3_RAMP_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO3N' THEN EVENT.LVL3_EAST_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO3W' THEN EVENT.LVL3_WEST_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO5R' THEN EVENT.LVL5_RAMP_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO5N' THEN EVENT.LVL5_EAST_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO5W' THEN EVENT.LVL5_WEST_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO7U' THEN EVENT.LVL7_UP_CHKPT
				  WHEN PATH.CODE = 'CPO7D' THEN EVENT.LVL7_DOWN_CHKPT
				  WHEN PATH.CODE = 'TMX1' THEN EVENT.LVL1_EXIT_CHKPT_TIME
				  WHEN PATH.CODE = 'TMX3' THEN EVENT.LVL3_EXIT_CHKPT_TIME
				  WHEN PATH.CODE = 'TMX5' THEN EVENT.LVL5_EXIT_CHKPT_TIME
				  ELSE SYSDATE
				END EVENT_TIME
				FROM CODE PATH
				LEFT OUTER JOIN TRUCK_TRIP_EVENTS EVENT
				ON EVENT.TRIP_ID = #PARAM#
			)
			ORDER BY EVENT_TIME, SEQ
		]]>
	</select>
	<select id="sqlGetTCSTruckActivityTime" parameterClass="java.util.Map"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			WITH CODE AS (
			  SELECT 'PURP' CODE, 'Declare Incoming Purpose Time' CODE_DESC, 'Y' DISABLED FROM DUAL
			  UNION
			  SELECT 'TPE' CODE, 'Truck Park Entry Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'QUE' CODE, 'Truck in Queue Time' CODE_DESC, 'Y' DISABLED FROM DUAL
			  UNION
			  SELECT 'ALOC' CODE, 'Truck Dock Allocation Time' CODE_DESC, 'Y' DISABLED FROM DUAL WHERE #DOCK_NO# IS NOT NULL
			  UNION
			  SELECT 'TPX' CODE, 'Leave Truck Park Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'TME1' CODE, 'Terminal Entry Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'CPO2R' CODE, 'Level 2 Ramp Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'CPO3R' CODE, 'Level 3 Ramp Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'CPO3N' CODE, 'Level 3 East Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'CPO3W' CODE, 'Level 3 West Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'CPO5R' CODE, 'Level 5 Ramp Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'CPO5N' CODE, 'Level 5 East Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'CPO5W' CODE, 'Level 5 West Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'CPO7U' CODE, 'Level 7 Up Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'TDOCC' CODE, 'Truck Dock Occupancy Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'TDREL' CODE, 'Leave Truck Dock Time' CODE_DESC, 'Y' DISABLED FROM DUAL
			  UNION
			  SELECT 'CPO7D' CODE, 'Level 7 Down Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'TMX1' CODE, 'Ground Floor Exit Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'TMX3' CODE, 'Level 3 Exit Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			  UNION
			  SELECT 'TMX5' CODE, 'Level 5 Exit Checkpoint Time' CODE_DESC, 'N' DISABLED FROM DUAL
			),
			INLOC AS (
			  SELECT PATH_SEQUENCE SEQ, SENSORY_LOCATION_CODE CODE, ON_WAY_IN_OUT ORDR FROM TCS_SEGMENT_PATH
			  WHERE 
			  SEGMENT_ID = (SELECT 'L' || DOCK_LEVEL || SIDE FROM TCS_DOCK_MASTER WHERE TRUCK_DOCK = #DOCK_NO#) AND
			  ON_WAY_IN_OUT = 'IN'
			),
			OUTLOC AS (
			  SELECT PATH_SEQUENCE SEQ, SENSORY_LOCATION_CODE CODE, ON_WAY_IN_OUT ORDR FROM TCS_SEGMENT_PATH
			  WHERE 
			  SEGMENT_ID = (SELECT 'L' || DOCK_LEVEL || SIDE FROM TCS_DOCK_MASTER WHERE TRUCK_DOCK = #DOCK_NO#) AND
			  ON_WAY_IN_OUT = 'OUT'
			),
			DOCK AS (
			  SELECT (SELECT MAX(SEQ) FROM INLOC) SEQ,
			  'TDOCC' CODE, 'IN1' ORDR
			  FROM DUAL WHERE #DOCK_NO# IS NOT NULL
			  UNION
			  SELECT (SELECT MAX(SEQ) FROM INLOC) SEQ,
			  'TDREL' CODE, 'IN2' ORDR
			  FROM DUAL WHERE #DOCK_NO# IS NOT NULL
			),
			INIT AS (
			  SELECT 0 SEQ, 'PURP' CODE, 'EN1' ORDR FROM DUAL
			  UNION
			  SELECT 0 SEQ, 'TPE' CODE, 'EN2' ORDR FROM DUAL
			  UNION
			  SELECT 0 SEQ, 'QUE' CODE, 'EN3' ORDR FROM DUAL
			  UNION
			  SELECT 0 SEQ, 'ALOC' CODE, 'EN4' ORDR FROM DUAL
			  UNION
			  SELECT 0 SEQ, 'TPX' CODE, 'EN5' ORDR FROM DUAL
			)
			SELECT CODE activity, CODE_DESC activityDesc, DISABLED disabled,
			TO_CHAR(TIME, 'DDMONYY') time, TO_CHAR(TIME, 'HH24') timeHour, TO_CHAR(TIME, 'MI') timeMinute, 
			SEQ, ORDR
			FROM
			(
				SELECT PATH.CODE , CODE.CODE_DESC, CODE.DISABLED, PATH.SEQ, PATH.ORDR,
				CASE
				  WHEN PATH.CODE = 'PURP' THEN EVENT.DECL_PURPOSE_TIME
				  WHEN PATH.CODE = 'TPE' THEN EVENT.TRUCK_PARK_ENTRY_TIME
				  WHEN PATH.CODE = 'QUE' THEN EVENT.TRUCK_IN_QUEUE_TIME
				  WHEN PATH.CODE = 'ALOC' THEN EVENT.DOCK_ALLOCATION_TIME
				  WHEN PATH.CODE = 'TPX' THEN EVENT.LEAVE_TRUCKPARK_TIME
				  WHEN PATH.CODE = 'TME1' THEN EVENT.TERMINAL_ENTRY_TIME
				  WHEN PATH.CODE = 'TDOCC' THEN EVENT.DOCK_OCCUPY_TIME
				  WHEN PATH.CODE = 'TDREL' THEN EVENT.LEAVE_DOCK_TIME
				  WHEN PATH.CODE = 'CPO2R' THEN EVENT.LVL2_RAMP_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO3R' THEN EVENT.LVL3_RAMP_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO3N' THEN EVENT.LVL3_EAST_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO3W' THEN EVENT.LVL3_WEST_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO5R' THEN EVENT.LVL5_RAMP_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO5N' THEN EVENT.LVL5_EAST_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO5W' THEN EVENT.LVL5_WEST_CHKPT_TIME
				  WHEN PATH.CODE = 'CPO7U' THEN EVENT.LVL7_UP_CHKPT
				  WHEN PATH.CODE = 'CPO7D' THEN EVENT.LVL7_DOWN_CHKPT
				  WHEN PATH.CODE = 'TMX1' THEN EVENT.LVL1_EXIT_CHKPT_TIME
				  WHEN PATH.CODE = 'TMX3' THEN EVENT.LVL3_EXIT_CHKPT_TIME
				  WHEN PATH.CODE = 'TMX5' THEN EVENT.LVL5_EXIT_CHKPT_TIME
				  ELSE SYSDATE
				END TIME
				FROM (
				  SELECT * FROM INIT
				  UNION
				  SELECT * FROM INLOC
				  UNION
				  SELECT * FROM DOCK
				  UNION
				  SELECT * FROM OUTLOC
				) PATH
				LEFT OUTER JOIN CODE
				ON PATH.CODE = CODE.CODE
				LEFT OUTER JOIN TRUCK_TRIP_EVENTS EVENT
				ON EVENT.TRIP_ID = #TRIP_ID#
				WHERE CODE.CODE IS NOT NULL
			)
			ORDER BY SEQ, ORDR
		]]>
	</select>
	<select id="sqlGetTCSServiceTruckActivityTime" parameterClass="java.util.Map"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			WITH CODE AS (
			  SELECT 'TPE' CODE, 'Truck Park Entry Time' CODE_DESC, 'N' DISABLED, 1 ORD FROM DUAL
			  UNION
			  SELECT 'TPX' CODE, 'Leave Truck Park Time' CODE_DESC, 'N' DISABLED, 2 ORD FROM DUAL
			  UNION			
			  SELECT 'TME1' CODE, 'Terminal Entry Time' CODE_DESC, 'N' DISABLED, 3 ORD FROM DUAL
			  UNION			  
			  SELECT 'TMX1' CODE, 'Terminal Exit Time' CODE_DESC, 'N' DISABLED, 4 ORD FROM DUAL
			)      
			SELECT CODE activity, CODE_DESC activityDesc, DISABLED disabled,
			TO_CHAR(TIME, 'DDMONYY') time, TO_CHAR(TIME, 'HH24') timeHour, TO_CHAR(TIME, 'MI') timeMinute
			FROM
			(
			  SELECT CODE.CODE , CODE.CODE_DESC, CODE.DISABLED, CODE.ORD,
			  CASE
				WHEN CODE.CODE = 'TPE' THEN EVENT.TRUCK_PARK_ENTRY_TIME
				WHEN CODE.CODE = 'TPX' THEN EVENT.LEAVE_TRUCKPARK_TIME			  
			    WHEN CODE.CODE = 'TME1' THEN EVENT.TERMINAL_ENTRY_TIME
			    WHEN CODE.CODE = 'TMX1' THEN EVENT.TERMINAL_EXIT_TIME
			    ELSE SYSDATE
			  END TIME
			  FROM CODE
			  LEFT OUTER JOIN TRUCK_TRIP_EVENTS EVENT
			  ON EVENT.TRIP_ID = #TRIP_ID# AND CODE.CODE IS NOT NULL
			)
			ORDER BY ORD
		]]>
	</select>
	<update id="sqlUpdateTCSTruckTripEvent" parameterClass="cargo.cms.tcs.bo.TCSTruckTripEventsBO">
		<![CDATA[
			UPDATE TRUCK_TRIP_EVENTS
			SET
			TRUCK_PARK_ENTRY_TIME = TO_DATE(#truckParkEntryTime#, 'DDMONYY HH24:MI'),
			DECL_PURPOSE_TIME = TO_DATE(#declPurposeTime#, 'DDMONYY HH24:MI'),
			TRUCK_IN_QUEUE_TIME = TO_DATE(#truckInQueueTime#, 'DDMONYY HH24:MI'),
			DOCK_ALLOCATION_TIME = TO_DATE(#dockAllocationTime#, 'DDMONYY HH24:MI'),
			LEAVE_TRUCKPARK_TIME = TO_DATE(#leaveTruckParkTime#, 'DDMONYY HH24:MI'),
			TERMINAL_ENTRY_TIME = TO_DATE(#terminalEntryTime#, 'DDMONYY HH24:MI'),
			LVL2_RAMP_CHKPT_TIME = TO_DATE(#lvl2RampChkPtTime#, 'DDMONYY HH24:MI'),
			LVL3_RAMP_CHKPT_TIME = TO_DATE(#lvl3RampChkPtTime#, 'DDMONYY HH24:MI'),
			LVL3_EAST_CHKPT_TIME = TO_DATE(#lvl3EastChkPtTime#, 'DDMONYY HH24:MI'),
			LVL3_WEST_CHKPT_TIME = TO_DATE(#lvl3WestChkPtTime#, 'DDMONYY HH24:MI'),
			LVL5_RAMP_CHKPT_TIME = TO_DATE(#lvl5RampChkPtTime#, 'DDMONYY HH24:MI'),
			LVL5_EAST_CHKPT_TIME = TO_DATE(#lvl5EastChkPtTime#, 'DDMONYY HH24:MI'),
			LVL5_WEST_CHKPT_TIME = TO_DATE(#lvl5WestChkPtTime#, 'DDMONYY HH24:MI'),
			LVL7_UP_CHKPT = TO_DATE(#lvl7UpChkPt#, 'DDMONYY HH24:MI'),
			LVL7_DOWN_CHKPT = TO_DATE(#lvl7DownChkPt#, 'DDMONYY HH24:MI'),
			DOCK_OCCUPY_TIME = TO_DATE(#dockOccupyTime#, 'DDMONYY HH24:MI'),
			LEAVE_DOCK_TIME = TO_DATE(#leaveDockTime#, 'DDMONYY HH24:MI'),
			LVL1_EXIT_CHKPT_TIME = TO_DATE(#lvl1ExitChkPtTime#, 'DDMONYY HH24:MI'),
			LVL3_EXIT_CHKPT_TIME = TO_DATE(#lvl3ExitChkPtTime#, 'DDMONYY HH24:MI'),
			LVL5_EXIT_CHKPT_TIME = TO_DATE(#lvl5ExitChkPtTime#, 'DDMONYY HH24:MI'),
			TERMINAL_EXIT_TIME = TO_DATE(#terminalExitTime#, 'DDMONYY HH24:MI'),
			LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE
			TRIP_ID = #tripId#
		]]>
	</update>
	<!-- Truck Dock and Traffic Monitoring -->
	<!-- Truck Dock Monitoring (Valued Cargo Center) -->
	<!-- Truck Monitoring -->
	<!-- Truck Monitoring List (Self Handling Company) -->
	<select id="sqlGetTruckMonitorListInfo" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			WITH SHCBLK AS (
			  SELECT CUST.CODE_DESC, CUST.CODE, 
			  BLK.DOCK_BLOCK_ID, BLK.MAXIMUM_ALLOWED, BLK.TRUCKS_IN_TERMINAL
			  FROM CUST_COMPANY CUST
			  LEFT OUTER JOIN TCS_DOCK_BLOCK BLK
			  ON CUST.CODE = BLK.CUST_NO AND BLOCK_TYPE = 'SHC' AND BLK.FROM_DT <= SYSDATE AND SYSDATE <= BLK.TO_DT
			  WHERE ACTIVE = 'Y' AND UPPER(CODE_DESC) = UPPER(#PARAM#)
			),
			SHA AS (
			  SELECT
			  (SELECT COUNT(TRUCK_DOCK) FROM TCS_DOCK_BLOCK_DOCK DOCK WHERE DOCK.DOCK_BLOCK_ID = BLK.DOCK_BLOCK_ID) NO_OF_DOCKS,
			  BLK.TRUCKS_IN_TERMINAL NO_OF_TRUCKS_IN_DOCK,
			  BLK.CODE_DESC SHC_NAME, NVL(BLK.MAXIMUM_ALLOWED, 0) SHC_QUOTA
			  FROM
			  TCS_SHA_CONFIG CONFIG
			  JOIN SHCBLK BLK
			  ON CONFIG.CUST_NO = BLK.CODE
			)
			SELECT NVL(NO_OF_DOCKS, 0) noOfDocks, NVL(SHC_QUOTA, 0) totalQuota,
			NVL(NO_OF_TRUCKS_IN_DOCK, 0) noOfTrucksOnDock, 
			NVL((SHC_QUOTA - NO_OF_TRUCKS_IN_DOCK), 0) availableQuota,
			NVL((
				SELECT COUNT(TRIP_ID)
				FROM TRUCK_TRIP TRIP
				JOIN TCS_IPASS_MASTER IPASS
				ON TRIP.TRUCK_NO = IPASS.TRUCK_NO AND (IPASS.CUST_TYPE = 'SHA' OR IPASS.PURPOSE = 'SHC')
				WHERE TRIP.CLOSED = 'N' AND TRIP.PURPOSE = 'SHC' AND TRIP.TRUCK_STATE IN ('A', 'L')
			), 0) trucksInTransit,
			SHC_NAME companyName
			FROM SHA
		]]>
	</select>
	<select id="sqlGetTruckMonitorListInTerminal" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			WITH IPASS_TRUCK AS (
			  SELECT 
			  TRUCK_NO, CUST_NO, MAX(IPASS.CR_DATE)
			  FROM TCS_IPASS_MASTER IPASS
			  JOIN CUST_COMPANY CUST
			  ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y' AND (IPASS.CUST_TYPE = 'SHA' OR IPASS.PURPOSE = 'SHC')
			  WHERE CUST.CODE_DESC = UPPER(#PARAM#)
			  GROUP BY TRUCK_NO, CUST_NO
			)
			SELECT
			TRIP.TRUCK_NO truckNo, TRIP.CURR_LOC location
			FROM IPASS_TRUCK IPASS 
			JOIN TRUCK_TRIP TRIP
			ON IPASS.TRUCK_NO = TRIP.TRUCK_NO AND TRIP.CLOSED = 'N' AND TRIP.PURPOSE = 'SHC'
			WHERE TRIP.CURR_LOC NOT IN('TPA', 'TPX')
		]]>
	</select>
	<select id="sqlGetTruckMonitorListInPark" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			WITH IPASS_TRUCK AS (
			  SELECT 
			  TRUCK_NO, CUST_NO, MAX(IPASS.CR_DATE)
			  FROM TCS_IPASS_MASTER IPASS
			  JOIN CUST_COMPANY CUST
			  ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y' AND (IPASS.CUST_TYPE = 'SHA' OR IPASS.PURPOSE = 'SHC')
			  WHERE CUST.CODE_DESC = UPPER(#PARAM#)
			  GROUP BY TRUCK_NO, CUST_NO
			)
			SELECT
			TRIP.TRUCK_NO truckNo, TRIP.CURR_LOC location, TO_CHAR(TRIP.ARR_TIME, 'DDMONYY HH24:MI') arrivalTime
			FROM IPASS_TRUCK IPASS
			JOIN TRUCK_TRIP TRIP
			ON IPASS.TRUCK_NO = TRIP.TRUCK_NO AND TRIP.CLOSED = 'N' AND TRIP.PURPOSE = 'SHC'
			WHERE TRIP.CURR_LOC IN('TPA')
		]]>
	</select>
	<!-- -->
	<!-- TRAFFIC MONITORING (END) -->
	<!-- -->
	<!-- -->
	<!-- BOOKING (BEGIN) -->
	<!-- -->
	<!-- Assign SRF -->
	<select id="sqlGetTCSIsValidSRF" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(SRF_NO), 0, 'N', 'Y') VALID FROM IMP_SRF WHERE SRF_NO = #PARAM# AND STATUS <> 'VOID'
		]]>
	</select>
	<select id="sqlGetTCSIsSRFExpired" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(SRF_NO), 0, 'Y', 'N') EXPIRED
			FROM IMP_SRF 
			WHERE SRF_NO = #PARAM# AND SRF_EXPY_DATE > SYSDATE
		]]>
	</select>
	<select id="sqlGetTCSIsSRFAssocToTruck" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(TRIP_ID), 0, 'N', 'Y')
			FROM IMP_TRUCK_SRF TRUCK
			JOIN IMP_SRF SRF
			ON TRUCK.SRF_NO = SRF.SRF_NO AND SRF.STATUS = 'ISSUED'
			WHERE TRUCK.SRF_NO = #PARAM#	
		]]>
	</select>
	<select id="sqlGetTCSIsSRFAssocToThisTruck" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(TRIP_ID), 0, 'N', 'Y')
			FROM IMP_TRUCK_SRF TRUCK
			JOIN IMP_SRF SRF
			ON TRUCK.SRF_NO = SRF.SRF_NO AND SRF.STATUS = 'ISSUED' 
			WHERE TRUCK.SRF_NO = #SRF_NO# AND 
			TRUCK.TRIP_ID = (SELECT TRIP_ID FROM TRUCK_TRIP WHERE UPPER(TRUCK_NO) = UPPER(#TRUCK_NO#) AND CLOSED = 'N')
		]]>
	</select>
	<select id="sqlGetTCSIsSRFAssignCompleted" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(TRIP.ASSIGN_COMPL), 0, 'N', 'Y')
			FROM IMP_TRUCK_SRF SRF
			JOIN TRUCK_TRIP TRIP
			ON SRF.TRIP_ID = TRIP.TRIP_ID AND TRIP.CLOSED = 'N'
			WHERE
			NVL(TRIP.ASSIGN_COMPL, 'N') = 'Y' AND SRF_NO = #PARAM#	
		]]>
	</select>
	<select id="sqlGetTCSIsSRFPosted" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(SRF_NO), 0, 'N', 'Y') POSTED
			FROM IMP_SRF SRF 
			WHERE SRF_NO = #PARAM# AND STATUS ='POSTED'
		]]>
	</select>
	<select id="sqlGetTCSIsValuableSRF" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(SRF.SRF_NO), 0, 'N', 'Y')
			FROM IMP_CAR_AWB AWB
			JOIN IMP_SRF SRF
			ON AWB.AWB_NO = SRF.AWB_NO AND AWB.AWB_DATE = SRF.AWB_DATE
			WHERE SRF.SRF_NO = #PARAM# AND
			'VAL' IN(SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9)
		]]>
	</select>
	<select id="sqlGetTCSFindAssignSRFs" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSBookingBO">
		<![CDATA[
			SELECT TRUCK.SRF_NO srfNo, TRUCK.TRIP_ID tripId 
			FROM IMP_TRUCK_SRF TRUCK
			JOIN IMP_SRF SRF
			ON TRUCK.SRF_NO = SRF.SRF_NO AND SRF.STATUS = 'ISSUED'
			WHERE NVL(TRUCK.ASSG_COMP, 'N') = 'N' AND 
			TRUCK.TRIP_ID = (SELECT TRIP_ID FROM TRUCK_TRIP WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N')
			ORDER BY TRUCK.SRF_NO
		]]>
	</select>
	<insert id="sqlInsertTCSAssignSRF" parameterClass="cargo.cms.tcs.bo.TCSBookingBO">
		<![CDATA[
			INSERT INTO IMP_TRUCK_SRF 
			(
				TRIP_ID, SRF_NO, 
				CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE,
				ASSG_COMP, REMARKS
			)
			VALUES (
				#tripId#, #srfNo#,
				#crUserId#, SYSDATE, #lmUserId#, SYSDATE,
				#completed#, #remark#
			)
		]]>
	</insert>
	<delete id="sqlDeleteTCSAssignSRF" parameterClass="cargo.cms.tcs.bo.TCSBookingBO">
		<![CDATA[
			DELETE FROM IMP_TRUCK_SRF WHERE SRF_NO = #oldSrfNo# AND TRIP_ID = #tripId#
		]]>
	</delete>
	<update id="sqlUpdateTCSSRFTruck" parameterClass="cargo.cms.tcs.bo.TCSBookingBO">
		<![CDATA[
			UPDATE IMP_SRF SET TRUCK_NO = UPPER(#truckNo#), LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE
			WHERE SRF_NO = #srfNo#
		]]>
	</update>
	<select id="sqlGetTCSSRFTruckRegMultiUserCheck" parameterClass="java.util.Map"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(TRIP_ID) 
			FROM IMP_TRUCK_SRF 
			WHERE TRIP_ID =	#tripId# AND SRF_NO = #srfNo# 
			AND TO_CHAR(LM_DATE, 'DDMONYY HH24:MI:SS') = #lmDate#
		]]>
	</select>
	<!-- Declare SRF Assignment To Truck Completed -->
	<select id="sqlGetTCSDeclareSRFEntryTime" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TO_CHAR(ARR_TIME, 'DDMONYY HH24:MI') FROM TRUCK_TRIP	WHERE TRIP_ID = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSIsTruckSRFAssignCompleted" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT NVL(ASSIGN_COMPL, 'N') STATE
			FROM TRUCK_TRIP TRIP
			WHERE TRIP.TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N'
		]]>
	</select>
	<select id="sqlGetTCSHasAnyAssignedSRF" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(TRUCK.SRF_NO), 0, 'N', 'Y') 
			FROM IMP_TRUCK_SRF TRUCK
			JOIN IMP_SRF SRF
			ON TRUCK.SRF_NO = SRF.SRF_NO AND SRF.STATUS = 'ISSUED'
			WHERE TRUCK.ASSG_COMP = 'N' AND 
			TRUCK.TRIP_ID = (SELECT MAX(TRIP_ID) FROM TRUCK_TRIP WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N')
		]]>
	</select>
	<select id="sqlGetTCSFindDeclareSRFs" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSBookingBO">
		<![CDATA[
			SELECT TRUCK.SRF_NO srfNo 
			FROM IMP_TRUCK_SRF TRUCK
			JOIN IMP_SRF SRF
			ON TRUCK.SRF_NO = SRF.SRF_NO AND SRF.STATUS = 'ISSUED'
			WHERE TRUCK.ASSG_COMP = 'N' AND TRIP_ID = #PARAM#
			ORDER BY TRUCK.SRF_NO
		]]>
	</select>
	<update id="sqlUpdateTCSDeclareSRFs" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE IMP_TRUCK_SRF 
			SET ASSG_COMP = 'Y', LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>

	
	<update id="sqlUpdateTCSUNDeclareSRFs" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE IMP_TRUCK_SRF 
			SET ASSG_COMP = 'N', LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>

	<update id="sqlUpdateTCSCompleteSRFTrip" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TRUCK_TRIP 
			SET ASSIGN_COMPL = #COMPLETED#, ASSIGN_COMPL_BY = #USER_ID#, ASSIGN_COMPL_DATE = SYSDATE, 
			LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE 
			WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>


	<update id="sqlUpdateTCSUNCompleteSRFTrip" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TRUCK_TRIP  SET ASSIGN_COMPL = #COMPLETED#, TRUCK_QUEUE_IND = 'N' , ASSIGN_COMPL_BY = '' , ASSIGN_COMPL_DATE = '',  LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>
	
	<update id="sqlUpdateTCSSRFTripPurpose" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TRUCK_TRIP 
			SET PURPOSE = #PURPOSE#, LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>
	<delete id="sqlDeleteTCSSRFAssignment" parameterClass="java.lang.String">
		<![CDATA[
			DELETE FROM IMP_TRUCK_SRF WHERE TRIP_ID = #PARAM#
		]]>
	</delete>
	<select id="sqlGetTCSMoveJobOrderData" parameterClass="java.lang.String"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT * FROM (
				SELECT INV.*			
				FROM (
				  SELECT 
				    AWB.LOC_CODE, WHGRP.WH_TYPE,
				    AWB.LSP_NO, AWB.ULD_KEY,
				    AWB.AWB_NO, TO_CHAR(AWB.AWB_DATE, 'DDMONYY') AWB_DATE, 
				    AWB.LOCN_PCS, AWB.LOCN_WT,
				    SRF.SRF_NO, SRF.SRF_DATE, (
				    	SELECT MAX(TRUCK_DOCK) FROM TCS_DOCK_ALLOCATION ALLOC
				    	WHERE ALLOC.TRIP_ID = TRK.TRIP_ID
				    ) DOCK_NO,
					CASE
						WHEN AWB.LSP_NO IS NOT NULL THEN (
							SELECT DECODE(COUNT(1), 0, 'N', 'Y')
							FROM LSP_INVENTORY LSP
							JOIN MAST_WH_LOC LOC
							ON LSP.LOC_CODE = LOC.CODE
							JOIN MAST_WH_GROUP GRP
							ON LOC.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'MHS'
							WHERE LSP.LSP_NO = AWB.LSP_NO
						)
						WHEN AWB.ULD_KEY IS NOT NULL THEN (
							SELECT DECODE(COUNT(1), 0, 'N', 'Y')
							FROM ULD_INVENTORY ULD
							JOIN MAST_WH_LOC LOC
							ON ULD.LOC_CODE = LOC.CODE
							JOIN MAST_WH_GROUP GRP
							ON LOC.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'MHS'
							WHERE ULD.ULD_KEY = AWB.ULD_KEY
						)
						ELSE 'N'			
					END IN_MHS				    
				  FROM AWB_INVENTORY AWB
				  JOIN IMP_SRF SRF
				  ON AWB.AWB_NO = SRF.AWB_NO AND AWB.AWB_DATE = SRF.AWB_DATE
				  JOIN IMP_TRUCK_SRF TRK
				  ON SRF.SRF_NO = TRK.SRF_NO
				  JOIN MAST_WH_LOC LOC
				  ON AWB.LOC_CODE = LOC.CODE
				  JOIN MAST_WH_GROUP WHGRP
				  ON LOC.WH_GROUP = WHGRP.WH_GROUP
				  WHERE (AWB.LSP_NO IS NOT NULL OR AWB.ULD_KEY IS NOT NULL) AND 
				  TRK.TRIP_ID = #PARAM# AND WHGRP.WH_TYPE IN('FG', 'MHS')
				  ORDER BY SRF_DATE
				) INV
				WHERE (WH_TYPE = 'MHS' AND IN_MHS = 'Y') OR (WH_TYPE = 'FG')
			) WHERE ROWNUM = 1
		]]>
	</select>
	<!-- Booking Schedule Monitoring -->
	<!-- Booking Temporary View have been made two to avoid DB error -->
	<select id="sqlGetTCSFindBkgSchMonitorGraphCapacityList"
		parameterClass="cargo.cms.tcs.bo.TCSBookingSearchBO" resultClass="cargo.cms.tcs.bo.TCSBookingBO">
		<![CDATA[
			WITH TEMPLATE AS (
			  SELECT TEMPL.TEMPLATE_ID, TEMPL.TRUCK_DOCK, DOCK.IN_SERVICE, DATETAB.CURDATE,
			  TEMPL.PURPOSE_1, TEMPL.PURPOSE_2, TEMPL.PURPOSE_3, TEMPL.PURPOSE_4, TEMPL.PURPOSE_5,
			  HDR.EFF_FROM, HDR.EFF_TO,
			  TO_DATE(TO_CHAR(DATETAB.CURDATE, 'DDMONYY') || ' ' || 
			      TRIM(TO_CHAR(CASE WHEN DTL.TIME_FROM = 24 THEN 23 ELSE DTL.TIME_FROM END, '00')) || '01', 'DDMONYY HH24MI') FROM_TIME, 
			  TO_DATE(TO_CHAR(DATETAB.CURDATE, 'DDMONYY') || ' ' || 
			      TRIM(TO_CHAR(CASE WHEN DTL.TIME_TO = 24 THEN 23 ELSE DTL.TIME_TO END, '00')) || '59', 'DDMONYY HH24MI') TO_TIME
			  FROM TCS_DOCK_TEMPLATE_DTL TEMPL
			  JOIN TCS_DOCK_TEMPLATE_SCH_DTL DTL
			  ON TEMPL.TEMPLATE_ID = DTL.TEMPLATE_ID
			  JOIN TCS_DOCK_TEMPLATE_SCH HDR
			  ON DTL.TR_NO = HDR.TR_NO
			  JOIN TCS_DOCK_MASTER DOCK
			  ON TEMPL.TRUCK_DOCK = DOCK.TRUCK_DOCK
			  JOIN (
			    SELECT TO_CHAR(FROMDATE + COUNTER, 'DDMONYY') AS PROC_DATE, (FROMDATE + COUNTER) AS CURDATE
			    FROM (
			      SELECT TO_DATE(#dateFrom#, 'DDMONYY') FROMDATE, TO_DATE(#dateTo#, 'DDMONYY') TODATE FROM DUAL
			    ) DATESEL, XMLTABLE('for $$counter in 0 to xs:int(D) return $$counter'
			    PASSING XMLELEMENT(D, ROUND(TODATE - FROMDATE))
			    COLUMNS COUNTER INTEGER PATH '.')		  
			  ) DATETAB
			  ON HDR.EFF_FROM <= DATETAB.CURDATE AND HDR.EFF_TO >= DATETAB.CURDATE
			),
			PURPOSE_BOOK AS (
				SELECT BOOKING_NO, DOCK_PURPOSE PURPOSE,
				  TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
				  TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) TO_DATE
				FROM IMP_BOOKING BKG
				WHERE BKG.STATUS <> 'CANCEL' AND BKG.DOCK_PURPOSE = #purpose# AND
				BKG.BKG_SLOT_DATE >= TO_DATE(TO_CHAR(TO_DATE(#timeFrom#, 'DDMONYY HH24:MI'), 'DDMONYY'), 'DDMONYY')
				AND BKG.BKG_SLOT_DATE <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI') AND NVL(EXP_DURATION, 0) > 0
				UNION
				SELECT BOOKING_NO, DOCK_PURPOSE PURPOSE,
				  TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
				  TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) TO_DATE
				FROM EXP_BOOKING BKG
				WHERE BKG.DOCK_PURPOSE = #purpose# AND
				BKG.BOOKING_DATE >= TO_DATE(TO_CHAR(TO_DATE(#timeFrom#, 'DDMONYY HH24:MI'), 'DDMONYY'), 'DDMONYY')
				AND BKG.BOOKING_DATE <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI') AND NVL(EXP_DURATION, 0) > 0
			),
			NONPURPOSE_BOOK AS (
				SELECT BOOKING_NO, DOCK_PURPOSE PURPOSE,
				  TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
				  TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) TO_DATE
				FROM IMP_BOOKING BKG
				WHERE BKG.STATUS <> 'CANCEL' AND BKG.DOCK_PURPOSE <> #purpose# AND
				BKG.BKG_SLOT_DATE >= TO_DATE(TO_CHAR(TO_DATE(#timeFrom#, 'DDMONYY HH24:MI'), 'DDMONYY'), 'DDMONYY')
				AND BKG.BKG_SLOT_DATE <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI') AND NVL(EXP_DURATION, 0) > 0
				UNION
				SELECT BOOKING_NO, DOCK_PURPOSE PURPOSE,
				  TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
				  TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) TO_DATE
				FROM EXP_BOOKING BKG
				WHERE BKG.DOCK_PURPOSE <> #purpose# AND
				BKG.BOOKING_DATE >= TO_DATE(TO_CHAR(TO_DATE(#timeFrom#, 'DDMONYY HH24:MI'), 'DDMONYY'), 'DDMONYY')
				AND BKG.BOOKING_DATE <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI') AND NVL(EXP_DURATION, 0) > 0
			),					
			RESERVE AS (
				SELECT
				  RESV.TRUCK_DOCK,
				  (NVL(RESV.RESV_FROM, SYSDATE) + (1 / 24 / 60)) FROM_DATE,
				  (NVL(RESV.RESV_TO, SYSDATE) - (1 / 24 / 60)) TO_DATE,
				  'N' AVAIL
				FROM
				TCS_DOCK_RESV RESV
				WHERE 
				(
				  RESV.RESV_FROM BETWEEN TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') AND TO_DATE(#timeTo#, 'DDMONYY HH24:MI') OR
				  RESV.RESV_TO BETWEEN TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') AND TO_DATE(#timeTo#, 'DDMONYY HH24:MI')
				)
				UNION ALL
				SELECT DOCK.TRUCK_DOCK, 
				  TO_DATE(DT.PROC_DATE || ' ' || TRIM(TO_CHAR(SCH.TIME_FROM,'0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
				  TO_DATE(DT.PROC_DATE || ' ' || TRIM(TO_CHAR(SCH.TIME_TO,'0000')), 'DDMONYY HH24MI') - (1 / 24 / 60) TO_DATE,
				  'N' AVAIL
				FROM CUST_AGENT_SCH_COLL_TIME SCH
				JOIN CUST_AGENT_SCH_COLL_TRUCK_DOCK DOCK
				ON SCH.TR_NO = DOCK.TR_NO
				JOIN (
				  SELECT TO_CHAR(FROMDATE + COUNTER, 'DDMONYY') AS PROC_DATE, 
				  CASE WHEN (TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1) = 0 THEN 7 ELSE TO_NUMBER(TO_CHAR(FROMDATE + COUNTER, 'D')) - 1 END AS WEEK
				  FROM (
				    SELECT TO_DATE(#dateFrom#, 'DDMONYY') FROMDATE, TO_DATE(#dateTo#, 'DDMONYY') TODATE FROM DUAL
				  ) DATESEL, XMLTABLE('for $$counter in 0 to xs:int(D) return $$counter'
				  PASSING XMLELEMENT(D, ROUND(TODATE - FROMDATE))
				  COLUMNS COUNTER INTEGER PATH '.')			
				) DT
				ON SCH.EFF_FROM <= DT.PROC_DATE AND SCH.EFF_TO >= DT.PROC_DATE AND SCH.DAY_FRQ LIKE ('%' || DT.WEEK || '%')
				WHERE PURPOSE IN('ULD', 'CRG')			
			),
			FINAL AS (
			  SELECT
			  CASE WHEN TEMPL.PURPOSE_1 = #purpose# THEN 1 ELSE 0 END PRIMARY,
			  CASE WHEN TEMPL.PURPOSE_2 = #purpose# THEN 1 ELSE 0 END SECOND,
			  CASE WHEN TEMPL.PURPOSE_3 = #purpose# THEN 1 ELSE 0 END THIRD,
			  CASE WHEN TEMPL.PURPOSE_4 = #purpose# THEN 1 ELSE 0 END FOURTH,
			  CASE WHEN TEMPL.PURPOSE_5 = #purpose# THEN 1 ELSE 0 END FIFTH,
			  CASE WHEN #purpose# IN(TEMPL.PURPOSE_2, TEMPL.PURPOSE_3, TEMPL.PURPOSE_4, TEMPL.PURPOSE_5) THEN 1
			  ELSE 0 
			  END OTHER,
			  CASE WHEN #purpose# NOT IN(NVL(TEMPL.PURPOSE_1, 'X'), NVL(TEMPL.PURPOSE_2, 'X'), NVL(TEMPL.PURPOSE_3, 'X'), NVL(TEMPL.PURPOSE_4, 'X'), NVL(TEMPL.PURPOSE_5, 'X')) THEN 1
			  ELSE 0 
			  END OTHERPURPOSE,
			  DAYS.DATETIME1, DAYS.DATETIME2,
			  CASE WHEN #purpose# IN(TEMPL.PURPOSE_1, TEMPL.PURPOSE_2, TEMPL.PURPOSE_3, TEMPL.PURPOSE_4, TEMPL.PURPOSE_5)
			    THEN
			      CASE WHEN IN_SERVICE = 'Y' THEN 1 ELSE 0 END
			    ELSE 0
			  END IN_SERVICE,
			  (
			  	SELECT DECODE(COUNT(RESV.TRUCK_DOCK), 0, 0, 1)
			  	FROM RESERVE RESV
			  	WHERE 
			  	RESV.TRUCK_DOCK = TEMPL.TRUCK_DOCK AND #purpose# IN(TEMPL.PURPOSE_1, TEMPL.PURPOSE_2, TEMPL.PURPOSE_3, TEMPL.PURPOSE_4, TEMPL.PURPOSE_5) AND
			  	(
				    (RESV.FROM_DATE >= DAYS.DATETIME1 AND RESV.FROM_DATE <= DAYS.DATETIME2) OR
				    (RESV.TO_DATE >= DAYS.DATETIME1 AND RESV.TO_DATE <= DAYS.DATETIME2) OR
				    (DAYS.DATETIME1 >= RESV.FROM_DATE AND DAYS.DATETIME1 <= RESV.TO_DATE) OR
				    (DAYS.DATETIME2 >= RESV.FROM_DATE AND DAYS.DATETIME2 <= RESV.TO_DATE)			  		
			  	)			  	
			  ) IN_RESERVE			  		  
			  FROM TEMPLATE TEMPL
			  RIGHT OUTER JOIN (
			    SELECT
			    CURDATE,
			    TO_DATE(PROC_DATE || ' ' || PROC_TIME1, 'DDMONYY HH24:MI') AS DATETIME1, 
			    CASE WHEN PROC_TIME1 = '23:45' 
			      THEN TO_DATE(TO_CHAR((TO_DATE(PROC_DATE, 'DDMONYY') + 1), 'DDMONYY') || ' ' || PROC_TIME2, 'DDMONYY HH24:MI')
			      ELSE TO_DATE(PROC_DATE || ' ' || PROC_TIME2, 'DDMONYY HH24:MI')
			    END DATETIME2
			    FROM (
				    SELECT TO_CHAR(FROMDATE + COUNTER, 'DDMONYY') AS PROC_DATE, (FROMDATE + COUNTER) AS CURDATE
				    FROM (
				      SELECT TO_DATE(#dateFrom#, 'DDMONYY') FROMDATE, TO_DATE(#dateTo#, 'DDMONYY') TODATE FROM DUAL
				    ) DATESEL, XMLTABLE('for $$counter in 0 to xs:int(D) return $$counter'
				    PASSING XMLELEMENT(D, ROUND(TODATE - FROMDATE))
				    COLUMNS COUNTER INTEGER PATH '.')		    
			    ) DATETAB
			    LEFT OUTER JOIN (
			      SELECT 
			      TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') + (((HRS * 60) + MINUTES) / 24 / 60), 'HH24:MI') PROC_TIME1,
			      TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') + (((HRS * 60) + (MINUTES + 15)) / 24 / 60), 'HH24:MI') PROC_TIME2
			      FROM (
			        SELECT (counter - 1) HRS
			        FROM DUAL, 
			        XMLTABLE('for $$counter in 1 to xs:int(TOTAL) return $$counter'
			        PASSING XMLELEMENT(total, 24) COLUMNS counter INTEGER path '.')
			      ) HRTAB
			      LEFT OUTER JOIN (
			        SELECT 15 * (counter - 1) MINUTES
			        FROM DUAL, 
			        XMLTABLE('for $$counter in 1 to xs:int(TOTAL) return $$counter'
			        PASSING XMLELEMENT(total, 4) COLUMNS counter INTEGER path '.')
			      ) TIMETAB
			      ON 1 = 1
			    )
			    ON 1 = 1
			  ) DAYS
			  ON
			    (TEMPL.FROM_TIME >= DAYS.DATETIME1 AND TEMPL.FROM_TIME <= DAYS.DATETIME2) OR
			    (TEMPL.TO_TIME >= DAYS.DATETIME1 AND TEMPL.TO_TIME <= DAYS.DATETIME2) OR
			    (DAYS.DATETIME1 >= TEMPL.FROM_TIME AND DAYS.DATETIME1 <= TEMPL.TO_TIME) OR
			    (DAYS.DATETIME2 >= TEMPL.FROM_TIME AND DAYS.DATETIME2 <= TEMPL.TO_TIME)
			  WHERE
			  DAYS.DATETIME1 >= TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') AND
			  DAYS.DATETIME2 <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI') AND
			  DAYS.DATETIME1 < TO_DATE(#timeTo#, 'DDMONYY HH24:MI')
			)
			SELECT primary, second, third, fourth, fifth, total, maximum,
			booked, otherBkg other,
			CASE 
			WHEN otherBkg > otherPurpose
				THEN ((primary + nonPrimary) - (otherBkg - otherPurpose) - booked)
			ELSE (primary + nonPrimary) - booked 
			END free,
			DATETIME1, DATETIME2,
			TO_CHAR(DATETIME1, 'DDMONYY') startDate, TO_CHAR(DATETIME1, 'HH24:MI') startTime,
			TO_CHAR(DATETIME2, 'DDMONYY') endDate, TO_CHAR(DATETIME2, 'HH24:MI') endTime
			FROM (
			  SELECT SUM(PRIMARY) primary, 
			  SUM(SECOND) second, 
			  SUM(THIRD) third, 
			  SUM(FOURTH) fourth, 
			  SUM(FIFTH) fifth, 
			  SUM(PRIMARY) + SUM(OTHER) total,
			  SUM(OTHER) nonPrimary,
			  SUM(IN_SERVICE) - SUM(IN_RESERVE) maximum,
			  DATETIME1, DATETIME2,
			  SUM(OTHERPURPOSE) otherPurpose,
			  (
			    SELECT COUNT(BOOK.BOOKING_NO)
			    FROM PURPOSE_BOOK BOOK
			    WHERE
			    (
			      (BOOK.FROM_DATE >= FINAL.DATETIME1 AND BOOK.FROM_DATE <= FINAL.DATETIME2) OR
			      (BOOK.TO_DATE >= FINAL.DATETIME1 AND BOOK.TO_DATE <= FINAL.DATETIME2) OR
			      (FINAL.DATETIME1 >= BOOK.FROM_DATE AND FINAL.DATETIME1 <= BOOK.TO_DATE) OR
			      (FINAL.DATETIME2 >= BOOK.FROM_DATE AND FINAL.DATETIME2 <= BOOK.TO_DATE)		  		
			    )
			  ) booked,
			  (
				SELECT COUNT(BOOK.BOOKING_NO)
				FROM NONPURPOSE_BOOK BOOK
				WHERE
				(
				  (BOOK.FROM_DATE >= FINAL.DATETIME1 AND BOOK.FROM_DATE <= FINAL.DATETIME2) OR
				  (BOOK.TO_DATE >= FINAL.DATETIME1 AND BOOK.TO_DATE <= FINAL.DATETIME2) OR
				  (FINAL.DATETIME1 >= BOOK.FROM_DATE AND FINAL.DATETIME1 <= BOOK.TO_DATE) OR
				  (FINAL.DATETIME2 >= BOOK.FROM_DATE AND FINAL.DATETIME2 <= BOOK.TO_DATE)	  		
				)
			  ) otherBkg			  
			  FROM FINAL
			  GROUP BY DATETIME1, DATETIME2
			  ORDER BY DATETIME1, DATETIME2
			)
		]]>
	</select>
	<!-- Not Used (May be Used Later) -->
	<select id="sqlGetTCSFindBkgSchMonitorGraphBkgList"
		parameterClass="cargo.cms.tcs.bo.TCSBookingSearchBO" resultClass="cargo.cms.tcs.bo.TCSBookingBO">
		<![CDATA[
			SELECT
			LEGEND legend, COUNT(LEGEND) total,
			STARTDATE startDate, STARTTIME startTime, DATETIME1
			FROM
			(
				SELECT
					CASE 
					WHEN BKG.PURPOSE IS NULL THEN 'ERROR'
					WHEN BKG.PURPOSE = #purpose# THEN 'BOOKED'
					ELSE 'OTHER'
					END LEGEND, BKG.PURPOSE, DAYS.DATETIME1, DAYS.DATETIME2,
					TO_CHAR(DAYS.DATETIME1, 'DDMONYY') STARTDATE, TO_CHAR(DAYS.DATETIME1, 'HH24:MI') STARTTIME, 
					TO_CHAR(DAYS.DATETIME2, 'DDMONYY') ENDDATE, TO_CHAR(DAYS.DATETIME2, 'HH24:MI') ENDTIME
				FROM
				(
					SELECT DOCK_PURPOSE PURPOSE,
					  TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
					  TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) TO_DATE
					FROM IMP_BOOKING BKG
					WHERE BKG.STATUS <> 'CANCEL' AND 
					BKG.BKG_SLOT_DATE >= TO_DATE(TO_CHAR(TO_DATE(#timeFrom#, 'DDMONYY HH24:MI'), 'DDMONYY'), 'DDMONYY')
					AND BKG.BKG_SLOT_DATE <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI') AND NVL(EXP_DURATION, 0) > 0
					UNION
					SELECT DOCK_PURPOSE PURPOSE,
					  TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
					  TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) TO_DATE
					FROM EXP_BOOKING BKG
					WHERE
					BKG.BOOKING_DATE >= TO_DATE(TO_CHAR(TO_DATE(#timeFrom#, 'DDMONYY HH24:MI'), 'DDMONYY'), 'DDMONYY')
					AND BKG.BOOKING_DATE <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI') AND NVL(EXP_DURATION, 0) > 0
				) BKG
				RIGHT OUTER JOIN (
					SELECT 
						TO_DATE(PROC_DATE || ' ' || PROC_TIME1, 'DDMONYY HH24:MI') AS DATETIME1, 
						CASE WHEN PROC_TIME1 = '23:45' 
					  	THEN TO_DATE(TO_CHAR((TO_DATE(PROC_DATE, 'DDMONYY') + 1), 'DDMONYY') || ' ' || PROC_TIME2, 'DDMONYY HH24:MI')
					  	ELSE TO_DATE(PROC_DATE || ' ' || PROC_TIME2, 'DDMONYY HH24:MI')
						END DATETIME2
					FROM
					(
					  WITH DATETAB AS
					  ( 
					    SELECT TO_DATE(#dateFrom#, 'DDMONYY') FROMDATE, TO_DATE(#dateTo#, 'DDMONYY') TODATE FROM DUAL
					  )
					  SELECT TO_CHAR(FROMDATE + COUNTER, 'DDMONYY') AS PROC_DATE
					  FROM DATETAB, XMLTABLE('for $$counter in 0 to xs:int(D) return $$counter'
					  PASSING XMLELEMENT(D, ROUND(TODATE - FROMDATE))
					  COLUMNS COUNTER INTEGER PATH '.')
					) DATETAB
					LEFT OUTER JOIN (
					  SELECT 
					  TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') + (((HRS * 60) + MINUTES) / 24 / 60), 'HH24:MI') PROC_TIME1,
					  TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY') + (((HRS * 60) + (MINUTES + 15)) / 24 / 60), 'HH24:MI') PROC_TIME2
					  FROM (
					    SELECT (counter - 1) HRS
					    FROM DUAL, 
					    XMLTABLE('for $$counter in 1 to xs:int(TOTAL) return $$counter'
					    PASSING XMLELEMENT(total, 24) COLUMNS counter INTEGER path '.')
					  ) HRTAB
					  LEFT OUTER JOIN (
					    SELECT 15 * (counter - 1) MINUTES
					    FROM DUAL, 
					    XMLTABLE('for $$counter in 1 to xs:int(TOTAL) return $$counter'
					    PASSING XMLELEMENT(total, 4) COLUMNS counter INTEGER path '.')
					  ) TIMETAB
					  ON 1 = 1
					)
					ON 1 = 1
				) DAYS
				ON 
				(BKG.FROM_DATE >= DAYS.DATETIME1 AND BKG.FROM_DATE <= DAYS.DATETIME2) OR
				(BKG.TO_DATE >= DAYS.DATETIME1 AND BKG.TO_DATE <= DAYS.DATETIME2) OR
				(DAYS.DATETIME1 >= BKG.FROM_DATE AND DAYS.DATETIME1 <= BKG.TO_DATE) OR
				(DAYS.DATETIME2 >= BKG.FROM_DATE AND DAYS.DATETIME2 <= BKG.TO_DATE)
				WHERE
				DAYS.DATETIME1 >= TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') AND
				DAYS.DATETIME2 <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI') AND
				DAYS.DATETIME1 < TO_DATE(#timeTo#, 'DDMONYY HH24:MI')			
			)
			GROUP BY DATETIME1, LEGEND, STARTDATE, STARTTIME
			ORDER BY DATETIME1
		]]>
	</select>
	<select id="sqlGetTCSFindImportBkgScheduleList" parameterClass="cargo.cms.tcs.bo.TCSBookingSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSBookingBO">
		<![CDATA[
			WITH IMPORT_PRE AS (
				SELECT BOOKING_NO, CUST.CODE_DESC AGENT,
				TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') FROM_TIME, 
				TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (EXP_DURATION / 24 / 60) TO_TIME,			
				TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) BKG_SLOT_FROM, 
				TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) BKG_SLOT_TO,
				(	
					TRUCK1 || NVL2(TRUCK1, ',', '') || 
					TRUCK2 || NVL2(TRUCK2, ',', '') || 
					TRUCK3 || NVL2(TRUCK3, ',', '') || 
					TRUCK4 || NVL2(TRUCK4, ',', '') || 
					TRUCK5 || NVL2(TRUCK5, ',', '') || 
					TRUCK6
				) AS TRUCKS,
				DOCK_PURPOSE PURPOSE
				FROM IMP_BOOKING IMP
				LEFT OUTER JOIN CUST_COMPANY CUST
				ON IMP.AGENT_ID = CUST.CODE AND CUST.ACTIVE = 'Y'
				WHERE IMP.STATUS <> 'CANCEL' AND EXP_DURATION > 0 AND BKG_SLOT_DATE >= (TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') - 1)
			),
			IMPORT AS (
				SELECT BOOKING_NO, AGENT, FROM_TIME, TO_TIME,
				BKG_SLOT_FROM, BKG_SLOT_TO, TRUCKS, PURPOSE
				FROM IMPORT_PRE
			)			
			SELECT BOOKING_NO bookingNo, AGENT companyName, 
			TO_CHAR(FROM_TIME, 'DDMONYY HH24:MI') startTime, TO_CHAR(TO_TIME, 'DDMONYY HH24:MI') endTime, 
			CASE WHEN INSTR(TRUCKS, ',', -1) > 0 THEN SUBSTR(TRUCKS, 1, INSTR(TRUCKS, ',', -1) - 1) END truckNo, 
			NVL(PURP.CODE_DESC, PURPOSE) cargoType
			FROM IMPORT IMP
			LEFT OUTER JOIN MAST_TCS_DOCK_PURPOSE PURP
			ON IMP.PURPOSE = PURP.CODE
			WHERE
			(IMP.BKG_SLOT_FROM >= TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') AND IMP.BKG_SLOT_FROM <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI')) OR
			(IMP.BKG_SLOT_TO >= TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') AND IMP.BKG_SLOT_TO <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI')) OR
			(TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') >= IMP.BKG_SLOT_FROM AND TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') <= IMP.BKG_SLOT_TO) OR
			(TO_DATE(#timeTo#, 'DDMONYY HH24:MI') >= IMP.BKG_SLOT_FROM AND TO_DATE(#timeTo#, 'DDMONYY HH24:MI') <= IMP.BKG_SLOT_TO)		
		]]>
		<dynamic prepend="ORDER BY ">
			IMP.BKG_SLOT_FROM
		</dynamic>
	</select>
	<select id="sqlGetTCSFindExportBkgScheduleList" parameterClass="cargo.cms.tcs.bo.TCSBookingSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSBookingBO">
		<![CDATA[
			WITH EXPORT_PRE AS (
				SELECT BOOKING_NO, CUST.CODE_DESC AGENT,
				TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') FROM_TIME, 
				TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (EXP_DURATION / 24 / 60) TO_TIME,				
				TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) BKG_SLOT_FROM, 
				TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(TIME_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) BKG_SLOT_TO,
				TRUCK AS TRUCKS,
				DOCK_PURPOSE PURPOSE
				FROM EXP_BOOKING EXP
				LEFT OUTER JOIN CUST_COMPANY CUST
				ON EXP.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
				WHERE EXP_DURATION > 0 AND BOOKING_DATE >= (TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') - 1)
			),
			EXPORT AS (
				SELECT BOOKING_NO, AGENT, FROM_TIME, TO_TIME,
				BKG_SLOT_FROM, BKG_SLOT_TO, TRUCKS, PURPOSE
				FROM EXPORT_PRE
			)			
			SELECT BOOKING_NO bookingNo, AGENT companyName, 
			TO_CHAR(FROM_TIME, 'DDMONYY HH24:MI') startTime, TO_CHAR(TO_TIME, 'DDMONYY HH24:MI') endTime, 
			TRUCKS truckNo, NVL(PURP.CODE_DESC, PURPOSE) cargoType
			FROM EXPORT EXP
			LEFT OUTER JOIN MAST_TCS_DOCK_PURPOSE PURP
			ON EXP.PURPOSE = PURP.CODE			
			WHERE
			(EXP.BKG_SLOT_FROM >= TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') AND EXP.BKG_SLOT_FROM <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI')) OR
			(EXP.BKG_SLOT_TO >= TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') AND EXP.BKG_SLOT_TO <= TO_DATE(#timeTo#, 'DDMONYY HH24:MI')) OR
			(TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') >= EXP.BKG_SLOT_FROM AND TO_DATE(#timeFrom#, 'DDMONYY HH24:MI') <= EXP.BKG_SLOT_TO) OR
			(TO_DATE(#timeTo#, 'DDMONYY HH24:MI') >= EXP.BKG_SLOT_FROM AND TO_DATE(#timeTo#, 'DDMONYY HH24:MI') <= EXP.BKG_SLOT_TO)				
		]]>
		<dynamic prepend="ORDER BY ">
			EXP.BKG_SLOT_FROM
		</dynamic>
	</select>
	<!-- -->
	<!-- BOOKING (END) -->
	<!-- -->
	<!-- -->
	<!-- MISC. (BEGIN) -->
	<!-- -->
	<!-- Enquire Truck Event -->
	<select id="sqlGetEnquireTruckEvents" parameterClass="cargo.cms.tcs.bo.TCSMiscSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSMiscBO">
		<![CDATA[
			SELECT NVL(EDESC.CODE_DESC, EVENT.EVENT_ID)  eventName, EVENT_DESC description,
			  EVENT.CR_USER_ID crUserId, TO_CHAR(EVENT.CR_DATE, 'DDMONYY HH24:MI') transactionTime, 
			  EVENT.LM_USER_ID lmUserId, TO_CHAR(EVENT.LM_DATE, 'DDMONYY HH24:MI') lmDate,
			  TO_CHAR(EVENT.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime
			FROM TCS_TRUCK_EVENTS EVENT
			LEFT OUTER JOIN MAST_CODE_DTL EDESC
			ON EVENT.EVENT_ID = EDESC.CODE AND EDESC.CODE_TYPE = 'TCS_TRUCK_EVENT'
			WHERE 1 = 1	
		]]>
		<isNotEmpty property="fromDateTime">
			<![CDATA[
				AND EVENT.CR_DATE >= TO_DATE(#fromDateTime#, 'DDMONYY HH24:MI:SS')
			]]>
		</isNotEmpty>
		<isNotEmpty property="toDateTime">
			<![CDATA[
				AND EVENT.CR_DATE <= TO_DATE(#toDateTime#, 'DDMONYY HH24:MI:SS')
			]]>
		</isNotEmpty>
		<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(TRUCK_NO) = UPPER(#truckNo#) ]]></isNotEmpty>
		<dynamic prepend="ORDER BY ">
			EVENT.CR_DATE DESC
		</dynamic>
	</select>
	<!-- Enquire Truck -->
	<!-- Truck Information -->
	<!-- Info! MAX(TRUCK_DOCK) is just a fix to avoid two dock allocation for 
		a trip (this scenario will never come in real time) -->
	<!-- Info! ROWNUM is just a fix to avoid two trips for same truck (this 
		scenario will never come in real time) -->
	<select id="sqlGetTCSEnquireTruck" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSMiscBO">
		<![CDATA[
			SELECT 
			IPASS.TRUCK_NO truckNo, IPASS.IPASS_NO ipassNo, 
			(SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE = 'TCS_IPASS_TYPE' AND CODE = IPASS.IPASS_TYPE) ipassType, 
			(SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE = 'TCS_IPASS_STATUS' AND CODE = IPASS.STATUS) status, 
			(SELECT CODE_DESC FROM MAST_TCS_TRUCK_TYPE WHERE CODE = IPASS.TRUCK_TYPE) truckType, 
			(SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE = 'TCS_TRUCK_CATEGORY' AND CODE = IPASS.TRUCK_CATEGORY) category,
			CASE WHEN IPASS.IPASS_TYPE = 'P' THEN
			  (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE = 'TCS_PERM_CUST_TYPE' AND CODE = IPASS.CUST_TYPE)
			ELSE
			  (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE = 'TCS_TEMP_CUST_TYPE' AND CODE = IPASS.CUST_TYPE)
			END customerType, 
			CUST.CODE_DESC customerName,
			CONTACT_NO contactNo,
			DECODE((
			    SELECT COUNT(TRUCK_NO) FROM TCS_BAN_TRUCK WHERE TRUCK_NO = IPASS.TRUCK_NO AND STATUS IN('BANNED', 'ONETIME') AND 
			    BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')
			    ), 0, 'N', 'Y') banned,
			PURP.CODE_DESC || NVL2(TRIP.INCOMING_REASON, ' (', '') || REASON.CODE_DESC || NVL2(TRIP.INCOMING_REASON, ')', '') incomingPurpose, 
			(SELECT MAX(TRUCK_DOCK) FROM TCS_DOCK_ALLOCATION WHERE TRIP_ID = TRIP.TRIP_ID) allocatedDockNo,
			CURR_LOC location, CURR_LOC lastLocation,
			ROUND((SELECT NVL(SUM(CALC_CHRG), 0.0) -  NVL(SUM(WAVR_AMT), 0.0) - (NVL(SUM(PAID_AMT_CASH), 0.0) + NVL(SUM(PAID_AMT_CREDIT), 0.0))
			    FROM BILL_CHARGE_DTL
			    WHERE TRUCK_NO = IPASS.TRUCK_NO AND STATUS = 'PENDING'
			), 2) outstandingCharge,
			(SELECT NVL2(MAX(TRIP_ID), 'Y', 'N') FROM TCS_WRNG_LETTER WHERE TRIP_ID = TRIP.TRIP_ID) warned,
			TRIP.SPL_ATTN specialAttention,
			NVL(TRIP.TRUCK_QUEUE_IND, 'N') inQueue,
			NVL((
		        SELECT 
		        CASE
		        WHEN NVL((SELECT MAX(OCCUPIED) FROM TCS_DOCK_ALLOCATION WHERE TRIP_ID = EVENT.TRIP_ID), 'N') = 'Y' 
		        	AND (DOCK_OCCUPY_TIME IS NULL OR (DOCK_OCCUPY_TIME IS NOT NULL AND LEAVE_DOCK_TIME IS NOT NULL)) THEN 'X'
		        WHEN LEAVE_DOCK_TIME IS NULL AND DOCK_OCCUPY_TIME IS NULL THEN 'N'
		        WHEN DOCK_OCCUPY_TIME IS NOT NULL AND LEAVE_DOCK_TIME IS NULL THEN 'Y'
		        ELSE 'N'
		        END
		        FROM TRUCK_TRIP_EVENTS EVENT WHERE TRIP_ID = TRIP.TRIP_ID
		    ), 'N') dockOccupied,
		    REJ_RMK exitRmk
			FROM 
			TCS_IPASS_MASTER IPASS	
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'   
			LEFT OUTER JOIN TRUCK_TRIP TRIP
			ON IPASS.TRUCK_NO = TRIP.TRUCK_NO AND TRIP_CLOSED = 'N'
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			LEFT OUTER JOIN MAST_CODE_DTL REASON
			ON TRIP.INCOMING_REASON = REASON.CODE AND REASON.CODE_TYPE = 'TCS_INCOMING_REASON'
			WHERE IPASS.TRUCK_NO = UPPER(#PARAM#) AND ROWNUM = 1
		]]>
	</select>
	<select id="sqlGetTCSEnquireTruckBanDtl" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSMiscBO">
		<![CDATA[
			SELECT
			TO_CHAR(BAN.BAN_FROM, 'DDMONYY') || '-' || TO_CHAR(BAN.BAN_TO, 'DDMONYY') banPeriod,
			BAN.BAN_REASON banReason, BAN.RESTRICTIONS restrictions, TYP.CODE_DESC type,
			STAT.CODE_DESC status
			FROM TCS_BAN_TRUCK BAN
			LEFT OUTER JOIN TCS_BAN_MASTER MAST
			ON BAN.BAN_REASON = MAST.BAN_REASON
			LEFT OUTER JOIN MAST_CODE_DTL TYP
			ON MAST.BAN_TYPE = TYP.CODE AND TYP.CODE_TYPE = 'TCS_BAN_TYPE'
			LEFT OUTER JOIN MAST_CODE_DTL STAT
			ON BAN.STATUS = STAT.CODE AND STAT.CODE_TYPE = 'TCS_BAN_STATUS'
			WHERE
			BAN.TRUCK_NO = UPPER(#PARAM#)
			ORDER BY BAN.BAN_FROM DESC, BAN.BAN_TO	
		]]>
	</select>
	<select id="sqlGetTCSEnquireTruckMovements" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSMiscBO">
		<![CDATA[
			SELECT TO_NUMBER(EVENT.TRIP_ID) tripId,
			  TRUCK_DOCK allocatedTruckDock,
			  PURP.CODE_DESC incomingPurpose,
			  TO_CHAR(TRUCK_PARK_ENTRY_TIME, 'DDMONYY HH24:MI') truckParkEntryTime, 
			  TO_CHAR(DECL_PURPOSE_TIME, 'DDMONYY HH24:MI') declInPurposeTime, 
			  TO_CHAR(TRUCK_IN_QUEUE_TIME, 'DDMONYY HH24:MI') truckInQueueTime, 
			  TO_CHAR(DOCK_ALLOCATION_TIME, 'DDMONYY HH24:MI') dockAllocationTime, 
			  TO_CHAR(LEAVE_TRUCKPARK_TIME, 'DDMONYY HH24:MI') leaveTruckParkTime, 
			  TO_CHAR(TERMINAL_ENTRY_TIME, 'DDMONYY HH24:MI') terminalEntryTime,
			  TO_CHAR(DOCK_OCCUPY_TIME, 'DDMONYY HH24:MI') truckDockOccupancyTime, 
			  TO_CHAR(LEAVE_DOCK_TIME, 'DDMONYY HH24:MI') leaveTruckDockTime,
			  TO_CHAR(TERMINAL_EXIT_TIME, 'DDMONYY HH24:MI') terminalExitTime
			FROM TRUCK_TRIP_EVENTS EVENT
	    	LEFT OUTER JOIN TRUCK_TRIP TRIP
	    	ON EVENT.TRIP_ID = TRIP.TRIP_ID
	    	LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
	    	ON TRIP.PURPOSE = PURP.CODE
			WHERE EVENT.TRIP_ID IN (
	      		SELECT TRIP_ID FROM TRUCK_TRIP TRIP	WHERE TRUCK_NO = UPPER(#PARAM#) AND TRIP_CLOSED = 'Y'
		    ) AND (EVENT.TERMINAL_ENTRY_TIME IS NOT NULL OR EVENT.TRUCK_PARK_ENTRY_TIME IS NOT NULL)
		    ORDER BY 1 DESC
		]]>
	</select>
	<!-- -->
	<!-- MISC. (END) -->
	<!-- -->
	<!-- -->
	<!-- AGENT (BEGIN) -->
	<!-- -->
	<!-- iPass Enquiry -->
	<select id="sqlGetTCSAgtSearchiPassEnquiry" parameterClass="cargo.cms.tcs.bo.TCSRegisterSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSRegisterResultBO">
		<![CDATA[
			SELECT IPASS_NO ipassNo, TRUCK_NO truckNo,
			  TYP.CODE_DESC type,
			  TO_CHAR(ISSUED_ON, 'DDMONYY HH24:MI') issuedOn,
			  CONTACT_NO contactNo, STAT.CODE_DESC status,
			  TO_CHAR(IPASS.LM_DATE, 'DDMONYY HH24:MI:SS') lmMultiUserTime,
			  #companyName# AS companyName
			FROM TCS_IPASS_MASTER IPASS
			LEFT OUTER JOIN MAST_CODE_DTL STAT
			ON IPASS.STATUS = STAT.CODE	AND STAT.CODE_TYPE = 'TCS_IPASS_STATUS'
	    	LEFT OUTER JOIN MAST_CODE_DTL TYP
			ON IPASS.IPASS_TYPE = TYP.CODE	AND TYP.CODE_TYPE = 'TCS_IPASS_TYPE'
			WHERE IPASS.CUST_NO = (SELECT MAX(CODE) FROM CUST_COMPANY WHERE UPPER(CODE_DESC) = UPPER(#companyName#) AND ACTIVE = 'Y')
		]]>
		<isEqual property="searchByOpt2" compareValue="Y">
			<isNotEmpty property="dateFrom">
				<isNotEmpty property="dateTo"><![CDATA[
				 AND (IPASS.ISSUED_ON >= TO_DATE(#dateFrom#, 'DDMONYY HH24:MI') AND IPASS.ISSUED_ON <= TO_DATE(#dateTo#, 'DDMONYY HH24:MI'))
				 ]]>
				</isNotEmpty>
			</isNotEmpty>
			<isEmpty property="dateTo">
				<isNotEmpty property="dateFrom"><![CDATA[
				 AND IPASS.ISSUED_ON >= TO_DATE(#dateFrom#, 'DDMONYY HH24:MI')
				 ]]>
				</isNotEmpty>
			</isEmpty>
			<isEmpty property="dateFrom">
				<isNotEmpty property="dateTo"><![CDATA[
				 AND IPASS.ISSUED_ON <= TO_DATE(#dateTo#, 'DDMONYY HH24:MI')
				 ]]>
				</isNotEmpty>
			</isEmpty>
		</isEqual>
		<isEqual property="searchByOpt2" compareValue="N">
			<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(IPASS.TRUCK_NO) = UPPER(#truckNo#) ]]>
			</isNotEmpty>
			<isNotEmpty property="type"> AND IPASS.IPASS_TYPE = #type#
			</isNotEmpty>
			<isNotEmpty property="ipassNo"> AND IPASS.IPASS_NO = #ipassNo#
			</isNotEmpty>
		</isEqual>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				<![CDATA[ IPASS.ISSUED_ON DESC, IPASS.IPASS_NO, IPASS.TRUCK_NO, IPASS.STATUS ]]>
			</isEmpty>
		</dynamic>
	</select>
	<select id="sqlGetTCSAgtiPassEnquiryHistory" parameterClass="cargo.cms.tcs.bo.TCSRegisterResultBO"
		resultClass="cargo.cms.tcs.bo.TCSRegisterResultBO">
		<![CDATA[
			SELECT IPASS_NO ipassNo, TYP.CODE_DESC type,
			  TO_CHAR(IPASS.CR_DATE, 'DDMONYY HH24:MI') transactionDate,
			  ACT.CODE_DESC transactionType,
			  CONTACT_NO contactNo, NTFY_CONTACT_NO notifyContactNo
			FROM TCS_IPASS_LOG IPASS
			LEFT OUTER JOIN MAST_CODE_DTL ACT
			ON IPASS.TR_TYPE = ACT.CODE	AND ACT.CODE_TYPE = 'TCS_IPASS_ACTION'
			LEFT OUTER JOIN MAST_CODE_DTL TYP
			ON IPASS.IPASS_TYPE = TYP.CODE	AND TYP.CODE_TYPE = 'TCS_IPASS_TYPE'
			WHERE UPPER(IPASS.TRUCK_NO) = UPPER(#truckNo#)
			AND IPASS.CUST_NO = (SELECT MAX(CODE) FROM CUST_COMPANY WHERE UPPER(CODE_DESC) = UPPER(#companyName#) AND ACTIVE = 'Y')
		]]>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				IPASS.CR_DATE DESC
			</isEmpty>
		</dynamic>
	</select>
	<!-- View Truck Movement -->
	<select id="sqlGetTCSAgtSearchTruckInParkCurrent"
		parameterClass="cargo.cms.tcs.bo.TCSTrafficSearchBO" resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT TRIP.TRUCK_NO truckNo, PURP.CODE_DESC incomingPurpose, 
			NVL(TRIP.TRUCK_QUEUE_IND, 'Y') inQueue,
			TO_CHAR(EVENT.TRUCK_PARK_ENTRY_TIME, 'DDMONYY HH24:MI') truckParkEntryTime,
			TO_CHAR(EVENT.DECL_PURPOSE_TIME, 'DDMONYY HH24:MI') declInPurposeTime,
			TO_CHAR(EVENT.TRUCK_IN_QUEUE_TIME, 'DDMONYY HH24:MI') truckInQueue,
			TO_CHAR(EVENT.DOCK_ALLOCATION_TIME, 'DDMONYY HH24:MI') dockAllocationTime
			FROM
			TRUCK_TRIP TRIP
			LEFT OUTER JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
		    JOIN (
		      SELECT IPASS_NO, IPASS.TRUCK_NO, IPASS.CUST_NO
		      FROM TCS_IPASS_MASTER IPASS
		      JOIN (
		      SELECT MAX(CR_DATE) CR_DATE, TRUCK_NO
		      FROM TCS_IPASS_MASTER IPASS
		      GROUP BY TRUCK_NO
		      ) GRP
		      ON IPASS.TRUCK_NO = GRP.TRUCK_NO AND IPASS.CR_DATE = GRP.CR_DATE
		      WHERE IPASS.CUST_NO IS NOT NULL
		    ) IPASS
		    ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
		    JOIN CUST_COMPANY CUST
		    ON IPASS.CUST_NO = CUST.CODE
			WHERE
			CLOSED = 'N' AND CURR_LOC IN('TPA') AND UPPER(CUST.CODE_DESC) = UPPER(#companyName#) AND CUST.ACTIVE = 'Y'
		]]>
		<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(TRIP.TRUCK_NO) = UPPER(#truckNo#) ]]>
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				TRIP.TRIP_ID
			</isEmpty>
		</dynamic>
	</select>
	<select id="sqlGetTCSAgtSearchTruckInTerminalCurrent"
		parameterClass="cargo.cms.tcs.bo.TCSTrafficSearchBO" resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT TRIP.TRUCK_NO truckNo, TRUCK_DOCK allocatedTruckDockNo,
			PURP.CODE_DESC incomingPurpose, CURR_LOC currentLocation,
			TO_CHAR(EVENT.TRUCK_PARK_ENTRY_TIME, 'DDMONYY HH24:MI') truckParkEntryTime,
			TO_CHAR(EVENT.DECL_PURPOSE_TIME, 'DDMONYY HH24:MI') declInPurposeTime,
			TO_CHAR(EVENT.TRUCK_IN_QUEUE_TIME, 'DDMONYY HH24:MI') truckInQueue,
			TO_CHAR(EVENT.DOCK_ALLOCATION_TIME, 'DDMONYY HH24:MI') dockAllocationTime,
			 NVL( floor((TO_CHAR(TO_DATE(to_char(EVENT.DOCK_ALLOCATION_TIME,'DDMONYY HH24MI'),'DDMONYY HH24MI') - 
	            			TO_DATE(to_char(EVENT.TRUCK_IN_QUEUE_TIME,'DDMONYY HH24MI'),'DDMONYY HH24MI')))  * 24 * 60) , 0 ) truckInQueueMin,
			TO_CHAR(EVENT.LEAVE_TRUCKPARK_TIME, 'DDMONYY HH24:MI') leaveTruckParkTime,
			TO_CHAR(EVENT.TERMINAL_ENTRY_TIME, 'DDMONYY HH24:MI') terminalEntryTime,
			TO_CHAR(EVENT.DOCK_OCCUPY_TIME, 'DDMONYY HH24:MI') dockOccupancyTime,
			TO_CHAR(EVENT.LEAVE_DOCK_TIME, 'DDMONYY HH24:MI') leaveTruckDockTime
			FROM
			TRUCK_TRIP TRIP
			LEFT OUTER JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
		    JOIN (
		      SELECT IPASS_NO, IPASS.TRUCK_NO, IPASS.CUST_NO
		      FROM TCS_IPASS_MASTER IPASS
		      JOIN (
		      SELECT MAX(CR_DATE) CR_DATE, TRUCK_NO
		      FROM TCS_IPASS_MASTER IPASS
		      GROUP BY TRUCK_NO
		      ) GRP
		      ON IPASS.TRUCK_NO = GRP.TRUCK_NO AND IPASS.CR_DATE = GRP.CR_DATE
		      WHERE IPASS.CUST_NO IS NOT NULL    
		    ) IPASS
		    ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
		    JOIN CUST_COMPANY CUST
		    ON IPASS.CUST_NO = CUST.CODE
			WHERE
			CLOSED = 'N' AND CURR_LOC NOT IN('TPA') AND UPPER(CUST.CODE_DESC) = UPPER(#companyName#) AND CUST.ACTIVE = 'Y'
		]]>
		<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(TRIP.TRUCK_NO) = UPPER(#truckNo#) ]]>
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				TRIP.TRIP_ID
			</isEmpty>
		</dynamic>
	</select>
	<select id="sqlGetTCSAgtMovementHistoryTrucks" parameterClass="cargo.cms.tcs.bo.TCSTrafficSearchBO"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DISTINCT TRIP.TRUCK_NO truckNo
			FROM TRUCK_TRIP TRIP
		    JOIN (
		      SELECT IPASS_NO, IPASS.TRUCK_NO, IPASS.CUST_NO
		      FROM TCS_IPASS_MASTER IPASS
		      JOIN (
		      SELECT MAX(CR_DATE) CR_DATE, TRUCK_NO
		      FROM TCS_IPASS_MASTER IPASS
		      GROUP BY TRUCK_NO
		      ) GRP
		      ON IPASS.TRUCK_NO = GRP.TRUCK_NO AND IPASS.CR_DATE = GRP.CR_DATE
		      WHERE IPASS.CUST_NO IS NOT NULL    
		    ) IPASS
		    ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
		    LEFT OUTER JOIN CUST_COMPANY CUST
		    ON IPASS.CUST_NO = CUST.CODE
			WHERE
			CLOSED = 'Y' AND UPPER(CUST.CODE_DESC) = UPPER(#companyName#) AND CUST.ACTIVE = 'Y'
		]]>
		<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(TRIP.TRUCK_NO) =	UPPER(#truckNo#) ]]>
		</isNotEmpty>
		<isNotEmpty property="fromDateTime"><![CDATA[
		 AND TRIP.ARR_TIME >= TO_DATE(#fromDateTime#, 'DDMONYY HH24:MI')
		 ]]>
		</isNotEmpty>
		<isNotEmpty property="toDateTime"><![CDATA[
		 AND TRIP.ARR_TIME <= TO_DATE(#toDateTime#, 'DDMONYY HH24:MI')
		]]>
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				TRIP.TRUCK_NO
			</isEmpty>
		</dynamic>
	</select>
	<select id="sqlGetTCSAgtSearchTruckMovementHistory"
		parameterClass="cargo.cms.tcs.bo.TCSTrafficSearchBO" resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT TRIP.TRUCK_NO truckNo, TRIP.TRUCK_DOCK allocatedTruckDock, 
			PURP.CODE_DESC incomingPurpose, 
			TO_CHAR(EVENT.TRUCK_PARK_ENTRY_TIME, 'DDMONYY HH24:MI') truckParkEntryTime,
			TO_CHAR(EVENT.DECL_PURPOSE_TIME, 'DDMONYY HH24:MI') declInPurposeTime,
			TO_CHAR(EVENT.TRUCK_IN_QUEUE_TIME, 'DDMONYY HH24:MI') truckInQueue,
			TO_CHAR(EVENT.DOCK_ALLOCATION_TIME, 'DDMONYY HH24:MI') dockAllocationTime,
			TO_CHAR(EVENT.LEAVE_TRUCKPARK_TIME, 'DDMONYY HH24:MI') leaveTruckParkTime,
			TO_CHAR(EVENT.TERMINAL_ENTRY_TIME, 'DDMONYY HH24:MI') terminalEntryTime,
			TO_CHAR(EVENT.DOCK_OCCUPY_TIME, 'DDMONYY HH24:MI') dockOccupancyTime,
			TO_CHAR(EVENT.LEAVE_DOCK_TIME, 'DDMONYY HH24:MI') leaveTruckDockTime,
			TO_CHAR(EVENT.TERMINAL_EXIT_TIME, 'DDMONYY HH24:MI') terminalExitTime
			FROM
			TRUCK_TRIP TRIP
			LEFT OUTER JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
		    JOIN (
		      SELECT IPASS_NO, IPASS.TRUCK_NO, IPASS.CUST_NO
		      FROM TCS_IPASS_MASTER IPASS
		      JOIN (
			      SELECT MAX(CR_DATE) CR_DATE, TRUCK_NO
			      FROM TCS_IPASS_MASTER IPASS
			      GROUP BY TRUCK_NO
		      ) GRP
		      ON IPASS.TRUCK_NO = GRP.TRUCK_NO AND IPASS.CR_DATE = GRP.CR_DATE
		      WHERE IPASS.CUST_NO IS NOT NULL
		    ) IPASS
		    ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
		    JOIN CUST_COMPANY CUST
		    ON IPASS.CUST_NO = CUST.CODE
			WHERE CLOSED = 'Y' AND UPPER(CUST.CODE_DESC) = UPPER(#companyName#) AND CUST.ACTIVE = 'Y' AND
			(EVENT.TERMINAL_ENTRY_TIME IS NOT NULL OR EVENT.TRUCK_PARK_ENTRY_TIME IS NOT NULL)
		]]>
		<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(TRIP.TRUCK_NO) = UPPER(#truckNo#) ]]>
		</isNotEmpty>
		<isNotEmpty property="fromDateTime"><![CDATA[ AND TRIP.ARR_TIME >= TO_DATE(#fromDateTime#, 'DDMONYY HH24:MI') ]]>
		</isNotEmpty>
		<isNotEmpty property="toDateTime"><![CDATA[ AND TRIP.ARR_TIME <= TO_DATE(#toDateTime#, 'DDMONYY HH24:MI') ]]>
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				TRIP.ARR_TIME DESC
			</isEmpty>
		</dynamic>
	</select>
	<!-- View Ban Truck Info -->
	<select id="sqlGetTCSAgtSearchBanTruckInfo" parameterClass="cargo.cms.tcs.bo.TCSBanSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSBanResultBO">
		<![CDATA[
			WITH ACT_BAN AS (
			  SELECT * FROM TCS_BAN_TRUCK WHERE STATUS IN ('BANNED', 'ONETIME')
			),
			CUR_BAN AS (
			  SELECT 
			    TR_NO, TRUCK_NO, IPASS_NO, BAN_REASON, RESTRICTIONS, 
			    BAN_RMK, BAN_FROM, BAN_TO, STATUS, RLS_USER_ID, RLS_DATE, RLS_RMK, LM_DATE, 
			    'Y' ACTIVE 
			  FROM ACT_BAN ACT
			  UNION
			  SELECT DISTINCT
			    TR_NO, TRUCK_NO, IPASS_NO, BAN_REASON, RESTRICTIONS, 
			    BAN_RMK, BAN_FROM, BAN_TO, STATUS, RLS_USER_ID, RLS_DATE, RLS_RMK, LM_DATE, 
			    'N' ACTIVE   
			  FROM TCS_BAN_TRUCK BAN 
			  WHERE TR_NO IN(SELECT MAX(TR_NO) FROM TCS_BAN_TRUCK WHERE TRUCK_NO NOT IN(SELECT TRUCK_NO FROM ACT_BAN) GROUP BY TRUCK_NO)
			)
			SELECT
			TRUCK.TR_NO trNo,
			TRUCK.TRUCK_NO truckNo,
			TRUCK.IPASS_NO ipassNo,	PASTYP.CODE_DESC ipassType, 
			TRUCK.BAN_REASON banReason, TRUCK.RESTRICTIONS restrictions,
			BANTYP.CODE_DESC banType,
			TO_CHAR(BAN_FROM, 'DDMONYY') || NVL2(BAN_FROM, '-', NULL) || TO_CHAR(BAN_TO, 'DDMONYY') banPeriod,
			BANSTAT.CODE_DESC status
			FROM
			CUR_BAN TRUCK
			LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
			ON TRUCK.IPASS_NO = IPASS.IPASS_NO    
			LEFT OUTER JOIN MAST_CODE_DTL BANSTAT
			ON TRUCK.STATUS = BANSTAT.CODE AND BANSTAT.CODE_TYPE = 'TCS_BAN_STATUS'
			LEFT OUTER JOIN TCS_BAN_MASTER BAN
			ON TRUCK.BAN_REASON = BAN.BAN_REASON
			LEFT OUTER JOIN MAST_CODE_DTL BANTYP
			ON BAN.BAN_TYPE = BANTYP.CODE AND BANTYP.CODE_TYPE = 'TCS_BAN_TYPE'
			LEFT OUTER JOIN MAST_CODE_DTL PASTYP
			ON IPASS.IPASS_TYPE = PASTYP.CODE AND PASTYP.CODE_TYPE = 'TCS_IPASS_TYPE'
			WHERE IPASS.CUST_NO = (SELECT MAX(CODE) FROM CUST_COMPANY WHERE UPPER(CODE_DESC) = UPPER(#companyName#) AND ACTIVE = 'Y')
		]]>
		<isEqual property="searchBy" compareValue="N">
			<isNotEmpty property="truckNo"><![CDATA[ AND UPPER(TRUCK.TRUCK_NO) = UPPER(#truckNo#) ]]>
			</isNotEmpty>
			<isNotEmpty property="ipassNo"><![CDATA[ AND TRUCK.IPASS_NO = #ipassNo# ]]>
			</isNotEmpty>
			<isNotEmpty property="type"><![CDATA[ AND IPASS.IPASS_TYPE = #type# AND TRUCK.ACTIVE = 'Y' ]]>
			</isNotEmpty>
			<isNotEmpty property="banNature"><![CDATA[ AND BAN.BAN_NATURE = #banNature# AND TRUCK.ACTIVE = 'Y' ]]>
			</isNotEmpty>
		</isEqual>
		<isEqual property="searchBy" compareValue="Y">
			<isNotEmpty property="banFrom">
				<isNotEmpty property="banTo"><![CDATA[
				 AND (
				 	(TRUCK.BAN_FROM <= TO_DATE(#banFrom#, 'DDMONYY') AND TRUCK.BAN_TO >= TO_DATE(#banFrom#, 'DDMONYY')) OR 
				 	(TRUCK.BAN_FROM <= TO_DATE(#banTo#, 'DDMONYY') AND TRUCK.BAN_TO >= TO_DATE(#banTo#, 'DDMONYY')) OR
				 	(TO_DATE(#banFrom#, 'DDMONYY') <= TRUCK.BAN_FROM AND TO_DATE(#banTo#, 'DDMONYY') >= TRUCK.BAN_FROM) OR 
				 	(TO_DATE(#banFrom#, 'DDMONYY') <= TRUCK.BAN_TO AND TO_DATE(#banTo#, 'DDMONYY') >= TRUCK.BAN_TO)  
				 	)
				 AND TRUCK.ACTIVE = 'Y'
				 ]]>
				</isNotEmpty>
			</isNotEmpty>
			<isEmpty property="banTo">
				<isNotEmpty property="banFrom"><![CDATA[
				 AND (
				 	(TRUCK.BAN_FROM <= TO_DATE(#banFrom#, 'DDMONYY') AND TRUCK.BAN_TO >= TO_DATE(#banFrom#, 'DDMONYY')) OR 
				 	TRUCK.BAN_FROM >= TO_DATE(#banFrom#, 'DDMONYY')
				 	)
				 AND TRUCK.ACTIVE = 'Y'
				 ]]>
				</isNotEmpty>
			</isEmpty>
			<isEmpty property="banFrom">
				<isNotEmpty property="banTo"><![CDATA[
				 AND (
				 	(TRUCK.BAN_FROM <= TO_DATE(#banTo#, 'DDMONYY') AND TRUCK.BAN_TO >= TO_DATE(#banTo#, 'DDMONYY')) OR 
				 	TRUCK.BAN_TO <= TO_DATE(#banTo#, 'DDMONYY')
				 	)
				 AND TRUCK.ACTIVE = 'Y'
				 ]]>
				</isNotEmpty>
			</isEmpty>
		</isEqual>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				TRUCK.BAN_FROM DESC, TRUCK.BAN_TO
			</isEmpty>
		</dynamic>
	</select>
	<select id="sqlGetTCSAgtBanTruckInfoHistory" parameterClass="cargo.cms.tcs.bo.TCSBanResultBO"
		resultClass="cargo.cms.tcs.bo.TCSBanResultBO">
		<![CDATA[
			SELECT
			TRUCK.IPASS_NO ipassNo, TRUCK.BAN_REASON banReason, 
			RESTRICTIONS restrictions, BANTYP.CODE_DESC banType, 
			TO_CHAR(BAN_FROM, 'DDMONYY') || '-' || TO_CHAR(BAN_TO, 'DDMONYY') banPeriod, 
			BAN_RMK remark, TO_CHAR(TRUCK.RLS_DATE, 'DDMONYY HH24:MI') releaseTime, 
			DECODE(IPASS.STATUS, 'ACTIVE', 'Y', 'N') active, BANSTAT.CODE_DESC status,
			TO_CHAR(TRUCK.CR_DATE, 'DDMONYY HH24:MI') crDate
			FROM
			TCS_BAN_TRUCK TRUCK
			LEFT OUTER JOIN TCS_BAN_MASTER BAN
			ON TRUCK.BAN_REASON = BAN.BAN_REASON
			LEFT OUTER JOIN TCS_IPASS_MASTER IPASS
			ON TRUCK.IPASS_NO = IPASS.IPASS_NO
			LEFT OUTER JOIN MAST_CODE_DTL BANTYP
			ON BAN.BAN_TYPE = BANTYP.CODE AND BANTYP.CODE_TYPE = 'TCS_BAN_TYPE'
			LEFT OUTER JOIN MAST_CODE_DTL BANSTAT
			ON TRUCK.STATUS = BANSTAT.CODE AND BANSTAT.CODE_TYPE = 'TCS_BAN_STATUS'    	
			WHERE
			UPPER(TRUCK.TRUCK_NO) = UPPER(#truckNo#)
			AND IPASS.CUST_NO = (SELECT MAX(CODE) FROM CUST_COMPANY WHERE UPPER(CODE_DESC) = UPPER(#companyName#) AND ACTIVE = 'Y')
			ORDER BY TRUCK.CR_DATE DESC
		]]>
	</select>
	<!-- View Truck Park Occupancy & Queue -->
	<select id="sqlGetTCSAgtSearchTruckInParkNotInQ" parameterClass="cargo.cms.tcs.bo.TCSTrafficSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT TRIP.TRUCK_NO truckNo,	PURP.CODE_DESC incomingPurpose,
			TO_CHAR(EVENT.TRUCK_PARK_ENTRY_TIME, 'DDMONYY HH24:MI') truckParkEntryTime,
			TO_CHAR(EVENT.DECL_PURPOSE_TIME, 'DDMONYY HH24:MI') declInPurposeTime,
			TO_CHAR(EVENT.TRUCK_IN_QUEUE_TIME, 'DDMONYY HH24:MI') truckInQueue,
			TO_CHAR(EVENT.DOCK_ALLOCATION_TIME, 'DDMONYY HH24:MI') dockAllocationTime
			FROM
			TRUCK_TRIP TRIP
			LEFT OUTER JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
		    LEFT OUTER JOIN (
		      SELECT IPASS_NO, IPASS.TRUCK_NO, IPASS.CUST_NO
		      FROM TCS_IPASS_MASTER IPASS
		      JOIN (
		      SELECT MAX(CR_DATE) CR_DATE, TRUCK_NO
		      FROM TCS_IPASS_MASTER IPASS
		      GROUP BY TRUCK_NO
		      ) GRP
		      ON IPASS.TRUCK_NO = GRP.TRUCK_NO AND IPASS.CR_DATE = GRP.CR_DATE
		      WHERE IPASS.CUST_NO IS NOT NULL    
		    ) IPASS
		    ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
		    LEFT OUTER JOIN CUST_COMPANY CUST
		    ON IPASS.CUST_NO = CUST.CODE
			WHERE
			CLOSED = 'N' AND CURR_LOC IN('TPA')
			AND UPPER(CUST.CODE_DESC) = UPPER(#companyName#) AND TRUCK_QUEUE_IND = 'N'
		]]>
		<isNotEmpty property="truckNo"> AND UPPER(TRIP.TRUCK_NO) =
			UPPER(#truckNo#)
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				TRIP.TRIP_ID
			</isEmpty>
		</dynamic>
	</select>
	<select id="sqlGetTCSAgtSearchTruckInParkInQ" parameterClass="cargo.cms.tcs.bo.TCSTrafficSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT TRIP.TRUCK_NO truckNo, PURP.CODE_DESC incomingPurpose,
			TO_CHAR(EVENT.TRUCK_PARK_ENTRY_TIME, 'DDMONYY HH24:MI') truckParkEntryTime,
			TO_CHAR(EVENT.DECL_PURPOSE_TIME, 'DDMONYY HH24:MI') declInPurposeTime,
			TO_CHAR(EVENT.TRUCK_IN_QUEUE_TIME, 'DDMONYY HH24:MI') truckInQueue,
			TO_CHAR(EVENT.DOCK_ALLOCATION_TIME, 'DDMONYY HH24:MI') dockAllocationTime
			FROM
			TRUCK_TRIP TRIP
			LEFT OUTER JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
		    LEFT OUTER JOIN (
		      SELECT IPASS_NO, IPASS.TRUCK_NO, IPASS.CUST_NO
		      FROM TCS_IPASS_MASTER IPASS
		      JOIN (
		      SELECT MAX(CR_DATE) CR_DATE, TRUCK_NO
		      FROM TCS_IPASS_MASTER IPASS
		      GROUP BY TRUCK_NO
		      ) GRP
		      ON IPASS.TRUCK_NO = GRP.TRUCK_NO AND IPASS.CR_DATE = GRP.CR_DATE
		      WHERE IPASS.CUST_NO IS NOT NULL    
		    ) IPASS
		    ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
		    LEFT OUTER JOIN CUST_COMPANY CUST
		    ON IPASS.CUST_NO = CUST.CODE
			WHERE
			CLOSED = 'N' AND CURR_LOC IN('TPA')
			AND UPPER(CUST.CODE_DESC) = UPPER(#companyName#) AND TRUCK_QUEUE_IND = 'Y'
		]]>
		<isNotEmpty property="truckNo"> AND UPPER(TRIP.TRUCK_NO) =
			UPPER(#truckNo#)
		</isNotEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				TRIP.TRIP_ID
			</isEmpty>
		</dynamic>
	</select>
	<select id="sqlGetTCSAgtTruckInfo" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT IPASS.TRUCK_NO truckNo, IPASS.IPASS_NO ipassNo, TYP.CODE_DESC ipassType,
			STAT.CODE_DESC status, TRUKTYP.CODE_DESC truckType, CUST.CODE_DESC customerName, 
	      	DECODE((SELECT COUNT(TRUCK_NO) FROM TCS_BAN_TRUCK WHERE TRUCK_NO = IPASS.TRUCK_NO AND STATUS IN('BANNED', 'ONETIME') AND 
	      			BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')), 0, 'N', 'Y') banned,
			PURP.CODE_DESC incomingPurpose, 
			(
			SELECT TRUCK_DOCK FROM TCS_DOCK_ALLOCATION
			WHERE TRIP_ID = TRIP.TRIP_ID
			) allocatedDockNo,
			TRIP.CURR_LOC location
			FROM TCS_IPASS_MASTER IPASS
	    	LEFT OUTER JOIN TRUCK_TRIP TRIP
	    	ON IPASS.TRUCK_NO = TRIP.TRUCK_NO AND CLOSED = 'N'
			LEFT OUTER JOIN MAST_CODE_DTL TYP
			ON IPASS.IPASS_TYPE = TYP.CODE AND TYP.CODE_TYPE = 'TCS_IPASS_TYPE'
			LEFT OUTER JOIN MAST_CODE_DTL STAT
			ON IPASS.STATUS = STAT.CODE AND STAT.CODE_TYPE = 'TCS_IPASS_STATUS'
			LEFT OUTER JOIN MAST_TCS_TRUCK_TYPE TRUKTYP
			ON IPASS.TRUCK_TYPE = TRUKTYP.CODE
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE
			IPASS.TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<!-- View Schedule Collection Time Slot -->
	<select id="sqlGetTCSAgtSearchSchColl" parameterClass="cargo.cms.tcs.bo.TCSBookingSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSBookingResultBO">
		<![CDATA[
			SELECT TR_NO trNo,
			SUBSTR(TRIM(TO_CHAR(TIME_FROM, '0000')), 0, 2) || NVL2(TIME_FROM, ':', '') || SUBSTR(TRIM(TO_CHAR(TIME_FROM, '0000')), 3, 4) timeFrom, 
			SUBSTR(TRIM(TO_CHAR(TIME_TO, '0000')), 0, 2) || NVL2(TIME_TO, ':', '') || SUBSTR(TRIM(TO_CHAR(TIME_TO, '0000')), 3, 4) timeTo,
			TO_CHAR(EFF_FROM, 'DDMONYY') effectiveFrom, TO_CHAR(EFF_TO, 'DDMONYY') effectiveTo,
			DAY_FRQ dayFrequency, 
			(SELECT STRAGG(STRINGDELIM(TRUCK_DOCK, ',')) FROM CUST_AGENT_SCH_COLL_TRUCK_DOCK DOCK WHERE DOCK.TR_NO = COLL.TR_NO) truckDock
			FROM CUST_AGENT_SCH_COLL_TIME COLL
			WHERE PURPOSE = #purpose# AND COLL.CUST_NO = (SELECT MAX(CODE) FROM CUST_COMPANY WHERE UPPER(CODE_DESC) = UPPER(#companyName#) AND ACTIVE = 'Y')
		]]>
		<isNotEmpty property="day"><![CDATA[ AND DAY_FRQ LIKE #dayFreq# ]]></isNotEmpty>
		<isNotEmpty property="effectiveFrom">
			<isNotEmpty property="effectiveTo"><![CDATA[
			 AND (
			 	(COLL.EFF_FROM <= TO_DATE(#effectiveFrom#, 'DDMONYY') AND COLL.EFF_TO >= TO_DATE(#effectiveFrom#, 'DDMONYY')) OR 
			 	(COLL.EFF_FROM <= TO_DATE(#effectiveTo#, 'DDMONYY') AND COLL.EFF_TO >= TO_DATE(#effectiveTo#, 'DDMONYY')) OR
        		(TO_DATE(#effectiveFrom#, 'DDMONYY') <= COLL.EFF_FROM AND TO_DATE(#effectiveTo#, 'DDMONYY') >= COLL.EFF_FROM) OR 
			 	(TO_DATE(#effectiveFrom#, 'DDMONYY') <= COLL.EFF_TO AND TO_DATE(#effectiveTo#, 'DDMONYY') >= COLL.EFF_TO) 			 	
			 	)
			 ]]>
			</isNotEmpty>
		</isNotEmpty>
		<isEmpty property="effectiveTo">
			<isNotEmpty property="effectiveFrom"><![CDATA[
			 AND (
			 	(COLL.EFF_FROM <= TO_DATE(#effectiveFrom#, 'DDMONYY') AND COLL.EFF_TO >= TO_DATE(#effectiveFrom#, 'DDMONYY')) OR 
			 	COLL.EFF_FROM >= TO_DATE(#effectiveFrom#, 'DDMONYY')
			 )
			 ]]>
			</isNotEmpty>
		</isEmpty>
		<isEmpty property="effectiveFrom">
			<isNotEmpty property="effectiveTo"><![CDATA[
			 AND (
			 	(COLL.EFF_FROM <= TO_DATE(#effectiveTo#, 'DDMONYY') AND COLL.EFF_TO >= TO_DATE(#effectiveTo#, 'DDMONYY')) OR 
			 	COLL.EFF_TO <= TO_DATE(#effectiveTo#, 'DDMONYY')
			 )
			 ]]>
			</isNotEmpty>
		</isEmpty>
		<dynamic prepend="ORDER BY ">
			<isNotEmpty property="sortOrder.sortField">
				$sortOrder.sortField$
			</isNotEmpty>
			<isEmpty property="sortOrder.sortField">
				EFF_FROM, TIME_FROM, EFF_TO
			</isEmpty>
		</dynamic>
	</select>
	<!-- -->
	<!-- AGENT (END) -->
	<!-- -->
	<!-- -->
	<!-- HHT (BEGIN) -->
	<!-- -->
	<!-- Truck Information -->
	<select id="sqlGetTCSHHTTruckInfo" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT IPASS.TRUCK_NO truckNo, IPASS.IPASS_NO ipassNo, TYP.CODE_DESC ipassType,
			STAT.CODE_DESC status, TRUKTYP.CODE_DESC truckType, CUST.CODE_DESC customerName, 
			CONTACT_NO contactNo,
	      	DECODE((SELECT COUNT(TRUCK_NO) FROM TCS_BAN_TRUCK WHERE TRUCK_NO = IPASS.TRUCK_NO AND STATUS IN('BANNED', 'ONETIME') AND 
	      			BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')), 0, 'N', 'Y') banned,
			PURP.CODE_DESC incomingPurpose, TRIP.PURPOSE declPurpose,
			(
				SELECT MAX(TRUCK_DOCK) FROM TCS_DOCK_ALLOCATION WHERE TRIP_ID = TRIP.TRIP_ID
			) allocatedDockNo,
			TRIP.CURR_LOC location,
	    	DECODE(TRIP.CURR_LOC, 'TPA', 'N', 'TPX', 'N', NULL, 'N', 'Y') insideTerminal,
			ROUND(
				(SELECT NVL(SUM(CALC_CHRG), 0.0) -  NVL(SUM(WAVR_AMT), 0.0) - 
					(NVL(SUM(PAID_AMT_CASH), 0.0) + NVL(SUM(PAID_AMT_CREDIT), 0.0))
				FROM BILL_CHARGE_DTL
				WHERE TRUCK_NO = IPASS.TRUCK_NO AND STATUS = 'PENDING'
			), 2) outstandingCharge
			FROM TCS_IPASS_MASTER IPASS
	    	LEFT OUTER JOIN TRUCK_TRIP TRIP
	    	ON IPASS.TRUCK_NO = TRIP.TRUCK_NO AND CLOSED = 'N'
			LEFT OUTER JOIN MAST_CODE_DTL TYP
			ON IPASS.IPASS_TYPE = TYP.CODE AND TYP.CODE_TYPE = 'TCS_IPASS_TYPE'
			LEFT OUTER JOIN MAST_CODE_DTL STAT
			ON IPASS.STATUS = STAT.CODE AND STAT.CODE_TYPE = 'TCS_IPASS_STATUS'
			LEFT OUTER JOIN MAST_TCS_TRUCK_TYPE TRUKTYP
			ON IPASS.TRUCK_TYPE = TRUKTYP.CODE
			LEFT OUTER JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE
			IPASS.TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<!-- Truck Activity Info -->
	<select id="sqlGetTCSHHTTripInfo" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT IPASS.TRUCK_NO truckNo, IPASS.IPASS_NO ipassNo,
			PURP.CODE_DESC incomingPurpose, TRIP.PURPOSE declPurpose,
			(
			  CASE WHEN TRIP.CLOSED = 'N' THEN DECODE(TRIP.CURR_LOC, 'TPA', 'N', 'TPX', 'N', NULL, 'N', 'Y')
			  ELSE 'N'
			  END
			) insideTerminal
			FROM TCS_IPASS_MASTER IPASS
			LEFT OUTER JOIN TRUCK_TRIP TRIP
			ON IPASS.TRUCK_NO = TRIP.TRUCK_NO
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE
			TRIP.TRIP_ID = #PARAM#
		]]>
	</select>
	<!-- Truck Dock Monitoring -->
	<select id="sqlGetTCSHHTSearchTDMonitoring" parameterClass="cargo.cms.tcs.bo.TCSDockSearchBO"
		resultClass="cargo.cms.tcs.bo.TCSDockResultBO">
		<![CDATA[
			SELECT
			ALLOC.TRUCK_DOCK dockNo,
			TRIP.TRUCK_NO truckNo,
			DECODE(ALLOC.STATUS, 'ALLOCATED', NVL(ALLOC.PROXIMITY_FACTOR, 0), 0) confidFactor,
			DECODE(DOCK.IN_SERVICE, 'N', 'Unavailable/N', (NVL(STAT.CODE_DESC, ALLOC.STATUS) || '/' || ALLOC.OCCUPIED)) status
			FROM
			TCS_DOCK_ALLOCATION ALLOC
			JOIN TCS_DOCK_MASTER DOCK
			ON ALLOC.TRUCK_DOCK = DOCK.TRUCK_DOCK AND DOCK.PURPOSE_1 NOT IN('SHC', 'VAL')
			LEFT OUTER JOIN TRUCK_TRIP TRIP
			ON ALLOC.TRIP_ID = TRIP.TRIP_ID
			LEFT OUTER JOIN MAST_CODE_DTL STAT
			ON ALLOC.STATUS = STAT.CODE AND STAT.CODE_TYPE = 'TCS_ALLOC_STATUS'
		    WHERE 1 = 1	
		]]>
		<isNotEmpty property="level"> AND DOCK.DOCK_LEVEL = #level#
		</isNotEmpty>
		<isNotEmpty property="side"> AND DOCK.SIDE = #side#
		</isNotEmpty>
		<isNotEmpty property="dockNo"> AND DOCK.TRUCK_DOCK = #dockNo#
		</isNotEmpty>
		<isNotEmpty property="truckNo"> AND UPPER(TRIP.TRUCK_NO) =
			UPPER(#truckNo#)
		</isNotEmpty>
		<dynamic>
			<![CDATA[
				ORDER BY ALLOC.TRUCK_DOCK
			]]>
		</dynamic>
	</select>
	<select id="sqlGetTCSHHTFindTDInfo" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			SELECT
			  ALLOC.TRUCK_DOCK dockNo,
			  LVL.CODE_DESC dockLevelDesc,
			  SIDE.CODE_DESC side,
			  STAT.CODE_DESC status,
			  PURP.CODE_DESC purposeDesc,
			  TRIP.TRUCK_NO truckNo, 
			  INPURP.CODE_DESC incomingPurpose,
			  TO_CHAR(EVENT.DOCK_ALLOCATION_TIME, 'DDMONYY HH24:MI') allocationTime,
			  TO_CHAR(EVENT.DOCK_OCCUPY_TIME, 'DDMONYY HH24:MI') occupyTime,
			  TO_CHAR(EVENT.LEAVE_DOCK_TIME, 'DDMONYY HH24:MI') releaseTime
			FROM
			TCS_DOCK_ALLOCATION ALLOC
			JOIN TCS_DOCK_MASTER DOCK
			ON ALLOC.TRUCK_DOCK = DOCK.TRUCK_DOCK
			LEFT OUTER JOIN TRUCK_TRIP TRIP
			ON ALLOC.TRIP_ID = TRIP.TRIP_ID
			LEFT OUTER JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			LEFT OUTER JOIN MAST_CODE_DTL STAT
			ON ALLOC.STATUS = STAT.CODE AND STAT.CODE_TYPE = 'TCS_ALLOC_STATUS'
			LEFT OUTER JOIN MAST_CODE_DTL LVL
			ON DOCK.DOCK_LEVEL = LVL.CODE AND LVL.CODE_TYPE = 'TCS_DOCK_LEVEL'
			LEFT OUTER JOIN MAST_CODE_DTL SIDE
			ON DOCK.SIDE = SIDE.CODE AND SIDE.CODE_TYPE = 'TCS_DOCK_SIDE'
			LEFT OUTER JOIN MAST_TCS_DOCK_PURPOSE PURP
			ON DOCK.PURPOSE_1 = PURP.CODE
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE INPURP
			ON TRIP.PURPOSE = INPURP.CODE
			WHERE DOCK.TRUCK_DOCK = #PARAM#
		]]>
	</select>
	<update id="sqlUpdateTCSConfirmParking" parameterClass="cargo.cms.tcs.bo.TCSDockResultBO">
	<![CDATA[
		UPDATE TCS_DOCK_ALLOCATION 
		SET PROXIMITY_FACTOR = 100.0, LM_USER_ID = #lmUserId#, LM_DATE = SYSDATE 
		WHERE TRUCK_DOCK = #dockNo#
	]]>
	</update>
	<!-- Truck Dock Monitoring (SHC) -->
	<select id="sqlGetTCSHHTFindTDMonitorSummary" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			WITH SHCBLK AS (
			  SELECT CUST.CODE_DESC, CUST.CODE, 
			  BLK.DOCK_BLOCK_ID, BLK.MAXIMUM_ALLOWED, BLK.TRUCKS_IN_TERMINAL
			  FROM CUST_COMPANY CUST
			  LEFT OUTER JOIN TCS_DOCK_BLOCK BLK
			  ON CUST.CODE = BLK.CUST_NO AND BLOCK_TYPE = 'SHC' AND BLK.FROM_DT <= SYSDATE AND SYSDATE <= BLK.TO_DT
			  WHERE ACTIVE = 'Y' AND UPPER(CODE_DESC) = UPPER(#PARAM#)
			),
			SHA AS (
			  SELECT
			  (SELECT COUNT(TRUCK_DOCK) FROM TCS_DOCK_BLOCK_DOCK DOCK WHERE DOCK.DOCK_BLOCK_ID = BLK.DOCK_BLOCK_ID) NO_OF_DOCKS,
			  BLK.TRUCKS_IN_TERMINAL NO_OF_TRUCKS_IN_DOCK,
			  BLK.CODE_DESC SHC_NAME, NVL(BLK.MAXIMUM_ALLOWED, 0) SHC_QUOTA
			  FROM
			  TCS_SHA_CONFIG CONFIG
			  JOIN SHCBLK BLK
			  ON CONFIG.CUST_NO = BLK.CODE
			)
			SELECT NVL(NO_OF_DOCKS, 0) noOfDocks, NVL(SHC_QUOTA, 0) totalQuota, 
			NVL((
				SELECT COUNT(TRIP_ID)
				FROM TRUCK_TRIP TRIP
				JOIN TCS_IPASS_MASTER IPASS
				ON TRIP.TRUCK_NO = IPASS.TRUCK_NO AND (IPASS.CUST_TYPE = 'SHA' OR IPASS.PURPOSE = 'SHC')
				WHERE TRIP.CLOSED = 'N' AND TRIP.PURPOSE = 'SHC' AND TRIP.TRUCK_STATE IN ('A', 'L')
			), 0) trucksInTransit,
			NVL(NO_OF_TRUCKS_IN_DOCK, 0) noOfTrucksOnDock, NVL((SHC_QUOTA - NO_OF_TRUCKS_IN_DOCK), 0) availableQuota,
			SHC_NAME companyName
			FROM SHA
		]]>
	</select>
	<select id="sqlGetTCSHHTFindTDMonitorDetail" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			WITH IPASS_TRUCK AS (
			  SELECT 
			  TRUCK_NO, CUST_NO, MAX(IPASS.CR_DATE)
			  FROM TCS_IPASS_MASTER IPASS
			  JOIN CUST_COMPANY CUST
			  ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y' AND (IPASS.CUST_TYPE = 'SHA' OR IPASS.PURPOSE = 'SHC')
			  WHERE CUST.CODE_DESC = UPPER(#PARAM#)
			  GROUP BY TRUCK_NO, CUST_NO
			)
			SELECT
			TRIP.TRUCK_NO truckNo,
			CURR_LOC location
			FROM IPASS_TRUCK IPASS 
			JOIN TRUCK_TRIP TRIP
			ON IPASS.TRUCK_NO = TRIP.TRUCK_NO AND TRIP.CLOSED = 'N' AND TRIP.PURPOSE = 'SHC'
		]]>
	</select>
	<!-- Truck Park Monitoring -->
	<select id="sqlGetTCSHHTFindTruckParkMonitor" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT
			(SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'TCS_TRUCK_PARK_CAPACITY') truckParkCapacity,
			(SELECT COUNT(TRIP_ID) FROM TRUCK_TRIP WHERE CLOSED = 'N' AND CURR_LOC IN('TPA')) trucksInTruckPark,
			(SELECT COUNT(TRIP_ID) FROM TRUCK_TRIP WHERE CLOSED = 'N' AND CURR_LOC IN('TPA') AND TRUCK_QUEUE_IND = 'Y') trucksInQueue,
			(SELECT COUNT(TRUCK_DOCK) FROM TCS_DOCK_ALLOCATION WHERE TRIP_ID IN(
					SELECT TRIP_ID FROM TRUCK_TRIP WHERE CLOSED = 'N' AND CURR_LOC IN('TPA') AND TRUCK_DOCK IS NOT NULL)
			) trucksWithDockAllocated,
			(
			  SELECT COUNT(TRIP_ID) FROM (
		        SELECT (
		          SELECT IPASS_NO FROM TCS_IPASS_MASTER IPASS
		          WHERE TRUCK_NO = TRIP.TRUCK_NO
		        ) IPASS_NO, TRIP.TRIP_ID
				FROM TRUCK_TRIP TRIP
				WHERE CLOSED = 'N' AND CURR_LOC IN('TPA')
			  ) WHERE IPASS_NO IS NULL
			) unknownTruck,
			(
		      SELECT COUNT(TRIP_ID) FROM TRUCK_TRIP WHERE CLOSED = 'N' AND CURR_LOC IN('TPA') 
		        AND (ARR_TIME + ((SELECT RULE_VALUE FROM CMSRULES RUL WHERE RUL.RULE_CODE = 'TCS_TRUCK_PARK_SLA') / 24 / 60)) < SYSDATE
		    ) trucksFailSla,
		    (
		      SELECT COUNT(TRIP_ID) FROM TRUCK_TRIP WHERE CLOSED = 'N' AND CURR_LOC IN('TPA') 
	          	AND (ARR_TIME + (
	          	((SELECT RULE_VALUE FROM CMSRULES RUL WHERE RUL.RULE_CODE = 'TCS_TRUCK_PARK_SLA') 
	            	- (SELECT RULE_VALUE FROM CMSRULES RUL WHERE RUL.RULE_CODE = 'TCS_TRUCK_PARK_DEADLINE'))
	            	/ 24 / 60
	          	)) <= SYSDATE 
	          	AND (ARR_TIME + ((SELECT RULE_VALUE FROM CMSRULES RUL WHERE RUL.RULE_CODE = 'TCS_TRUCK_PARK_SLA') / 24 / 60)) >= SYSDATE
		    ) trucksCloseToDeadline
			FROM DUAL
		]]>
	</select>
	<select id="sqlGetTCSHHTFindTruckInPark" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT NVL(TRUCK_NO, 'UNKNOWN') truckNo, PURP.CODE_DESC incomingPurpose, 
			FLOOR((SYSDATE - ARR_TIME) * 24 * 60) waitTime, TRUCK_QUEUE_IND status
			FROM TRUCK_TRIP TRIP
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE CLOSED = 'N' AND CURR_LOC IN('TPA')
			ORDER BY 2, 4, 1
		]]>
	</select>
	<select id="sqlGetTCSHHTFindTruckInQ" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT TRUCK_NO truckNo, PURP.CODE_DESC incomingPurpose, 
			FLOOR((SYSDATE - ARR_TIME) * 24 * 60) waitTime, TRUCK_QUEUE_IND status
			FROM TRUCK_TRIP TRIP
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE CLOSED = 'N' AND CURR_LOC IN('TPA') AND TRUCK_QUEUE_IND = 'Y'
			ORDER BY 2, 1
		]]>
	</select>
	<select id="sqlGetTCSHHTFindTruckWithDockAlloc" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT TRIP.TRUCK_NO truckNo, PURP.CODE_DESC incomingPurpose, 
			FLOOR((SYSDATE - ARR_TIME) * 24 * 60) waitTime, TRUCK_QUEUE_IND status
			FROM TRUCK_TRIP TRIP
			JOIN TCS_DOCK_ALLOCATION ALLOC
			ON TRIP.TRIP_ID = ALLOC.TRIP_ID
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE CLOSED = 'N' AND CURR_LOC IN('TPA') AND TRIP.TRUCK_DOCK IS NOT NULL
			ORDER BY 2, 4, 1
		]]>
	</select>
	<select id="sqlGetTCSHHTFindTruckUnknown" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT NVL(TRUCK_NO, 'UNKNOWN') truckNo, CODE_DESC incomingPurpose, 
			FLOOR((SYSDATE - ARR_TIME) * 24 * 60) waitTime, TRUCK_QUEUE_IND status
			FROM (
			  SELECT (
			    SELECT IPASS_NO FROM TCS_IPASS_MASTER IPASS
			    WHERE TRUCK_NO = TRIP.TRUCK_NO
			  ) IPASS_NO, TRIP_ID, TRUCK_NO, PURPOSE, ARR_TIME, TRUCK_QUEUE_IND, PURP.CODE_DESC
			  FROM TRUCK_TRIP TRIP
			  LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			  ON TRIP.PURPOSE = PURP.CODE
			  WHERE CLOSED = 'N' AND CURR_LOC IN('TPA')
			) 
			WHERE IPASS_NO IS NULL
			ORDER BY 2, 4, 1
		]]>
	</select>
	<select id="sqlGetTCSHHTFindTruckCloseToDeadline"
		parameterClass="java.lang.String" resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT NVL(TRUCK_NO, 'UNKNOWN') truckNo, PURP.CODE_DESC incomingPurpose, 
			FLOOR((SYSDATE - ARR_TIME) * 24 * 60) waitTime, TRUCK_QUEUE_IND status
			FROM TRUCK_TRIP TRIP
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE CLOSED = 'N' AND CURR_LOC IN('TPA')
          	AND (ARR_TIME + (
          	((SELECT RULE_VALUE FROM CMSRULES RUL WHERE RUL.RULE_CODE = 'TCS_TRUCK_PARK_SLA') 
            	- (SELECT RULE_VALUE FROM CMSRULES RUL WHERE RUL.RULE_CODE = 'TCS_TRUCK_PARK_DEADLINE'))
            	/ 24 / 60
          	)) <= SYSDATE 
          	AND (ARR_TIME + ((SELECT RULE_VALUE FROM CMSRULES RUL WHERE RUL.RULE_CODE = 'TCS_TRUCK_PARK_SLA') / 24 / 60)) >= SYSDATE	
          	ORDER BY 2, 4, 1	
		]]>
	</select>
	<select id="sqlGetTCSHHTFindTruckFailSLA" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT NVL(TRUCK_NO, 'UNKNOWN') truckNo, PURP.CODE_DESC incomingPurpose, 
			FLOOR((SYSDATE - ARR_TIME) * 24 * 60) waitTime, TRUCK_QUEUE_IND status
			FROM TRUCK_TRIP TRIP
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE CLOSED = 'N' AND CURR_LOC IN('TPA')
			AND (ARR_TIME + ((SELECT RULE_VALUE FROM CMSRULES RUL WHERE RUL.RULE_CODE = 'TCS_TRUCK_PARK_SLA') / 24 / 60)) < SYSDATE
			ORDER BY 2, 4, 1
		]]>
	</select>
	<!-- Truck Park Monitoring (SHC) -->
	<select id="sqlGetTCSHHTFindTruckSHC" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSTrafficBO">
		<![CDATA[
			SELECT TRIP.TRUCK_NO truckNo, TO_CHAR(TRIP.ARR_TIME, 'DDMONYY HH24:MI') arriveTime,
			FLOOR((SYSDATE - TRIP.ARR_TIME) * 24 * 60) waitTime
			FROM TRUCK_TRIP TRIP
			JOIN TCS_IPASS_MASTER IPASS
			ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
			JOIN CUST_COMPANY CUST
			ON IPASS.CUST_NO = CUST.CODE AND CUST.ACTIVE = 'Y'
			WHERE TRIP.CLOSED = 'N' AND TRIP.CURR_LOC IN('TPA') AND UPPER(CUST.CODE_DESC) = UPPER(#PARAM#) AND TRIP.PURPOSE = 'SHC'
		]]>
	</select>
	<!-- -->
	<!-- HHT (END) -->
	<!-- -->
	<!-- -->
	<!-- CHARGES (BEGIN) -->
	<!-- -->
	<!-- Charge Common -->
	<select id="sqlGetTCSChargeUnitPrice" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT NVL(PKG_CALCULATE.GET_UNIT_PRICE(#PARAM#, NULL), 0) CHARGE FROM DUAL
		]]>
	</select>
	<insert id="sqlInsertTCSChargeDtl" parameterClass="cargo.cms.tcs.bo.TCSChargeBO">
		<![CDATA[
			INSERT INTO BILL_CHARGE_DTL
			  (
			    TR_NO,
			    CUST_NO, TRUCK_NO, TRIP_ID,
			    ITM_CODE, STATUS, ITM_DESC, QTY, UNIT_PRICE,
			    CHRG_AMT, CALC_CHRG, WAVR_IND, NET_AMT, WAVR_DONE, WAVR_AMT, WAVR_RMK,
			    REMARKS,
			    REV_IND, STD_IND, CASH_IND, WAVR_USER_ID, WAVR_DATE,
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    BILL_CHARGE_DTL_SEQ.NEXTVAL,
			    #custNo#, UPPER(#truckNo#), #tripId#, 
			    #itemCode#, #status#, #itemDesc#, #quantity#, #unitPrice#,
			    #chargeAmount#, #calcCharge#, #waiveFlag#, #netAmount#, #waiverDone#, #waiverAmt#, #waiverRmk#,
			    #remarks#,
			    (SELECT MAX(REV_IND) FROM BILL_ITM_MASTER WHERE ITM_CODE = #itemCode#),  
			    (SELECT MAX(STD_IND) FROM BILL_ITM_MASTER WHERE ITM_CODE = #itemCode#), 
			    (SELECT MAX(CASH_IND) FROM BILL_ITM_MASTER WHERE ITM_CODE = #itemCode#), 
			    #waiveBy#, TO_DATE(#waiveTime#, 'DDMONYY HH24:MI'),
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertTCSChargeDtlCommon" parameterClass="cargo.cms.common.tcs.bo.ChargeBO">
		<![CDATA[
			INSERT INTO BILL_CHARGE_DTL
			  (
			    TR_NO,
			    CUST_NO, TRUCK_NO, TRIP_ID,
			    ITM_CODE, STATUS, ITM_DESC, QTY, UNIT_PRICE,
			    CHRG_AMT, CALC_CHRG, WAVR_IND, NET_AMT, WAVR_DONE, WAVR_AMT, WAVR_RMK,
			    REMARKS,
			    REV_IND, STD_IND, CASH_IND, WAVR_USER_ID, WAVR_DATE,
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    BILL_CHARGE_DTL_SEQ.NEXTVAL,
			    #custNo#, UPPER(#truckNo#), #tripId#, 
			    #itemCode#, #status#, #itemDesc#, #quantity#, #unitPrice#,
			    #chargeAmount#, #calcCharge#, #waiveFlag#, #netAmount#, #waiverDone#, #waiverAmt#, #waiverRmk#,
			    #remarks#,
			    (SELECT MAX(REV_IND) FROM BILL_ITM_MASTER WHERE ITM_CODE = #itemCode#),  
			    (SELECT MAX(STD_IND) FROM BILL_ITM_MASTER WHERE ITM_CODE = #itemCode#), 
			    (SELECT MAX(CASH_IND) FROM BILL_ITM_MASTER WHERE ITM_CODE = #itemCode#), 
			    #waiveBy#, TO_DATE(#waiveTime#, 'DDMONYY HH24:MI'),
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		]]>
	</insert>
	<insert id="sqlInsertTCSWaiveChargeDtl" parameterClass="cargo.cms.tcs.bo.TCSChargeBO">
		<![CDATA[
			INSERT INTO BILL_WAIVE_CHARGE
			  (
			    TR_NO, ITM_CODE,
			    WAVR_AMT, WAVR_RMK,
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    BILL_WAIVE_CHARGE_SEQ.NEXTVAL, #itemCode#,
			    #waiverAmt#, #waiverRmk#,
			    #crUserId#, SYSDATE, #lmUserId#, SYSDATE
			  )
		 ]]>
	</insert>
	<!-- Create Parking Charge -->
	<select id="sqlGetTCSCreateParkChargeInfo" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSChargeBO">
		<![CDATA[
			SELECT TRIP.TRUCK_NO truckNo, TRIP.TRIP_ID tripId, TO_CHAR(ARR_TIME, 'DDMONYY HH24:MI') truckEntryTime,
			PURP.CODE_DESC incomingPurpose, TO_CHAR(EVENT.DECL_PURPOSE_TIME, 'DDMONYY HH24:MI') declIncomingPurposeTime,
			IPASS.IPASS_NO ipassNo, NVL(IPASS.DOCKET_NO, TRIP.DOCKET_NO) docketNo, IPASS.CUST_NO custNo, TRIP.PURPOSE purpose,
			ROUND((SELECT NVL(SUM(CALC_CHRG), 0) TOTAL FROM BILL_CHARGE_DTL WHERE ITM_CODE = 'PARKCHRG' AND TRUCK_NO = TRIP.TRUCK_NO AND TRIP_ID = TRIP.TRIP_ID), 2) chargeAmount,
			ROUND((SELECT NVL(SUM(NET_AMT), 0) TOTAL FROM BILL_CHARGE_DTL WHERE ITM_CODE = 'PARKCHRG' AND STATUS = 'PENDING' AND TRUCK_NO = TRIP.TRUCK_NO AND TRIP_ID = TRIP.TRIP_ID), 2) netAmount,
			FLOOR((NVL(EVENT.LEAVE_TRUCKPARK_TIME, SYSDATE) - EVENT.TRUCK_PARK_ENTRY_TIME) * 24) || ':' || 
					TRIM(TO_CHAR((FLOOR((NVL(EVENT.LEAVE_TRUCKPARK_TIME, SYSDATE) - EVENT.TRUCK_PARK_ENTRY_TIME) * 24 * 60) - (FLOOR((NVL(EVENT.LEAVE_TRUCKPARK_TIME, SYSDATE) - EVENT.TRUCK_PARK_ENTRY_TIME) * 24) * 60)), '00')) parkingDuration,
			DECODE((SELECT COUNT(TRUCK_NO) FROM TCS_BAN_TRUCK WHERE TRUCK_NO = TRIP.TRUCK_NO AND STATUS IN('BANNED', 'ONETIME') AND 
					BAN_FROM <= SYSDATE AND BAN_TO >= TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY'), 'DDMONYY')), 0, 'N', 'Y') banned
			FROM
			TRUCK_TRIP TRIP
			LEFT OUTER JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			LEFT OUTER JOIN (
			  SELECT IPASS_NO, IPASS.TRUCK_NO, DOCKET_NO, IPASS.CUST_NO, IPASS.CONTACT_NO
			  FROM TCS_IPASS_MASTER IPASS
			  JOIN (
			    SELECT MAX(CR_DATE) CR_DATE, TRUCK_NO
			    FROM TCS_IPASS_MASTER IPASS
			    WHERE IPASS.STATUS IN ('ACTIVE', 'INACTIVE')
			    GROUP BY TRUCK_NO
			  ) GRP
			  ON IPASS.TRUCK_NO = GRP.TRUCK_NO AND IPASS.CR_DATE = GRP.CR_DATE
			  WHERE
			  IPASS.STATUS IN ('ACTIVE', 'INACTIVE')
			) IPASS
			ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE
			CLOSED = 'N' AND TRIP.TRIP_ID = #PARAM#
		]]>
	</select>
	<!-- -->
	<!-- CHARGES (END) -->
	<!-- -->
	<!-- Use case SQL Statements (End) -->
	<!-- -->
	<!-- -->
	<!-- TCS Interface Implementation SQL Statements (BEGIN) -->
	<!-- -->
	<!-- TCS-IPC -->
	<!-- -->
	<!-- TDA Algorithm (Booking) -->
	<select id="sqlGetTCSFindAssignCompletedSRFs" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSBookingBO">
		<![CDATA[
			SELECT TRUCK.SRF_NO srfNo 
			FROM IMP_TRUCK_SRF TRUCK
			JOIN IMP_SRF SRF
			ON TRUCK.SRF_NO = SRF.SRF_NO AND SRF.STATUS = 'ISSUED' 
			WHERE TRUCK.ASSG_COMP = 'Y' AND TRUCK.TRIP_ID = #PARAM#
			ORDER BY TRUCK.SRF_NO
		]]>
	</select>
	<select id="sqlGetTCSFindImportBookingNos" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			WITH BKG AS (
			  SELECT BOOKING_NO,
			    TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + (1 / 24 / 60) FROM_DATE,
			    TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI') + ((EXP_DURATION - 1) / 24 / 60) TO_DATE,
			    (
			    	TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI')
			    ) - (
			      SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'BKG_TRUCK_ARRIVAL_BEFORE_MIN'
			    )/24/60 AS TRUCK_BEFORE_TIME,
			    (
			    	TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(BKG_SLOT_FROM, '0000')), 'DDMONYY HH24MI')
			    ) + (15 + NVL((
			      SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'BKG_TRUCK_ARRIVAL_AFTER_MIN'
			    ), 0))/24/60 AS TRUCK_AFTER_TIME
			  FROM IMP_BOOKING BKG
			  WHERE BKG.STATUS <> 'CANCEL' AND BKG.BKG_SLOT_DATE > SYSDATE - 1 AND BKG.SRF_ISSUED = 'N' AND
			  #PARAM# IN(TRUCK1, TRUCK2, TRUCK3, TRUCK4, TRUCK5, TRUCK6)
			)
			SELECT BKG.BOOKING_NO FROM BKG
			WHERE SYSDATE BETWEEN TRUCK_BEFORE_TIME AND TRUCK_AFTER_TIME
		]]>
	</select>
	<select id="sqlGetTCSFindImportBookingRefNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT POOL_ID FROM IMP_BOOKING BKG	WHERE BOOKING_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSFindExportBookingRefNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT POOL_ID FROM EXP_BOOKING BKG	WHERE BOOKING_NO = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSIPCDefaultPurposeAllocDuration"
		parameterClass="java.lang.String" resultClass="java.lang.Integer">
		<![CDATA[
			SELECT NVL(ALLOCATION_DURATION, 0) FROM MAST_TCS_INCOMING_PURPOSE WHERE CODE = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSFindExportPurposeData" parameterClass="list"
		resultClass="cargo.cms.common.tcs.bo.BookingPurposeBO">
		<![CDATA[
			SELECT 
			  awbNo, bulk, weight, dg, per, oddSize,
			  CASE 
			  WHEN dg = 'Y' THEN (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'DG')
			  WHEN per = 'Y' THEN (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'PER')
			  WHEN oddSize = 'Y' THEN (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'ODD_SIZE')
			  ELSE (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'GEN')
			  END wtFactor
			FROM (
			  SELECT NVL(RCL.AWB_NO, RCL.ULD_KEY) awbNo, 
			  DECODE(RCL.PPK_TYPE, 'B', 'Y', 'N') bulk,
			  RCL.TTL_WT weight,
			  DECODE((
			    SELECT COUNT(SPL.SPL_TYPE)
			    FROM CUST_AIRL_SPL_CODE SPL
			    WHERE SPL.CARR_CODE = RCL.CARR_CODE AND SPL.SPL_TYPE = 'SPL_DANG' AND SPL.SPL_CODE = (
			      SELECT 
			      MAX(SHC.CODE)
			      FROM MAST_SPL_HAND_CODE SHC
			      WHERE SHC.CODE IN (
			        RCL.SPL_CODE1, RCL.SPL_CODE2, RCL.SPL_CODE3
			      ) AND SHC.PRIORITY = (
			        SELECT 
			        MAX(SHC.PRIORITY)
			        FROM MAST_SPL_HAND_CODE SHC
			        WHERE SHC.CODE IN (
			          RCL.SPL_CODE1, RCL.SPL_CODE2, RCL.SPL_CODE3
			        )
			      )
			    )
			  ), 0, 'N', 'Y') dg,
			  DECODE((
			    SELECT COUNT(SPL.SPL_TYPE)
			    FROM CUST_AIRL_SPL_CODE SPL
			    WHERE SPL.CARR_CODE = RCL.CARR_CODE AND SPL.SPL_TYPE = 'SPL_PER' AND SPL.SPL_CODE = (
			      SELECT 
			      MAX(SHC.CODE)
			      FROM MAST_SPL_HAND_CODE SHC
			      WHERE SHC.CODE IN (
			        RCL.SPL_CODE1, RCL.SPL_CODE2, RCL.SPL_CODE3
			      ) AND SHC.PRIORITY = (
			        SELECT 
			        MAX(SHC.PRIORITY)
			        FROM MAST_SPL_HAND_CODE SHC
			        WHERE SHC.CODE IN (
			          RCL.SPL_CODE1, RCL.SPL_CODE2, RCL.SPL_CODE3
			        )
			      )
			    )
			  ), 0, 'N', 'Y') per,
			  DECODE((
			    SELECT COUNT(SPL.SPL_TYPE)
			    FROM CUST_AIRL_SPL_CODE SPL
			    WHERE SPL.CARR_CODE = RCL.CARR_CODE AND SPL.SPL_TYPE = 'SPL_ODD_SIZ' AND SPL.SPL_CODE = (
			      SELECT 
			      MAX(SHC.CODE)
			      FROM MAST_SPL_HAND_CODE SHC
			      WHERE SHC.CODE IN (
			        RCL.SPL_CODE1, RCL.SPL_CODE2, RCL.SPL_CODE3
			      ) AND SHC.PRIORITY = (
			        SELECT 
			        MAX(SHC.PRIORITY)
			        FROM MAST_SPL_HAND_CODE SHC
			        WHERE SHC.CODE IN (
			          RCL.SPL_CODE1, RCL.SPL_CODE2, RCL.SPL_CODE3
			        )
			      )
			    )
			  ), 0, 'N', 'Y') oddSize
			  FROM EXP_PRE_RCL_HD RCL
			  WHERE
			  RCL.PRE_RCL_NO IN
		]]>
		<iterate open="(" close=")" conjunction=",">
			#[]#
		</iterate>
		<![CDATA[
			)
		]]>
	</select>
	<select id="sqlGetTCSFindImportPurposeData" parameterClass="list"
		resultClass="cargo.cms.common.tcs.bo.BookingPurposeBO">
		<![CDATA[
			SELECT 
			  awbNo, bulk, weight, dg, per, oddSize, constraints, uld20ft, imr,
			  CASE 
			  WHEN dg = 'Y' THEN (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'DG')
			  WHEN per = 'Y' THEN (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'PER')
			  WHEN oddSize = 'Y' THEN (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'ODD_SIZE')
			  ELSE (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'GEN')
			  END wtFactor,
			  CASE 
			  WHEN dg = 'Y' THEN (SELECT DURATION FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'DG')
			  WHEN per = 'Y' THEN (SELECT DURATION FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'PER')
			  WHEN oddSize = 'Y' THEN (SELECT DURATION FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'ODD_SIZE')
			  ELSE (SELECT DURATION FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'GEN')
			  END wtDuration, (
				SELECT MIN(LOC_LEVEL) FROM
				MAST_WH_LOC 
				WHERE WH_GROUP IN (
  					SELECT WH_GROUP FROM MAST_WH_GROUP GRP WHERE GRP.WH_TYPE = 'FG'
				) AND CODE IN(
					SELECT LOC_CODE FROM AWB_INVENTORY
					WHERE
	        		AWB_NO = AWB.AWBNO AND AWB_DATE = TO_DATE(AWB.AWBDATE, 'DDMONYY') AND 
	        		FLT_KEY = AWB.FLTKEY AND FLT_DATE = TO_DATE(AWB.FLTDATE, 'DDMONYY') AND
	        		LOCN_WT = (
					    SELECT MAX(LOCN_WT) FROM AWB_INVENTORY 
					    WHERE
		        		AWB_NO = AWB.AWBNO AND AWB_DATE = TO_DATE(AWB.AWBDATE, 'DDMONYY') AND 
		        		FLT_KEY = AWB.FLTKEY AND FLT_DATE = TO_DATE(AWB.FLTDATE, 'DDMONYY')
					)
				)  
			  ) preferredLevel			  
			FROM (
			  SELECT CAR.AWB_NO awbNo, 
			  DECODE(CAR.PPK_TYPE, 'B', 'Y', 'N') bulk,
			  (
			    SELECT SUM(MANIFEST_WT) FROM IMP_CAR_SHP SHP
			    WHERE SHP.AWB_NO = CAR.AWB_NO AND SHP.AWB_DATE = CAR.AWB_DATE 
			       AND SHP.FLT_KEY = SHPFLT.FLT_KEY AND SHP.FLT_DATE = SHPFLT.FLT_DATE
			  ) weight,
			  (
			    SELECT DECODE(COUNT(SHP.AWB_NO), 0, 'N', 'Y') IMR FROM IMP_CAR_SHP SHP
			    WHERE SHP.AWB_NO = CAR.AWB_NO AND SHP.FLT_DATE = SHPFLT.FLT_DATE AND SHP.IMX_RQS = 'Y'
			    AND SHP.FLT_KEY = SHPFLT.FLT_KEY AND SHP.FLT_DATE = SHPFLT.FLT_DATE
			  ) imr,
			  (
			    SELECT DECODE(COUNT(CC.AWB_NO), 0, 'N', 'Y') CONSTRAINTS
			    FROM V_CST_IMP_CC_CODE_AWB CC
			    JOIN MAST_CONSTRAINT_CODE MST
			    ON CC.CC_CODE = MST.CODE
			    WHERE CC.AWB_NO = CAR.AWB_NO AND MST.CONSTRAINT = 'Y'
			    AND CC.FLT_KEY = SHPFLT.FLT_KEY AND CC.FLT_DATE = SHPFLT.FLT_DATE
			  ) constraints,
			  (
			    SELECT DECODE(COUNT(AWB.AWB_NO), 0, 'N', 'Y')
			    FROM AWB_INVENTORY AWB
			    JOIN ULD_INVENTORY ULD ON AWB.ULD_KEY = ULD.ULD_KEY
			    JOIN MAST_ULD_TYPE ULDTYP ON ULD.ULD_TYPE = ULDTYP.CODE
			    JOIN ULD_GROUP_TYPE ULDGRPTYP ON ULDTYP.CODE = ULDGRPTYP.ULD_TYPE
			    JOIN MAST_ULD_GROUP ULDGRP ON ULDGRPTYP.ULD_GROUP = ULDGRP.ULD_GROUP
			    WHERE AWB.AWB_NO = CAR.AWB_NO AND ULDGRP.PLT_CNT_SIZE = '20 ft'
			    AND AWB.FLT_KEY = SHPFLT.FLT_KEY AND AWB.FLT_DATE = SHPFLT.FLT_DATE
			  ) uld20Ft,        
			  DECODE((
			    SELECT COUNT(SPL.SPL_TYPE)
			    FROM CUST_AIRL_SPL_CODE SPL
			    WHERE SPL.CARR_CODE = AWB.CARR_CODE AND SPL.SPL_TYPE = 'SPL_DANG' AND SPL.SPL_CODE = (
			      SELECT 
			      MAX(SHC.CODE)
			      FROM MAST_SPL_HAND_CODE SHC
			      WHERE SHC.CODE IN (
			        CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3
			      ) AND SHC.PRIORITY = (
			        SELECT 
			        MAX(SHC.PRIORITY)
			        FROM MAST_SPL_HAND_CODE SHC
			        WHERE SHC.CODE IN (
			          CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3
			        )
			      )
			    )
			  ), 0, 'N', 'Y') dg,
			  DECODE((
			    SELECT COUNT(SPL.SPL_TYPE)
			    FROM CUST_AIRL_SPL_CODE SPL
			    WHERE SPL.CARR_CODE = AWB.CARR_CODE AND SPL.SPL_TYPE = 'SPL_PER' AND SPL.SPL_CODE = (
			      SELECT 
			      MAX(SHC.CODE)
			      FROM MAST_SPL_HAND_CODE SHC
			      WHERE SHC.CODE IN (
			        CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3
			      ) AND SHC.PRIORITY = (
			        SELECT 
			        MAX(SHC.PRIORITY)
			        FROM MAST_SPL_HAND_CODE SHC
			        WHERE SHC.CODE IN (
			          CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3
			        )
			      )
			    )
			  ), 0, 'N', 'Y') per,
			  DECODE((
			    SELECT COUNT(SPL.SPL_TYPE)
			    FROM CUST_AIRL_SPL_CODE SPL
			    WHERE SPL.CARR_CODE = AWB.CARR_CODE AND SPL.SPL_TYPE = 'SPL_ODD_SIZ' AND SPL.SPL_CODE = (
			      SELECT 
			      MAX(SHC.CODE)
			      FROM MAST_SPL_HAND_CODE SHC
			      WHERE SHC.CODE IN (
			        CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3
			      ) AND SHC.PRIORITY = (
			        SELECT 
			        MAX(SHC.PRIORITY)
			        FROM MAST_SPL_HAND_CODE SHC
			        WHERE SHC.CODE IN (
			          CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3
			        )
			      )
			    )
			  ), 0, 'N', 'Y') oddSize,
			  TO_CHAR(SHPFLT.AWB_DATE, 'DDMONYY') awbDate, SHPFLT.FLT_KEY fltKey, TO_CHAR(SHPFLT.FLT_DATE, 'DDMONYY') fltDate
			  FROM IMP_CAR_AWB CAR
			  JOIN IMP_CAR_SHP SHPFLT
			  ON SHPFLT.AWB_NO = CAR.AWB_NO AND SHPFLT.AWB_DATE = CAR.AWB_DATE
			  JOIN AWB AWB
			  ON CAR.AWB_NO = AWB.AWB_NO AND CAR.AWB_DATE = AWB.AWB_DATE 
			  WHERE
			  CAR.AWB_NO IN
		]]>
		<iterate open="(" close=")" conjunction=",">
			#[]#
		</iterate>
		<![CDATA[		    
			) AWB
		]]>
	</select>
	<select id="sqlGetTCSFindCompletedSRFAWBList" parameterClass="java.lang.String"
		resultClass="cargo.cms.common.tcs.bo.BookingPurposeBO">
		<![CDATA[
			SELECT
			  awbNo, awbDate, fltKey, fltDate, weight, bulk, imr, constraints, uld20Ft, dg, per, oddSize,
			  CASE 
			  WHEN dg = 'Y' THEN (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'DG')
			  WHEN per = 'Y' THEN (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'PER')
			  WHEN oddSize = 'Y' THEN (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'ODD_SIZE')
			  ELSE (SELECT WT_FACTOR FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'GEN')
			  END wtFactor,
			  CASE 
			  WHEN dg = 'Y' THEN (SELECT DURATION FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'DG')
			  WHEN per = 'Y' THEN (SELECT DURATION FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'PER')
			  WHEN oddSize = 'Y' THEN (SELECT DURATION FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'ODD_SIZE')
			  ELSE (SELECT DURATION FROM MAST_TCS_CARGO_TYPE WHERE CODE = 'GEN')
			  END wtDuration, (
				SELECT MIN(LOC_LEVEL) FROM
				MAST_WH_LOC 
				WHERE WH_GROUP IN (
  					SELECT WH_GROUP FROM MAST_WH_GROUP GRP WHERE GRP.WH_TYPE = 'FG'
				) AND CODE IN(
					SELECT LOC_CODE FROM AWB_INVENTORY
					WHERE
	        		AWB_NO = AWB.AWBNO AND AWB_DATE = TO_DATE(AWB.AWBDATE, 'DDMONYY') AND 
	        		FLT_KEY = AWB.FLTKEY AND FLT_DATE = TO_DATE(AWB.FLTDATE, 'DDMONYY') AND
	        		LOCN_WT = (
					    SELECT MAX(LOCN_WT) FROM AWB_INVENTORY 
					    WHERE
		        		AWB_NO = AWB.AWBNO AND AWB_DATE = TO_DATE(AWB.AWBDATE, 'DDMONYY') AND 
		        		FLT_KEY = AWB.FLTKEY AND FLT_DATE = TO_DATE(AWB.FLTDATE, 'DDMONYY')
					)
				)  
			  ) preferredLevel
			FROM (
			  SELECT DISTINCT
			  (
			    SELECT DECODE(COUNT(SHP.AWB_NO), 0, 'N', 'Y') BULK_YN FROM IMP_CAR_SHP SHP
			    WHERE SHP.AWB_NO = SRF.AWB_NO AND SHP.FLT_DATE = FLT.FLT_DATE AND SHP.BULK_PCS > 0
			  ) bulk,
			  (
			    SELECT SUM(MANIFEST_WT) FROM IMP_CAR_SHP SHP
			    WHERE SHP.AWB_NO = SRF.AWB_NO AND SHP.FLT_KEY = FLT.FLT_KEY AND SHP.FLT_DATE = FLT.FLT_DATE
			  ) weight,  			  
			  (
			    SELECT DECODE(COUNT(SHP.AWB_NO), 0, 'N', 'Y') IMR FROM IMP_CAR_SHP SHP
			    WHERE SHP.AWB_NO = SRF.AWB_NO AND SHP.IMX_RQS = 'Y'
			    AND SHP.FLT_KEY = FLT.FLT_KEY AND SHP.FLT_DATE = FLT.FLT_DATE
			  ) imr,
			  (
			    SELECT DECODE(COUNT(CC.AWB_NO), 0, 'N', 'Y') CONSTRAINTS
			    FROM V_CST_IMP_CC_CODE_AWB CC
			    JOIN MAST_CONSTRAINT_CODE MST
			    ON CC.CC_CODE = MST.CODE
			    WHERE CC.AWB_NO = SRF.AWB_NO AND MST.CONSTRAINT = 'Y'
			    AND CC.FLT_KEY = FLT.FLT_KEY AND CC.FLT_DATE = FLT.FLT_DATE
			  ) constraints,
			  (
			    SELECT DECODE(COUNT(AWB.AWB_NO), 0, 'N', 'Y')
			    FROM AWB_INVENTORY AWB
			    JOIN ULD_INVENTORY ULD ON AWB.ULD_KEY = ULD.ULD_KEY
			    JOIN MAST_ULD_TYPE ULDTYP ON ULD.ULD_TYPE = ULDTYP.CODE
			    JOIN ULD_GROUP_TYPE ULDGRPTYP ON ULDTYP.CODE = ULDGRPTYP.ULD_TYPE
			    JOIN MAST_ULD_GROUP ULDGRP ON ULDGRPTYP.ULD_GROUP = ULDGRP.ULD_GROUP
			    WHERE AWB.AWB_NO = SRF.AWB_NO AND ULDGRP.PLT_CNT_SIZE = '20 ft'
			    AND AWB.FLT_KEY = FLT.FLT_KEY AND AWB.FLT_DATE = FLT.FLT_DATE
			  ) uld20Ft,
			  DECODE((
			    SELECT
			    (
			      SELECT COUNT(SPL.SPL_TYPE)
			      FROM CUST_AIRL_SPL_CODE SPL
			      WHERE SPL.CARR_CODE = AWB.CARR_CODE AND SPL.SPL_TYPE = 'SPL_DANG' AND SPL.SPL_CODE = (
			        SELECT 
			        MAX(SHC.CODE)
			        FROM MAST_SPL_HAND_CODE SHC
			        WHERE SHC.CODE IN (
			          CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3, 
			          CAR.SPL_CODE4, CAR.SPL_CODE5, CAR.SPL_CODE6, 
			          CAR.SPL_CODE7, CAR.SPL_CODE8, CAR.SPL_CODE9
			        ) AND SHC.PRIORITY = (
			          SELECT 
			          MAX(SHC.PRIORITY)
			          FROM MAST_SPL_HAND_CODE SHC
			          WHERE SHC.CODE IN (
			            CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3, 
			            CAR.SPL_CODE4, CAR.SPL_CODE5, CAR.SPL_CODE6, 
			            CAR.SPL_CODE7, CAR.SPL_CODE8, CAR.SPL_CODE9
			          )
			        )
			      )
			    )
			    FROM IMP_CAR_AWB CAR
			    JOIN AWB AWB
			    ON CAR.AWB_NO = AWB.AWB_NO AND CAR.AWB_DATE = AWB.AWB_DATE
			    WHERE
			    CAR.AWB_NO = SRF.AWB_NO AND CAR.AWB_DATE = SRF.AWB_DATE
			  ), 0, 'N', 'Y') dg,
			  DECODE((
			    SELECT
			    (
			      SELECT COUNT(SPL.SPL_TYPE)
			      FROM CUST_AIRL_SPL_CODE SPL
			      WHERE SPL.CARR_CODE = AWB.CARR_CODE AND SPL.SPL_TYPE = 'SPL_PER' AND SPL.SPL_CODE = (
			        SELECT 
			        MAX(SHC.CODE)
			        FROM MAST_SPL_HAND_CODE SHC
			        WHERE SHC.CODE IN (
			          CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3, 
			          CAR.SPL_CODE4, CAR.SPL_CODE5, CAR.SPL_CODE6, 
			          CAR.SPL_CODE7, CAR.SPL_CODE8, CAR.SPL_CODE9
			        ) AND SHC.PRIORITY = (
			          SELECT 
			          MAX(SHC.PRIORITY)
			          FROM MAST_SPL_HAND_CODE SHC
			          WHERE SHC.CODE IN (
			            CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3, 
			            CAR.SPL_CODE4, CAR.SPL_CODE5, CAR.SPL_CODE6, 
			            CAR.SPL_CODE7, CAR.SPL_CODE8, CAR.SPL_CODE9
			          )
			        )
			      )
			    )
			    FROM IMP_CAR_AWB CAR
			    JOIN AWB AWB
			    ON CAR.AWB_NO = AWB.AWB_NO AND CAR.AWB_DATE = AWB.AWB_DATE
			    WHERE
			    CAR.AWB_NO = SRF.AWB_NO AND CAR.AWB_DATE = SRF.AWB_DATE
			  ), 0, 'N', 'Y') per,
			  DECODE((
			    SELECT
			    (
			      SELECT COUNT(SPL.SPL_TYPE)
			      FROM CUST_AIRL_SPL_CODE SPL
			      WHERE SPL.CARR_CODE = AWB.CARR_CODE AND SPL.SPL_TYPE = 'SPL_ODD_SIZ' AND SPL.SPL_CODE = (
			        SELECT 
			        MAX(SHC.CODE)
			        FROM MAST_SPL_HAND_CODE SHC
			        WHERE SHC.CODE IN (
			          CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3, 
			          CAR.SPL_CODE4, CAR.SPL_CODE5, CAR.SPL_CODE6, 
			          CAR.SPL_CODE7, CAR.SPL_CODE8, CAR.SPL_CODE9
			        ) AND SHC.PRIORITY = (
			          SELECT 
			          MAX(SHC.PRIORITY)
			          FROM MAST_SPL_HAND_CODE SHC
			          WHERE SHC.CODE IN (
			            CAR.SPL_CODE1, CAR.SPL_CODE2, CAR.SPL_CODE3, 
			            CAR.SPL_CODE4, CAR.SPL_CODE5, CAR.SPL_CODE6,
			            CAR.SPL_CODE7, CAR.SPL_CODE8, CAR.SPL_CODE9
			          )
			        )
			      )
			    )
			    FROM IMP_CAR_AWB CAR
			    JOIN AWB AWB
			    ON CAR.AWB_NO = AWB.AWB_NO AND CAR.AWB_DATE = AWB.AWB_DATE
			    WHERE
			    CAR.AWB_NO = SRF.AWB_NO AND CAR.AWB_DATE = SRF.AWB_DATE
			  ), 0, 'N', 'Y') oddSize,
			  SRF.AWB_NO awbNo, TO_CHAR(SRF.AWB_DATE, 'DDMONYY') awbDate, 
			  FLT.FLT_KEY fltKey, TO_CHAR(FLT.FLT_DATE, 'DDMONYY') fltDate
			  FROM IMP_SRF SRF
			      JOIN IMP_SRF_FLT FLT
			      ON SRF.SRF_NO = FLT.SRF_NO AND SRF.AWB_NO = FLT.AWB_NO AND SRF.AWB_DATE = FLT.AWB_DATE
			  WHERE SRF.SRF_NO IN (
			    SELECT SRF_NO FROM IMP_TRUCK_SRF WHERE TRIP_ID = #PARAM#
			  )
			) AWB
		]]>
	</select>
	<select id="sqlGetTCSCargoWeightageList" parameterClass="java.lang.String"
		resultClass="map">
		<![CDATA[
			SELECT CODE, WT_FACTOR FROM MAST_TCS_CARGO_TYPE
		]]>
	</select>
	<select id="sqlGetTCSBookedWHGroup" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT WH_GROUP FROM MAST_WH_LOC WHERE WH_GROUP IN(
			    SELECT WH_GROUP FROM MAST_WH_GROUP GRP WHERE GRP.WH_TYPE = 'TD'
			)
			AND CODE = (
			  SELECT MAX(TRUCK_DOCK) FROM TCS_DOCK_POOL_DOCK WHERE POOL_ID = (
			    SELECT POOL_ID FROM TCS_DOCK_POOL_BOOKING WHERE TR_NO = #PARAM#
			  )
			)
		]]>
	</select>
	<select id="sqlGetTCSPreferredLevel" parameterClass="java.util.Map"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT MIN(LOC_LEVEL)
			FROM MAST_WH_LOC 
			WHERE WH_GROUP IN (
  				SELECT WH_GROUP FROM MAST_WH_GROUP GRP WHERE GRP.WH_TYPE = 'FG'
			) AND CODE IN (
				SELECT LOC_CODE 
				FROM AWB_INVENTORY 
				WHERE
	       		AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY') AND 
	       		FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND
	       		LOCN_WT = (
				    SELECT MAX(LOCN_WT) FROM AWB_INVENTORY 
				    WHERE
	        		AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY') AND 
	        		FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
				)
			)
		]]>
	</select>
	<update id="sqlUpdateTCSIPCTripIPCLoc" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TRUCK_TRIP SET IPC_LOC = #LOCATION# WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>
	<select id="sqlGetTCSSuperUrgentCargoData" parameterClass="java.lang.String"
		resultClass="cargo.cms.common.tcs.bo.TCSDockResvBO">
		<![CDATA[
			SELECT TO_CHAR(EST_TIME, 'DDMONYY HH24:MI') estTime, 
			DEDICATED_TD truckDock, TRUCK truckNo
			FROM EXP_SUPER_URGENT 
			WHERE TR_NO = #PARAM# AND TR_TYPE = 'SURGC'
		]]>
	</select>
	<select id="sqlGetTCSSuperUrgentFreeDocks" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DOCK.TRUCK_DOCK
			FROM TCS_DOCK_POOL POOL
			JOIN TCS_DOCK_POOL_DOCK DOCK
			ON POOL.POOL_ID = DOCK.POOL_ID AND DOCK.FROM_DT <= SYSDATE AND SYSDATE <= DOCK.TO_DT
			JOIN TCS_DOCK_ALLOCATION ALLOC
			ON DOCK.TRUCK_DOCK = ALLOC.TRUCK_DOCK AND ALLOC.STATUS IN('FREE')
			WHERE POOL.PURPOSE_1 = 'URGENT_PPK'
		]]>
	</select>
	<select id="sqlGetTCSSuperUrgentDocks" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DOCK.TRUCK_DOCK
			FROM TCS_DOCK_POOL POOL
			JOIN TCS_DOCK_POOL_DOCK DOCK
			ON POOL.POOL_ID = DOCK.POOL_ID AND DOCK.FROM_DT <= SYSDATE AND SYSDATE <= DOCK.TO_DT
			WHERE POOL.PURPOSE_1 = 'URGENT_PPK'
		]]>
	</select>
	<select id="sqlGetTCSIsSuperUrgentTruckReserved" parameterClass="java.util.Map"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(1) 
			FROM EXP_SUPER_URGENT URG
			JOIN TCS_DOCK_RESV RESV
			ON URG.DEDICATED_TD = RESV.TRUCK_DOCK
			WHERE TR_TYPE = 'SURGC' AND TRUCK = #TRUCK_NO# AND URG.STATUS <> 'VOID' AND
			TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') BETWEEN RESV.RESV_FROM AND (RESV.RESV_TO - 1/24/60) AND
			URG.EST_TIME BETWEEN RESV.RESV_FROM AND (RESV.RESV_TO - 1/24/60)
		]]>
	</select>
	<select id="sqlGetTCSSuperUrgentTruckDock" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(URG.DEDICATED_TD) FROM EXP_SUPER_URGENT URG
			JOIN TCS_DOCK_RESV RESV
			ON URG.DEDICATED_TD = RESV.TRUCK_DOCK
			WHERE TR_TYPE = 'SURGC' AND TRUCK = #TRUCK_NO# AND URG.STATUS <> 'VOID' AND 
			TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') BETWEEN RESV.RESV_FROM AND (RESV.RESV_TO - 1/24/60) AND
			URG.EST_TIME BETWEEN RESV.RESV_FROM AND (RESV.RESV_TO - 1/24/60)
		]]>
	</select>
	<select id="sqlGetTCSIsTruckReserved" parameterClass="java.util.Map"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(1) 
			FROM TCS_DOCK_RESV RESV
			WHERE TRUCK_NO = #TRUCK_NO# AND (
				TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') BETWEEN RESV.RESV_FROM AND RESV.RESV_TO OR
				(TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') + #DURATION#/24/60) BETWEEN RESV.RESV_FROM AND RESV.RESV_TO OR
				RESV.RESV_TO BETWEEN TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') AND (TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') + #DURATION#/24/60)
			)
		]]>
	</select>
	<select id="sqlGetTCSReservationTrNo" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(TR_NO) 
			FROM TCS_DOCK_RESV RESV
			WHERE TRUCK_NO = #TRUCK_NO# AND (
				TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') BETWEEN RESV.RESV_FROM AND RESV.RESV_TO OR
				(TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') + #DURATION#/24/60) BETWEEN RESV.RESV_FROM AND RESV.RESV_TO OR
				RESV.RESV_TO BETWEEN TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') AND (TO_DATE(#EST_TIME#, 'DDMONYY HH24:MI') + #DURATION#/24/60)
			)
		]]>
	</select>
	<!-- Common -->
	<select id="sqlGetTCSIPCIsValidIPC" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(IPC), 0, 'N', 'Y') FROM MAST_TCS_CONFIG_IPC WHERE IPC = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSIPCMessage" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSNameValueBO">
		<![CDATA[
			SELECT ERR_DESC value, ERR_LCODE name
			FROM ERR_MSG 
			WHERE ERR_TYPE = 'IPC' AND ERR_CODE = #PARAM#
		]]>
	</select>
	<!-- Not Used ? -->
	<select id="sqlGetTCSIPCTruckPurpose" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT PURP.CODE_DESC purpose
			FROM TRUCK_TRIP TRIP
			LEFT OUTER JOIN MAST_TCS_INCOMING_PURPOSE PURP
			ON TRIP.PURPOSE = PURP.CODE
			WHERE TRIP.CLOSED = 'N' and TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSIPCTruckInReason" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
	    	SELECT INCOMING_REASON
	    	FROM TRUCK_TRIP TRIP 
	    	WHERE (TRIP.CLOSED = 'N' OR TRIP.TRIP_CLOSED = 'N') AND TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSIPCTruckInReasonDesc" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT REASON.CODE_DESC
			FROM TRUCK_TRIP TRIP
			LEFT OUTER JOIN MAST_CODE_DTL REASON
			ON TRIP.INCOMING_REASON = REASON.CODE AND REASON.CODE_TYPE = 'TCS_INCOMING_REASON'		
			WHERE (TRIP.CLOSED = 'N' OR TRIP.TRIP_CLOSED = 'N') AND TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSNeedToForceExit" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(TRIP.TRIP_ID), 0, 'N', 'Y') NEED_EXIT
			FROM TRUCK_TRIP TRIP
			JOIN TRUCK_TRIP_EVENTS EVT
			ON TRIP.TRIP_ID = EVT.TRIP_ID
			WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N' AND (
			  CURR_LOC IS NULL OR CURR_LOC NOT IN('TPA', 'TPX')
			) AND (
			    EVT.ALLOCATED_TILL_TIME IS NULL OR EVT.ALLOCATED_TILL_TIME < SYSDATE
			)
		]]>
	</select>
	<!-- Info! MAX(TRUCK_DOCK) is just a fix to avoid any problem related to 
		multiple dock allocation -->
	<select id="sqlGetTCSIPCAllocDock" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT MAX(ALLOC.TRUCK_DOCK)
			FROM TCS_DOCK_ALLOCATION ALLOC
			WHERE ALLOC.TRIP_ID = (
				SELECT MAX(TRIP.TRIP_ID) FROM TRUCK_TRIP TRIP 
				WHERE TRIP.CLOSED = 'N' AND TRUCK_NO = UPPER(#PARAM#)
			)
		]]>
	</select>
	<select id="sqlGetTCSIPCEntryPrinter" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			WITH TRUCK AS (
			  SELECT TRIP.TRUCK_NO, TRIP.TRIP_ID, IPASS.TRUCK_TYPE
			  FROM TRUCK_TRIP TRIP
			  JOIN TCS_IPASS_MASTER IPASS
			  ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
			  JOIN TCS_DOCK_ALLOCATION ALLOC
			  ON TRIP.TRIP_ID = ALLOC.TRIP_ID AND ALLOC.STATUS = 'ALLOCATED'
			  WHERE TRIP.CLOSED = 'N' AND TRIP.TRUCK_NO = #PARAM# AND TRIP.PRINT_VER_NO = 0
			)
			SELECT DECODE(PRINTER, 'L', 1, 'H', 2, 0) 
			FROM MAST_TCS_TRUCK_TYPE
			WHERE CODE = (
			  SELECT TRUCK_TYPE FROM TRUCK
			)			
		]]>
	</select>
	<!-- TruckAtEntryGate -->
	<!-- TruckAtTruckParkEntranceWithiPass -->
	<!-- TruckAtTruckParkEntranceWithiPass -->
	<!-- TruckAtTruckParkEntranceWithoutiPass -->
	<parameterMap class="cargo.cms.tcs.bo.TCSImageBO" id="licenseImageMap">
		<parameter property="image" jdbcType="BLOB" javaType="[B" />
		<parameter property="imageSize" jdbcType="VARCHAR" javaType="java.lang.String" />
		<parameter property="imageName" jdbcType="VARCHAR" javaType="java.lang.String" />
		<parameter property="sessionId" jdbcType="VARCHAR" javaType="java.lang.String" />
		<parameter property="imagePath" jdbcType="VARCHAR" javaType="java.lang.String" />
	</parameterMap>
	<insert id="sqlInsertTCSIPCImageStore" parameterMap="licenseImageMap">
		<![CDATA[
			INSERT INTO FW_IMAGE_STORE(
			IMG_ID,
			IMG_THUMBNAIL, IMG_SIZE, IMG_NAME, IMG_SESSION_ID, IMG_PATH, 
			IMG_UPLOAD_DATE
			)
			VALUES(
			FW_IMAGE_SEQ.NEXTVAL, 
			?, ?, ?, ?, ?, 
			CURRENT_TIMESTAMP
			)
		]]>
	</insert>
	<!-- TruckAtEntryGateWithPurpose -->
	<!-- TruckAtTruckParkEntranceWithPurpose -->
	<!-- TruckAtParkExit -->
	<select id="sqlGetTCSIsDurationExceededAfterAlloc"
		parameterClass="java.lang.String" resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(TRIP.TRIP_ID), 0, 'N', 'Y')
			FROM TRUCK_TRIP TRIP
			JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			WHERE TRIP.TRIP_ID = #PARAM# AND TRIP.INCOMING_REASON NOT IN('FOL', 'CON') AND
			(EVENT.DOCK_ALLOCATION_TIME + (NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'TCS_ALLOWED_AFTER_ALLOC'), 15) / 24 / 60)) < SYSDATE
		]]>
	</select>
	<!-- TruckAtExitGate -->
	<!-- TruckPassControlPoint -->
	<!-- GetTruckInfoForCheckPointDisplay -->
	<select id="sqlGetTCSIPCChkPtDisplayInfo" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSIFaceResponseBO">
		<![CDATA[
			WITH TRIP AS (
			  SELECT 
			  TRIP.TRUCK_NO, IPASS.IPASS_NO, 
		      CASE
		        WHEN NVL(PATH.ON_WAY_IN_OUT, 'WRONG') = 'OUT' THEN 'Exit'
		        WHEN NVL(PATH.ON_WAY_IN_OUT, 'WRONG') = 'IN' AND ALLOC.TRUCK_DOCK IS NULL THEN 'No Dock'
            	WHEN NVL(PATH.ON_WAY_IN_OUT, 'WRONG') = 'WRONG' THEN 'Wrong Direction'
		        ELSE ALLOC.TRUCK_DOCK
		      END TRUCK_DOCK,
			  TRIP.CURR_LOC, LOC.LOC_LEVEL,
			  CASE
			  	WHEN LOC.LOC_LEVEL = 2  AND TRIP.CURR_LOC IN('L3E', 'L3N', 'L3W', 'L5E', 'L5N', 'L5W', 'L7', 'L7X') THEN 'N'
			    WHEN LOC.LOC_LEVEL = 3  THEN
			    CASE
			      WHEN LOC.SENSORY_LOCATION_CODE = 'CPO3R' AND TRIP.CURR_LOC IN('L3N', 'L3W', 'L5E', 'L5N', 'L5W', 'L7', 'L7X') THEN 'N'
			      WHEN LOC.SENSORY_LOCATION_CODE = 'CPO3N' AND TRIP.CURR_LOC IN('L5E', 'L5N', 'L5W', 'L7', 'L7X') THEN 'N'
			      WHEN LOC.SENSORY_LOCATION_CODE = 'CPO3W' AND TRIP.CURR_LOC IN('L5E', 'L5N', 'L5W', 'L7', 'L7X') THEN 'N'
			      ELSE 'Y'
			    END
			  	WHEN LOC.LOC_LEVEL = 5  THEN
			    CASE
			      WHEN LOC.SENSORY_LOCATION_CODE = 'CPO5R' AND TRIP.CURR_LOC IN('L3N', 'L3W', 'L5W', 'L7', 'L7X') THEN 'N'
			      WHEN LOC.SENSORY_LOCATION_CODE = 'CPO5N' AND TRIP.CURR_LOC IN('L3N', 'L3W', 'L7', 'L7X') THEN 'N'
			      WHEN LOC.SENSORY_LOCATION_CODE = 'CPO5W' AND TRIP.CURR_LOC IN('L3N', 'L3W', 'L7', 'L7X') THEN 'N'
			      ELSE 'Y'
			    END
			  	WHEN LOC.LOC_LEVEL = 7  THEN
			    CASE
			      WHEN LOC.SENSORY_LOCATION_CODE IN('CPO7U', 'CPO7D') AND TRIP.CURR_LOC IN('L3N', 'L3W', 'L5N', 'L5W') THEN 'N'
			      ELSE 'Y'
			    END
			  ELSE 'Y'
			  END INCLUDE_IND,
			  DOCK.DOCK_LEVEL, DOCK.SIDE, PATH.DIRECTION NEWDIRECTION, LOC.SENSORY_LOCATION_CODE
			  FROM TRUCK_TRIP TRIP
			  JOIN TCS_IPASS_MASTER IPASS
			  ON TRIP.TRUCK_NO = IPASS.TRUCK_NO
			  LEFT OUTER JOIN TCS_DOCK_MASTER DOCK
			  ON TRIP.TRUCK_DOCK = DOCK.TRUCK_DOCK
			  JOIN TCS_SENSORY_LOCATION LOC
			  ON LOC.SENSORY_CODE = #PARAM#
			  LEFT OUTER JOIN TCS_SEGMENT_PATH PATH
			  ON LOC.SENSORY_LOCATION_CODE = PATH.SENSORY_LOCATION_CODE AND PATH.SEGMENT_ID = DECODE(TRIP.DOCK_SEGMENT, 'L1SR', 'L1', TRIP.DOCK_SEGMENT)
			  LEFT OUTER JOIN TCS_DOCK_ALLOCATION ALLOC
			  ON TRIP.TRUCK_DOCK = ALLOC.TRUCK_DOCK AND ALLOC.STATUS = 'ALLOCATED'
			  WHERE TRIP.CLOSED = 'N' AND TRIP.CURR_LOC NOT IN('TPA', 'TPX') AND TRIP.PURPOSE NOT IN('SHC')
			)
			SELECT TRUCK_NO truckNo, IPASS_NO ipassNo,
			CASE
			  WHEN TRUCK_DOCK = 'Wrong Direction' THEN
			    CASE
			      WHEN LOC_LEVEL = 3 THEN 'Exit'
			      WHEN LOC_LEVEL = 5 THEN 'Exit'
			      WHEN LOC_LEVEL = 7 THEN 'Wrong Direction'
			      ELSE TRUCK_DOCK
			    END        
			  ELSE TRUCK_DOCK
			END dockNo, 
			CASE 
				WHEN NEWDIRECTION IS NULL AND SENSORY_LOCATION_CODE = 'CPO2R' THEN 'R'
       			WHEN NEWDIRECTION IS NULL THEN 'S'
				ELSE NEWDIRECTION
			END direction
			FROM TRIP
			WHERE INCLUDE_IND = 'Y'
		]]>
	</select>
	<!-- TruckAtCheckPoint -->
	<select id="sqlGetTCSIPCNextDirection" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			WITH TRUCK AS (
			    SELECT DECODE(DOCK_SEGMENT, 'L1SR', 'L1', DOCK_SEGMENT)  SEGMENT_ID, 
			    SENSOR.SENSORY_LOCATION_CODE, SENSOR.LOC_LEVEL
			    FROM TRUCK_TRIP TRIP
			    LEFT OUTER JOIN TCS_SENSORY_LOCATION SENSOR
			    ON SENSOR.SENSORY_CODE = #CALLER_ID#
			    WHERE TRIP.CLOSED = 'N' AND TRIP.TRUCK_NO = #TRUCK_NO#
			),
			DIRECTION AS (
			  SELECT PATH.DIRECTION, TRUCK.SENSORY_LOCATION_CODE, TRUCK.LOC_LEVEL
			  FROM TRUCK
			  LEFT OUTER JOIN TCS_SEGMENT_PATH PATH
			  ON PATH.SEGMENT_ID = TRUCK.SEGMENT_ID AND PATH.SENSORY_LOCATION_CODE = TRUCK.SENSORY_LOCATION_CODE
			)
			SELECT
			CASE
			  WHEN DIR.DIRECTION IS NULL THEN
			    CASE 
			      WHEN DIR.LOC_LEVEL = 1 THEN 'D'
			      WHEN DIR.LOC_LEVEL = 2 THEN 'R'
			      WHEN DIR.LOC_LEVEL = 3 THEN 'S'
			      WHEN DIR.LOC_LEVEL = 5 THEN 'S'
			      WHEN DIR.LOC_LEVEL = 7 THEN 'D'
			      ELSE 'S'
			    END
			  ELSE DIR.DIRECTION
			END NEWDIRECTION
			FROM DUAL
			LEFT OUTER JOIN DIRECTION DIR
			ON DIR.LOC_LEVEL IS NOT NULL			
		]]>
	</select>
	<!-- DockOccupied -->
	<!-- DockReleased -->
	<!-- GetTPTrucksDockAllocationStatus -->
	<select id="sqlGetTCSIPCTrucksInQueue" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(TRIP_ID) FROM TRUCK_TRIP TRIP
			WHERE TRIP.CLOSED = 'N' AND TRIP.CURR_LOC IN('TPA') AND TRIP.TRUCK_QUEUE_IND = 'Y'
		]]>
	</select>
	<select id="sqlGetTCSIPCTrucksInParkPurposes" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSIFaceResponseBO">
		<![CDATA[
			WITH TRIP AS (
				SELECT 
				TRIP.TRUCK_NO, TRIP.PURPOSE, TRIP.TRUCK_DOCK,
				DOCK.DOCK_NAME
				FROM TRUCK_TRIP TRIP
				LEFT OUTER JOIN TCS_DOCK_MASTER DOCK
				ON TRIP.TRUCK_DOCK = DOCK.TRUCK_DOCK
				WHERE TRIP.CLOSED = 'N' AND TRIP.CURR_LOC IN('TPA') AND TRIP.TRUCK_QUEUE_IND = 'Y'
			)
			SELECT CODE purpose, CODE_DESC purposeDesc, (
				SELECT COUNT(TRIP_ID) FROM TRUCK_TRIP TRIP	
				WHERE TRIP.PURPOSE = PURP.CODE AND TRIP.CLOSED = 'N' AND TRIP.CURR_LOC IN('TPA') AND 
				TRIP.TRUCK_QUEUE_IND = 'Y'
			) queueSize
			FROM MAST_TCS_INCOMING_PURPOSE PURP
			WHERE CODE IN (SELECT DISTINCT PURPOSE FROM TRIP)
		]]>
	</select>
	<select id="sqlGetTCSIPCTrucksInPark" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSIFaceResponseBO">
		<![CDATA[
			SELECT 
			 TRIP.TRUCK_NO truckNo, TRIP.PURPOSE purpose, ALLOC.TRUCK_DOCK dockNo,
			 CASE 
			  WHEN DOCK.DOCK_LEVEL = 1 THEN 'G'
			  ELSE DOCK.DOCK_LEVEL 
			 END dockLevel,
			 CASE
			  WHEN ALLOC.TRUCK_DOCK IS NULL THEN NULL
			  ELSE TO_CHAR(EVENT.DOCK_ALLOCATION_TIME, 'DDMONYY HH24:MI')
			 END  dockAllocTime,
			 CASE
			  WHEN ALLOC.TRUCK_DOCK IS NOT NULL THEN NULL
			  WHEN TRIP.TRUCK_QUEUE_IND = 'Y' THEN TO_CHAR(EVENT.TRUCK_IN_QUEUE_TIME, 'DDMONYY HH24:MI')
			  ELSE NULL
			 END  truckEnqeueTime
			FROM TRUCK_TRIP TRIP
			LEFT OUTER JOIN TCS_DOCK_ALLOCATION ALLOC
			ON TRIP.TRIP_ID = ALLOC.TRIP_ID
			LEFT OUTER JOIN TCS_DOCK_MASTER DOCK
			ON ALLOC.TRUCK_DOCK = DOCK.TRUCK_DOCK
			JOIN TRUCK_TRIP_EVENTS EVENT
			ON TRIP.TRIP_ID = EVENT.TRIP_ID
			WHERE TRIP.CLOSED = 'N' AND TRIP.CURR_LOC IN('TPA') AND (
			  TRIP.TRUCK_QUEUE_IND = 'Y' OR ALLOC.TRUCK_DOCK IS NOT NULL
			)
			ORDER BY TRIP.TRUCK_NO
		]]>
	</select>
	<!-- iPass Filtering -->
	<select id="sqlGetTCSIPCiPassFiltering" parameterClass="java.util.List"
		resultClass="cargo.cms.tcs.bo.TCSIFaceResponseBO">
		<![CDATA[
			WITH VALID_IPASS AS (
				SELECT IPASS_NO, TRUCK_NO
				FROM TCS_IPASS_MASTER
				WHERE STATUS = 'ACTIVE' AND IPASS_NO IN
		]]>
		<iterate open="(" close=")" conjunction=",">
			#[]#
		</iterate>
		<![CDATA[
			)
			VALID AS (
				SELECT IPASS.IPASS_NO, IPASS.TRUCK_NO, 
				DECODE(CURR_LOC, 'TPA', '1ST', 'TPX', '1ST', '2ND') ORD1, 
				NVL2(TRIP.TRIP_ID, 'INSIDE', 'OUTSIDE') ORD2
				FROM VALID_IPASS IPASS
				LEFT OUTER JOIN TRUCK_TRIP TRIP
				ON IPASS.TRUCK_NO = TRIP.TRUCK_NO AND TRIP.TRIP_CLOSED = 'N'
				ORDER BY 3, 4 DESC
			)
     		SELECT IPASS_NO iPassNo, TRUCK_NO truckNo FROM VALID WHERE ROWNUM = 1			
		]]>
	</select>
	<!-- UpdateConfig -->
	<update id="sqlUpdateTCSIPCConfigsAsNotModified" parameterClass="java.lang.String">
		<![CDATA[
			UPDATE MAST_TCS_CONFIG_IPC SET IPC_LM_DATE = LM_DATE WHERE IPC = #PARAM#
		]]>
	</update>
	<update id="sqlUpdateTCSIPCPurposeAsNotModified" parameterClass="java.lang.String">
		<![CDATA[
			UPDATE MAST_TCS_INCOMING_PURPOSE SET IPC_LM_DATE = LM_DATE
		]]>
	</update>
	<select id="sqlGetTCSIPCIsPurposeModified" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(CODE), 0, 'N', 'Y') FROM MAST_TCS_INCOMING_PURPOSE WHERE LM_DATE <> IPC_LM_DATE
		]]>
	</select>
	<select id="sqlGetTCSIPCIsConfigModified" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(IPC), 0, 'N', 'Y') FROM MAST_TCS_CONFIG_IPC WHERE LM_DATE <> IPC_LM_DATE AND IPC = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSIPCConfigItems" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSIFaceResponseBO">
		<![CDATA[
			WITH ITEM AS (
			  SELECT 1 CODE, 'DockOccupyDetectionTime' CODE_DESC FROM DUAL
			  UNION
			  SELECT 2 CODE, 'DockReleaseDetectionTime' CODE_DESC FROM DUAL
			  UNION
			  SELECT 3 CODE, 'HeartbeatTime' CODE_DESC FROM DUAL
			  UNION
			  SELECT 4 CODE, 'TCSStatusUpdateTime' CODE_DESC FROM DUAL
			  UNION
			  SELECT 5 CODE, 'CheckPointDisplayInfoRequestTime' CODE_DESC FROM DUAL
			)
			SELECT 
			ITEM.CODE_DESC configName,
			CASE 
			  WHEN ITEM.CODE = 1 THEN CONFIG.DOCK_OCCUPY_DETECT_TIME
			  WHEN ITEM.CODE = 2 THEN CONFIG.DOCK_RELEASE_DETECT_TIME
			  WHEN ITEM.CODE = 3 THEN CONFIG.HEART_BEAT_REFRESH_TIME
			  WHEN ITEM.CODE = 4 THEN CONFIG.STATUS_UPDATE_REFRESH_TIME
			  WHEN ITEM.CODE = 5 THEN CONFIG.CPO_DISPLAY_REFRESH_TIME
			END configValue
			FROM
			MAST_TCS_CONFIG_IPC CONFIG
			LEFT OUTER JOIN ITEM
			ON ITEM.CODE IS NOT NULL
			WHERE CONFIG.IPC = #PARAM#
		]]>
	</select>
	<select id="sqlGetTCSIPCPurposeList" parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSIFaceResponseBO">
		<![CDATA[
			WITH CAT AS (
			  SELECT
			  CATEGORY,
			  CASE 
			    WHEN CATEGORY = 'EXP' THEN 1
			    WHEN CATEGORY = 'IMP' THEN 2
			    WHEN CATEGORY = 'OTH' THEN 4
			    WHEN CATEGORY = 'MISC' THEN 5
			    ELSE 3
			  END ORD
			  FROM (
			    SELECT DISTINCT CATEGORY FROM MAST_TCS_INCOMING_PURPOSE ORDER BY 1
			  )
			)
			SELECT ORD,
			PURP.CATEGORY category, PURP.CATEGORY categoryDesc, CATEGORY_ZH categoryDescZh, 
			CODE purpose, CODE_DESC purposeDesc, CODE_DESC_ZH purposeDescZh,
			APPLICABLE_AT_ENTRANCE applicableAtTME, APPLICABLE_AT_PARKING applicableAtTPE
			FROM MAST_TCS_INCOMING_PURPOSE PURP
			JOIN CAT
			ON PURP.CATEGORY = CAT.CATEGORY
			ORDER BY ORD, CODE
		]]>
	</select>
	<!-- IAmAlive -->
	<select id="sqlGetTCSIPCAlive" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT COUNT(TRIP_ID) FROM TRUCK_TRIP
		]]>
	</select>
	<!-- Record Event (Fallback) -->
	<!-- -->
	<!-- WOS IVRS -->
	<!-- -->
	<!-- NotifyCallReqStatus -->
	<select id="sqlGetTCSIPCTruckNotifyNo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT NTFY_CONTACT_NO CONTACT
			FROM TCS_IPASS_MASTER IPASS WHERE IPASS.TRUCK_NO = UPPER(#PARAM#)
		]]>
	</select>
	<select id="sqlGetTCSIPCCallRequestTripId" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT TRIP_ID FROM TRUCK_TRIP WHERE NOTIFY_REF_ID = #PARAM#
		]]>
	</select>
	<update id="sqlUpdateTCSIPCTripCallRefId" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE TRUCK_TRIP SET NOTIFY_REF_ID = #REF_ID# WHERE TRIP_ID = #TRIP_ID#
		]]>
	</update>
	<!-- TCS Interface Implementation SQL Statements (END) -->
	<!-- Dock Config -->
	<select id="sqlGetTCSDockConfig" parameterClass="java.util.Map"
		resultClass="cargo.cms.tcs.bo.TCSDockBO">
		<![CDATA[
			WITH POOL AS (
			  SELECT POOL_ID, DOCK_LEVEL, ZONE,
			  FROM_DT, TO_DT,
			  PURPOSE_1, PURPOSE_2, PURPOSE_3, PURPOSE_4, PURPOSE_5
			  FROM TCS_DOCK_POOL POOL
			  WHERE
			  FROM_DT BETWEEN (SYSDATE - ((60 * 3)/ 24 / 60)) AND (SYSDATE + ((60 * 21)/ 24 / 60)) OR
			  TO_DT BETWEEN (SYSDATE - ((60 * 3)/ 24 / 60)) AND (SYSDATE + ((60 * 21)/ 24 / 60))
			),
			ADHOC AS (
			  SELECT 
			  TRUCK_DOCK, FROM_DT, TO_DT,
			  PURPOSE_1, PURPOSE_2, PURPOSE_3, PURPOSE_4, PURPOSE_5, REVERTED_IND
			  FROM TCS_ADHOC_DOCK
			  WHERE NVL(REVERTED_IND, 'N') = 'N' AND (
			    FROM_DT BETWEEN (SYSDATE - ((60 * 3)/ 24 / 60)) AND (SYSDATE + ((60 * 21)/ 24 / 60)) OR
			    TO_DT BETWEEN (SYSDATE - ((60 * 3)/ 24 / 60)) AND (SYSDATE + ((60 * 21)/ 24 / 60))
			  )
			)
			SELECT
			POOL.DOCK_LEVEL, DOCK.TRUCK_DOCK dockNo, 
			POOL.PURPOSE_1 primaryPurpose, POOL.PURPOSE_2 secondaryPurpose, POOL.PURPOSE_3 thirdPurpose, POOL.PURPOSE_4 fourthPurpose, POOL.PURPOSE_5 fifthPurpose,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE WHERE CODE = POOL.PURPOSE_1) primaryPurposeCurrent,	
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE WHERE CODE = POOL.PURPOSE_2) secondaryPurposeCurrent,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE WHERE CODE = POOL.PURPOSE_3) thirdPurposeCurrent,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE WHERE CODE = POOL.PURPOSE_4) fourthPurposeCurrent,
			(SELECT CODE_DESC FROM MAST_TCS_DOCK_PURPOSE WHERE CODE = POOL.PURPOSE_5) fifthPurposeCurrent,
			TO_CHAR(POOL.FROM_DT, 'DD/MM/YYYY HH24:MI') effectiveFrom, TO_CHAR(POOL.TO_DT, 'DD/MM/YYYY HH24:MI') effectiveTo,
			NVL2(ADHOC.TRUCK_DOCK, 'Y', 'N') status
			FROM POOL
			JOIN TCS_DOCK_POOL_DOCK DOCK
			ON POOL.POOL_ID = DOCK.POOL_ID
			LEFT OUTER JOIN ADHOC
			ON ADHOC.TRUCK_DOCK = DOCK.TRUCK_DOCK AND 
			  (ADHOC.FROM_DT BETWEEN DOCK.FROM_DT AND DOCK.TO_DT OR ADHOC.TO_DT BETWEEN DOCK.FROM_DT AND DOCK.TO_DT)
			ORDER BY POOL.DOCK_LEVEL, DOCK.TRUCK_DOCK, DOCK.FROM_DT
		]]>
	</select>	
	<select id="validateTcsDateDiff" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT	CASE WHEN
			(select to_date(#TO_DATE#,'ddmonyy HH24:MI') - to_date(#FROM_DATE#,'ddmonyy HH24:MI') from dual) > 1 THEN 'Y'
			ELSE 'N' END FROM DUAL
		]]>
	</select>
	
	<update id="finalizeTruckRegistration" parameterClass="java.lang.String">
		<![CDATA[
				update URF_TRUCK_REGD_HD set TRK_REG_STATUS = 'Finalized', LM_USER_ID = 'SYSTEM', LM_DATE  = SYSDATE where TRK_REG_STATUS = 'Save'
				AND TRK_NUM IN (SELECT truck_no FROM TRUCK_TRIP trip where  trip.PURPOSE = 'ULD_COLL' AND trip.CLOSED = 'N'
				AND sysdate > trip.ARR_TIME + (SELECT RULE_VALUE FROM CMSRULES where RULE_CODE = 'TRK_REG_FINZ')/1400)
			]]>  
	</update>
	
	<select id="sqlMaintainCustomHallCalender"  parameterClass="java.lang.String"
		resultClass="cargo.cms.tcs.bo.TCSCustomHallBO">
		SELECT  TR_NO as trNo,
		C_E_HALL as cAndEHall,
		SUBSTR(TRIM(TO_CHAR(NVL(START_TIME,0),'0000')),0,2) stratTimeHr,
		SUBSTR(TRIM(TO_CHAR(NVL(START_TIME,0),'0000')),3,4) stratTimeMin,
		SUBSTR(TRIM(TO_CHAR(NVL(END_TIME,0),'0000')),0,2) endTimeHr,
		SUBSTR(TRIM(TO_CHAR(NVL(END_TIME,0),'0000')),3,4) endTimeMin,
		MON_FLG  as monFlag,
		TUE_FLG as tueFlag,
		WED_FLG as wedFlag,
		THU_FLG as thuFlag,
		FRI_FLG as friFlag,
		SAT_FLG as satFlag,
		SUN_FLG as sunFlag,
		CR_DATE as crDate,
		cr_user_id as crUser,
		LM_USER_ID as lmUser,
LM_DATE as lmDate
		FROM MAST_CST_HALL_CALENDAR
		where 
		C_E_HALL = #cAndEhAll#
	</select>
	
	<insert id="sqlInsertMaintainCustomHallCalender" parameterClass="cargo.cms.tcs.bo.TCSCustomHallBO">
						<![CDATA[
		
		Insert
			into 
		MAST_CST_HALL_CALENDAR
		(TR_NO,
		C_E_HALL,
		START_TIME,
		END_TIME,
		MON_FLG,
		TUE_FLG,
		WED_FLG,
		THU_FLG,
		FRI_FLG,
		SAT_FLG,
		SUN_FLG,
		CR_USER_ID,
		CR_DATE,
		LM_USER_ID,
		LM_DATE)
		VALUES (
		MAST_CST_HALL_CALENDAR_SEQ.NEXTVAL,
		#cAndEhAll#,
		#stratTime#,
		#endTime#,
		#monFlag#,
		#tueFlag#,
		#wedFlag#,
		#thuFlag#,
		#friFlag#,
		#satFlag#,
		#sunFlag#,
		'ADMIN',
		SYSDATE,
		'ADMIN',
		SYSDATE
		)
					]]>  

	</insert>
	
	<update id="sqlUpdateMaintainCustomHallCalender"  parameterClass="cargo.cms.tcs.bo.TCSCustomHallBO">
				<![CDATA[
		
		update MAST_CST_HALL_CALENDAR set 
		START_TIME = #stratTime#,
		END_TIME = #endTime#,
		MON_FLG = #monFlag#,
		TUE_FLG = #tueFlag#,
		WED_FLG = #wedFlag#,
		THU_FLG = #thuFlag#,
		FRI_FLG = #friFlag#,
		SAT_FLG = #satFlag#,
		SUN_FLG = #sunFlag#,
		CR_DATE = SYSDATE,
		 LM_DATE = SYSDATE,
		CR_USER_ID = 'ADMIN',
		 LM_USER_ID ='ADMIN'
		Where C_E_HALL =  #cAndEhAll# and TR_NO = #trNo#
					]]>  
		
	</update>
	
	
	
	
	
	<delete id="sqlDeleteMaintainCustomHallCalender" parameterClass="cargo.cms.tcs.bo.TCSCustomHallBO">
		<![CDATA[
			DELETE FROM MAST_CST_HALL_CALENDAR  Where  TR_NO = #trNo#
		]]>
	</delete>
	
	
	<select id="getMatchingConfigForTripID" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
			WITH  AWB_INFO AS (
				  	  SELECT awb.awb_no,awb.awb_date,awb.carr_code,awb.Spl_Code1,awb.Spl_Code2,awb.Spl_Code3,awb.Spl_Code4,awb.Spl_Code5,awb.Spl_Code6,awb.Spl_Code7,awb.Spl_Code8,awb.Spl_Code9,
					  (select cc_code from v_cst_cc_code_awb_all where awb_no    = SRF.awb_no AND awb_date = SRF.awb_date and rownum = 1) cc_code, 
					  Awbinv.loc_code  
					  FROM Awb Awb
					  JOIN Awb_Inventory Awbinv ON awb.awb_no   = awbinv.awb_no AND awb.awb_date = awbinv.awb_date 
					  JOIN IMP_SRF SRF ON awb.awb_no   = SRF.awb_no AND awb.awb_date = SRF.awb_date
					  where 1 =1 
					  <isNotEmpty property="TRIP_ID" prepend="AND">
						SRF.SRF_NO IN (SELECT SRF_NO FROM IMP_TRUCK_SRF WHERE TRIP_ID = #TRIP_ID#)
					  </isNotEmpty> 
			     )
			 SELECT distinct rule_code         AS ruleCode,
				  priority                         AS priority,
				  dock_level                       AS dockLevel,
				  side                             AS side,
				  NVL(check_calender,'N')          AS calCheck,
				  info.cc_code                     AS ccCode,
				  config.shc                       AS shc,
				  config.wh_group                  AS whGrp,
				  info.awb_no                      AS awbNo,
				  TO_CHAR(info.awb_date,'DDMONYY') AS awbDate
				FROM TCS_TRUCK_DOCK_RULE_CONFIG config
				JOIN AWB_INFO info ON ( info.cc_code = config.cc_code
				 OR (config.wh_group is null AND config.shc IN (info.Spl_Code1,info.Spl_Code2,info.Spl_Code3,info.Spl_Code4,info.Spl_Code5,info.Spl_Code6,info.Spl_Code7,info.Spl_Code8,info.Spl_Code9) ) 
				 OR (config.wh_group is not null AND EXISTS ( select null from CUST_AIRL_SPL_CODE where spl_type ='SPL_COOL' and carr_code = carr_code and spl_code in (info.Spl_Code1,info.Spl_Code2,info.Spl_Code3,info.Spl_Code4,info.Spl_Code5,info.Spl_Code6,info.Spl_Code7,info.Spl_Code8,info.Spl_Code9) )
				        AND EXISTS (SELECT NULL FROM MAST_WH_LOC loc, MAST_WH_TYPE typ, MAST_WH_GROUP grp
				                      LEFT OUTER JOIN MAST_WH_AREA area ON grp.wh_area      = area.wh_area
				                      WHERE loc.wh_group  = grp.wh_group AND grp.wh_type     = typ.wh_type AND loc.code = info.loc_code AND config.wh_group = grp.wh_group
				                  ) ) )
				WHERE info.awb_no IS NOT NULL
				UNION ALL 
				SELECT distinct rule_code          AS ruleCode,
				  priority                         AS priority,
				  fg.loc_level                     AS dockLevel,
				  side                             AS side,
				  NVL(check_calender,'N')          AS calCheck,
				  info.cc_code                     AS ccCode,
				  config.shc                       AS shc,
				  config.wh_group                  AS whGrp, 
				  info.awb_no                      AS awbNo,
				  TO_CHAR(info.awb_date,'DDMONYY') AS awbDate
				FROM TCS_TRUCK_DOCK_RULE_CONFIG config
				JOIN AWB_INFO info ON 1 =1 
				JOIN (SELECT loc.loc_level,
				    loc.code
				  FROM MAST_WH_LOC loc,
				    MAST_WH_TYPE typ,
				    MAST_WH_GROUP grp
				  LEFT OUTER JOIN MAST_WH_AREA area
				  ON grp.wh_area     = area.wh_area
				  WHERE loc.wh_group = grp.wh_group
				  AND grp.wh_type    = typ.wh_type
				  AND typ.wh_type    = 'FG'
				  AND loc.loc_level IS NOT NULL
				  ) FG ON FG.code   IN info.loc_code
				WHERE config.rule_code = 'FLR_GOODS'                  
				ORDER BY priority ASC
	</select> 
	
	
	<select id="getMatchingConfigForAWBList" parameterClass="list"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
				WITH  AWB_INFO AS (
					  	  SELECT awb.awb_no,awb.awb_date,awb.carr_code,awb.Spl_Code1,awb.Spl_Code2,awb.Spl_Code3,awb.Spl_Code4,
					  	  awb.Spl_Code5,awb.Spl_Code6,awb.Spl_Code7,awb.Spl_Code8,awb.Spl_Code9,
						  cc.cc_code,Awbinv.loc_code  
						  FROM Awb Awb
						  JOIN Awb_Inventory Awbinv ON awb.awb_no   = awbinv.awb_no AND awb.awb_date = awbinv.awb_date  
						  LEFT JOIN v_cst_cc_code_awb_all cc ON cc.awb_no = awb.awb_no AND cc.awb_date = awbinv.awb_date  
						  where 1 =1 AND Awb.AWB_NO IN 
						  <iterate open="(" close=")" conjunction=",">
							#[]#
						  </iterate>
				     )
				 SELECT distinct rule_code         AS ruleCode,
					  priority                         AS priority,
					  dock_level                       AS dockLevel,
					  side                             AS side,
					  NVL(check_calender,'N')          AS calCheck,
					  info.cc_code                     AS ccCode,
					  config.shc                       AS shc,
					  config.wh_group                  AS whGrp,
					  info.awb_no                      AS awbNo,
					  TO_CHAR(info.awb_date,'DDMONYY') AS awbDate
					FROM TCS_TRUCK_DOCK_RULE_CONFIG config
					JOIN AWB_INFO info ON ( info.cc_code = config.cc_code
					 OR (config.wh_group is null AND config.shc IN (info.Spl_Code1,info.Spl_Code2,info.Spl_Code3,info.Spl_Code4,info.Spl_Code5,info.Spl_Code6,info.Spl_Code7,info.Spl_Code8,info.Spl_Code9) ) 
					 OR (config.wh_group is not null AND EXISTS ( select null from CUST_AIRL_SPL_CODE where spl_type ='SPL_COOL' and carr_code = carr_code and spl_code in (info.Spl_Code1,info.Spl_Code2,info.Spl_Code3,info.Spl_Code4,info.Spl_Code5,info.Spl_Code6,info.Spl_Code7,info.Spl_Code8,info.Spl_Code9) )
					        AND EXISTS (SELECT NULL FROM MAST_WH_LOC loc, MAST_WH_TYPE typ, MAST_WH_GROUP grp
					                      LEFT OUTER JOIN MAST_WH_AREA area ON grp.wh_area      = area.wh_area
					                      WHERE loc.wh_group  = grp.wh_group AND grp.wh_type     = typ.wh_type AND loc.code = info.loc_code AND config.wh_group = grp.wh_group
					                  ) ) )
					WHERE info.awb_no IS NOT NULL
					UNION ALL 
					SELECT distinct rule_code          AS ruleCode,
					  priority                         AS priority,
					  fg.loc_level                     AS dockLevel,
					  side                             AS side,
					  NVL(check_calender,'N')          AS calCheck,
					  info.cc_code                     AS ccCode,
					  config.shc                       AS shc,
					  config.wh_group                  AS whGrp, 
					  info.awb_no                      AS awbNo,
					  TO_CHAR(info.awb_date,'DDMONYY') AS awbDate
					FROM TCS_TRUCK_DOCK_RULE_CONFIG config
					JOIN AWB_INFO info ON 1 =1 
					JOIN (SELECT loc.loc_level,
					    loc.code
					  FROM MAST_WH_LOC loc,
					    MAST_WH_TYPE typ,
					    MAST_WH_GROUP grp
					  LEFT OUTER JOIN MAST_WH_AREA area
					  ON grp.wh_area     = area.wh_area
					  WHERE loc.wh_group = grp.wh_group
					  AND grp.wh_type    = typ.wh_type
					  AND typ.wh_type    = 'FG'
					  AND loc.loc_level IS NOT NULL
					  ) FG ON FG.code   IN info.loc_code
					WHERE config.rule_code = 'FLR_GOODS'                  
					ORDER BY priority ASC
	</select> 
	
	
	<select id="checkCustomsHallCalendar" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
			SELECT count(1) FROM (SELECT  
		     to_char((sysdate + (SELECT cmsrules.rule_value FROM cmsrules where rule_code = 'CUST_HALL_CONFIG_MINS')/1400),'HH24MI') as currentTime,
		     UPPER(TO_CHAR((sysdate + (SELECT cmsrules.rule_value FROM cmsrules where rule_code = 'CUST_HALL_CONFIG_MINS')/1400), 'Day')) currentDay,
		     c.start_time,
		     c.end_time,
		     CASE WHEN SUN_FLG = 'Y' then 'SUNDAY' END as SUNDAY,
		     CASE WHEN MON_FLG = 'Y' then 'MONDAY' END as MONDAY,
		     CASE WHEN TUE_FLG = 'Y' then 'TUESDAY' END as TUESDAY,
		     CASE WHEN WED_FLG = 'Y' then 'WEDNESDAY' END as WEDNESDAY,
		     CASE WHEN THU_FLG = 'Y' then 'THURSDAY' END as THURSDAY,
		     CASE WHEN FRI_FLG = 'Y' then 'FRIDAY' END as FRIDAY,
		     CASE WHEN SAT_FLG = 'Y' then 'SATURDAY' END as SATURDAY
		     FROM MAST_CST_HALL_CALENDAR c
		     where decode(c_e_hall,'CT3','3','CT5','5','999') =  #LEVEL# ) where 
		     trim(currentDay) in (SUNDAY,MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY) 
		     AND to_number(currentTime) between start_time and end_time
	</select>
	
	<select id="isTruckDockAllocatted" parameterClass="java.lang.String" resultClass="java.lang.String">
		<![CDATA[
			SELECT truck_dock FROM TRUCK_TRIP WHERE TRIP_ID = UPPER(#PARAM#) AND CLOSED = 'N' AND ROWNUM = 1
		]]>
	</select>
</sqlMap>