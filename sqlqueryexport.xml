<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="ExportModule">
<!-- AA CPCT REPORT STARTS -->
<parameterMap id="aaCpctParam" class="map" >
		<parameter property="jobParam" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="jobaaMonthParam" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
	</parameterMap>


<procedure id="proc_aa_cpct" parameterMap="aaCpctParam" >
		{call PKG_CPCT_REPT.SP_CPCT_REPT(?,?)}
</procedure>
<select id="fetchAACpctSec1" parameterClass="cargo.cms.export.bo.AACpctBO" resultClass="cargo.cms.export.bo.AACpctBO">
SELECT type,DECODE(TRUNC(TRIM(IMP)),0,0||TRIM(IMP),TRIM(IMP)) imp,
DECODE(TRUNC(TRIM(EXP)),0,0||TRIM(EXP),TRIM(EXP)) exp,
DECODE(TRUNC(TRIM(TRNINB)),0,0||TRIM(TRNINB),TRIM(TRNINB)) trnInb,
DECODE(TRUNC(TRIM(TRNOUTB)),0,0||TRIM(TRNOUTB),TRIM(TRNOUTB)) trnOutb,
DECODE(TRUNC(TRIM(TOTAL)),0,0||TRIM(TOTAL),TRIM(TOTAL)) total FROM (
SELECT TYPE type,ORDER_NO ORDERNO,TO_CHAR(NVL(SUM(IMP_TONN),0),'999999999999999999999.99') IMP,TO_CHAR(NVL(SUM(EXP_TONN),0),'999999999999999999999.99') EXP,
TO_CHAR(NVL(SUM(TRN_INBOUND_TONN),0),'999999999999999999999.99') TRNINB,
TO_CHAR(NVL(SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99') TRNOUTB,
TO_CHAR((NVL(SUM(IMP_TONN),0)+NVL(SUM(EXP_TONN),0)+NVL(SUM(TRN_INBOUND_TONN),0)+NVL(SUM(TRN_OUTBOUND_TONN),0)),'999999999999999999999.99') TOTAL 
FROM AA_CPCT_REPT WHERE 1=1 
<isNotEmpty property="monthYear">
  AND MONTH_YEAR=#monthYear#                                    
</isNotEmpty>
 AND TYPE IN ('Express','General') GROUP BY TYPE, ORDER_NO
UNION
SELECT 'SUB TOTAL' type,'3' ORDERNO,
TO_CHAR(NVL(SUM(IMP_TONN),0),'999999999999999999999.99') IMP,
TO_CHAR(NVL(SUM(EXP_TONN),0),'999999999999999999999.99') EXP,
TO_CHAR(NVL(SUM(TRN_INBOUND_TONN),0),'999999999999999999999.99') TRNINB,
TO_CHAR(NVL(SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99') TRNOUTB,
TO_CHAR(NVL(SUM(IMP_TONN)+SUM(EXP_TONN)+SUM(TRN_INBOUND_TONN)+SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99') TOTAL
FROM AA_CPCT_REPT WHERE 1=1 
<isNotEmpty property="monthYear">
  AND MONTH_YEAR=#monthYear#                                    
</isNotEmpty>
 AND TYPE IN ('Express','General') GROUP BY 'SUB TOTAL', '3'
UNION
SELECT TYPE type,ORDER_NO ORDERNO,
TO_CHAR(NVL(SUM(IMP_TONN),0),'999999999999999999999.99') IMP,
TO_CHAR(NVL(SUM(EXP_TONN),0),'999999999999999999999.99') EXP,
TO_CHAR(NVL(SUM(TRN_INBOUND_TONN),0),'999999999999999999999.99') TRNINB,
TO_CHAR(NVL(SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99') TRNOUTB,
TO_CHAR(NVL(SUM(IMP_TONN)+SUM(EXP_TONN)+SUM(TRN_INBOUND_TONN)+SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99') TOTAL 
FROM AA_CPCT_REPT
 WHERE 1=1 
<isNotEmpty property="monthYear">
  AND MONTH_YEAR=#monthYear#                                    
</isNotEmpty> 
AND TYPE IN ('Mail','On Board Couier','Others') GROUP BY TYPE, ORDER_NO
UNION
SELECT 'SUB TOTAL' type,'7' ORDERNO,
TO_CHAR(NVL(SUM(IMP_TONN),0),'999999999999999999999.99') IMP,
TO_CHAR(NVL(SUM(EXP_TONN),0),'999999999999999999999.99') EXP,
TO_CHAR(NVL(SUM(TRN_INBOUND_TONN),0),'999999999999999999999.99') TRNINB,
TO_CHAR(NVL(SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99') TRNOUTB,
TO_CHAR(NVL(SUM(IMP_TONN)+SUM(EXP_TONN)+SUM(TRN_INBOUND_TONN)+SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99') TOTAL
FROM AA_CPCT_REPT 
WHERE 1=1 
<isNotEmpty property="monthYear">
  AND MONTH_YEAR=#monthYear#                                    
</isNotEmpty>
 AND TYPE IN ('Mail','On Board Couier','Others') GROUP BY 'SUB TOTAL', '7'
UNION
SELECT 'GRAND TOTAL' TYPE,'8' ORDERNO,
TO_CHAR(NVL(SUM(IMP_TONN),0),'999999999999999999999.99') IMP,
TO_CHAR(NVL(SUM(EXP_TONN),0),'999999999999999999999.99') EXP,
TO_CHAR(NVL(SUM(TRN_INBOUND_TONN),0),'999999999999999999999.99') TRNINB,
TO_CHAR(NVL(SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99') TRNOUTB,
TO_CHAR(NVL(SUM(IMP_TONN)+SUM(EXP_TONN)+SUM(TRN_INBOUND_TONN)+SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99') TOTAL
FROM AA_CPCT_REPT 
WHERE 1=1 
<isNotEmpty property="monthYear">
  AND MONTH_YEAR=#monthYear#                                    
</isNotEmpty>
  AND TYPE IN ('Mail','On Board Couier','Others','Express','General') 
GROUP BY 'GRAND TOTAL', '8')
ORDER BY ORDERNO
</select>
<select id="fetchAACpctSecOthr" parameterClass="cargo.cms.export.bo.AACpctBO" resultClass="cargo.cms.export.bo.AACpctBO">
SELECT CARRIER_CODE carrier,
  DECODE(TRUNC(TRIM(TO_CHAR(NVL(SUM(IMP_TONN),0),'999999999999999999999.99'))),0,0
  ||TRIM(TO_CHAR(NVL(SUM(IMP_TONN),0),'999999999999999999999.99')),TRIM(TO_CHAR(NVL(SUM(IMP_TONN),0),'999999999999999999999.99'))) imp,
  DECODE(TRUNC(TRIM(TO_CHAR(NVL(SUM(EXP_TONN),0),'999999999999999999999.99'))),0,0
  ||TRIM(TO_CHAR(NVL(SUM(EXP_TONN),0),'999999999999999999999.99')),TRIM(TO_CHAR(NVL(SUM(EXP_TONN),0),'999999999999999999999.99'))) exp,
  DECODE(TRUNC(TRIM(TO_CHAR(NVL(SUM(TRN_INBOUND_TONN),0),'999999999999999999999.99'))),0,0
  ||TRIM(TO_CHAR(NVL(SUM(TRN_INBOUND_TONN),0),'999999999999999999999.99')),TRIM(TO_CHAR(NVL(SUM(TRN_INBOUND_TONN),0),'999999999999999999999.99'))) trnInb,
  DECODE(TRUNC(TRIM(TO_CHAR(NVL(SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99'))),0,0
  ||TRIM(TO_CHAR(NVL(SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99')),TRIM(TO_CHAR(NVL(SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99'))) trnOutb,
  DECODE(TRUNC(TRIM(TO_CHAR(NVL(SUM(IMP_TONN)+SUM(EXP_TONN)+SUM(TRN_INBOUND_TONN)+SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99'))),0,0
  ||TRIM(TO_CHAR(NVL(SUM(IMP_TONN)+SUM(EXP_TONN)+SUM(TRN_INBOUND_TONN)+SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99')),
  TRIM(TO_CHAR(NVL(SUM(IMP_TONN)+SUM(EXP_TONN)+SUM(TRN_INBOUND_TONN)+SUM(TRN_OUTBOUND_TONN),0),'999999999999999999999.99'))) total
FROM AA_CPCT_REPT
WHERE 1=1
<isNotEmpty property="monthYear">
  AND MONTH_YEAR=#monthYear#                                    
</isNotEmpty>
AND TYPE=#typeList#
GROUP BY CARRIER_CODE
ORDER BY CARRIER_CODE 
</select>
<select id="checkFWBCARExists" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT
		  (SELECT COUNT(1) FROM exp_car WHERE awb_no = #awbNo# AND awb_date = to_date(#awbDate#,'DDMONYY')) +
		  (SELECT COUNT(1) FROM edi_fwb WHERE awb_no = #awbNo# AND awb_date = to_date(#awbDate#,'DDMONYY'))
		FROM DUAL
	</select>
	<select id="addSHCFBLCAR" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select STRAGG(STRINGDELIM(c.spl, ','))  from 
(select code spl from mast_spl_hand_code where code in
(SELECT REGEXP_SUBSTR ((select  STRAGG(STRINGDELIM(b.spl, ',')) 
from 
 ((select T.spl spl  
                  from(
        select 
        DECODE(awb.spl_code1, NULL, '', awb.spl_code1)
        || DECODE(awb.spl_code2, NULL, '', ','
			  || awb.spl_code2)
			  || DECODE(awb.spl_code3, NULL, '', ','
			  || awb.spl_code3)
			  || DECODE(awb.spl_code4, NULL, '', ','
			  || awb.spl_code4)
			  || DECODE(awb.spl_code5, NULL, '', ','
			  ||awb.spl_code5)
			  || DECODE(awb.spl_code6, NULL, '', ','
			  || awb.spl_code6)
			  || DECODE(awb.spl_code7, NULL, '', ','
			  || awb.spl_code7)
			  || DECODE(awb.spl_code8, NULL, '', ','
			  || awb.spl_code8)
			  || DECODE(awb.spl_code9, NULL, '', ','
			  || awb.spl_code9) AS spl,awb_no,awb_date
        from awb awb        
              ) t
               where awb_no = #awbNo# and awb_date = to_date(#awbDate#,'DDMONYY'))
			        
              union
                select code spl from mast_spl_hand_code where code=#splCode1# and remain_in_car='Y'
                union
                 select code spl from mast_spl_hand_code where code=#splCode2# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode3# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode4# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode5# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode6# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode7# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode8# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode9# and remain_in_car='Y'
                 
              )b),'[^,]+',1,LEVEL)TXT  FROM DUAL
                                   CONNECT BY REGEXP_SUBSTR ((select  STRAGG(STRINGDELIM(b.spl, ',')) 
from 
 ((select T.spl spl  
                  from(
                    select 
        DECODE(awb.spl_code1, NULL, '', awb.spl_code1)
        || DECODE(awb.spl_code2, NULL, '', ','
			  || awb.spl_code2)
			  || DECODE(awb.spl_code3, NULL, '', ','
			  || awb.spl_code3)
			  || DECODE(awb.spl_code4, NULL, '', ','
			  || awb.spl_code4)
			  || DECODE(awb.spl_code5, NULL, '', ','
			  ||awb.spl_code5)
			  || DECODE(awb.spl_code6, NULL, '', ','
			  || awb.spl_code6)
			  || DECODE(awb.spl_code7, NULL, '', ','
			  || awb.spl_code7)
			  || DECODE(awb.spl_code8, NULL, '', ','
			  || awb.spl_code8)
			  || DECODE(awb.spl_code9, NULL, '', ','
			  || awb.spl_code9) AS spl,awb_no,awb_date
        from awb awb               
              ) t
			        where awb_no = #awbNo# and awb_date = to_date(#awbDate#,'DDMONYY'))
               union
                select code spl from mast_spl_hand_code where code=#splCode1# and remain_in_car='Y'
                union
                 select code spl from mast_spl_hand_code where code=#splCode2# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode3# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode4# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode5# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode6# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode7# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode8# and remain_in_car='Y'
                 union
                 select code spl from mast_spl_hand_code where code=#splCode9# and remain_in_car='Y'
                               
                 )b),'[^,]+',1,LEVEL)IS NOT NULL) order by priority desc) c where ROWNUM &lt;= 9
                 and ((select count(1) from exp_car where awb_no = #awbNo# and awb_date = to_date(#awbDate#,'DDMONYY'))>0
                 OR(select count(1) from edi_fwb where awb_no = #awbNo# and awb_date = to_date(#awbDate#,'DDMONYY'))>0)
	</select>
<select id="logCarrForAccessory" parameterClass="java.lang.String"	resultClass="java.lang.String">
	select STRAGG(STRINGDELIM(carr_code,',')) from MAST_CARR_GRP where GRP_CARR_CODE=#PARAM#
	</select>

	<update id="updateAirLineRmk" parameterClass="map">
		update awb_rmk set rmk = #AIR_RMKS#, LM_USER_ID = #USER_ID# , LM_DATE = SYSDATE where awb_no = #AWBNO#
	</update>
	
<select id="getOldAirLineRemarks" parameterClass="map" resultClass="java.lang.String">
		SELECT AIRL_RMK from exp_car where awb_no = #AWBNO# and awb_date = TO_DATE(#AWBDATE#,'DDMONYY')
	</select>
	
	<select id="getAirLineRemarks" parameterClass="map" resultClass="java.lang.String">
		SELECT rmk from awb_rmk where awb_no = #AWBNO#
	</select>

<select id="fetchSHCInFBL" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	select STRAGG(STRINGDELIM(c.spl, ','))  from 
(select code spl from mast_spl_hand_code where code in
(SELECT REGEXP_SUBSTR ((select  STRAGG(STRINGDELIM(b.spl, ',')) 
from 
 ((select T.spl spl  
                  from(
                  (select spl_code1 spl,awb_no,awb_date from edi_fbl_shp where spl_code1  is not null )
			        union 
			        (select spl_code2 spl,awb_no,awb_date from edi_fbl_shp  where spl_code2  is not null )   
                  union 
			        (select spl_code3 spl,awb_no,awb_date from edi_fbl_shp  where spl_code3  is not null )  
                  union 
			        (select spl_code4 spl,awb_no,awb_date from edi_fbl_shp  where spl_code4  is not null )  
                  union 
			        (select spl_code5 spl,awb_no,awb_date from edi_fbl_shp  where spl_code5  is not null )  
                  union 
			        (select spl_code6 spl,awb_no,awb_date from edi_fbl_shp  where spl_code6  is not null )  
                  union 
			        (select spl_code7 spl,awb_no,awb_date from edi_fbl_shp  where spl_code7  is not null )  
                  union 
			        (select spl_code8 spl,awb_no,awb_date from edi_fbl_shp  where spl_code8  is not null )  
                  union 
			        (select spl_code9 spl,awb_no,awb_date from edi_fbl_shp  where spl_code9  is not null )        
              ) t
			        where awb_no = #AWB_NO# and awb_date = to_date(#AWB_DATE#,'DDMONYY'))
              union
                select code spl from mast_spl_hand_code where code=#SPL_CODE1#
                union
                 select code spl from mast_spl_hand_code where code=#SPL_CODE2#
               union
                select code spl from mast_spl_hand_code where code=#SPL_CODE3#
                union
                 select code spl from mast_spl_hand_code where code=#SPL_CODE4#
               union
                select code spl from mast_spl_hand_code where code=#SPL_CODE5#
                union
                 select code spl from mast_spl_hand_code where code=#SPL_CODE6#
              union
                select code spl from mast_spl_hand_code where code=#SPL_CODE7#
                union
                 select code spl from mast_spl_hand_code where code=#SPL_CODE8#
                 union
                 select code spl from mast_spl_hand_code where code=#SPL_CODE9#)b),'[^,]+',1,LEVEL)TXT  FROM DUAL
                                   CONNECT BY REGEXP_SUBSTR ((select  STRAGG(STRINGDELIM(b.spl, ',')) 
from 
 ((select T.spl spl  
                  from(
                  (select spl_code1 spl,awb_no,awb_date from edi_fbl_shp where spl_code1  is not null )
			       union 
			        (select spl_code2 spl,awb_no,awb_date from edi_fbl_shp  where spl_code2  is not null )   
				  union 
			        (select spl_code3 spl,awb_no,awb_date from edi_fbl_shp  where spl_code3  is not null )  
                  union 
			        (select spl_code4 spl,awb_no,awb_date from edi_fbl_shp  where spl_code4  is not null )  
                  union 
			        (select spl_code5 spl,awb_no,awb_date from edi_fbl_shp  where spl_code5  is not null )  
                  union 
			        (select spl_code6 spl,awb_no,awb_date from edi_fbl_shp  where spl_code6  is not null )  
                  union 
			        (select spl_code7 spl,awb_no,awb_date from edi_fbl_shp  where spl_code7  is not null )  
                  union 
			        (select spl_code8 spl,awb_no,awb_date from edi_fbl_shp  where spl_code8  is not null )  
                  union 
			        (select spl_code9 spl,awb_no,awb_date from edi_fbl_shp  where spl_code9  is not null )        
              ) t
			        where awb_no = #AWB_NO# and awb_date = to_date(#AWB_DATE#,'DDMONYY'))
               union
                select code spl from mast_spl_hand_code where code=#SPL_CODE1#
                union
                 select code spl from mast_spl_hand_code where code=#SPL_CODE2#
               union
                select code spl from mast_spl_hand_code where code=#SPL_CODE3#
                union
                 select code spl from mast_spl_hand_code where code=#SPL_CODE4#
               union
                select code spl from mast_spl_hand_code where code=#SPL_CODE5#
                union
                 select code spl from mast_spl_hand_code where code=#SPL_CODE6#
              union
                select code spl from mast_spl_hand_code where code=#SPL_CODE7#
                union
                 select code spl from mast_spl_hand_code where code=#SPL_CODE8#
                 union
                 select code spl from mast_spl_hand_code where code=#SPL_CODE9#
                 )b),'[^,]+',1,LEVEL)IS NOT NULL) order by priority desc) c where ROWNUM &lt;= 9
                 and (select count(1) from exp_car where awb_no = #AWB_NO# and awb_date = to_date(#AWB_DATE#,'DDMONYY'))=0
                 and (select count(1) from edi_fwb where awb_no = #AWB_NO# and awb_date = to_date(#AWB_DATE#,'DDMONYY'))=0
	</select>

	<update id="sqlUpdSHCAwb" parameterClass="map">
		UPDATE AWB SET 
		SPL_CODE1 = #splCode1#,
		SPL_CODE2 = #splCode2#,
		SPL_CODE3 = #splCode3#,
		SPL_CODE4 = #splCode4#,
		SPL_CODE5 = #splCode5#,
		SPL_CODE6 = #splCode6#,
		SPL_CODE7 = #splCode7#,
		SPL_CODE8 = #splCode8#,
		SPL_CODE9 = #splCode9#
		WHERE AWB_NO = #awbNo# AND AWB_DATE=TO_DATE(pkg_common.get_awb_date(#awbNo#, 'E'))
	</update>

<select id="getSplValues1" parameterClass="map" resultClass="java.lang.String">
		select SPL_CODE1 shcOne
		from  AWB where awb_no = #awbNo# and  awb_date = #awbDate# and rownum = 1
	</select>

<select id="getEndorsementCount_exp_flt_uld" parameterClass="map" resultClass="java.lang.Integer">
	SELECT count(1) FROM EXP_FLT_ULD WHERE ULD_KEY=#uld_key# AND FLT_KEY=#flt_key# AND FLT_DATE=#flt_date# and ENDORSED_WT_BY is null and ENDORSED_WT_DATE is null 
</select>

<select id="getDeclareBuComplteUldList" parameterClass="cargo.cms.export.bo.FinalizeULDWtBO" resultClass="cargo.cms.export.bo.FinalizeULDWtBO">
	SELECT ULD_KEY uldKey FROM EXP_FLT_ULD WHERE FLT_KEY=#flightNoKey# AND FLT_DATE=#flightDate# AND NVL(transit_type,'XX') != 'TA'
</select>

<update id="saveWeightVarianceEndorsment_EXP_FLT_ULD" parameterClass="map" >
	UPDATE EXP_FLT_ULD SET ENDORSED_WT_BY = #USER_NAME#, ENDORSED_WT_DATE = SYSDATE, LM_USER_ID=#LM_USER_ID# , TR_TYPE='OBUED' 
		WHERE ULD_KEY=#ULD_KEY# AND FLT_KEY=#FLT_KEY# AND FLT_DATE=#FLT_DATE#
</update>

<select id="getOutbounduldshcDGInd" parameterClass="map" resultClass="java.lang.String" >
	SELECT DECODE(COUNT(1),'1','Y','N')
	FROM CUST_AIRL_SPL_CODE A,
  	AWB B
	WHERE A.CARR_CODE  =B.carr_code
	AND A.spl_type     ='SPL_DANG'
	AND A.spl_code     =#shc#
	AND B.AWB_NO       =#awbNo#
	AND B.AWB_DATE     =#awbDate#
	AND B.awb_closed_yn = 'N'
	</select>

<select id="fetchOutBoundInvenListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
select 
uld_key uldKey,
LSP_NO lspNo,
LOCN_PCS locnPcs,
LOCN_WT locnWt,
LOC_CODE locCode
from 
awb_inventory 
where 
awb_no=#awbNo#
and awb_date=#awbDate#
</select>

<select id="mgmtMonthValidation" parameterClass="java.lang.String"	resultClass="java.lang.String">
SELECT NVL((SELECT 1 FROM DUAL WHERE TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE , - 12),'MONYYYY'),'MONYYYY')&lt;=TO_DATE(#monthList#,'MONYYYY')),0) MONTH_VALIDATE FROM DUAL
</select>
<!--  AA CPCT REPORT ENDS  -->
<!-- AA_Tonnage report starts -->
<parameterMap id="aaTonnageParam" class="map" >
		<parameter property="currDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="jobParam" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="jobaaMonthParam" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
	</parameterMap>

<procedure id="proc_aa_tonnage" parameterMap="aaTonnageParam" >
		{call PKG_AA_TONNAGE.SP_AA_TONNAGE(?,?,?)}
</procedure>
<select id="fetchJobAAtonnageList" parameterClass="cargo.cms.export.bo.AATonnageBO" resultClass="cargo.cms.export.bo.AATonnageBO">
SELECT
TO_CHAR(TO_DATE(CURRENTDATE,'DD-MON-YY'),'DDMONYY') currDate,
CURRDAY currDay,
CURRDATENO weekDay,
decode(trunc(TRIM(to_char(SUM(EXP),'999999999.99'))),0,0|| TRIM(to_char(SUM(EXP),'999999999.99')), TRIM(to_char(SUM(EXP),'999999999.99'))) exp,
decode(trunc(TRIM(to_char(SUM(PPK),'999999999.99'))),0,0|| TRIM(to_char(SUM(PPK),'999999999.99')), TRIM(to_char(SUM(PPK),'999999999.99'))) ppk,
decode(trunc(TRIM(to_char(SUM(BULK),'999999999.99'))),0,0|| TRIM(to_char(SUM(BULK),'999999999.99')), TRIM(to_char(SUM(BULK),'999999999.99'))) BULK,
decode(trunc(TRIM(to_char(SUM(EXP_OBC),'999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_OBC),'999999999.99')), TRIM(to_char(SUM(EXP_OBC),'999999999.99')))  expObc,
decode(trunc(TRIM(to_char(SUM(EXP_EPX),'999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_EPX),'999999999.99')), TRIM(to_char(SUM(EXP_EPX),'999999999.99'))) expEpx,
decode(trunc(TRIM(to_char(SUM(IMPORT),'999999999.99'))),0,0|| TRIM(to_char(SUM(IMPORT),'999999999.99')), TRIM(to_char(SUM(IMPORT),'999999999.99'))) imp,
decode(trunc(TRIM(to_char(SUM(IMP_OBC),'999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_OBC),'999999999.99')), TRIM(to_char(SUM(IMP_OBC),'999999999.99'))) impObc,
decode(trunc(TRIM(to_char(SUM(IMP_EPX),'999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_EPX),'999999999.99')), TRIM(to_char(SUM(IMP_EPX),'999999999.99'))) impEpx,
decode(trunc(TRIM(to_char(SUM(TOTAL_IMP_EXP),'999999999.99'))),0,0|| TRIM(to_char(SUM(TOTAL_IMP_EXP),'999999999.99')), TRIM(to_char(SUM(TOTAL_IMP_EXP),'999999999.99'))) totalImpExp,
decode(trunc(TRIM(to_char(SUM(EPH_EXP),'999999999.99'))),0,0|| TRIM(to_char(SUM(EPH_EXP),'999999999.99')), TRIM(to_char(SUM(EPH_EXP),'999999999.99'))) ephInclExp,
decode(trunc(TRIM(to_char(SUM(EPH_IMP),'999999999.99'))),0,0|| TRIM(to_char(SUM(EPH_IMP),'999999999.99')), TRIM(to_char(SUM(EPH_IMP),'999999999.99'))) ephInclImp,
decode(trunc(TRIM(to_char(SUM(EPH_TOTAL),'999999999.99'))),0,0|| TRIM(to_char(SUM(EPH_TOTAL),'999999999.99')), TRIM(to_char(SUM(EPH_TOTAL),'999999999.99'))) ephInclTotal,
decode(trunc(TRIM(to_char(SUM(EPD_EXP),'999999999.99'))),0,0|| TRIM(to_char(SUM(EPD_EXP),'999999999.99')), TRIM(to_char(SUM(EPD_EXP),'999999999.99')))  epdExclExp,
decode(trunc(TRIM(to_char(SUM(EPD_IMP),'999999999.99'))),0,0|| TRIM(to_char(SUM(EPD_IMP),'999999999.99')), TRIM(to_char(SUM(EPD_IMP),'999999999.99'))) epdExclImp,
decode(trunc(TRIM(to_char(SUM(EPD_TOTAL),'999999999.99'))),0,0|| TRIM(to_char(SUM(EPD_TOTAL),'999999999.99')), TRIM(to_char(SUM(EPD_TOTAL),'999999999.99'))) epdExclTotal,
decode(trunc(TRIM(to_char(SUM(TARMAC),'999999999.99'))),0,0|| TRIM(to_char(SUM(TARMAC),'999999999.99')), TRIM(to_char(SUM(TARMAC),'999999999.99'))) tarmac,
decode(trunc(TRIM(to_char(SUM(TOTAL_INCL_MAIL),'999999999.99'))),0,0|| TRIM(to_char(SUM(TOTAL_INCL_MAIL),'999999999.99')), TRIM(to_char(SUM(TOTAL_INCL_MAIL),'999999999.99'))) totalInclMail
FROM AA_TONNAGE 
GROUP BY TO_CHAR(TO_DATE(CURRENTDATE,'DD-MON-YY'),'DDMONYY'), CURRDAY,CURRDATENO
order by TO_CHAR(TO_DATE(CURRENTDATE,'DD-MON-YY'),'DDMONYY')
</select>
<!-- AA_Tonnage report ENDS -->
<!-- Added by Manorama for Daily Rolling Report:::Starts -->
<delete id="deleteDailyRollingdata" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO">
delete from aa_daily_rolling
</delete>
<parameterMap id="dailyRollingParam" class="map" >
		<parameter property="jobCurrDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="jobRollingParam" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
</parameterMap>

	<procedure id="proc_daily_rolling_tonnage" parameterMap="dailyRollingParam" >
			{call PKG_DAILY_ROLLING_REPT.DAILY_ROLLING_REP(?,?)}
	</procedure>
<parameterMap id="dailyRollingRegionParam" class="map" >
		<parameter property="jobCurrDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="jobRollingParam" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
		<parameter property="jobRollingMonthParam" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/> 
</parameterMap>

	<procedure id="proc_daily_rolling_region_tonnage" parameterMap="dailyRollingRegionParam" >
			{call PKG_DAILY_ROLLING_REPT.DAILY_ROLLING_REGION(?,?,?)}
	</procedure>
<select id="fetchJobDailyRollingList" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">
select
TO_CHAR(TO_DATE(DATE_COLUMN,'DD-MON-YY'),'DDMONYY') currDate,
WEEK_NO weekNo,
decode(trunc(TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99'))) impBulkTonn,
decode(trunc(TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99'))) impPpkTonn,
decode(trunc(TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99'))) impPerTonn,
decode(trunc(TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99')))  impExpTonn,
decode(trunc(TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99'))) impObcTonn,
decode(trunc(TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99'))) expBulkTonn,
decode(trunc(TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99'))) expPpkTonn,
decode(trunc(TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99'))) expGenTonn,
decode(trunc(TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99'))) expPerTonn,
decode(trunc(TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99'))) expCgoTonn,
decode(trunc(TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99'))) expObcTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99'))) trnsBulkTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99')))  trnsPpkTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99'))) trnsGenTonn,
decode(trunc(TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99'))) impGenTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99'))) trnsPerTonn,
decode(trunc(TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99')), TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99'))) impWithObc,
decode(trunc(TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))) impWithoutObc,
decode(trunc(TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99')), TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99'))) expWithObc,
decode(trunc(TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))) expWithoutObc,
decode(trunc(TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))) trnsWithoutObc,
decode(trunc(TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99')), TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99'))) grandTtlWith,
decode(trunc(TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99')), TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99'))) grandTtlWithout
FROM AA_DAILY_ROLLING B
where TO_DATE(DATE_COLUMN,'DDMONYY') BETWEEN   (SELECT TO_DATE(TO_CHAR(TRUNC(SYSDATE - 31 + (ROWNUM)) ,'DDMONYY'),'DDMONYY') FROM DUAL) AND (SELECT TO_DATE(TO_CHAR(SYSDATE,'DDMONYY'),'DDMONYY') FROM DUAL)
AND REGION_NAME IS NULL
<isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
GROUP BY DATE_COLUMN,WEEK_NO
order by TO_CHAR(TO_DATE(DATE_COLUMN,'DD-MON-YY'),'YY MM DD')
</select>

<select id="fetchJobMonthlyRollingList" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">
select
decode(trunc(TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99'))) impBulkTonn,
decode(trunc(TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99'))) impPpkTonn,
decode(trunc(TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99'))) impPerTonn,
decode(trunc(TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99')))  impExpTonn,
decode(trunc(TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99'))) impObcTonn,
decode(trunc(TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99'))) expBulkTonn,
decode(trunc(TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99'))) expPpkTonn,
decode(trunc(TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99'))) expGenTonn,
decode(trunc(TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99'))) expPerTonn,
decode(trunc(TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99'))) expCgoTonn,
decode(trunc(TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99'))) expObcTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99'))) trnsBulkTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99')))  trnsPpkTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99'))) trnsGenTonn,
decode(trunc(TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99'))) impGenTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99'))) trnsPerTonn,
decode(trunc(TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99')), TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99'))) impWithObc,
decode(trunc(TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))) impWithoutObc,
decode(trunc(TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99')), TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99'))) expWithObc,
decode(trunc(TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))) expWithoutObc,
decode(trunc(TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))) trnsWithoutObc,
to_char(to_date(MONTH_NAME,'MONYYYY'),'MONYY') monthName,
to_char(to_date(month_name,'MON-YY'),'YYYY') changeYear,
decode(trunc(TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99')), TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99'))) grandTtlWith,
decode(trunc(TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99')), TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99'))) grandTtlWithout
from aa_daily_rolling B
where month_name IS NOT NULL 
AND TO_DATE(month_name,'MONYYYY') BETWEEN (SELECT TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE , - 12),'MONYYYY'),'MONYYYY') FROM DUAL) AND (SELECT TO_DATE(TO_CHAR(SYSDATE ,'MONYYYY'),'MONYYYY') FROM DUAL)
<isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
GROUP BY month_name
ORDER BY TO_CHAR(TO_DATE(month_name,'MON-YY'),'YY'),TO_CHAR(TO_DATE(month_name,'MM-YY'),'MM')
</select>
<select id="fetchJobAirlineRollingList" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">
SELECT 
CARR_CODE carrCode  ,
decode(trunc(TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99'))) impBulkTonn,
decode(trunc(TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99'))) impPpkTonn,
decode(trunc(TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99'))) impPerTonn,
decode(trunc(TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99')))  impExpTonn,
decode(trunc(TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99'))) impObcTonn,
decode(trunc(TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99'))) expBulkTonn,
decode(trunc(TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99'))) expPpkTonn,
decode(trunc(TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99'))) expGenTonn,
decode(trunc(TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99'))) expPerTonn,
decode(trunc(TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99'))) expCgoTonn,
decode(trunc(TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99'))) expObcTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99'))) trnsBulkTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99')))  trnsPpkTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99'))) trnsGenTonn,
decode(trunc(TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99'))) impGenTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99'))) trnsPerTonn,
decode(trunc(TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99')), TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99'))) impWithObc,
decode(trunc(TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))) impWithoutObc,
decode(trunc(TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99')), TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99'))) expWithObc,
decode(trunc(TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))) expWithoutObc,
decode(trunc(TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))) trnsWithoutObc,
decode(trunc(TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99')), TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99'))) grandTtlWith,
decode(trunc(TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99')), TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99'))) grandTtlWithout
FROM AA_DAILY_ROLLING
WHERE CARR_CODE IS NOT NULL
AND TO_CHAR(TO_DATE(MONTH_NAME,'MONYYYY'),'MONYYYY') = #monthList#
GROUP BY CARR_CODE
order by CARR_CODE
</select>
<select id="fetchPreviousMonthTtl" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">
select
to_char(to_date(MONTH_NAME,'MONYYYY'),'MON YY') monthName,
decode(trunc(TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99'))) impBulkTonn,
decode(trunc(TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99'))) impPpkTonn,
decode(trunc(TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99'))) impPerTonn,
decode(trunc(TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99')))  impExpTonn,
decode(trunc(TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99'))) impObcTonn,
decode(trunc(TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99'))) expBulkTonn,
decode(trunc(TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99'))) expPpkTonn,
decode(trunc(TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99'))) expGenTonn,
decode(trunc(TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99'))) expPerTonn,
decode(trunc(TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99'))) expCgoTonn,
decode(trunc(TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99'))) expObcTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99'))) trnsBulkTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99')))  trnsPpkTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99'))) trnsGenTonn,
decode(trunc(TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99'))) impGenTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99'))) trnsPerTonn,
decode(trunc(TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99')), TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99'))) impWithObc,
decode(trunc(TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))) impWithoutObc,
decode(trunc(TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99')), TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99'))) expWithObc,
decode(trunc(TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))) expWithoutObc,
decode(trunc(TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))) trnsWithoutObc,
decode(trunc(TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99')), TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99'))) grandTtlWith,
decode(trunc(TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99')), TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99'))) grandTtlWithout
from aa_daily_rolling 
where month_name IS NOT NULL AND 
TO_CHAR(TO_DATE(month_name,'MONYYYY'),'MONYYYY')= TO_CHAR(ADD_MONTHS(SYSDATE,-1),'MONYYYY')
<isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
GROUP BY month_name
</select>
<select id="fetchCurrMonthTtl" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">
select
to_char(to_date(MONTH_NAME,'MONYYYY'),'MON YY') monthName,
decode(trunc(TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_BULK_TONN),'9999999999999999.99'))) impBulkTonn,
decode(trunc(TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_PPK_TONN),'9999999999999999.99'))) impPpkTonn,
decode(trunc(TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_PERISHABLE_TONN),'9999999999999999.99'))) impPerTonn,
decode(trunc(TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_EXP_TONN),'9999999999999999.99')))  impExpTonn,
decode(trunc(TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_OBC_TONN),'9999999999999999.99'))) impObcTonn,
decode(trunc(TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_BULK_TONN),'9999999999999999.99'))) expBulkTonn,
decode(trunc(TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_PPK_TONN),'9999999999999999.99'))) expPpkTonn,
decode(trunc(TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_GEN_TONN),'9999999999999999.99'))) expGenTonn,
decode(trunc(TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_PERISHABLE_TONN),'9999999999999999.99'))) expPerTonn,
decode(trunc(TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_EXP_CGO_TONN),'9999999999999999.99'))) expCgoTonn,
decode(trunc(TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_OBC_TONN),'9999999999999999.99'))) expObcTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_BULK_TONN),'9999999999999999.99'))) trnsBulkTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_PPK_TONN),'9999999999999999.99')))  trnsPpkTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_GEN_TONN),'9999999999999999.99'))) trnsGenTonn,
decode(trunc(TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_GEN_TONN),'9999999999999999.99'))) impGenTonn,
decode(trunc(TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_PERISHABLE_TONN),'9999999999999999.99'))) trnsPerTonn,
decode(trunc(TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99')), TRIM(to_char(SUM(IMP_WITH_OBC),'9999999999999999.99'))) impWithObc,
decode(trunc(TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))) impWithoutObc,
decode(trunc(TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99')), TRIM(to_char(SUM(EXP_WITH_OBC),'9999999999999999.99'))) expWithObc,
decode(trunc(TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))) expWithoutObc,
decode(trunc(TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99')), TRIM(to_char(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))) trnsWithoutObc,
decode(trunc(TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99')), TRIM(to_char(SUM(GRAND_TTL_WITHOBC),'9999999999999999.99'))) grandTtlWith,
decode(trunc(TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99')), TRIM(to_char(SUM(GRAND_TTL_WITHOUTOBC),'9999999999999999.99'))) grandTtlWithout
from aa_daily_rolling 
where month_name IS NOT NULL AND 
TO_CHAR(TO_DATE(month_name,'MONYYYY'),'MONYYYY')= TO_CHAR(SYSDATE,'MONYYYY')
<isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
GROUP BY month_name
</select>
<delete id="deleteDailyRollingRegiondata" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO">
 DELETE FROM GT_AA_DAILY_ROLLING WHERE REGION_NAME IS NOT NULL
</delete>
<select id="fetchJobRegionRollingList" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">

SELECT REGION_NAME regionName,
  DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_REGION_TONN),'9999999999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(IMP_REGION_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_REGION_TONN),'9999999999999999.99'))) impRegionTonn,
  CASE WHEN DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(IMP_WITHOUT_OBC),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_WITHOUT_OBC),'9999999999999999.99')))!=0 THEN 
    ROUND(((DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_REGION_TONN),'9999999999999999.99'))),0,0
    || TRIM(TO_CHAR(SUM(IMP_REGION_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_REGION_TONN),'9999999999999999.99'))) / DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))),0,0
    || TRIM(TO_CHAR(SUM(IMP_WITHOUT_OBC),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_WITHOUT_OBC),'9999999999999999.99'))))*100),2) 
   ELSE 0
   END impRegionDev,    
  DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_REGION_TONN),'9999999999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(EXP_REGION_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_REGION_TONN),'9999999999999999.99'))) expRegionTonn,  
  CASE WHEN DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(EXP_WITHOUT_OBC),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))) !=0 THEN
  ROUND(((DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_REGION_TONN),'9999999999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(EXP_REGION_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_REGION_TONN),'9999999999999999.99'))) / DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(EXP_WITHOUT_OBC),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_WITHOUT_OBC),'9999999999999999.99'))))*100),2) 
  ELSE 
  0 
  END expRegionDev,
  DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRANS_REGION_TONN),'9999999999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(TRANS_REGION_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRANS_REGION_TONN),'9999999999999999.99'))) transRegionTonn,
  
  CASE WHEN DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99')))!=0 THEN 
  ROUND(((DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRANS_REGION_TONN),'9999999999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(TRANS_REGION_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRANS_REGION_TONN),'9999999999999999.99')))/ DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRNS_WITHOUT_OBC),'9999999999999999.99')))) *100),2) 
  ELSE 0
  END transRegionDev
FROM AA_DAILY_ROLLING
WHERE REGION_NAME IS NOT NULL
AND TO_CHAR(TO_DATE(month_name_region,'MONYYYY'),'MONYYYY')=#monthList#
GROUP BY month_name_REGION, REGION_NAME
ORDER BY REGION_NAME
</select>
<select id="fetchTotalRegionRollingList" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">
SELECT 
REGION_NAME regionName,
decode(trunc(TRIM(to_char(SUM(IMP_REGION_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_REGION_TONN),'9999999999999999.99')), TRIM(to_char(SUM(IMP_REGION_TONN),'9999999999999999.99'))) impRegionTonnTtl,
decode(trunc(TRIM(to_char(SUM(IMP_REGION_DEV),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(IMP_REGION_DEV),'9999999999999999.99')), TRIM(to_char(SUM(IMP_REGION_DEV),'9999999999999999.99'))) impRegionDevTtl,
decode(trunc(TRIM(to_char(SUM(EXP_REGION_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_REGION_TONN),'9999999999999999.99')), TRIM(to_char(SUM(EXP_REGION_TONN),'9999999999999999.99'))) expRegionTonnTtl,
decode(trunc(TRIM(to_char(SUM(EXP_REGION_DEV),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(EXP_REGION_DEV),'9999999999999999.99')), TRIM(to_char(SUM(EXP_REGION_DEV),'9999999999999999.99'))) expRegionDevTtl,
decode(trunc(TRIM(to_char(SUM(TRANS_REGION_TONN),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_REGION_TONN),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_REGION_TONN),'9999999999999999.99'))) transRegionTonnTtl,
decode(trunc(TRIM(to_char(SUM(TRANS_REGION_DEV),'9999999999999999.99'))),0,0|| TRIM(to_char(SUM(TRANS_REGION_DEV),'9999999999999999.99')), TRIM(to_char(SUM(TRANS_REGION_DEV),'9999999999999999.99'))) transRegionDevTtl
FROM GT_AA_DAILY_ROLLING
WHERE REGION_NAME IS NOT NULL
AND substr(month_name_region,3,3)=#monthList#
and region_name='TOTAL'
GROUP BY  month_name_REGION, region_name
order by region_name
</select>
<select id="fetchMonthName" parameterClass="java.lang.String"	resultClass="java.lang.String">
select TO_CHAR(TO_DATE(#monthList#,'MON'),'MONYY') FROM DUAL</select>
<!--ChargeReports Starts-->
<!--charge Report for ASD -->

<parameterMap id="chargeReport" class="map" >
		<parameter property="P_MONTH_NAME" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="P_AGENT_NAME" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
</parameterMap>

<parameterMap id="chargeReportParam" class="map" >
		<parameter property="P_MONTH_NAME" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
</parameterMap>
<procedure id="proc_charge_report_asd" parameterMap="chargeReport" >
			{call PKG_CHARGING_REPT.SP_LAYOUT_ASD(?,?)}
</procedure>
<procedure id="proc_charge_report_asd2" parameterMap="chargeReport" >
			{call PKG_CHARGING_REPT.SP_LAYOUT_ASD2(?,?)}
</procedure>

<select id="viewChargeReportASD" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT TO_CHAR(ASD_DATE, 'DD-MON-YY') AS as_date, 
AGENT_NAME AS agent_name, 
decode(trunc(TRIM(to_char(IMP_BULK,'999999999.99'))),0,0|| TRIM(to_char(IMP_BULK,'999999999.99')),TRIM(to_char(IMP_BULK,'999999999.99'))) AS imp_bulk, 
IMP_PPK AS imp_ppk,
decode(trunc(TRIM(to_char(EXP_BULK,'999999999.99'))),0,0|| TRIM(to_char(EXP_BULK,'999999999.99')),TRIM(to_char(EXP_BULK,'999999999.99'))) AS exp_bulk, 
EXP_PPK AS exp_ppk 
FROM GT_REPT_CHARGE_ASD		
</select>


<select id="viewChargeReportASDImpBulk" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT TO_CHAR(ASD_DATE,'DDMONYY') as_date,
AGENT_NAME agent_name,
AIRLINE airline,
FLT_KEY fltKey,
Decode(FLT_TYPE,'A','I','D','E','I') flowType,
AWB_NO awbNo,
to_number(IMP_BULK_PCS) as imp_bulkPcs,
to_number(to_char(IMP_BULK,'999999999999999999999999990.99'),'999999999999999999999999990.99') imp_bulkWt,
to_number(AWB_PCS) as awbPcs,
to_number(to_char(AWB_WT,'999999999999999999999999990.99'),'999999999999999999999999990.99') awbWt
FROM GT_REPT_CHARGE_ASD WHERE TYPE='IMP_BULK'
ORDER BY AGENT_NAME,ASD_DATE,AWB_NO
</select>

<select id="viewChargeReportASD2Imp" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT TO_CHAR(ASD_DATE,'DDMONYY') as_date,
AGENT_NAME agent_name,
AIRLINE airline,
FLT_KEY fltKey,
Decode(FLT_TYPE,'A','I','D','E','I') flowType,
AWB_NO awbNo,
to_number(IMP_PCS) as imp_bulkPcs,
to_number(to_char(IMP_WT,'999999999999999999999999990.99'),'999999999999999999999999990.99') imp_bulkWt
FROM GT_REPT_CHARGE_ASD2 WHERE TYPE='IMPORT'
ORDER BY AGENT_NAME,ASD_DATE,AWB_NO
</select>

<select id="viewChargeReportASDImpPPK" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT * FROM (SELECT TO_CHAR(ASD_DATE,'DDMONYY') as_date,
AGENT_NAME agent_name,
AIRLINE airline,
FLT_KEY fltKey,
FLT_TYPE flowType,
ULD_KEY uldKey,
AWB_NO awbNo,
to_number(IMP_PPK_PCS) imp_ppkPcs,
to_number(to_char(imp_ppk,'999999999999999999999999990.99'),'999999999999999999999999990.99') imp_ppkWt,
to_number(AWB_PCS) as awbPcs,
to_number(to_char(AWB_WT,'999999999999999999999999990.99'),'999999999999999999999999990.99') awbWt,
TO_NUMBER(0) imp_ppkUldCnt,
'2Details' flag
FROM GT_REPT_CHARGE_ASD WHERE TYPE='IMP_PPK'
UNION
SELECT TO_CHAR(ASD_DATE,'DDMONYY') as_date,
AGENT_NAME agent_name,
NULL airline,
NULL fltKey,
NULL flowType,
NULL uldKey,
NULL awbNo,
TO_NUMBER(0) imp_ppkPcs,
TO_NUMBER(0.00,'999999999999999999999999990.99') imp_ppkWt,
to_number(0) as awbPcs,
to_number(0.00,'999999999999999999999999990.99') awbWt,
TO_NUMBER(COUNT(distinct ULD_KEY)) imp_ppkUldCnt,
'1Header' flag
FROM GT_REPT_CHARGE_ASD WHERE TYPE='IMP_PPK'
GROUP BY ASD_DATE,AGENT_NAME)
ORDER BY AGENT_NAME,as_date,flag,awbNo
</select>

<select id="viewChargeReportASDExpBulk" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT TO_CHAR(ASD_DATE,'DDMONYY') as_date,
AGENT_NAME agent_name,
RCL_NO rclNo,
FLT_TYPE flowType,
AWB_NO awbNo,
to_number(EXP_BULK_PCS) exp_bulkPcs,
to_number(to_char(EXP_BULK,'999999999999999999999999990.99'),'999999999999999999999999990.99') exp_bulkWt,
to_number(AWB_PCS) as awbPcs,
to_number(to_char(AWB_WT,'999999999999999999999999990.99'),'999999999999999999999999990.99') awbWt,
shpr_name shpr_name,
csgne_name csgne_name,
CAR_AGENT  car_agent  ,
car_CODE carAgentCode,
    AGT_CODE agentCode

FROM GT_REPT_CHARGE_ASD WHERE TYPE='EXP_BULK'
ORDER BY AGENT_NAME,ASD_DATE,AWB_NO
</select>

<select id="viewChargeReportASD2Exp" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT TO_CHAR(ASD_DATE,'DDMONYY') as_date,
  AGENT_NAME agent_name,
  RCL_NO rclNo,
  FLT_TYPE flowType,
  AWB_NO awbNo,
  to_number(EXP_PCS) exp_bulkPcs,
  to_number(to_char(EXP_WT,'999999999999999999999999990.99'),'999999999999999999999999990.99') exp_bulkWt,
  shpr_name shpr_name,
csgne_name csgne_name,
CAR_AGENT  car_agent,
car_CODE carAgentCode,
    AGT_CODE agentCode
  
FROM GT_REPT_CHARGE_ASD2
WHERE TYPE='EXPORT'
ORDER BY AGENT_NAME,
  ASD_DATE,
  AWB_NO 
</select>

<select id="viewChargeReportASDExpPPK" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
select * from (
SELECT TO_CHAR(ASD_DATE,'DDMONYY') as_date,
AGENT_NAME agent_name,
RCL_NO rclNo,
FLT_TYPE flowType,
ULD_KEY uldKey,
AWB_NO awbNo,
to_number(EXP_PPK_PCS) exp_ppkPcs,
to_number(to_char(exp_ppk,'999999999999999999999999990.99'),'999999999999999999999999990.99') exp_ppkWt ,
to_number(AWB_PCS) as awbPcs,
to_number(to_char(AWB_WT,'999999999999999999999999990.99'),'999999999999999999999999990.99') awbWt,
TO_NUMBER(0) exp_ppkUldCnt ,
'2Details' flag,
shpr_name shpr_name,
csgne_name csgne_name,
CAR_AGENT  car_agent ,
car_CODE carAgentCode,
    AGT_CODE agentCode 
FROM GT_REPT_CHARGE_ASD WHERE TYPE='EXP_PPK'
union
SELECT TO_CHAR(ASD_DATE,'DDMONYY') as_date,
AGENT_NAME agent_name,
null rclNo,
null flowType,
null uldKey,
null awbNo,
TO_NUMBER(0) exp_ppkPcs,
TO_NUMBER(0.00,'999999999999999999999999990.99') exp_ppkWt ,
to_number(0) as awbPcs,
to_number(0.00,'999999999999999999999999990.99') awbWt,
(SELECT SUM(uld_key) FROM  
(SELECT COUNT(DISTINCT uld_key) uld_key,ASD_DATE,AGENT_NAME,RCL_NO
FROM GT_REPT_CHARGE_ASD
WHERE TYPE='EXP_PPK'
GROUP BY ASD_DATE,AGENT_NAME,RCL_NO)
WHERE ASD_DATE=A.ASD_DATE
AND AGENT_NAME=A.AGENT_NAME
GROUP BY ASD_DATE,AGENT_NAME
) exp_ppkUldCnt ,
'1Header' flag,
null shpr_name,
null csgne_name,
NULL  car_agent  ,
NULL carAgentCode,
AGT_CODE agentCode
FROM GT_REPT_CHARGE_ASD A WHERE TYPE='EXP_PPK'
)
ORDER BY AGENT_NAME,as_date,flag,CAR_AGENT,awbNo		
</select>



<select id="viewChargeReportASDTtl" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT 
decode(trunc(TRIM(to_char(sum(IMP_BULK),'999999999.99'))),0,0|| TRIM(to_char(sum(IMP_BULK),'999999999.99')),TRIM(to_char(sum(IMP_BULK),'999999999.99'))) AS ttl_imp_bulk, 
sum(IMP_PPK) AS ttl_imp_ppk, 
decode(trunc(TRIM(to_char(sum(EXP_BULK),'999999999.99'))),0,0|| TRIM(to_char(sum(EXP_BULK),'999999999.99')),TRIM(to_char(sum(EXP_BULK),'999999999.99'))) AS ttl_exp_bulk, 
sum(EXP_PPK) AS ttl_exp_ppk 
FROM GT_REPT_CHARGE_ASD		
</select>

<!--charge Report for Flyking -->
<procedure id="proc_charge_report_flyking" parameterMap="chargeReportParam" >
			{call PKG_CHARGING_REPT.SP_LAYOUT_FLYKING(?)}
</procedure>
<select id="viewChargeReportFlyKing" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT TO_CHAR(FLYKING_DATE, 'DD-MON-YY')AS as_date,
decode(trunc(TRIM(to_char(EXP_BULK,'999999999.99'))),0,0|| TRIM(to_char(EXP_BULK,'999999999.99')),TRIM(to_char(EXP_BULK,'999999999.99'))) AS exp_bulk,
decode(trunc(TRIM(to_char(TRANSIT_BULK,'999999999.99'))),0,0|| TRIM(to_char(TRANSIT_BULK,'999999999.99')), TRIM(to_char(TRANSIT_BULK,'999999999.99'))) AS transitBulk,
decode(trunc(trim(to_char(if_bulk,'999999999.99'))),0,0|| trim(to_char(if_bulk,'999999999.99')),trim(to_char(if_bulk,'999999999.99'))) as ifBulk,
decode(trunc(trim(to_char(transit_ppk_kg,'999999999.99'))),0,0|| trim(to_char(transit_ppk_kg,'999999999.99')),trim(to_char(transit_ppk_kg,'999999999.99'))) as transitPpkKg,
transit_ppk_uld as transitPpkUld,
decode(trunc(trim(to_char(OUT_TRANSIT_NBK_KG,'999999999.99'))),0,0|| trim(to_char(OUT_TRANSIT_NBK_KG,'999999999.99')),trim(to_char(OUT_TRANSIT_NBK_KG,'999999999.99'))) as outTrnNbkKg,
out_transit_nbk_uld as outTrnNbkUld,
decode(trunc(TRIM(to_char(NVL(OFF_BULK_PRCS,0),'999999999.99'))),0,0|| TRIM(to_char(NVL(OFF_BULK_PRCS,0),'999999999.99')),TRIM(to_char(NVL(OFF_BULK_PRCS,0),'999999999.99')))AS offBulkPrcs,
decode(trunc(trim(to_char(nvl(off_bulk_wprcs,0),'999999999.99'))),0,0|| trim(to_char(nvl(off_bulk_wprcs,0),'999999999.99')),trim(to_char(nvl(off_bulk_wprcs,0),'999999999.99'))) as offBulkWprcs,
decode(trunc(trim(to_char(nvl(offload_ppk_kg,0),'999999999.99'))),0,0|| trim(to_char(nvl(offload_ppk_kg,0),'999999999.99')),trim(to_char(nvl(offload_ppk_kg,0),'999999999.99'))) as offPpkKg,
offload_ppk_uld as offPpkUld,
decode(trunc(trim(to_char(nvl(offload_trn_nbk_kg,0),'999999999.99'))),0,0|| trim(to_char(nvl(offload_trn_nbk_kg,0),'999999999.99')),trim(to_char(nvl(offload_trn_nbk_kg,0),'999999999.99'))) as offTrnNbkKg,
offload_trn_nbk_uld as offTrnNbkUld,
decode(trunc(trim(to_char(xray_before_rcl,'999999999.99'))),0,0|| trim(to_char(xray_before_rcl,'999999999.99')),trim(to_char(xray_before_rcl,'999999999.99'))) as xrayRcl,
decode(trunc(trim(to_char(XRAY_JO_LCA_SHP,'999999999.99'))),0,0|| trim(to_char(XRAY_JO_LCA_SHP,'999999999.99')),trim(to_char(XRAY_JO_LCA_SHP,'999999999.99'))) as xrayJoLca,
decode(trunc(TRIM(to_char(XRAY_JO_TRN_SHP,'999999999.99'))),0,0|| TRIM(to_char(XRAY_JO_TRN_SHP,'999999999.99')),TRIM(to_char(XRAY_JO_TRN_SHP,'999999999.99'))) AS XrayJoTrn,
decode(trunc(TRIM(to_char(TRNS_MAIL_INBOUND,'999999999.99'))),0,0|| TRIM(to_char(TRNS_MAIL_INBOUND,'999999999.99')),TRIM(to_char(TRNS_MAIL_INBOUND,'999999999.99'))) AS trnsMailInbound,
decode(trunc(trim(to_char(trns_mail_outbound,'999999999.99'))),0,0|| trim(to_char(trns_mail_outbound,'999999999.99')),trim(to_char(trns_mail_outbound,'999999999.99'))) as trnsMailOutbound, 
decode(trunc(trim(to_char(tm_off_bulk_prcs,'999999999.99'))),0,0|| trim(to_char(tm_off_bulk_prcs,'999999999.99')),trim(to_char(tm_off_bulk_prcs,'999999999.99'))) as offTmBulkPrcs,
decode(trunc(TRIM(to_char(TM_OFF_BULK_WPRCS,'999999999.99'))),0,0|| TRIM(to_char(TM_OFF_BULK_WPRCS,'999999999.99')),TRIM(to_char(TM_OFF_BULK_WPRCS,'999999999.99'))) AS offTMBulkWprcs, 
decode(trunc(TRIM(to_char(REBUILT,'999999999.99'))),0,0|| TRIM(to_char(REBUILT,'999999999.99')),TRIM(to_char(REBUILT,'999999999.99'))) AS reBuilt,
decode(trunc(TRIM(to_char(ITT_OUT_BULK_PPK,'999999999.99'))),0,0|| TRIM(to_char(ITT_OUT_BULK_PPK,'999999999.99')),TRIM(to_char(ITT_OUT_BULK_PPK,'999999999.99')))  AS ittOutBulk,
decode(trunc(TRIM(to_char(ITT_IN_BULK_PPK,'999999999.99'))),0,0|| TRIM(to_char(ITT_IN_BULK_PPK,'999999999.99')),TRIM(to_char(ITT_IN_BULK_PPK,'999999999.99'))) AS ittInBulk,
wipp as wipp,
fcc as fcc
FROM GT_REPT_CHARGE_FLYKING
</select>	

<select id="viewChargeReportFlyKingTtl" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">    
SELECT 
decode(trunc(TRIM(to_char(sum(EXP_BULK),'999999999.99'))),0,0|| TRIM(to_char(sum(EXP_BULK),'999999999.99')),TRIM(to_char(sum(EXP_BULK),'999999999.99'))) AS ttl_exp_bulk,
decode(trunc(TRIM(to_char(sum(TRANSIT_BULK),'999999999.99'))),0,0|| TRIM(to_char(sum(TRANSIT_BULK),'999999999.99')), TRIM(to_char(sum(TRANSIT_BULK),'999999999.99'))) AS ttl_transitBulk,
decode(trunc(trim(to_char(sum(if_bulk),'999999999.99'))),0,0|| trim(to_char(sum(if_bulk),'999999999.99')),trim(to_char(sum(if_bulk),'999999999.99'))) as ttl_ifBulk,
decode(trunc(trim(to_char(sum(transit_ppk_kg),'999999999.99'))),0,0|| trim(to_char(sum(transit_ppk_kg),'999999999.99')),trim(to_char(sum(transit_ppk_kg),'999999999.99'))) as ttl_transitPpkKg,
sum(transit_ppk_uld) as ttl_transitPpkUld,
decode(trunc(trim(to_char(sum(OUT_TRANSIT_NBK_KG),'999999999.99'))),0,0|| trim(to_char(sum(OUT_TRANSIT_NBK_KG),'999999999.99')),trim(to_char(sum(OUT_TRANSIT_NBK_KG),'999999999.99'))) as ttl_outTrnNbkKg,
sum(out_transit_nbk_uld) as ttl_outTrnNbkUld,
decode(trunc(TRIM(to_char(sum(NVL(OFF_BULK_PRCS,0)),'999999999.99'))),0,0|| TRIM(to_char(NVL(sum(OFF_BULK_PRCS),0),'999999999.99')),TRIM(to_char(NVL(sum(OFF_BULK_PRCS),0),'999999999.99')))AS ttl_offBulkPrcs,
decode(trunc(trim(to_char(nvl(sum(off_bulk_wprcs),0),'999999999.99'))),0,0|| trim(to_char(nvl(sum(off_bulk_wprcs),0),'999999999.99')),trim(to_char(nvl(sum(off_bulk_wprcs),0),'999999999.99'))) as ttl_offBulkWprcs,
decode(trunc(trim(to_char(nvl(sum(offload_ppk_kg),0),'999999999.99'))),0,0|| trim(to_char(nvl(sum(offload_ppk_kg),0),'999999999.99')),trim(to_char(nvl(sum(offload_ppk_kg),0),'999999999.99'))) as ttl_offPpkKg,
sum(offload_ppk_uld) as ttl_offPpkUld,
decode(trunc(trim(to_char(nvl(sum(offload_trn_nbk_kg),0),'999999999.99'))),0,0|| trim(to_char(nvl(sum(offload_trn_nbk_kg),0),'999999999.99')),trim(to_char(nvl(sum(offload_trn_nbk_kg),0),'999999999.99'))) as ttl_offTrnNbkKg,
sum(offload_trn_nbk_uld) as ttl_offTrnNbkUld,
decode(trunc(trim(to_char(sum(xray_before_rcl),'999999999.99'))),0,0|| trim(to_char(sum(xray_before_rcl),'999999999.99')),trim(to_char(sum(xray_before_rcl),'999999999.99'))) as ttl_xrayRcl,
decode(trunc(trim(to_char(sum(XRAY_JO_LCA_SHP),'999999999.99'))),0,0|| trim(to_char(sum(XRAY_JO_LCA_SHP),'999999999.99')),trim(to_char(sum(XRAY_JO_LCA_SHP),'999999999.99'))) as ttl_xrayJoLca,
decode(trunc(TRIM(to_char(sum(XRAY_JO_TRN_SHP),'999999999.99'))),0,0|| TRIM(to_char(sum(XRAY_JO_TRN_SHP),'999999999.99')),TRIM(to_char(sum(XRAY_JO_TRN_SHP),'999999999.99'))) AS ttl_XrayJoTrn,
decode(trunc(TRIM(to_char(sum(TRNS_MAIL_INBOUND),'999999999.99'))),0,0|| TRIM(to_char(sum(TRNS_MAIL_INBOUND),'999999999.99')),TRIM(to_char(sum(TRNS_MAIL_INBOUND),'999999999.99'))) AS ttl_trnsMailInbound,
decode(trunc(trim(to_char(sum(trns_mail_outbound),'999999999.99'))),0,0|| trim(to_char(sum(trns_mail_outbound),'999999999.99')),trim(to_char(sum(trns_mail_outbound),'999999999.99'))) as ttl_trnsMailOutbound, 
decode(trunc(trim(to_char(sum(tm_off_bulk_prcs),'999999999.99'))),0,0|| trim(to_char(sum(tm_off_bulk_prcs),'999999999.99')),trim(to_char(sum(tm_off_bulk_prcs),'999999999.99'))) as ttl_offTmBulkPrcs,
decode(trunc(TRIM(to_char(sum(TM_OFF_BULK_WPRCS),'999999999.99'))),0,0|| TRIM(to_char(sum(TM_OFF_BULK_WPRCS),'999999999.99')),TRIM(to_char(sum(TM_OFF_BULK_WPRCS),'999999999.99'))) AS ttl_offTMBulkWprcs, 
decode(trunc(TRIM(to_char(sum(REBUILT),'999999999.99'))),0,0|| TRIM(to_char(sum(REBUILT),'999999999.99')),TRIM(to_char(sum(REBUILT),'999999999.99'))) AS ttl_reBuilt,
decode(trunc(TRIM(to_char(sum(ITT_OUT_BULK_PPK),'999999999.99'))),0,0|| TRIM(to_char(sum(ITT_OUT_BULK_PPK),'999999999.99')),TRIM(to_char(sum(ITT_OUT_BULK_PPK),'999999999.99')))  AS ttl_ittOutBulk,
decode(trunc(trim(to_char(sum(itt_in_bulk_ppk),'999999999.99'))),0,0|| trim(to_char(sum(itt_in_bulk_ppk),'999999999.99')),trim(to_char(sum(itt_in_bulk_ppk),'999999999.99'))) as ttl_ittinbulk,
sum(wipp) as ttlWipp,
sum(fcc) as ttlFcc
FROM GT_REPT_CHARGE_FLYKING
    </select>
<!--charge Report for AS -->

<procedure id="proc_charge_report_as" parameterMap="chargeReportParam" >
			{call PKG_CHARGING_REPT.SP_LAYOUT_AS(?)}
</procedure>
<select id="viewChargeReportAS" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT TO_CHAR(AS_DATE, 'DD-MON-YY') AS as_date,
decode(trunc(TRIM(to_char(IMP_BULK,'999999999.99'))),0,0|| TRIM(to_char(IMP_BULK,'999999999.99')),TRIM(to_char(IMP_BULK,'999999999.99'))) AS imp_bulk,
decode(trunc(trim(to_char(nvl(imp_transit_bulk,0),'999999999.99'))),0,0|| trim(to_char(nvl(imp_transit_bulk,0),'999999999.99')),trim(to_char(nvl(imp_transit_bulk,0),'999999999.99'))) as impTransitBulk,
decode(trunc(trim(to_char(nvl(imp_transit_nbk_kg,0),'999999999.99'))),0,0|| trim(to_char(nvl(imp_transit_nbk_kg,0),'999999999.99')),trim(to_char(nvl(imp_transit_nbk_kg,0),'999999999.99'))) as impTransitNbkKg,
imp_transit_nbk_uld impTransitNbkUld,
decode(trunc(trim(to_char(nvl(imp_transit_ppk_kg,0),'999999999.99'))),0,0|| trim(to_char(nvl(imp_transit_ppk_kg,0),'999999999.99')),trim(to_char(nvl(imp_transit_ppk_kg,0),'999999999.99'))) as impTransitPPKKg,
IMP_TRANSIT_PPK_ULD AS impTransitPPKUld,
decode(trunc(trim(to_char(china_direct_bu,'999999999.99'))),0,0|| trim(to_char(china_direct_bu,'999999999.99')),trim(to_char(china_direct_bu,'999999999.99'))) as chinaDirectBU,
decode(trunc(TRIM(to_char(IF_SHP_UPS,'999999999.99'))),0,0|| TRIM(to_char(IF_SHP_UPS,'999999999.99')),TRIM(to_char(IF_SHP_UPS,'999999999.99'))) AS ifShpUps,
DECODE(TRUNC(TRIM(TO_CHAR(CBX_SHIPMENT,'999999999.99'))),0,0 || TRIM(TO_CHAR(CBX_SHIPMENT,'999999999.99')),TRIM(TO_CHAR(CBX_SHIPMENT,'999999999.99'))) AS cbxShipment 
FROM GT_REPT_CHARGE_AS		
</select>

<select id="viewChargeReportYatHo" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT CURRDATE yatHoDate,bulkTonnageYatHo FROM 
(SELECT TO_CHAR(trunc(TO_DATE(#P_MONTH_NAME#,'MONYYYY'),'MONTH')+(ROWNUM-1),'DDMONYY')  CURRDATE
FROM DUAL
CONNECT BY ROWNUM &lt;= TO_CHAR(LAST_DAY(TO_CHAR(trunc(TO_DATE(#P_MONTH_NAME#,'MONYYYY'),'MONTH'),'DDMONYY')),'DD')) DATELIST
LEFT JOIN 
(SELECT NVL((TRIM(TO_CHAR(SUM(B.ASSIGNED_WT),'999999999999999999.99'))),0) bulkTonnageYatHo,TO_CHAR(D.ACT_DATE,'DDMONYY') yatHoDate
FROM 
FLT_OPR D ,
FLT_OPR_EVENTS E,
AWB C ,
EXP_PMANIFEST_ULD A,
EXP_PMANIFEST_ULD_AWB B
WHERE A.FLT_KEY                                             = B.FLT_KEY
AND A.FLT_DATE                                              = B.FLT_DATE
AND A.ULD_BT_NO                                             = B.ULD_BT_NO
AND A.BLDUP_COMPLETE                                        = 'Y'
AND A.FLT_KEY                                               = D.FLT_KEY
AND A.FLT_DATE                                              = D.SCH_DATE
AND B.AWB_NO                                                = C.AWB_NO
AND B.AWB_DATE                                              = C.AWB_DATE
AND D.TR_NO                                                 = E.TR_NO
AND E.FLT_CLS_YN                                            = 'Y'
AND C.AWB_TYPE='E'
AND D.ACT_DATE                                             IS NOT NULL
AND D.ACT_TIME                                             IS NOT NULL
AND TO_CHAR(D.ACT_DATE,'MONYYYY')=#P_MONTH_NAME#
AND D.FLT_TYPE                                              = 'D'
and d.carr_code in (select distinct code from mast_carrier where OWNED_CARR = 'Y' and HANDLED_BY_TERMINAL = 'CPCT' and nvl(DUMMY_CARR,'N') = 'N' )
AND A.PPK_TYPE                                              = 'B'
AND (C.SPL_CODE1='EHU'
OR C.SPL_CODE2='EHU'
OR C.SPL_CODE3='EHU'
OR C.SPL_CODE4='EHU'
OR C.SPL_CODE5='EHU'
OR C.SPL_CODE6='EHU'
OR C.SPL_CODE7='EHU'
OR C.SPL_CODE8='EHU'
OR C.SPL_CODE9='EHU')
GROUP BY TO_CHAR(D.ACT_DATE,'DDMONYY')) 
ON DATELIST.CURRDATE=yatHoDate
ORDER BY TO_DATE(CURRDATE,'DDMONYY')
</select>

<select id="viewChargeReportYatHoTTL" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT NVL(TRIM(TO_CHAR(SUM(B.ASSIGNED_WT),'999999999999999999.99')),0) ttlBulkTonnageYatHo
FROM FLT_OPR D ,
FLT_OPR_EVENTS E,
AWB C ,
EXP_PMANIFEST_ULD A,
EXP_PMANIFEST_ULD_AWB B
WHERE A.FLT_KEY                                             = B.FLT_KEY
AND A.FLT_DATE                                              = B.FLT_DATE
AND A.ULD_BT_NO                                             = B.ULD_BT_NO
AND A.BLDUP_COMPLETE                                        = 'Y'
AND A.FLT_KEY                                               = D.FLT_KEY
AND A.FLT_DATE                                              = D.SCH_DATE
AND B.AWB_NO                                                = C.AWB_NO
AND B.AWB_DATE                                              = C.AWB_DATE
AND D.TR_NO                                                 = E.TR_NO
AND E.FLT_CLS_YN                                            = 'Y'
AND C.AWB_TYPE='E'
AND D.ACT_DATE                                             IS NOT NULL
AND D.ACT_TIME                                             IS NOT NULL
AND TO_CHAR(D.ACT_DATE,'MONYYYY')=#P_MONTH_NAME#
AND D.FLT_TYPE                                              = 'D'
and d.carr_code in (select distinct code from mast_carrier where OWNED_CARR = 'Y' and HANDLED_BY_TERMINAL = 'CPCT' and nvl(DUMMY_CARR,'N') = 'N' )
AND A.PPK_TYPE                                              = 'B'
AND (C.SPL_CODE1='EHU'
OR C.SPL_CODE2='EHU'
OR C.SPL_CODE3='EHU'
OR C.SPL_CODE4='EHU'
OR C.SPL_CODE5='EHU'
OR C.SPL_CODE6='EHU'
OR C.SPL_CODE7='EHU'
OR C.SPL_CODE8='EHU'
OR C.SPL_CODE9='EHU')	
</select>

<select id="viewChargeReportASTtl" parameterClass="cargo.cms.export.report.bo.ChargeReportBO" resultClass="cargo.cms.export.report.bo.ChargeReportBO">				
SELECT
decode(trunc(TRIM(to_char(sum(IMP_BULK),'999999999.99'))),0,0|| TRIM(to_char(sum(IMP_BULK),'999999999.99')),TRIM(to_char(sum(IMP_BULK),'999999999.99'))) AS ttl_imp_bulk,
decode(trunc(trim(to_char(nvl(sum(imp_transit_bulk),0),'999999999.99'))),0,0|| trim(to_char(nvl(sum(imp_transit_bulk),0),'999999999.99')),trim(to_char(nvl(sum(imp_transit_bulk),0),'999999999.99'))) as ttl_impTransitBulk,
decode(trunc(trim(to_char(nvl(sum(imp_transit_nbk_kg),0),'999999999.99'))),0,0|| trim(to_char(nvl(sum(imp_transit_nbk_kg),0),'999999999.99')),trim(to_char(nvl(sum(imp_transit_nbk_kg),0),'999999999.99'))) as ttl_impTransitNbkKg,
sum(imp_transit_nbk_uld) ttl_impTransitNbkUld,
decode(trunc(trim(to_char(nvl(sum(imp_transit_ppk_kg),0),'999999999.99'))),0,0|| trim(to_char(nvl(sum(imp_transit_ppk_kg),0),'999999999.99')),trim(to_char(nvl(sum(imp_transit_ppk_kg),0),'999999999.99'))) as ttl_impTransitPPKKg,
sum(IMP_TRANSIT_PPK_ULD) AS ttl_impTransitPPKUld,
decode(trunc(trim(to_char(sum(china_direct_bu),'999999999.99'))),0,0|| trim(to_char(sum(china_direct_bu),'999999999.99')),trim(to_char(sum(china_direct_bu),'999999999.99'))) as ttl_chinaDirectBU,
decode(trunc(TRIM(to_char(sum(IF_SHP_UPS),'999999999.99'))),0,0|| TRIM(to_char(sum(IF_SHP_UPS),'999999999.99')),TRIM(to_char(sum(IF_SHP_UPS),'999999999.99'))) AS ttl_ifShpUps,
 DECODE(TRUNC(TRIM(TO_CHAR(SUM(CBX_SHIPMENT),'999999999.99'))),0,0
  || TRIM(TO_CHAR(SUM(CBX_SHIPMENT),'999999999.99')),TRIM(TO_CHAR(SUM(CBX_SHIPMENT),'999999999.99'))) AS ttlcbxShipment 
FROM GT_REPT_CHARGE_AS	
</select>

<!--ChargeReports Ends-->
<!-- Changed for QR -->
<select id="sqlCPCTCarrList"  resultClass="cargo.cms.afw.bo.MasterBO">
	SELECT CODE AS codeId, code_desc as codeDesc FROM  MAST_CARRIER where handled_by_terminal='CPCT' AND owned_carr='Y' order by CODE
</select>
<select id="sqlCPCTCarrListExcludeDummy"  resultClass="cargo.cms.afw.bo.MasterBO">
	SELECT CODE AS codeId, code_desc as codeDesc FROM  MAST_CARRIER 
	where handled_by_terminal='CPCT' AND owned_carr='Y' and DUMMY_CARR='N'  order by CODE
</select>
<select id="slaConfigurationType"  resultClass="cargo.cms.afw.bo.MasterBO">
	select CODE AS CODE,CODE_DESC AS CODE_DESC from mast_code_dtl where CODE_TYPE='SLA_CONFIG_TYPE' ORDER BY code_desc
</select>

 <select id="ShiftHandoverfltModList"  parameterClass="cargo.cms.export.report.bo.ShiftHandoverReportBO" resultClass="cargo.cms.export.report.bo.ShiftHandoverReportBO">
		SELECT WH_AREA as modules FROM MAST_WH_AREA WHERE MODULE_YN = 'Y' ORDER BY WH_AREA_DESC
	</select>
<!-- Changed for QR -->
<select id="sqlCPCTGroupCarrList"  resultClass="cargo.cms.afw.bo.MasterBO">
	  SELECT a.GRP_CARR_CODE AS codeId,a.GRP_CARR_CODE AS codeDesc FROM MAST_CARR_GRP a,MAST_CARRIER b
	  where b.CODE=a.GRP_CARR_CODE and b.handled_by_terminal='CPCT' AND b.owned_carr='Y' 
	  group by a.GRP_CARR_CODE, a.GRP_CARR_CODE
</select>
<!-- Added by Manorama for Daily Rolling Report:::Ends -->
<!-- Added by Manorama for Daily Tonnage Report::::Starts -->

<delete id="deleteDailytonnagedata" parameterClass="cargo.cms.export.bo.DailyTonnageBO">
delete from GT_aa_daily_tonn_rep
</delete>
	<parameterMap id="dailyTonnageParam" class="map" >
		<parameter property="currDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="jobParam" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>   
		<parameter property="jobRollingMonthParam" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	</parameterMap>

	<procedure id="proc_daily_tonnage" parameterMap="dailyTonnageParam" >
			{call PKG_DAILY_TONN_REP.REP_DAILY_TONN_REP(?,?,?)}
	</procedure>
<select id="fetchJobDailytonnageList" parameterClass="cargo.cms.export.bo.DailyTonnageBO" resultClass="cargo.cms.export.bo.DailyTonnageBO">
	SELECT null sno,
	NULL monthName,
  WEEK_NO weekNo,
  'Weekly Total' weekDay,
  null currYrDate,
  null prevYrDate ,
  null headerCurrYr ,
  null headerPrevYr ,
    NVL(TRIM(TO_CHAR(CURRIMP,'999999999999999990.99')),0.00) CURRYRIMPTON,
    NVL(TRIM(TO_CHAR(CURREXP,'999999999999999990.99')),0.00) CURRYREXPTON,
    NVL(TRIM(TO_CHAR(CURRTRN,'999999999999999990.99')),0.00) CURRYRTRNSTON,
    NVL(TRIM(TO_CHAR(CURRTTL,'999999999999999990.99')),0.00) sumOfCurrTon,
    NVL(TRIM(TO_CHAR(PREIMP,'999999999999999990.99')),0.00) PREVYRIMPTON,
    NVL(TRIM(TO_CHAR(PREEXP,'999999999999999990.99')),0.00) PREVYREXPTON,
    NVL(TRIM(TO_CHAR(PRETRN,'999999999999999990.99')),0.00) PREVYRTRNSTON,
    NVL(TRIM(TO_CHAR(PRETTL,'999999999999999990.99')),0.00) SUMOFPREVTON,
    NVL(CASE
    WHEN (CURRIMP='0'
    AND PREIMP  ='0')
    THEN '0.00'||'%'
    WHEN (CURRIMP!='0'
    AND PREIMP   ='0')
    THEN 'NA'
    WHEN (CURRIMP='0'
    AND PREIMP! ='0')
    THEN '-100.00'||'%'
    WHEN (CURRIMP!='0'
    AND PREIMP!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURRIMP),'999999999999999999990.99'))-TRIM(TO_CHAR((PREIMP),'999999999999999999990.99')))/TRIM(TO_CHAR((PREIMP),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') DEVIATIONPERIMP,
    NVL(CASE
    WHEN (CURREXP='0'
    AND PREEXP  ='0')
    THEN '0.00'||'%'
    WHEN (CURREXP!='0'
    AND PREEXP   ='0')
    THEN 'NA'
    WHEN (CURREXP='0'
    AND PREEXP! ='0')
    THEN '-100.00'||'%'
    WHEN (CURREXP!='0'
    AND PREEXP!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURREXP),'999999999999999999990.99'))-TRIM(TO_CHAR((PREEXP),'999999999999999999990.99')))/TRIM(TO_CHAR((PREEXP),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') DEVIATIONPEREXP
    ,
    NVL(CASE
    WHEN (CURRTRN='0'
    AND PRETRN  ='0')
    THEN '0.00'||'%'
    WHEN (CURRTRN!='0'
    AND PRETRN   ='0')
    THEN 'NA'
    WHEN (CURRTRN='0'
    AND PRETRN! ='0')
    THEN '-100.00'||'%'
    WHEN (CURRTRN!='0'
    AND PRETRN!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURRTRN),'999999999999999999990.99'))-TRIM(TO_CHAR((PRETRN),'999999999999999999990.99')))/TRIM(TO_CHAR((PRETRN),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') deviationPerTrns
    ,
    NVL(CASE
    WHEN (CURRTTL='0'
    AND PRETTL  ='0')
    THEN '0.00'||'%'
    WHEN (CURRTTL!='0'
    AND PRETTL   ='0')
    THEN 'NA'
    WHEN (CURRTTL='0'
    AND PRETTL! ='0')
    THEN '-100.00'||'%'
    WHEN (CURRTTL!='0'
    AND PRETTL!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURRTTL),'999999999999999999990.99'))-TRIM(TO_CHAR((PRETTL),'999999999999999999990.99')))/TRIM(TO_CHAR((PRETTL),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') dailyDeviation
     FROM  
    ( SELECT A.WEEK_NO,A.MONTH_NAME,SUM(A.CURR_YEAR_TONN_IMP) CURRIMP,
      SUM(NVL(A.CURR_YEAR_TONN_EXP,0)) CURREXP,
      SUM(NVL(A.CURR_YEAR_TONN_TRAN,0)) CURRTRN,
      SUM(NVL(A.CURR_TONNAGE_TOTAL,0)) CURRTTL,
      (Z.PREIMP) PREIMP,
      (Z.PREEXP) PREEXP,
      (Z.PRETRN) PRETRN,
      (Z.PRETTL) PRETTL
      FROM  aa_daily_tonn_rep A
      LEFT JOIN (SELECT WEEK_NO,MONTH_NAME,
      SUM(NVL(PREV_YEAR_TONN_IMP,0)) PREIMP,
      SUM(NVL(PREV_YEAR_TONN_EXP,0)) PREEXP,
      SUM(NVL(PREV_YEAR_TONN_TRAN,0)) PRETRN,
      SUM(NVL(PREV_TONNAGE_TOTAL,0)) PRETTL
      FROM  aa_daily_tonn_rep 
      WHERE TO_DATE(MONTH_NAME,'MONYYYY')= TO_DATE(#monthYear#,'MONYYYY')  AND PREV_YEAR_DATE_IMP IS NOT NULL
     <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
      GROUP BY WEEK_NO,MONTH_NAME) Z
      ON  A.MONTH_NAME=Z.MONTH_NAME
      and a.week_no=z.week_no
      WHERE A.MONTH_NAME        =#monthYear#
  AND A.CURR_YEAR_DATE_IMP IS NOT NULL
     <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
    GROUP BY A.WEEK_NO, A.MONTH_NAME, (Z.PREIMP), (Z.PREEXP), (Z.PRETRN), (Z.PRETTL)
     )
     union all
       SELECT null sno,
       NULL monthName,
  WEEK_NO weekNo,
  null weekDay,
  null currYrDate,
  null prevYrDate ,
  null headerCurrYr ,
  null headerPrevYr ,
  null CURRYRIMPTON,
   null CURRYREXPTON,
    null CURRYRTRNSTON,
    null sumOfCurrTon,
    null PREVYRIMPTON,
    null PREVYREXPTON,
    null PREVYRTRNSTON,
    null SUMOFPREVTON,
    null DEVIATIONPERIMP,
    null DEVIATIONPEREXP ,
    null deviationPerTrns,
    null dailyDeviation
     FROM  
    ( SELECT A.WEEK_NO,A.MONTH_NAME,SUM(A.CURR_YEAR_TONN_IMP) CURRIMP,
      SUM(NVL(A.CURR_YEAR_TONN_EXP,0)) CURREXP,
      SUM(NVL(A.CURR_YEAR_TONN_TRAN,0)) CURRTRN,
      SUM(NVL(A.CURR_TONNAGE_TOTAL,0)) CURRTTL,
      (Z.PREIMP) PREIMP,
      (Z.PREEXP) PREEXP,
      (Z.PRETRN) PRETRN,
      (Z.PRETTL) PRETTL
      FROM  aa_daily_tonn_rep A
      LEFT JOIN (SELECT WEEK_NO,MONTH_NAME,
      SUM(NVL(PREV_YEAR_TONN_IMP,0)) PREIMP,
      SUM(NVL(PREV_YEAR_TONN_EXP,0)) PREEXP,
      SUM(NVL(PREV_YEAR_TONN_TRAN,0)) PRETRN,
      SUM(NVL(PREV_TONNAGE_TOTAL,0)) PRETTL
      FROM  aa_daily_tonn_rep 
      WHERE TO_DATE(MONTH_NAME,'MONYYYY')= TO_DATE(#monthYear#,'MONYYYY')  AND PREV_YEAR_DATE_IMP IS NOT NULL
     <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
      GROUP BY WEEK_NO,MONTH_NAME) Z
      ON  A.MONTH_NAME=Z.MONTH_NAME
      and a.week_no=z.week_no
      WHERE A.MONTH_NAME        =#monthYear#
  AND A.CURR_YEAR_DATE_IMP IS NOT NULL
     <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
    GROUP BY A.WEEK_NO, A.MONTH_NAME, (Z.PREIMP), (Z.PREEXP), (Z.PRETRN), (Z.PRETTL)
     )
  union all
  SELECT rownum sno,
  MONTH_NAME monthName,
  WEEK_NO weekNo,
  WEEK_DAY weekDay,
  TO_CHAR(to_date(CUURDATE,'DD-MON-YY'),'DDMONYY') currYrDate,
  TO_CHAR(to_date(PREDATE,'DD-MON-YY'),'DDMONYY') prevYrDate ,
  TO_CHAR(to_date(CUURDATE,'DD-MON-YY'),'YYYY') headerCurrYr ,
  TO_CHAR(to_date(PREDATE,'DD-MON-YY'),'YYYY') headerPrevYr ,
  TRIM(TO_CHAR(CURRIMP,'999999999999999990.99')) CURRYRIMPTON,
	TRIM(TO_CHAR(CURREXP,'999999999999999990.99')) CURRYREXPTON,
	TRIM(TO_CHAR(CURRTRN,'999999999999999990.99')) CURRYRTRNSTON,
	TRIM(TO_CHAR(CURRTTL,'999999999999999990.99')) sumOfCurrTon,
	TRIM(TO_CHAR(PREIMP,'999999999999999990.99')) PREVYRIMPTON,
	TRIM(TO_CHAR(PREEXP,'999999999999999990.99')) PREVYREXPTON,
	TRIM(TO_CHAR(PRETRN,'999999999999999990.99')) PREVYRTRNSTON,
	TRIM(TO_CHAR(PRETTL,'999999999999999990.99')) SUMOFPREVTON,
	  CASE
	    WHEN (CURRIMP='0'
	    AND PREIMP   ='0')
	    THEN '0.00'||'%'
	    WHEN (CURRIMP!='0'
	    AND PREIMP    ='0')
	    THEN 'NA'
	    WHEN (CURRIMP='0'
	    AND PREIMP!  ='0')
	    THEN '-100.00'||'%'
	    WHEN (CURRIMP!='0'
	    AND PREIMP!   ='0')
	    THEN 
	      trim(TO_CHAR((((TRIM(TO_CHAR((CURRIMP),'999999999999999999990.99'))-TRIM(TO_CHAR((PREIMP),'999999999999999999990.99')))/TRIM(TO_CHAR((PREIMP),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
	  END DEVIATIONPERIMP,
	  CASE
	    WHEN (CURREXP='0'
	    AND PREEXP   ='0')
	    THEN '0.00'||'%'
	    WHEN (CURREXP!='0'
	    AND PREEXP    ='0')
	    THEN 'NA'
	    WHEN (CURREXP='0'
	    AND PREEXP!  ='0')
	    THEN '-100.00'||'%'
	    WHEN (CURREXP!='0'
	    AND PREEXP!   ='0')
	    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURREXP),'999999999999999999990.99'))-TRIM(TO_CHAR((PREEXP),'999999999999999999990.99')))/TRIM(TO_CHAR((PREEXP),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
	  END DEVIATIONPEREXP ,
	  CASE
	    WHEN (CURRTRN='0'
	    AND PRETRN   ='0')
	    THEN '0.00'||'%'
	    WHEN (CURRTRN!='0'
	    AND PRETRN    ='0')
	    THEN 'NA'
	    WHEN (CURRTRN='0'
	    AND PRETRN!  ='0')
	    THEN '-100.00'||'%'
	    WHEN (CURRTRN!='0'
	    AND PRETRN!   ='0')
	    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURRTRN),'999999999999999999990.99'))-TRIM(TO_CHAR((PRETRN),'999999999999999999990.99')))/TRIM(TO_CHAR((PRETRN),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'    
	  END deviationPerTrns ,
	  CASE
	    WHEN (CURRTTL='0'
	    AND PRETTL   ='0')
	    THEN '0.00'||'%'
	    WHEN (CURRTTL!='0'
	    AND PRETTL    ='0')
	    THEN 'NA'
	    WHEN (CURRTTL='0'
	    AND PRETTL!  ='0')
	    THEN '-100.00'||'%'
	    WHEN (CURRTTL!='0'
	    AND PRETTL!   ='0')
	    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURRTTL),'999999999999999999990.99'))-TRIM(TO_CHAR((PRETTL),'999999999999999999990.99')))/TRIM(TO_CHAR((PRETTL),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
	  END dailyDeviation
	FROM
  (SELECT A.MONTH_NAME,
    A.WEEK_NO,
    A.WEEK_DAY,
    TO_CHAR(A.CURR_YEAR_DATE_IMP,'DDMONYY') CUURDATE,
    SUM(A.CURR_YEAR_TONN_IMP) CURRIMP,
    SUM(A.CURR_YEAR_TONN_EXP) CURREXP,
    SUM(A.CURR_YEAR_TONN_TRAN) CURRTRN,
    SUM(A.CURR_TONNAGE_TOTAL) CURRTTL,
    Z.PREIMP,
    Z.PREEXP,
    Z.PRETRN,
    Z.PRETTL,
    Z.PREDATE
  FROM aa_daily_tonn_rep A
  LEFT JOIN
    (SELECT SNO,
      MONTH_NAME,
      WEEK_NO,
      WEEK_DAY,
      SUM(PREV_YEAR_TONN_IMP) PREIMP,
      SUM(PREV_YEAR_TONN_EXP) PREEXP,
      SUM(PREV_YEAR_TONN_TRAN) PRETRN,
      SUM(PREV_TONNAGE_TOTAL) PRETTL,
      PREV_YEAR_DATE_IMP PREDATE
    FROM aa_daily_tonn_rep
    WHERE MONTH_NAME        =#monthYear#
    AND PREV_YEAR_DATE_IMP IS NOT NULL
    <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
    AND PREV_YEAR_DATE_IMP IS NOT NULL
    GROUP BY SNO,
      MONTH_NAME,
      WEEK_NO,
      WEEK_DAY,
      PREV_YEAR_DATE_IMP
    ) Z
  ON A.SNO                  =Z.SNO
  AND A.MONTH_NAME          =Z.MONTH_NAME
  AND A.WEEK_NO             =Z.WEEK_NO
  AND A.WEEK_DAY            =Z.WEEK_DAY
  WHERE A.MONTH_NAME        =#monthYear#
  AND A.CURR_YEAR_DATE_IMP IS NOT NULL
 <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
  GROUP BY a.MONTH_NAME,
    a.WEEK_NO,
    a.WEEK_DAY,
    TO_CHAR(a.CURR_YEAR_DATE_IMP,'DDMONYY'),
    Z.PREIMP,
    Z.PREEXP,
    Z.PRETRN,
    Z.PRETTL,
    Z.PREDATE
  ORDER BY TO_DATE(TO_CHAR(A.CURR_YEAR_DATE_IMP,'DDMONYY'),'DDMONYY')
  ) 
  order by weekno,sno,currYrDate,monthname,CURRYRIMPTON
  
</select>

<select id="fetchweelyTotaltonnageList" parameterClass="cargo.cms.export.bo.DailyTonnageBO" resultClass="cargo.cms.export.bo.DailyTonnageBO">
select 
     WEEK_NO weekNo, 
     to_number(to_char(sum(curr_tonnage_total),'99999999999.99'),'99999999999.99') dailyTonTotal,
     to_number(to_char(sum(prev_tonnage_total),'99999999999.99'),'99999999999.99') dailyTonPrev,
     case when (sum(curr_tonnage_total)='0' and sum(prev_tonnage_total)='0') then '0'
     when  (sum(curr_tonnage_total)!='0' and sum(prev_tonnage_total)='0') then '100'
     when  (sum(curr_tonnage_total)='0' and sum(prev_tonnage_total)!='0') then '-100'
     when  (sum(curr_tonnage_total)!='0' and sum(prev_tonnage_total)!='0') then to_char((((sum(curr_tonnage_total)-sum(prev_tonnage_total))/sum(prev_tonnage_total))*'100'),'9999999.9')
     end sumDailyDeviation,
     to_number(to_char(sum(CURR_YEAR_TONN_IMP),'99999999999.99'),'99999999999.99') currImpTonTotal,
     to_number(to_char(sum(PREV_YEAR_TONN_IMP),'99999999999.99'),'99999999999.99') currImpTonPrev,
     case when (sum(CURR_YEAR_TONN_IMP)='0' and sum(PREV_YEAR_TONN_IMP)='0') then '0'
     when  (sum(CURR_YEAR_TONN_IMP)!='0' and sum(PREV_YEAR_TONN_IMP)='0') then '100'
     when  (sum(CURR_YEAR_TONN_IMP)='0' and sum(PREV_YEAR_TONN_IMP)!='0') then '-100'
     when  (sum(CURR_YEAR_TONN_IMP)!='0' and sum(PREV_YEAR_TONN_IMP)!='0') then to_char((((sum(CURR_YEAR_TONN_IMP)-sum(PREV_YEAR_TONN_IMP))/sum(PREV_YEAR_TONN_IMP))*'100'),'9999999.9')
     end impDeviation,
     to_number(to_char(sum(CURR_YEAR_TONN_EXP),''9999999.99''),''9999999.99'') currExpTonTotal,
     to_number(to_char(sum(PREV_YEAR_TONN_EXP),''9999999.99''),''9999999.99'') currExpTonPrev,
     case when (sum(CURR_YEAR_TONN_EXP)='0' and sum(PREV_YEAR_TONN_EXP)='0') then '0'
     when  (sum(CURR_YEAR_TONN_EXP)!='0' and sum(PREV_YEAR_TONN_EXP)='0') then '100'
     when  (sum(CURR_YEAR_TONN_EXP)='0' and sum(PREV_YEAR_TONN_EXP)!='0') then '-100'
     when  (sum(CURR_YEAR_TONN_EXP)!='0' and sum(PREV_YEAR_TONN_EXP)!='0') then to_char((((sum(CURR_YEAR_TONN_EXP)-sum(PREV_YEAR_TONN_EXP))/sum(PREV_YEAR_TONN_EXP))*'100'),'9999999.9')
     end expDeviation,
     to_number(to_char(sum(CURR_YEAR_TONN_TRAN),''9999999.99''),''9999999.99'') trnsTonTotal,
     to_number(to_char(sum(PREV_YEAR_TONN_TRAN),''9999999.99''),''9999999.99'') trnsTonPrev,
     case when (sum(CURR_YEAR_TONN_TRAN)='0' and sum(PREV_YEAR_TONN_TRAN)='0') then '0'
     when  (sum(CURR_YEAR_TONN_TRAN)!='0' and sum(PREV_YEAR_TONN_TRAN)='0') then '100'
     when  (sum(CURR_YEAR_TONN_TRAN)='0' and sum(PREV_YEAR_TONN_TRAN)!='0') then '-100'
     when  (sum(CURR_YEAR_TONN_TRAN)!='0' and sum(PREV_YEAR_TONN_TRAN)!='0') then to_char((((sum(CURR_YEAR_TONN_TRAN)-sum(PREV_YEAR_TONN_TRAN))/sum(PREV_YEAR_TONN_TRAN))*'100'),'9999999.9')
     end trnsDeviation
     FROM AA_DAILY_TONN_REP
     
where MONTH_NAME is null
group by WEEK_NO
order by weekNo
</select>

<select id="fetchJobtonnageMonthList" parameterClass="cargo.cms.export.bo.DailyTonnageBO" resultClass="cargo.cms.export.bo.DailyTonnageBO">
	SELECT MONTH_YEAR monthName,
	TRIM(TO_CHAR(CURRIMP,'999999999999999999990.99')) currMonthImpTon,
    TRIM(TO_CHAR(CURREXP,'999999999999999999990.99')) currMonthExpTon,
    TRIM(TO_CHAR(CURRTRN,'999999999999999999990.99')) currMonthTrnsTon,
    TRIM(TO_CHAR(CURRTTL,'999999999999999999990.99')) sumOfCurrMonthTon,
    TRIM(TO_CHAR(PREIMP,'999999999999999999990.99')) prevMonthImpTon,
    TRIM(TO_CHAR(PREEXP,'999999999999999999990.99')) prevMonthExpTon,
    TRIM(TO_CHAR(PRETRN,'999999999999999999990.99')) prevMonthTrnsTon,
    TRIM(TO_CHAR(PRETTL,'999999999999999999990.99')) sumOfPrevMonthTon,
    CASE
    WHEN (CURRIMP='0'
    AND PREIMP  ='0')
    THEN '0.00'||'%'
    WHEN (CURRIMP!='0'
    AND PREIMP   ='0')
    THEN 'NA'
    WHEN (CURRIMP='0'
    AND PREIMP! ='0')
    THEN '-100.00'||'%'
    WHEN (CURRIMP!='0'
    AND PREIMP!  ='0')
    THEN 
      trim(TO_CHAR((((TRIM(TO_CHAR((CURRIMP),'999999999999999999990.99'))-TRIM(TO_CHAR((PREIMP),'999999999999999999990.99')))/TRIM(TO_CHAR((PREIMP),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'    
    END deviationPerMonthImp,
    CASE
    WHEN (CURREXP='0'
    AND PREEXP  ='0')
    THEN '0.00'||'%'
    WHEN (CURREXP!='0'
    AND PREEXP   ='0')
    THEN 'NA'
    WHEN (CURREXP='0'
    AND PREEXP! ='0')
    THEN '-100.00'||'%'
    WHEN (CURREXP!='0'
    AND PREEXP!  ='0')
    THEN 
      trim(TO_CHAR((((TRIM(TO_CHAR((CURREXP),'999999999999999999990.99'))-TRIM(TO_CHAR((PREEXP),'999999999999999999990.99')))/TRIM(TO_CHAR((PREEXP),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'    
    END deviationPerMonthExp
    ,
    CASE
    WHEN (CURRTRN='0'
    AND PRETRN  ='0')
    THEN '0.00'||'%'
    WHEN (CURRTRN!='0'
    AND PRETRN   ='0')
    THEN 'NA'
    WHEN (CURRTRN='0'
    AND PRETRN! ='0')
    THEN '-100.00'||'%'
    WHEN (CURRTRN!='0'
    AND PRETRN!  ='0')
    THEN 
      trim(TO_CHAR((((TRIM(TO_CHAR((CURRTRN),'999999999999999999990.99'))-TRIM(TO_CHAR((PRETRN),'999999999999999999990.99')))/TRIM(TO_CHAR((PRETRN),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'    
    END deviationPerMonthTrns
    ,
    CASE
    WHEN (CURRTTL='0'
    AND PRETTL  ='0')
    THEN '0.00'||'%'
    WHEN (CURRTTL!='0'
    AND PRETTL   ='0')
    THEN 'NA'
    WHEN (CURRTTL='0'
    AND PRETTL! ='0')
    THEN '-100.00'||'%'
    WHEN (CURRTTL!='0'
    AND PRETTL!  ='0')
    THEN 
      trim(TO_CHAR((((TRIM(TO_CHAR((CURRTTL),'999999999999999999990.99'))-TRIM(TO_CHAR((PRETTL),'999999999999999999990.99')))/TRIM(TO_CHAR((PRETTL),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'    
    END dailyMonthDeviation
     FROM  
    ( SELECT A.MONTH_YEAR,SUM(A.CURR_YEAR_TONN_IMP) CURRIMP,
      SUM(NVL(A.CURR_YEAR_TONN_EXP,0)) CURREXP,
      SUM(NVL(A.CURR_YEAR_TONN_TRAN,0)) CURRTRN,
      SUM(NVL(A.CURR_TONNAGE_TOTAL,0)) CURRTTL,
      Z.PREIMP,
      Z.PREEXP,
      Z.PRETRN,
      Z.PRETTL
      FROM  aa_daily_tonn_rep A
      LEFT JOIN (SELECT MONTH_YEAR,
      SUM(NVL(PREV_YEAR_TONN_IMP,0)) PREIMP,
      SUM(NVL(PREV_YEAR_TONN_EXP,0)) PREEXP,
      SUM(NVL(PREV_YEAR_TONN_TRAN,0)) PRETRN,
      SUM(NVL(PREV_TONNAGE_TOTAL,0)) PRETTL
      FROM  aa_daily_tonn_rep 
      WHERE TO_DATE(MONTH_YEAR,'MONYYYY') BETWEEN TO_DATE(TO_CHAR(TRUNC(TO_DATE(#monthYear#,'MONYYYY'),'YYYY'),'MONYYYY'),'MONYYYY')
      AND  TO_DATE(#monthYear#,'MONYYYY')  AND MONTH_YEAR IS NOT NULL
      <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
      GROUP BY MONTH_YEAR) Z
      ON  A.MONTH_YEAR=Z.MONTH_YEAR
      WHERE TO_DATE(A.MONTH_YEAR,'MONYYYY') BETWEEN TO_DATE(TO_CHAR(TRUNC(TO_DATE(#monthYear#,'MONYYYY'),'YYYY'),'MONYYYY'),'MONYYYY')
      AND  TO_DATE(#monthYear#,'MONYYYY')  AND A.MONTH_YEAR IS NOT NULL
      <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
    GROUP BY A.MONTH_YEAR, Z.PREIMP, Z.PREEXP, Z.PRETRN, Z.PRETTL
     )
     WHERE MONTH_YEAR IS NOT NULL
     ORDER BY TO_DATE(MONTH_YEAR,'MONYYYY')
</select>

<select id="fetchTonnageMTDList" parameterClass="cargo.cms.export.bo.DailyTonnageBO" resultClass="cargo.cms.export.bo.DailyTonnageBO">
SELECT substr(MONTH_YEAR,0,3) cummMonth,
    NVL(TRIM(TO_CHAR(CURRIMP,'999999999999999999990.99')),0.00) currMonthImpCumm,
    NVL(TRIM(TO_CHAR(CURREXP,'999999999999999999990.99')),0.00) currMonthExpCumm,
    NVL(TRIM(TO_CHAR(CURRTRN,'999999999999999999990.99')),0.00) currMonthTrnsCumm,
    NVL(TRIM(TO_CHAR(CURRTTL,'999999999999999999990.99')),0.00) currMonthCumm,
    NVL(TRIM(TO_CHAR(PREIMP,'999999999999999999990.99')),0.00) prevMonthImpCumm,
    NVL(TRIM(TO_CHAR(PREEXP,'999999999999999999990.99')),0.00) prevMonthExpCumm,
    NVL(TRIM(TO_CHAR(PRETRN,'999999999999999999990.99')),0.00) prevMonthTrnsCumm,
    NVL(TRIM(TO_CHAR(PRETTL,'999999999999999999990.99')),0.00) sumOfPrevMonthCumm,
    NVL(CASE
    WHEN (CURRIMP='0'
    AND PREIMP  ='0')
    THEN '0.00'||'%'
    WHEN (CURRIMP!='0'
    AND PREIMP   ='0')
    THEN 'NA'
    WHEN (CURRIMP='0'
    AND PREIMP! ='0')
    THEN '-100.00'||'%'
    WHEN (CURRIMP!='0'
    AND PREIMP!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURRIMP),'999999999999999999990.99'))-TRIM(TO_CHAR((PREIMP),'999999999999999999990.99')))/TRIM(TO_CHAR((PREIMP),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') devPerMonthImpCumm,
    NVL(CASE
    WHEN (CURREXP='0'
    AND PREEXP  ='0')
    THEN '0.00'||'%'
    WHEN (CURREXP!='0'
    AND PREEXP   ='0')
    THEN 'NA'
    WHEN (CURREXP='0'
    AND PREEXP! ='0')
    THEN '-100.00'||'%'
    WHEN (CURREXP!='0'
    AND PREEXP!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURREXP),'999999999999999999990.99'))-TRIM(TO_CHAR((PREEXP),'999999999999999999990.99')))/TRIM(TO_CHAR((PREEXP),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') devPerMonthExpCumm
    ,
    NVL(CASE
    WHEN (CURRTRN='0'
    AND PRETRN  ='0')
    THEN '0.00'||'%'
    WHEN (CURRTRN!='0'
    AND PRETRN   ='0')
    THEN 'NA'
    WHEN (CURRTRN='0'
    AND PRETRN! ='0')
    THEN '-100.00'||'%'
    WHEN (CURRTRN!='0'
    AND PRETRN!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURRTRN),'999999999999999999990.99'))-TRIM(TO_CHAR((PRETRN),'999999999999999999990.99')))/TRIM(TO_CHAR((PRETRN),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') devPerMonthTrnsCumm
    ,
    NVL(CASE
    WHEN (CURRTTL='0'
    AND PRETTL  ='0')
    THEN '0.00'||'%'
    WHEN (CURRTTL!='0'
    AND PRETTL   ='0')
    THEN 'NA'
    WHEN (CURRTTL='0'
    AND PRETTL! ='0')
    THEN '-100.00'||'%'
    WHEN (CURRTTL!='0'
    AND PRETTL!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR((CURRTTL),'999999999999999999990.99'))-TRIM(TO_CHAR((PRETTL),'999999999999999999990.99')))/TRIM(TO_CHAR((PRETTL),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') dailyMonthDevCumm
     FROM  
    ( SELECT A.MONTH_YEAR,SUM(A.CURR_YEAR_TONN_IMP) CURRIMP,
      SUM(NVL(A.CURR_YEAR_TONN_EXP,0)) CURREXP,
      SUM(NVL(A.CURR_YEAR_TONN_TRAN,0)) CURRTRN,
      SUM(NVL(A.CURR_TONNAGE_TOTAL,0)) CURRTTL,
      Z.PREIMP,
      Z.PREEXP,
      Z.PRETRN,
      Z.PRETTL
      FROM  aa_daily_tonn_rep A
      LEFT JOIN (SELECT MONTH_YEAR,
      SUM(NVL(PREV_YEAR_TONN_IMP,0)) PREIMP,
      SUM(NVL(PREV_YEAR_TONN_EXP,0)) PREEXP,
      SUM(NVL(PREV_YEAR_TONN_TRAN,0)) PRETRN,
      SUM(NVL(PREV_TONNAGE_TOTAL,0)) PRETTL
      FROM  aa_daily_tonn_rep 
      WHERE TO_DATE(MONTH_YEAR,'MONYYYY')= TO_DATE(#monthYear#,'MONYYYY')  AND MONTH_YEAR IS NOT NULL
      <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
      GROUP BY MONTH_YEAR) Z
      ON  A.MONTH_YEAR=Z.MONTH_YEAR
      WHERE TO_DATE(A.MONTH_YEAR,'MONYYYY') =TO_DATE(#monthYear#,'MONYYYY')  AND A.MONTH_YEAR IS NOT NULL
      <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
    GROUP BY A.MONTH_YEAR, Z.PREIMP, Z.PREEXP, Z.PRETRN, Z.PRETTL
     )
     WHERE MONTH_YEAR IS NOT NULL
     ORDER BY TO_DATE(MONTH_YEAR,'MONYYYY')
</select>

<select id="fetchTonnageYrlyList" parameterClass="cargo.cms.export.bo.DailyTonnageBO" resultClass="cargo.cms.export.bo.DailyTonnageBO">
SELECT 
    to_char(trunc(TO_DATE(#monthYear#,'MONYYYY'),'YYYY'),'DDMONYYYY') cummYear,
    NVL(TRIM(TO_CHAR(sum(CURRIMP),'999999999999999999990.99')),0.00) currYrImpTotall,
    NVL(TRIM(TO_CHAR(sum(CURREXP),'999999999999999999990.99')),0.00) currYrExpTotal,
    NVL(TRIM(TO_CHAR(sum(CURRTRN),'999999999999999999990.99')),0.00)  currYrTrnsTotal,
    NVL(TRIM(TO_CHAR(sum(CURRTTL),'999999999999999999990.99')),0.00) currYrDailyTotal,
    NVL(TRIM(TO_CHAR(sum(PREIMP),'999999999999999999990.99')),0.00) prevYrImpTotal,
    NVL(TRIM(TO_CHAR(sum(PREEXP),'999999999999999999990.99')),0.00) prevYrExpTotal,
    NVL(TRIM(TO_CHAR(sum(PRETRN),'999999999999999999990.99')),0.00) prevYrTrnsTotal,
    NVL(TRIM(TO_CHAR(sum(PRETTL),'999999999999999999990.99')),0.00) prevYrDailyTotal,
    NVL(CASE
    WHEN (SUM(CURRIMP)='0'
    AND SUM(PREIMP)  ='0')
    THEN '0.00'||'%'
    WHEN (SUM(CURRIMP)!='0'
    AND SUM(PREIMP)   ='0')
    THEN 'NA'
    WHEN (SUM(CURRIMP)='0'
    AND SUM(PREIMP)! ='0')
    THEN '-100.00'||'%'
    WHEN (SUM(CURRIMP)!='0'
    AND SUM(PREIMP)!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR(sum(CURRIMP),'999999999999999999990.99'))-TRIM(TO_CHAR(sum(PREIMP),'999999999999999999990.99')))/TRIM(TO_CHAR(sum(PREIMP),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') tonYrImpTotal,
    NVL(CASE
    WHEN (SUM(CURREXP)='0'
    AND SUM(PREEXP)  ='0')
    THEN '0.00'||'%'
    WHEN (SUM(CURREXP)!='0'
    AND SUM(PREEXP)   ='0')
    THEN 'NA'
    WHEN (SUM(CURREXP)='0'
    AND SUM(PREEXP)! ='0')
    THEN '-100.00'||'%'
    WHEN (SUM(CURREXP)!='0'
    AND SUM(PREEXP)!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR(sum(CURREXP),'999999999999999999990.99'))-TRIM(TO_CHAR(sum(PREEXP),'999999999999999999990.99')))/TRIM(TO_CHAR(sum(PREEXP),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') tonYrExpTotal
    ,
    NVL(CASE
    WHEN (SUM(CURRTRN)='0'
    AND SUM(PRETRN)  ='0')
    THEN '0.00'||'%'
    WHEN (SUM(CURRTRN)!='0'
    AND SUM(PRETRN)   ='0')
    THEN 'NA'
    WHEN (SUM(CURRTRN)='0'
    AND SUM(PRETRN)! ='0')
    THEN '-100.00'||'%'
    WHEN (SUM(CURRTRN)!='0'
    AND SUM(PRETRN)!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR(sum(CURRTRN),'999999999999999999990.99'))-TRIM(TO_CHAR(sum(PRETRN),'999999999999999999990.99')))/TRIM(TO_CHAR(sum(PRETRN),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') tonYrTrnsTotal
    ,
    NVL(CASE
    WHEN (SUM(CURRTTL)='0'
    AND SUM(PRETTL)  ='0')
    THEN '0.00'||'%'
    WHEN (SUM(CURRTTL)!='0'
    AND SUM(PRETTL)   ='0')
    THEN 'NA'
    WHEN (SUM(CURRTTL)='0'
    AND SUM(PRETTL)! ='0')
    THEN '-100.00'||'%'
    WHEN (SUM(CURRTTL)!='0'
    AND SUM(PRETTL)!  ='0')
    THEN trim(TO_CHAR((((TRIM(TO_CHAR(sum(CURRTTL),'999999999999999999990.99'))-TRIM(TO_CHAR(sum(PRETTL),'999999999999999999990.99')))/TRIM(TO_CHAR(sum(PRETTL),'999999999999999999990.99')))*100),'999999999999999999990.99'))||'%'
    END,'0.00'||'%') dailyYrDailyTon
     FROM  
    ( SELECT A.MONTH_YEAR,SUM(A.CURR_YEAR_TONN_IMP) CURRIMP,
      SUM(NVL(A.CURR_YEAR_TONN_EXP,0)) CURREXP,
      SUM(NVL(A.CURR_YEAR_TONN_TRAN,0)) CURRTRN,
      SUM(NVL(A.CURR_TONNAGE_TOTAL,0)) CURRTTL,
      Z.PREIMP,
      Z.PREEXP,
      Z.PRETRN,
      Z.PRETTL
      FROM  aa_daily_tonn_rep A
      LEFT JOIN (SELECT MONTH_YEAR,
      SUM(NVL(PREV_YEAR_TONN_IMP,0)) PREIMP,
      SUM(NVL(PREV_YEAR_TONN_EXP,0)) PREEXP,
      SUM(NVL(PREV_YEAR_TONN_TRAN,0)) PRETRN,
      SUM(NVL(PREV_TONNAGE_TOTAL,0)) PRETTL
      FROM  aa_daily_tonn_rep 
      WHERE TO_DATE(MONTH_YEAR,'MONYYYY') BETWEEN TO_DATE(TO_CHAR(TRUNC(TO_DATE(#monthYear#,'MONYYYY'),'YYYY'),'MONYYYY'),'MONYYYY')
      AND  TO_DATE(#monthYear#,'MONYYYY')  AND MONTH_YEAR IS NOT NULL
      <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
      GROUP BY MONTH_YEAR) Z
      ON  A.MONTH_YEAR=Z.MONTH_YEAR
      WHERE TO_DATE(A.MONTH_YEAR,'MONYYYY') BETWEEN TO_DATE(TO_CHAR(TRUNC(TO_DATE(#monthYear#,'MONYYYY'),'YYYY'),'MONYYYY'),'MONYYYY')
      AND  TO_DATE(#monthYear#,'MONYYYY')  AND A.MONTH_YEAR IS NOT NULL
      <isNotEmpty property="groupCarrList">
            AND   (CARR_CODE = #groupCarrList# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #groupCarrList#))                                          
      </isNotEmpty>
      <isNotEmpty property="carrList">
            AND   CARR_CODE = #carrList# 
     </isNotEmpty>
    GROUP BY A.MONTH_YEAR, Z.PREIMP, Z.PREEXP, Z.PRETRN, Z.PRETTL
     )
     WHERE MONTH_YEAR IS NOT NULL 
     ORDER BY TO_DATE(MONTH_YEAR,'MONYYYY')
</select>


<!-- Added by Manorama for Daily Tonnage Report::::Ends -->
<select id="fetchAwbInventoryDtls" parameterClass="map"  resultClass="cargo.cms.export.bo.AWBBO">
	select LSP_NO as lspNo, ULD_KEY as uldKey from awb_inventory where awb_no = #AWB_NO#  and awb_date = to_date(#AWB_DATE#,'DDMONYY')
</select>

<!-- Added by Manorama for Print Cargo Manifest::::Starts -->
<select id="checkExpCARPriorityDLSSHC" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="cargo.cms.export.bo.ExpCarBO">
  SELECT MASTSPL.SPL_CODE splCode
  FROM AWB AWB,MAST_DLS_SHC MASTSPL
  WHERE MASTSPL.CARR_CODE=AWB.CARR_CODE AND MASTSPL.SPL_CODE IN (#splCode1#,#splCode2#,#splCode3#,#splCode4#,#splCode5#,#splCode6#,#splCode7#,#splCode8#,#splCode9#)
  AND AWB.AWB_NO=#awb# AND AWB.AWB_DATE=#awbDate# AND AWB.AWB_TYPE='E'
</select>


<select id="checkAWBPriorityDLSSHC" parameterClass="map"  resultClass="cargo.cms.export.bo.AWBBO">
  SELECT MASTSPL.SPL_CODE splCode
  FROM AWB AWB,MAST_DLS_SHC MASTSPL
  WHERE MASTSPL.CARR_CODE=AWB.CARR_CODE AND MASTSPL.SPL_CODE IN (AWB.SPL_CODE1,AWB.SPL_CODE2,AWB.SPL_CODE3,AWB.SPL_CODE4,AWB.SPL_CODE5,AWB.SPL_CODE6,AWB.SPL_CODE7,AWB.SPL_CODE8,AWB.SPL_CODE9)
  AND AWB.AWB_NO=#awbNo# AND AWB.AWB_DATE=#awbDate# AND AWB.AWB_TYPE='E'
</select>
<select id="checkAWBhaveBulkRCL" parameterClass="map"  resultClass="java.lang.Integer">
    SELECT COUNT(rclType) FROM (
  SELECT COUNT(1) AS rclType FROM EXP_RCL_HD RCLHD WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND PPK_TYPE='P' AND RCLHD.STATUS NOT IN ('V','R') AND RCLHD.RTN_IND != 'Y'
  AND NOT EXISTS (SELECT NULL FROM EXP_RCL_HD A WHERE A.AWB_NO=#awbNo# AND A.AWB_DATE=#awbDate# AND PPK_TYPE='B' AND A.STATUS NOT IN ('V','R') AND A.RTN_IND != 'Y')
  UNION ALL
  SELECT COUNT(1) AS rclType FROM EXP_RCL_HD RCLHD,EXP_RCL_BRKDN RCLBRKDN WHERE RCLHD.RCL_NO = RCLBRKDN.RCL_NO AND RCLBRKDN.AWB_NO=#awbNo# AND RCLBRKDN.AWB_DATE=#awbDate#  AND RCLHD.STATUS NOT IN ('V','R') AND RCLHD.RTN_IND != 'Y'
  AND RCLHD.PPK_TYPE='M' AND NOT EXISTS (SELECT NULL FROM EXP_RCL_HD A WHERE A.AWB_NO=#awbNo# AND A.AWB_DATE=#awbDate# AND PPK_TYPE='B' AND A.STATUS NOT IN ('V','R') AND A.RTN_IND != 'Y') ) WHERE rclType > 0
</select>
<select id="checkULDalreadysavedinExpCAR" parameterClass="map"  resultClass="java.lang.Integer">
   SELECT COUNT(1) FROM (SELECT ULDAWB.DOC_SHC_YN AS docSHCInd FROM EXP_RCL_HD RCLHD,EXP_RCL_DTL RCLDTL,EXP_ULD_AWB ULDAWB WHERE ULDAWB.RCL_NO=RCLHD.RCL_NO AND ULDAWB.ULD_KEY=RCLDTL.ULD_KEY AND ULDAWB.AWB_NO=#awbNo# AND ULDAWB.AWB_DATE=#awbDate#
AND RCLDTL.RCL_NO=RCLHD.RCL_NO AND RCLHD.AWB_NO=#awbNo# AND RCLHD.AWB_DATE=#awbDate# AND RCLHD.PPK_TYPE='P' AND RCLHD.STATUS NOT IN ('V','R') AND RCLHD.RTN_IND != 'Y'
UNION ALL
SELECT ULDAWB.DOC_SHC_YN AS docSHCInd FROM EXP_RCL_HD RCLHD,EXP_RCL_BRKDN RCLBRKDN,EXP_ULD_AWB ULDAWB WHERE ULDAWB.RCL_NO=RCLHD.RCL_NO AND ULDAWB.ULD_KEY=RCLHD.ULD_KEY AND ULDAWB.AWB_NO=#awbNo# AND ULDAWB.AWB_DATE=#awbDate#
AND RCLHD.RCL_NO = RCLBRKDN.RCL_NO AND RCLBRKDN.AWB_NO=#awbNo# AND RCLBRKDN.AWB_DATE=#awbDate# AND RCLHD.STATUS NOT IN ('V','R') AND RCLHD.RTN_IND != 'Y') WHERE docSHCInd='N' 
</select>
<select id="checkAWBPrioritySHCenteranyofULD" parameterClass="map"  resultClass="java.lang.String">
SELECT STRAGG(STRINGDELIM(SHC, ',')) FROM(
SELECT SPLCODE.CODE AS SHC FROM EXP_RCL_HD RCLHD,EXP_RCL_DTL RCLDTL,MAST_SPL_HAND_CODE SPLCODE WHERE SPLCODE.CODE IN (RCLDTL.DOC_SHC1,RCLDTL.DOC_SHC2,RCLDTL.DOC_SHC3,RCLDTL.DOC_SHC4,RCLDTL.DOC_SHC5,RCLDTL.DOC_SHC6,RCLDTL.DOC_SHC7,RCLDTL.DOC_SHC8,RCLDTL.DOC_SHC9)
AND RCLDTL.RCL_NO=RCLHD.RCL_NO AND RCLHD.AWB_NO=#awbNo# AND RCLHD.AWB_DATE=#awbDate# AND RCLHD.PPK_TYPE='P' AND RCLHD.STATUS NOT IN ('V','R') AND RCLHD.RTN_IND != 'Y'
UNION 
SELECT SPLCODE.CODE AS SHC FROM EXP_RCL_HD RCLHD,EXP_RCL_BRKDN RCLBRKDN,MAST_SPL_HAND_CODE SPLCODE
WHERE SPLCODE.CODE IN (RCLBRKDN.DOC_SHC1,RCLBRKDN.DOC_SHC2,RCLBRKDN.DOC_SHC3,RCLBRKDN.DOC_SHC4,RCLBRKDN.DOC_SHC5,RCLBRKDN.DOC_SHC6,RCLBRKDN.DOC_SHC7,RCLBRKDN.DOC_SHC8,RCLBRKDN.DOC_SHC9)
AND RCLHD.RCL_NO = RCLBRKDN.RCL_NO AND RCLBRKDN.AWB_NO=#awbNo# AND RCLBRKDN.AWB_DATE=#awbDate# AND RCLHD.PPK_TYPE='M' AND RCLHD.STATUS NOT IN ('V','R') AND RCLHD.RTN_IND != 'Y')
</select>


<select id="validateFinalize" parameterClass="cargo.cms.export.bo.PrintCgoDetailsBO"
	resultClass="cargo.cms.export.bo.PrintCgoDetailsBO">
	select final_manf_ind finalizedInd from flt_opr_events where flt_key = #fltKey# 
	and sch_date = to_date(#fltDate#,'DDMONYY') and flt_type = 'D'
	</select>
<select id="fetchUnldgList" parameterClass="cargo.cms.export.bo.PrintCgoSearchBO"
	resultClass="cargo.cms.export.bo.PrintCgoDetailsBO">
	select off_point unLdgPt FROM FLT_OPR A
	LEFT JOIN FLT_OPR_LEG b
	ON A.flt_key   = b.flt_key
	AND A.sch_date = b.sch_date
	AND A.flt_type = b.flt_type
	AND A.tr_no = b.tr_no
	WHERE A.FLT_KEY=#flightKey#
	AND A.SCH_DATE = TO_DATE(#flightDate#, 'DDMONYY')
	AND A.FLT_TYPE = 'D' 
</select>
<!-- Added By Manorama for Print ULD Tag(HHT)::::Starts -->
<select id="fetchUnldgListforGTD" parameterClass="cargo.cms.export.bo.GtdSearchBO"
	resultClass="cargo.cms.export.bo.GtdDetailsBO">
	select off_point unLdgPt FROM FLT_OPR A
	LEFT JOIN FLT_OPR_LEG b
	ON A.flt_key   = b.flt_key
	AND A.sch_date = b.sch_date
	AND A.flt_type = b.flt_type
	AND A.tr_no = b.tr_no
	WHERE A.FLT_KEY=#flightKey#
	AND A.SCH_DATE = TO_DATE(#flightDate#, 'DDMONYY')
	AND A.FLT_TYPE = 'D' 
</select>
<select id="getPrintTowDetails" parameterClass="cargo.cms.export.bo.PrintULDTagSearchBO"
	resultClass="cargo.cms.export.bo.PrintULDTagTowBO">
	select tow.to_no towNo,dtl.uld_key uldKey,tow.FLT_KEY fltKey,to_char(tow.FLT_DATE,'DDMONYY')
	fltDate,
	decode(chk.CHK_FLG,null,'N',chk.CHK_FLG) uldChkOut,'Y' selValue, inv.loc_code location
	from tow_order_out tow join tow_order_out_dtl dtl on tow.to_no =
	dtl.to_no
	left join exp_chkout_dtl chk on tow.flt_key = chk.flt_key 
	and tow.flt_date = chk.flt_date
	and dtl.uld_key = chk.uld_key
	left join uld_inventory inv
	on inv.uld_key = chk.uld_key
	where tow.to_no = #towNo#
</select>
<select id="uldExistsInInv" parameterClass="java.lang.String"
	resultClass="java.lang.Integer">
	select count(0) from exp_pmanifest_uld where uld_bt_no = #PARAM#
	</select>
<select id="getBuildUpDetails" parameterClass="java.lang.String"
	resultClass="java.lang.String">
	select 
		case when ((ma.H_CONT_IND = 'Y' OR ma.BT_IND='Y') AND e.BLDUP_COMPLETE = 'Y') THEN '1' 
    when ((u.ppk_ind = 'Y' or u.mix_PPK_ind = 'Y') and (ma.H_CONT_IND = 'N' and ma.BT_IND='N')) then '1'
		when ((u.ppk_ind = 'N' AND u.mix_PPK_ind = 'N') AND e.BLDUP_COMPLETE = 'Y') THEN '1' 
    ELSE '0'
		END
		from uld_inventory u
    join mast_uld_type ma on ma.CODE=substr(u.uld_key,0,3)
    left join exp_pmanifest_uld e on e.uld_bt_no = u.uld_key and e.flt_key = u.flt_key and e.flt_date = u.flt_date
		where u.uld_key = #PARAM#
</select>
<select id="checkULDFilghtforUITTag" parameterClass="java.lang.String"
	resultClass="java.lang.String">
	SELECT COUNT(1) from exp_chkout_dtl t1
	join uld_inventory t2 on t1.flt_key=t2.flt_key	and t1.uld_key = t2.uld_key	and t1.flt_date=t2.flt_date
	join exp_flt_uld uld	on  t1.uld_key = uld.uld_key	and t1.flt_key=uld.flt_key	and t1.flt_date=uld.flt_date
	where t1.uld_key =  #PARAM#
</select>
<!-- Added By Manorama for Print ULD Tag(HHT)::::Ends -->

<!-- Added by Manorama for List/Print Cargo-Manifest::::::Starts -->

	<parameterMap id="exportManifestListMap" class="map">
		<parameter property="RESULT" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="OUT" />
		<parameter property="FLIGHTKEY" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="DEPDATE" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="UNLDGPT" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="INOUT" />
		<parameter property="GRPNO" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="FORMAT" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="TOTAWB" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="OUT" />
		<parameter property="TOTULD" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="OUT" />
		<parameter property="PORTS" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="OUT" />
	</parameterMap>

	<procedure id="exportmanifestsearchprocedure" parameterMap="exportManifestListMap">
		{? = call PKG_EXP_RPT.CARGO_MANIFEST(?,?,?,?,?,?,?,?) }
	</procedure>
	<!-- Changed for QR -->
	<select id="exportmanifestsearch" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
		resultClass="cargo.cms.export.bo.CargoManifestDetailsBO">
		SELECT A.FLT_KEY AS flightNo,
 PKG_COMMON.get_flt_eta(#flightKey#, TO_DATE(#flightDate#,'DDMONYY'), 'D', 'DD') AS etd,
  TO_CHAR(A.SCH_DATE,'DDMONYY')                                                      AS flightDate ,
  (SELECT code_desc
  FROM cust_company
  WHERE carr_code =#carrierCode#
  AND rownum      =1
  ) owner,
  A.ORIG AS ldgPt,
  ''     AS unLdgPt,
  A.ACFT_REG_NO acftRegNo,
  b.FINAL_MANF_IND finalManfInd,
  (SELECT NVL(RCS_CONFIG,'N') FROM MAST_CARRIER WHERE CODE = #carrierCode# ) eAWBHandeling,
  b.RCS_SENT rcsSentIND 
FROM FLT_OPR A
JOIN flt_opr_events b
ON A.flt_key   = b.flt_key
AND A.sch_date = b.sch_date
AND A.flt_type = b.flt_type
AND A.tr_no = b.tr_no
WHERE A.FLT_KEY=#flightKey#
AND A.SCH_DATE = TO_DATE(#flightDate#, 'DDMONYY')
AND A.FLT_TYPE = 'D' 
				
</select>

	<parameterMap id="cargoManifestTotalMap" class="map">
		<parameter property="FLTKEY" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="FLTDATE" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="PCS" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="OUT" />
		<parameter property="WT" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="OUT" />
	</parameterMap>

	<procedure id="cargoManifestTotalProCall" parameterMap="cargoManifestTotalMap">
		{call Pkg_exp_val.get_cargo_manifest_total(?,?,?,?)}
	</procedure>

	<select id="exportmanifestlist_group" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
		resultClass="cargo.cms.export.bo.AWBBO">
		SELECT SNO sno,
			UNLDG_PT unLdgPt, RPT_TYPE rptType,AWB_ULD_NO awbNo,
			CATEGORY category, PCS pcs, WT wt,
			(select sum(pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadPcs,
	  		(select sum(wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadWt,
	  		(select sum(assigned_bulk_pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupPcs,
	  		(select sum(assigned_bulk_wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupWt,
			CONTENT content, SPL_CODE splCode, CC_CODE cc,
			ORIGIN org, DEST dest, ULD_REMARK rmk ,AWB_REMARK awbRemark,awb_date awbDate,decode((LENGTH(awb_uld_no)),'12',a.GROUP_NO,'') as groupNo,assigned_bulk_pcs bupPcs,assigned_bulk_wt bupWt,
			TOTAL_BUILDUP_PCS totBupPcs,TOTAL_BUILDUP_WT totBupWt
			FROM
			GT_EXP_CARGO_MANIFEST a
			where a.group_no =#grpNo#
	</select>
	<select id="exportmanifestlist_without_group" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
		resultClass="cargo.cms.export.bo.AWBBO">
		SELECT SNO sno,
			UNLDG_PT unLdgPt, RPT_TYPE rptType,AWB_ULD_NO awbNo,
			CATEGORY category, PCS pcs, WT wt,
			(select sum(pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadPcs,
	  		(select sum(wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadWt,
	  		(select sum(assigned_bulk_pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupPcs,
	  		(select sum(assigned_bulk_wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupWt,
			CONTENT content, SPL_CODE splCode, CC_CODE cc,
			ORIGIN org, DEST dest, ULD_REMARK rmk ,AWB_REMARK awbRemark,awb_date awbDate,decode((LENGTH(awb_uld_no)),'12',a.GROUP_NO,'') as groupNo,assigned_bulk_pcs bupPcs,assigned_bulk_wt bupWt,
			TOTAL_BUILDUP_PCS totBupPcs,TOTAL_BUILDUP_WT totBupWt
			FROM
			GT_EXP_CARGO_MANIFEST a
			where a.group_no is null
	</select>
	
	<select id="exportmanifestlist" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
		resultClass="cargo.cms.export.bo.AWBBO">
		SELECT SNO sno,
			UNLDG_PT unLdgPt, RPT_TYPE rptType,AWB_ULD_NO awbNo,
			CATEGORY category, PCS pcs, WT wt,
			(select sum(pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadPcs,
	  		(select sum(wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadWt,
	  		(select sum(assigned_bulk_pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupPcs,
	  		(select sum(assigned_bulk_wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupWt,
			CONTENT content, SPL_CODE splCode, CC_CODE cc,
			ORIGIN org, DEST dest, ULD_REMARK rmk ,AWB_REMARK awbRemark,awb_date awbDate,decode((LENGTH(awb_uld_no)),'12',a.GROUP_NO,'') as groupNo,assigned_bulk_pcs bupPcs,assigned_bulk_wt bupWt,
			TOTAL_BUILDUP_PCS totBupPcs,TOTAL_BUILDUP_WT totBupWt,
			( SELECT DECODE(COUNT(0), 0, 'N','Y')
			FROM exp_pmanifest_uld_awb_shc shc
			JOIN exp_pmanifest_uld_awb awb
			ON shc.tr_no       = awb.tr_no
			WHERE awb.awb_no   = decode((LENGTH(a.AWB_ULD_NO)),'12',replace(a.AWB_ULD_NO,'-'),a.AWB_ULD_NO)
			AND awb.AWB_DATE = a.AWB_DATE
			AND NVL(shc.BULK_ULD_YN,'N')  = 'Y' 
			AND NVL(a.RPT_TYPE,'A') = 'A'
			) shcSplitYN,
			CASE
				WHEN LENGTH(A.AWB_ULD_NO) = 12 THEN (
					SELECT MIN(FUN_GET_AWB_UPLIFT_PRIORITY(AWB_NO,AWB_DATE)) FROM AWB 
					WHERE AWB.AWB_NO = REPLACE(A.AWB_ULD_NO, '-') AND AWB.AWB_DATE = A.AWB_DATE
				)
				ELSE (
					FUN_GET_ULD_UPLIFT_PRIORITY(#flightKey#, #flightDate#, A.AWB_ULD_NO)
				)
			END upliftPriority
			FROM
			GT_EXP_CARGO_MANIFEST a
			where a.group_no = nvl(#grpNo#,a.group_no)
		UNION 
		SELECT SNO sno,
			UNLDG_PT unLdgPt, RPT_TYPE rptType,AWB_ULD_NO awbNo,
			CATEGORY category, PCS pcs, WT wt,
			(select sum(pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadPcs,
	  		(select sum(wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadWt,
	  		(select sum(assigned_bulk_pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupPcs,
	  		(select sum(assigned_bulk_wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupWt,
			CONTENT content, SPL_CODE splCode, CC_CODE cc,
			ORIGIN org, DEST dest, ULD_REMARK rmk ,AWB_REMARK awbRemark,awb_date awbDate,decode((LENGTH(awb_uld_no)),'12',a.GROUP_NO,'') as groupNo,assigned_bulk_pcs bupPcs,assigned_bulk_wt bupWt,
			TOTAL_BUILDUP_PCS totBupPcs,TOTAL_BUILDUP_WT totBupWt, 
			( SELECT DECODE(COUNT(0), 0, 'N','Y')
			FROM exp_pmanifest_uld_awb_shc shc
			JOIN exp_pmanifest_uld_awb awb
			ON shc.tr_no       = awb.tr_no
			WHERE awb.awb_no   = decode((LENGTH(a.AWB_ULD_NO)),'12',replace(a.AWB_ULD_NO,'-'),a.AWB_ULD_NO)
			AND awb.AWB_DATE = a.AWB_DATE
			AND NVL(shc.BULK_ULD_YN,'N')  = 'Y'
			AND NVL(a.RPT_TYPE,'A') = 'A'
			) shcSplitYN,
			CASE
				WHEN LENGTH(A.AWB_ULD_NO) = 12 THEN (
					SELECT MIN(FUN_GET_AWB_UPLIFT_PRIORITY(AWB_NO,AWB_DATE)) FROM AWB 
					WHERE AWB.AWB_NO = REPLACE(A.AWB_ULD_NO, '-') AND AWB.AWB_DATE = A.AWB_DATE
				)
				ELSE (
					FUN_GET_ULD_UPLIFT_PRIORITY(#flightKey#, #flightDate#, A.AWB_ULD_NO)
				)
			END upliftPriority
			FROM
			GT_EXP_CARGO_MANIFEST a
    		where a.group_no is null order by SNO
	</select>
	
	<select id="exportmanifestlistByULD_group" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
		resultClass="cargo.cms.export.bo.AWBBO">
		SELECT
		UNLDG_PT unLdgPt, RPT_TYPE rptType,AWB_ULD_NO awbNo,
		CATEGORY category, PCS pcs, WT wt,
		(select sum(pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadPcs,
  		(select sum(wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadWt,
  		(select sum(assigned_bulk_pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupPcs,
  		(select sum(assigned_bulk_wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupWt,
		CONTENT content, SPL_CODE splCode, CC_CODE cc,
		ORIGIN org, DEST dest, ULD_REMARK rmk ,decode((LENGTH(awb_uld_no)),'12',a.GROUP_NO,'') as groupNo,awb_date awbDate,assigned_bulk_pcs bupPcs,assigned_bulk_wt bupWt,AWB_REMARK awbRemark,
		TOTAL_BUILDUP_PCS totBupPcs,TOTAL_BUILDUP_WT totBupWt
		FROM
		GT_EXP_CARGO_MANIFEST a
		where a.group_no =#grpNo#
	</select>
		
	<select id="exportmanifestlistByULD" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
		resultClass="cargo.cms.export.bo.AWBBO">
	SELECT SNO sno,
		UNLDG_PT unLdgPt, RPT_TYPE rptType,AWB_ULD_NO awbNo,
		CATEGORY category, PCS pcs, WT wt,
		(select sum(pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadPcs,
  		(select sum(wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadWt,
  		(select sum(assigned_bulk_pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupPcs,
  		(select sum(assigned_bulk_wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupWt,
		CONTENT content, SPL_CODE splCode, CC_CODE cc,
		ORIGIN org, DEST dest, ULD_REMARK rmk ,decode((LENGTH(awb_uld_no)),'12',a.GROUP_NO,'') as groupNo,awb_date awbDate,assigned_bulk_pcs bupPcs,assigned_bulk_wt bupWt,AWB_REMARK awbRemark,
		TOTAL_BUILDUP_PCS totBupPcs,TOTAL_BUILDUP_WT totBupWt,
		( SELECT DECODE(COUNT(0), 0, 'N','Y')
			FROM exp_pmanifest_uld_awb_shc shc
			JOIN exp_pmanifest_uld_awb awb
			ON shc.tr_no       = awb.tr_no
			WHERE awb.awb_no   = decode((LENGTH(a.AWB_ULD_NO)),'12',replace(a.AWB_ULD_NO,'-'),a.AWB_ULD_NO)		
			AND awb.AWB_DATE = a.AWB_DATE	
			AND NVL(shc.BULK_ULD_YN,'N')  = 'Y' 
			AND NVL(a.RPT_TYPE,'A') = 'A'
		) shcSplitYN,
		CASE
			WHEN LENGTH(A.AWB_ULD_NO) = 12 THEN (
				SELECT MIN(FUN_GET_AWB_UPLIFT_PRIORITY(AWB_NO,AWB_DATE)) FROM AWB 
				WHERE AWB.AWB_NO = REPLACE(A.AWB_ULD_NO, '-') AND AWB.AWB_DATE = A.AWB_DATE
			)
			ELSE (
				FUN_GET_ULD_UPLIFT_PRIORITY(#flightKey#, #flightDate#, A.AWB_ULD_NO)
			)
		END upliftPriority
		FROM
		GT_EXP_CARGO_MANIFEST a 
	    where a.group_no = nvl(#grpNo#,a.group_no)
	UNION 
	SELECT SNO sno,
		UNLDG_PT unLdgPt, RPT_TYPE rptType,AWB_ULD_NO awbNo,
		CATEGORY category, PCS pcs, WT wt,
		(select sum(pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadPcs,
  		(select sum(wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as loadWt,
  		(select sum(assigned_bulk_pcs) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupPcs,
  		(select sum(assigned_bulk_wt) from GT_EXP_CARGO_MANIFEST b where a.AWB_ULD_NO = b.ULD_KEY) as totBupWt,
		CONTENT content, SPL_CODE splCode, CC_CODE cc,
		ORIGIN org, DEST dest, ULD_REMARK rmk ,decode((LENGTH(awb_uld_no)),'12',a.GROUP_NO,'') as groupNo,awb_date awbDate,assigned_bulk_pcs bupPcs,assigned_bulk_wt bupWt,AWB_REMARK awbRemark,
		TOTAL_BUILDUP_PCS totBupPcs,TOTAL_BUILDUP_WT totBupWt,
		( SELECT DECODE(COUNT(0), 0, 'N','Y')
			FROM exp_pmanifest_uld_awb_shc shc
			JOIN exp_pmanifest_uld_awb awb
			ON shc.tr_no       = awb.tr_no
			WHERE awb.awb_no   = decode((LENGTH(a.AWB_ULD_NO)),'12',replace(a.AWB_ULD_NO,'-'),a.AWB_ULD_NO)		
			AND awb.AWB_DATE = a.AWB_DATE	
			AND NVL(shc.BULK_ULD_YN,'N')  = 'Y' 
			AND NVL(a.RPT_TYPE,'A') = 'A'
		) shcSplitYN,
		CASE
			WHEN LENGTH(A.AWB_ULD_NO) = 12 THEN (
				SELECT MIN(FUN_GET_AWB_UPLIFT_PRIORITY(AWB_NO,AWB_DATE)) FROM AWB 
				WHERE AWB.AWB_NO = REPLACE(A.AWB_ULD_NO, '-') AND AWB.AWB_DATE = A.AWB_DATE
			)
			ELSE (
				FUN_GET_ULD_UPLIFT_PRIORITY(#flightKey#, #flightDate#, A.AWB_ULD_NO)
			)
		END upliftPriority
		FROM
		GT_EXP_CARGO_MANIFEST a 
   		where a.group_no is null order by sno
	</select>
	
	<select id="exportmanifestlistallcount" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
		resultClass="cargo.cms.export.bo.CargoManifestDetailsBO">
		select sum(totAWBNo) as totAWBNo,sum(totULDNo) as totULDNo,sum(totPc) as totPc,sum(totWt) as totWt from(
    SELECT
        SUM(DECODE(RPT_TYPE,NULL,1,0)) totAWBNo,SUM(DECODE(RPT_TYPE,'U',1,0)) totULDNo,
        SUM(PCS)totPc,
        SUM(WT)totWt
        FROM
        GT_EXP_CARGO_MANIFEST where group_no = nvl(#grpNo#,group_no)
    union 
    SELECT
        SUM(DECODE(RPT_TYPE,NULL,1,0)) totAWBNo,SUM(DECODE(RPT_TYPE,'U',1,0)) totULDNo,
        SUM(PCS)totPc,
        SUM(WT)totWt
        FROM
        GT_EXP_CARGO_MANIFEST where group_no is null)
	</select>
	<select id="exportmanifestlistallcount_withGrp" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
		resultClass="cargo.cms.export.bo.CargoManifestDetailsBO">
		SELECT
		SUM(DECODE(RPT_TYPE,NULL,1,0)) totAWBNo,SUM(DECODE(RPT_TYPE,'U',1,0)) totULDNo,
		SUM(PCS)totPc,
		SUM(WT)totWt
		FROM
		GT_EXP_CARGO_MANIFEST where group_no = #grpNo#
	</select>
	<select id="exportmanifestlistallcount_withOutGrp" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
		resultClass="cargo.cms.export.bo.CargoManifestDetailsBO">
		SELECT
		SUM(DECODE(RPT_TYPE,NULL,1,0)) totAWBNo,SUM(DECODE(RPT_TYPE,'U',1,0)) totULDNo,
		SUM(PCS)totPc,
		SUM(WT)totWt
		FROM
		GT_EXP_CARGO_MANIFEST where group_no is null
	</select>

	<select id="cargomanifest_get_uld_list" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
		resultClass="cargo.cms.export.bo.UldListBO">
		SELECT *
FROM
  (SELECT DECODE(uld_key, 'BULK CARGO', 1, DECODE(SIGN(8-LENGTH(uld_key)), -1, 3, 2)) sno,
    uld_key    AS uldKey,
    contr_code AS contourCode,
    unldg_pt   AS unLdgPt ,
    man_pcs    AS manPcs,
    man_wt     AS manWt,
    loc_code   AS whLoc ,
    empty_yn   AS emptyInd ,
   eic_flg eicInd,
    remarks AS remark,
    dam_ind AS condInd
  FROM v_exp_flt_uld
  WHERE flt_key          = #flightKey#
  AND flt_date           = to_date(#flightDate#,'DDMONYY')
  AND NVL(empty_yn,'N') !='Y'
  AND source NOT        IN ('DLS-L', 'DLS-E', 'UAF-E', 'UAF-L')
  )
ORDER BY sno,
  uldkey 
	</select>

	<select id="get_preman_without_car" parameterClass="cargo.cms.export.bo.PremanwithoutcarBO"
		resultClass="cargo.cms.export.bo.PremanwithoutcarBO">
		SELECT EPA.flt_key as fltKey,
		to_char(EPA.flt_date,'DDMONYY') as fltDate,
		EPA.AWB_NO awbNo, AW.DEST unLdgPt, DECODE(AW.CAR_YN, 'Y',PCS) pcs, DECODE(AW.CAR_YN, 'Y', WT) wt,
		decode(AW.spl_code1, null, '', AW.spl_code1 || decode(AW.spl_code2, null, '', '/'))
		|| decode(AW.spl_code2, null, '', AW.spl_code2 || decode(AW.spl_code3, null, '', '/'))
		|| decode(AW.spl_code3, null, '', AW.spl_code3 || decode(AW.spl_code4, null, '', '/'))
		|| decode(AW.spl_code4, null, '', AW.spl_code4 || decode(AW.spl_code5, null, '', '/'))
		|| decode(AW.spl_code5, null, '', AW.spl_code5 || decode(AW.spl_code6, null, '', '/'))
		|| decode(AW.spl_code6, null, '', AW.spl_code6 || decode(AW.spl_code7, null, '', '/'))
		|| decode(AW.spl_code7, null, '', AW.spl_code7 || decode(AW.spl_code8, null, '', '/'))
		  || decode(AW.spl_code8, null, '', AW.spl_code8 || decode(AW.spl_code9, null, '', '/'))
		|| decode(AW.spl_code9, null, '', AW.spl_code9) splCode1, AWB_RMK remark
		FROM EXP_PMANIFEST_AWB EPA 
		LEFT JOIN AWB AW 
		ON AW.AWB_NO= EPA.AWB_NO
		AND AW.AWB_DATE = EPA.AWB_DATE
		WHERE EPA.FLT_KEY=#fltKey#
		AND EPA.FLT_DATE = to_date(#fltDate#,'DDMONYY')
		AND NOT EXISTS(
		SELECT NULL FROM AWB_INVENTORY AI 
		WHERE AI.AWB_NO= EPA.AWB_NO
		AND AI.AWB_DATE = EPA.AWB_DATE)
	</select>
	
	<select id="get_preman_without_cargo" parameterClass="cargo.cms.export.bo.PremanwithoutcarBO"
		resultClass="cargo.cms.export.bo.PremanwithoutcarBO">
		 select 
    	pa.flt_key as fltKey,
		to_char(pa.flt_date,'DDMONYY') as fltDate,
		pa.unldg_pt as unLdgPt,
		pa.awb_no as awbNo,
		pa.pman_pcs as pcs,
		pa.pman_wt as wt,
		pa.dls_remarks as remark,
   		ai.awb_no as awbInvNum,
    	ai.locn_pcs as locPcs,
    	ai.locn_wt as locWt,   
    	(select    
		             decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '', '/'))
               		|| decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '', '/'))
               		|| decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '', '/'))
              		|| decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '', '/'))
               		|| decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '', '/'))
              		|| decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '', '/'))
               		|| decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '', '/'))
               		|| decode(spl_code8, null, '', spl_code8)  from   awb
        			where  awb_no = pa.awb_no and awb_date = pa.awb_date) splCode1,
       PKG_COMMON.get_flt_eta(#fltKey#,#fltDate#, 'D','DD') as etd 
    from exp_pmanifest_awb pa  
    left join awb_inventory ai on pa.awb_no = ai.awb_no and  pa.awb_date = ai.awb_date
    where
    	pa.FLT_KEY = #fltKey# AND
		pa.FLT_DATE = to_date(#fltDate#,'DDMONYY') AND
		pa.FLT_TYPE = 'E'
	</select>
	<!-- Changed for QR -->
	<update id="unFinalizeFlight" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO">
		update
		flt_opr_events set 	TR_TYPE = 'LPCGM', FINAL_MANF_IND = 'N', FINAL_MANF_DATE = null , FINAL_MANF_USER_ID = null, lm_user_id= #userId#, lm_date = sysdate where FLT_CLS_YN != 'Y' and
		flt_key = #flightKey# and SCH_DATE = to_date(#flightDate#,'DDMONYY') and flt_type = 'D'
		</update>
	<!-- Changed for QR -->
	<update id="finalizeFlight" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO">
		update
		flt_opr_events set TR_TYPE = 'LPCGM', FINAL_MANF_IND = 'Y',FINAL_MANF_DATE = sysdate , FINAL_MANF_USER_ID = #userId#, lm_user_id= #userId#, lm_date = sysdate where FLT_CLS_YN != 'Y' and
		flt_key = #flightKey# and SCH_DATE = to_date(#flightDate#,'DDMONYY') and flt_type = 'D'
		</update>
		
	<update id="updManfRmkFlight" parameterClass="cargo.cms.export.bo.CargoManifestDetailsBO">
		update
		flt_opr set
		rmk = #manfRmk# where flt_key = #flightNo# and SCH_DATE =
		to_date(#flightDate#,'DDMONYY') and flt_type = 'D'
		</update>
		
	<update id="updateRCSSentIndForFlight" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO">
		update flt_opr_events set RCS_SENT = 'Y' , lm_user_id= #userId#, lm_date = sysdate  where flt_key = #flightKey# and SCH_DATE = to_date(#flightDate#,'DDMONYY') and flt_type = 'D'
	</update>
		
	<!-- Changed for QR -->
	<select id="docAccptValue" parameterClass="cargo.cms.export.bo.AWBBO"
		resultClass="cargo.cms.export.bo.AWBBO">
	select  substr(awb_no, 0, 3)||'-'||substr(awb_no, 4, 11) awbNo,
	DOCACC_DATE docAccptDate,DOCACC_USER docAccptUser,PPK_TYPE ppkType, AWB_TYPE awbType
	from awb
	where awb_no=substr(#awbNo#,0,3)||substr(#awbNo#,5) 
	<isNotEmpty property="awbDate">
	and awb_date = to_date(#awbDate#,'DDMONYY')
	</isNotEmpty>
	</select>
	<!-- Changed for QR -->
	<select id="readydispatch" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
	resultClass="java.lang.Integer">
	select count(1) from exp_pmanifest_uld where 
	flt_key = #flightKey# and flt_date= to_date(#flightDate#,'DDMONYY') and uld_bt_no = #uldKey#  and ready_disp = 'Y' and FLT_TYPE = 'E'
	</select>
	<select id="TTIFExists" parameterClass="java.util.HashMap"
	resultClass="java.lang.Integer">
	SELECT COUNT(1) 
	FROM EXP_PMAN_TARMAC_ULD 
	WHERE FLT_KEY = #fltKey# AND FLT_DATE = #fltDate# AND ULD_BT_NO = #uldKey#  
	</select>
	<select id="IFReadydispatchInd" parameterClass="java.util.HashMap"
	resultClass="java.lang.Integer">
	SELECT COUNT(1) 
	FROM EXP_PMAN_TARMAC_ULD 
	WHERE FLT_KEY = #fltKey# AND FLT_DATE = #fltDate# AND ULD_BT_NO = #uldKey# and ready_disp = 'Y' 
	</select>
	<select id="tarmacReadydispatchInd" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
	resultClass="java.lang.Integer">
	 select count(1) 
     from
     (SELECT case when flt.TRANSIT_TYPE='IF' then NVL(uld.READY_DISP,'N') else 'Y' end as READY_IND
			FROM exp_pman_tarmac_uld uld, exp_flt_uld flt
			WHERE uld.FLT_KEY=#flightKey#
			AND uld.FLT_DATE=TO_DATE(#flightDate#,'DDMONYY')
			AND uld.ULD_bt_no=#uldKey# and uld.uld_bt_no= flt.uld_key and uld.flt_key = flt.flt_key and uld.flt_date= flt.flt_date ) readyInd      
    WHERE EXISTS    (SELECT COUNT(1) 
    FROM EXP_PMAN_TARMAC_ULD 
    WHERE FLT_KEY = #flightKey# AND FLT_DATE = TO_DATE(#flightDate#,'DDMONYY') AND ULD_BT_NO = #uldKey# ) and readyInd.READY_IND='Y'
	</select>
	<select id="isTransitMailExistForUld" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
	resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey# AND FLT_KEY=#flightKey# AND FLT_DATE=TO_DATE(#flightDate#, 'DDMONYY') AND FLT_TYPE='E' AND TRANSIT_TYPE IS NOT NULL
	</select>
	<select id="getULDNetWt" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
	resultClass="java.lang.String">
	select (gross_wt - tare_wt) from exp_flt_uld where uld_key = #uldKey#
	and flt_key = #flightKey# and flt_date= #flightDate# and FLT_TYPE = 'E'
	</select>
		<select id="getSumOfBupWt" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
	resultClass="java.lang.String">
	select sum(ASSIGNED_WT) from exp_pmanifest_uld_awb where uld_bt_no = #uldKey#
	and flt_key = #flightKey# and flt_date= #flightDate#
	</select>
	<select id="cmsToleranceValue" parameterClass="java.lang.String"
	resultClass="java.lang.String">
	SELECT NVL(RULE_VALUE,0) FROM CMSRULES WHERE RULE_CODE=#PARAM#
	</select>
	<select id="fetchTrNo" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
	resultClass="java.lang.String">
	select tr_no from flt_opr where flt_key = #flightKey# and SCH_DATE = #flightDate# and flt_type = 'D'
	</select>
	<select id="finalManfInd" parameterClass="java.lang.String"
	resultClass="cargo.cms.export.bo.CargoManifestDetailsBO">
	select FINAL_MANF_IND finalManfInd from flt_opr_events
	where tr_no = #PARAM#
	</select>
	<select id="manfRmk" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"
	resultClass="java.lang.String">
	select rmk from flt_opr where flt_key = #flightKey# and SCH_DATE = #flightDate# and flt_type = 'D'
	</select>

	<select id="getFlightCustomOutCnt" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO" resultClass="java.lang.String">
		select count(*) from flt_opr_events where flt_key = #flightKey# and  sch_date = to_date(#flightDate#,'DDMONYY') and flt_type = 'D' and ctm_out_date is not null
	</select>

	<select id="portDetails" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO" resultClass="java.lang.Integer">
	select count(0) from mast_hse_bu_config where CARR_CODE = #carrierCode# and PORT in (#unLdgPt#,#awbDest#)
	</select>
	<!-- Changed for QR -->
	<select id="trAwbList" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="cargo.cms.export.bo.AWBBO">
	select awb_no awbNo,to_char(awb_date,'DDMONYY') awbDate from edi_fhl 
	where awb_No = substr(#awbNo#,0,3)||substr(#awbNo#,5)
	</select>
	<select id="trNoForValidation" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="cargo.cms.export.bo.AWBBO">
	select tr_no trNo from exp_pmanifest_uld_awb where awb_no = #awbNo# and awb_date = #awbDate#
	and flt_key = #fltKey# and flt_date = #fltDate# and UNLDG_PT = #unldgpt#
	</select>
	<select id="hawbAvailable" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	select count(1) from exp_pmanifest_uld_awb_hawb where tr_no = #PARAM#
	</select>
	<!-- Changed for QR -->
	<select id="carCreated" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.Integer">
		select count(0) from exp_car where substr(awb_no,0,3)||'-'|| substr(awb_no,4,11) = #awbNo# and awb_date = #awbDate#
	</select>
	
	<select id="unLdgPtList" parameterClass="cargo.cms.export.bo.PrintCgoSearchBO" resultClass="cargo.cms.export.bo.UnLoadingPointBO">
		select off_point unLdgPt from flt_opr_leg where flt_key = #flightKey# and sch_date = to_date(#flightDate#) and flt_type = 'D'
	</select>
<!-- Added by Manorama for List/Print Cargo-Manifest::::::Ends -->	
	<!-- ##################### Maintain DLS By Srinivas : Start      ############################################################-->

	<update id="updateDlsFltUld" parameterClass="java.util.HashMap">
	   	update exp_flt_uld set
	   					uld_key = #ULD_KEY#,
                        source = #SOURCE#,
                        unldg_pt = #UNLDG_PT#,
                        contr_code = #CONTR_CODE#,
                        man_pcs = NVL(#PCS#,0),
                        gross_wt = nvl(#GROSS_WT#,0),
                        tare_wt = nvl(#TARE_WT#,0),
                        net_wt = nvl(#NET_WT#,0),
                        civil_mail_yn =  NVL(#CIVIL_MAIL_YN#,'N'),
                        empty_yn = #EMPTY_YN#,
                        eic_yn = #EIC_YN#,
                        del_yn = #DEL_YN#,
                        buildup_yn = #BUILDUP_YN#,
                        remarks = #REMARKS#,
                        PMAN_YN = #PMAN_YN#,
                        PPK_TYPE = #PPK_TYPE#, 
                        SPL_CODE1 = #SPL_CODE1#,
                        SPL_CODE2 = #SPL_CODE2#,
                        actual_wt = #ACTUAL_WT#,
                        est_wt = #EST_WT#,
                        dummy_ind = #DUMMY_IND#,
                        uld_type = #ULD_TYPE#,
                        BB_IND = #BREAK_BULK_YN#,
                        lm_user_id = #LM_USER_ID#,
                        lm_date = sysdate
                    where  flt_key = #FLT_KEY# AND flt_date = TO_DATE(#FLT_DATE#,'DDMONYY') 
                    		AND uld_key = #OLD_ULD_KEY# AND FLT_TYPE = 'E'
	</update>
	
	<update id="updateDlsAllotment" parameterClass="java.util.HashMap">
			update exp_dls_allotment 
			SET 
			uld_key = #ULDKEY#,
			CNTR_CODE  = #CONTRCODE#,
			EST_WT = #EST_WT#,
			DLS_SHC1 = NVL(#SPLCODE1#,DLS_SHC1),
			DLS_SHC2 = NVL(#SPLCODE2#,DLS_SHC2),
			TYPE = #ULD_TYPE#,
			UNLDG_PT = #UNLDGPT#,
			ACTUAL_WT = #ACTUAL_WT#,
			PCS = #PCS#,
			DLS_RMK = #REMARKS#,
			lm_user_id = #CRUSERID#, 
			lm_date = sysdate 
			where  uld_key = #OLD_ULD_KEY# and dls_no = #DLS_NO# AND ALLOT_TYPE = '*'
	</update>
	
	<select id="chkUldTypeExists"  parameterClass="map" resultClass="java.lang.String">
		select COUNT(1) from exp_flt_uld where FLT_KEY = #FLIGHTKEY# AND FLT_DATE = TO_DATE(#FLIGHTDATE#,'DDMONYY') AND 
		ULD_KEY = #ULDKEY# AND FLT_TYPE = 'E'
	</select>
	
	<select id="chkTopPalletsExists"  parameterClass="java.lang.String" resultClass="java.lang.String">
		select COUNT(1)  from uld_inventory where EIC_FLG ='Y' and BASE_PAL_FLG='Y' and BASE_PLT is null and uld_key = #awbULDNo#
	</select>
	
	<select id="chkUldExistsInInventory"  parameterClass="java.lang.String" resultClass="java.lang.String">
		select COUNT(1) from  uld_inventory where  uld_key = #uldKey#  and loc_code is not null
	</select>
	
	<select id="getTopPallets"  parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT  STRAGG(STRINGDELIM(uld_key, '/')) AS uldKey FROM (SELECT ULD_KEY FROM ULD_INVENTORY WHERE BASE_PLT = #awbULDNo#)	
	</select>
	
	<select id="getTopPalletPcWt"  parameterClass="map" resultClass="java.util.HashMap">
		select SUM(assigned_pcs) as PC, SUM(assigned_wt) as WT from exp_pmanifest_uld_awb 
		where uld_bt_no = #TOP_PLT_ULD# and flt_key = #FLIGHTKEY#  and flt_date = to_date(#FLIGHTDATE#,'DDMONYY')
	</select>
	
	<select id="sqlqueryPrevMonth"  parameterClass="map" resultClass="java.util.HashMap">
		select substr(to_char(add_months(TO_DATE(#monthYear#,'MONYYYY'),-1),'MONYYYY'),0,3) prevMonthName,
			substr(to_char(add_months(TO_DATE(#monthYear#,'MONYYYY'),-1),'MONYYYY'),4,4) prevYearName,
			substr(to_char(add_months(TO_DATE(#monthYear#,'MONYYYY'),-1),'MMYYYY'),0,2) prevMonthNumber,
			substr(to_char(TO_DATE(#monthYear#,'MONYYYY'),'MONYYYY'),0,3) currMonthName,
			substr(to_char(TO_DATE(#monthYear#,'MONYYYY'),'MONYYYY'),4,4) currYearName
			FROM DUAL
	</select>
	
	<select id="chkUldTypeInMasters"  parameterClass="java.lang.String" resultClass="java.lang.String">
		select COUNT(1) from MAST_ULD_TYPE where code = #uldKey#
	</select>
	
	<select id="chkUldTypesMaxWt"  parameterClass="java.lang.String" resultClass="java.lang.String">
		select max_weight from MAST_ULD_TYPE where code = #uldKey#
	</select>
	<!-- Changed for QR -->
	<select id="getUldTareWT"  parameterClass="map" resultClass="java.lang.String">
		select TARE_WEIGHT from ULD_TYPE_CARR_TARE_WT where ULD_CARR = #ULD_CARR# and ULD_TYPE = #ULD_TYPE# and 
		#ULD_NO# between ULD_NO_FROM and ULD_NO_TO 
	</select>
	
	<select id="getTareWtForLoad"  parameterClass="java.lang.String" resultClass="java.lang.String">
		 SELECT MAX(TARE_WEIGHT) FROM ULD_TYPE_CARR_TARE_WT WHERE ULD_TYPE = SUBSTR(#uldType#, 1, 3)
	</select>
	
	<select id="checkUldsBuildUpCompl" parameterClass="cargo.cms.export.bo.DLSDetailsBO" resultClass="java.lang.String">
		 SELECT COUNT(1) FROM exp_pmanifest_uld WHERE  flt_key = #fltKey# and flt_date = TO_DATE(#fltDate#,'DDMONYY') AND uld_bt_no = #awbULDNo# and BLDUP_COMPLETE = 'Y'
	</select>
	<!-- Changed for QR -->
	<select id="chkCounterCodeForDLS" parameterClass="map" resultClass="java.lang.String">
		 SELECT COUNT(1)  FROM ULD_TYPE_CONTR WHERE  uld_type = substr(#ULDKEY#,'1','3') AND CONTR_CODE = #CONTRCODE#
	</select>
	
	<select id="getGrossWtforEmpty"  parameterClass="java.lang.String" resultClass="java.lang.String">
		 SELECT MAX(max_weight) FROM uld_group_carr  WHERE uld_type = SUBSTR(#uldType#, 1, 3)
	</select>
	
	<select id="getCounterCode"  parameterClass="java.lang.String" resultClass="java.lang.String">
		 select contr_code
		        from   uld_type_contr
		        where  uld_type = substr(#uldType#, 1, 3) and rownum=1
	</select>
	
	<select id="chkCounterCodeCount"  parameterClass="java.lang.String" resultClass="java.lang.Integer">
		 select COUNT(1)
		        from   uld_type_contr
		        where  uld_type = substr(#uldType#, 1, 3) and rownum=1
	</select>
	<!-- Changed for QR -->
	<!--<select id="checkDlsExists"  parameterClass="map" resultClass="java.lang.String">
		select dls_no
        from   exp_dls_hd
        where  flt_key = #FLIGHTKEY# and flt_date = TO_DATE(#FLIGHTDATE#,'DDMONYY')
	</select>
	
	--><select id="checkDlsCreated"  parameterClass="map" resultClass="java.lang.String">
		select dls_no
        from   exp_dls_hd
        where  flt_key = #FLIGHT_NO# and flt_date = TO_DATE(#FLIGHT_DATE#,'DDMONYY')
	</select>
	
	<select id="checkUldAllot"  parameterClass="map" resultClass="java.lang.String">
		select SEQ from exp_dls_allotment where nvl(ALLOT_TYPE,'XX') = (CASE WHEN SOURCE = 'M' THEN '*' ELSE nvl(ALLOT_TYPE,'XX') END) AND 
		dls_no = #DLS_NO# and uld_key = #ULD_KEY#
	</select>
	
	<select id="checkUldAllotBT"  parameterClass="map" resultClass="java.lang.String">
		select SEQ from exp_dls_allotment where dls_no = #DLS_NO# and IMP_FLT_KEY = #IMP_FLTKEY# and IMP_FLT_DATE = to_date(#IMP_FLTDATE#,'DDMONYY') and UNLDG_PT = #UNLADING_PT# and TYPE = #ULD_TYPE#
	</select>
	
	<select id="getUldAssignWt"  parameterClass="map" resultClass="java.lang.String">
		select decode(gross_weight,'0','',gross_weight) from uld_inventory where uld_key = #ULD_KEY#
	</select>
	
	<select id="getMaxCarrierWt"  parameterClass="map" resultClass="java.lang.String">
	  	select max_weight from uld_group_carr where uld_type= substr(#ULDKEY#, 1, 3) and 
	  	carr_code = #ULD_CARR_CODE#	AND uld_group = (select uld_group from ULD_GROUP_TYPE where uld_type = substr(#ULDKEY#, 1, 3))
	</select>	
	
	
	<select id="chkMaxCarrierWtForULD"  parameterClass="map" resultClass="java.lang.String">
	  	select max_weight from uld_group_carr where uld_type= substr(#ULDKEY#, 1, 3) and 
	  	carr_code = #CARR_CODE#	AND uld_group = (select uld_group from ULD_GROUP_TYPE where uld_type = substr(#ULDKEY#, 1, 3))
	</select>	
	
	
	<!-- validation for flight (starts) -->
		<select id="chkValidOutboundFlt"  parameterClass="map" resultClass="java.lang.Integer">	
			select COUNT(1) from flt_opr where flt_key = #FLIGHT_NO# AND sch_date = TO_DATE(#FLIGHT_DATE#,'DDMONYY') AND flt_type = 'D'
		</select>

	<select id="chkValidInBoundFlt"  parameterClass="map" resultClass="java.lang.Integer">	
			select COUNT(1) from flt_opr where flt_key = #FLIGHT_NO# AND sch_date = TO_DATE(#FLIGHT_DATE#,'DDMONYY') AND flt_type = 'A'
		</select>
		
		<select id="getAwbTarmacCount"  parameterClass="map" resultClass="java.lang.Integer">	
			SELECT COUNT(1)  FROM exp_pman_tarmac_awb  WHERE flt_key = #FLT_KEY#  AND flt_date  = TO_DATE(#FLT_DATE#,'DDMONYY')  AND bulk_pcs  > 0
		</select>
				
		<select id="chkDlsFinalize"  parameterClass="map" resultClass="java.lang.Integer">	
			select COUNT(1) from   flt_opr_events where  flt_key = #FLIGHT_NO#
	            and    sch_date = TO_DATE(#FLIGHT_DATE#,'DDMONYY')
	            and    flt_type = 'D'
	            and    dls_final_date is not null
		</select>
		<!-- Changed for QR -->	
		<select id="chkExpFltClosed"  parameterClass="map" resultClass="java.lang.String">	
			SELECT flt_cls_yn from flt_opr a, flt_opr_events b
			WHERE a.tr_no = b.tr_no 
				AND a.flt_key =  #FLIGHT_NO#
				AND a.sch_date = TO_DATE(#FLIGHT_DATE#,'DDMONYY')
				AND b.flt_type = 'D' 
		</select>
	
		<select id="chkBldUpComlForFLT"  parameterClass="map" resultClass="java.lang.String">	
			select decode(buildup_cdate, null, 'N', 'Y')
	        from   flt_opr_events
	        where flt_key = #FLIGHT_NO# AND sch_date = TO_DATE(#FLIGHT_DATE#,'DDMONYY')
	        and    flt_type = 'D'
		</select>
		
		<select id="uldCheckOutCount"  parameterClass="map" resultClass="java.lang.Integer">	
			select count(1) from exp_chkout_dtl where flt_key = #FLIGHT_NO# and flt_date = TO_DATE(#FLIGHT_DATE#,'DDMONYY') and uld_key = #ULD_KEY# and chkout_date is not null
		</select>		
		
		<select id="chkFlightBuildUpComplete"  parameterClass="map" resultClass="java.lang.String">	
			SELECT COUNT(1)	FROM flt_opr t1, flt_opr_events t2
				Where t1.Tr_No  = t2.Tr_No And t1.Flt_Key  = #FLT_KEY#
				And t1.Sch_Date = To_Date(#FLT_DATE#, 'DDMONYY')
				AND t1.flt_type = 'D'  AND t2.buildup_cdate IS NOT NULL
		</select>
		
		
	<!-- validation for flight  (ends) -->
		<select id="getDlsNoFromHd"  parameterClass="map" resultClass="java.lang.String">
			select dls_no
	        from   exp_dls_hd
	        where  flt_key = #FLIGHTKEY# and flt_date = TO_DATE(#FLIGHTDATE#,'DDMONYY')
		</select>
		
		<select id="getDlsNumber"  parameterClass="map" resultClass="java.lang.String">
			select dls_no from exp_dls_hd where  flt_key = #FLT_KEY# and flt_date = TO_DATE(#FLT_DATE#,'DDMONYY')
		</select>
		
		<select id="checkUldAlloted"  parameterClass="cargo.cms.export.bo.DLSSummaryBO" resultClass="java.lang.String">
			select 'Y' from exp_dls_allotment where dls_no = #dlsNo# and uld_key = #uldNo#
		</select>
		
		<delete id="deleteSummaryList" parameterClass="java.lang.String">        	 
			delete from exp_dls_allotment where DLS_NO = #dlsNo#        
    	</delete>
    	
    	<delete id="deleteDlsAllotRecord" parameterClass="cargo.cms.export.bo.DLSSummaryBO">        	 
			delete from exp_dls_allotment where DLS_NO = #dlsNo# and SEQ = #sequence#  
    	</delete>
    	
    	<delete id="deleteWhenSelFromDls" parameterClass="map">        	 
			delete from exp_dls_allotment where DLS_NO = #DLS_NO# and ULD_KEY = #ULD_KEY# and ALLOT_TYPE = '*'
    	</delete>
    	
    	<delete id="deleteWhenSelFromSummary" parameterClass="map">        	 
			  DELETE FROM EXP_FLT_ULD WHERE FLT_KEY=#FLT_KEY# AND FLT_DATE=TO_DATE(#FLT_DATE#,'DDMONYY')  AND  ULD_KEY=#ULD_KEY#  AND FLT_TYPE = 'E'
    	</delete>
		 
		 <insert id="insertSummaryList" parameterClass="cargo.cms.export.bo.DLSSummaryBO" >		 	
			   INSERT INTO exp_dls_allotment
			  (DLS_NO,DOC_LINE_NO,SEQ,ALLOT_TYPE,ULD_KEY,CNTR_CODE,SOURCE,EST_WT, DLS_SHC1, DLS_SHC2,DLS_SHC3,DLS_SHC4,DLS_SHC5,DLS_SHC6,MANF_WT,GROSS_WEIGHT,HACTL_ULD_IND,
			  	 DLS_SHC7,DLS_SHC8,DLS_SHC9,DLS_SHC10,DLS_SHC11,DLS_SHC12,DLS_SHC13,DLS_SHC14,DLS_SHC15,BB_IND,TYPE,PRIORITY,DLS_RMK,UNLDG_PT,TOW_IND,ACTUAL_WT,TI_WT,DRY_ICE_WT,PCS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,
			  	 IMP_FLT_KEY,IMP_FLT_DATE,MAN_PRIORITY)
			  VALUES(#dlsNo#,EXP_DLS_ALLOTMENT_SEQ.nextval,#sequence#,#fltAllot#,#uldNo#,#counterCode#,#source#,#estWt#,#shc1#,#shc2#,#shc3#,#shc4#,#shc5#,#shc6#,#manifestWt#,#displayGrossWt#,#hactlUldInd#,
				  #shc7#,#shc8#,#shc9#,#shc10#,#shc11#,#shc12#,#shc13#,#shc14#,#shc15#,#looseUld#,#uldType#,#priority#,#dlsRemarks#,#unldgPnt#,#directTow#,#actualWt#,#tiWeight#,#dryIceWt#,#pcs#,#crUserId#,sysdate,#lmUserId#,sysdate,
				  #impFltKey#,#impFltDate#,#manUpliftPriority#)			
		 </insert>
		 
		 <update id="updateSummaryList" parameterClass="cargo.cms.export.bo.DLSSummaryBO">			
			update exp_dls_allotment
				  set
				    SEQ       = #sequence#,
				    ALLOT_TYPE = #fltAllot#,
				    ULD_KEY   = #uldNo#,
				    CNTR_CODE = #counterCode#,
				    SOURCE    = #source#,
				    EST_WT    = #estWt#,
				    DLS_SHC1  = #shc1#,
				    DLS_SHC2  = #shc2#,
				    DLS_SHC3  = #shc3#,
				    DLS_SHC4  = #shc4#,
				    DLS_SHC5  = #shc5#,
				    DLS_SHC6  = #shc6#,
				    DLS_SHC7  = #shc7#,
				    DLS_SHC8  = #shc8#,
				    DLS_SHC9  = #shc9#,
				    BB_IND    = #looseUld#,
				    TYPE      = #uldType#,
				    PRIORITY  = #priority#,
				    DLS_RMK   = #dlsRemarks#,
				    LM_USER_ID = #lmUserId#,
				    MAN_PRIORITY = #manUpliftPriority#,
				    LM_DATE = sysdate
			WHERE  DLS_NO  = #dlsNo# and DOC_LINE_NO = #docLineNo#
    </update>
	
     <update id="resetManualPriority" parameterClass="cargo.cms.export.bo.DLSSummaryBO">			
			update exp_dls_allotment
				  set
				    LM_USER_ID = #lmUserId#,
				    MAN_PRIORITY = '',
				    LM_DATE = sysdate
			WHERE  DLS_NO  = #dlsNo# and ULD_KEY = #uldNo#
    </update>
	
	<select id="exp_dls_getSummaryList"  parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.DLSSummaryBO">
		SELECT 
			  DLS_NO AS dlsNo,
			  ALLOT_TYPE  AS fltAllot,
			  SEQ         AS sequence,
			  ULD_KEY     AS uldNo,
			  CNTR_CODE   AS counterCode,
			  SOURCE      AS source,
			  trim(TO_CHAR(EST_WT,'9999990.99')) AS estWt,
			  DLS_SHC1    AS shc1,
			  DLS_SHC2    AS shc2,
			  DLS_SHC3    AS shc3,
			  DLS_SHC4    AS shc4,
			  DLS_SHC5    AS shc5,
			  DLS_SHC6    AS shc6,
			  DLS_SHC7    AS shc7,
			  DLS_SHC8    AS shc8,
			  DLS_SHC9    AS shc9,
			  DLS_SHC10   AS shc10,
			  DLS_SHC11   AS shc11,
			  DLS_SHC12   AS shc12,
			  DLS_SHC13   AS shc13,
			  DLS_SHC14   AS shc14,
			  DLS_SHC15   AS shc15,
			  BB_IND      AS looseUld,
			  TYPE        AS uldType,
			  PRIORITY    AS priority,
			  PRIORITY    AS oldPriority,
			  NVL(MAN_PRIORITY,'N') AS manUpliftPriority,
			  DLS_RMK     AS dlsRemarks,
			  TOW_IND     AS directTow,
			  UNLDG_PT    AS unldgPnt,
			  ACTUAL_WT   AS actualWt,
			  TI_WT       AS tiWeight,
			  DRY_ICE_WT  AS dryIceWt,
			  PCS         AS pcs,
			  GROSS_WEIGHT AS displayGrossWt,
			  HACTL_ULD_IND AS hactlUldInd,
			  MANF_WT as manifestWt,
			  IMP_FLT_KEY AS impFltKey,
			  to_char(IMP_FLT_DATE,'DDMONYY') AS impFltDate,
			  decode(DLS_SHC1, null, '', DLS_SHC1 || decode(DLS_SHC2, null, '', ','))
               		|| decode(DLS_SHC2, null, '', DLS_SHC2 || decode(DLS_SHC3, null, '', ','))
               		|| decode(DLS_SHC3, null, '', DLS_SHC3 || decode(DLS_SHC4, null, '', ','))
              		|| decode(DLS_SHC4, null, '', DLS_SHC4 || decode(DLS_SHC5, null, '', ','))
               		|| decode(DLS_SHC5, null, '', DLS_SHC5 || decode(DLS_SHC6, null, '', ','))
              		|| decode(DLS_SHC6, null, '', DLS_SHC6 || decode(DLS_SHC7, null, '', ','))
               		|| decode(DLS_SHC7, null, '', DLS_SHC7 || decode(DLS_SHC8, null, '', ','))
               		|| decode(DLS_SHC8, null, '', DLS_SHC8 || decode(DLS_SHC9, null, '', ','))
                    || decode(DLS_SHC9, null, '', DLS_SHC9 || decode(DLS_SHC10, null, '', ','))
                    || decode(DLS_SHC10, null, '', DLS_SHC10 || decode(DLS_SHC11, null, '', ','))
                    || decode(DLS_SHC11, null, '', DLS_SHC11 || decode(DLS_SHC12, null, '', ','))
                    || decode(DLS_SHC12, null, '', DLS_SHC12 || decode(DLS_SHC13, null, '', ','))
                    || decode(DLS_SHC13, null, '', DLS_SHC13 || decode(DLS_SHC14, null, '', ','))
                    || decode(DLS_SHC14, null, '', DLS_SHC14 || decode(DLS_SHC15, null, '', ','))
                    || decode(DLS_SHC15, null, '', DLS_SHC15 )  as displaySummarySHC
			  FROM exp_dls_allotment
        where DLS_NO = #dlsNo#  ORDER BY 4
	</select>
	
	
	<select id="exp_dls_getSummaryList_Excel"  parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.DLSSummaryBO">
		  SELECT 
			  ULD_KEY AS uldNo,
		      unldg_pt as unldgPnt,
		      NVL((select  to_char(cr_date,'DDMONYYHH24MISS')  from exp_flt_uld where (flt_key,flt_date) in 
          	  (select flt_key,flt_date from  exp_dls_hd where dls_no = allot.dls_no) and uld_key = allot.uld_key and unldg_pt = allot.unldg_pt),to_char(SYSDATE,'DDMONYYHH24MISS')) as crDate,
          	  to_char(hd.final_date,'HH24:MI') as finalizeDate,
          	  hd.dls_no as dlsNo,
		      type as uldType,
			  CNTR_CODE   AS counterCode,
			  (select EVA_CONTR_CODE from MAST_WOS_EVA_CONTR_CODE where WOS_CONTR_CODE = CNTR_CODE and rownum =1 ) AS brCounterCode,
			  (select uld_group from uld_group_type where uld_type = substr(ULD_KEY, 1, 3) and rownum =1 ) AS uldGroup,
			  PRIORITY     AS priority,
			  PRIORITY     AS oldPriority,
			  NVL(MAN_PRIORITY,'N') AS manUpliftPriority,
			  DLS_RMK      AS dlsRemarks,
			  NVL(ACTUAL_WT,'0') as actualWt,
			  NVL(PCS,'0')          AS pcs,
			  DECODE(DLS_SHC1, NULL, '', DLS_SHC1  || DECODE(DLS_SHC2, NULL, '', ','))
			  || DECODE(DLS_SHC2, NULL, '', DLS_SHC2  || DECODE(DLS_SHC3, NULL, '', ','))
			  || DECODE(DLS_SHC3, NULL, '', DLS_SHC3  || DECODE(DLS_SHC4, NULL, '', ','))
			  || DECODE(DLS_SHC4, NULL, '', DLS_SHC4  || DECODE(DLS_SHC5, NULL, '', ','))
			  || DECODE(DLS_SHC5, NULL, '', DLS_SHC5  || DECODE(DLS_SHC6, NULL, '', ','))
			  || DECODE(DLS_SHC6, NULL, '', DLS_SHC6  || DECODE(DLS_SHC7, NULL, '', ','))
			  || DECODE(DLS_SHC7, NULL, '', DLS_SHC7  || DECODE(DLS_SHC8, NULL, '', ','))
			  || DECODE(DLS_SHC8, NULL, '', DLS_SHC8  || DECODE(DLS_SHC9, NULL, '', ','))
			  || DECODE(DLS_SHC9, NULL, '', DLS_SHC9  || DECODE(DLS_SHC10, NULL, '', ','))
			  || DECODE(DLS_SHC10, NULL, '', DLS_SHC10  || DECODE(DLS_SHC11, NULL, '', ','))
			  || DECODE(DLS_SHC11, NULL, '', DLS_SHC11  || DECODE(DLS_SHC12, NULL, '', ','))
			  || DECODE(DLS_SHC12, NULL, '', DLS_SHC12  || DECODE(DLS_SHC13, NULL, '', ','))
			  || DECODE(DLS_SHC13, NULL, '', DLS_SHC13  || DECODE(DLS_SHC14, NULL, '', ','))
			  || DECODE(DLS_SHC14, NULL, '', DLS_SHC14  || DECODE(DLS_SHC15, NULL, '', ','))
			  || DECODE(DLS_SHC15, NULL, '', DLS_SHC15 ) AS displaySummarySHC,
			  case when 
			    (select COUNT(1) from MAST_ULD_TYPE where code = substr(ULD_KEY, 1, 3) and (H_CONT_IND = 'Y' or BT_IND = 'Y' or DUMMY_H_CONT_IND = 'Y') ) > 0 then 'Y'
			  else 'N' end as hContainer, 
			  bb_ind as bbInd,
			  IMP_FLT_KEY AS impFltKey,
		      to_char(IMP_FLT_DATE,'DDMONYY') AS impFltDate,
		      NVL(MANF_WT,'0') as   manifestWt,
		      case when hd.final_date is not null then
		        (select NVL(net_wt,'0') from exp_dls_dtl where (flt_key,flt_date) in (select flt_key,flt_date from  exp_dls_hd where dls_no = allot.dls_no) and uld_key = allot.uld_key and unldg_pt = allot.unldg_pt and rownum = 1)
		      	else        
		        (select NVL(net_wt,'0') from exp_flt_uld where (flt_key,flt_date) in (select flt_key,flt_date from  exp_dls_hd where dls_no = allot.dls_no) and uld_key = allot.uld_key and unldg_pt = allot.unldg_pt)
		      end  as netWt,		      
		      seq as sequence
			FROM exp_dls_allotment allot
	    join ( select dls_no,flt_key,flt_date,final_date from exp_dls_hd ) hd on hd.dls_no = allot.dls_no
	    where allot.dls_no = #dlsNo#
	</select>
	
	
	<select id="getAwbListForDLSUld" parameterClass="map" resultClass="cargo.cms.export.bo.DLSSummaryBO" >
	  select eua.awb_no as awbNumber,to_char(eua.awb_date,'DDMONYY') as awbDate, eua.assigned_pcs as awbPc, eua.assigned_wt as awbWt	
	  from
	  exp_pmanifest_uld_awb  eua 	  
 	  where eua.flt_key = #FLT_KEY# and eua.flt_date = #FLT_DATE# and eua.uld_bt_no = #ULD_KEY#
 	  union all
 	  select ept.awb_no as awbNumber,to_char(ept.awb_date,'DDMONYY') as awbDate, ept.assigned_pcs as awbPc, ept.assigned_wt as awbWt   
	  from
	  EXP_PMAN_TARMAC_ULD_AWB  ept 	  
 	  where ept.flt_key = #FLT_KEY# and ept.flt_date = #FLT_DATE# and ept.uld_bt_no = #ULD_KEY# 
	</select>
	
	<select id="getAwbListForTARMAC" parameterClass="map" resultClass="cargo.cms.export.bo.DLSSummaryBO" >
	    SELECT TARMAC.AWB_NO AS awbNumber, to_char(TARMAC.AWB_DATE,'DDMONYY') AS awbDate,
			DDT.SHP_TRF_PC     AS awbPc, DDT.SHP_TRF_WT     AS awbWt
			FROM EXP_PMAN_TARMAC_AWB TARMAC, V_DDT_DTL DDT
			WHERE TARMAC.FLT_KEY = DDT.SHP_CNTG_FLT_KEY
			AND TARMAC.FLT_DATE  = DDT.SHP_CNTG_FLT_DATE
			AND TARMAC.AWB_NO    = DDT.AWB_NO
			AND TARMAC.AWB_DATE    = DDT.AWB_DATE
			AND DDT.SHP_TRF_TYPE = 'TT' AND DDT.TRF_TYPE    IS NULl
			AND DDT.FLT_KEY = #IMP_FLT_KEY#
			AND DDT.FLT_DATE  = to_date(#IMP_FLT_DATE#,'DDMONYY')
			AND TARMAC.FLT_KEY   = #FLT_KEY#
			AND TARMAC.FLT_DATE  = TO_DATE(#FLT_DATE#,'DDMONYY')
	</select>
	
	<select id="DLSgetShpVolumeRCL" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT nvl(SUM((b.width * b.height * b.length * b.pcs)), 0) V_TTL_VOL, nvl(SUM(b.pcs), 0) V_TTL_PCS
	      FROM exp_rcl_hd a, exp_rcl_dmn b
	     WHERE a.rcl_no = b.rcl_no AND a.awb_no = #p_awb_no# AND a.awb_date = TO_DATE( #p_awb_date# , 'DDMONYY') AND a.STATUS NOT IN ('V','R') 
   	</select>
   	
   	<select id="DLSgetShpVolumeFWB" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		  SELECT NVL(SUM(b.RTD_AWB_VOL_AMT), 0)  V_TTL_VOL, NVL(nvl(SUM(b.pcs),SUM(a.pcs)),0) V_TTL_PCS
	      FROM edi_fwb a, edi_fwb_dmn b
	      WHERE a.tr_no = b.tr_no AND a.awb_no = #p_awb_no# AND a.awb_date = TO_DATE( #p_awb_date# , 'DDMONYY') 
   	</select>
	
   	
	<select id="getCpmULD"  parameterClass="map"  resultClass="java.lang.String">
		select cpm.ULD_KEY AS cpmUld from edi_cpm_dtl cpm
			join EXP_FLT_ULD inv on inv.imp_flt_key = cpm.flt_key and inv.imp_flt_date = cpm.flt_date and inv.uld_key = cpm.uld_key
			where cpm.uld_key = #ULD_KEY# AND inv.flt_key = #FLIGHT_NO# AND inv.flt_date = TO_DATE(#FLIGHT_DATE#,'DDMONYY')
	</select>
	
	
	<select id="getCPMSHCForTransitULD" parameterClass="map" resultClass="java.lang.String">		
			SELECT STRAGG(STRINGDELIM(shc.CODE,',')) AS displayCPMSHC
			FROM edi_cpm_dtl dtl, MAST_SPL_HAND_CODE shc, EXP_FLT_ULD inv
			WHERE inv.imp_flt_key = dtl.flt_key AND inv.imp_flt_date = dtl.flt_date AND inv.uld_key = dtl.uld_key AND dtl.uld_key = #ULD_KEY#
			AND inv.flt_key = #FLIGHT_NO# AND inv.flt_date = TO_DATE(#FLIGHT_DATE#,'DDMONYY') 
			AND (shc.CODE = dtl.SHC1 OR shc.CODE = dtl.SHC2 OR shc.CODE = dtl.SHC3 OR shc.CODE = dtl.SHC4 OR shc.CODE = dtl.SHC5
			      OR shc.CODE = dtl.SHC6 OR shc.CODE = dtl.SHC7 OR shc.CODE = dtl.SHC8 OR shc.CODE = dtl.SHC9) AND shc.DLS_YN = 'Y'		
	</select>
	<!-- Changed for QR -->
    <select id="getDlmqList"  parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.DLMQBO">
    	select seq_no as seqNo,carr_code || flt_num as fltKey, to_char(flt_date,'DDMONYY') as fltDate,msg_time as msgTime,flt_status as fltStatus,flt_dept as fltDept, 
    	case when (select COUNT(1) from dlmq_err_code where seq_no = dlmq_hd.seq_no) > 0 then 'R' else 'B' end  as errExists
    	from dlmq_hd where carr_code = substr(#fltNo#,1,2) and flt_num =substr(#fltNo#,3) and flt_date =  TO_DATE(#fltDate#, 'DDMONYY') order by cr_date asc
    </select>
    
    <select id="getDlmqMsgHd"  parameterClass="map" resultClass="cargo.cms.export.bo.DLMQBO">  
    	select SEQ_NO as seqNo, carr_code || flt_num as fltKey, to_char(flt_date,'DDMONYY') as fltDate, to_char(msg_time,'DDMONYY HH24:MM') as msgTime,flt_status as fltStatus,flt_dept as fltDept,
		FLT_REMARKS fltRemarks,case when (select COUNT(1) from dlmq_err_code where seq_no = dlmq_hd.seq_no) > 0 then 'REJECTED' else '' end  as  msgStatus, 
		PKG_COMMON.get_flt_eta(#FLT_KEY#, TO_DATE(#FLT_DATE#,'DDMONYY'), 'D', 'DD') as etd,
		TOT_MANF_WT as totManfWt,
		TOT_GROSS_WT as totGrossWt
		from dlmq_hd  WHERE SEQ_NO = #SEQ_NO#
    </select>
    <!-- Changed for QR -->
    <select id="getDlmqMsgHdForPrintDLS"  parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.DLMQBO">  
    	SELECT seqNo,fltKey,fltDate,msgTime,fltStatus,fltDept,errExists,msgStatus FROM (
		Select seq_no as seqNo,carr_code || flt_num as fltKey, to_char(flt_date,'DDMONYY') as fltDate, 
		to_char(CR_DATE,'DDMONYY HH24:MI:SS') as msgTime,flt_status as fltStatus,flt_dept as fltDept, 
    	case when (select COUNT(1) from dlmq_err_code where seq_no = dlmq_hd.seq_no) > 0 then 'R' else 'B' end  as errExists,
      	case when (select COUNT(1) from dlmq_err_code where seq_no = dlmq_hd.seq_no) > 0 then 'REJECTED' else '' end  as  msgStatus
    	from dlmq_hd where carr_code = substr(#fltNo#,1,2) and flt_num =substr(#fltNo#,3) and flt_date =  TO_DATE(#fltDate#, 'DDMONYY') ORDER BY CR_DATE DESC) where rownum = 1
    </select>
    
    <select id="getDlmqULDList"  parameterClass="map" resultClass="cargo.cms.export.bo.DLMQBO">  
			select 
			ULD_KEY as uldKey,
			CONTR_CODE as counterCode,
			UNLDG_PT as unldgPnt,
			ULD_TYPE as uldType,
			ACTUAL_WT as actWt,
			EST_WT as estWt,
			PRIORITY as priority,
			PCS as pcs,
			TI_WT as tiWt,
			ICE_WT as dryIceWt,
			BULK_IND as buldInd,
			REMARKS  as uldRmks,
			decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '', '/'))
					       || decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '', '/'))
					       || decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '', '/'))
					       || decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '', '/'))
					       || decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '', '/'))
					       || decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '', '/'))
					       || decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '', '/'))
			               || decode(spl_code8, null, '', spl_code8 || decode(spl_code9, null, '', '/'))
					       || decode(spl_code9, null, '', spl_code9 || decode(spl_code10, null, '', '/'))					       
					       || decode(spl_code10, null, '', spl_code10 || decode(spl_code11, null, '', '/'))
					       || decode(spl_code11, null, '', spl_code11 || decode(spl_code12, null, '', '/'))
					       || decode(spl_code12, null, '', spl_code12 || decode(spl_code13, null, '', '/'))
					       || decode(spl_code13, null, '', spl_code13 || decode(spl_code14, null, '', '/'))
			               || decode(spl_code14, null, '', spl_code14 || decode(spl_code15, null, '', '/'))
					       || decode(spl_code15, null, '', spl_code15
					       ) as shc
			from DLMQ_DTL WHERE SEQ_NO = #SEQ_NO# order by 3,4,1
		</select>
		
		<select id="getDlmqErrCodeLst"  parameterClass="map" resultClass="cargo.cms.export.bo.DLMQBO">
			select ERR_CODE as errCode,err_desc errDesc from DLMQ_ERR_CODE WHERE SEQ_NO = #SEQ_NO#
		</select>    
    
    <select id="getDlsSummaryList"  parameterClass="map" resultClass="cargo.cms.export.bo.DLSSummaryBO">
    	<![CDATA[
    	 	 SELECT 
    	 	  ALLOT.DLS_NO       AS dlsNo,
			  DOC_LINE_NO  AS docLineNo,
			  SEQ         sequence,
			  ALLOT_TYPE  fltAllot,
			  ULD_KEY     uldNo,
			  CNTR_CODE   counterCode,
			  SOURCE      source,
			  trim(TO_CHAR(EST_WT,'9999990.99')) AS estWt,
			  DLS_SHC1    shc1,
			  DLS_SHC2    shc2,
			  DLS_SHC3    shc3,
			  DLS_SHC4    shc4,
			  DLS_SHC5    shc5,
			  DLS_SHC6    shc6,
			  DLS_SHC7    shc7,
			  DLS_SHC8    shc8,
			  DLS_SHC9    shc9,
			  DLS_SHC10   AS shc10,
			  DLS_SHC11   AS shc11,
			  DLS_SHC12   AS shc12,
			  DLS_SHC13   AS shc13,
			  DLS_SHC14   AS shc14,
			  DLS_SHC15   AS shc15,
			  BB_IND      looseUld,
			  TYPE        uldType, 
			  CASE
			  	WHEN ALLOT.PRIORITY IS NULL THEN '' || (
			  		FUN_GET_ULD_UPLIFT_PRIORITY(DLSHD.FLT_KEY, TO_CHAR(DLSHD.FLT_DATE, 'DDMONYY'), ALLOT.ULD_KEY)
				  )
				ELSE ALLOT.PRIORITY
			  END priority,
			  UNLDG_PT     AS unldgPnt,
        	  TOW_IND      AS directTow,
        	  ACTUAL_WT    AS actualWt,
        	  TI_WT        AS tiWeight,
        	  DRY_ICE_WT   AS dryIceWt,
        	  PCS          AS pcs, 
			  DLS_RMK     dlsRemarks
        	  FROM exp_dls_allotment allot
        	  JOIN EXP_DLS_HD DLSHD
        	  ON DLSHD.DLS_NO = ALLOT.DLS_NO
        	  where allot.dls_no = #DLS_NO# AND SOURCE = 'M'  AND ALLOT_TYPE <> '*'
        	]]>       	  
    </select>
    
    
     <update id="updateTheExpUldToSystem" parameterClass="map" >
     	<![CDATA[
		  UPDATE exp_dls_allotment
			SET    
			   SOURCE     = 'S',
			   UNLDG_PT   = #UNLADING#,
        	   ACTUAL_WT  = #ACTUALWT#,
        	   PCS  	  =	#PCS#,
        	   CNTR_CODE  = #CNTRCODE#			  
		    WHERE dls_no = #DLSNUM# AND uld_key = #ULDKEY#	AND DOC_LINE_NO = #DOCLINENO#
			  AND SEQ = #SEQNUM# AND SOURCE = 'M'  AND ALLOT_TYPE <> '*'
		]]> 
    </update>
    
    <select id="getDlsAllotRecord"  parameterClass="map" resultClass="cargo.cms.export.bo.DLSSummaryBO">
			  SELECT 
			  DLS_NO       AS dlsNo,
			  DOC_LINE_NO  AS docLineNo,
			  SEQ          AS sequence,
			  ULD_KEY      AS uldNo,
			  CNTR_CODE    AS counterCode,
			  SOURCE       AS source,
			  trim(TO_CHAR(EST_WT,'9999990.99')) AS estWt,
			  DLS_SHC1    AS shc1,
			  DLS_SHC2    AS shc2,
			  DLS_SHC3    AS shc3,
			  DLS_SHC4    AS shc4,
			  DLS_SHC5    AS shc5,
			  DLS_SHC6    AS shc6,
			  DLS_SHC7    AS shc7,
			  DLS_SHC8    AS shc8,
			  DLS_SHC9    AS shc9,
			  DLS_SHC10   AS shc10,
			  DLS_SHC11   AS shc11,
			  DLS_SHC12   AS shc12,
			  DLS_SHC13   AS shc13,
			  DLS_SHC14   AS shc14,
			  DLS_SHC15   AS shc15,
			  BB_IND       AS looseUld,
			  TYPE         AS uldType,
			  PRIORITY     AS priority,
			  PRIORITY     AS oldPriority,
			  NVL(MAN_PRIORITY,'N') AS manUpliftPriority,
			  UNLDG_PT     AS unldgPnt,
        	  TOW_IND      AS directTow,
        	  ACTUAL_WT    AS actualWt,
        	  TI_WT        AS tiWeight,
        	  DRY_ICE_WT   AS dryIceWt,
        	  PCS          AS pcs,  
			  DECODE(DLS_RMK,'BULK','',DLS_RMK)      AS dlsRemarks,
			  HACTL_ULD_IND AS hactlUldInd,
			  MANF_WT as manifestWt
			  FROM exp_dls_allotment
			  WHERE dls_no = #DLS_NO#
			  AND uld_key    = #ULD_KEY#	
			  AND SEQ = #SEQ_NO#
    </select>
    
    
     <select id="getDlsAllotRecordBT"  parameterClass="map" resultClass="cargo.cms.export.bo.DLSSummaryBO">
			  SELECT 
			  DLS_NO       AS dlsNo,
			  DOC_LINE_NO  AS docLineNo,
			  SEQ          AS sequence,
			  ULD_KEY      AS uldNo,
			  CNTR_CODE    AS counterCode,
			  SOURCE       AS source,
			  trim(TO_CHAR(EST_WT,'9999990.99')) AS estWt,
			  DLS_SHC1    AS shc1,
			  DLS_SHC2    AS shc2,
			  DLS_SHC3    AS shc3,
			  DLS_SHC4    AS shc4,
			  DLS_SHC5    AS shc5,
			  DLS_SHC6    AS shc6,
			  DLS_SHC7    AS shc7,
			  DLS_SHC8    AS shc8,
			  DLS_SHC9    AS shc9,
			  DLS_SHC10   AS shc10,
			  DLS_SHC11   AS shc11,
			  DLS_SHC12   AS shc12,
			  DLS_SHC13   AS shc13,
			  DLS_SHC14   AS shc14,
			  DLS_SHC15   AS shc15,
			  BB_IND       AS looseUld,
			  TYPE         AS uldType,
			  PRIORITY     AS priority,
			  PRIORITY     AS oldPriority,
			  NVL(MAN_PRIORITY,'N') AS manUpliftPriority,
			  UNLDG_PT     AS unldgPnt,
        	  TOW_IND      AS directTow,
        	  ACTUAL_WT    AS actualWt,
        	  TI_WT        AS tiWeight,
        	  DRY_ICE_WT   AS dryIceWt,
        	  PCS          AS pcs,  
			  DECODE(DLS_RMK,'BULK','',DLS_RMK)      AS dlsRemarks,
			  HACTL_ULD_IND AS hactlUldInd,
			  MANF_WT as manifestWt
			  FROM exp_dls_allotment
			  WHERE dls_no = #DLS_NO# AND SEQ = #SEQ_NO#		  
    </select>
    
	<!-- validation for loaded uld (starts) -->		
		<select id="getFlightCarreir"  parameterClass="map" resultClass="java.lang.String">	
			select code from mast_carrier	where  code = substr(#FLIGHTKEY#, 1, 2)
		</select>
		<select id="getUldOwnerCode"  parameterClass="map" resultClass="java.lang.String">
			select owner_id from uld_inventory where  uld_key = #ULDKEY#	
		</select>
		<select id="chkFlightAssign"  parameterClass="map" resultClass="java.util.HashMap">	
			SELECT FLT_KEY,TO_CHAR(FLT_DATE,'DDMONYY') AS FLT_DATE,EMPTY_FLG,FLT_TYPE from ULD_INVENTORY WHERE ULD_KEY = #ULDKEY# 
		</select>
		<select id="chkUldPremanifest"  parameterClass="map" resultClass="java.lang.String">
			select COUNT(1)
		    from EXP_PMANIFEST_ULD
		    where FLT_KEY = #FLIGHTKEY# and FLT_DATE = TO_DATE(#FLIGHTDATE#,'DDMONYY') and FLT_TYPE = 'E' and ULD_BT_NO = #ULDKEY# 	
		</select>
		
		<select id="chkUldBaseOrTopPallet"  parameterClass="map" resultClass="java.lang.String">	
			select COUNT(1) from uld_inventory where uld_key = #ULDKEY# and base_pal_flg = 'Y' and base_plt is null and loc_code is not null
		</select>
		
		<select id="chkUnldgPoint"  parameterClass="map" resultClass="java.lang.String">	
			 select    COUNT(1) from     flt_opr t1, flt_opr_leg t2 where    t1.tr_no = t2.tr_no
         	 and t1.flt_key = #FLIGHTKEY#  and t1.sch_date = to_date(#FLIGHTDATE#,'DDMONYY') and t1.flt_type = 'D' and t2.off_point = #UNLDGPT#
		</select>
		
		<select id="validateUldCompatible"  parameterClass="map" resultClass="java.lang.String">	
			select COUNT(1)
	        from   uld_type_proh_acft
	        where  uld_type = substr(#ULDKEY#, 1, 3)
	        AND    contr_code = #CONTRCODE#
	        AND    nvl(CARR_CODE,'0000') = decode(CARR_CODE,'','0000',#CARR_CODE#)
	        AND    acft_type = (select acft_type
	                            from   flt_opr
	                            where  flt_key = #FLIGHTKEY#
	                            and    sch_date = to_date(#FLIGHTDATE#,'DDMONYY')
	                            and    flt_type = 'D')
		</select>
		<select id="chkUldIsHContainer"  parameterClass="map" resultClass="java.lang.String">	
			select COUNT(1) from MAST_ULD_TYPE where code = substr(#ULDKEY#, 1, 3) and (H_CONT_IND = 'Y' or BT_IND = 'Y' or DUMMY_H_CONT_IND = 'Y')
		</select>
		<select id="uldIsHContainer"  parameterClass="map" resultClass="java.lang.String">	
			select COUNT(1) from MAST_ULD_TYPE where code = substr(#ULD_KEY#, 1, 3) and (H_CONT_IND = 'Y' or BT_IND = 'Y' or DUMMY_H_CONT_IND = 'Y')
	</select>
	<select id="chkULDEmptyIndicator"  parameterClass="map" resultClass="java.lang.String">	
			select count(1) from uld_inventory where empty_flg = 'N' and uld_key = #ULD_KEY#
	</select>
	<select id="flightULDCargoType"  parameterClass="map" resultClass="java.lang.String">	
			select uld_type from exp_flt_uld where uld_key = #ULD_KEY#	and flt_key = #FLT_KEY# and flt_date= #FLT_DATE# and FLT_TYPE = 'E'
	</select>
	<!-- validation for loaded uld  (ends) -->
	
	<!-- validation dls deletion (starts) -->
	
		<select id="getExpFltULDRecord" parameterClass="cargo.cms.export.bo.DLSDetailsBO"  resultClass="cargo.cms.export.bo.DLSDetailsBO" >
		select 
		   del_yn as deleteYN, 
		   flt_key as fltKey, 
		   flt_date as fltDate, 
		   unldg_pt as unLdgPt, 
		   uld_key awbULDNo, 
		   status as uldCompInd, 
		   SOURCE as source,
		   PPK_TYPE as ,
		   contr_code as contr, 
		   gross_wt as grossWt, 
		   tare_wt as tareWt, 
		   net_wt as netWt, 
	       spl_code1 as splCode1,
		   spl_code2 as splCode2,
		   eic_yn as eic,
	       checkout_yn as checkoutYN 
	  	   from   exp_flt_uld
		   where  flt_key = #fltKey#
			and    flt_date = #fltDate#
			and    uld_key = #awbULDNo#
			and    UNLDG_PT = #unLdgPt#
	</select>
	
		<select id="chkCheckOutTab"  parameterClass="cargo.cms.export.bo.DLSDetailsBO" resultClass="java.lang.String">	
			select COUNT(1) from exp_chkout_dtl  where uld_key = #awbULDNo# and flt_key = #fltKey# AND flt_date = TO_DATE(#fltDate#,'DDMONYY')
		</select>
		
		<select id="chkCheckOutExists"  parameterClass="map" resultClass="java.lang.String">	
			select COUNT(1) from exp_chkout_dtl  where uld_key = #ULD_KEY# and flt_key = #FLT_KEY# AND flt_date = TO_DATE(#FLT_DATE#,'DDMONYY')
		</select>
		
		<select id="chkUldExistsInSummary"  parameterClass="map" resultClass="java.lang.String">	
			select COUNT(1) from exp_dls_allotment where uld_key = #ULD_KEY# and dls_no = (select dls_no from   exp_dls_hd
       		 where  flt_key = #FLT_KEY# and flt_date = TO_DATE(#FLT_DATE#,'DDMONYY')) and SEQ = #SEQ_NO#
		</select>
				
		<select id="chkUldExistsInFltUld"  parameterClass="map" resultClass="java.lang.String">	
			select COUNT(1) from exp_flt_uld where FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#,'DDMONYY') AND 
			ULD_KEY = #ULD_KEY# AND FLT_TYPE = 'E'
		</select>
		
	<!-- validation dls deletion  (ends) -->
	
	<!-- validation finalize dls (starts) -->
	
	<!-- validation finalize dls  (ends) -->
	
	
	<select id="declare_buildup_complete_loose_get_items" parameterClass="map" resultClass="cargo.cms.export.bo.DeclareBuildupCompleteLooseItemBO">
		select 
			awb_no as awbNo,SUBSTR(awb_no,'0','3') AS awbPfx,SUBSTR(awb_no,'4') AS awbSfx,
		    (select 
		               decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '',','))
		               || decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '',','))
		               || decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '',','))
		               || decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '',','))
		               || decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '',','))
		               || decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '',','))
		               || decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '',','))
		               || decode(spl_code8, null, '', spl_code8 || decode(spl_code9, null, '',',')) 
		               || decode(spl_code9, null, '', spl_code9 )
		        from   awb a1
		        where  a1.awb_no = exp_pmanifest_awb.awb_no 
		        and  a1.awb_date = to_char(exp_pmanifest_awb.awb_date ,'DDMONYY')) splCodes, 
			unldg_pt as unldgpt, 
			PMAN_PCS as preManfPc,
			TO_CHAR(NVL(PMAN_wt,0),'99999999999999990.0') AS preManfWt, 
			PMAN_wt as preManfWt, 
			PMAN_PCS-ASSIGNED_BULK_PCS as unassignedPc, 
			TO_CHAR(NVL((PMAN_wt-ASSIGNED_BULK_WT),0),'99999999999999990.0') AS unassignedWt,
			(select count(1) from   EXP_PMANIFEST_ULD_AWB where  flt_key = exp_pmanifest_awb.flt_key and    flt_date = exp_pmanifest_awb.flt_date and    unldg_pt = exp_pmanifest_awb.unldg_pt
						and    awb_no = exp_pmanifest_awb.awb_no
						and    awb_date = exp_pmanifest_awb.awb_date)as uldBtNo			
		from   
			exp_pmanifest_awb
		where  
			flt_key = #fltNo#
			and flt_date = to_date(#fltDate#,'DDMONYY')
			and    unassigned_bulk_pcs > 0
	</select>
	<!-- Changed for QR -->
	<select id="declare_buildup_complete_loose_get_header" parameterClass="map" resultClass="cargo.cms.export.bo.DeclareBuildupCompleteLooseBO">
		select flt_key as fltNo,
		  to_char(sch_date,'DDMONYY') as fltDate,
		  to_char(EST_DATE,'DDMONYY') as etd,
		  PKG_COMMON.get_flt_eta(#fltNo#, TO_DATE(#fltDate#, 'DDMONYY'), 'D', 'DD') as etdTime 
		from flt_opr
		where 
			flt_key=#fltNo#
			and sch_date = TO_DATE(#fltDate#, 'DDMONYY')
			and FLT_TYPE = 'D'
	</select>
	
	
	<parameterMap id="getTotalAWBULDMap" class="map" >
		<parameter property="FLIGHTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="FLIGHTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="TOTALAWB" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>    
		<parameter property="TOTALULD" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>        
	</parameterMap>

	<procedure id="getTotalAWBULDProc" parameterMap="getTotalAWBULDMap" >
		{ call pkg_exp_uld.get_dls_total_awb_uld(?,?,?,?)  }
	</procedure>
	<!-- Changed for QR -->
	<select id="getosiremarks"  parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="java.lang.String">	
		SELECT OSI_RMK FROM EXP_DLS_HD
			 WHERE FLT_KEY=#fltNo#
			 AND FLT_DATE =#fltDate# 
	</select>
	
	<select id="getFlightRmk"  parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="java.lang.String">	
		   select rmk from flt_opr opr where FLT_KEY=#fltNo# AND sch_date =#fltDate# AND FLT_TYPE = 'D'
	</select>
	
	<select id="getosiremarks2"  parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="java.lang.String">	
		SELECT OSI_RMK_2 FROM EXP_DLS_HD
			 WHERE FLT_KEY=#fltNo#
			 AND FLT_DATE =#fltDate# 
	</select>
	
	
                
	<parameterMap id="getDLSMap" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>         
		<parameter property="FLIGHTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="FLIGHTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	</parameterMap>

	<procedure id="getDLSDetails" parameterMap="getDLSMap" >
		{? = call PKG_EXP_RPT.get_dls(?,?)  }
	</procedure>
	
	<select id="validateExportFlightNew" parameterClass="map" resultClass="java.lang.String">  
		SELECT NVL((select 'TRUE'
        from   flt_opr
        where  flt_key = #flightKey#
        and    sch_date = TO_DATE(#flightDate#,'DDMONYY')
        and    flt_type = 'D'),'Flight does not exist') FROM DUAL  
	</select>
	
	<select id="connectflightsearchuld"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.ExpFlightBO">
	SELECT
				FLT_KEY as fltNo,
				PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, 'D', 'DD') as etd,
				PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, 'D', 'DD') as etdTime,
				(select dls_ind from flt_opr_events where flt_key = #fltNo# and sch_date = TO_DATE(#fltDate#, 'DDMONYY') and flt_type = 'D'
				and tr_no = A.tr_no) as freezeInd,
				to_char(SCH_DATE,'ddMONYY') as fltDate ,'By ULD' as createBy,'N' as tramac,
				RMK fltRmk
	FROM 
				FLT_OPR A  
	WHERE 
				A.FLT_KEY=#fltNo# 		
	AND 
				A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
	AND 
				A.FLT_TYPE = 'D'
	</select>
	
		<parameterMap id="exportdlsupdatemap" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="DLSIND"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	<procedure id="exportdlsupdateprocedurecall" parameterMap="exportdlsupdatemap" >
		{? = call pkg_exp_uld.dls_finalize(?,?,?)}
	</procedure>
	<!-- Changed for QR -->
	<select id="getLoadedUldDtls" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.DLSDetailsBO" >
		select uld_key as uldKey, uld_key as oldUldKey,unldg_pt as unLdgPt, contr_code as contr, man_pcs as pc, 
			decode(gross_wt,'0','',gross_wt) as actualWt, tare_wt as tareWt, net_wt as netWt, civil_mail_yn as civilMail, 
			remarks as rmk,SPL_CODE1 as splCode1,SPL_CODE2 as splCode2,
      		est_wt as estUldWt,dummy_ind as dummyUld,uld_type as uldTypeInd,BB_IND as breakBulk
      		from exp_flt_uld where flt_key=#fltNo# and  flt_date=to_date(#fltDate#,'DDMONYY') and uld_key=#uldNo# and flt_type='E'
	</select>     
      <!-- Changed for QR -->
	<select id="getAwbListForUld" parameterClass="map" resultClass="cargo.cms.export.bo.DLSDetailsBO" >
	  select a.catalog as catalogDisplay,
	  (SELECT 
		   (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		   (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
		   THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		   ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		  FROM AWB A WHERE  A.AWB_NO=eua.AWB_NO AND A.AWB_DATE=eua.AWB_DATE) as cargoType, 
	  eua.unldg_pt as unLdgPt, substr(eua.awb_no, 1, 3) || '-' || substr(eua.awb_no, 4) as awbNo, eua.assigned_pcs as pc, eua.assigned_wt as grossWt, 
	  decode(eua.ppk_type,'B','N','Y') as bup,decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') as catalog,
	  decode (a.catalog,'EM','P.O Mail','EO','Outbound Courier','TM','Transit Mail',
	  'TU','Transit US Mail','EU','US Mail','TT','Tail To Tail','') as rmk, (
	  	FUN_GET_ULD_UPLIFT_PRIORITY(EUA.FLT_KEY, TO_CHAR(EUA.FLT_DATE, 'DDMONYY'), EUA.ULD_BT_NO)
	  ) uldUpliftPriority,
	  FUN_GET_AWB_UPLIFT_PRIORITY(A.AWB_NO,A.AWB_DATE) awbUpliftPriority
	  from
	  exp_pmanifest_uld_awb  eua
 	  left join awb a on  a.awb_no = eua.awb_no and a.awb_date = eua.awb_date
 	  where eua.flt_key = #FLT_KEY# and eua.flt_date = #FLT_DATE# and eua.uld_bt_no = #ULD_KEY#
 	  union all
 	  select a.catalog as catalogDisplay, 
	  (SELECT 
		   (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		   (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
		   THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		   ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		  FROM AWB A WHERE  A.AWB_NO=eua.AWB_NO AND A.AWB_DATE=eua.AWB_DATE) as cargoType,  	  
 	  eua.unldg_pt as unLdgPt, substr(eua.awb_no, 1, 3) || '-' || substr(eua.awb_no, 4) as awbNo, eua.assigned_pcs as pc, eua.assigned_wt as grossWt, 
	  decode(a.ppk_type,'B','N','Y') as bup,decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') as catalog,
	  decode (a.catalog,'EM','P.O Mail','EO','Outbound Courier','TM','Transit Mail',
	  'TU','Transit US Mail','EU','US Mail','TT','Tail To Tail','') as rmk, (
	  	FUN_GET_ULD_UPLIFT_PRIORITY(EUA.FLT_KEY, TO_CHAR(EUA.FLT_DATE, 'DDMONYY'), EUA.ULD_BT_NO)
	  ) uldUpliftPriority,
	  FUN_GET_AWB_UPLIFT_PRIORITY(A.AWB_NO,A.AWB_DATE) awbUpliftPriority
	  from
	  EXP_PMAN_TARMAC_ULD_AWB  eua
 	  left join awb a on  a.awb_no = eua.awb_no and a.awb_date = eua.awb_date
 	  where eua.flt_key = #FLT_KEY# and eua.flt_date = #FLT_DATE# and eua.uld_bt_no = #ULD_KEY# 
	</select>
	
	
	<select id="getCargoTypeListForUld" parameterClass="map" resultClass="cargo.cms.export.bo.CargoTypeBO" >
	<![CDATA[
	  select 
       (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
       (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
       THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
       ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as catalog	  
	  from
	  exp_pmanifest_uld_awb  eua
 	  left join awb a on  a.awb_no = eua.awb_no and a.awb_date = eua.awb_date
 	  ]]>
 	  where eua.flt_key = #FLT_KEY# and eua.flt_date = #FLT_DATE# and eua.uld_bt_no = #ULD_KEY#
 	  union all
 	 <![CDATA[
 	  select (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
       (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
       THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
       ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as catalog
	  from
	  EXP_PMAN_TARMAC_ULD_AWB  eua
 	  left join awb a on  a.awb_no = eua.awb_no and a.awb_date = eua.awb_date
 	  ]]>
 	  where eua.flt_key = #FLT_KEY# and eua.flt_date = #FLT_DATE# and eua.uld_bt_no = #ULD_KEY# 
	</select>
	
	<select id="getTheUldType" parameterClass="map" resultClass="java.lang.String" >
		select decode(eic_flg,'Y','E','N',decode(empty_flg,'Y','X','C'),'') as eicUld from uld_inventory where uld_key = #ULD_KEY#
	</select>
	
	<select id="validateCarrierIsInCubic" parameterClass="java.lang.String" resultClass="java.lang.String" >
		select COUNT(1) from mast_carr_grp where grp_carr_code = 'CX' AND (grp_carr_code = #fltCarr#  OR  carr_code = #fltCarr#)
	</select>
	
	<select id="exportdlslist" parameterClass="cargo.cms.export.bo.FlightSearchBO" 	resultClass="cargo.cms.export.bo.DLSDetailsBO" >
	<![CDATA[		
	 select t2.leg_ord,
       decode(sign(9-length(t1.uld_key)), 1, 1, 2) sno,
	   t1.awb_no awbNo, 
	   to_char(t1.awb_date,'DDMONYY') awbDate, (
	   		SELECT MIN(FUN_GET_AWB_UPLIFT_PRIORITY(AWB_NO,AWB_DATE)) FROM AWB 
	   		WHERE (SUBSTR(AWB.AWB_NO, 1, 3) || '-' || SUBSTR(AWB.AWB_NO, 4)) = T1.AWB_NO AND AWB.AWB_DATE = T1.AWB_DATE
	   ) awbUpliftPriority,
	   (SELECT CATALOG FROM AWB WHERE SUBSTR(AWB_NO, 1, 3) || '-' || SUBSTR(AWB_NO, 4) = T1.AWB_NO AND AWB_DATE = T1.AWB_DATE) as catalogDisplay, 
	   (SELECT 
		     (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		     (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
		     THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		     ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		  FROM AWB A WHERE  SUBSTR(A.AWB_NO, 1, 3) || '-' || SUBSTR(A.AWB_NO, 4)=T1.AWB_NO AND A.AWB_DATE=T1.AWB_DATE) as cargoType, 
	   FUN_GET_ULD_UPLIFT_PRIORITY(T1.FLT_KEY, TO_CHAR(T1.FLT_DATE, 'DDMONYY'), INV.ULD_KEY) uldUpliftPriority,
	   t1.del_yn as deleteYN, 
	   t1.flt_key as fltKey, 
	   to_char(t1.flt_date,'DDMONYY') as fltDate, 
	   t1.unldg_pt as unLdgPt, 
	   t1.uld_key awbULDNo, 
	   vsize(t1.uld_key) uldSize,
	   t1.status as uldCompInd, 
	   t1.contr_code as contr, 
	   decode(t1.manifest_wt,'0','',t1.manifest_wt) as mfstWt,
	   decode(t1.gross_wt,'0','',t1.gross_wt)as grossWt,
	   decode(t1.tare_wt,'0','',t1.tare_wt)as tareWt,
	   decode(t1.net_wt,'0','',t1.net_wt)as netWt,
	   decode(t1.pcs,'0','',t1.pcs)as pc,
	   ROUND((100 *(NVL(t1.net_wt,0) - NVL(t1.manifest_wt,0)) / decode(NVL(t1.manifest_wt,1),0,1,NVL(t1.manifest_wt,1))), 1)var, 
	   (NVL(t1.net_wt,0) - NVL(t1.manifest_wt,0)) varKg,
	   case when t1.variance < 0 then 'R' else 'N' end as setColor,	 
	   case when  t3.dls_final_date is not null then t1.spl_code  else t1.spl_code1  end as splCode1,
	   case when  t3.dls_final_date is not null then ''  else t1.spl_code2  end as splCode2,            
	   t1.eic_yn as eic,
	   t1.bldup_yn as bup,
	   case when t3.dls_final_date is not null then t1.FINALIZE_IND
       else decode(inv.final_weight,'','N',inv.final_weight) end as finalizeInd,
	   inv.MAN_WT_IND as manWtInd,
	   decode(inv.transit_type,'TT','Y','IF','Y','TA','Y','') as transitType,
	   inv.transit_type as uldInvTT,
       decode(inv.handling_mode,'DT','Y','') as towInd,
       decode(inv.transit_type,'TT','Y','IF','Y','') as cpmUldtype,
	   t1.breakbulk_yn as bb,	   
	   t1.rec_type as recType,
	   t1.DUMMY_IND as dummyUld,
	   t1.EST_WT as estUldWt,
	   t1.ULD_TYPE as uldTypeInd,	
	   t1.EXC_CODE as exceptionCode,
	   decode(trim(t1.RMK),'BULK','',trim(t1.RMK)) as leRemarks,
	   decode ((select catalog from awb where (substr(awb_no, 1, 3) || '-' || substr(awb_no, 4)) = t1.awb_no and 
	   awb_date = t1.awb_date),'EM','P.O Mail','EO','Outbound Courier','TM','Transit Mail','TU','Transit US Mail','EU','US Mail','TT','Tail To Tail','') as rmk,
	   decode(t1.del_yn,'Y','N','Y') as premanInd,     
       (SELECT bldup_complete FROM exp_pmanifest_uld P where  P.flt_key = t1.flt_key
  		and    P.flt_date = t1.flt_date
        and    P.flt_type = 'E'
        and    P.uld_bt_no = t1.ULD_KEY) as displayInd,        
        (SELECT decode(source,'TARMAC','Y','DDT','Y','N') FROM EXP_FLT_ULD T where  T.flt_key = t1.flt_key
  		and    T.flt_date = t1.flt_date
        and    T.flt_type = 'E'
        and    T.Uld_key = t1.ULD_KEY) as tarmacInd,
	    t1.checkout_yn as checkoutYN,
	    (select COUNT(1) from MAST_ULD_TYPE where code = substr(t1.ULD_KEY, 1, 3) and (H_CONT_IND = 'Y' or BT_IND = 'Y' or DUMMY_H_CONT_IND = 'Y')) as hContainer,        
        (select trf_type from  v_ddt_dtl where cntg_flt_date   = t1.flt_date AND cntg_flt_key  = t1.flt_key AND uld_key = t1.ULD_KEY and rownum = 1 ) as transferTypeULD,
        ( select count(*) from exp_pmanifest_uld_awb where (awb_no,awb_date) 
           in (select awb_no,awb_date from  v_ddt_dtl	where shp_cntg_flt_key  = t1.flt_key and shp_cntg_flt_date = t1.flt_date and shp_trf_type = 'IF') and uld_bt_no = t1.ULD_KEY 
           and  flt_key = t1.flt_key  and flt_date  = t1.flt_date      
        ) as transferTypeBulk  
		from   gt_exp_dls_dtl t1
    	join flt_opr_leg t2 on  t1.flt_key = t2.flt_key and t1.flt_date = t2.sch_date and t1.unldg_pt = t2.off_point
		join flt_opr_events t3 on  t3.flt_key = t2.flt_key and t3.sch_date = t2.sch_date and t3.flt_type = 'D'
    	left join exp_flt_uld inv on  inv.flt_key = t1.flt_key and inv.flt_date = t1.flt_date and inv.uld_key =  t1.ULD_KEY
    	where
		t1.flt_key = #fltNo#	and    t1.flt_date = TO_DATE(#fltDate#, 'DDMONYY')
		and    t2.flt_type = 'D' order by 1, 2, 3
  	]]>
	</select>
	<select id="chkULDEmptyIndicatorCNP"  parameterClass="map" resultClass="java.lang.String">	
			<![CDATA[  
				select count(1) from uld_inventory where empty_flg = 'Y' and NVL(GROSS_WEIGHT,0) >  NVL(TARE_WEIGHT,0)  and uld_key = #ULD_KEY#
			]]>
	</select>
	<select id="getIncludeTTANDCNPIND" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from mast_carrier where code = #carrCode# and NVL(DLMQ_TT_CNP_IND,'N') = 'N'
	</select>
	<select id="getTTUldType" parameterClass="java.lang.String" resultClass="java.lang.String">
		select 'Y' as ttType from uld_inventory where uld_key = #uldKey# and NVL(transit_type,'X') = 'TT' 
	</select>
	<!-- Changed for QR -->
	<!--<select id="exportdlscalculate" parameterClass="java.lang.String" 
	resultClass="cargo.cms.export.bo.DLSDetailsBO" >
	SELECT 
				DECODE(T2.TARE_WEIGHT,0,'',TRIM(to_char(T2.TARE_WEIGHT,999999999.9))) tareWt,T1.CONTR_CODE contr,T1.EIC_FLG eic ,PPK_IND bup,
				DECODE((SELECT COUNT(1) FROM EXP_BREAK_BULK WHERE ULD_KEY=#uldKey#),'0','Y','N') bb,'N' uldCompInd,WH_DEST whDest,LOC_CODE locCode
	FROM 
				ULD_INVENTORY T1,MAST_ULD_TYPE T2 
	WHERE 
				T1.ULD_TYPE = T2.CODE 
	AND		T1.ULD_KEY=#uldKey#
	</select>

	--><delete id="exportdlsheaderdelete" parameterClass="cargo.cms.export.bo.CargoManifestDetailsBO">        	
		DELETE FROM EXP_DLS_HD WHERE FLT_KEY=#flightNo# AND FLT_DATE=#flightDate#         
    </delete>

	<delete id="exportdlsdetailsdelete" parameterClass="cargo.cms.export.bo.DLSDetailsBO">        	
		DELETE FROM EXP_FLT_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY')  AND  ULD_KEY=#awbULDNo#
    </delete>

    <update id="exportdlsheaderinsert" parameterClass="cargo.cms.export.bo.CargoManifestDetailsBO" >
	UPDATE EXP_DLS_HD
	SET    OSI_RMK     = #osiRmk#,
		   LM_USER_ID  = #lastModUserId#,
		   LM_DATE     = SYSDATE
	WHERE  DLS_NO      = #dlsNo#
    </update>

    <update id="exportdlsdetailsinsert" parameterClass="cargo.cms.export.bo.DLSDetailsBO" >
	UPDATE EXP_DLS_DTL
	SET    CONTR_CODE          = #contr#,
		   GROSS_WT            = #grossWt#,
		   TARE_WT             = #tareWt#,
		   PCS                 = #pc#,
		   RMK                 = #rmk#,
		   SPL_CODE1           = #splCode1#,
		   SPL_CODE2           = #splCode2#,
		   LM_USER_ID          = #lastModUserId#,
		   LM_DATE             = SYSDATE
	WHERE  DLS_NO              = #dlsNo#
	AND    DOC_LINE_NO         = #docLineNo#
	</update>

	<select id="exportdlsdetailsforlistprint" parameterClass="cargo.cms.export.bo.FlightSearchBO" 
	resultClass="cargo.cms.export.bo.DLSDetailsBO" >
	<!--select 
	   flt_key as fltKey, 
	   flt_date as fltDate, 
	   unldg_pt as unLdgPt, 
	   nvl(awb_no, uld_key) awbNo, 
	   status as uldCompInd,
	   checkout_yn as checkoutYN, 
	   contr_code as contr, 
	   manifest_wt as mfstWt, 
	   gross_wt as grossWt, 
	   tare_wt as tareWt, 
	   net_wt as netWt, 
	   pcs as pc, 
	   variance as var,
	   spl_code1 || decode(spl_code1, null, '', decode(spl_code2, null, '', ',' || spl_code2)) splCode1,
	   eic_yn as eic,
	   bldup_yn as bup,
	   breakbulk_yn as bb,	   
	   rmk as rmk
	from   gt_exp_dls_dtl
	where  flt_key = #fltNo#
	and    flt_date = TO_DATE(#fltDate#, 'DDMONYY')-->
	  select t2.leg_ord,
       decode(sign(9-length(t1.uld_key)), 1, 1, 2) sno,
	   t1.awb_no awbNo, 
       t1.uld_key awbULDNo,	
       t1.manifest_wt as mfstWt,
	   decode(t1.gross_wt,'0','',t1.gross_wt)as grossWt,
	   t1.tare_wt as tareWt, 
	   t1.net_wt as netWt, 
	   decode(t1.pcs,'0','',t1.pcs)as pc,
	   t1.breakbulk_yn as bb,	       
	   t1.flt_key as fltKey,
	   to_char(t1.flt_date,'DDMONYY') as fltDate,
	   t1.unldg_pt as unLdgPt, 
	   t1.status as uldCompInd,
	   t1.checkout_yn as checkoutYN, 
	   t1.contr_code as contr, 
		t1.variance as var,
	   t1.spl_code1 || decode(t1.spl_code1, null, '', decode(t1.spl_code2, null, '', ',' || t1.spl_code2)) splCode1,
	   t1.eic_yn as eic,
	   t1.bldup_yn as bup,   
	   t1.rmk as rmk
	from   gt_exp_dls_dtl t1, flt_opr_leg t2
	where  t1.flt_key = t2.flt_key
	and    t1.flt_date = t2.sch_date
	and    t1.unldg_pt = t2.off_point
	and    t1.flt_key = #fltNo#
	and    t1.flt_date = TO_DATE(#fltDate#, 'DDMONYY') 
	and    t2.flt_type = 'D'
	order by 1, 2, 3
		
	</select>

	<select id="exportdlsdetailsalltotal" parameterClass="cargo.cms.export.bo.FlightSearchBO" 
	resultClass="cargo.cms.export.bo.CargoManifestDetailsBO" >
	SELECT  SUM(PCS)totPc,
			SUM(NET_WT) totWt,
			SUM(MANIFEST_WT) totMfstWt,SUM(GROSS_WT) totGrsWt
	FROM 	gt_exp_dls_dtl
	WHERE 	
			FLT_KEY=#fltNo#
			AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY')
	</select>
	
	
	
    <insert id="exportdlsdetailsinsertEXP_FLT_ULD" parameterClass="cargo.cms.export.bo.DLSDetailsBO" >
	INSERT INTO EXP_FLT_ULD (
	   FLT_KEY, FLT_DATE, ULD_KEY, 
	   UNLDG_PT , CONTR_CODE, WH_DEST, 
	   LOC_CODE, MAN_PCS,  
	   GROSS_WT, TARE_WT, NET_WT, 
	   EIC_YN, BUILDUP_YN, 
	   BREAK_BULK_YN, 
	   REMARKS,SOURCE) 
	VALUES (#fltKey#,#fltDate#,#uldKey#,
		#unLdgPt#,#contr# ,#whDest#,
		#locCode#,#pc# , 
		#grossWt#,#tareWt# ,#netWt# ,
		#eic#,#bup# , 
		#bb#, 
		#rmk#,#source#)
	</insert>

	<select id="exportgeneratesrfno" parameterClass="java.lang.String" resultClass="java.lang.String">
	select to_char(concat(to_char(sysdate,'DDMMYY'), lpad(#srf#,5, '0'))) from dual
	</select>

	<select id="exportgeneratedlsno" parameterClass="java.lang.String" resultClass="java.lang.String">
	select to_char(concat(to_char(sysdate,'DDMMYY'), lpad(#srf#,4, '0')))
		from dual

	</select>

	<select id="exportcheckULDexistdls" parameterClass="cargo.cms.export.bo.DLSDetailsBO" resultClass="java.lang.Integer">
	SELECT COUNT(ULD_KEY) FROM EXP_FLT_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#  AND  ULD_KEY=#uldKey#
	</select>
	<!-- Changed for QR -->
	<!--<select id="exportcheckULDpremanifested" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	SELECT COUNT(ULD_BT_NO) FROM EXP_PMANIFEST_ULD WHERE ULD_BT_NO=#uldKey#
	</select>
	
	--><select id="expCheckULDpremanifested" parameterClass="java.lang.String" resultClass="java.lang.String">
	<!--		SELECT FLT_KEY FROM EXP_PMANIFEST_ULD WHERE ULD_BT_NO = #uldKey#-->
		SELECT FLT_KEY FROM   uld_inventory WHERE  uld_key = #uldKey# and    owned_inv = 'Y'
	</select>
	<!-- Changed for QR -->		
	<!--<select id="exportcheckvalidunloadingpoint" parameterClass="cargo.cms.export.bo.DLSDetailsBO" resultClass="java.lang.Integer" >
		SELECT COUNT(1) FROM  
 		FLT_OPR T1, FLT_OPR_LEG T2 WHERE T1.FLT_KEY = T2.FLT_KEY AND  T1.SCH_DATE = T2.SCH_DATE  AND 
  		 T1.FLT_TYPE = 'D' AND  T1.FLT_KEY=#fltKey#  AND  T1.SCH_DATE =TO_DATE(#fltDate#,'DDMONYY') AND  T2.OFF_POINT =#unLdgPt#
	</select>
	
	-->
	<!-- Changed for QR -->
	<select id="getFlightAllotmentForDLS" parameterClass="map" resultClass="java.util.HashMap" >
		<![CDATA[		
		select (select (decode(sum(allot.qty_Q7 ), null, '', sum(allot.qty_Q7 ) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ZA ), null, '', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               || decode(sum(allot.QTY_ZB ), null, '', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               || decode(sum(allot.QTY_ZC ), null, '', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               || decode(sum(allot.QTY_PGA ), null, '', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               || decode(sum(allot.QTY_H3 ), null, '', ','|| sum(allot.QTY_H3 ) ||'H3' )
               || decode(sum(allot.QTY_BULK ), null, '', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               || decode(sum(allot.QTY_ALF ), null, '', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               || decode(sum(allot.QTY_PLA ), null, '', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               || decode(sum(allot.QTY_Q7D ), null, '', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               || decode(sum(allot.QTY_W2 ), null, '', ','|| sum(allot.QTY_W2 ) ||'W2' )
               || decode(sum(allot.QTY_PAG ), null, '', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               ||  decode( count(allot.QTY_H5 ), 0, '', ','|| count(allot.QTY_H5 ) ||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac',
                'Courier','Mail','Open','EIC') ) as FLT_ALLOT,(SELECT SUM(WT) FROM edi_elp_allot EA WHERE EA.tr_no= msg.tr_no and EA.CGO_TYPE
                in('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac',
                'Courier','Mail','Open','EIC')) as WT             
                from edi_elp_msg msg where  msg.flt_key= #FLIGHT_NO#   and msg.flt_date=TO_DATE(#FLIGHT_DATE#, 'DDMONYY') and msg.tr_no in( 
                select max(elpmsg.tr_no) as trNo from  edi_elp_msg elpmsg  where 
                elpmsg.flt_key=#FLIGHT_NO# and elpmsg.flt_date=TO_DATE(#FLIGHT_DATE#, 'DDMONYY'))
          ]]>
	</select>
	<!-- Changed for QR -->
	<select id="getWarehouseAllotmentRampMonitoring" parameterClass="map" resultClass="java.util.HashMap" >
		<![CDATA[
		select 
			 (select (decode(d.qtyQ7 , null, '', 0,'', d.qtyQ7 ||'Q7' )
			               || decode(d.qtyQ6, null, '',0,'',','||  d.qtyQ6 ||'Q6')
			               || decode(d.qtyX8, null, '',0,'',','|| d.qtyX8 ||'X8')
			               || decode( d.qtyPEB, null, '',0,'', ','|| d.qtyPEB ||'PEB')
			               || decode(d.qtyH2, null, '',0,'', ','||d.qtyH2 ||'H2')
			               || decode(d.qtyA2, null, '',0,'', ','|| d.qtyA2 ||'A2')
			               || decode(d.qtyLDC, null, '',0,'', ','|| d.qtyLDC ||'LDC')
			               
			               || decode(d.qtyZA, null, '',0,'',','||  d.qtyZA ||'ZA')
			               || decode(d.qtyZB, null, '',0,'',','|| d.qtyZB ||'ZB')
			               || decode(d.qtyZC, null, '',0,'', ','|| d.qtyZC ||'ZC')
			               || decode(d.qtyPGA, null, '',0,'', ','||d.qtyPGA ||'PGA')
			               || decode(d.qtyH3, null, '',0,'', ','|| d.qtyH3 ||'H3')
			               || decode(d.qtyBULK, null, '',0,'', ','|| d.qtyBULK ||'BULK')
			               || decode(d.qtyALF, null, '',0,'',','||  d.qtyALF ||'ALF')
			               || decode(d.qtyPLA, null, '',0,'',','|| d.qtyPLA ||'PLA')
			               || decode(d.qtyQ7D, null, '',0,'', ','|| d.qtyQ7D ||'Q7D')
			               || decode(d.qtyW2, null, '',0,'', ','||d.qtyW2 ||'W2')
			               || decode(d.qtyPAG, null, '',0,'', ','|| d.qtyPAG ||'PAG')
			               
			               ||  decode(d.countH5 , 0, '',0,'', ','||'H5' ))  
			                from
			              (select a.countH5,(NVL((a.totalQ6-b.totalQ6),0)+c.totalQ6) as qtyQ6,(NVL((a.totalQ7-b.totalQ7),0)+c.totalQ7) as qtyQ7,(NVL((a.totalX8-b.totalX8),0)+c.totalX8) as qtyX8,
			              (NVL((a.totalPEB-b.totalPEB),0)+c.totalPEB) as qtyPEB,(NVL((a.totalA2-b.totalA2),0)+c.totalA2) as qtyA2,
                    (NVL((a.totalLDC-b.totalLDC),0)+c.totalLDC) as qtyLDC,(NVL((a.totalH2-b.totalH2),0)+c.totalH2) as qtyH2,             
                    
	                    (NVL((a.totalZA-b.totalZA),0)+c.totalZA) as qtyZA,(NVL((a.totalZB-b.totalZB),0)+c.totalZB) as qtyZB,
	                    (NVL((a.totalZC-b.totalZC),0)+c.totalZC) as qtyZC,(NVL((a.totalPGA-b.totalPGA),0)+c.totalPGA) as qtyPGA,
	                    (NVL((a.totalH3-b.totalH3),0)+c.totalH3) as qtyH3,(NVL((a.totalBULK-b.totalBULK),0)+c.totalBULK) as qtyBULK,
	                    (NVL((a.totalALF-b.totalALF),0)+c.totalALF) as qtyALF,(NVL((a.totalPLA-b.totalPLA),0)+c.totalPLA) as qtyPLA,
	                    (NVL((a.totalQ7D-b.totalQ7D),0)+c.totalQ7D) as qtyQ7D,(NVL((a.totalW2-b.totalW2),0)+c.totalW2) as qtyW2,
	                    (NVL((a.totalPAG-b.totalPAG),0)+c.totalPAG) as qtyPAG,
                        
			              a.tr_no as tr_no 
			              from (
			                      select count(QTY_H5 )as countH5, sum(qty_Q6 ) as totalQ6,sum(qty_Q7 ) as totalQ7,
			                       sum(QTY_X8 ) as totalX8,sum(QTY_PEB ) as totalPEB,sum(QTY_A2 ) as totalA2, sum(QTY_LDC ) as totalLDC,
			                        sum(QTY_H2 ) as totalH2,
			                        
			                        sum(QTY_ZA ) as totalZA,sum(QTY_ZB ) as totalZB,sum(QTY_ZC ) as totalZC, sum(QTY_PGA ) as totalPGA,sum(QTY_H3 ) as totalH3,sum(QTY_BULK) as totalBULK,
			      					sum(QTY_ALF) as totalALF,sum(QTY_PLA) as totalPLA,sum(QTY_Q7D) as totalQ7D, sum(QTY_W2) as totalW2,sum(QTY_PAG) as totalPAG,
			                        
			                      tr_no from edi_elp_allot where CGO_TYPE in('Transit','Export Local B/U') group by tr_no) a, 
			                      
			                      (select NVL(sum(qty_Q6 ),0) as totalQ6,NVL(sum(qty_Q7 ),0) as totalQ7,
			                      NVL(sum(QTY_X8 ),0) as totalX8,NVL(sum(QTY_PEB ),0) as totalPEB,NVL(sum(QTY_A2 ),0) as totalA2,NVL( sum(QTY_LDC ),0) as totalLDC,
			                        NVL(sum(QTY_H2 ),0) as totalH2,
			                        
			                        NVL(sum(QTY_ZA ),0) as totalZA,NVL(sum(QTY_ZB ),0) as totalZB,NVL(sum(QTY_ZC ),0) as totalZC, NVL(sum(QTY_PGA ),0) as totalPGA,NVL(sum(QTY_H3 ),0) as totalH3,NVL(sum(QTY_BULK),0) as totalBULK,
			      					NVL(sum(QTY_ALF),0) as totalALF,NVL(sum(QTY_PLA),0) as totalPLA,NVL(sum(QTY_Q7D),0) as totalQ7D, NVL(sum(QTY_W2),0) as totalW2,NVL(sum(QTY_PAG),0) as totalPAG,
			                        
			                      tr_no from edi_elp_allot where CGO_TYPE in('Transit PPK') group by tr_no) b,
			                      
			                      (select NVL(sum(qty_Q6 ),0) as totalQ6,NVL(sum(qty_Q7 ),0) as totalQ7,
			                      NVL(sum(QTY_X8 ),0) as totalX8,NVL(sum(QTY_PEB ),0) as totalPEB,NVL(sum(QTY_A2 ),0) as totalA2,NVL( sum(QTY_LDC ),0) as totalLDC,
			                        NVL(sum(QTY_H2 ),0) as totalH2,
			                        
			                        NVL(sum(QTY_ZA ),0) as totalZA,NVL(sum(QTY_ZB ),0) as totalZB,NVL(sum(QTY_ZC ),0) as totalZC, NVL(sum(QTY_PGA ),0) as totalPGA,NVL(sum(QTY_H3 ),0) as totalH3,NVL(sum(QTY_BULK),0) as totalBULK,
			      					NVL(sum(QTY_ALF),0) as totalALF,NVL(sum(QTY_PLA),0) as totalPLA,NVL(sum(QTY_Q7D),0) as totalQ7D, NVL(sum(QTY_W2),0) as totalW2,NVL(sum(QTY_PAG),0) as totalPAG,
			                        
			                      tr_no from edi_elp_allot where CGO_TYPE in('Export Local Pre-Pack','Transit PPK')  group by tr_no) c
			              where a.tr_no=b.tr_no
			              and b.tr_no = c.tr_no 
			              )d 
			      where d.tr_no =msg.tr_no) as WH_ALLOT
			      from edi_elp_msg msg  
			      where  msg.flt_key=#FLIGHT_NO#   and msg.flt_date=TO_DATE(#FLIGHT_DATE#, 'DDMONYY') 
			     and msg.tr_no in (select max(elpmsg.tr_no) as trNo from  edi_elp_msg elpmsg  
			                       where elpmsg.flt_key=#FLIGHT_NO# and elpmsg.flt_date=TO_DATE(#FLIGHT_DATE#, 'DDMONYY') and elpmsg.TRF_IND='Y' )		
          ]]>
	</select>
	
	<select id="getUldAllotment" parameterClass="java.lang.String" resultClass="java.lang.String" >	 
		 SELECT ALLOT.ULD_ALLOT
		 FROM ULD_GROUP_TYPE GRP JOIN MAST_ULD_ALLOT_GROUP ALLOT ON GRP.ULD_GROUP=ALLOT.ULD_GROUP 
		 WHERE GRP.ULD_TYPE=substr(#uldKey#, 1, 3)
		 
    </select>
    	
<!-- ##################### Maintain DLS By Srinivas : End        ####################################################-->
	
	
	<!-- Added by Manorama for Close Flight Sector:::Starts-->
		<select id="getflightcloselist" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.FlightCloseBO">
			SELECT 
				LEG_STATUS as closedStatus,
				LEG_STATUS as oldClosedStatus,
				OFF_POINT as portOfCall,
				'' as connectingFlight,
				TR_NO as trNo,
				DOC_LINE_NO as docLineNo
			FROM FLT_OPR_LEG 
			WHERE 
				FLT_KEY=#fltNo# AND 
				SCH_DATE=#fltDate#
				AND FLT_TYPE = 'D'
		</select>
		
		<select id="checkExpFlightLevel1Acess" parameterClass="map" resultClass="java.lang.String" >
	<![CDATA[
    SELECT
	  (CASE
	    WHEN (SELECT  TRUNC(TO_DATE(TO_CHAR(sysdate,'DDMONYY HH24MI'),'DDMONYY HH24MI')) - TRUNC(TO_DATE((SELECT TO_CHAR(ACT_DATE,'DDMONYY')||' '||trim(to_char(ACT_TIME,'0000')) FROM FLT_OPR WHERE FLT_KEY=#fltKey# AND SCH_DATE=#fltDate# AND FLT_TYPE='D' AND ACT_DATE IS NOT NULL),'DDMONYY HH24MI'))+1  
	      FROM DUAL) > (SELECT RULE_VALUE FROM CMSRULES where rule_code='CLOSE_UNCLOSE_EXP_FLIGHT_LEVEL1')
	    THEN 'Y'
	    ELSE 'N'
	  END) DAYDIFF
	FROM dual
	]]>  
	</select>
	<select id="checkExpFlightLevel2Acess" parameterClass="map" resultClass="java.lang.String" >
	<![CDATA[
	SELECT
  	(CASE
    WHEN (SELECT  TRUNC(TO_DATE(TO_CHAR(sysdate,'DDMONYY HH24MI'),'DDMONYY HH24MI')) - TRUNC(TO_DATE((SELECT TO_CHAR(ACT_DATE,'DDMONYY')||' '||trim(to_char(ACT_TIME,'0000')) FROM FLT_OPR WHERE FLT_KEY=#fltKey# AND SCH_DATE=#fltDate# AND FLT_TYPE='D' AND ACT_DATE IS NOT NULL),'DDMONYY HH24MI'))+1  
      FROM DUAL) > (SELECT RULE_VALUE FROM CMSRULES where rule_code='CLOSE_UNCLOSE_EXP_FLIGHT_LEVEL2')
    THEN 'Y'
    ELSE 'N'
  	END) DAYDIFF
	FROM dual
	]]>  
	</select>
	
	<select id="getflightcloselistheader" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.FlightCloseDetailsBO">
		SELECT 
			CARR_CODE as fltpfx,
			FLT_NO as fltsfx,
			flt_key as fltKey, 
			PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, A.FLT_TYPE, 'DD')  as etd, 
			to_char(ORG_FLT_DATE,'DDMONYY') as fltDate,
			to_char(SCH_DATE,'DDMONYY') as std,
			PKG_COMMON.get_flt_sta(A.FLT_KEY, A.SCH_DATE, A.FLT_TYPE, 'DD') hrAndMinSch,
			PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, A.FLT_TYPE, 'DD') hrAndMinEst
		FROM FLT_OPR A  
			WHERE A.FLT_KEY=#fltNo# AND 
			A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND 
			A.FLT_TYPE = 'D'
	</select>
	
	<select id="getflightclosDetails" parameterClass="cargo.cms.export.bo.FlightCloseBO" resultClass="cargo.cms.export.bo.FlightCloseBO">
		SELECT 
			A.FLT_CLS_YN fltClsYN,
			A.FLT_CLS_USER_ID fltClsUser
		FROM flt_opr_events A  
			WHERE A.TR_NO = #trNo#
	</select>
	
	<select id="getflightActualdateDetails" parameterClass="cargo.cms.export.bo.FlightCloseDetailsBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM FLT_OPR WHERE FLT_KEY=#fltKey# AND SCH_DATE=#fltDate# AND ACT_DATE IS NOT NULL
	</select>
	
	<update id="updateflightcloselist"  parameterClass="cargo.cms.export.bo.FlightCloseBO">
		UPDATE FLT_OPR_LEG
			SET
				LEG_STATUS = #closedStatus#,
				LM_USER_ID = #modifiedUser#,
				LM_DATE = sysdate,
				TR_TYPE=#trtype#
			WHERE
				TR_NO = #trNo# AND
				DOC_LINE_NO = #docLineNo#
	</update>
	<update id="updateflightcloselist1"  parameterClass="cargo.cms.export.bo.FlightCloseBO">
		UPDATE FLT_OPR_LEG
			SET TR_TYPE=''
			WHERE
				TR_NO = #trNo# AND
				DOC_LINE_NO = #docLineNo#
	</update>
	
	<update id="updateActualDateForDummyFltexp"  parameterClass="cargo.cms.export.bo.FlightCloseBO">
		UPDATE flt_opr set act_date = sch_date, act_time = sch_time , LM_USER_ID= 'SYSTEM', LM_DATE = SYSDATE , tr_type = 'MTDFL' where TR_NO = #trNo#
		AND EXISTS (SELECT NULL FROM mast_carrier where nvl(dummy_carr,'N') = 'Y' AND code = flt_opr.carr_code) 
	</update>
	
	<insert id="insrrecrdtofltoprlogforcloseexport" parameterClass="cargo.cms.export.bo.FlightCloseBO">
	insert into flt_opr_log (FLT_KEY,SCH_DATE,FLT_TYPE,EVENT,CR_DATE,CR_USER_ID) VALUES (#fltKey#,#fltDate#,'D',UPPER(#action#),SYSDATE,#modifiedUser#)
	</insert>
	
	<select id="validateflightbuildupevent" parameterClass="cargo.cms.export.bo.FlightCloseBO" resultClass="cargo.cms.export.bo.FlightCloseBO">
	 SELECT BUILDUP_CUSER buildUpInd,dls_ind dlsInd,FINAL_MANF_IND manfInd 
	 FROM FLT_OPR_EVENTS 
	 WHERE TR_NO = #trNo#
	</select>
	
	<select id="getAWBDetailsfltCloseFSU" resultClass="cargo.cms.export.bo.FlightCloseDetailsBO" parameterClass="cargo.cms.export.bo.FlightCloseDetailsBO">			
		SELECT 
			 AWB_NO AS awbNo,
			 TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate,
			 SUM(PMAN_PCS) AS assignedPcs
		FROM
			EXP_PMANIFEST_AWB
		WHERE
				 FLT_KEY = #fltKey#
			 AND FLT_DATE = #fltDate#
			 AND UNLDG_PT = #portOfCall#
		GROUP BY AWB_NO, AWB_DATE	
	</select>	
	
	<select id="getListOfFlightForJob" parameterClass="cargo.cms.export.bo.FlightCloseDetailsBO" resultClass="cargo.cms.export.bo.FlightCloseDetailsBO">	
		SELECT Flt.Flt_Key Fltkey,
		  TO_CHAR(Flt.Sch_Date,'DDMONYY') Fltdate
		FROM Flt_Opr Flt
		JOIN Flt_Opr_Events Event
		ON flt.tr_no             = event.tr_no
		WHERE Flt.Tr_No          = Event.Tr_No
		AND flt.flt_key          = event.flt_key
		AND flt.sch_date         = event.sch_date
		AND flt.Flt_Type         = 'D'
		AND Flt.Act_Date        IS NOT NULL
		AND Flt.Act_Time        IS NOT NULL
		AND Event.Flt_Cls_Yn     = 'N'
		AND Event.Dls_Ind        = 'Y'
		AND Event.Final_Manf_Ind = 'Y'
		AND (To_Date(TO_CHAR(Flt.Act_Date,'DDMONYY')
		  || Lpad(Flt.Act_Time,4,'0'),'DDMONYYHH24MI' ) +
		  (SELECT Rule_Value FROM Cmsrules WHERE Rule_Code = 'CONFIG_HRS_FLT_CLOSE'
		  )/24 &lt;= Sysdate)
		AND NOT EXISTS (SELECT NULL
		  FROM EXP_CHKOUT_DTL
		  WHERE Chkout_Date IS NULL
		  AND Flt_Date       = Flt.Sch_Date
		  AND Flt_Key        = Flt.Flt_Key
		  )
	</select>

	<!-- Changed for QR -->
	<!--<select id="getUldCheckStatus" parameterClass="cargo.cms.export.bo.FlightSearchBO"
	resultClass="cargo.cms.export.bo.FlightCloseDetailsBO">
	SELECT dtl.CHKOUT_DATE chkOutDate,
    dtl.CHKOUT_TIME chkOutTime
	from exp_chkout_hd hd left join exp_chkout_dtl dtl
	ON hd.flt_key = dtl.flt_key and hd.flt_date = dtl.flt_date
	and hd.flt_type = 'E'
	where hd.flt_key = #flightKey# and hd.flt_date = #fltDate# and hd.flt_type = 'E'
	</select>
	-->
	<!-- Changed for QR -->
	<select id="getULDList" resultClass="cargo.cms.export.bo.FlightCloseBO"
	parameterClass="cargo.cms.export.bo.FlightCloseBO">
	select ULD_BT_NO uldKey from exp_pmanifest_uld where
	flt_key = #fltKey#	and flt_date = #fltDate# and flt_type = 'E' and UNLDG_PT = #portOfCall#
	</select>
	<!-- Changed for QR -->
	<select id="getSectorCount" resultClass="java.lang.Integer"
	parameterClass="cargo.cms.export.bo.FlightCloseBO">
	select count(1) from exp_chkout_dtl
	where flt_key = #fltKey# and flt_date = #fltDate# 
	and uld_key = #uldKey#   
	and chkout_date is not null
	and chkout_time is not null
	</select>
	<!--Added by Manorama for Close Flight Sector:::Ends -->
	<!--  Added By Srinivas for Iteration 3a Create pre-manifest by ULD START -->
    <!-- Changed for QR -->
   	<select id="premanifestflightsearch"  parameterClass="map"  resultClass="cargo.cms.export.bo.ExportULDBO">
	SELECT  A.FLT_KEY fltKey,A.FLT_NO fltNo,A.CARR_CODE carrCode,TO_CHAR(A.SCH_DATE,'DDMONYY HH24:MI'),
    PKG_COMMON.get_flt_eta(A.FLT_KEY,A.SCH_DATE, 'D','DD') as etd
	FROM   
				FLT_OPR A
	WHERE  
				A.FLT_KEY=#fltNo# AND A.SCH_DATE=TO_DATE(#depDate#,'DDMONYY') AND A.FLT_TYPE = 'D'
	</select>
	<!-- for pre-manifest by uld Header information -->
 	<select id="premanifestuldsearch"  parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.ExportULDBO">
	SELECT 
				 A.RCL_NO rclNo,A.ULD_KEY uldNo,B.CONTR_CODE contrCode,TO_CHAR(B.NET_WT,'999999999.9') netWeight, 
				 TO_CHAR(B.TARE_WT,'999999999.9') balWeight,B.DEST destination,B.GROSS_WT grossWt ,B.TARE_WT tareWt,
				 (select loc_code from uld_inventory where uld_key = #uldNo#) as locCode
	 FROM 
				V_EXP_ULD A,V_EXP_ULD_DTL B 
	 WHERE 
				A.RCL_NO=B.RCL_NO 
	AND   
				A.ULD_KEY = B.ULD_KEY
	AND 
				A.ULD_KEY=#uldNo#
	</select>
	<!-- for pre-manifest by uld Awb List -->
 	<select id="premanifestawbholder"  parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.AWBBO"> 	
	SELECT awbNo,  awbNo1,  awbDate,  dest,  splCode1,  pcs,  wt,  content , tsaPassInd
		FROM
		  (SELECT SUBSTR(t1.awb_no, 1, 3)    ||'-'    ||SUBSTR(t1.awb_no, 4) awbNo,    t1.awb_no AS awbNo1,
		    TO_CHAR(t1.awb_date, 'DDMONYY') awbDate,    t2.dest dest,
		    (SELECT DECODE(t2.spl_code1, NULL, '', t2.spl_code1
		      || DECODE(t2.spl_code2, NULL, '', '/'))
		      || DECODE(t2.spl_code2, NULL, '', t2.spl_code2
		      || DECODE(t2.spl_code3, NULL, '', '/'))
		      || DECODE(t2.spl_code3, NULL, '', t2.spl_code3
		      || DECODE(t2.spl_code4, NULL, '', '/'))
		      || DECODE(t2.spl_code4, NULL, '', t2.spl_code4
		      || DECODE(t2.spl_code5, NULL, '', '/'))
		      || DECODE(t2.spl_code5, NULL, '', t2.spl_code5
		      || DECODE(t2.spl_code6, NULL, '', '/'))
		      || DECODE(t2.spl_code6, NULL, '', t2.spl_code6
		      || DECODE(t2.spl_code7, NULL, '', '/'))
		      || DECODE(t2.spl_code7, NULL, '', t2.spl_code7
		      || DECODE(t2.spl_code8, NULL, '', '/'))
		      || DECODE(t2.spl_code8, NULL, '', t2.spl_code8
		      || DECODE(t2.spl_code9, NULL, '', '/'))
		      || DECODE(t2.spl_code9, NULL, '', t2.spl_code9)
		    FROM awb
		    WHERE awb_no = t2.awb_no    AND awb_date = t2.awb_date  ) splCode1,
		    t1.pcs pcs,
		    REPLACE(TO_CHAR(t1.wt, '9999999999990.9'), ' ', '') wt,
		    t2.content content,
		    t2.TSA_PASS_IND tsaPassInd,
		    dense_rank() over (partition BY t1.uld_key order by t3.rcl_date DESC) rank
		  FROM exp_uld_awb t1,
		    awb t2,
		    exp_rcl_hd t3
		  WHERE t1.awb_no = t2.awb_no AND t1.awb_date = t2.awb_date
		  AND t3.rcl_no = t1.rcl_no AND t1.uld_key  = #uldNo#  AND t1.manifest_yn = 'N')
		WHERE rank = 1
		ORDER BY 1,4	
	</select>
	
	<!-- This query is used to validate the Unlading Point -->
	<select id="checkulddetailsexist" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="java.lang.Integer" >
		SELECT 
					COUNT(1)
		FROM   
					FLT_OPR T1, FLT_OPR_LEG T2
		WHERE 
					T1.TR_NO = T2.TR_NO
		AND    T1.FLT_KEY = #fltKey#
		AND    T1.SCH_DATE = TO_DATE(#fltDepDate#,'DDMONYY')
		AND    T1.FLT_TYPE = 'D'
		AND    T2.OFF_POINT = #unLdgPt#
		
	</select>

	<select id="premanifestvalidentry" parameterClass="map" resultClass="java.lang.String" >
		SELECT 
					PKG_PMAN.VAL_PREMAN(#fltNo#,#depDate#,#awbList#,#uldNo#) 
		FROM
					DUAL	
	</select>
	
	<select id="chkSecurityChk" parameterClass="map" resultClass="java.lang.String" >
		 SELECT pkg_exp_rpt.fun_get_sc(#AWB_NO#, #AWB_DATE#,'SC') from dual 	
	</select>    
    <!-- Changed for QR -->
	 <!--<select id="checkHoldingPeriodExist" parameterClass="map" resultClass="java.lang.String" >
		  SELECT count(1) FROM dual WHERE SYSDATE >	
			(select crDate from 
			(SELECT CR_DATE + (select MIN_HOLD_HR FROM mast_carrier where code = #CARRIER# and EXISTS 	
			(select ECT_HANDLR from mast_spl_hand_code where code = #SHC#  AND ECT_HANDLR IS NOT NULL))/24 AS crDate, 
			 dense_rank() over (partition by awb_no order by CR_DATE desc) rank
			 FROM EXP_PRE_RCL_HD WHERE awb_no = #AWBNO# AND AWB_DATE=#AWBDATE#) where rank = 1)
 	</select>
 	 
 	 --><select id="getCarrHoldPeriod" parameterClass="map" resultClass="java.lang.String" >
		 select lpad(MIN_HOLD_HR,4,'0') FROM mast_carrier where code = #CARRIER#
 	 </select>
 	 <!-- Changed for QR -->
 	 <!--<select id="getShipmentHoldPeriodDate" parameterClass="map" resultClass="java.lang.String" >
		select to_char(CR_DATE,'DDMONYY HH24MI') from EXP_SEC_CHK_JO_DTL where jo_no = (select jo_no from EXP_SEC_CHK_JO where 
		awb_no = #AWB_NO# and	awb_date = to_date(#AWB_DATE#,'DDMONYY') and rownum=1) AND sec_chk = 'Holding'
 	 </select>
 	 
	--><insert id="premanifestuldinsert" parameterClass="cargo.cms.export.bo.ExportULDBO" >
		<![CDATA[
		INSERT INTO EXP_PMANIFEST_ULD
					(FLT_KEY,FLT_DATE,FLT_TYPE,ULD_BT_NO,PPK_TYPE,BLDUP_INSTR,MAN_RMK,CONTR_CODE,
					UNLDG_PT,GROUP_NO,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,RCL_NO,GROSS_WT,TARE_WT,ENDORSED_BY,ENDORSED_DATE,TRANSIT_FLG,HDLG_MODE)
		VALUES(#fltKey#,TO_DATE(#fltDepDate#,'DDMONYY'),'E',#uldNo#,#ppkType#,#bldupInst#,#manRmk#,
					#contrCode#,#unLdgPt#,#grpNo#,#crUserId#,SYSDATE,#lastModUserId#,SYSDATE,#rclNo#,#grossWt#,#tareWt#,#endosedBy#,decode(#endosedBy#,'','',sysdate),
					(SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#uldNo#),
					(SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#uldNo#))
		]]>
	</insert>
	<insert id="premanifestuldinsertFirst" parameterClass="cargo.cms.export.bo.ExportULDBO" >
		<![CDATA[
		INSERT INTO EXP_PMANIFEST_ULD_FIRST (SEQ_NO,FLT_KEY,FLT_DATE,UNLDG_PT,ULD_BT_NO,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) VALUES 
  		(EXP_PMANIFEST_ULD_FIRST_SEQ.NEXTVAL,#fltKey#,#fltDepDate#,#unLdgPt#,#uldNo#,'SYSTEM',SYSDATE,'SYSTEM',SYSDATE)
		]]>
	</insert>
	
	<!--To Check Premanifest ULD exist or not-->	
	<!-- Changed for QR -->
	<!--<select id="checkPreMfstULD" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="java.lang.Integer" >
		SELECT COUNT(ULD_BT_NO) 
		FROM EXP_PMANIFEST_ULD 
		WHERE 
			 FLT_KEY = #fltKey#
		 AND FLT_DATE = TO_DATE(#fltDepDate#, 'DDMONYY')
		 AND ULD_BT_NO = #uldNo#
	</select>
	
	--><select id="getUldOwnerId" parameterClass="java.lang.String" resultClass="java.lang.String" >
		SELECT owner_id FROM uld_inventory where uld_key = #uldNo#
	</select>
	<!-- Changed for QR -->
	<select id="checkUldProhibited" parameterClass="map" resultClass="java.lang.String" >
		select 'X'
	   		 	from   uld_type_proh_acft
	   		 	where  uld_type = SUBSTR(#uldNo#,0,3) 
	   			and    contr_code = #contrCode#
	   			and    (CARR_CODE is null or CARR_CODE = #carrCode#)
	   			and    acft_type = (select acft_type
	                       from   flt_opr_leg
	                       where  flt_key = #fltKey#
	                       and    sch_date = to_date(#fltDepDate#,'DDMONYY')
	                       and    flt_type = 'D' and OFF_POINT=#unLdgPt#)
	</select>
	
	<select id="checkDLSCompForFlt" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="java.lang.String" >
		select count(1) from   flt_opr_events where  flt_key = #fltNo#
            and    sch_date = TO_DATE(#depDate#,'DDMONYY')
            and    flt_type = 'D'
            and    dls_final_date is not null
	</select>	

	<insert id="premanifestcntfltinsert" parameterClass="cargo.cms.export.bo.ConntFlightBO" >
		<![CDATA[
	INSERT INTO
					EXP_PMANIFEST_ULD_CONN_FLT (
					   FLT_KEY, FLT_NO, CARR_CODE, 
					   FLT_DATE, ULD_BT_NO, CONN_FLT_SNO, 
					   CONN_FLT_KEY, CONN_FLT_NO, CONN_FLT_CARR, 
					   CONN_FLT_DATE, UNLDG_PT, SECTOR, 
					   CR_USER_ID, CR_DATE, LM_USER_ID, 
					   LM_DATE) 
	VALUES 
					( #fltNo#,#fltsfx# ,#fltpfx# ,#fltDate#
					,#uldNo# ,#cnetg_Flt_SNO# ,#cnetg_Flt_Key#
					,#cnetg_Flt_No# ,#cnetg_Flt_CarrCode# ,
					#cnetg_Flt_Date# ,#ppk_UnldgPT# ,#cnetg_Flt_Sector#,#crUserId#,SYSDATE,#lastModUserId#,SYSDATE)
	]]>
	</insert>    
	
	<!--  Holding Period Validation(Starts) -->
	
	<select id="getFlightHoldingHrs" parameterClass="map" resultClass="java.lang.String" >
		select lpad(holding_time,4, '0') from flt_opr_events where FLT_KEY = #FLT_KEY# and sch_date = #FLT_DATE# and flt_type = 'D'
	</select>
	
	<select id="getPPkTypeForULD" parameterClass="map" resultClass="java.lang.String" >
		select 'Y' from uld_inventory where uld_key = #ULD_KEY# and (ppk_ind = 'Y' or mix_ppk_ind = 'Y' )
	</select>
	
	<select id="getRclTimePlusHoldHr" parameterClass="map" resultClass="java.lang.String" >
		select to_char(max(rcl_date),'DDMONYY HH24MI') from exp_uld_awb WHERE  ULD_KEY  = #ULD_KEY#
	</select>
	
	<select id="getRebuildStatus" parameterClass="map" resultClass="java.lang.String" >
		select rebuild_yn from uld_inventory where uld_key = #ULD_KEY# and ppk_ind = 'Y'
	</select>
	
	<select id="getShipmentHldgHrFromCar" parameterClass="map" resultClass="java.lang.String" >
		SELECT lpad(HLDG_PERIOD,4, '0')  from exp_car where awb_no = #AWB_NO# and	
		awb_date = to_date(#AWB_DATE#,'DDMONYY') and NVL(HLDG_PERIOD,'0') > 0
	</select>
	
	<select id="getTowIndForUld" parameterClass="java.lang.String" resultClass="java.lang.String" >
		SELECT 'Y' from uld_inventory where uld_key = #uldNo# and handling_mode = 'DT'
	</select>
	
	<select id="getTransitTypeForUld" parameterClass="java.lang.String" resultClass="java.lang.String" >
		SELECT 'Y' from uld_inventory where uld_key = #uldNo# and transit_type  in ('TT','IF','TA')
	</select>
	<select id="getTransitTypeForCpmUld" parameterClass="java.lang.String" resultClass="java.lang.String" >
		SELECT 'Y' from uld_inventory where uld_key = #uldNo# and transit_type  in ('TT','IF')
	</select>
	
	<select id="getErlAccpTime" parameterClass="map" resultClass="java.lang.String" >
		select  decode((select to_char(max(cr_date),'DDMONYY HH24MI') from exp_pre_rcl_hd  where uld_key =#ULD_KEY#),null,
		(select to_char(max(cr_date),'DDMONYY HH24MI') from exp_pre_rcl_dtl  where uld_key = #ULD_KEY#),
		(select to_char(max(cr_date),'DDMONYY HH24MI') from exp_pre_rcl_hd  where uld_key = #ULD_KEY#)) as accAcceptenceTime from dual
	</select>
	
	<select id="getWareHouseStartTime" parameterClass="map" resultClass="java.lang.String" >
		select to_char(max(cr_date),'DDMONYY HH24MI') from EXP_PMANIFEST_ULD_AWB where uld_bt_no = #ULD_KEY# and flt_key = #FLT_KEY# 
		and flt_date = #FLT_DATE#
	</select>
	
	<select id="getShipHoldingPeriod" parameterClass="map" resultClass="java.lang.String" >
		select lpad(to_char(CR_DATE,'HH24MI'),4, '0')  from EXP_SEC_CHK_JO_DTL where jo_no = (select jo_no from EXP_SEC_CHK_JO where 
		 awb_no = #AWB_NO# and	awb_date = to_date(#AWB_DATE#,'DDMONYY') and rownum=1) AND sec_chk = 'Holding'
 	 </select>
 	 
 	 <select id="getFltEstTime" parameterClass="map" resultClass="java.lang.String" >
		 select PKG_COMMON.GET_FLT_ETA(FLT_KEY,SCH_DATE,'D','DD') as etd from flt_opr where flt_key = #FLT_KEY# 
		 and sch_date = to_date(#FLT_DATE#,'DDMONYY') and flt_type = 'D'	 
 	 </select>
	 <select id="shipmentHoldDateAndTime" parameterClass="map" resultClass="java.lang.String" >
		select TO_CHAR((TO_DATE((select TO_CHAR((TO_DATE(#RCL_DATE#,'DDMONYY HH24MI')+#HR#/24),'DDMONYY HH24MI') from  DUAL),'DDMONYY HH24MI')+#MIN#/1440),'DDMONYY HH24MI') from  DUAL
	 </select>
	<!--  Holding Period Validation(Ends) -->	
    
    <!--  Added By Srinivas for Iteration 3a Create pre-manifest by ULD START -->
    
	<!--
		##################### Create Return Cargo : Start
		###############################################
	-->

	<!-- On Search of AWB NO -->
	<select id="exportcreatecargoreturnsearch" parameterClass="cargo.cms.export.bo.DocumentSearchBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		SELECT CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4))
		awbNo1,TO_CHAR(AWB_DATE,'DDMONYY') awbDate,
		AWB_NO awbNo ,RCL_PCS - PMAN_PCS AS nonPmfstPc, RCL_WT - PMAN_WT AS
		nonPmfstWt,'Local Export' locExpt,
		pkg_exp_val.get_exp_awb_cc_code(AWB_NO) latestCC,
		CONTENT cont, PPK_TYPE pkgType FROM AWB
		WHERE
		AWB_NO = #awb#
		AND AWB_DATE = pkg_common.get_awb_date(#awb#,'E') 
		AND	AWB_CLOSED_YN='N'
		AND AWB_TYPE='E'
	</select>

	<select id="sqlgetppkTypeLst" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="java.lang.String">
		SELECT STRAGG(STRINGDELIM(ppk_type, ',')) AS ppkType
		from (SELECT distinct ppk_type from exp_rcl_hd WHERE AWB_NO = #awbNo# and
		AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') AND STATUS = 'S')
	</select>

	<select id="chkAwbManifested" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="java.lang.String">
		select count(1) from EXP_PMANIFEST_AWB WHERE AWB_NO = #awbNo# and AWB_DATE =
		TO_DATE(#awbDate#,'DDMONYY')
	</select>

	<select id="chkUldPpkType" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="java.lang.String">
		select count(1) from uld_inventory where uld_key = #uldKey# and MIX_PPK_IND
		= 'N'and PPK_IND = 'N'
	</select>

	<select id="chkFlightAssigned" parameterClass="cargo.cms.export.bo.CargoStorageBO" resultClass="java.lang.String">		
		select count(1) from uld_inventory where ULD_KEY =  #uldKey# and flt_key is not null and flt_date is not null
	</select>

	<select id="chkShipmentConstrained" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="java.lang.String">
		select DECODE(CONSTRAINT,'Y','TRUE','FALSE') from MAST_CONSTRAINT_CODE where
		CODE = #latestCC#
	</select>

	<select id="exportcreatecargoreturnrcllist" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		SELECT
		RCL_NO rclNo,
		VCL_NO vclNo,
		T1.AWB_NO awbNo,
		TO_CHAR(T1.AWB_DATE,'DDMONYY') awbDate,
		T1.PPK_TYPE pkgType,
		TO_CHAR(RCL_DATE,'DDMONYY HH24:MI')rclIssueDt,
		DECODE(T1.PPK_TYPE,'B',(T1.RCL_PCS - T1.RTN_PCS),'')rclPc,
		DECODE(T1.PPK_TYPE,'B',(T1.RCL_WT - T1.RTN_WT),'') rclWt,
		'' retPc ,
		'' retWt ,
		T1.RCL_PCS-T1.RTN_PCS balancePc,
		T1.RCL_WT-T1.RTN_WT balanceWt,
		T1.ULD_KEY uldKey,
		rownum recordNo
		FROM
		EXP_RCL_HD T1,AWB T2
		WHERE
		T1.AWB_NO = T2.AWB_NO
		AND T1.AWB_DATE = T2.AWB_DATE
		AND t2.awb_type='E'
		AND T1.PPK_TYPE = 'B'
		AND T1.AWB_NO = #awbNo#
		AND T1.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		AND STATUS = 'S'
		AND T1.RCL_PCS > 0 AND (T1.RCL_WT-T1.RTN_WT)>0
	</select>
	<!-- THIS IS NOT USED NOW If ppk type is P -->
	<select id="exportCrtCrgRtnlist" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		SELECT
		CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) awbNo1,
		AWB_NO awbNo, AWB_DATE awbDate, T1.LOC_CODE locCode, LOCN_PCS strgPc,LOCN_WT
		strgWt, T1.ULD_KEY uldKey, T1.LSP_NO lspNo,
		DECODE(PPK_IND,'P',LOCN_PCS,'')retPc,DECODE(PPK_IND,'P',LOCN_WT,'0')retWt,PPK_IND
		pkgType,
		STRG_DATE strgDate
		FROM
		AWB_INVENTORY T1, EXP_RCL_DTL T3
		WHERE
		T1.AWB_NO = #awbNo#
		AND T1.AWB_DATE = TO_DATE(pkg_common.get_awb_date(#awbNo#,'E'),'DDMONYY')  
		AND T1.ULD_KEY = T3.ULD_KEY
		AND T1.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		AND T1.PPK_IND='P'
		and T1.LOCN_PCS>0
		AND T1.ULD_KEY NOT IN(SELECT ULD_BT_NO FROM EXP_PMANIFEST_ULD_AWB T2
		WHERE T1.AWB_NO = T2.AWB_NO AND T1.AWB_DATE=T2.AWB_DATE)

	</select>
	<!-- If ppk type is not  P -->
	<select id="exportcreatecargoreturnstorafelist" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		SELECT
		inv.SEQ_NO seqNo,
		inv.CARR_CODE carrCode,
		CONCAT(CONCAT(SUBSTR(inv.AWB_NO,0,3),'-'),SUBSTR(inv.AWB_NO,4)) awbNo1,
		inv.AWB_NO awbNo, inv.AWB_DATE awbDate,
		inv.LOC_CODE locCode,
		inv.LOCN_PCS strgPc,
		inv.LOCN_WT strgWt,
		inv.ULD_KEY uldKey,
		inv.LSP_NO lspNo,
		'' retPc,
		'' retWt,
		inv.PPK_IND pkgType,
		inv.STRG_DATE strgDate,
		rownum recordNo
		FROM
		AWB_INVENTORY inv LEFT JOIN ULD_INVENTORY ULD ON NVL(inv.uld_key,'*') = NVL(ULD.ULD_KEY,'*')
		WHERE
		inv.AWB_NO = #awbNo#
		AND NVL(uld.PPK_IND,'N') = 'N' and NVL(uld.MIX_PPK_IND,'N') = 'N' and NVL(uld.HANDLING_MODE,'*') not in ('PPK','NBK')
		AND inv.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		AND inv.flt_key is null
		AND (inv.RTN_NO IS NULL OR inv.RTN_NO not in (select rtn_no from exp_rtn_hd where NVL(DEL_YN,'N') = 'N'))
		AND inv.LOCN_PCS>0
	</select>

	<!-- End of Search with AWB NO -->


	<select id="fetchAgentForReturnCargo" parameterClass="map"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		SELECT SHPR_NAME as
		shprName,AGENT_NAME AS agtName FROM EXP_CAR WHERE AWB_NO=#awbNo# and
		awb_date = to_date(#awbDate# , 'DDMONYY')
	</select>

	<select id="getCsgnePlaceCount" parameterClass="map" resultClass="java.lang.String">
		SELECT decode(csgne_place,#UNLADING#,'Y','N')  FROM EXP_CAR WHERE awb_no = #AWB_NO# and awb_date = #AWB_DATE#
	</select>
	
	<select id="checkWaiveRtnCargo" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		<![CDATA[
			select count(1) from BILL_CHARGE_DTL where srf_no = #srfNo# and status = 'PAID'
		]]>
	</select>

	<select id="getAgentNameWithIATAList" parameterClass="java.lang.String"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		<![CDATA[
			SELECT CODE_DESC||'-*'||CO_IATA_CODE as agtName  FROM CUST_COMPANY WHERE CO_IATA_CODE IS NOT NULL ORDER BY CODE_DESC
		]]>
	</select>

	<select id="sqlCountAgentNameWithIATA" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(1)			
		FROM 
			CUST_COMPANY
		WHERE
				CODE_DESC = #agtName#
			AND CO_IATA_CODE = #iataCode#
		]]>
	</select>

	<select id="fetchULDDetailsForReturnCargo" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		SELECT
		LOC_CODE AS locCode,
		ULD_KEY AS uldKey
		FROM
		ULD_INVENTORY
		WHERE
		ULD_KEY = #uldKey#
		AND CFM_STATUS != 'RETURNED'
				
	</select>
	<!-- Changed for QR -->
	<select id="fetchRclDtlWtForCrCargo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		select NVL(NET_WT,0) netWt
		from EXP_RCL_DTL where rcl_no = (select max(d.rcl_no) 
		from EXP_RCL_DTL d join exp_rcl_hd h on d.rcl_no = h.rcl_no
		where h.status = 'S' and d.uld_key = #PARAM#)
	</select>

	<select id="fetchPreRclWtForCrCargo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		select ttlWt
		from (select NVL(TTL_WT,0) ttlWt
		from EXP_PRE_RCL_HD
		where uld_key = #PARAM#
		order by cr_date desc)
		where rownum = 1
	</select>
	<!-- Changed for QR -->
	<select id="fetchRclWtForCrCargo" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		select NVL(RCL_WT,0) netWt
		from exp_rcl_hd where rcl_no = (select max(rcl_no)
		from exp_rcl_hd where status = 'S' and uld_key = #PARAM#)
	</select>

	<select id="createcargoreturnrcl_balancePcWt" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		SELECT RCL_NO rclNo ,
		RCL_PCS - RTN_PCS balancePc,
		RCL_WT - RTN_WT balanceWt
		FROM EXP_RCL_HD
		WHERE RCL_NO = #rclNo# AND
		RCL_PCS > 0 AND (RCL_WT - RTN_WT)>0
		and STATUS = 'S' 
	</select>

	<select id="createcargoreturnrcl_checkCount" parameterClass="map"
		resultClass="java.lang.Integer">
		select COUNT(1) from EXP_RTN_HD t1
		inner join EXP_RTN_DTL t2 on t1.rtn_no = t2.rtn_no
		inner join EXP_RTN_RCL t3 on t1.rtn_no = t3.rtn_no
		where t2.uld_key = #uldKey# and t3.rcl_no = #rclNo# AND NVL(DEL_YN,'N') = 'N'
	</select>

	<!-- queries for Enquire Print Return Cargo :: start-->
	<select id="exportcreatecargoenquirelist" parameterClass="cargo.cms.export.bo.DocumentSearchBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		select t1.srf_no srfNo, t1.awb_no awbNo,
		CONCAT(CONCAT(SUBSTR(t1.awb_no,0,3),'-'),SUBSTR(t1.awb_no,4)) awbNo1,
		t1.rcl_no rclNo, t2.ppk_type pkgType, t2.awb_content cont,
		t3.rcl_pcs rclPc, t3.rcl_wt rclWt, t1.wt retWt, t1.pcs retPc,
		to_char(t1.cr_date,'DDMONYY HH24:MI') crDate,
		to_char(t2.rcl_date,'DDMONYY HH24:MI') rclIssueDt, t3.cc_code
		latestCC, t1.AGENT_NAME agtCode, t4.co_iata_code iataCode,
		t1.SHIPPER_NAME shprName, t1.receiver_name recName, t1.receiver_id
		recCode,
		t1.truck_no truckNo, t1.rmk rmk, t1.uld_key uldKey ,
		t1.del_YN deleteYN , WAVR_CHARGE_YN waiveChrg , WAVR_CHARGE_YN waiveChrgHidden
		from exp_rtn_hd t1, exp_rcl_hd t2, awb t3, cust_company t4 where
		t1.rcl_no = t2.rcl_no and t2.awb_no = t3.awb_no (+) and
		t2.awb_date = t3.awb_date(+) and t1.agent_id = t4.code (+) and t1.shipper_id =
		t4.code (+) and t1.srf_no = #srfNo#				
	</select>

	<select id="exportcreatecargoenquiresearch" parameterClass="cargo.cms.export.bo.DocumentSearchBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		select CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) awbNo, awb_no
		awbNo1, loc_code locCode, uld_key uldKey, lsp_no lspNo, pcs retPc, wt
		retWt
		from exp_rtn_dtl
		where srf_no = #srfNo#		
	</select>
	
	<select id="Exp_SrfCarrCode" parameterClass="cargo.cms.imprt.bo.IssueConsSrfInfoBO" resultClass="java.lang.String">
		SELECT CARR_CODE 
		FROM AWB 
		WHERE AWB_NO = #awbNo# AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	</select>	
	
	<insert id="Exp_IssueSrf_Shipment_Data" parameterClass="cargo.cms.imprt.bo.ShpPndDelivBO" >
		INSERT INTO IMP_SRF_FLT ( 
		SRF_NO,
		AWB_NO,
		AWB_DATE,
		CARR_CODE,
		FLT_NO,
		FLT_KEY,
		FLT_TYPE,
		FLT_DATE,
		INV_PCS,
		INV_WT,
		MANIFEST_PCS,
		MANIFEST_WT,
		CIR_TYPE,
		CIR_PCS,
		CIR_WT,
		CC_CODE,
		CTM_REF_NO,
		DC_IND,
		STRG_CHRG,
		RMK,
		CR_USER_ID,
		CR_DATE,
		LM_USER_ID,
		LM_DATE,
		ORIG_FLT_KEY, 
		ORIG_FLT_DATE,
		DLV_PCS,
		DLV_WT,
		SOURCE)
		VALUES 
		(#srfNo#,	
		#awbNo#,
		TO_Date(#awbDate#, 'DDMONYY'),  
		#carrCode#,
		#flightNo#,
		#flightNoKey#,
		'E',
		#flightDate#,
		#invPc#,
		#invWt#,
		#manfPc#,
		#manfWt#,
		#cirType#,
		#cirPc#,
		#cirWt#,
		#strCC#,
		#ctmRefNo#,
		NVL(#strDC#,'N'),
		#strChrg#,
		#remarks#,
		#crUserId#,
		SYSDATE,
		#crUserId#,
		SYSDATE,
		NVL(#flightKeyProc#,#flightNoKey#),
		NVL(TO_Date(#flightDateProc#, 'DDMONYY'),TO_Date(#flightDate#, 'DDMONYY')),
		#dlvPcs#,
		#dlvWt#,
		#source#)
	</insert>
	
	<insert id="Exp_IssueSrf_insertConsigneeData" parameterClass="cargo.cms.imprt.bo.IssueConsSrfInfoBO" >
		INSERT INTO IMP_SRF ( 
		AWB_NO,
		AWB_DATE,
		SRF_NO,
		DOC_LINE_NO,
		SRF_DATE,		
		SRF_PRT_CODE,
		INV_PRT_CODE,
		TRUCK_CO,
		TRUCK_NO,
		TD_NO,
		COLL_NAME,
		COLL_HKID,
		REPEAT_YN,
		SRF_MODE,
		CARR_CODE,
		SRF_PCS,
		SRF_WT,
		ISSUE_USER,
		TR_STATUS,
		CR_USER_ID,
		CR_DATE,
		LM_USER_ID,
		LM_DATE , 
		SRF_EXPY_DATE,
		AUTH_REP_NAME,
		AUTH_REP_ID,
		CHARGE_STATUS,
		COLL_CENTER,
		AGENT_ID,
		STATUS)
		VALUES 
		( #awbNo#,
		TO_Date(#awbDate#, 'DDMONYY'),  
		#srfNo#,
		#docLineNo#,		
		sysdate,
		#srfPtr#,
		#invcPtr#,
		#truckerCoCode#,
		#truckNo#,
		#truckDockNo#,
		#collectedByCode#,
		#hkId#,
		#repeatYN#,
		'CRD',
		#carrCode#,
		#srfPc#,
		#srfWt#,
		#crUserId#,
		'N',
		#crUserId#,
		SYSDATE,
		#crUserId#,
		SYSDATE,
		(SYSDATE + (#extendHrs#/24)),
		#authPerson#,
		#authPersonId#,
		#chargeStatus#,
		#collCenter#,
		#apptdAgtCode#,
		#status#)
	</insert>
	<!-- queries for Enquire Print Return Cargo :: End-->

	<!-- Changed for QR -->
	<!--<select id="exportcreatecargoreturnrclsearch" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		SELECT
		CONCAT(CONCAT(SUBSTR(T1.AWB_NO,0,3),'-'),SUBSTR(T1.AWB_NO,4)) awbNo1,
		T1.AWB_NO awbNo,to_char(T1.AWB_DATE,'DDMONYY') awbDate,T1.RCL_NO rclNo,
		T1.PPK_TYPE pkgType,
		TO_CHAR(T1.RCL_DATE,'DDMONYY HH24:MI') rclIssueDt,
		T1.RCL_PCS-T1.RTN_PCS rclPc ,
		T1.RCL_WT-T1.RTN_WT rclWt,
		DECODE(T1.PPK_TYPE,'P',T1.RCL_WT-T1.RTN_WT,'') retWt,
		DECODE(T1.PPK_TYPE,'P',T1.RCL_PCS-T1.RTN_PCS,'')retPc,
		T1.AWB_CONTENT cont, T2.CC_CODE latestCC,
		PKG_BILLING.GET_STORAGE_AMT(T1.RCL_NO, T2.AWB_NO, T1.RTN_PCS, T1.RTN_WT) strgChrg
		FROM
		EXP_RCL_HD T1, AWB T2
		WHERE
		T1.AWB_NO = T2.AWB_NO
		and t2.awb_type='E'
		AND
		T1.AWB_DATE = T2.AWB_DATE		
	</select>



	--><select id="sqlCountForCrtCrgUldListByAWB" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM AWB_INVENTORY T1, EXP_RCL_DTL T3
		WHERE
		T1.AWB_NO = #awbNo#
		AND T3.RCL_NO = #rclNo#
		AND T1.ULD_KEY = T3.ULD_KEY
		AND
		TRUNC(T1.AWB_DATE) = TO_DATE(#awbDate#,'DDMONYY')
		AND T1.PPK_IND='P'
		AND T1.LOCN_PCS>0
		AND T1.ULD_KEY NOT IN(SELECT ULD_BT_NO FROM
		EXP_PMANIFEST_ULD_AWB T2 WHERE T1.AWB_NO = T2.AWB_NO AND
		T1.AWB_DATE=T2.AWB_DATE)
	
	</select>
	<!--<select id="exportcreatecargoreturnothersdetails"
		parameterClass="cargo.cms.export.bo.CargoStorageBO" resultClass="cargo.cms.export.bo.CargoStorageBO">
		SELECT
		T1.AWB_NO awbNo, T4.CODE agtCode,T4.CODE_DESC agtName,
		T4.CO_IATA_CODE iataCode,
		T5.CODE shprCode,T5.CODE_DESC shprName,
		T1.RECEIVER_NAME recName, T1.RECEIVER_ID recCode, T1.TRUCK_NO truckNo, T1.RMK rem
		FROM
		EXP_RTN_HD T1, AWB T3, CUST_COMPANY T4, CUST_COMPANY T5
		WHERE
		T1.AWB_NO = T3.AWB_NO
		AND
		T1.AWB_DATE = T3.AWB_DATE
		AND
		T1.AGENT_ID = T4.CODE (+)
		AND
		T1.SHIPPER_ID = T5.CODE (+)
		AND
		T1.AWB_NO = #awbNo#
		AND
		TRUNC(T1.AWB_DATE) = TO_DATE(#awbDate#,'DDMONYY')
				
	</select>
	--><select id="exportreturncargoAWBHearder" parameterClass="java.lang.String"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		<!--
			SELECT T2.ULD_KEY uldKey, T2.RCL_NO rclNo, T2.PPK_TYPE
			pkgType,PKG_BILLING.GET_STORAGE_AMT(T2.RCL_NO, NULL, T2.RTN_PCS,
			T2.RTN_WT) strgChrg, TO_CHAR(T1.RCL_DATE, 'DDMONYY HH24:MI')
			rclIssueDt,T2.PCS rclPc,T2.NET_WT rclWt,T2.PCS retPc,T2.NET_WT
			retWt,CONTENT cont,WH_DEST whDestLocn,''latestCC FROM EXP_RCL_HD
			T1,EXP_RCL_DTL T2 WHERE T2.ULD_KEY = #uldKey# AND T1.RCL_NO=T2.RCL_NO
			AND T2.PPK_TYPE IN ('P', 'M') AND ROWNUM=1 ORDER BY T2.RCL_NO DESC
		-->
		select uldKey, rclNo, pkgType, strgChrg, rclIssueDt, rclPc, rclWt,
		retPc, retWt, cont, latestCC,nonPmfstPc,nonPmfstWt
		from (SELECT
		T2.ULD_KEY uldKey, T2.RCL_NO rclNo, T2.PPK_TYPE pkgType, '' strgChrg,
		TO_CHAR(T1.RCL_DATE, 'DDMONYY HH24:MI') rclIssueDt, T2.PCS rclPc,
		nvl(T2.NET_WT,0) rclWt, T2.PCS retPc, nvl(T2.NET_WT,0) retWt, AWB_CONTENT cont,'' latestCC,
		(select sum(pcs) - sum (pre_man_pcs) from EXP_RCL_DTL where uld_key =
		#uldKey# AND RCL_NO =T2.RCL_NO ) as nonPmfstPc,
		(select sum(net_wt) - sum (pre_man_wt) from EXP_RCL_DTL where uld_key =
		#uldKey# AND RCL_NO =T2.RCL_NO )as nonPmfstWt
		FROM EXP_RCL_HD T1, EXP_RCL_DTL T2
		WHERE T1.RCL_NO = T2.RCL_NO
		and T2.ULD_KEY = #uldKey#
		AND T1.PPK_TYPE IN ('P', 'M') AND T1.STATUS = 'S'
		order by t1.rcl_date desc)
		where rownum = 1
	</select>
 <select id="exportreturncargoRCLList" parameterClass="java.lang.String"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		select * from (select t1.rcl_no rclNo, t1.status as rclStatus
		FROM EXP_RCL_HD T1, EXP_RCL_DTL T2
		WHERE T1.RCL_NO = T2.RCL_NO
		and T2.ULD_KEY = #uldKey#
		AND T1.PPK_TYPE IN ('P', 'M')
		order by t1.rcl_date desc)
		where rownum = 1
	</select>
	<select id="exportreturncargoAWBDetails" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		SELECT
		CONCAT(CONCAT(SUBSTR(inv.AWB_NO,0,3),'-'),SUBSTR(inv.AWB_NO,4)) awbNo1,
		inv.AWB_NO awbNo, TO_CHAR(inv.AWB_DATE,'DDMONYY') awbDate,
		inv.LOC_CODE locCode, inv.LOCN_PCS strgPc,inv.LOCN_WT strgWt, inv.ULD_KEY uldKey, inv.LSP_NO
		lspNo,
		inv.LOCN_PCS retPc,inv.LOCN_WT retWt,inv.PPK_IND pkgType,
		inv.STRG_DATE strgDate,
		'' as strgChrg
		FROM
		AWB_INVENTORY inv
		JOIN AWB awb ON awb.AWB_NO = inv.AWB_NO 
		AND awb.awb_date = inv.awb_date		  	
		WHERE
		inv.ULD_KEY=#uldKey#			
		and inv.flt_key is null
		and inv.LOCN_PCS>0
	</select>
	
	<select id="exportCargoLatestCC" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		select pkg_exp_val.get_exp_awb_cc_code(#awbNo#) latestCC from dual
	</select>		
	
	<select id="expRtncargoStrChargeForMixPP" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="java.lang.String">
		SELECT
		pkg_exp_billing.get_rental_amt(#rclNo#,'','',#uldKey#,#retWt#) FROM
		DUAL 	
	</select>

	<select id="sqlgetreturnnumber" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		select lpad(EXP_RTN_HD_SEQ.nextval,7,'0') from dual
	</select>

	<insert id="sqlcreatereturncargoheaderinsert" parameterClass="cargo.cms.export.bo.CargoStorageBO">
		INSERT INTO EXP_RTN_HD
		(RTN_NO,AWB_NO,AWB_DATE,CR_USER_ID,CR_DATE, LM_USER_ID,
		LM_DATE,STRG_AMT,ULD_KEY,TR_TYPE)
		VALUES
		(#returnNum#,#awbNo#,#awbDate#,#crUserId#,SYSDATE,#lastModUserId#,SYSDATE,nvl(#totStrgChrg#,0),#uldKey#,#trtype#)
	</insert>

	<insert id="sqlcreatereturncargodetailinsert" parameterClass="cargo.cms.export.bo.CargoStorageBO">
		INSERT INTO EXP_RTN_DTL (RTN_NO, DOC_LINE_NO,AWB_NO,AWB_DATE,ULD_KEY,
		LSP_NO,LOC_CODE, PCS,WT, CR_USER_ID, CR_DATE,LM_USER_ID, LM_DATE)
		VALUES ( #returnNum# ,#docLineNo# ,#awbNo#,#awbDate#,#uldKey#
		,#lspNo#,#locCode# ,#retPc#
		,#retWt#,#crUserId#,SYSDATE,#lastModUserId#,SYSDATE)
    </insert>

	<insert id="insertRtnRclDtls" parameterClass="cargo.cms.export.bo.CargoStorageBO">
		INSERT INTO EXP_RTN_RCL (RTN_NO ,RCL_NO ,RCL_RTN_PC ,RCL_RTN_WT ,
		CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE)
		VALUES
		(#returnNum#,#rclNo#,#retPc#,#retWt#,#crUserId#,SYSDATE,#lastModUserId#,SYSDATE)
	</insert>

	<update id="updateWaiveAndRemCargo" parameterClass="cargo.cms.export.bo.CargoStorageBO">
		update EXP_RTN_HD set
		RMK = #rmk#,
		WAVR_CHARGE_YN =
		nvl(#waiveChrg#,WAVR_CHARGE_YN),
		LM_DATE = sysdate,
		LM_USER_ID =
		#lastModUserId#
		where SRF_NO = #srfNo#
	 </update>

	<parameterMap id="delCargoRtnMap" class="map">
		<parameter property="result" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="OUT" />
		<parameter property="srfNo" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="userId" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
	</parameterMap>

	<procedure id="deleteRtnCargo" parameterMap="delCargoRtnMap">
		{ ? = call pkg_exp_acpt.del_return_cargo(?,?) }
	</procedure>
	<!-- Added by swapneswari for List/Print return cargo -->
	
	<!-- Query Changed :: Ranjith :: 12MAR2012  -->
	<select id="exportcargoprintlist" parameterClass="cargo.cms.export.bo.DocumentSearchBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		 SELECT T.*,
		 case when (t.srfNo is not null or  t.uldSrfNo is not null) then T.strgAmt1 else pkg_exp_billing.get_return_storage_amt(T.rtnNo,NULL) end strgAmt,		
		 <![CDATA[
		 (SELECT SUM(WAVR_AMT) FROM BILL_CHARGE_DTL bill
							 WHERE TR_NO in  (select regexp_substr(T.rtnChrgTrNo,'[^,]+', 1, level) from dual connect by regexp_substr(T.rtnChrgTrNo, '[^,]+', 1, level) is not null)
							AND STATUS <>'VOID' AND bill.WAVR_AMT  > 0 ) wCharge2,
		 ]]>
		 decode((SELECT count(1) FROM BILL_CHARGE_DTL bill
							 WHERE
							 NVL(bill.AWB_NO,'*') = NVL(T.awbNo1,'*') 
							 and NVL(bill.AWB_DATE,'12JAN2000') = NVL(T.awbDate,'12JAN2000') 
							 and NVL(bill.ULD_KEY,'*') = NVL(T.uldKey,'*')
							 and bill.ITM_CODE = 'SCEXPO'),0,'N','Y' )ChargeCreated,
		<![CDATA[					 
		case when (t.srfNo is not null or  t.uldSrfNo is not null) 
			then decode((SELECT count(1) FROM BILL_CHARGE_DTL bill
							Left join imp_srf srf on srf.srf_no = bill.srf_no 
							WHERE TR_NO in (select regexp_substr(T.rtnChrgTrNo,'[^,]+', 1, level) from dual connect by regexp_substr(T.rtnChrgTrNo, '[^,]+', 1, level) is not null) 
							AND ( srf.srf_no is null or ( srf.SRF_EXPY_DATE > sysdate and  srf.STATUS <> 'VOID') ) AND bill.STATUS = 'PENDING' and bill.net_amt > 0),0,'N','Y' )
							 else case when pkg_exp_billing.get_return_storage_amt(T.rtnNo,NULL) > 0 then 'Y' else 'N' end end  paidYn
		 ]]>
		FROM (SELECT RCL.CARR_CODE carrCode,
        (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = NVL((SELECT CUST_NO FROM EXP_RCL_HD A
        		JOIN EXP_RTN_RCL B ON A.RCL_NO = B.RCL_NO 
        		WHERE NVL(A.AWB_NO,'*') = NVL(RTN_HD.AWB_NO,'*') AND NVL(A.AWB_DATE,'12MAR2000') = 
            NVL(RTN_HD.AWB_DATE,'12MAR2000') AND NVL(A.ULD_KEY,'*') = NVL(RTN_HD.ULD_KEY,'*') AND B.RTN_NO = RTN_HD.RTN_NO AND CUST_NO is not null and rownum = 1),AWB.AGENT_CODE)) agtName ,
        RTN_HD.ULD_KEY  uldKey,
        RTN_HD.RTN_NO rtnNo,
        (select imp.srf_no from imp_srf imp where imp.srf_no = RTN_HD.srf_no  and ((SRF_EXPY_DATE > sysdate and STATUS ='ISSUED') or STATUS ='POSTED'))  srfNo,
      	decode(RTN_HD.ULD_KEY,null,'',RTN_HD.SRF_NO) uldSrfNo,
        to_char(RTN_HD.CR_DATE, 'DDMONYY') retDt,
        RTN_HD.DEL_YN deleteYN,
      	substr(RTN_HD.AWB_NO,0,3) as awbNoPfx,
        substr(RTN_HD.AWB_NO,4) as awbNoSfx,
        RTN_HD.AWB_NO awbNo1,	
        to_char(RTN_HD.AWB_DATE, 'DDMONYY') awbDate,					
        (SELECT cc_code FROM V_CST_IMP_CC_CODE_ALL  WHERE AWB_NO=RTN_HD.AWB_NO AND AWB_DATE=RTN_HD.AWB_DATE AND rownum = 1) as latestCC,		   
        (SELECT MIN(A.RCL_NO) FROM EXP_RCL_HD A
        		JOIN EXP_RTN_RCL B ON A.RCL_NO = B.RCL_NO 
        		WHERE NVL(A.AWB_NO,'*') = NVL(RTN_HD.AWB_NO,'*') AND NVL(A.AWB_DATE,'12MAR2000') = NVL(RTN_HD.AWB_DATE,'12MAR2000') AND NVL(A.ULD_KEY,'*') = NVL(RTN_HD.ULD_KEY,'*') AND B.RTN_NO = RTN_HD.RTN_NO) rclNo, 
        RCL.RCL_PCS rclPc,
        RCL.RCL_WT rclWt,
        decode(RCL.RCL_RTN_PC,NULL,'0',RCL.RCL_RTN_PC) retPc, 
        decode(RCL.RCL_RTN_WT,NULL,'0.0',RCL.RCL_RTN_WT) retWt,
        RTN_HD.CONFIRM_YN confirmYN,
        RCL.STRG_AMT strgAmt1,
        (SELECT SUM(WAVR_AMT) FROM BILL_CHARGE_DTL WHERE TR_NO IN RTN_HD.CHRG_TR_NO) waivAmt1,
        RTN_HD.CHRG_TR_NO  rtnChrgTrNo
        FROM EXP_RTN_HD RTN_HD
        JOIN 
        (SELECT RCL_HD.CARR_CODE ,RCL_HD.AWB_NO , RCL_HD.AWB_DATE ,RCL_HD.ULD_KEY , SUM(RCL_RTN_PC) RCL_RTN_PC, SUM(RCL_RTN_WT) RCL_RTN_WT , SUM(RCL_PCS) RCL_PCS , SUM(RCL_WT) RCL_WT ,RTN_RCL.RTN_NO,SUM(RTN_RCL.STRG_AMT) STRG_AMT 
        FROM EXP_RTN_RCL RTN_RCL  JOIN EXP_RCL_HD  RCL_HD ON  RTN_RCL.RCL_NO = RCL_HD.RCL_NO
        group by RCL_HD.CARR_CODE, RCL_HD.AWB_NO, RCL_HD.AWB_DATE, RCL_HD.ULD_KEY,RTN_RCL.RTN_NO) RCL
        ON NVL(RCL.AWB_NO,'*') = NVL(RTN_HD.AWB_NO,'*')  AND NVL(RCL.AWB_DATE,'12MAR2000') = NVL(RTN_HD.AWB_DATE,'12MAR2000') AND NVL(RCL.ULD_KEY,'*') =  NVL(RTN_HD.ULD_KEY,'*') AND RTN_HD.RTN_NO = RCL.RTN_NO
        LEFT JOIN AWB ON RTN_HD.AWB_NO = AWB.AWB_NO AND RTN_HD.AWB_DATE = AWB.AWB_DATE
		WHERE  to_char(RTN_HD.cr_date, 'DDMONYY') between to_date(#dateFrom#, 'DDMONYY') AND to_date(#dateTo#, 'DDMONYY')
		UNION ALL
    SELECT RCL.CARR_CODE carrCode,
        (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = NVL(RCL.CUST_NO,AWB.AGENT_CODE)) agtName ,
        RTN_HD.ULD_KEY  uldKey,
        RTN_HD.RTN_NO rtnNo,
        (select imp.srf_no from imp_srf imp where imp.srf_no = RTN_HD.srf_no  and ((SRF_EXPY_DATE > sysdate and STATUS ='ISSUED') or STATUS ='POSTED'))  srfNo,
      	decode(RTN_HD.ULD_KEY,null,'',RTN_HD.SRF_NO) uldSrfNo,
        to_char(RTN_HD.CR_DATE, 'DDMONYY') retDt,
        RTN_HD.DEL_YN deleteYN,
      	substr(RTN_HD.AWB_NO,0,3) as awbNoPfx,
        substr(RTN_HD.AWB_NO,4) as awbNoSfx,
        RTN_HD.AWB_NO awbNo1,	
        to_char(RTN_HD.AWB_DATE, 'DDMONYY') awbDate,					
        (SELECT cc_code FROM V_CST_IMP_CC_CODE_ALL  WHERE AWB_NO=RTN_HD.AWB_NO AND AWB_DATE=RTN_HD.AWB_DATE AND rownum = 1) as latestCC,		   
        (SELECT MIN(A.RCL_NO) FROM EXP_RCL_DTL A
        	 JOIN EXP_RTN_RCL B	 ON A.RCL_NO = B.RCL_NO
        	  WHERE  A.ULD_KEY = RTN_HD.ULD_KEY AND B.RTN_NO = RTN_HD.RTN_NO) rclNo, 
        RCL.RCL_PCS rclPc,
        RCL.RCL_WT rclWt,
        decode(RCL.RCL_RTN_PC,NULL,'0',RCL.RCL_RTN_PC) retPc, 
        decode(RCL.RCL_RTN_WT,NULL,'0.0',RCL.RCL_RTN_WT) retWt,
        RTN_HD.CONFIRM_YN confirmYN,
 		RCL.STRG_AMT strgAmt1,
        (SELECT SUM(WAVR_AMT) FROM BILL_CHARGE_DTL WHERE TR_NO IN RTN_HD.CHRG_TR_NO) waivAmt1,
        RTN_HD.CHRG_TR_NO  rtnChrgTrNo
        FROM EXP_RTN_HD RTN_HD
        JOIN 
        ( SELECT RCL_HD.CARR_CODE ,RCL_HD.CUST_NO,RCL_DTL.ULD_KEY , SUM(RCL_RTN_PC) RCL_RTN_PC, SUM(RCL_RTN_WT) RCL_RTN_WT , SUM(RCL_DTL.PCS) RCL_PCS , SUM(NET_WT) RCL_WT,
        HD.RTN_NO RTN_NO,SUM(RTN_RCL.STRG_AMT) STRG_AMT
        FROM EXP_RTN_HD HD
        JOIN EXP_RTN_RCL RTN_RCL  ON HD.RTN_NO = RTN_RCL.RTN_NO
        JOIN EXP_RCL_HD  RCL_HD ON  RTN_RCL.RCL_NO = RCL_HD.RCL_NO
        JOIN EXP_RCL_DTL RCL_DTL ON RCL_HD.RCL_NO = RCL_DTL.RCL_NO AND HD.ULD_KEY = RCL_DTL.ULD_KEY
        WHERE RCL_DTL.PPK_TYPE = 'P'
        GROUP BY RCL_HD.CARR_CODE, RCL_HD.CUST_NO, RCL_DTL.ULD_KEY, HD.RTN_NO) RCL
        ON RCL.ULD_KEY =  RTN_HD.ULD_KEY  AND RTN_HD.RTN_NO = RCL.RTN_NO
        LEFT JOIN AWB ON RTN_HD.AWB_NO = AWB.AWB_NO AND RTN_HD.AWB_DATE = AWB.AWB_DATE
		WHERE  to_char(RTN_HD.cr_date, 'DDMONYY') between to_date(#dateFrom#, 'DDMONYY') AND to_date(#dateTo#, 'DDMONYY'))T
		WHERE 1 = 1
		<isNotEmpty property="carr">
				AND	T.carrCode = #carr#
		</isNotEmpty>
			<isEmpty property="carr">
				<isNotEmpty property="loginCarrier">
				   AND ( T.carrCode = #loginCarrier#
                        OR  T.carrCode IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
            	</isNotEmpty>
            </isEmpty>	
			<isNotEmpty property="agentName">
				AND	T.agtName = #agentName#
			</isNotEmpty>
	</select>
	<!-- Query Changed :: Ranjith :: 12MAR2012  -->
	
	<update id="OtherDetailsForReturnCargo" parameterClass="cargo.cms.export.bo.CargoStorageBO">
		update EXP_RTN_HD set
		SHIPPER_NAME = #shprName#,
		AGENT_NAME = #agtName#,
		AGENT_CUST_NO = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #agtName#),
		SHIPPER_CUST_NO = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #shprName#),
		COLL_NAME =#name#,
		COLL_HKID = #hkid#,
		LM_USER_ID=#userID#,
		LM_DATE=sysdate,
		IATA_CODE= (select CO_IATA_CODE from cust_company where code_desc = #agtName#) ,
		RMK=#rmk#,
		WAVR_CHARGE_YN = decode(#waiveChrg#,'0.00','N','Y'),
		STRG_AMT = NVL(#totStrgChrg#,0),
		WAIVE_AMT = NVL(#totWaiveChrg#,0),
		CHRG_TR_NO = decode(CHRG_TR_NO,null,#rtnChrgTrNo#,CHRG_TR_NO||','||#rtnChrgTrNo#),
		SRF_NO = #srfNo#,
		TRUCK_NO=#truckNo#,
		TR_TYPE = #trtype#
		where RTN_NO = #rtnNo# 
</update>
<select id="viewallOtherDetails" parameterClass="cargo.cms.export.bo.CargoStorageBO" 
	resultClass="cargo.cms.export.bo.CargoStorageBO" >
select SHIPPER_NAME shprName,AGENT_NAME agtName,decode(WAVR_CHARGE_YN,null,'N',WAVR_CHARGE_YN) waiveChrg,COLL_HKID hkid,COLL_NAME name,IATA_CODE iataCode,
RMK rmk,TRUCK_NO truckNo
from exp_rtn_hd
where RTN_NO = #rtnNo#
</select>
<!-- Changed for QR -->
	<select id="createcargoprintlist" parameterClass="cargo.cms.export.bo.CargoStorageBO"
		resultClass="cargo.cms.export.bo.CargoStorageBO">
		select H.RTN_NO rtnNo,H.srf_no
		srfNo,decode(sum(H.STRG_AMT),'0','0.00',to_char(sum(H.STRG_AMT),'999999999999.99'))
		totStrgChrg,
		H.AWB_NO as awbNo,
		substr(H.AWB_NO,0,3) as awbNoPfx,
        substr(H.AWB_NO,4) as awbNoSfx,
		to_char(H.awb_date,'DDMONYY') as awbDate,H.ULD_KEY uldKey,
		(SELECT cc_code
		FROM V_CST_IMP_CC_CODE
		WHERE AWB_NO=
		(SELECT AWB_NO FROM EXP_RTN_HD WHERE SRF_NO=#srfNo#
		)and rownum = 1
		)latestCC,		
		A.content as cont,
		(select sum(RCL_RTN_PC) from EXP_RTN_rcl where RTN_NO = H.RTN_NO) as
		retPc,to_char(H.cr_date,'DDMONYY') as retDt,
		(select to_char(sum(RCL_RTN_WT),'99999999999.99') from EXP_RTN_rcl where
		RTN_NO = H.RTN_NO) as retWt
		from EXP_RTN_HD H LEFT JOIN EXP_RTN_DTL D ON D.RTN_NO = H.RTN_NO and
		D.awb_no = H.awb_no
		and D.awb_date = H.awb_date
		left join EXP_RTN_RCL T on T.rtn_no = H.rtn_no
		left join EXP_RCL_HD R on T.rcl_no = R.rcl_no
		left join AWB A on A.awb_no = H.awb_no and
		A.awb_date = H.awb_date
		where H.rtn_no =#rtnNo#
		group by H.RTN_NO, H.srf_no, H.STRG_AMT, H.AWB_NO,
		H.awb_date,RCL_RTN_PC,H.RTN_NO,
		RCL_RTN_WT,H.RTN_NO,H.srf_no,cc_code,A.content,H.cr_date,H.ULD_KEY
	</select>
	<select id="validateCarrcode" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		SELECT COUNT(CODE) FROM MAST_CARRIER
		WHERE CODE=#carrCode#
</select>
	<select id="validateAgntName" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		SELECT count(CODE) FROM CUST_COMPANY
		WHERE CODE_DESC = #agentName# and AGENT_YN='Y' AND
		ACTIVE = 'Y' AND BLACKLISTED='N'
</select>
	<select id="validateagentName" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		SELECT count(CODE) FROM CUST_COMPANY
		WHERE CODE_DESC = #agtName# and AGENT_YN='Y' AND ACTIVE = 'Y' AND BLACKLISTED='N'
</select>
	<select id="validateShipName" parameterClass="java.lang.String"
		resultClass="java.lang.Integer">
		SELECT count(1) FROM CUST_COMPANY WHERE code_desc = #shprName# and ACTIVE =
		'Y' and shpr_yn = 'Y'
</select>
<select id="ajaxcallforNameAndHkid" parameterClass="map" resultClass="cargo.cms.export.bo.CargoStorageBO">
        SELECT 
        AUTH_REP_NAME as name, AUTH_REP_ID as hkId 
        FROM CUST_AGENT_AUTH_REP 
        WHERE AUTH_REP_NAME=#name# 

</select>
<select id="ajaxcallforHkid" parameterClass="map" resultClass="cargo.cms.export.bo.CargoStorageBO">
        SELECT 
        AUTH_REP_NAME as name, AUTH_REP_ID as hkId 
        FROM CUST_AGENT_AUTH_REP 
        WHERE AUTH_REP_ID=#hkid# 

</select>
<select id="validateDateDifference" parameterClass="cargo.cms.export.bo.DocumentSearchBO"  resultClass="java.lang.Integer" >
		SELECT TO_CHAR(TO_DATE(#dateTo#,'DDMONYY') - TO_DATE(#dateFrom#,'DDMONYY')) DAYDIFF FROM DUAL	
	</select>

	<!-- Added by swapneswari for List/print return cargo:end ......-->

	<!--
		##################### Create Return Cargo : End
		#######################################################
	-->
	<!--
		>>>>>>>>>>>>>>>>>> Maintain SID (By Srinivas) Starts
		<<<<<<<<<<<<<<<<<<
	-->

	<!-->>>>>>>>>>> SID VALIDATIONS START <<<<<<<<<<<<-->

	<!-->>>>>>>>>>> AMEND/DELETE/PROCESS<<<<<<<<<<<<-->

	<select id="checkSidProcessed" parameterClass="cargo.cms.export.bo.SIDBO"
		resultClass="java.lang.String">
		select count(1) from exp_sid where status = 'PROCESSED' AND sid_no =
		#referenceNumber#
		</select>

	<select id="checkSidExpired" parameterClass="cargo.cms.export.bo.SIDBO"
		resultClass="java.lang.String">
		select count(1) from exp_sid where status = 'EXPIRED' AND sid_no =
		#referenceNumber#
		</select>

	<select id="checkSidProcDel" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		select count(1) from exp_sid where status = 'PROCESSED' AND sid_no = #sidNo#
	</select>

	<select id="checkSidExpDel" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		select count(1) from exp_sid where status = 'EXPIRED' AND sid_no = #sidNo#
	</select>

	<select id="checkSidRejected" parameterClass="cargo.cms.export.bo.SIDBO"
		resultClass="java.lang.String">
		select count(1) from exp_sid where status = 'REJECTED' AND sid_no =
		#referenceNumber#
		</select>

	<select id="checkExpCarCreated" parameterClass="cargo.cms.export.bo.SIDBO" resultClass="java.lang.String">
		select count(1) from awb WHERE awb_no = #saveAwbNum# and
		AWB_DATE = #awbDate# and CAR_YN = 'Y'
	</select>

	<select id="checkAwbLocked" parameterClass="cargo.cms.export.bo.SIDBO"
		resultClass="java.lang.String">
		select count(1) from awb WHERE awb_no = #saveAwbNum# and
		AWB_DATE = #awbDate# and
		EXP_AWB_LOCK = 'Y'
		</select>

	<select id="checkBlackListed" parameterClass="cargo.cms.export.bo.SIDBO"
		resultClass="java.lang.String">
		select count(1) from awb_lock loc
		JOIN AWB awb ON awb.AWB_NO = loc.AWB_NO 
		AND awb.awb_date = loc.awb_date		  
		WHERE loc.awb_no = #saveAwbNum# and
		TO_CHAR(loc.AWB_DATE,'DDMONYY') = #awbDate#         
        and loc.MISS_YN = 'Y'
		</select>

	<select id="chkRCLCreated" parameterClass="cargo.cms.export.bo.SIDBO"
		resultClass="java.lang.String">
		SELECT COUNT(1) FROM EXP_RCL_HD WHERE awb_no = #saveAwbNum# and
		AWB_DATE = #awbDate#
		</select>

	<select id="sidValidateShipper" parameterClass="cargo.cms.export.bo.SIDBO"
		resultClass="java.lang.String">
		SELECT count(1) FROM CUST_COMPANY WHERE code_desc = #shipperName# and ACTIVE = 'Y' and shpr_yn = 'Y'
		</select>

	<select id="extSidValidateShipper" parameterClass="cargo.cms.external.bo.SIDBO"
		resultClass="java.lang.String">
		SELECT count(1) FROM CUST_COMPANY WHERE code_desc = #shipperName# and ACTIVE
		= 'Y' and shpr_yn = 'Y'
		</select>

	<select id="checkRecordInAWB" parameterClass="cargo.cms.export.bo.SIDBO"
		resultClass="java.lang.String">
		SELECT count(1) FROM AWB WHERE awb_no = #saveAwbNum# and
		AWB_DATE = #awbDate# and
		awb_closed_yn = 'N'	    
	</select>

	<select id="fetchShipperList" parameterClass="java.util.HashMap"
		resultClass="java.util.HashMap">
		select code_desc as shipperName from CUST_COMPANY where code_desc
		like UPPER(#keySearchStr# ||'%') 
			and ROWNUM &lt;= #maxRecFetch# and ACTIVE = 'Y' AND SHPR_YN = 'Y'  ORDER BY code_desc  
		</select>
		
	<!-->>>>>>>>>>> SID VALIDATIONS END <<<<<<<<<<<<-->
	
	<update id="updateAwbAcceptMode" parameterClass="cargo.cms.export.bo.SIDBO">
			update awb set 
			ACCEPT_MODE = 'LDS',
			AGENT_NAME = #agentName#,
			AGENT_CODE = (SELECT CODE  FROM CUST_COMPANY WHERE CODE_DESC = #agentName# AND AGENT_YN = 'Y' AND ACTIVE = 'Y' AND BLACKLISTED='N'),
			SHIPPER_NAME = #shipperName#,
			LM_USER_ID = #userID#,
			LM_DATE = sysdate
			where awb_no = #saveAwbNum# and AWB_DATE = #awbDate#
	</update>	    
	
	<select id="getCountryCodeExp" parameterClass="map" resultClass="java.lang.String">
		SELECT code FROM MAST_COUNTRY 
		WHERE CODE_DESC = #countryName#
	</select>
		
	<!-->>>>>>>>>>> REJECTED SID <<<<<<<<<<<<-->
	<update id="updateRejSid" parameterClass="cargo.cms.export.bo.SIDBO">
		UPDATE EXP_SID SET
		    STATUS = #status#,
			LM_USER_ID=#userID#,
			LM_DATE=sysdate		
		WHERE 
			SID_NO = #referenceNumber# 
	</update>
	
	
	
	<insert id="insertSID" parameterClass="cargo.cms.export.bo.SIDBO">
		INSERT INTO EXP_SID(
			SID_NO,
			AWB_NO,
			AWB_DATE,
			BRD_POINT_NAME,
			OFF_POINT,
			SHPM_DESC_C,
			PCS,
			WT,
			FLT_CARR1,
			FLT_NO1,
			FLT_DATE1,
			FLT_KEY1,
			FLT_CARR2,
			FLT_NO2,
			FLT_DATE2,
			FLT_KEY2,
			ROUTE_AIRP_CODE,
			ROUTE_CARR_CODE,
			ONW_AIRP_CODE,
			ONW_CARR_CODE,
			SHPR_NAME,
			SHPR_AC_NO,
			SHPR_ADDR1,
			SHPR_ADDR2,
			SHPR_ADDR3,
			SHPR_ADDR4,
			SHPR_PLACE,
			SHPR_CTRY_CODE,
			SHPR_PIN_CODE,
			SHPR_CONT_N1,
			SHPR_TEL,
			SHPR_FAX,
			CSGNE_NAME,
			CSGNE_AC_NO,
			CSGNE_ADDR1,
			CSGNE_ADDR2,
			CSGNE_ADDR3,
			CSGNE_ADDR4,
			CSGNE_PLACE,
			CSGNE_CTRY_CODE,
			CSGNE_PIN_CODE,
			CSGNE_CONT_N1,
			CSGNE_TEL,
			CSGNE_FAX,
			AGENT_AC_NO,
			AGENT_NAME,
			AGENT_ICODE,
			AGENT_CASS_ADDR,
			AGENT_PLACE,
			SPL_SVC_REQ1,
			SPL_SVC_REQ2,
			SPL_SVC_REQ3,
			OTHER_SVC_INFO1,
			OTHER_SVC_INFO2,
			DECLN_CURR_CODE,
			DECLN_CHRG_CODE,
			DECLN_WT_VALN_PPCC_I,
			DECLN_OTHER_CHRG_PPCC_I,
			DECLN_CARR,
			DECLN_CTM,
			DECLN_INSURCE,
			PPCC_WT_CHRG,
			PPCC_VALN_CHRG,
			CC_VALN_CHRG,
			PPCC_TAXES,
			CC_TAXES,
			PPCC_OTHER_CHRG_DUE_AGENT,
			CC_OTHER_CHRG_DUE_AGENT,
			PPCC_OTHER_CHRG_DUE_CARR,
			CC_OTHER_CHRG_DUE_CARR,
			PPCC_PP_TOTAL_CHRG,
			PPCC_CC_TOTAL_CHRG,
			SHPR_CERTN,
			EXECN_DATE,
			EXECN_PLACE,
			EXECN_SIGN,
			CC_CHRG_DESTN_CURR,
			CC_DESTN_CHRG,
			CC_TOTAL_DESTN_CHRG,
			STATUS,
			CR_USER_ID,
			CR_DATE,
			LM_USER_ID,
			LM_DATE,
			SLAC,
			AIRP_CODE_DESC,
			TR_TYPE,
			REF_NO,
			SPL_CUST_INFO1,
			SPL_CUST_INFO2)
		values(
			#referenceNumber#,
			#saveAwbNum#,
			#awbDate#,
			#departureAirportName#,
			#finalAirportCode#,
			'1',
			#hiddenTotalPieces#,
			#hiddenTotalWeight#,
			#leg1CarrierPrefix#,
			#leg1CarrierSuffix#,
			TO_DATE(#leg1FlightDate#, 'DDMONYY'),
			#leg1CarrierPrefix# || #leg1CarrierSuffix#,
			#finalFlightCarrier1#,
			#finalFlightNumber1#,
			TO_DATE(#finalFlightDate1#, 'DDMONYY'),
			#finalFlightCarrier1# || #finalFlightNumber1#,
			#leg2CarrierPrefix#,
			#leg2AirportCode#,
			#leg3CarrierPrefix#,
			#leg3AirportCode#,
			#shipperName#,
			#shipperAccountNumber#,
			#shipperAddress1#,
			#shipperAddress2#,
			#shipperAddress3#,
			#shipperState#,
			#shipperCityName#,
			#shipperCountryCode#,
			#shipperPostalCode#,
			#shipperContact#,
			#shipperTelephoneNumber#,
			#shipperFaxNumber#,
			#consigneeName#,
			#consigneeAccountNumber#,
			#consigneeAddress1#,
			#consigneeAddress2#,
			#consigneeAddress3#,
			#consigneeState#,
			#consigneeCityName#,
			#consigneeCountryCode#,
			#consigneePostalCode#,
			#consigneeContact#,
			#consigneeTelephoneNumber#,
			#consigneeFaxNumber#,
			#agentAccountNumber#,
			#agentName#,
			#agentIataCode#,
			#agentAddress1#,
			#agentCityName#,
			#handlingInformation1#,
			#handlingInformation2#,
			#handlingInformation3#,
			#handlingInformation4#,
			#handlingInformation5#,
			#currencyCodeCustoms#,
			#declaredChargeCode#,
			<isNotEmpty property="picesWeightPP">
				nvl(#picesWeightPP#,0),
			</isNotEmpty>
			<isEmpty property="picesWeightPP">
				nvl(#piecesWeightColl#,0),
			</isEmpty>
			<isNotEmpty property="piecesOtherPP">
				nvl(#piecesOtherPP#,0),
			</isNotEmpty>
			<isEmpty property="piecesOtherPP">
				nvl(#piecesOtherColl#,0),
			</isEmpty>
			nvl(#declaredValueCarriage#,0),
			nvl(#declaredValueCustoms#,0),
			nvl(#insuranceAmount#,0),			
			 <isNotEmpty property="picesWeightPP">
					nvl(#totalWeightChargePrepaid#,0),
			</isNotEmpty>
			<isEmpty property="picesWeightPP">
					nvl(#totalWeightCharge#,0),
			</isEmpty>	
			<!-- 
			<isEqual compareValue="PP" property="declaredChargeCode">
				nvl(#totalWeightChargePrepaid#,0),
			</isEqual>
			<isEqual compareValue="PC" property="declaredChargeCode">
				nvl(#totalWeightChargePrepaid#,0),
			</isEqual>
			<isEqual compareValue="CP" property="declaredChargeCode">
				nvl(#totalWeightCharge#,0),
			</isEqual>
			<isEqual compareValue="CC" property="declaredChargeCode">
				nvl(#totalWeightCharge#,0),
			</isEqual> -->			
			nvl(#valuationChargePrepaid#,0),
			nvl(#valuationCharge#,0),
			nvl(#taxChargePrepaid#,0),
			nvl(#taxCharge#,0),
			nvl(#agentChargePrepaid#,0),
			nvl(#agentCharge#,0),
			nvl(#carrierChargePrepaid#,0),
			nvl(#carrierCharge#,0),
			nvl(#totalCollectCharge#,0),
			nvl(#totalCollectChargePrepaid#,0),
			#shipperSignature#,
			#date#,
			#place#,
			#carrierSignature#,
			#currencyCode#,
			nvl(#destinationCharges#,0),
			nvl(#currencyConversionCharges#,0),
			'CREATED',
			#userID#,
			sysdate,
			#userID#,
			sysdate,
			#slac#,
			#finalAirportName#,
			'SI',
			#refNo#,
			#splCustInfo1#,
			#splCustInfo2#)
	</insert>
	
		<select id="doesChargeCodeExpExist" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM MAST_CODE_DTL
		WHERE CODE_TYPE = 'OTHER_CHARGE_CODE'
			AND CODE = #chargeCode#
	</select>
	
	<select id="doesCurrencyCodeExist" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM MAST_CURRENCY
		WHERE CODE = #currencyCode#
	</select>
	
	<select id="doesRateClassExist" parameterClass="map" resultClass="java.lang.String">
    SELECT TO_CHAR(COUNT(1)) from mast_rate_cls
    where code = #rateClass#
	</select>
	
	<parameterMap id="getSIDrecordNumberMap" class="map" >
		<parameter property="RESULT"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	
	<procedure id="getSIDrecordNumber" parameterMap="getSIDrecordNumberMap" >
		{? = call fun_get_tr_no('SI')  }
	</procedure>
	
	<insert id="insertSIDOtherCharges" parameterClass="map">
		insert into EXP_SID_OTH_CHARGES(
			SID_NO,	
			OTH_PC_I,
			OTH_CHRG_C,
			OTH_ENTLEMT_C,
			OTH_CHRG)
		VALUES(
			#SIDNumber#,
			#prepaidOrCollectIndicator#,
			#chargeCode#,
			#agentOrCarrierIndicator#,
			#charge#)
	</insert>
	
	<insert id="insertSIDOtherChargesToFWB" parameterClass="map">
		insert into EDI_FWB_OTH_CHARGES(
			TR_NO,	
      		DOC_LINE_NO,
			OTH_PC_I1,                                                                                                                                                                                
     		OTH_CHRG_C1,     
      		OTH_ENTLEMT_C1,
      		OTH_CHRG1 )
		VALUES(
			#trNo#,
			(SELECT MAX(DOC_LINE_NO)+1 FROM EDI_FWB_OTH_CHARGES), 
			#prepaidOrCollectIndicator#,
			#chargeCode#,
			#agentOrCarrierIndicator#,
			#charge#)
	</insert>
	
	<insert id="insertSIDRates" parameterClass="map">
		insert into EXP_SID_RATE(
			SID_NO,
			RATE_PCS,
			RATE_GORSS_WT_C,
			RATE_GROSS_WT,
			RATE_CLASS_C,
			RATE_COMM_N,
			RATE_CHRGBLE_WT,
			RATE_CHRG_RATE,
			RATE_CHRG_A,
			RATE_GOODS_NATR,
			DOC_LINE_NO)
		VALUES(
			#SIDNumber#,
			#rcpPieces#,
			#weightType#,
			nvl(#grossWeight#,0),
			#rateClass#,
			#itemNumber#,
			nvl(#chargeableWeight#,0),
			#rateChargeDiscount#,
			nvl(#totalCharge#,0),
			#goodsDescription#,
			nvl(#docLineNo#,1))
	</insert>
	
	<insert id="insertRatesToFWB" parameterClass="map">
		insert into EDI_FWB_RATE(
			TR_NO,
     		doc_line_no,
			RATE_PCS,
			RATE_GWT_CODE,
			RATE_GWT,
			RATE_CL_CODE,
			RATE_COMM_N,
			RATE_CHRGBLE_WT,
			RATE_CHRG_RATE,
			RATE_CHRG_A,
			RATE_GOODS_NATR,
			CR_USER_ID,                                                                                                                                                                                                    
      		CR_DATE,                                                                                                                                                                                                           
      		LM_USER_ID,                                                                                                                                                                                               
      		LM_DATE)
		VALUES(
			#trNo#,
      		(SELECT MAX(DOC_LINE_NO)+1 FROM EDI_FWB_RATE),
			#rcpPieces#,
			#weightType#,
			#grossWeight#,
			#rateClass#,
			#itemNumber#,
			#chargeableWeight#,
			#rateChargeDiscount#,
			#totalCharge#,
			#goodsDescription#,
			#userId#,
			SYSDATE,
			#userId#,
			SYSDATE)
	</insert>
	<!-- Changed for QR -->
	<select id="getSIDList" parameterClass="cargo.cms.export.bo.SIDSearchBO" resultClass="cargo.cms.export.bo.SIDListBO">
		SELECT 
			SID_NO AS sidNumber,
			SUBSTR(AWB_NO,1,3)||'-'||SUBSTR(AWB_NO,4) as awbNoDisp ,
			AWB_NO AS awbNumber,
			BRD_POINT_NAME AS origin,
			AIRP_CODE_DESC AS destination,
			PCS AS totalPieces,
			WT AS totalWeight,
			SHPR_NAME AS shipperName,
			STATUS AS status
		FROM EXP_SID
		WHERE
			CR_DATE BETWEEN TO_DATE(#dateFrom#, 'DDMONYY') AND TO_DATE(#dateTo#, 'DDMONYY')+1
			<isNotEmpty prepend="AND" property="shipperName">
				SHPR_NAME LIKE #shipperName# 
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="sidStatus">
				STATUS = #sidStatus#
			</isNotEmpty>
			<isNotEmpty property="loginCarrier">
             	AND (SUBSTR(AWB_NO,1,3) IN (SELECT CODE FROM MAST_AWB_PREFIX WHERE CARR_CODE= #loginCarrier#) 
     			  or SUBSTR(AWB_NO,1,3) IN (SELECT CODE FROM MAST_AWB_PREFIX WHERE CARR_CODE IN(
      			  						    SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #loginCarrier#)))                                        
            </isNotEmpty>
	</select>
	
	<delete id="deleteSID" parameterClass="map">
		delete from exp_sid where sid_no = #sidNumber#
	</delete>
	
	<delete id="deleteSIDOtherCharges" parameterClass="map">
		delete from exp_sid_oth_charges where sid_no = #sidNumber#
	</delete>
	
	<delete id="deleteSIDRate" parameterClass="map">
		delete from exp_sid_rate where sid_no = #sidNumber#
	</delete>
	
	<insert id="insertFwbFOrSID" parameterClass="cargo.cms.edi.bo.EdiFwbBO">
        INSERT INTO EDI_FWB
		(TR_NO,MSG_VER,AWB_NO,AWB_DATE,ORG,DES,SHIP_DESC_C,PCS,WGT_UNIT,WGT,FLT_CARR1,FLT_NUM1,FLT_KEY1, 
        FLT_DATE1,FLT_CARR2,FLT_NUM2,FLT_KEY2,FLT_DATE2,RTG_APT_CODE,RTG_DES_CARR,RTG_ONWARD_CODE1,
		RTG_ONWARD_CARR1,RTG_ONWARD_CODE2,RTG_ONWARD_CARR2,SHPR_ACC_NO,SHPR_NAME,SHPR_ADDR,
		SHPR_PLACE,SHPR_CTRY_CODE,SHPR_STATE_PROVINCE,SHPR_PIN_CODE,SHPR_CONT_ID, 
	    SHPR_CONT_NO,CSGNE_ACC_NO,CSGNE_NAME,CSGNE_ADDR,CSGNE_PLACE,CSGNE_CTRY_CODE,CSGNE_STATE_PROVINCE,
		CSGNE_PIN_CODE,CSGNE_CONT_ID,CSGNE_CONT_NO,AGENT_ACC_NO,AGENT_IATA_CODE,AGENT_IATA_ADDR,
		AGENT_PART_ID,AGENT_NAME,AGENT_PLACE,AGENT_SPL_SERV1,AGENT_SPL_SERV2,AGENT_SPL_SERV3, 
        NOTIFY_NAME,NOTIFY_ADDR,NOTIFY_PLACE,NOTIFY_CTRY_CODE,NOTIFY_STATE_PROVINCE,NOTIFY_PIN_CODE,
		NOTIFY_CONT_ID,NOTIFY_CONT_NO,CVD_ISO_CURR_CODE,CVD_CHG_CODE,CVD_CHG_DECL_WGT,CVD_CHG_DECL_OTH,
		CVD_CHG_CARR_VAL,CVD_CHG_CARR_IND,CVD_CHG_CUST_VAL,CVD_CHG_CUST_IND,CVD_CHG_INSUR_VAL,
		CVD_CHG_INSUR_IND,PPD_TOTAL_WT_AMT,PPD_VALUE_VC_AMT,PPD_TAXES_TX_AMT,PPD_TOTAL_OA_AMT,
		PPD_TOTAL_OC_AMT,PPD_SUMMY_CT_AMT,COL_TOTAL_WT_AMT,COL_VALUE_VC_AMT, 
	    COL_TAXES_TX_AMT,COL_TOTAL_OA_AMT,COL_TOTAL_OC_AMT,COL_SUMMY_CT_AMT,CER_SIGNATURE,
		ISU_AWB_ISS_DATE,ISU_AWB_ISS_PLACE,ISU_SIGNATURE,OSI_SERVICE_INFO1,OSI_SERVICE_INFO2,
		OSI_SERVICE_INFO3,CDC_ISO_CURR_CODE,CDC_CURR_RATE,
		CDC_CC_INDES_AMT,CDC_CC_ATDES_AMT,CDC_TOTAL_CHG_AMT,COR_CUST_ORI_CODE, 
	    CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,COPY_NO,MSG_SEQ_NUM,TOTAL_COUNT,FWB_STATUS,SUCCESS_MSGS,COI_CASS_IND, COI_CASS_AMT_FACT, COI_CASS_PER_FACT, SII_CHG_AMT, SII_CASS_IND, ARD_FILE_REF, SPH_SPL_CODE1, SPH_SPL_CODE2, SPH_SPL_CODE3, SPH_SPL_CODE4, SPH_SPL_CODE5, SPH_SPL_CODE6, SPH_SPL_CODE7, SPH_SPL_CODE8, SPH_SPL_CODE9, NOM_NAME, NOM_SPACE, SRI_REF_NO, SRI_SUPP_SHP_INFO1, SRI_SUPP_SHP_INFO2)
        VALUES (#trNo#,1,#awbNo#,to_date(#awbDate#,'DDMONYY'),#org#,#dest#,'T',#pcs#,'K',
		#wgt#,#fltCarr1#,#fltNum1#,#fltKey1#,#fltDate1#,#fltCarr2#,#fltNum2#,#fltKey2#,#fltDate2#,
		#rtgAptCode#,#rtgDesCarr#,#rtgOnwardCode1#,#rtgOnwardCarr1#,#rtgOnwardCode2#,#rtgOnwardCarr2#,
		#shprAccNo#,#shprName#,#shprAddr#,#shprPlace#,#shprCtryCode#,#shprStateProvince#,#shprPinCode#,
		#shprContId#,#shprContNo#,#csgneAccNo#,#csgneName#,#csgneAddr#,#csgnePlace#,#csgneCtryCode#,
		#csgneStateProvince#,#csgnePinCode#,#csgneContId#,#csgneContNo#,#agentAccNo#,#agentIataCode#,
	    #agentIataAddr#,#agentPartId#,#agentName#,#agentPlace#,#agentSplServ1#,#agentSplServ2#,
		#agentSplServ3#,#notifyName#,#notifyAddr#,#notifyPlace#,#notifyCtryCode#,#notifyStateProvince#,
        #notifyPinCode#,#notifyContId#,#notifyContNo#,#cvdIsoCurrCode#,#cvdChgCode#,#cvdChgDeclWgt#,
		#cvdChgDeclOth#,#cvdChgCarrVal#,#cvdChgCarrInd#,#cvdChgCustVal#,#cvdChgCustInd#,
	    decode(#cvdChgInsurVal#,'XXX',0,#cvdChgInsurVal#),#cvdChgInsurInd#,#ppdTotalWtAmt#,#ppdValueVcAmt#,#ppdTaxesTxAmt#,
		#ppdTotalOaAmt#,#ppdTotalOcAmt#,#ppdSummyCtAmt#,#colTotalWtAmt#,#colValueVcAmt#,
        #colTaxesTxAmt#,#colTotalOaAmt#,#colTotalIcAmt#,#colSummyCtAmt#,#cerSignature#,
		to_date(#isuAwbIssDate#,'DDMONYY'),#isuAwbPlace#,#isuSignature#,#osiServiceInfo1#,
		#ostServiceInfo2#,#ostServiceInfo3#,#cdcIsoCurrCode#,#cdeCurrRate#,#cdeCcIndesAmt#,#cdeCcAtdesAmt#,#cdeTotalChgAmt#,#corCustOriCode#,
	    #crUserId#,sysdate,#lmUserId#,sysdate,1,1,1,#fwbStatus#,#successMsgs#,#COI_CASS_IND#, #COI_CASS_AMT_FACT#, #COI_CASS_PER_FACT#, #SII_CHG_AMT#, #SII_CASS_IND#, #ARD_FILE_REF#, #SPH_SPL_CODE1#, #SPH_SPL_CODE2#, #SPH_SPL_CODE3#, #SPH_SPL_CODE4#, #SPH_SPL_CODE5#, #SPH_SPL_CODE6#, #SPH_SPL_CODE7#, #SPH_SPL_CODE8#, #SPH_SPL_CODE9#, #NOM_NAME#, #NOM_SPACE#, #SRI_REF_NO#, #SRI_SUPP_SHP_INFO1#, #SRI_SUPP_SHP_INFO2#)
    </insert>
    
	<select id="getSIDDetails" parameterClass="map" resultClass="cargo.cms.export.bo.SIDBO">
		SELECT 
			SID_NO AS referenceNumber,
			AWB_NO AS saveAwbNum,
			substr(AWB_NO,0,3) as oldAwbPriff,
			substr(AWB_NO,4) as oldAwbNo,
			STATUS AS status,
			to_char(AWB_DATE,'DDMONYY') AS awbDate,
			BRD_POINT_NAME AS departureAirportName,
			OFF_POINT AS finalAirportCode,
			PCS AS hiddenTotalPieces,
			WT AS hiddenTotalWeight,			
			FLT_CARR1 AS leg1CarrierPrefix,
			FLT_NO1 AS leg1CarrierSuffix,
			TO_CHAR(FLT_DATE1, 'DDMONYY') AS leg1FlightDate,
			'' AS finalFlightCarrier2,
			'' AS finalFlightNumber2,
			TO_CHAR('', 'DDMONYY') AS finalFlightDate2,			
			FLT_CARR2 AS finalFlightCarrier1,
			FLT_NO2 AS finalFlightNumber1,
			TO_CHAR(FLT_DATE2, 'DDMONYY') AS finalFlightDate1,
			ROUTE_AIRP_CODE AS leg2CarrierPrefix,
			ROUTE_CARR_CODE AS leg2AirportCode,
			ONW_AIRP_CODE AS leg3CarrierPrefix,
			ONW_CARR_CODE AS leg3AirportCode,
			SHPR_NAME AS  shipperName,
			SHPR_AC_NO AS shipperAccountNumber,
			SHPR_ADDR1 AS shipperAddress1,
			SHPR_ADDR2 AS shipperAddress2,
			SHPR_ADDR3 AS shipperAddress3,
			SHPR_ADDR4 AS shipperState,
			SHPR_PLACE AS shipperCityName,
			(SELECT CODE_DESC FROM Mast_Country  WHERE CODE = SHPR_CTRY_CODE)   AS shipperCountryName,
			SHPR_PIN_CODE AS shipperPostalCode,
			SHPR_CONT_N1 AS shipperContact,
			SHPR_TEL AS shipperTelephoneNumber,
			SHPR_FAX AS shipperFaxNumber,
			CSGNE_NAME AS consigneeName,
			CSGNE_AC_NO AS consigneeAccountNumber,
			CSGNE_ADDR1 AS consigneeAddress1,
			CSGNE_ADDR2 AS consigneeAddress2,
			CSGNE_ADDR3 AS consigneeAddress3,
			CSGNE_ADDR4 AS consigneeState,
			CSGNE_PLACE AS consigneeCityName,
			(SELECT CODE_DESC FROM Mast_Country  WHERE CODE = CSGNE_CTRY_CODE) AS consigneeCountryName,
			CSGNE_PIN_CODE AS consigneePostalCode,
			CSGNE_CONT_N1 AS consigneeContact,
			CSGNE_TEL AS consigneeTelephoneNumber,
			CSGNE_FAX AS consigneeFaxNumber,
			AGENT_AC_NO AS agentAccountNumber,
			AGENT_NAME AS agentName,
			AGENT_ICODE AS agentIataCode,
			AGENT_CASS_ADDR AS agentAddress1,
			AGENT_PLACE AS agentCityName,
			SPL_SVC_REQ1 AS handlingInformation1,
			SPL_SVC_REQ2 AS handlingInformation2,
			SPL_SVC_REQ3 AS handlingInformation3,
			OTHER_SVC_INFO1 AS handlingInformation4,
			OTHER_SVC_INFO2 AS handlingInformation5,
			DECLN_CURR_CODE AS currencyCodeCustoms,
			DECLN_CHRG_CODE AS declaredChargeCode,
			decode(DECLN_WT_VALN_PPCC_I,'P','P',null) AS picesWeightPP,
			decode(DECLN_WT_VALN_PPCC_I,'C','C',null) AS piecesWeightColl,
			decode(DECLN_OTHER_CHRG_PPCC_I,'P','P',null) AS piecesOtherPP,
			decode(DECLN_OTHER_CHRG_PPCC_I,'C','C',null) AS piecesOtherColl,			
			decode(DECLN_WT_VALN_PPCC_I,'P',PPCC_WT_CHRG) as totalWeightChargePrepaid,
			decode(DECLN_WT_VALN_PPCC_I,'C',PPCC_WT_CHRG) as totalWeightCharge,
			<!-- 
			decode(DECLN_CHRG_CODE,'PP',PPCC_WT_CHRG,'PC',PPCC_WT_CHRG) as totalWeightChargePrepaid,
			decode(DECLN_CHRG_CODE,'CP',PPCC_WT_CHRG,'CC',PPCC_WT_CHRG) as totalWeightCharge,
			 -->
			DECLN_CARR AS declaredValueCarriage,
			DECLN_CTM AS declaredValueCustoms,
			DECLN_INSURCE AS insuranceAmount	,
			PPCC_VALN_CHRG AS valuationChargePrepaid,
			CC_VALN_CHRG AS valuationCharge,
			PPCC_TAXES AS taxChargePrepaid,
			CC_TAXES AS taxCharge,
			PPCC_OTHER_CHRG_DUE_AGENT AS agentChargePrepaid,
			CC_OTHER_CHRG_DUE_AGENT AS agentCharge,
			PPCC_OTHER_CHRG_DUE_CARR AS carrierChargePrepaid,
			CC_OTHER_CHRG_DUE_CARR AS carrierCharge,
			PPCC_PP_TOTAL_CHRG AS totalCollectCharge,
			PPCC_CC_TOTAL_CHRG AS totalCollectChargePrepaid,
			SHPR_CERTN AS shipperSignature,
			TO_CHAR(EXECN_DATE, 'DDMONYY') AS "date",
			EXECN_PLACE AS place,
			EXECN_SIGN AS carrierSignature,
			CC_CHRG_DESTN_CURR AS currencyCode,
			CC_DESTN_CHRG AS destinationCharges,
			CC_TOTAL_DESTN_CHRG AS currencyConversionCharges,
			SLAC as slac,
			REF_NO as refNo,
			SPL_CUST_INFO1 as splCustInfo1,
			SPL_CUST_INFO2 as splCustInfo2,
			AIRP_CODE_DESC as finalAirportName
		FROM EXP_SID                                    
		WHERE
			SID_NO = #sidNumber#
	</select>
	
	<update id="updateSID" parameterClass="cargo.cms.export.bo.SIDBO">
		UPDATE EXP_SID SET
			AWB_NO = #saveAwbNum#,
			AWB_DATE = to_date(#awbDate#,'DDMONYY'),
			BRD_POINT_NAME = #departureAirportName#,
			OFF_POINT = #finalAirportCode#,
			PCS = #hiddenTotalPieces#,
			WT = #hiddenTotalWeight#,
			FLT_CARR1 = #leg1CarrierPrefix#,
			FLT_NO1 = #leg1CarrierSuffix#,
			FLT_KEY1 = #leg1CarrierPrefix# || #leg1CarrierSuffix#,
			FLT_DATE1 = TO_DATE(#leg1FlightDate#, 'DDMONYY'),
			FLT_CARR2 = #finalFlightCarrier1#,
			FLT_NO2 = #finalFlightNumber1#,
			FLT_KEY2 = #finalFlightCarrier1# || #finalFlightNumber1#,
			FLT_DATE2 = TO_DATE(#finalFlightDate1#, 'DDMONYY'),
			ROUTE_AIRP_CODE = #leg2CarrierPrefix#,
			ROUTE_CARR_CODE = #leg2AirportCode#,
			ONW_AIRP_CODE = #leg3CarrierPrefix#,
			ONW_CARR_CODE = #leg3AirportCode#,
			SHPR_NAME =  #shipperName#,
			SHPR_AC_NO = #shipperAccountNumber#,
			SHPR_ADDR1 = #shipperAddress1#,
			SHPR_ADDR2 = #shipperAddress2#,
			SHPR_ADDR3 = #shipperAddress3#,
			SHPR_ADDR4 = #shipperState#,
			SHPR_PLACE = #shipperCityName#,
			SHPR_CTRY_CODE = #shipperCountryCode#,
			SHPR_PIN_CODE = #shipperPostalCode#,
			SHPR_CONT_N1 = #shipperContact#,
			SHPR_TEL = #shipperTelephoneNumber#,
			SHPR_FAX = #shipperFaxNumber#,
			CSGNE_NAME = #consigneeName#,
			CSGNE_AC_NO = #consigneeAccountNumber#,
			CSGNE_ADDR1 = #consigneeAddress1#,
			CSGNE_ADDR2 = #consigneeAddress2#,
			CSGNE_ADDR3 = #consigneeAddress3#,
			CSGNE_ADDR4 = #consigneeState#,
			CSGNE_PLACE = #consigneeCityName#,
			CSGNE_CTRY_CODE = #consigneeCountryCode#,
			CSGNE_PIN_CODE = #consigneePostalCode#,
			CSGNE_CONT_N1 = #consigneeContact#,
			CSGNE_TEL = #consigneeTelephoneNumber#,
			CSGNE_FAX = #consigneeFaxNumber#,
			AGENT_AC_NO = #agentAccountNumber#,
			AGENT_NAME = #agentName#,
			AGENT_ICODE = #agentIataCode#,
			AGENT_CASS_ADDR = #agentAddress1#,
			AGENT_PLACE = #agentCityName#,
			SPL_SVC_REQ1 = #handlingInformation1#,
			SPL_SVC_REQ2 = #handlingInformation2#,
			SPL_SVC_REQ3 = #handlingInformation3#,
			OTHER_SVC_INFO1 = #handlingInformation4#,
			OTHER_SVC_INFO2 = #handlingInformation5#,
			DECLN_CURR_CODE = #currencyCodeCustoms#,
			DECLN_CHRG_CODE = #declaredChargeCode#,

			DECLN_WT_VALN_PPCC_I =
				<isNotEmpty property="picesWeightPP">
					nvl(#picesWeightPP#,0),
				</isNotEmpty>
				<isEmpty property="picesWeightPP">
					nvl(#piecesWeightColl#,0),
				</isEmpty>

			DECLN_OTHER_CHRG_PPCC_I =
				<isNotEmpty property="piecesOtherPP">
					nvl(#piecesOtherPP#,0),
				</isNotEmpty>
				<isEmpty property="piecesOtherPP">
					nvl(#piecesOtherColl#,0),
				</isEmpty>

			PPCC_WT_CHRG = 
				 <isNotEmpty property="picesWeightPP">
					nvl(#totalWeightChargePrepaid#,0),
				</isNotEmpty>
				<isEmpty property="picesWeightPP">
					nvl(#totalWeightCharge#,0),
				</isEmpty>	
			<!-- 
				<isEqual compareValue="PP" property="declaredChargeCode">
					nvl(#totalWeightChargePrepaid#,0),
				</isEqual>
				<isEqual compareValue="PC" property="declaredChargeCode">
					nvl(#totalWeightChargePrepaid#,0),
				</isEqual>
				<isEqual compareValue="CP" property="declaredChargeCode">
					nvl(#totalWeightCharge#,0),
				</isEqual>
				<isEqual compareValue="CC" property="declaredChargeCode">
					nvl(#totalWeightCharge#,0),
				</isEqual> -->
			DECLN_CARR = #declaredValueCarriage#,
			DECLN_CTM = #declaredValueCustoms#,
			DECLN_INSURCE = #insuranceAmount#,
			PPCC_VALN_CHRG = nvl(#valuationChargePrepaid#, 0),
			CC_VALN_CHRG = nvl(#valuationCharge#, 0),
			PPCC_TAXES = nvl(#taxChargePrepaid#,0),
			CC_TAXES = nvl(#taxCharge#, 0),
			PPCC_OTHER_CHRG_DUE_AGENT = nvl(#agentChargePrepaid#, 0),
			CC_OTHER_CHRG_DUE_AGENT = nvl(#agentCharge#, 0),
			PPCC_OTHER_CHRG_DUE_CARR = nvl(#carrierChargePrepaid#, 0),
			CC_OTHER_CHRG_DUE_CARR = nvl(#carrierCharge#, 0),
			PPCC_PP_TOTAL_CHRG = nvl(#totalCollectCharge#, 0),
			PPCC_CC_TOTAL_CHRG = nvl(#totalCollectChargePrepaid#, 0),
			SHPR_CERTN = #shipperSignature#,
			EXECN_DATE = TO_DATE(#date#, 'DDMONYY'),
			EXECN_PLACE = #place#,
			STATUS = #status#,
			EXECN_SIGN = #carrierSignature#,
			CC_CHRG_DESTN_CURR = #currencyCode#,
			CC_DESTN_CHRG = nvl(#destinationCharges#, 0),
			CC_TOTAL_DESTN_CHRG = nvl(#currencyConversionCharges#, 0),
			LM_USER_ID = #userID#,
			LM_DATE = sysdate,
			SLAC = #slac#,
			REF_NO = #refNo#,
			SPL_CUST_INFO1 = #splCustInfo1#,
			SPL_CUST_INFO2 = #splCustInfo2#,
			AIRP_CODE_DESC = #finalAirportName#
		WHERE
			SID_NO = #referenceNumber#
	</update>
	<!-- Changed for QR -->
	<select id="getAgentDetails" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.SIDBO">
		SELECT	
			CODE AS	shipperAccountNumber,
			ADD1 ||' '|| ADD2||' ' ||ADD3||' ' || ADD4 ||' '|| ADD5 AS shipperAddress1,
			CITY AS shipperCityName,
			(SELECT CODE_DESC FROM MAST_CITY WHERE CODE=CITY) shipperCityCode,
			PIN_CODE AS shipperPostalCode,
			(SELECT CODE_DESC FROM MAST_COUNTRY WHERE CODE=CTRY_CODE) shipperCountryName,
			CTRY_CODE AS shipperCountryCode,
			TEL1 AS shipperTelephoneNumber,
			FAX1 AS shipperFaxNumber,
			EMAIL1 AS shipperEmailAddress,
			MOB1 AS shipperContact
		 FROM CUST_COMPANY
			WHERE CODE_DESC = #agentName#
	</select>
	
	<select id="getSIDOtherCharges" parameterClass="map" resultClass="cargo.cms.export.bo.SIDOtherChargesBO">
		SELECT 
			OTH_PC_I AS prepaidOrCollectIndicator,
			OTH_CHRG_C AS chargeCode,
			OTH_ENTLEMT_C AS agentOrCarrierIndicator,
			OTH_CHRG AS charge
		FROM EXP_SID_OTH_CHARGES
		WHERE SID_NO = #sidNumber#
	</select>
	
	<select id="getSIDRates" parameterClass="map" resultClass="cargo.cms.export.bo.SIDRatesBO">
		SELECT DOC_LINE_NO as seq,
		  RATE_PCS AS rcpPieces,
		  RATE_GORSS_WT_C AS weightType,
		  RATE_GROSS_WT AS grossWeight,
		  RATE_CLASS_C AS rateClass,
		  RATE_COMM_N AS itemNumber,
		  RATE_CHRGBLE_WT AS chargeableWeight,
		  RATE_CHRG_RATE AS rateChargeDiscount,
		  RATE_CHRG_A AS totalCharge,
		  RATE_GOODS_NATR AS goodsDescription
		FROM EXP_SID_RATE R LEFT JOIN EXP_SID S ON R.SID_NO = S.SID_NO
		WHERE R.SID_NO = #sidNumber#
		order by seq
	</select>
	
	<parameterMap id="assignAWBNumberToSIDMap" class="map" >
		<parameter property="RESULT"    jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="sidNumber" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbNumber" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="userID"    jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	
	<procedure id="assignAWBNumberToSID" parameterMap="assignAWBNumberToSIDMap">
		{? = call pkg_exp_acpt.assign_sid_awb_no(?,?,?)  }
	</procedure>
	
	<select id="getSidPrtList"  parameterClass="map" resultClass="cargo.cms.export.bo.SIDBO">
		select CODE AS codeId , CODE_DESC AS codeDesc  from mast_prt_dtl where prt_type = 'SID_PRINTER' order by default_yn desc,code_desc
	</select>
	
	<select id="get_sid_accounting_information" parameterClass="map" resultClass="cargo.cms.export.bo.SIDAccountBO">
		select 
		  a.sid_no AS sidNumber,
		  a.actg_info AS accountInformation
		from exp_sid_acct_info a
		where a.sid_no = #sidNumber#
	</select>
	
	<delete id="delete_sid_accounting_information" parameterClass="map">
		delete from exp_sid_acct_info a
		where a.sid_no = #sidNumber#
	</delete>
	
	<insert id="insert_sid_accounting_information" parameterClass="map">
		insert into exp_sid_acct_info(
		  SID_NO, 
		  ACTG_I,
		  actg_info) 
		values (
		  #sidNumber#, 
		  'GEN',
		  #accountInformation#)
	</insert>
	
	<insert id="insert_sid_accounting_information_toFWB" parameterClass="map">
		insert into EDI_FWB_ACCT_INFO(
		  TR_NO, 
		  DOC_LINE_NO,
		  acc_info_ind,
		  acC_info) 
		values (
		  #trNo#,
		  (SELECT MAX(DOC_LINE_NO)+1 FROM EDI_FWB_ACCT_INFO), 
		  'GEN',
		  #accountInformation#)
	</insert>
	
	<select id="has_awb_been_assigned_to_other_sid" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from exp_sid where awb_no = #awbNumber#
	</select>
	
	<select id="has_awb_been_assigned" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from exp_sid where awb_no = #awbNumber# and sid_no = #sidNumber#
	</select>
	
	<!-- >>>>>>>>>>>>>>>>>>>>>    EXPORT FLIGHT UTILS : START <<<<<<<<<<<<<<<<<<-->
	
	<select id="doesFlightExist" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM flt_opr
		WHERE flt_key = #flightNumber#
	</select>
	
		<select id="isFlightDateOk" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM flt_opr
		WHERE flt_key = #flightNumber#
			AND sch_date = #flightDate#
	</select>
	
	<select id="doesCarrierExist" parameterClass="map" resultClass="java.lang.String">
		SELECT to_char(COUNT(1))
		FROM MAST_CARRIER 
		WHERE code=#carrierCode#
	</select>
	
	<select id="isFlightExport" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM flt_opr
		WHERE flt_key = #flightNumber#
			AND sch_date =  to_date(#flightDate#,'DDMONYY')
			AND flt_type = 'D'
	</select>
	<!-- Changed for QR -->
	<select id="isExportFlightClosed" parameterClass="map" resultClass="java.lang.String">
		SELECT flt_cls_yn from flt_opr a, flt_opr_events b
		WHERE a.flt_key = #flightNumber#
			AND a.sch_date = #flightDate# AND b.flt_type='D' AND a.tr_no = b.tr_no 
	</select>
	<!-- Changed for QR -->
	
	<select id="isChangePackingType" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT count(1) FROM ULD_INVENTORY WHERE ULD_KEY=#PARAM# AND (TOPUP_YN= 'Y' OR REBUILD_YN='Y')
	</select>
	
	<select id="isExportFlightManifested" parameterClass="map" resultClass="java.lang.String">
		SELECT flt_cls_yn from flt_opr a, flt_opr_events b
		WHERE a.flt_key = #flightNumber#
			AND a.sch_date = #flightDate# AND b.flt_type='D' AND a.tr_no = b.tr_no 
	</select>
	<!-- Changed for QR -->
	<select id="getExportFlightETD" parameterClass="map" resultClass="java.lang.String">
		select PKG_COMMON.get_flt_eta(#flightNumber#, TO_DATE(#flightDate#,'DDMONYY'), 'D', 'DD') from dual
	</select>
	
	<select id="doesAirportExist" parameterClass="map" resultClass="java.lang.String">
		SELECT to_char(COUNT(1))
		FROM MAST_ARPT
		WHERE code = #airportCode#
	</select>
		
	<select id="getFlightPortOfCall" parameterClass="map" resultClass="java.lang.String">
		select PKG_PMAN.FLT_PORTS(#flightNumber#, #flightDate#) as portOfCall from dual
	</select>
	
	<parameterMap id="valDls" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	<procedure id="validateDlsFinalizeExp" parameterMap="valDls" >
		{? = call pkg_exp_val.val_dls_finalize(?, ?)}
	</procedure>
	
	<select id="fetchUncheckOutStatus" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO" resultClass="java.lang.Integer">
		select count(1) from EXP_OFFLOAD_ULD_AWB where flt_key =#flightKey# and flt_date = to_date(#flightDate# , 'DDMONYY')
		and ULD_BT_NO = #uldKey# and CONFIRMED_YN = 'Y'
	</select>
	
	<select id="offloadUldStatus" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO" resultClass="java.lang.Integer">
		 select COUNT(0) from exp_offload_uld where CHECKED_IN_FLAG ='Y' and FLT_KEY = #flightKey# and FLT_DATE = to_date(#flightDate#,'DDMONYY') and ULD_BT_NO = #uldKey#
	</select>
	
	
	<!-- >>>>>>>>>>>>>>>>>>>>>    EXPORT FLIGHT UTILS : END   <<<<<<<<<<<<<<<<<<-->	
		
		
	
	<!-- >>>>>>>>>>>>>>>>>>>>> Maintain SID (By Srinivas) Ends <<<<<<<<<<<<<<<<<< -->
		
<select id="getCarrierCodeFromAWBPrefix" parameterClass="map" resultClass="java.lang.String">
		SELECT carr_code 
		FROM mast_awb_prefix 
		WHERE code = #AWB#
			AND DEF_YN='Y'
	</select>

	<select id="validateAWB" parameterClass="map" resultClass="java.lang.String">
		SELECT fun_validate_awb(#AWB#,#carrierCode#,#dummy#) FROM dual
	</select>

	<select id="checkAWBInterfereWithCurrentRange" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) 
		FROM exp_awb_stk 
		WHERE #AWB# 
			BETWEEN awb_no_from AND awb_no_to
	</select>
	<select id="validateAWBPrefixForAWBStock" parameterClass="map" resultClass="java.lang.Integer">
	    SELECT COUNT(1) FROM MAST_AWB_PREFIX WHERE CODE = #awbPrefix#
	</select>
    <select id="validateCarrierAgnstPrefix" parameterClass="map" resultClass="java.lang.String">
	    SELECT CARR_CODE AS CarrCode FROM MAST_AWB_PREFIX WHERE CODE= #awbPrefix#
	</select>
	<insert id="insertAWBStock" parameterClass="cargo.cms.export.bo.AWBStockBO">
		INSERT INTO EXP_AWB_STK (
			TR_NO,				
			CARR_CODE,          
			AWB_NO_FROM,        
			AWB_NO_TO,          
			NON_MOD7_IND,       
			AWB_NO_AVAILABLE,   
			AWB_NO_RESERVED,    
			RMK,                
			STATUS,             
			CR_USER_ID,         
			CR_DATE,            
			LM_USER_ID,         
			LM_DATE,
			AWB_TYPE)            
		VALUES ( 
			EXP_AWB_STK_SEQ.nextval,
            #carrier#,
            #awbNoFrom#,
            #awbNoTo#,
            #nonMod7#,
            '0',
            '0',
            #remarks#,
            'OPEN',
            #crUserId#,
            sysdate,
            #lastModUserId#,
            sysdate,
            #awbType#)
	</insert>

	<select id="checkAWBInterfereWithCurrentRangeForUpdate" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) 
		FROM exp_awb_stk 
		WHERE #AWB# 
			BETWEEN awb_no_from AND awb_no_to
			AND TR_NO != #trNumber#
	</select>
	
	
<select id="FETCH_TR_NO_EXP_AWB_STK" parameterClass="cargo.cms.export.bo.AWBStockBO" resultClass="java.lang.String">
		SELECT TR_NO 
		FROM exp_awb_stk 
		WHERE AWB_NO_FROM = #awbNoFrom# AND AWB_NO_TO = #awbNoTo#
		</select>
<select id="FETCH_TR_NO_EXP_AWB_STK_SPLIT" parameterClass="map" resultClass="java.lang.String">
		SELECT TR_NO 
		FROM exp_awb_stk 
		WHERE AWB_NO_FROM = #awbNoFrom# AND AWB_NO_TO = #awbNoTo# and rownum=1
		</select>
	
	<select id="getAWBStockListForEdit" parameterClass="cargo.cms.export.bo.StockSearchBO" resultClass="cargo.cms.export.bo.AWBStockBO">
		SELECT TR_NO,
			TR_NO 		 AS trNo,
			CARR_CODE    AS carrier,
			AWB_NO_FROM  AS awbNoFrom,
			(select code_desc from mast_code_dtl where code = AWB_TYPE and code_type = 'AWB_STK_TYPE' ) as awbType,
			substr(AWB_NO_FROM,0,3) as awbPfxFrom,
			substr(AWB_NO_FROM,4) as awbSfxFrom,
			AWB_NO_TO    AS awbNoTo,
			substr(AWB_NO_TO,0,3) as awbPfxTo,
			substr(AWB_NO_TO,4) as awbSfxTo,
			NON_MOD7_IND AS nonMod7,
			RMK          AS remarks,
			AWB_NO_RESERVED AS reserved,
			AWB_NO_AVAILABLE AS available,
			TO_CHAR(CR_DATE,'DDMONYY') AS crDate,
			LM_USER_ID   AS lastModUserId
		 FROM EXP_AWB_STK
		 WHERE SUBSTR(awb_no_from, '0','3') = #awbPfx#
		 ORDER BY AWB_NO_FROM
	</select>
	
	<select id="GET_OLD_EXP_AWB_STK_DETAILS" parameterClass="cargo.cms.export.bo.AWBStockBO" resultClass="cargo.cms.export.bo.AWBStockBO">
		SELECT TR_NO,
			TR_NO 		 AS trNo,
			CARR_CODE    AS carrier,
			AWB_NO_FROM  AS awbNoFrom,
			(select code_desc from mast_code_dtl where code = AWB_TYPE and code_type = 'AWB_STK_TYPE' ) as awbType,
			substr(AWB_NO_FROM,0,3) as awbPfxFrom,
			substr(AWB_NO_FROM,3) as awbSfxFrom,
			AWB_NO_TO    AS awbNoTo,
			substr(AWB_NO_TO,0,3) as awbPfxTo,
			substr(AWB_NO_TO,3) as awbSfxTo,
			NON_MOD7_IND AS nonMod7,
			RMK          AS remarks,
			AWB_NO_RESERVED AS reserved,
			AWB_NO_AVAILABLE AS available,
			TO_CHAR(CR_DATE,'DDMONYY') AS crDate,
			LM_USER_ID   AS lastModUserId
		 FROM EXP_AWB_STK
		 WHERE TR_NO = #trNo#
	</select>
	<delete id="deleteFromAwbStkDtlTable" parameterClass="map">
		delete from EXP_AWB_STK_DTL WHERE AWB_NO BETWEEN #awbFrom# AND #awbTo# and TR_NO = #trNo#
	</delete>

	<delete id="deleteAWBStock" parameterClass="map">
		 DELETE FROM EXP_AWB_STK 
		 WHERE TR_NO = #trNo#
	</delete>

	<update id="updateAWBStock" parameterClass="cargo.cms.export.bo.AWBStockBO">
		UPDATE EXP_AWB_STK SET 
		    AWB_TYPE=#awbType#,
			AWB_NO_FROM=#awbNoFrom#,
			AWB_NO_TO=#awbNoTo#,
			NON_MOD7_IND=#nonMod7#,
			RMK=#remarks#,
			LM_USER_ID=#lastModUserId#,
			LM_DATE=sysdate		
		WHERE 
			TR_NO = #trNo# 
	</update>
	<update id="updateNonModAWBStock" parameterClass="cargo.cms.export.bo.AWBStockBO">
		UPDATE EXP_AWB_STK SET 
		    AWB_TYPE=#awbType#,
			AWB_NO_FROM=#awbNoFrom#,
			AWB_NO_TO=#awbNoTo#,
			NON_MOD7_IND=#nonMod7#,
			RMK=#remarks#,
			LM_USER_ID=#lastModUserId#,
			LM_DATE=sysdate		
		WHERE 
			TR_NO = #trNo# 
	</update>

	<select id="getAWBStockListByPrefix" parameterClass="map" resultClass="cargo.cms.export.bo.AWBStockBO">
		SELECT 
			a.TR_NO AS trNo,
			a.CARR_CODE AS carrier,
			a.AWB_NO_FROM AS awbNoFrom,
			a.AWB_NO_TO AS awbNoTo,
			(select code_desc from mast_code_dtl where code = a.AWB_TYPE and code_type = 'AWB_STK_TYPE' ) as awbType,
			(select to_char(COUNT(1)) from exp_awb_stk_dtl b where a.tr_no = b.tr_no) AS totalAWBs,
			a.AWB_NO_RESERVED AS reserved,
			a.AWB_NO_AVAILABLE AS available,
			a.RMK AS remarks,
			a.CR_USER_ID AS crUserId,
			TO_CHAR(a.CR_DATE,'DDMONYY') AS crDate
		FROM EXP_AWB_STK a
		WHERE a.CARR_CODE = (SELECT c.CARR_CODE FROM MAST_AWB_PREFIX c where c.code = #awbPrefix# and def_yn='Y')
		order by awbType
	</select>

	<update id="splitAWBStock_update" parameterClass="map">
		update exp_awb_stk
		set awb_no_to = #awbTo#,
			LM_USER_ID = #userID#,
			LM_DATE = sysdate
		where tr_no = #recordNumber#
	</update>

	<insert id="splitAWBStock_insert" parameterClass="map">
		INSERT INTO EXP_AWB_STK (
			TR_NO,				
			CARR_CODE,          
			AWB_TYPE,
			AWB_NO_FROM,        
			AWB_NO_TO,
			NON_MOD7_IND,       
			AWB_NO_AVAILABLE,   
			AWB_NO_RESERVED,    
			RMK,                
			STATUS,             
			CR_USER_ID,         
			CR_DATE,            
			LM_USER_ID,         
			LM_DATE)
		values(
			EXP_AWB_STK_SEQ.nextval,
			(SELECT CARR_CODE FROM EXP_AWB_STK WHERE TR_NO = #recordNumber#),
			(SELECT AWB_TYPE FROM EXP_AWB_STK WHERE TR_NO = #recordNumber#),
			#awbFrom#,
			#awbTo#,
			'N',
			'0',
			'0',
			(SELECT RMK FROM EXP_AWB_STK WHERE TR_NO = #recordNumber#),
			'OPEN',
			#userID#,
			(SELECT CR_DATE FROM EXP_AWB_STK WHERE TR_NO = #recordNumber#),
			#userID#,
			sysdate)
	</insert>
	<insert id="splitNonModAWBStock_insert" parameterClass="map">
		INSERT INTO EXP_AWB_STK (
			TR_NO,				
			CARR_CODE,          
			AWB_TYPE,
			AWB_NO_FROM,        
			AWB_NO_TO,
			NON_MOD7_IND,       
			AWB_NO_AVAILABLE,   
			AWB_NO_RESERVED,    
			RMK,                
			STATUS,             
			CR_USER_ID,         
			CR_DATE,            
			LM_USER_ID,         
			LM_DATE)
		values(
			EXP_AWB_STK_SEQ.nextval,
			(SELECT CARR_CODE FROM EXP_AWB_STK WHERE TR_NO = #recordNumber#),
			(SELECT AWB_TYPE FROM EXP_AWB_STK WHERE TR_NO = #recordNumber#),
			#awbFrom#,
			#awbTo#,
			'Y',
			'0',
			'0',
			(SELECT RMK FROM EXP_AWB_STK WHERE TR_NO = #recordNumber#),
			'OPEN',
			#userID#,
			(SELECT CR_DATE FROM EXP_AWB_STK WHERE TR_NO = #recordNumber#),
			#userID#,
			sysdate)
	</insert>
	<insert id="insertNonModAWBStockForJoin" parameterClass="cargo.cms.export.bo.AWBStockBO">
		INSERT INTO EXP_AWB_STK (
			TR_NO,				
			CARR_CODE,          
			AWB_NO_FROM,        
			AWB_NO_TO,          
			NON_MOD7_IND,       
			AWB_NO_AVAILABLE,   
			AWB_NO_RESERVED,    
			RMK,                
			STATUS,             
			CR_USER_ID,         
			CR_DATE,            
			LM_USER_ID,         
			LM_DATE,
			AWB_TYPE)            
		VALUES ( 
			EXP_AWB_STK_SEQ.nextval,
            #carrier#,
            #awbNoFrom#,
            #awbNoTo#,
            #nonMod7#,
            '0',
            '0',
            #remarks#,
            'OPEN',
            #crUserId#,
            sysdate,
            #lastModUserId#,
            sysdate,
            #awbType#)
	</insert>

	<insert id="insertNonMod7AWBStock" parameterClass="cargo.cms.export.bo.NonMod7AWBBO">
		INSERT INTO exp_awb_stk_dtl(awb_no,tr_no) 
		VALUES(
			#awbNumber#,
			#trNumber#)
	</insert>
	<select id="getNonModAWBsFromDtl" parameterClass="cargo.cms.export.bo.AWBStockBO" resultClass="cargo.cms.export.bo.AWBStockBO">
		select AWB_NO as manuallyEnteredAWBs
			   from exp_awb_stk_dtl 
			   where awb_no between #awbNoFrom# and #awbNoTo# and tr_no=#trNo#
	</select>
	<select id="getNonModAWBsFromDtlForJoin" parameterClass="cargo.cms.export.bo.AWBStockBO" resultClass="cargo.cms.export.bo.AWBStockBO">
		select AWB_NO as manuallyEnteredAWBs
			   from exp_awb_stk_dtl 
			   where awb_no between #awbNoFrom# and #awbNoTo#
	</select>

	<select id="getNonMod7AWBStockList" parameterClass="map" resultClass="cargo.cms.export.bo.NonMod7AWBBO">
		SELECT AWB_NO AS awbNumber
		FROM EXP_AWB_STK_DTL
		WHERE TR_NO = #trNo#
	</select>

	<select id="checkNonMod7AWBStockExist" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1))
		FROM EXP_AWB_STK_DTL 
		WHERE TR_NO=#trNumber#
			AND AWB_NO=#awbNumber#
	</select>
	<select id="getTrNoListForSelectedStock" parameterClass="map" resultClass="java.lang.String">
		<![CDATA[
		select STRAGG(STRINGDELIM(tr_no, ',')) as trNoList
		from exp_awb_stk where awb_no_from >= #AWB_FROM# and awb_no_to <= #AWB_TO#
		]]> 
	</select>

	<delete id="deleteNonMod7AWBStock" parameterClass="map">
		DELETE FROM exp_awb_stk_dtl WHERE AWB_NO NOT BETWEEN #nonModAwbFrom# AND #nonModAwbTo# AND tr_no=#trNo#	
	</delete>

	<update id="updateNonMod7AWBStock" parameterClass="cargo.cms.export.bo.NonMod7AWBBO">
		UPDATE EXP_AWB_STK_DTL SET
			AWB_NO=#awbNumber#
		WHERE TR_NO=#trNumber#
			AND AWB_NO=#awbNumberFromDB#
	</update>

	<select id="getCreateAWBBookingList" parameterClass="cargo.cms.export.bo.StockSearchBO" resultClass="cargo.cms.export.bo.AWBStockBO">
		SELECT EAS.TR_NO as trNo,
        EAS.AWB_NO_FROM AS awbNoFrom,
        EAS.AWB_NO_TO AS awbNoTo,
        (select code_desc from mast_code_dtl where code = EAS.AWB_TYPE and code_type = 'AWB_STK_TYPE' ) as awbType,
        EAS.AWB_NO_AVAILABLE AS available,
        EAS.AWB_NO_RESERVED AS reserved,
        EAS.CARR_CODE AS carrier,
        EAS.NON_MOD7_IND as nonMod7 
        FROM EXP_AWB_STK EAS 
        WHERE AWB_NO_AVAILABLE>'0' 
		<isNotEmpty prepend="AND" property="carrier">
			CARR_CODE = #carrier# 
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="awbType">
			AWB_TYPE = #awbType# 
		</isNotEmpty>
		<isEmpty property="carrier">
                 <isNotEmpty property="loginCarrier">
                        AND (EAS.CARR_CODE = #loginCarrier# 
                        OR EAS.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE     = #loginCarrier#))                                        
                  </isNotEmpty>
        </isEmpty>   
		ORDER BY AWB_NO_FROM
	</select>

	<select id="getCreateAWBBookingDetailsList" parameterClass="map" resultClass="cargo.cms.export.bo.AWBBookingBO">
		SELECT AWB_NO AS awbNo
		FROM EXP_AWB_STK_DTL
		WHERE TR_NO = #trNo#
			  AND STATUS='OPEN'
			  AND ROWNUM BETWEEN 1 AND #rows#
	</select>
	<select id="getawbTypeCodeFromMastCodeDtl" parameterClass="java.lang.String" resultClass="java.lang.String">
		select code as awbType from mast_code_dtl where code_desc = #PARAM# and code_type = 'AWB_STK_TYPE' 
	</select>
	
	<select id="validateShipperName" parameterClass="map" resultClass="java.lang.Integer">
	    SELECT COUNT(1) FROM CUST_COMPANY WHERE CONS_YN = 'Y' AND ACTIVE = 'Y' AND CODE_DESC=#shipperName#
	</select>
	<select id="validateOriginForAWBStock" parameterClass="map" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM DUAL WHERE EXISTS (SELECT NULL FROM MAST_CITY WHERE CODE = #origin# UNION  SELECT NULL FROM MAST_ARPT WHERE CODE = #origin#)	    
	</select>
	<select id="validateDestinationForAWBStock" parameterClass="map" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM DUAL WHERE EXISTS (SELECT NULL FROM MAST_CITY WHERE CODE = #destination# UNION SELECT NULL FROM MAST_ARPT WHERE CODE = #destination#)	    
	</select>
	<select id="validateSHCForAWBStock" parameterClass="map" resultClass="java.lang.Integer">
	    SELECT COUNT(1) FROM MAST_SPL_HAND_CODE WHERE CODE=#shcCode#
	</select>
	<select id="validateCarExistForAWB" parameterClass="map" resultClass="java.lang.String">
	   SELECT CAR_YN AS carInd FROM AWB WHERE AWB_NO=#awbNo# AND AWB_TYPE='E' AND rownum = 1
	</select>
	<select id="validateSIDProcessedForAWB" parameterClass="map" resultClass="java.lang.String">
	   SELECT STATUS as sidStatus FROM EXP_SID WHERE AWB_NO = #awbNo# AND rownum = 1
	</select>
	<select id="getAWBStatusInAWBTableForEnq" parameterClass="map" resultClass="java.lang.Integer">
	   select COUNT(1) from AWB where AWB_NO=#awbNumber#
	</select>
	<insert id="createAWBBooking" parameterClass="cargo.cms.export.bo.AWBBookingBO">
		INSERT INTO EXP_AWB_BOOKING (
			TR_NO,
			CARR_CODE,
			AWB_NO,
			SHIPPER_NAME,
			SHIPPER_CODE,
			SHIPPER_TEL,
			SHIPPER_CNAME,
			RMK,
			STATUS,
			CR_USER_ID,
			CR_DATE,
			LM_USER_ID,
			LM_DATE,
			ORIG,
			DEST,
			CONTENT,
			SPL_CODE1)
		VALUES (
			#trNo#,
			#carrier#,
			#awbNo#,
			#shipperName#,
			#shipperCode#,
			#shipperTel#,
			#shipperCName#,
			#remarks#,
			'OPEN',     
			#crUserId#,
			sysdate,
			#crUserId#,
			sysdate,
			#org#,
			#dest#,
			#content#,
			#shc#)
	</insert>
	<!-- Changed for QR -->
	<select id="getShipperCode" parameterClass="map" resultClass="java.lang.String">
		SELECT code
		FROM CUST_COMPANY 
		WHERE CODE_DESC = #shipperName# AND SHPR_YN = 'Y'
	</select>

	<select id="getStockTrNo" parameterClass="map" resultClass="java.lang.String">
		select EXP_AWB_STK_SEQ.currval from dual
	</select>


	<update id="updateStockTableAfterDtlDelete" parameterClass="map">
		update exp_awb_stk 
		set awb_no_available = awb_no_available+1,
			awb_no_reserved = awb_no_reserved-1
		where tr_no=#trNo#
	</update>

	<select id="getEnqAWBBookingList" parameterClass="cargo.cms.export.bo.AWBBookingBO" resultClass="cargo.cms.export.bo.AWBBookingBO">
		<![CDATA[
		select 
			t3.tr_no AS trNo,
			t2.awb_no AS awbNo,
			substr(t2.awb_no,0,3) as awbPfx,
			substr(t2.awb_no,3) as awbSfx,
			t3.shipper_name AS shipperName,
			t3.shipper_tel AS shipperTel,
			t3.shipper_cname AS shipperCName,
			t3.rmk AS remarks,
			(select code_desc from mast_code_dtl where code = t1.awb_type and code_type = 'AWB_STK_TYPE' ) as awbType,
			t2.status AS status,
			DECODE(A.car_yn,'Y', 'Y',' ') AS car,
			t3.cr_user_id AS crUserId,            
			TO_CHAR(t3.cr_date, 'DDMONYY') AS crDate
		from   exp_awb_stk t1, exp_awb_stk_dtl t2, exp_awb_booking t3
		LEFT JOIN AWB A ON A.AWB_NO = t3.AWB_NO
		where  t1.tr_no = t2.tr_no
		and    t2.tr_no = t3.tr_no
		and    t2.awb_no = t3.awb_no
		and    t1.awb_type = nvl(#awbType#, t1.awb_type)
		and    t1.carr_code = nvl(#carrier#, t1.carr_code)
		and    t2.awb_no >= nvl(#awbNoFrom#, t2.awb_no)
		and    t2.awb_no <= nvl(#awbNoTo#, t2.awb_no)
		and    t2.status = nvl(upper(#status#), t2.status)
		]]>
		<isEmpty property="carrier">
             <isNotEmpty property="loginCarrier">
                AND   (t3.CARR_CODE = #loginCarrier# 
                OR t3.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                WHERE GRP_CARR_CODE     = #loginCarrier#))                                          
             </isNotEmpty>
         </isEmpty>  
        ORDER BY t2.awb_no 
	</select>
	<select id="getAmendAWBBookingList" parameterClass="cargo.cms.export.bo.AWBBookingBO" resultClass="cargo.cms.export.bo.AWBBookingBO">
		select 
			t3.tr_no AS trNo,
			t2.awb_no AS awbNo,
			substr(t2.awb_no,0,3) as awbPfx,
			substr(t2.awb_no,3) as awbSfx,
			t3.CARR_CODE as carrier,
			t3.shipper_name AS shipperName,
			t3.shipper_tel AS shipperTel,
			t3.shipper_cname AS shipperCName,
			t3.rmk AS remarks,
			(select code_desc from mast_code_dtl where code = t1.awb_type and code_type = 'AWB_STK_TYPE' ) as awbType,
			t2.status AS status,
			decode(A.awb_type,'E',decode(A.car_yn,'Y','Y',' ')) as car,
			t3.cr_user_id AS crUserId,
     		t3.orig as org,
            t3.dest as dest,
      		t3.CONTENT as content,
    		t3.spl_code1 as shc,
			TO_CHAR(t3.cr_date, 'DDMONYY') AS crDate
			from   exp_awb_stk t1, exp_awb_stk_dtl t2, exp_awb_booking t3
			LEFT JOIN AWB A ON A.AWB_NO = t3.AWB_NO
			where  t1.tr_no = t2.tr_no
			and    t2.tr_no = t3.tr_no
			and    t2.awb_no = t3.awb_no
			and    t1.awb_type = nvl(#awbType#, t1.awb_type)
			and    t1.carr_code = nvl(#carrier#, t1.carr_code)
			and    t2.awb_no = nvl(#awbNo#, t2.awb_no)
			and    t2.status = nvl(upper(#status#), t2.status)
			<isEmpty property="carrier">
                           <isNotEmpty property="loginCarrier">
                                    AND   (t3.CARR_CODE = #loginCarrier# 
                                    OR t3.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                                    WHERE GRP_CARR_CODE     = #loginCarrier#))                                          
                            </isNotEmpty>
              </isEmpty>   
			ORDER BY t2.awb_no
	</select>
	<select id="getAWBBookingAvailableList" parameterClass="cargo.cms.export.bo.AWBBookingBO" resultClass="cargo.cms.export.bo.AWBBookingBO">
		<![CDATA[
		select 
			t2.tr_no AS trNo,
			t2.awb_no AS awbNo,
			substr(t2.awb_no,0,3) as awbPfx,
			substr(t2.awb_no,3) as awbSfx,
			'' AS shipperName,
			'' AS shipperTel,
			'' AS shipperCName,
			'' AS remarks,
			(select code_desc from mast_code_dtl where code = t1.awb_type and code_type = 'AWB_STK_TYPE' ) as awbType,
			'Available' AS status,
			DECODE(A.car_yn,'Y', 'Y',' ') AS car,
			'' AS crUserId,            
			TO_CHAR('', 'DDMONYY') AS crDate
		from   exp_awb_stk t1, exp_awb_stk_dtl t2
		LEFT JOIN AWB A ON A.AWB_NO = t2.AWB_NO
		where  t1.tr_no = t2.tr_no
		and    t1.awb_type = nvl(#awbType#, t1.awb_type)
		and    t1.carr_code = nvl(#carrier#, t1.carr_code)
		and    t2.awb_no >= nvl(#awbNoFrom#, t2.awb_no)
		and    t2.awb_no <= nvl(#awbNoTo#, t2.awb_no)
    	and    t2.status =nvl('OPEN', t2.STATUS)
		]]>
		<isEmpty property="carrier">
                      <isNotEmpty property="loginCarrier">
                               AND   (t1.CARR_CODE = #loginCarrier# 
                               OR t1.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                               WHERE GRP_CARR_CODE     = #loginCarrier#))                                          
                       </isNotEmpty>
        </isEmpty>   
	</select>
	<select id="getAWBBookingListForCarCreated" parameterClass="cargo.cms.export.bo.AWBBookingBO" resultClass="cargo.cms.export.bo.AWBBookingBO">
		select 
			t3.tr_no AS trNo,
			t2.awb_no AS awbNo,
			substr(t2.awb_no,0,3) as awbPfx,
			substr(t2.awb_no,3) as awbSfx,
			t3.CARR_CODE as carrier,
			t3.shipper_name AS shipperName,
			t3.shipper_tel AS shipperTel,
			t3.shipper_cname AS shipperCName,
			t3.rmk AS remarks,
			(select code_desc from mast_code_dtl where code = t1.awb_type and code_type = 'AWB_STK_TYPE' ) as awbType,
			t2.status AS status,
			DECODE(A.car_yn,'Y', 'Y',' ') AS car,
			t3.cr_user_id AS crUserId,
     		t3.orig as org,
            t3.dest as dest,
      		t3.CONTENT as content,
    		t3.spl_code1 as shc,
			TO_CHAR(t3.cr_date, 'DDMONYY') AS crDate
			from   exp_awb_stk t1, exp_awb_stk_dtl t2, exp_awb_booking t3
			LEFT JOIN AWB A ON A.AWB_NO = t3.AWB_NO
			where  t1.tr_no = t2.tr_no
			and    t2.tr_no = t3.tr_no
			and    t2.awb_no = t3.awb_no
			and    t1.awb_type = nvl(#awbType#, t1.awb_type)
			and    t1.carr_code = nvl(#carrier#, t1.carr_code)
			and    t2.awb_no = nvl(#awbNo#, t2.awb_no)
			and    A.car_yn = 'Y'
			<isEmpty property="carrier">
                      <isNotEmpty property="loginCarrier">
                               AND   (t3.CARR_CODE = #loginCarrier# 
                               OR t3.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                               WHERE GRP_CARR_CODE     = #loginCarrier#))                                          
                       </isNotEmpty>
        	</isEmpty> 			
			ORDER BY t2.awb_no
	</select>
	<select id="getAWBBookingListForDeparted" parameterClass="cargo.cms.export.bo.AWBBookingBO" resultClass="cargo.cms.export.bo.AWBBookingBO">
		select 
			t3.tr_no AS trNo,
			t2.awb_no AS awbNo,
			substr(t2.awb_no,0,3) as awbPfx,
			substr(t2.awb_no,3) as awbSfx,
			t3.CARR_CODE as carrier,
			t3.shipper_name AS shipperName,
			t3.shipper_tel AS shipperTel,
			t3.shipper_cname AS shipperCName,
			t3.rmk AS remarks,
			(select code_desc from mast_code_dtl where code = t1.awb_type and code_type = 'AWB_STK_TYPE' ) as awbType,
			t2.status AS status,
			DECODE(A.car_yn,'Y', 'Y',' ') AS car,
			t3.cr_user_id AS crUserId,
     		t3.orig as org,
            t3.dest as dest,
      		t3.CONTENT as content,
    		t3.spl_code1 as shc,
			TO_CHAR(t3.cr_date, 'DDMONYY') AS crDate
			from   exp_awb_stk t1, exp_awb_stk_dtl t2, exp_awb_booking t3
			LEFT JOIN AWB A ON A.AWB_NO = t3.AWB_NO
			where  t1.tr_no = t2.tr_no
			and    t2.tr_no = t3.tr_no
			and    t2.awb_no = t3.awb_no
			and    t1.awb_type = nvl(#awbType#, t1.awb_type)
			and    t1.carr_code = nvl(#carrier#, t1.carr_code)
			and    t2.awb_no = nvl(#awbNo#, t2.awb_no)
			and    exists 
	                (select 'Y' from  exp_pmanifest_awb 
	                where awb_no = a.awb_no 
	                and awb_date =a.awb_date 
	                and (flt_key,flt_date ) in (select flt_key,sch_date from flt_opr_events where final_manf_ind ='Y')
	                )
			<isEmpty property="carrier">
                      <isNotEmpty property="loginCarrier">
                               AND   (t3.CARR_CODE = #loginCarrier# 
                               OR t3.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                               WHERE GRP_CARR_CODE     = #loginCarrier#))                                          
                       </isNotEmpty>
        	</isEmpty>
			ORDER BY t2.awb_no
	</select>
	<update id="amendAWBBooking" parameterClass="cargo.cms.export.bo.AWBBookingBO">
		UPDATE EXP_AWB_BOOKING SET
			SHIPPER_NAME=   #shipperName#,
			SHIPPER_TEL=    #shipperTel#,
			SHIPPER_CNAME=  #shipperCName#,
			RMK=            #remarks#,
			SHIPPER_CODE=	#shipperCode#,
			ORIG =          #org#,
			DEST =			#dest#,
			CONTENT =       #content#,
			SPL_CODE1 =     #shc#,
			LM_USER_ID=     #lastModUserId#,
			LM_DATE=        sysdate
		WHERE
			TR_NO = #trNo#
			AND AWB_NO = #awbNo#
	</update>

	<delete id="deleteAWBBooking" parameterClass="cargo.cms.export.bo.AWBBookingBO">
		DELETE FROM EXP_AWB_BOOKING
		WHERE TR_NO = #trNo#
			  AND AWB_NO = #awbNo#       
	</delete>
	<select id="getAWBPreList" parameterClass="cargo.cms.export.bo.AWBStockBO" resultClass="cargo.cms.export.bo.AWBStockBO">
	SELECT CODE AS awbPrefix FROM MAST_AWB_PREFIX WHERE CARR_CODE=#carrier# AND DEF_YN ='Y'
	</select>
	<select id="getAWBStockList" parameterClass="cargo.cms.export.bo.AWBBookingBO" resultClass="cargo.cms.export.bo.AWBStockBO">
		SELECT 
			a.TR_NO AS trNo,
			a.CARR_CODE AS carrier,
			a.AWB_NO_FROM AS awbNoFrom,
			(select code_desc from mast_code_dtl where code = a.awb_type and code_type = 'AWB_STK_TYPE' ) as awbType,
			substr(a.AWB_NO_FROM,0,3) as awbPfxFrom,
			substr(a.AWB_NO_FROM,3) as awbSfxFrom,
			a.AWB_NO_TO AS awbNoTo,
			substr(a.AWB_NO_TO,0,3) as awbPfxTo,
			substr(a.AWB_NO_TO,3) as awbSfxTo,
			a.RMK AS remarks,
      		(select to_char(COUNT(1)) from exp_awb_stk_dtl b where a.tr_no = b.tr_no) AS totalAWBs,
			a.AWB_NO_RESERVED AS reserved,
			a.AWB_NO_AVAILABLE AS available,
			a.CR_USER_ID AS crUserId,
			TO_CHAR(a.CR_DATE,'DDMONYY') AS crDate
		FROM EXP_AWB_STK a
		WHERE a.carr_code = nvl(#carrier#, a.carr_code)
		and a.awb_type = nvl(#awbType#, a.awb_type)
			<dynamic>
				<isNotEmpty prepend="AND" property="awbNoFrom">
						<![CDATA[ #awbNoFrom# >= a.AWB_NO_FROM ]]>
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="awbNoTo">
						<![CDATA[ #awbNoTo#  <= a.AWB_NO_TO ]]>
				</isNotEmpty>
			</dynamic>
			 <isEmpty property="carrier">
                           <isNotEmpty property="loginCarrier">
                                    AND   (a.CARR_CODE = #loginCarrier# 
                                    OR a.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                                    WHERE GRP_CARR_CODE     = #loginCarrier#))                                          
                            </isNotEmpty>
              </isEmpty>   
		ORDER BY a.AWB_NO_FROM
	</select>
	<select id="getAWBStockAvailableList" parameterClass="cargo.cms.export.bo.AWBBookingBO" resultClass="cargo.cms.export.bo.AWBStockBO">
		SELECT 
			a.TR_NO AS trNo,
			a.CARR_CODE AS carrier,
			a.AWB_NO_FROM AS awbNoFrom,
			(select code_desc from mast_code_dtl where code = a.awb_type and code_type = 'AWB_STK_TYPE' ) as awbType,
			substr(a.AWB_NO_FROM,0,3) as awbPfxFrom,
			substr(a.AWB_NO_FROM,3) as awbSfxFrom,
			a.AWB_NO_TO AS awbNoTo,
			substr(a.AWB_NO_TO,0,3) as awbPfxTo,
			substr(a.AWB_NO_TO,3) as awbSfxTo,
			a.RMK AS remarks,
      		(select to_char(COUNT(1)) from exp_awb_stk_dtl b where a.tr_no = b.tr_no) AS totalAWBs,
			a.AWB_NO_RESERVED AS reserved,
			a.AWB_NO_AVAILABLE AS available,
			a.CR_USER_ID AS crUserId,
			TO_CHAR(a.CR_DATE,'DDMONYY') AS crDate
		FROM EXP_AWB_STK a
		WHERE a.carr_code = nvl(#carrier#, a.carr_code)
		and a.awb_type = nvl(#awbType#, a.awb_type)
		and a.AWB_NO_AVAILABLE >0
			<dynamic>
				<isNotEmpty prepend="AND" property="awbNoFrom">
						<![CDATA[ #awbNoFrom# <= a.AWB_NO_FROM ]]>
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="awbNoTo">
						<![CDATA[ #awbNoTo#  >= a.AWB_NO_TO ]]>
				</isNotEmpty>
			</dynamic>
			<isEmpty property="carrier">
                           <isNotEmpty property="loginCarrier">
                                    AND   (a.CARR_CODE = #loginCarrier# 
                                    OR a.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                                    WHERE GRP_CARR_CODE     = #loginCarrier#))                                          
                            </isNotEmpty>
              </isEmpty>  
		ORDER BY a.AWB_NO_FROM
	</select>
	<select id="checkAWBStockHasBooking" parameterClass="map" resultClass="java.lang.String">
	<![CDATA[
		SELECT to_char(COUNT(1))
		FROM   EXP_AWB_STK_DTL
		WHERE  TR_NO = #trNo#
		AND    (AWB_NO < #awbNoTo# OR AWB_NO > #awbNoFrom#)
		AND    STATUS <> 'OPEN'
	]]>
	</select>

	<select id="doesAWBStockRangeHaveReservedAWBs" parameterClass="map" resultClass="java.lang.String">
	<![CDATA[
		SELECT to_char(COUNT(1))
		FROM   EXP_AWB_STK_DTL
		WHERE  TR_NO = #trNo#
		AND    (AWB_NO < #awbNoTo# OR AWB_NO > #awbNoFrom#)
		AND    STATUS <> 'OPEN'
	]]>
	</select>

	<!--<select id="getAWBLockList" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="cargo.cms.imprt.bo.AWBLockBO">
		SELECT
			AWB_NO AS   awbNumber,
			TO_CHAR(AWB_DATE, 'DDMONYY') AS awbDate,
			FROM AWB_LOCK
		    WHERE LOCK_YN = 'Y'
		<isNotEmpty prepend="AND" property="awbNumber">
			awb_no = #awbNumber# 
		</isNotEmpty>
	</select>

		--><!--<select id="getAWBLockDetails" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="cargo.cms.imprt.bo.AWBLockBO">
		SELECT
			h.AWB_NO AS      	awbNumber,
			TO_CHAR(h.AWB_DATE,'DDMONYY') AS awbDate,
			h.AWB_TYPE AS    	awbType,
			h.CARR_CODE AS   	carrierCode,
			h.ORIG AS        	origin,
			h.DEST AS        	destination,
			h.PCS AS         	awbPieces,
			h.WT AS          	awbWeight,
			(select k.lock_rmk from awb_lock k where k.awb_no=h.awb_no and trunc(k.awb_date)=trunc(h.awb_date) and k.awb_type=h.awb_type and rownum=1)	 lockRemarks,
			(SELECT i.code_desc FROM cust_company i where i.code = h.AGENT_CODE) AS agentName, 
			(SELECT g.code_desc FROM cust_company g where g.code = h.shpr_code) AS shipperName,  
			g.locn_pcs AS storagePieces,
			g.locn_wt AS storageWeight
		FROM (
			SELECT 
				e.awb_no,
				e.awb_date,
				NVL(SUM(f.locn_pcs),0) locn_pcs,
				NVL(SUM(f.locn_wt),0) locn_wt
			FROM awb_inventory f,
				(SELECT a.awb_no,TRUNC(a.awb_date) awb_date
					FROM awb a, awb_lock b 
					WHERE a.AWB_NO=b.awb_no(+) 
						AND b.awb_no IS NOT NULL
						AND a.awb_closed_yn = 'N'
						AND a.AWB_NO = #awbNumber#) e
				WHERE e.awb_no = f.awb_no(+)
				GROUP BY e.awb_no,e.awb_date) g,
			awb h
		WHERE h.awb_no = g.awb_no
			AND TRUNC(h.awb_date) = g.awb_date
			AND rowNum = 1 
		select t1.awb_no awbNumber, to_char(t2.awb_date, 'DDMONYY') awbDate, t2.awb_type awbType, t2.carr_code carrierCode, 
		   t2.orig origin, t2.dest destination, t2.pcs awbPieces, t2.wt awbWeight, t2.shipper_name shipperName, t2.agent_name agentName,
		   t1.lock_rmk lockRemarks, t3.locn_pcs storagePieces, t3.locn_wt storageWeight
		   from   awb_lock t1, awb t2, (select awb_no, awb_date, sum(locn_pcs) locn_pcs, sum(locn_wt) locn_wt
                             from   awb_inventory
                             group by awb_no, awb_date) t3
		where  t1.awb_no = t2.awb_no(+)
		and    t2.awb_no = t3.awb_no (+)
		and    t2.awb_date = t3.awb_date (+)
		and    t1.awb_no = #awbNumber# and rownum='1'
		
	</select>

	--><!--<select id="awbLock_getAWBDetails" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="cargo.cms.imprt.bo.AWBLockBO">
		SELECT
			h.AWB_NO AS        			awbNumber,
			TO_CHAR(h.AWB_DATE,'DDMONYY') AS awbDate,
			h.AWB_TYPE AS      			awbType,
			h.CARR_CODE AS     			carrierCode,
			h.ORIG AS          			origin,
			h.DEST AS          			destination,
			h.PCS AS           			awbPieces,
			h.WT AS            			awbWeight,
			(SELECT i.code_desc FROM cust_company i where i.code = h.AGENT_CODE) AS agentName, 
			(SELECT i.code_desc FROM cust_company i where i.code = h.shpr_code) AS shipperName,  
			g.locn_pcs AS storagePieces,
			g.locn_wt AS storageWeight
		FROM (
			SELECT 
				e.awb_no,
				e.awb_date,
				NVL(SUM(f.locn_pcs),0) locn_pcs,
				NVL(SUM(f.locn_wt),0) locn_wt
			FROM awb_inventory f,
				(SELECT a.awb_no,TRUNC(a.awb_date) awb_date,nvl(b.lock_yn,'N') lock_yn
					FROM awb a, awb_lock b 
					WHERE a.AWB_NO=b.awb_no(+)
						AND a.awb_closed_yn = 'N') e
				WHERE e.awb_no = f.awb_no(+)
				AND   e.lock_yn='N'
				GROUP BY e.awb_no,e.awb_date) g,
			awb h
		WHERE h.awb_no = g.awb_no
			AND TRUNC(h.awb_date) = g.awb_date
			AND h.AWB_NO = #awbNumber#
			AND rowNum = 1
	</select>
	
	--><!--<insert id="lockAWB" parameterClass="cargo.cms.imprt.bo.AWBLockBO">
		INSERT INTO AWB_LOCK (
			AWB_NO,             
			AWB_DATE,
			CARR_CODE,
			LOCK_YN,
			LOCK_RMK,
			LOCK_USER,
			LOCK_DATE,
			MISS_USER,
			MISS_DATE,
			LM_USER_ID,
			LM_DATE)
		VALUES (
			#awbNumber#,
			#awbDate#,
			#carrierCode#,
			'Y',
			#lockRemarks#,
			#currentUserID#,
			sysdate,
			#currentUserID#,
			sysdate,
			#currentUserID#,
			sysdate)
	</insert>
	--><!--<update id="updateAWBLock" parameterClass="cargo.cms.imprt.bo.AWBLockBO">
		UPDATE awb_lock
		SET lock_rmk = #lockRemarks#,
			lm_user_id = #currentUserID#,
			lm_date = sysdate
		WHERE awb_no = #awbNumber#
	</update>
	--><!--<select id="checkAWBLockExist" parameterClass="map" resultClass="java.lang.String">
		SELECT to_char(COUNT(1))
		FROM awb_lock 
		WHERE awb_no = #awbNumber#
			AND LOCK_YN = 'Y'
	</select>

	--><!--<select id="checkIfAWBLockIsMissing" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="java.lang.String">
		SELECT to_char(COUNT(1)) 
		FROM awb_lock 
		WHERE awb_no = #awbNumber#
			AND miss_yn = 'Y'
	</select>

	--><!--<update id="updateAWBLockSetUnlock" parameterClass="cargo.cms.imprt.bo.AWBLockBO">
		UPDATE awb_lock 
		SET LOCK_YN = 'N',
			lm_user_id = #currentUserID#,
			lm_date = sysdate
		WHERE awb_no = #awbNumber#
	</update>

	--><!--<update id="updateAWBLockSetlock" parameterClass="cargo.cms.imprt.bo.AWBLockBO">
		UPDATE awb_lock 
		SET LOCK_YN = 'Y',
			lock_user = #currentUserID#,
			lock_date = sysdate,
			lm_user_id = #currentUserID#,
			lm_date = sysdate
		WHERE awb_no = #awbNumber#
	</update>

	--><!--<delete id="deleteAWBLock" parameterClass="cargo.cms.imprt.bo.AWBLockBO">
		DELETE FROM AWB_LOCK
		WHERE awb_no = #awbNumber#
	</delete>

	--><!--<select id="getAWBTypeAndDate" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="cargo.cms.imprt.bo.AWBLockBO">
		SELECT 
			b.awb_no AS awbNumber,
			b.awb_type AS awbType, 
			TO_CHAR(b.awb_date,'DDMONYY') AS awbDate
		FROM awb b   
		WHERE b.awb_closed_yn = 'N'    
		AND b.awb_no = #awbNumber#
	</select>

	--><select id="checkCarrierExist" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="java.lang.String">
		SELECT to_char(COUNT(1))
		FROM mast_carrier
		WHERE code = #carrierCode#
	</select>

	
	<select id="checkAWBMissingExist" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="java.lang.String">
		SELECT to_char(COUNT(1)) from awb_lock
		WHERE awb_no = #awbNumber#
			AND miss_yn = 'Y'
	</select>
	
	<select id="checkIfAWBMissingIsLocked" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="java.lang.String">
		SELECT to_char(COUNT(1)) 
		FROM awb_lock 
		WHERE awb_no = #awbNumber#
			AND lock_yn = 'Y'
	</select>
	
	<update id="updateAWBMissingSetNotMissing" parameterClass="cargo.cms.imprt.bo.AWBLockBO">
		UPDATE awb_lock 
		SET MISS_YN = 'N',
			lm_date = sysdate,
			lm_user_id = #currentUserID#
		WHERE awb_no = #awbNumber#
	</update>
	
	<delete id="deleteAWBMissing" parameterClass="cargo.cms.imprt.bo.AWBLockBO">
		DELETE FROM AWB_LOCK WHERE AWB_NO = #awbNumber#
	</delete>
	
	<update id="updateAWBMissingSetMissing" parameterClass="cargo.cms.imprt.bo.AWBLockBO">
		UPDATE awb_lock 
		SET MISS_YN = 'Y',
			lm_date = sysdate,
			lm_user_id = #currentUserID#,
			miss_user = #currentUserID#,
			miss_date = sysdate
		WHERE awb_no = #awbNumber# 
	</update>
	
	<insert id="insertAWBMissing" parameterClass="cargo.cms.imprt.bo.AWBLockBO">
		INSERT INTO AWB_LOCK (
			AWB_NO,             
			AWB_DATE,
			CARR_CODE,
			MISS_YN,
			MISS_RMK,
			LOCK_USER,
			LOCK_DATE,
			MISS_USER,
			MISS_DATE,
			LM_USER_ID,
			LM_DATE)
		VALUES (
			#awbNumber#,
			Decode((select awb_type from awb where awb_no=#awbNumber#),'E',pkg_common.get_awb_date(#awbNumber#, 'E'),pkg_common.get_awb_date(#awbNumber#, 'I')),
			#carrierCode#,
			'Y',
			#missingRemarks#,
			#currentUserID#,
			sysdate,
			#currentUserID#,
			sysdate,
			#currentUserID#,
			sysdate)
	</insert>
	
	<update id="updateAWBMissing" parameterClass="cargo.cms.imprt.bo.AWBLockBO">
		UPDATE awb_lock
		SET miss_rmk = #missingRemarks#,
			lm_user_id = #currentUserID#,
			lm_date = sysdate
		WHERE awb_no = #awbNumber# AND TO_CHAR(LM_DATE,'DDMONYY HH24:MI:SS') = #lastModifiedDate#
	</update>
	
	<select id="getAWBMissingList" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="cargo.cms.imprt.bo.AWBLockBO">
		SELECT
			AWB_NO AS    awbNumber,
			LOCK_USER AS lockedBy,
			TO_CHAR(LOCK_DATE, 'DDMONYY') AS lockedDate,
			MISS_RMK AS  missingRemarks,
			TO_CHAR(AWB_DATE, 'DDMONYY') AS awbDate,
			TO_CHAR(LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModifiedDate
		FROM AWB_LOCK
		WHERE MISS_YN = 'Y'
		<isNotEmpty prepend="AND" property="carrierCode">
			carr_code = #carrierCode#
		</isNotEmpty>
		<isNotEmpty property="loginCarrier">
				   AND ( carr_code = #loginCarrier#   OR  carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP  WHERE GRP_CARR_CODE = #loginCarrier#))             
        </isNotEmpty>
	</select>

	<select id="checkAWBLockMissingExist" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="java.lang.String">
		SELECT to_char(COUNT(1)) from awb_lock
		WHERE awb_no = #awbNumber#
	</select>
	
	<select id="checkAWBStatusInAWB" parameterClass="cargo.cms.imprt.bo.AWBLockBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) from AWB WHERE awb_no = #awbNumber#
	</select>
	<!-- ##################### Update Release Time By Flight : Start (SATHYA) ########################################-->	

	<select id="sqlupdrelfltcheck"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.UpdRelTimeByFlightBO">
		SELECT FLT_KEY as fltNo, PKG_COMMON.GET_FLT_ETA(FLT_KEY,SCH_DATE,'D','DD')  as etd,
		TO_CHAR(SCH_DATE, 'DDMONYY') as depDate	FROM FLT_OPR A  WHERE A.FLT_KEY=#fltNo# AND A.SCH_DATE = TO_DATE(#depDate#, 'DDMONYY')
		AND A.FLT_TYPE = 'D'
	</select>

<!-- Start Reprint RCL -->
	<select id="RePrintRCLList" parameterClass="cargo.cms.export.bo.RePrintRCLBO" resultClass="cargo.cms.export.bo.RePrintRCLBO">
	SELECT DISTINCT
   		A.AWB_NO AS awbNo,
		DECODE(A.PPK_TYPE, 'M', '',SUBSTR(A.AWB_NO,1,3 )) AS awbNoPFX,
    	DECODE(A.PPK_TYPE, 'M', '',SUBSTR(A.AWB_NO,4 )) AS awbNoSFX,		
		DECODE(A.PPK_TYPE, 'B', 'Bulk', 'P', 'BUP', 'M', 'MIX') AS pkgType,
		A.RCL_NO AS rclNo,
		A.PRE_RCL_NO AS erclNo, 	
		A.AWB_DEST AS dest,
		A.STATUS AS status, 
		A.RCL_PCS AS rclpc, 
		TRIM(TO_CHAR(A.RCL_WT,'99999990.0')) AS rclWT,
    	DECODE(A.PPK_TYPE, 'M', A.ULD_KEY,'') AS uldKey,		    
		<!--B.CONTR_CODE AS counterCode,-->
		TO_CHAR(A.RCL_DATE, 'DDMONYY HH24:MI') AS rclIsuDt,
		A.REJECT_IND as rejectInd,
		A.RCL_REJECT_REASON as rejectReason
	FROM
		EXP_RCL_HD A LEFT 
		JOIN EXP_RCL_DTL B ON A.RCL_NO =B.RCL_NO 
		WHERE A.CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND UPPER(SEC_USER.CODE) = UPPER(#userID#))
		AND TO_CHAR(A.RCL_DATE, 'DDMONYY') BETWEEN TO_DATE(#isuDtFm#||'0000','DDMONYYHH24MI') AND TO_DATE(#isuDtTo#||'2359','DDMONYYHH24MI')
		<isNotEmpty property="awbNo">
			AND A.AWB_NO = #awbNo#
		</isNotEmpty> 
		<isNotEmpty property="rclNo">
			AND A.RCL_NO = #rclNo#
		</isNotEmpty>
		<isNotEmpty property="erclNo">
			AND A.PRE_RCL_NO = #erclNo# 
		</isNotEmpty>
		<isNotEmpty property="uldNo">
			AND A.ULD_KEY = #uldNo# 
		</isNotEmpty>
	</select>
	<select id="validateAwbNo" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
		SELECT COUNT(CODE) FROM EXP_RCL_HD WHERE AWB_NO=#awbNo#
	</select>
	<select id="validateRclNo" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
		SELECT COUNT(RCL_NO) FROM EXP_RCL_HD WHERE RCL_NO=#rclNo#
	</select>
	<select id="validateErclNo" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
		SELECT COUNT(PRE_RCL_NO) FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#erclNo#
	</select>
	<select id="validateErclNoBulk" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
		SELECT COUNT(PRE_RCL_NO) FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#erclNo# and PPK_TYPE='B'
	</select>
	<select id="validateUldNo" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
		SELECT COUNT(CODE) FROM MAST_ULD_GROUP WHERE ULD_GROUP=#uldNo#
	</select>
	<select id="validateDateDiff" parameterClass="cargo.cms.export.bo.RePrintRCLBO"  resultClass="java.lang.Integer" >
		SELECT TO_CHAR(TO_DATE(#isuDtTo#,'DDMONYY') - TO_DATE(#isuDtFm#,'DDMONYY')) DAYDIFF FROM DUAL	
	</select>
	<!-- <select id="validRclForPrint" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
	    select count(0) from EXP_RCL_HD where RCL_NO = #rclNo# and status = 'C'
	</select> -->
	<!-- <select	<select id="rclAgentName" parameterClass="cargo.cms.export.bo.RePrintRCLBO" resultClass="java.lang.String">>	
			SELECT CUST_COMPANY.code_desc as qcp_contactPerson,CUST_COMPANY.code_desc as qcp_companyName FROM CUST_COMPANY, SEC_USER 
       where SEC_USER.CUST_NO=CUST_COMPANY.CODE and SEC_USER.CODE=#createdUserId#
	</select> -->	
	
<!-- Ends Reprint RCL -->
	<select id="sqlupdrelsearchhdr"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.UpdRelTimeByFlightBO">
 SELECT T1.AWB_NO awbNo, 
 CONCAT(CONCAT(SUBSTR(T1.AWB_NO,0,3),'-'),
 SUBSTR(T1.AWB_NO,4)) awbNoDisplay,
 T1.DOC_LINE_NO docLineNo, 
 TO_CHAR(T1.AWB_DATE, 'DDMONYY') awbDate,
 T1.PCS pc,
 T1.WT,
 DECODE(to_char(rclhd.act_acc_date,'DDMONYY'),'',DECODE(HD.PPK_TYPE,'M',to_char(hd.rcl_date,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'P',to_char(DTL.CR_DATE,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'B',to_char(hd.rcl_date,'DDMONYY HH24:MI'),''))),to_char(rclhd.act_acc_date,'DDMONYY') || ' ' || substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),0,2) || ':' ||DECODE(substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2),'','00',substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2))) AS startDateDisplay,
 DECODE(to_char(rclhd.act_acc_date,'DDMONYY'),'',DECODE(HD.PPK_TYPE,'M',to_char(hd.rcl_date,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'P',to_char(DTL.CR_DATE,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'B',to_char(hd.rcl_date,'DDMONYY HH24:MI'),''))),to_char(rclhd.act_acc_date,'DDMONYY') || ' ' || substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),0,2) || ':' ||DECODE(substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2),'','00',substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2))) startDate,
 T1.RCL_NO rclNo, 
 TO_CHAR(T1.END_DATE, 'DDMONYY HH24:MI') endDate, 
 TO_CHAR(T1.REL_DATE, 'DDMONYY HH24:MI') newRelDate,
 DECODE(HD.PPK_TYPE,'M',to_char(hd.rcl_date,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'P',to_char(DTL.CR_DATE,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'B',to_char(hd.rcl_date,'DDMONYY HH24:MI'),''))) as rclDate,
 to_char(rclhd.act_acc_date,'DDMONYY') as actualdate,
 TO_CHAR(rclhd.act_acc_time,'0000') as actualtime,
 (select TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_SEC_CHK_JO WHERE AWB_NO=T1.AWB_NO AND AWB_DATE=T1.AWB_DATE AND FLT_KEY=#fltNo# AND FLT_DATE=#depDate# AND STATUS='Completed' AND JO_TYPE='SC') AS scHoldingDate,
 hd.ppk_type as rclType,
 DECODE(HD.PPK_TYPE,'M',HD.ULD_KEY,DECODE(HD.PPK_TYPE,'P',DTL.ULD_KEY,DECODE(HD.PPK_TYPE,'B','',''))) AS uldNo
 FROM EXP_CAR_SEC T1, 
    EXP_PMANIFEST_AWB T2,
    EXP_PRE_RCL_HD RCLHD,
    EXP_RCL_HD HD,
    EXP_RCL_DTL DTL
		WHERE T2.AWB_NO = T1.AWB_NO 
		AND T2.AWB_DATE = T1.AWB_DATE 
    and hd.rcl_no(+) = t1.rcl_no
    and RCLHD.PRE_RCL_NO(+) = hd.pre_rcl_no
    AND DTL.RCL_NO(+) = HD.RCL_NO
    AND T2.FLT_KEY = #fltNo#
		and T2.FLT_DATE = #depDate# order by t1.awb_no
	</select>
	<select id="UPD_RELTIME_AWB_LIST"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.UpdRelTimeByFlightBO">
     <![CDATA[
      SELECT * FROM ( SELECT 
      'Q1' AS CONDITION,
      A.AWB_NO awbNo,
      CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) awbNoDisplay,
      TO_CHAR(A.AWB_DATE, 'DDMONYY') awbDate,
      B.RCL_NO rclNo,
      DECODE(C.act_acc_date,'',to_char(B.RCL_DATE,'DDMONYY HH24:MI'),(to_char(C.act_acc_date,'DDMONYY')|| ' ' || SUBSTR(TRIM(TO_CHAR(C.act_acc_time,'0000')),1,2) || ':' ||SUBSTR(TRIM(TO_CHAR(C.act_acc_time,'0000')),3,2))) AS startDate,
      (select TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_SEC_CHK_JO WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=#fltNo# AND FLT_DATE=#depDate# AND STATUS='Completed' AND JO_TYPE='SC') AS scHoldingDate,
      DECODE(C.act_acc_date,'','',(to_char(C.act_acc_date,'DDMONYY')|| ' ' || substr(C.act_acc_time,0,2) || ':' ||substr(C.act_acc_time,3,2))) accptDate,
      to_char(C.act_acc_date,'DDMONYY') as actualdate,
      TRIM(TO_CHAR(C.act_acc_time,'0000')) as actualtime,
      to_char(B.RCL_DATE,'DDMONYY HH24:MI') rclDate,
      B.ppk_type as rclType,
      a.pman_pcs as pc,
      a.pman_wt as wt,
      (SELECT DECODE((select lpad(hldg_period,4,0) from exp_car where awb_no=A.AWB_NO and awb_date=A.AWB_DATE),'','0000',
      (select hldg_period from exp_car where awb_no=A.AWB_NO and awb_date=A.AWB_DATE)) FROM DUAL) AS carHolding
  FROM
      EXP_PMANIFEST_AWB A,
      EXP_RCL_HD B,
      EXP_PRE_RCL_HD C
 WHERE
      A.AWB_NO=B.AWB_NO AND 
      A.AWB_DATE=B.AWB_DATE AND
      B.CR_DATE =(select max(cr_date) from exp_rcl_hd where awb_no = A.AWB_NO and status <> 'V')
      and C.PRE_RCL_NO(+) = B.PRE_RCL_NO AND      
      A.FLT_KEY = #fltNo# AND 
      A.FLT_DATE = #depDate#
      
      UNION ALL
      
     SELECT 
      'Q2' AS CONDITION,
      A.AWB_NO awbNo,
      CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) awbNoDisplay,
      TO_CHAR(A.AWB_DATE, 'DDMONYY') awbDate,
      B.RCL_NO rclNo,
      DECODE(C.act_acc_date,'',to_char(B.RCL_DATE,'DDMONYY HH24:MI'),(to_char(C.act_acc_date,'DDMONYY')|| ' ' || SUBSTR(TRIM(TO_CHAR(C.act_acc_time,'0000')),1,2) || ':' ||SUBSTR(TRIM(TO_CHAR(C.act_acc_time,'0000')),3,2))) AS startDate,
      (select TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_SEC_CHK_JO WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=#fltNo# AND FLT_DATE=#depDate# AND STATUS='Completed' AND JO_TYPE='SC') AS scHoldingDate,
      DECODE(C.act_acc_date,'','',(to_char(C.act_acc_date,'DDMONYY')|| ' ' || substr(C.act_acc_time,0,2) || ':' ||substr(C.act_acc_time,3,2))) accptDate,
      to_char(C.act_acc_date,'DDMONYY') as actualdate,
      TRIM(TO_CHAR(C.act_acc_time,'0000')) as actualtime,
      to_char(B.RCL_DATE,'DDMONYY HH24:MI') rclDate,
      B.ppk_type as rclType,
      a.pman_pcs as pc,
      a.pman_wt as wt,
      (SELECT DECODE((select lpad(hldg_period,4,0) from exp_car where awb_no=A.AWB_NO and awb_date=A.AWB_DATE),'','0000',
      (select hldg_period from exp_car where awb_no=A.AWB_NO and awb_date=A.AWB_DATE)) FROM DUAL) AS carHolding
  FROM
      EXP_PMANIFEST_AWB A,
      EXP_RCL_BRKDN D,
      EXP_RCL_HD B,
      EXP_PRE_RCL_HD C
 WHERE
      A.AWB_NO = D.AWB_NO AND 
      A.AWB_DATE = D.AWB_DATE AND
      D.RCL_NO=B.RCL_NO AND
      B.RCL_DATE =(select max(cr_date) from exp_rcl_hd where RCL_NO=B.RCL_NO AND status <> 'V')AND
       C.PRE_RCL_NO(+) = B.PRE_RCL_NO AND 
      A.FLT_KEY = #fltNo# AND 
      A.FLT_DATE = #depDate#)     
      ]]>
</select>
	
<!--<select id="CHECK_UPD_FLIGHT_CARGO_ACCEPTENCE"  parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO"  resultClass="java.lang.Integer">
  SELECT 
       COUNT(1)
   FROM
       EXP_CAR_SEC T1, 
       EXP_PMANIFEST_AWB T2,
       EXP_PRE_RCL_HD RCLHD,
       EXP_RCL_HD HD,
       EXP_RCL_DTL DTL
  WHERE
        T2.AWB_NO = T1.AWB_NO 
		AND T2.AWB_DATE = T1.AWB_DATE 
        AND hd.rcl_no = t1.rcl_no
        AND RCLHD.PRE_RCL_NO(+) = hd.pre_rcl_no
        AND HD.RCL_NO IS NOT NULL
        AND DTL.RCL_NO(+) = HD.RCL_NO
        AND T2.FLT_KEY = #fltNo#
		AND T2.FLT_DATE = #depDate# 
		AND T1.AWB_NO = #awbNo#  
		AND rclhd.act_acc_date IS NOT NULL 
		AND rclhd.act_acc_time IS NOT NULL
</select>

--><!--<select id="FETCH_HOLDING_LIST_ACCEPTENCE_VALUES"  parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO"  resultClass="cargo.cms.export.bo.UpdRelTimeByFlightBO">
  SELECT T1.AWB_NO awbNo, 
 CONCAT(CONCAT(SUBSTR(T1.AWB_NO,0,3),'-'),
 SUBSTR(T1.AWB_NO,4)) awbNoDisplay,
 T1.DOC_LINE_NO docLineNo, 
 TO_CHAR(T1.AWB_DATE, 'DDMONYY') awbDate,
 T1.PCS pc,
 T1.WT,
 DECODE(to_char(rclhd.act_acc_date,'DDMONYY'),'',DECODE(HD.PPK_TYPE,'M',to_char(hd.rcl_date,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'P',to_char(DTL.CR_DATE,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'B',to_char(hd.rcl_date,'DDMONYY HH24:MI'),''))),to_char(rclhd.act_acc_date,'DDMONYY') || ' ' || substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),0,2) || ':' ||DECODE(substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2),'','00',substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2))) AS startDateDisplay,
 DECODE(to_char(rclhd.act_acc_date,'DDMONYY'),'',DECODE(HD.PPK_TYPE,'M',to_char(hd.rcl_date,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'P',to_char(DTL.CR_DATE,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'B',to_char(hd.rcl_date,'DDMONYY HH24:MI'),''))),to_char(rclhd.act_acc_date,'DDMONYY') || ' ' || substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),0,2) || ':' ||DECODE(substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2),'','00',substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2))) startDate,
 T1.RCL_NO rclNo, 
 TO_CHAR(T1.END_DATE, 'DDMONYY HH24:MI') endDate, 
 TO_CHAR(T1.REL_DATE, 'DDMONYY HH24:MI') newRelDate,
 DECODE(HD.PPK_TYPE,'M',to_char(hd.rcl_date,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'P',to_char(DTL.CR_DATE,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'B',to_char(hd.rcl_date,'DDMONYY HH24:MI'),''))) as rclDate,
 to_char(rclhd.act_acc_date,'DDMONYY') as actualdate,
 TO_CHAR(rclhd.act_acc_time,'0000') as actualtime,
 (select TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_SEC_CHK_JO WHERE AWB_NO=T1.AWB_NO AND AWB_DATE=T1.AWB_DATE AND FLT_KEY=#fltNo# AND FLT_DATE=#depDate# AND STATUS='Completed' AND JO_TYPE='SC') AS scHoldingDate,
 hd.ppk_type as rclType,
 DECODE(HD.PPK_TYPE,'M',HD.ULD_KEY,DECODE(HD.PPK_TYPE,'P',DTL.ULD_KEY,DECODE(HD.PPK_TYPE,'B','',''))) AS uldNo
 FROM EXP_CAR_SEC T1, 
    EXP_PMANIFEST_AWB T2,
    EXP_PRE_RCL_HD RCLHD,
    EXP_RCL_HD HD,
    EXP_RCL_DTL DTL
		WHERE T2.AWB_NO = T1.AWB_NO 
		AND T2.AWB_DATE = T1.AWB_DATE 
    and hd.rcl_no = t1.rcl_no
    and RCLHD.PRE_RCL_NO(+) = hd.pre_rcl_no
    AND DTL.RCL_NO(+) = HD.RCL_NO
    AND HD.RCL_NO IS NOT NULL
    AND T2.FLT_KEY = #fltNo#
		and T2.FLT_DATE = #depDate#
    AND T1.AWB_NO = #awbNo#
    and to_char(rclhd.act_acc_date,'DDMONYY') = (SELECT MAX(to_char(rclhd.act_acc_date,'DDMONYY')) as actualdate
                              	 FROM EXP_CAR_SEC T1, 
                                      EXP_PMANIFEST_AWB T2,
                                      EXP_PRE_RCL_HD RCLHD,
                                      EXP_RCL_HD HD,
                                      EXP_RCL_DTL DTL
                                      WHERE T2.AWB_NO = T1.AWB_NO 
                                      AND T2.AWB_DATE = T1.AWB_DATE 
                                      and hd.rcl_no = t1.rcl_no
                                      and RCLHD.PRE_RCL_NO(+) = hd.pre_rcl_no
                                      AND DTL.RCL_NO(+) = HD.RCL_NO
                                      AND HD.RCL_NO IS NOT NULL
                                      AND T2.FLT_KEY =  #fltNo#
                                      and T2.FLT_DATE = #depDate#
                                      and T1.AWB_NO = #awbNo#)
        and rclhd.act_acc_time = (SELECT max(rclhd.act_acc_time) as actualtime
                                   FROM EXP_CAR_SEC T1, 
                                      EXP_PMANIFEST_AWB T2,
                                      EXP_PRE_RCL_HD RCLHD,
                                      EXP_RCL_HD HD,
                                      EXP_RCL_DTL DTL
                                      WHERE T2.AWB_NO = T1.AWB_NO 
                                      AND T2.AWB_DATE = T1.AWB_DATE 
                                      and hd.rcl_no = t1.rcl_no
                                      and RCLHD.PRE_RCL_NO(+) = hd.pre_rcl_no
                                      AND HD.RCL_NO IS NOT NULL
                                      AND DTL.RCL_NO(+) = HD.RCL_NO
                                      AND T2.FLT_KEY =  #fltNo#
                                      and T2.FLT_DATE = #depDate#  and T1.AWB_NO = #awbNo#) and rownum=1
</select>

--><!--<select id="CHECK_REL_DATE_DIFF"  parameterClass="java.util.HashMap"  resultClass="java.lang.String">
 <![CDATA[
		select
       (case when (SELECT to_number(TO_DATE(#newRelDate#,'DDMONYY HH24:MI') - TO_DATE(#newRelDate1#,'DDMONYY HH24:MI')) as DAYDIFF FROM DUAL) < 0 
       then 'Y'
       else 'N'
       end)
       from 
       dual
       ]]>
</select>


--><!--<select id="FETCH_HOLDING_LIST_RCL_VALUES"  parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO"  resultClass="cargo.cms.export.bo.UpdRelTimeByFlightBO">
 select s1.awbNo AS awbNo,
         s1.rclNo AS rclNo,
         s1.awbNoDisplay AS awbNoDisplay,
         s1.endDate AS endDate,
         S1.docLineNo AS docLineNo,
         S1.awbDate AS awbDate,
         S1.pc AS pc,
         S1.wt AS wt,
         S1.startDateDisplay AS startDateDisplay,
         S1.startDate AS startDate,
         S1.newRelDate AS newRelDate,
         S1.rclDate AS rclDate,
         S1.actualdate AS actualdate,
         S1.actualtime AS actualtime,
         S1.rclType AS rclType,
         S1.uldNo AS uldNo,
         S1.scHoldingDate AS scHoldingDate
from
(SELECT T1.AWB_NO awbNo, 
 CONCAT(CONCAT(SUBSTR(T1.AWB_NO,0,3),'-'),
 SUBSTR(T1.AWB_NO,4)) awbNoDisplay,
 T1.DOC_LINE_NO docLineNo, 
 TO_CHAR(T1.AWB_DATE, 'DDMONYY') awbDate,
 T1.PCS pc,
 T1.WT,
 DECODE(to_char(rclhd.act_acc_date,'DDMONYY'),'',DECODE(HD.PPK_TYPE,'M',to_char(hd.rcl_date,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'P',to_char(DTL.CR_DATE,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'B',to_char(hd.rcl_date,'DDMONYY HH24:MI'),''))),to_char(rclhd.act_acc_date,'DDMONYY') || ' ' || substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),0,2) || ':' ||DECODE(substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2),'','00',substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2))) AS startDateDisplay,
 DECODE(to_char(rclhd.act_acc_date,'DDMONYY'),'',DECODE(HD.PPK_TYPE,'M',to_char(hd.rcl_date,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'P',to_char(DTL.CR_DATE,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'B',to_char(hd.rcl_date,'DDMONYY HH24:MI'),''))),to_char(rclhd.act_acc_date,'DDMONYY') || ' ' || substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),0,2) || ':' ||DECODE(substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2),'','00',substr(TRIM(TO_CHAR(rclhd.act_acc_time,'0000')),3,2))) startDate,
 T1.RCL_NO rclNo, 
 TO_CHAR(T1.END_DATE, 'DDMONYY HH24:MI') endDate, 
 TO_CHAR(T1.REL_DATE, 'DDMONYY HH24:MI') newRelDate,
 DECODE(HD.PPK_TYPE,'M',to_char(hd.rcl_date,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'P',to_char(DTL.CR_DATE,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'B',to_char(hd.rcl_date,'DDMONYY HH24:MI'),''))) as rclDate,
 to_char(rclhd.act_acc_date,'DDMONYY') as actualdate,
 TO_CHAR(rclhd.act_acc_time,'0000') as actualtime,
 (select TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_SEC_CHK_JO WHERE AWB_NO=T1.AWB_NO AND AWB_DATE=T1.AWB_DATE AND FLT_KEY=#fltNo# AND FLT_DATE=#depDate# AND STATUS='Completed' AND JO_TYPE='SC') AS scHoldingDate,
 hd.ppk_type as rclType,
 DECODE(HD.PPK_TYPE,'M',HD.ULD_KEY,DECODE(HD.PPK_TYPE,'P',DTL.ULD_KEY,DECODE(HD.PPK_TYPE,'B','',''))) AS uldNo
 FROM EXP_CAR_SEC T1, 
    EXP_PMANIFEST_AWB T2,
    EXP_PRE_RCL_HD RCLHD,
    EXP_RCL_HD HD,
    EXP_RCL_DTL DTL
		WHERE T2.AWB_NO = T1.AWB_NO 
		AND T2.AWB_DATE = T1.AWB_DATE 
    and hd.rcl_no = t1.rcl_no
    and RCLHD.PRE_RCL_NO(+) = hd.pre_rcl_no
    AND HD.RCL_NO IS NOT NULL
    AND DTL.RCL_NO(+) = HD.RCL_NO
    AND T2.FLT_KEY = #fltNo#
		and T2.FLT_DATE = #depDate# order by t1.awb_no) s1
where s1.awbNo = #awbNo#
       and s1.rclDate = (select max(rclDate) 
                                from
                                   (select T1.AWB_NO awbNo,
 DECODE(HD.PPK_TYPE,'M',to_char(hd.rcl_date,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'P',to_char(DTL.CR_DATE,'DDMONYY HH24:MI'),DECODE(HD.PPK_TYPE,'B',to_char(hd.rcl_date,'DDMONYY HH24:MI'),''))) as rclDate
                              	 FROM EXP_CAR_SEC T1, 
                                      EXP_PMANIFEST_AWB T2,
                                      EXP_PRE_RCL_HD RCLHD,
                                      EXP_RCL_HD HD,
                                      EXP_RCL_DTL DTL
                                      WHERE T2.AWB_NO = T1.AWB_NO 
                                      AND T2.AWB_DATE = T1.AWB_DATE 
                                      and hd.rcl_no = t1.rcl_no
                                      and RCLHD.PRE_RCL_NO(+) = hd.pre_rcl_no
                                      AND DTL.RCL_NO(+) = HD.RCL_NO
                                      AND HD.RCL_NO IS NOT NULL
                                      AND T2.FLT_KEY = #fltNo#
                                      and T2.FLT_DATE = #depDate# order by t1.awb_no) where awbNo = #awbNo# )  and rownum=1
</select>
--><select id="FETCH_RCL_LIST_IN_EXP_SECQ1"  parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO"  resultClass="cargo.cms.export.bo.UpdRelTimeByFlightBO">
 <![CDATA[
 SELECT 
      'Q1' AS CONDITION,
      A.AWB_NO awbNo,
      CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) awbNoDisplay,
      TO_CHAR(A.AWB_DATE, 'DDMONYY') awbDate,
      STRAGG(STRINGDELIM(D.ULD_KEY, ',')) uldNo,
      B.RCL_NO rclNo,
      DECODE(C.act_acc_date,'',to_char(B.RCL_DATE,'DDMONYY HH24:MI'),(to_char(C.act_acc_date,'DDMONYY')|| ' ' || substr(TRIM(TO_CHAR(C.act_acc_time,'0000')),0,2) || ':' ||substr(TRIM(TO_CHAR(C.act_acc_time,'0000')),3,2))) AS startDate,
      '' AS scHoldingDate,
      DECODE(C.act_acc_date,'','',(to_char(C.act_acc_date,'DDMONYY')|| ' ' || substr(C.act_acc_time,0,2) || ':' ||substr(C.act_acc_time,3,2))) accptDate,
      to_char(C.act_acc_date,'DDMONYY') as actualdate,
      TO_CHAR(C.act_acc_time,'0000') as actualtime,
      to_char(B.RCL_DATE,'DDMONYY HH24:MI') rclDate,
      B.ppk_type as rclType,
     (SELECT DECODE((select lpad(hldg_period,4,0) from exp_car where awb_no=A.AWB_NO and awb_date=A.AWB_DATE),'','0000',
      (select hldg_period from exp_car where awb_no=A.AWB_NO and awb_date=A.AWB_DATE)) FROM DUAL) AS carHolding
  FROM
      EXP_PMANIFEST_AWB A,
      EXP_RCL_HD B,
      EXP_PRE_RCL_HD C,
      EXP_RCL_DTL D
 WHERE
      A.AWB_NO=B.AWB_NO AND 
      A.AWB_DATE=B.AWB_DATE AND
      B.status <> 'V' and
      C.PRE_RCL_NO(+) = B.PRE_RCL_NO AND
      D.RCL_NO(+)=B.RCL_NO AND      
      A.FLT_KEY = #fltNo# AND 
      A.FLT_DATE = #depDate# and 
      a.awb_no=#awbNo# and
      a.awb_date=#awbDate# 
       ]]>group by A.AWB_NO,A.AWB_DATE,B.RCL_NO,C.act_acc_date,C.act_acc_time,B.RCL_DATE,B.ppk_type
    </select>
    <select id="FETCH_RCL_LIST_IN_EXP_SECQ2"  parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO"  resultClass="cargo.cms.export.bo.UpdRelTimeByFlightBO">
 <![CDATA[
  SELECT 
      'Q2' AS CONDITION,
      A.AWB_NO awbNo,
      CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) awbNoDisplay,
      TO_CHAR(A.AWB_DATE, 'DDMONYY') awbDate,
      STRAGG(STRINGDELIM(E.ULD_KEY, ',')) uldNo,
      B.RCL_NO rclNo,
      DECODE(C.act_acc_date,'',to_char(B.RCL_DATE,'DDMONYY HH24:MI'),(to_char(C.act_acc_date,'DDMONYY')|| ' ' || substr(TRIM(TO_CHAR(C.act_acc_time,'0000')),0,2) || ':' ||substr(TRIM(TO_CHAR(C.act_acc_time,'0000')),3,2))) AS startDate,
      '' AS scHoldingDate,
      DECODE(C.act_acc_date,'','',(to_char(C.act_acc_date,'DDMONYY')|| ' ' || substr(TRIM(TO_CHAR(C.act_acc_time,'0000')),0,2) || ':' ||substr(TRIM(TO_CHAR(C.act_acc_time,'0000')),3,2))) accptDate,
      to_char(C.act_acc_date,'DDMONYY') as actualdate,
      TO_CHAR(C.act_acc_time,'0000') as actualtime,
      to_char(B.RCL_DATE,'DDMONYY HH24:MI') rclDate,
      B.ppk_type as rclType,
      (SELECT DECODE((select lpad(hldg_period,4,0) from exp_car where awb_no=A.AWB_NO and awb_date=A.AWB_DATE),'','0000',
      (select hldg_period from exp_car where awb_no=A.AWB_NO and awb_date=A.AWB_DATE)) FROM DUAL) AS carHolding
  FROM
      EXP_PMANIFEST_AWB A,
      EXP_RCL_BRKDN D,
      EXP_RCL_HD B,
     EXP_PRE_RCL_HD C,
      EXP_RCL_DTL E
 WHERE
      A.AWB_NO = D.AWB_NO AND 
      A.AWB_DATE = D.AWB_DATE AND
      D.RCL_NO=B.RCL_NO AND
      B.status <> 'V' AND
      C.PRE_RCL_NO(+) = B.PRE_RCL_NO AND
       E.RCL_NO(+)=B.RCL_NO AND 
      A.FLT_KEY = #fltNo# AND 
      A.FLT_DATE = #depDate# and 
      a.awb_no=#awbNo# and
      a.awb_date=#awbDate# 
       ]]>GROUP BY A.AWB_NO,A.AWB_DATE,B.RCL_NO,C.act_acc_date,C.act_acc_time,B.RCL_DATE,B.ppk_type
    </select>
	<select id = "sqlseloldholdprd" parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO"  resultClass="cargo.cms.export.bo.UpdRelTimeByFlightBO">
	SELECT LPAD(MIN_HOLD_HR,4,0) as oldHoldPrd FROM MAST_CARRIER WHERE CODE = #fltPfx#
	</select>
    <select id = "SEL_OLD_HOLD_PRD_IN_FLT_OPR_EVENTS" parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO"  resultClass="java.lang.String">
	select substr(lpad(HOLDING_TIME,5,0),1,length(lpad(HOLDING_TIME,5,0))-2)||':'||substr(lpad(HOLDING_TIME,5,0),-2) from flt_opr_events where FLT_KEY = #fltNo# AND SCH_DATE = #depDate# AND FLT_TYPE ='D'
	</select>
	<select id = "CHECK_FLIGHT_IS_FINALIZED" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
	select COUNT(1) from flt_opr_events where FINAL_MANF_DATE IS NOT NULL AND FINAL_MANF_USER_ID IS NOT NULL AND FLT_KEY = #fltNo# AND SCH_DATE = #depDate# 
	</select>
	<select id = "getCarCountForUpdRelTimeByFlt" parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO"  resultClass="java.lang.Integer">
	select COUNT(1) from awb where awb_no=#awbNo# and AWB_DATE=#awbDate# AND car_yn='Y'
	</select>
	<select id = "CHECK_FLIGHT_CARR_IS_VALID" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
	select COUNT(1) from mast_carrier where code=#fltPfx# 
	</select>
	
	<select id = "CHECK_POPUP_VALUES" parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO"  resultClass="java.lang.Integer">
    select count(BLDUP_COMPL_YN) from awb where awb_no=#awbNo# and awb_date=#awbDate# and BLDUP_COMPL_YN='Y'
	</select>
	
	<select id = "CHECK_FLIGHT_IS_DEPARTED" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EXP_MANIFEST_HD WHERE FLT_KEY = #fltNo# AND FLT_DATE = #depDate#
	</select>
	
	<update id ="UPD_RELTIME_UPDATE_AWB_DTLS" parameterClass="java.util.HashMap">
	UPDATE EXP_CAR_SEC SET AWB_DATE = to_date(#newAwbDate#, 'DDMONYY HH24:MI')	WHERE AWB_NO = #awbNo# and AWB_DATE=#oldAwbDate#
	</update>

    <update id ="UPD_HOLDING_UPDATE_AWB_DTLS" parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO">
	update flt_opr_events set holding_time = #newHoldPrdHrs#||LPAD(#newHoldPrdMins#,2,0) where flt_key = #fltNo# and SCH_DATE = #depDate# and flt_type = 'D'
	</update>
	<update id ="sqlupdateupdreltimevalues" parameterClass="cargo.cms.export.bo.UpdRelTimeByFlightBO">
	
	UPDATE EXP_CAR_SEC SET END_DATE = to_date(#endDate#, 'DDMONYY HH24:MI'), REL_DATE = to_date(#newRelDate#, 'DDMONYY HH24:MI') 
	WHERE AWB_NO = #awbNo# AND AWB_DATE = #awbDate# AND DOC_LINE_NO = #docLineNo#
	
	</update>

<!-- ##################### Update Release Time By Flight  : End (SATHYA) ########################################-->
	<!-- Enquire eRCL Pre Decl (External)::start -->
	<select id="export_docrcvd" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.String">
		select STRAGG(STRINGDELIM(decode(doc.awb_no,null,'N','Y'),'') ) as docRcv from exp_pre_rcl_hd hd 
    	join EXP_PRE_RCL_BRKDN BRK on hd.pre_rcl_no=brk.pre_rcl_no
		left outer JOIN (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC  ON BRK.AWB_NO=DOC.AWB_NO AND BRK.AWB_DATE=DOC.AWB_DATE
		where hd.pre_rcl_no=#preRclNo#
	</select>
	<select id="selectByAwbNoAgt" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		
		 <![CDATA[
		select *
        from   (select decode (c.status, 'V', '','R','', c.rcl_no) as rclNo,
                       substr (B.pre_rcl_no, 1, 4) || '-' || substr (B.pre_rcl_no, 5) as preRclNoFormat, B.AWB_NO as awbNo,B.AWB_DATE as awbDate,
                       B.pre_rcl_no as preRclNo, decode (B.PPK_TYPE, 'B', 'Bulk', 'P', 'Prepack', 'M', 'Mixed') as rclTypeDescription,
                       B.PPK_TYPE as rclType, to_char (B.CR_DATE, 'DDMONYY hh24:mi') as rclsubmissiondate, B.ULD_KEY as uldNo,
                       upper (B.STATUS) as searchStatus,  customer.code_desc as agentName,
                       B.carr_code as carr, b.ttl_pcs as pieces, b.ttl_wt as weight, B.cust_no as custNo,
                       SUBSTR(TRIM(B.AWB_NO),1,3)||'-'||SUBSTR(TRIM(B.AWB_NO),4) awbNoDisplay,
                       decode(doc.awb_no,null,'N','Y') as docRcv   ,
                        NVL(b.carr_rf,'NA') as carrierRF  ,
						CASE when b.SCREENING_OPTION = 'RACF_SC' then 'Y' else 'N' end as racsfInd,
					       c.REJECT_IND as rclRejInd,
				           CASE when ( b.SCREENING_OPTION = 'CTO_SC'
				                        OR  (b.PPK_TYPE = 'B' and (instr(b.CARR_CODE,city.CARR_CODE) > 0 or instr(b.CARR_CODE,cntry.CARR_CODE) > 0 ) ) ) then 'R' 
				                when 
				                (nvl(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC' OR nvl(b.SCREENING_OPTION,'N') = 'RAKC_SC'
				                  OR nvl(b.SCREENING_OPTION,'N') = 'VKC_CODE' OR (b.SCREENING_OPTION = 'RACF_SC' and b.racsf_code is not null
				                  and ( b.SEAL_NUM1 is not null OR b.SEAL_NUM2 is not null OR
				                        b.SEAL_NUM3 is not null OR b.SEAL_NUM4 is not null OR
				                        b.SEAL_NUM5 is not null OR b.SEAL_NUM6 is not null OR
				                        b.SEAL_NUM7 is not null OR b.SEAL_NUM8 is not null OR
				                        b.SEAL_NUM9 is not null
				                  ) ) ) then 'G'
				              else 'N' end as racsfColInd                    
           from     exp_pre_rcl_hd b
                LEFT OUTER join exp_rcl_hd c on  (b.pre_rcl_no = c.pre_rcl_no or b.pre_rcl_no = c.pre_rcl_no2)
			    join cust_company customer on B.cust_no  = customer.code
			    LEFT OUTER join (SELECT awb_no,awb_date	FROM exp_doc_recd WHERE awb_closed_yn='N' AND AWB_FRZ_YN     ='Y' ) doc on b.awb_no =doc.awb_no  AND b.awb_date     =doc.awb_date
			    left join (select code,CARR_CODE from MAST_CITY  ) city on city.code = b.awb_dest     
				left join (select distinct city.code cityCode, CNTRY.CODE ,CITY.CARR_CODE from MAST_COUNTRY cntry,MAST_CITY city where city.CTRY_CODE = cntry.code ) cntry on cntry.cityCode = b.awb_dest
                where  B.awb_no = #awbNo# 	         
                and   ((#custNo# is not null and customer.code = #custNo#) or #custNo# is null)                
                union 
                select decode (c.status, 'V', '','R','', c.rcl_no) as rclNo,
                       substr (B.pre_rcl_no, 1, 4) || '-' || substr (B.pre_rcl_no, 5) as preRclNoFormat, #awbNo# as awbNo,B.AWB_DATE as awbDate,
                       B.pre_rcl_no as preRclNo, decode (B.PPK_TYPE, 'B', 'Bulk', 'P', 'Prepack', 'M', 'Mixed') as rclTypeDescription,
                       B.PPK_TYPE as rclType, to_char (B.CR_DATE, 'DDMONYY hh24:mi') as rclsubmissiondate, B.ULD_KEY as uldNo,
                       upper (B.STATUS) as searchStatus,  customer.code_desc as agentName,
                       B.carr_code as carr, b.ttl_pcs as pieces, b.ttl_wt as weight, B.cust_no as custNo,
                       SUBSTR(TRIM(B.AWB_NO),1,3)||'-'||SUBSTR(TRIM(B.AWB_NO),4) awbNoDisplay,decode(doc.awb_no,null,'N','Y') as docRcv ,
                       NVL(b.carr_rf,'NA') as carrierRF,
					   CASE when b.SCREENING_OPTION = 'RACF_SC' then 'Y' else 'N' end as racsfInd,
					   c.REJECT_IND as rclRejInd,
				           CASE when ( b.SCREENING_OPTION = 'CTO_SC'
				                        OR  (b.PPK_TYPE = 'B' and (instr(b.CARR_CODE,city.CARR_CODE) > 0 or instr(b.CARR_CODE,cntry.CARR_CODE) > 0 ) ) ) then 'R' 
				                when 
				                (nvl(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC' OR nvl(b.SCREENING_OPTION,'N') = 'RAKC_SC'
				                  OR nvl(b.SCREENING_OPTION,'N') = 'VKC_CODE' OR (b.SCREENING_OPTION = 'RACF_SC' and b.racsf_code is not null
				                  and ( B.SEAL_NUM1 is not null OR B.SEAL_NUM2 is not null OR
				                        B.SEAL_NUM3 is not null OR B.SEAL_NUM4 is not null OR
				                        B.SEAL_NUM5 is not null OR B.SEAL_NUM6 is not null OR
				                        B.SEAL_NUM7 is not null OR B.SEAL_NUM8 is not null OR
				                        B.SEAL_NUM9 is not null
				                  ) ) ) then 'G'
				              else 'N' end as racsfColInd
                from   exp_pre_rcl_hd b
                LEFT OUTER join exp_rcl_hd c on  (b.pre_rcl_no = c.pre_rcl_no or b.pre_rcl_no = c.pre_rcl_no2)
			    join cust_company customer on B.cust_no      = customer.code
			    LEFT OUTER join (SELECT awb_no,awb_date	FROM exp_doc_recd WHERE awb_closed_yn='N' AND AWB_FRZ_YN     ='Y' ) doc on b.awb_no =doc.awb_no  AND b.awb_date     =doc.awb_date
			    left join (select code,CARR_CODE from MAST_CITY  ) city on city.code = b.awb_dest     
				left join (select distinct city.code cityCode, CNTRY.CODE ,CITY.CARR_CODE from MAST_COUNTRY cntry,MAST_CITY city where city.CTRY_CODE = cntry.code ) cntry on cntry.cityCode = b.awb_dest
                
                where  1 = 1
                and    exists (select null 
                               from   EXP_PRE_RCL_BRKDN d
                               where  d.pre_rcl_no = b.pre_rcl_no 
                               and    d.AWB_NO = #awbNo#)
                and    ((#custNo# is not null and customer.code = #custNo#) or #custNo# is null)
       		) order by 7, 6        
        ]]> 
	</select>
	<select id="selectByUldAgt" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		select distinct a.* from (
        SELECT decode (rcl.status, 'V', '','R','', rcl.rcl_no) as rclNo,
        B.AWB_NO AS awbNo, B.pre_rcl_no as preRclNo,decode(B.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS 	rclTypeDescription,
        B.PPK_TYPE as rclType,to_char(B.CR_DATE,'DDMONYY hh24:mi') AS rclsubmissiondate, B.ULD_KEY AS uldNo, upper( B.STATUS) AS searchStatus,
        qcp_pcs as qcp_pcs, qcp_wt as qcp_wt,customer.code_desc as agentName,B.carr_code as carr,
		B.ttl_pcs as pieces,B.ttl_wt as weight, B.cust_no as custNo, B.RCL_ISS_DATE ,B.SPL_CODE1 splCode1, B.SPL_CODE2 splCode2, B.SPL_CODE3 splCode3,
		SUBSTR(TRIM(B.AWB_NO),1,3)||'-'||SUBSTR(TRIM(B.AWB_NO),4) awbNoDisplay,B.AWB_DATE as awbDate,decode(doc.awb_no,null,'N','Y') as docRcv,
		NVL(B.carr_rf,'NA') as carrierRF,
		CASE when b.SCREENING_OPTION = 'RACF_SC' then 'Y' else 'N' end as racsfInd,
					       rcl.REJECT_IND as rclRejInd,
				           CASE when ( b.SCREENING_OPTION = 'CTO_SC'
				                        OR  (b.PPK_TYPE = 'B' and (instr(b.CARR_CODE,city.CARR_CODE) > 0 or instr(b.CARR_CODE,cntry.CARR_CODE) > 0 ) ) ) then 'R' 
				                when 
				                (nvl(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC' OR nvl(b.SCREENING_OPTION,'N') = 'RAKC_SC'
				                  OR nvl(b.SCREENING_OPTION,'N') = 'VKC_CODE' OR (b.SCREENING_OPTION = 'RACF_SC' and b.racsf_code is not null
				                  and ( B.SEAL_NUM1 is not null OR B.SEAL_NUM2 is not null OR
				                        B.SEAL_NUM3 is not null OR B.SEAL_NUM4 is not null OR
				                        B.SEAL_NUM5 is not null OR B.SEAL_NUM6 is not null OR
				                        B.SEAL_NUM7 is not null OR B.SEAL_NUM8 is not null OR
				                        B.SEAL_NUM9 is not null
				                  ) ) ) then 'G'
				              else 'N' end as racsfColInd
		FROM  cust_company customer , EXP_PRE_RCL_HD B 
		LEFT JOIN EXP_RCL_HD rcl ON (rcl.PRE_RCL_NO = B.PRE_RCL_NO  or rcl.PRE_RCL_NO2 = B.PRE_RCL_NO)    
		LEFT OUTER JOIN (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC on b.AWB_NO=DOC.AWB_NO AND DOC.AWB_DATE=b.AWB_DATE
		left join (select code,CARR_CODE from MAST_CITY  ) city on city.code = b.awb_dest     
		left join (select distinct city.code cityCode, CNTRY.CODE ,CITY.CARR_CODE from MAST_COUNTRY cntry,MAST_CITY city where city.CTRY_CODE = cntry.code ) cntry on cntry.cityCode = b.awb_dest 
		WHERE B.cust_no = customer.code AND B.uld_Key=#uldNo# and customer.code = #custNo#		
        union 		
        SELECT decode (rcl.status, 'V', '','R','', rcl.rcl_no) as rclNo,B.AWB_NO AS awbNo, B.pre_rcl_no as preRclNo,
		decode(B.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS
		rclTypeDescription, B.PPK_TYPE as
		rclType,to_char(B.CR_DATE,'DDMONYY hh24:mi') AS
		rclsubmissiondate, dtl.ULD_KEY AS uldNo, upper( B.STATUS) AS
		searchStatus,qcp_pcs as qcp_pcs, qcp_wt as 	qcp_wt,customer.code_desc as agentName,B.carr_code as carr,
		B.ttl_pcs as pieces,B.ttl_wt as weight, B.cust_no as custNo, B.RCL_ISS_DATE ,B.SPL_CODE1 splCode1, B.SPL_CODE2 splCode2, B.SPL_CODE3 splCode3,
		SUBSTR(TRIM(B.AWB_NO),1,3)||'-'||SUBSTR(TRIM(B.AWB_NO),4) awbNoDisplay,B.AWB_DATE as awbDate,decode(doc.awb_no,null,'N','Y') as docRcv,
		NVL(B.carr_rf,'NA') as carrierRF,
		CASE when b.SCREENING_OPTION = 'RACF_SC' then 'Y' else 'N' end as racsfInd,
					       rcl.REJECT_IND as rclRejInd,
				           CASE when ( b.SCREENING_OPTION = 'CTO_SC'
				                        OR  (b.PPK_TYPE = 'B' and (instr(b.CARR_CODE,city.CARR_CODE) > 0 or instr(b.CARR_CODE,cntry.CARR_CODE) > 0 ) ) ) then 'R' 
				                when 
				                (nvl(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC' OR nvl(b.SCREENING_OPTION,'N') = 'RAKC_SC'
				                  OR nvl(b.SCREENING_OPTION,'N') = 'VKC_CODE' OR (b.SCREENING_OPTION = 'RACF_SC' and b.racsf_code is not null
				                  and ( B.SEAL_NUM1 is not null OR B.SEAL_NUM2 is not null OR
				                        B.SEAL_NUM3 is not null OR B.SEAL_NUM4 is not null OR
				                        B.SEAL_NUM5 is not null OR B.SEAL_NUM6 is not null OR
				                        B.SEAL_NUM7 is not null OR B.SEAL_NUM8 is not null OR
				                        B.SEAL_NUM9 is not null
				                  ) ) ) then 'G'
				              else 'N' end as racsfColInd
		FROM cust_company customer , EXP_PRE_RCL_DTL dtl, EXP_PRE_RCL_HD B 
    	LEFT JOIN EXP_RCL_HD rcl ON (rcl.PRE_RCL_NO = B.PRE_RCL_NO  or rcl.PRE_RCL_NO2 = B.PRE_RCL_NO)    
		LEFT OUTER JOIN (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC on b.AWB_NO=DOC.AWB_NO AND DOC.AWB_DATE=b.AWB_DATE
		left join (select code,CARR_CODE from MAST_CITY  ) city on city.code = b.awb_dest     
		left join (select distinct city.code cityCode, CNTRY.CODE ,CITY.CARR_CODE from MAST_COUNTRY cntry,MAST_CITY city where city.CTRY_CODE = cntry.code ) cntry on cntry.cityCode = b.awb_dest 
		WHERE B.cust_no = customer.code AND  b.pre_rcl_no = dtl.pre_rcl_no 
		AND dtl.uld_Key=#uldNo#
		AND customer.code = #custNo#
  	) a ORDER BY 7,6
	</select>
	<select id="selectSummaryInfoAgt" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">		
		select decode (c.status, 'V', '', c.rcl_no) as rclNo,
		       substr (B.pre_rcl_no, 1, 4) || '-' || substr (B.pre_rcl_no, 5) as preRclNoFormat, B.AWB_NO as awbNo,B.AWB_DATE as awbDate,
		       B.pre_rcl_no as preRclNo, decode (B.PPK_TYPE, 'B', 'Bulk', 'P', 'Prepack', 'M', 'Mixed') as rclTypeDescription,
		       B.PPK_TYPE as rclType, to_char (B.CR_DATE, 'DDMONYY hh24:mi') as rclsubmissiondate, B.ULD_KEY as uldNo,
		       upper (B.STATUS) as searchStatus, qcp_pcs as qcp_pcs, qcp_wt as qcp_wt, customer.code_desc as agentName, B.carr_code as carr,
		       b.ttl_pcs as pieces, b.ttl_wt as weight, B.cust_no as custNo,
		       qcp_pcs as qcp_pcs, qcp_wt as qcp_wt, SUBSTR(TRIM(B.AWB_NO),1,3)||'-'||SUBSTR(TRIM(B.AWB_NO),4) awbNoDisplay,
		       decode(doc.awb_no,null,'N','Y') as docRcv,NVL(b.carr_rf,'NA') carrierRF,
				CASE when b.SCREENING_OPTION = 'RACF_SC' then 'Y' else 'N' end as racsfInd,
					       c.REJECT_IND as rclRejInd,
				           CASE when ( b.SCREENING_OPTION = 'CTO_SC'
				                        OR  (b.PPK_TYPE = 'B' and (instr(b.CARR_CODE,city.CARR_CODE) > 0 or instr(b.CARR_CODE,cntry.CARR_CODE) > 0 ) ) ) then 'R' 
				                when 
				                (nvl(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC' OR nvl(b.SCREENING_OPTION,'N') = 'RAKC_SC'
				                  OR nvl(b.SCREENING_OPTION,'N') = 'VKC_CODE' OR (b.SCREENING_OPTION = 'RACF_SC' and b.racsf_code is not null
				                  and ( B.SEAL_NUM1 is not null OR B.SEAL_NUM2 is not null OR
				                        B.SEAL_NUM3 is not null OR B.SEAL_NUM4 is not null OR
				                        B.SEAL_NUM5 is not null OR B.SEAL_NUM6 is not null OR
				                        B.SEAL_NUM7 is not null OR B.SEAL_NUM8 is not null OR
				                        B.SEAL_NUM9 is not null
				                  ) ) ) then 'G'
				              else 'N' end as racsfColInd
		from   EXP_PRE_RCL_HD b
		left outer join EXP_RCL_HD c on (b.pre_rcl_no = c.pre_rcl_no or b.pre_rcl_no = c.pre_rcl_no2)		
		join cust_company customer on  B.cust_no = customer.code	
		left outer join (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC on b.AWB_NO=DOC.AWB_NO AND DOC.AWB_DATE=b.AWB_DATE
                left join (select code,CARR_CODE from MAST_CITY  ) city on city.code = b.awb_dest     
		left join (select distinct city.code cityCode, CNTRY.CODE ,CITY.CARR_CODE from MAST_COUNTRY cntry,MAST_CITY city where city.CTRY_CODE = cntry.code ) cntry on cntry.cityCode = b.awb_dest     
		where B.cust_no=#custNo#	
		<isNotEmpty property="rclType">
		and B.PPK_TYPE=#rclType#
		</isNotEmpty>
		<isNotEmpty property="searchStatus">
		and B.STATUS=#searchStatus#
		</isNotEmpty>
		<isNotEmpty property="truckerName">
		and B.pre_rcl_no in (select ERCL_NO from exp_booking_dtl dtl 
					join exp_booking bkg on dtl.BOOKING_NO=bkg.BOOKING_NO 
					join cust_company comp on comp.code=bkg.CUST_NO where comp.code_desc=#truckerName#)
		</isNotEmpty>
		<isNotEmpty property="truckerCode">
		and B.pre_rcl_no in (select ERCL_NO from exp_booking_dtl dtl 
					join exp_booking bkg on dtl.BOOKING_NO=bkg.BOOKING_NO 
					join cust_company comp on comp.code=bkg.CUST_NO where comp.code=#truckerCode#)
		</isNotEmpty>		
		<isNotEmpty property="issueDateFrom">
		<isNotEmpty property="issueDateTo">
		 and b.cr_date >= to_date(#issueDateFrom#||'0000','DDMONYYHH24MI') and b.cr_date &lt;= to_date(#issueDateTo#||'2359','DDMONYYHH24MI') 
		</isNotEmpty>	
		</isNotEmpty>
		<isNotEmpty property="issueDateFrom">
		<isEmpty property="issueDateTo">
		 and b.cr_date>=to_date(#issueDateFrom#,'DDMONYY') 
		</isEmpty>	
		</isNotEmpty>
		<isEmpty property="issueDateFrom">
		<isNotEmpty property="issueDateTo">
		 and to_date(#issueDateFrom#,'DDMONYY') &lt;= b.cr_date
		</isNotEmpty>	
		</isEmpty>
		<isNotEmpty property="carrierRF">
			<isNotEqual property="carrierRF" compareValue="A">
				and NVL(b.carr_rf,'NA')=#carrierRF#
			</isNotEqual>
		</isNotEmpty>	
		<isNotEmpty property="rclRejInd">
			<isNotEqual property="rclRejInd" compareValue="A">
		 		and NVL(c.REJECT_IND,'NA')=#rclRejInd#
			</isNotEqual>
		</isNotEmpty>	
		ORDER BY B.PPK_TYPE ASC, to_char(b.cr_date,'DDMMYYHH24MI') DESC
		
	</select>
	<!-- Changed for QR -->
	 <select id="selectUldMixedDetail" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.UldHseManfDetailBO">
	 SELECT SUBSTR(TRIM(ULD_MANF.AWB_NO),1,3)||'-'||SUBSTR(TRIM(ULD_MANF.AWB_NO),4) as awbNo,HAWB.HAWB_NO AS hawbNo,HAWB.HAWB_ORG AS orig,HAWB.HAWB_DEST AS dest,HAWB.HAWB_PCS fhlPc,HAWB.HAWB_NET_WT fhlWt,ULD_MANF.PC AS loadPc,ULD_MANF.WT AS loadWt
		 FROM EXP_PRE_RCL_BRKDN BRKDN
		 JOIN EDI_FHL FHL ON  FHL.AWB_NO=BRKDN.AWB_NO
		 JOIN EDI_FHL_HAWB HAWB ON HAWB.TR_NO=FHL.TR_NO
		 JOIN EXP_PRE_RCL_ULD_MANF ULD_MANF ON ULD_MANF.PRE_RCL_NO=BRKDN.PRE_RCL_NO AND ULD_MANF.AWB_NO=BRKDN.AWB_NO AND HAWB.HAWB_NO=ULD_MANF.HAWB_NO
		 WHERE BRKDN.pre_rcl_no=#preRclNo#    
		UNION 
	SELECT SUBSTR(TRIM(ULD_MANF.AWB_NO),1,3)||'-'||SUBSTR(TRIM(ULD_MANF.AWB_NO),4) as awbNo,HAWB.HAWB_NO AS hawbNo,HAWB.HAWB_ORG AS orig,HAWB.HAWB_DEST AS dest,
	HAWB.HAWB_PCS fhlPc,HAWB.HAWB_NET_WT fhlWt,ULD_MANF.PC AS loadPc,ULD_MANF.WT AS loadWt
		 FROM EXP_RCL_BRKDN BRKDN
		 JOIN EDI_FHL FHL ON  FHL.AWB_NO=BRKDN.AWB_NO AND FHL.AWB_DATE = BRKDN.AWB_DATE 
		 JOIN EDI_FHL_HAWB HAWB ON HAWB.TR_NO=FHL.TR_NO
		 JOIN EXP_RCL_ULD_MANF ULD_MANF ON ULD_MANF.RCL_NO=BRKDN.RCL_NO AND ULD_MANF.AWB_NO=BRKDN.AWB_NO AND HAWB.HAWB_NO=ULD_MANF.HAWB_NO
		 WHERE BRKDN.rcl_no=#rclNo#
	 </select>
	  <select id="selectUldPrepackDetail" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.UldHseManfDetailBO">	   	
		 SELECT HAWB.HAWB_NO AS hawbNo,HAWB.HAWB_ORG AS orig,HAWB.HAWB_DEST AS dest,HAWB.HAWB_PCS fhlPc,HAWB.HAWB_NET_WT fhlWt,ULD_MANF.PC AS loadPc,
  				ULD_MANF.WT AS loadWt, ULD_MANF.ULD_KEY AS uldNo,ULD_MANF.AWB_NO AS awbNo FROM EDI_FHL FHL JOIN EDI_FHL_HAWB HAWB ON HAWB.TR_NO=FHL.TR_NO JOIN EXP_PRE_RCL_ULD_MANF ULD_MANF     
				ON HAWB.HAWB_NO = ULD_MANF.HAWB_NO AND FHL.AWB_NO =  ULD_MANF.AWB_NO
		 WHERE ULD_MANF.PRE_RCL_NO=#preRclNo#
	 </select>
	<!-- Enquire eRCL Pre Decl (External)::End -->
	<!-- Enquire eRCL Pre Decl (Internal)::Start -->
	<select id="eRclcompanyname" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.String">
	 SELECT CUST_COMPANY.code_desc as qcp_contactPerson,CUST_COMPANY.code_desc as qcp_companyName FROM CUST_COMPANY, SEC_USER 
	 where SEC_USER.CUST_NO=CUST_COMPANY.CODE and SEC_USER.CODE=#createdUserId#
	</select>
	<select id="getDocNumInServiceLog" parameterClass="cargo.cms.export.bo.ERCLPrepackDetailBO" resultClass="java.lang.String">
	SELECT DOC_LINE_NO FROM SERVICE_ERR_LOG WHERE TR_NO=#preRCLNO# AND ULD_KEY=#altUld# AND ROWNUM=1
	</select>
	<!-- Changed for QR -->
	<select id="Export_eRCLEnquireQueryBasedOnAWB_Internal" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">		
	    <![CDATA[
		select *
        from   (select decode (c.status, 'V', ' ','R', ' ', c.rcl_no) as rclNo,
                       substr (B.pre_rcl_no, 1, 4) || '-' || substr (B.pre_rcl_no, 5) as preRclNoFormat, B.AWB_NO as awbNo,B.AWB_DATE as awbDate,
                       SUBSTR(TRIM(B.AWB_NO),1,3)||'-'||SUBSTR(TRIM(B.AWB_NO),4) awbNoDisplay,
                       B.pre_rcl_no as preRclNo, decode (B.PPK_TYPE, 'B', 'Bulk', 'P', 'Prepack', 'M', 'Mixed') as rclTypeDescription,
                       B.PPK_TYPE as rclType, to_char (B.CR_DATE, 'DDMONYY hh24:mi') as rclSubmissionDate, B.ULD_KEY as uldNo,
                       upper (B.STATUS) as searchStatus, qcp_pcs as qcp_pcs, qcp_wt as qcp_wt, customer.code_desc as agentName,
                       B.carr_code as carr, b.ttl_pcs as pieces, b.ttl_wt as weight, B.cust_no as custNo,
                       B.RCL_ISS_DATE,decode(doc.awb_no,null,'N','Y') as docRcv,NVL(b.carr_rf,'NA') as carrierRF  ,
						CASE when b.SCREENING_OPTION = 'RACF_SC' then 'Y' else 'N' end as racsfInd,
					       c.REJECT_IND as rclRejInd,
				           CASE when ( b.SCREENING_OPTION = 'CTO_SC'
				                        OR  (b.PPK_TYPE = 'B' and (instr(b.CARR_CODE,city.CARR_CODE) > 0 or instr(b.CARR_CODE,cntry.CARR_CODE) > 0 ) ) ) then 'R' 
				                when 
				                (nvl(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC' OR nvl(b.SCREENING_OPTION,'N') = 'RAKC_SC'
				                  OR nvl(b.SCREENING_OPTION,'N') = 'VKC_CODE' OR (b.SCREENING_OPTION = 'RACF_SC' and b.racsf_code is not null
				                  and ( B.SEAL_NUM1 is not null OR B.SEAL_NUM2 is not null OR
				                        B.SEAL_NUM3 is not null OR B.SEAL_NUM4 is not null OR
				                        B.SEAL_NUM5 is not null OR B.SEAL_NUM6 is not null OR
				                        B.SEAL_NUM7 is not null OR B.SEAL_NUM8 is not null OR
				                        B.SEAL_NUM9 is not null
				                  ) ) ) then 'G'
				              else 'N' end as racsfColInd
							  
                from   exp_pre_rcl_hd b
                LEFT OUTER join exp_rcl_hd c on  (b.pre_rcl_no = c.pre_rcl_no or b.pre_rcl_no = c.pre_rcl_no2)
			    join cust_company customer on B.cust_no      = customer.code
			    LEFT OUTER join (SELECT awb_no,awb_date	FROM exp_doc_recd WHERE awb_closed_yn='N' AND AWB_FRZ_YN     ='Y' ) doc on b.awb_no =doc.awb_no  AND b.awb_date     =doc.awb_date
			    left join (select code,CARR_CODE from MAST_CITY  ) city on city.code = b.awb_dest     
				left join (select distinct city.code cityCode, CNTRY.CODE ,CITY.CARR_CODE from MAST_COUNTRY cntry,MAST_CITY city where city.CTRY_CODE = cntry.code ) cntry on cntry.cityCode = b.awb_dest
                where  B.awb_no = #awbNo# 	
				
                union 
                select decode (c.status, 'V', ' ','R', ' ', c.rcl_no) as rclNo,
                       substr (B.pre_rcl_no, 1, 4) || '-' || substr (B.pre_rcl_no, 5) as preRclNoFormat, #awbNo# as awbNo,B.AWB_DATE as awbDate,
                       SUBSTR(TRIM(B.AWB_NO),1,3)||'-'||SUBSTR(TRIM(B.AWB_NO),4) awbNoDisplay,
                       B.pre_rcl_no as preRclNo, decode (B.PPK_TYPE, 'B', 'Bulk', 'P', 'Prepack', 'M', 'Mixed') as rclTypeDescription,
                       B.PPK_TYPE as rclType, to_char (B.CR_DATE, 'DDMONYY hh24:mi') as rclsubmissiondate, B.ULD_KEY as uldNo,
                       upper (B.STATUS) as searchStatus, B.qcp_pcs as qcp_pcs, B.qcp_wt as qcp_wt, customer.code_desc as agentName,
                       B.carr_code as carr, b.ttl_pcs as pieces, b.ttl_wt as weight, B.cust_no as custNo,
                       B.RCL_ISS_DATE,decode(doc.awb_no,null,'N','Y') as docRcv,NVL(b.carr_rf,'NA') as carrierRF,
					   CASE when b.SCREENING_OPTION = 'RACF_SC' then 'Y' else 'N' end as racsfInd,
					   c.REJECT_IND as rclRejInd,
				           CASE when ( b.SCREENING_OPTION = 'CTO_SC'
				                        OR  (b.PPK_TYPE = 'B' and (instr(b.CARR_CODE,city.CARR_CODE) > 0 or instr(b.CARR_CODE,cntry.CARR_CODE) > 0 ) ) ) then 'R' 
				                when 
				                (nvl(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC' OR nvl(b.SCREENING_OPTION,'N') = 'RAKC_SC'
				                  OR nvl(b.SCREENING_OPTION,'N') = 'VKC_CODE' OR (b.SCREENING_OPTION = 'RACF_SC' and b.racsf_code is not null
				                  and ( B.SEAL_NUM1 is not null OR B.SEAL_NUM2 is not null OR
				                        B.SEAL_NUM3 is not null OR B.SEAL_NUM4 is not null OR
				                        B.SEAL_NUM5 is not null OR B.SEAL_NUM6 is not null OR
				                        B.SEAL_NUM7 is not null OR B.SEAL_NUM8 is not null OR
				                        B.SEAL_NUM9 is not null
				                  ) ) ) then 'G'
				              else 'N' end as racsfColInd
                from   exp_pre_rcl_hd b
                LEFT OUTER join exp_rcl_hd c on  (b.pre_rcl_no = c.pre_rcl_no or b.pre_rcl_no = c.pre_rcl_no2)
			    join cust_company customer on B.cust_no      = customer.code
			    LEFT OUTER join (SELECT awb_no,awb_date	FROM exp_doc_recd WHERE awb_closed_yn='N' AND AWB_FRZ_YN     ='Y' ) doc on b.awb_no =doc.awb_no  AND b.awb_date     =doc.awb_date
			    left join (select code,CARR_CODE from MAST_CITY  ) city on city.code = b.awb_dest     
				left join (select distinct city.code cityCode, CNTRY.CODE ,CITY.CARR_CODE from MAST_COUNTRY cntry,MAST_CITY city where city.CTRY_CODE = cntry.code ) cntry on cntry.cityCode = b.awb_dest
                
                where  1 = 1
                and    exists (select null 
                               from   EXP_PRE_RCL_BRKDN d
                               where  d.pre_rcl_no = b.pre_rcl_no 
                               and    d.AWB_NO = #awbNo# ))
        order by 7, 6        
        ]]> 		
		
	</select>
	<select id="Export_eRCLEnquireQueryBasedOnULD_Internal" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	    SELECT DISTINCT * FROM (
		SELECT decode(c.status,'V',' ','R', ' ', c.rcl_no) as rclNo,
		B.AWB_NO AS awbNo,B.AWB_DATE as awbDate, SUBSTR(TRIM(B.AWB_NO),1,3)||'-'||SUBSTR(TRIM(B.AWB_NO),4) awbNoDisplay,B.pre_rcl_no as preRclNo,
		decode(B.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS 	rclTypeDescription, B.PPK_TYPE as 	rclType,to_char(B.CR_DATE,'DDMONYY hh24:mi') AS 	rclsubmissiondate, 
		B.ULD_KEY AS uldNo, upper( B.STATUS) AS searchStatus,qcp_pcs as qcp_pcs, qcp_wt as 	qcp_wt,customer.code_desc as agentName,B.carr_code as carr,
		B.ttl_pcs as pieces, B.ttl_wt as weight, B.cust_no as custNo, B.RCL_ISS_DATE ,decode(doc.awb_no,null,'N','Y') as docRcv,NVL(B.carr_rf,'NA') as carrierRF,
		CASE when b.SCREENING_OPTION = 'RACF_SC' then 'Y' else 'N' end as racsfInd,
					       c.REJECT_IND as rclRejInd,
				           CASE when ( b.SCREENING_OPTION = 'CTO_SC'
				                        OR  (b.PPK_TYPE = 'B' and (instr(b.CARR_CODE,city.CARR_CODE) > 0 or instr(b.CARR_CODE,cntry.CARR_CODE) > 0 ) ) ) then 'R' 
				                when 
				                (nvl(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC' OR nvl(b.SCREENING_OPTION,'N') = 'RAKC_SC'
				                  OR nvl(b.SCREENING_OPTION,'N') = 'VKC_CODE' OR (b.SCREENING_OPTION = 'RACF_SC' and b.racsf_code is not null
				                  and ( B.SEAL_NUM1 is not null OR B.SEAL_NUM2 is not null OR
				                        B.SEAL_NUM3 is not null OR B.SEAL_NUM4 is not null OR
				                        B.SEAL_NUM5 is not null OR B.SEAL_NUM6 is not null OR
				                        B.SEAL_NUM7 is not null OR B.SEAL_NUM8 is not null OR
				                        B.SEAL_NUM9 is not null
				                  ) ) ) then 'G'
				              else 'N' end as racsfColInd	
		FROM  cust_company customer , 
		EXP_PRE_RCL_HD B LEFT JOIN EXP_RCL_HD C ON (C.PRE_RCL_NO = B.PRE_RCL_NO  or C.PRE_RCL_NO2 = B.PRE_RCL_NO)  
		LEFT OUTER JOIN (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC on b.AWB_NO=DOC.AWB_NO AND DOC.AWB_DATE=b.AWB_DATE
		left join (select code,CARR_CODE from MAST_CITY  ) city on city.code = b.awb_dest     
		left join (select distinct city.code cityCode, CNTRY.CODE ,CITY.CARR_CODE from MAST_COUNTRY cntry,MAST_CITY city where city.CTRY_CODE = cntry.code ) cntry on cntry.cityCode = b.awb_dest 
		WHERE B.cust_no = customer.code AND B.uld_Key=#uldNo# AND((#agentName# IS NOT NULL AND code_desc = #agentName#) OR 	#agentName# IS NULL) 
		
        UNION 		
        SELECT decode(c.status,'V',' ','R', ' ', c.rcl_no) as rclNo,
		B.AWB_NO AS awbNo, B.AWB_DATE as awbDate,SUBSTR(TRIM(B.AWB_NO),1,3)||'-'||SUBSTR(TRIM(B.AWB_NO),4) awbNoDisplay,B.pre_rcl_no as preRclNo,
		decode(B.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS 	rclTypeDescription, B.PPK_TYPE as 	rclType,to_char(B.CR_DATE,'DDMONYY hh24:mi') AS 	rclsubmissiondate, 
		BRK.ULD_KEY AS uldNo, upper( B.STATUS) AS 	searchStatus,B.qcp_pcs as qcp_pcs, B.qcp_wt as 	qcp_wt,customer.code_desc as agentName,B.carr_code as carr,
		B.ttl_pcs as pieces, B.ttl_wt as weight, B.cust_no as 	custNo, B.RCL_ISS_DATE ,decode(doc.awb_no,null,'N','Y') as docRcv,NVL(B.carr_rf,'NA') as carrierRF,
		CASE when b.SCREENING_OPTION = 'RACF_SC' then 'Y' else 'N' end as racsfInd,
					       c.REJECT_IND as rclRejInd,
				           CASE when ( b.SCREENING_OPTION = 'CTO_SC'
				                        OR  (b.PPK_TYPE = 'B' and (instr(b.CARR_CODE,city.CARR_CODE) > 0 or instr(b.CARR_CODE,cntry.CARR_CODE) > 0 ) ) ) then 'R' 
				                when 
				                (nvl(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC' OR nvl(b.SCREENING_OPTION,'N') = 'RAKC_SC'
				                  OR nvl(b.SCREENING_OPTION,'N') = 'VKC_CODE' OR (b.SCREENING_OPTION = 'RACF_SC' and b.racsf_code is not null
				                  and ( B.SEAL_NUM1 is not null OR B.SEAL_NUM2 is not null OR
				                        B.SEAL_NUM3 is not null OR B.SEAL_NUM4 is not null OR
				                        B.SEAL_NUM5 is not null OR B.SEAL_NUM6 is not null OR
				                        B.SEAL_NUM7 is not null OR B.SEAL_NUM8 is not null OR
				                        B.SEAL_NUM9 is not null
				                  ) ) ) then 'G'
				              else 'N' end as racsfColInd	
		 FROM cust_company customer , EXP_PRE_RCL_DTL BRK,
		EXP_PRE_RCL_HD B LEFT JOIN EXP_RCL_HD C ON (C.PRE_RCL_NO = 	B.PRE_RCL_NO  or C.PRE_RCL_NO2 = B.PRE_RCL_NO)  
		LEFT OUTER JOIN (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC on b.AWB_NO=DOC.AWB_NO AND DOC.AWB_DATE=b.AWB_DATE
		left join (select code,CARR_CODE from MAST_CITY  ) city on city.code = b.awb_dest     
		left join (select distinct city.code cityCode, CNTRY.CODE ,CITY.CARR_CODE from MAST_COUNTRY cntry,MAST_CITY city where city.CTRY_CODE = cntry.code ) cntry on cntry.cityCode = b.awb_dest 
		WHERE B.cust_no = customer.code 
		AND BRK.PRE_RCL_NO = B.PRE_RCL_NO
		AND BRK.uld_Key=#uldNo# AND((#agentName# IS NOT NULL AND code_desc = #agentName#) OR #agentName# IS NULL) 
		
		) ORDER BY 7,6 
	</select>
	<select id="export_sqlsummary_for_internal_ercl" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">			
		select decode (c.status, 'V', ' ','R', ' ', c.rcl_no) as rclNo,
		       substr (B.pre_rcl_no, 1, 4) || '-' || substr (B.pre_rcl_no, 5) as preRclNoFormat, B.AWB_NO as awbNo,SUBSTR(TRIM(B.AWB_NO),1,3)||'-'||SUBSTR(TRIM(B.AWB_NO),4) awbNoDisplay,
		       B.AWB_DATE as awbDate,B.pre_rcl_no as preRclNo, decode (B.PPK_TYPE, 'B', 'Bulk', 'P', 'Prepack', 'M', 'Mixed') as rclTypeDescription,
		       B.PPK_TYPE as rclType, to_char (B.CR_DATE, 'DDMONYY hh24:mi') as rclsubmissiondate, B.ULD_KEY as uldNo,
		       upper (B.STATUS) as searchStatus, qcp_pcs as qcp_pcs, qcp_wt as qcp_wt, customer.code_desc as agentName, B.carr_code as carr,
					       B.cust_no as custNo,qcp_pcs as qcp_pcs, qcp_wt as qcp_wt, ttl_pcs as pieces, ttl_wt as weight,decode(doc.awb_no,null,'N','Y') as docRcv,
					       NVL(b.carr_rf,'NA') carrierRF,
					       CASE when b.SCREENING_OPTION = 'RACF_SC' then 'Y' else 'N' end as racsfInd,
					       c.REJECT_IND as rclRejInd,
				           CASE when ( b.SCREENING_OPTION = 'CTO_SC'
				                        OR  (b.PPK_TYPE = 'B' and (instr(b.CARR_CODE,city.CARR_CODE) > 0 or instr(b.CARR_CODE,cntry.CARR_CODE) > 0 ) ) ) then 'R' 
				                when 
				                (nvl(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC' OR nvl(b.SCREENING_OPTION,'N') = 'RAKC_SC'
				                  OR nvl(b.SCREENING_OPTION,'N') = 'VKC_CODE' OR (b.SCREENING_OPTION = 'RACF_SC' and b.racsf_code is not null
				                  and ( B.SEAL_NUM1 is not null OR B.SEAL_NUM2 is not null OR
				                        B.SEAL_NUM3 is not null OR B.SEAL_NUM4 is not null OR
				                        B.SEAL_NUM5 is not null OR B.SEAL_NUM6 is not null OR
				                        B.SEAL_NUM7 is not null OR B.SEAL_NUM8 is not null OR
				                        B.SEAL_NUM9 is not null
				                  ) ) ) then 'G'
				              else 'N' end as racsfColInd
				              
								  <!-- CASE
							      WHEN ( b.SCREENING_OPTION              = 'CTO_SC'
							      OR (b.PPK_TYPE                         = 'B'
							      AND (instr(b.CARR_CODE,city.CARR_CODE) > 0
							      OR instr(b.CARR_CODE,cntry.CARR_CODE)  > 0 ) ) )
							      THEN 'R'
							      WHEN (NVL(b.SCREENING_OPTION,'N') = 'EXEMPTED_SC'
							        OR NVL(b.SCREENING_OPTION,'N')    = 'RAKC_SC'
							        OR NVL(b.SCREENING_OPTION,'N')    = 'VKC_CODE'
							      )
							      THEN 'G'
							      WHEN
							        (b.SCREENING_OPTION            = 'RACF_SC'
							        AND b.racsf_code                 IS NOT NULL
							        AND ( B.SEAL_NUM1                IS NOT NULL
							        OR B.SEAL_NUM2                   IS NOT NULL
							        OR B.SEAL_NUM3                   IS NOT NULL
							        OR B.SEAL_NUM4                   IS NOT NULL
							        OR B.SEAL_NUM5                   IS NOT NULL
							        OR B.SEAL_NUM6                   IS NOT NULL
							        OR B.SEAL_NUM7                   IS NOT NULL
							        OR B.SEAL_NUM8                   IS NOT NULL
							        OR B.SEAL_NUM9                   IS NOT NULL ) 
							        ) THEN 'G' 
							      WHEN 
							        b.SCREENING_OPTION = 'RACF_SC' AND b.racsf_code IS NOT NULL
							        AND NOT (B.SEAL_NUM1 IS NOT NULL
							        OR B.SEAL_NUM2 IS NOT NULL
							        OR B.SEAL_NUM3 IS NOT NULL
							        OR B.SEAL_NUM4 IS NOT NULL
							        OR B.SEAL_NUM5 IS NOT NULL
							        OR B.SEAL_NUM6 IS NOT NULL
							        OR B.SEAL_NUM7 IS NOT NULL
							        OR B.SEAL_NUM8 IS NOT NULL
							        OR B.SEAL_NUM9 IS NOT NULL ) THEN 'R'       
							      ELSE 'N' -->
      
		from   EXP_PRE_RCL_HD b
		left outer join EXP_RCL_HD c on (b.pre_rcl_no = c.pre_rcl_no	OR 	b.pre_rcl_no = c.pre_rcl_no2)
		join cust_company customer on  B.cust_no = customer.code	
		left outer join (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC on b.AWB_NO=DOC.AWB_NO AND DOC.AWB_DATE=b.AWB_DATE
					left join (select code,CARR_CODE from MAST_CITY  ) city on city.code = b.awb_dest     
			    	left join (select distinct city.code cityCode, CNTRY.CODE ,CITY.CARR_CODE from MAST_COUNTRY cntry,MAST_CITY city where city.CTRY_CODE = cntry.code ) cntry on cntry.cityCode = b.awb_dest     
		where 1=1	
		<isNotEmpty property="rclType">
		and B.PPK_TYPE=#rclType#
		</isNotEmpty>
		<isNotEmpty property="searchStatus">
		and B.STATUS=#searchStatus#
		</isNotEmpty>
		<isNotEmpty property="agentName">
		and customer.code_desc=#agentName#
		</isNotEmpty>
		<isNotEmpty property="agentCode">
		and B.cust_no=#agentCode#
		</isNotEmpty>
		<isNotEmpty property="truckerName">
		and B.pre_rcl_no in (select ERCL_NO from exp_booking_dtl dtl 
					join exp_booking bkg on dtl.BOOKING_NO=bkg.BOOKING_NO 
					join cust_company comp on comp.code=bkg.CUST_NO where comp.code_desc=#truckerName#)
		</isNotEmpty>
		<isNotEmpty property="truckerCode">
		and B.pre_rcl_no in (select ERCL_NO from exp_booking_dtl dtl 
					join exp_booking bkg on dtl.BOOKING_NO=bkg.BOOKING_NO 
					join cust_company comp on comp.code=bkg.CUST_NO where comp.code=#truckerCode#)
		</isNotEmpty>	
		<isNotEmpty property="issueDateFrom">
		<isNotEmpty property="issueDateTo">
		  and b.cr_date >= to_date(#issueDateFrom#||'0000','DDMONYYHH24MI') and b.cr_date &lt;= to_date(#issueDateTo#||'2359','DDMONYYHH24MI')  
		</isNotEmpty>	
		</isNotEmpty>
		<isNotEmpty property="issueDateFrom">
		<isEmpty property="issueDateTo">
		 and b.cr_date>=to_date(#issueDateFrom#,'DDMONYY') 
		</isEmpty>	
		</isNotEmpty>
		<isEmpty property="issueDateFrom">
		<isNotEmpty property="issueDateTo">
		 and to_date(#issueDateFrom#,'DDMONYY') >b.cr_date
		</isNotEmpty>	
		</isEmpty>
		<isNotEmpty property="carrierRF">
			<isNotEqual property="carrierRF" compareValue="A">
				and NVL(b.carr_rf,'NA')=#carrierRF#
			</isNotEqual>
		</isNotEmpty>	
					<isNotEmpty property="rclRejInd">
						<isNotEqual property="rclRejInd" compareValue="A">
							and NVL(c.REJECT_IND,'NA')=#rclRejInd#
						</isNotEqual>
					</isNotEmpty>			
		ORDER BY B.PPK_TYPE ASC, to_char(b.cr_date,'DDMMYYHH24MI') DESC
	</select>
	<select id="Export_selecteRCLHeaderById" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	<![CDATA[
 	SELECT hd.SCREENING_METHOD screeningMethod,hd.RACSF_CODE screenUnderRacsfCode,hd.REMARKS remarks,
 	  hd.EXEMPTED_REASON exemptedReason,hd.RA_TYPE rakcType,hd.RACSF_TRK_NUMBER truckNo,hd.DEDICATED_PERSON personInCab,
 	  hd.SCREENING_OPTION racfRadioOption,hd.SCREENING_METHOD newScreeningMethod,hd.EXEMPTED_REASON newExemptedReason,hd.RA_TYPE newRakcType,
 	  hd.ELI_PI_NUM as newEliPINumer,hd.ELM_PI_NUM  as newElmPINumer,
 	  (SELECT DTL.code_desc FROM MAST_CODE_HD HD,MAST_CODE_DTL DTL where HD.code = DTL.CODE_TYPE AND HD.code = 'SCREENING_METHOD' AND DTL.CODE = hd.SCREENING_METHOD ) as screeningMethodGLS,
	  (SELECT DTL.code_desc FROM MAST_CODE_HD HD,MAST_CODE_DTL DTL where HD.code = DTL.CODE_TYPE AND HD.code = 'EXEMPTED' AND DTL.CODE = hd.EXEMPTED_REASON ) as exemptedReasonGLS,
	  (SELECT DTL.code_desc FROM MAST_CODE_HD HD,MAST_CODE_DTL DTL where HD.code = DTL.CODE_TYPE AND HD.code = 'RA_KC_TYPE' AND DTL.CODE = hd.RA_TYPE ) as rakcTypeGLS,
 	  
 	  substr(hd.pre_rcl_no,1,4)||'-'||substr(hd.pre_rcl_no,5) AS preRclNoFormat,rcl.rcl_no as rclNo,hd.pre_rcl_no as preRclNo, HD.status as status, HD.carr_code as carr, hd.awb_no as awbNo,  hd.ppk_type as rclType, hd.awb_pfx, 
 	  hd.awb_dest as destination,rcl.status as rclStatus,
     hd.dummy_awb_yn as dummyAWBNo, hd.ttl_pcs as pieces, TRIM(TO_CHAR(nvl(hd.ttl_wt,0), '9999999990D9')) as weight, to_char(hd.CR_DATE,'ddmonyy') as rclSubmissionDate , hd.uld_type as uldType, hd.uld_no as uldSeqNo,
     hd.uld_carr as uldCarrier, hd.uld_key as uldNo,hd.uld_key as oldUldNo, hd.contr_code as contourCode, hd.cust_no as custNo, hd.qcp_ind as qcpIndicator, hd.qcp_contact_person as qcp_contactPerson,
     hd.qcp_contact_no as qcp_contactNo, hd.qcp_fax_no as qcp_faxNo, hd.qcp_pcs as qcp_pcs, hd.qcp_wt as qcp_wt, hd.qcp_goods_desc as qcp_goods_desc,hd.RMK as remarks,
     to_char(hd.qcp_delv_date,'ddmonyy') as qcp_delivery_date, hd.qcp_delv_time as qcp_delv_time, hd.truck_no1 as truckNo1, hd.truck_no2 as truckNo2, hd.truck_no3 as truckNo3 ,
     hd.truck_no4 as truckNo4, hd.truck_no5 as truckNo5,HD.TR_TYPE as trType, HD.TR_STATUS as trStatus,HD.CR_USER_ID as createdUserId,HD.CR_DATE as createdDate,
     customer.code_desc as agentName,customer.co_iata_code as iataCode,
     SUBSTR(TRIM(hd.AWB_NO),1,3)||'-'||SUBSTR(TRIM(hd.AWB_NO),4) awbNoDisplay ,hd.SPL_CODE1 as splCode1, hd.SPL_CODE2 as splCode2, hd.SPL_CODE3 as splCode3,hd.SPL_LOAD_REQ as splLoadReqCode,
     (Select code_desc from MAST_CODE_DTL where code_type='SPL_LOAD_REQUIREMENT' and code= hd.SPL_LOAD_REQ   ) as splLoadReq,
     hd.CONTENT as content,to_char(hd.ACT_ACC_DATE,'DDMONYY') as accpTime,SUBSTR(TRIM(hd.ACT_ACC_TIME),1,2) as accpTimeHrs ,SUBSTR(TRIM(hd.ACT_ACC_TIME),3) as accpTimeMin,
     to_char(hd.awb_date,'DDMONYY') as awbDate,
     hd.RCL_PCS as rclPieces,hd.RCL_WT as rclWeight,rcl.ACCPT_MODE as accpMode,customer.CERTIFIED_YN as agentCertified,
     SUBSTR(TRIM(hd.AWB_NO),1,3)||'-'||SUBSTR(TRIM(hd.AWB_NO),4) awbNoDisplay ,hd.SPL_CODE1 as splCode1, hd.SPL_CODE2 as splCode2, hd.SPL_CODE3 as splCode3,
     hd.CONTENT as content,hd.RCL_WT as rclWeight,to_char(hd.ACT_ACC_DATE,'DDMONYY') as accpTime,hd.ACT_ACC_TIME as accpTimeHrs,hd.uld_key as oldUldNo,hd.GROSS_WT as grossWeight,
     TO_CHAR(hd.CR_DATE,'YYYYMMDDHH24MI') as glsDate,
     WEIGHT_SENT_BY_GLS AS weightSentByGLS,HD.securenet_serial_no as secSerialNo,
     hd.SECURENET_COUNT as secSerialCount,
 hd.ELI_YN as eliYN,
     hd.ELI_YN as hideeliYN,
	 hd.ELI_PI_NUM as eliPINumer,
	 hd.ELM_YN as hideelmYN,
	 hd.ELM_YN as elmYN,
	 hd.ELM_PI_NUM  as elmPINumer,
	 hd.DC_NOTICE as discNotice,
	 hd.BU_PERSON_NAME as buPersonName,
     NVL(hd.BKD_IND,'N') booked,hd.PR_AWB_NO primaryAWB, hd.BK_FLT_KEY bookFlight,to_char(hd.BK_FLT_DATE,'DDMONYY') bookFlightDate,
     (SELECT TRANS_NAME  FROM IMAGE_STORE where TRANS_TYPE = 'ERCL' and TRANS_NO = hd.PRE_RCL_NO and rownum =1) as transactionId,
     NVL(hd.carr_rf,'NA') carrierRF,
	    hd.VKC_CODE as vkcCode,
		hd.SEAL_NUM1 as sealNum1,
		hd.SEAL_NUM2 as sealNum2,
		hd.SEAL_NUM3 as sealNum3,
		hd.SEAL_NUM4 as sealNum4,
		hd.SEAL_NUM5 as sealNum5,
		hd.SEAL_NUM6 as sealNum6,
		hd.SEAL_NUM7 as sealNum7,
		hd.SEAL_NUM8 as sealNum8,
		hd.SEAL_NUM9 as sealNum9,
	    (CASE WHEN (SELECT COUNT(1) FROM EXP_PRE_RCL_PI_DTL PIDTL WHERE PIDTL.PRE_RCL_NO=HD.PRE_RCL_NO) > 0 THEN 'Y' ELSE 'N' END) AS piStatus,
	    (CASE WHEN NVL(hd.eli_yn,'N')= 'N' and NVL(hd.elm_yn,'N')= 'N' then 'Y' 
      	ELSE (CASE WHEN hd.STATUS = 'CONFIRMED' THEN (CASE WHEN NVL(hd.UPD_BATTERY_LDG_FORM,'N') = 'Y' then 'N' ELSE 'Y' END) ELSE 'N' END) END) AS ldgFormStatus				
     FROM EXP_PRE_RCL_HD hd,cust_company customer,exp_rcl_hd rcl
     ]]>
	 WHERE hd.pre_rcl_no=#preRclNo#
	 <isNotEmpty property="rclNo">
	 and rcl.rcl_no=#rclNo#
	 </isNotEmpty>
	 and hd.cust_no=customer.code 
	 <!-- (select code,code_desc from mast_code_dtl where code_type='SPL_LOAD_REQUIREMENT') code, and code.code(+)=hd.SPL_LOAD_REQ -->
   	and rcl.pre_rcl_no(+)=hd.pre_rcl_no
		and rownum = 1
	</select>
	<select id="Export_selecteRCLDetailBulkById_Enquire" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkDetailBO">	
		SELECT 'DIM' as diff, trim(to_char(A.LENGTH,'9990.99')) AS LENGTH, trim(to_char(A.WIDTH,'9990.99')) AS width,
		 trim(to_char(A.HEIGHT,'9990.99')) AS height, A.PCS as pieces ,0 as rclPcs,'' as rclNo,0 as rclWt,to_char ('' , 'DDMONYY hh24:mi')  as rclDate
        FROM EXP_PRE_RCL_DMN A, EXP_PRE_RCL_HD B
        WHERE B.PRE_RCL_NO  = A.PRE_RCL_NO 
        AND B.PRE_RCL_NO = #preRclNo#		
		UNION ALL
         SELECT 'INFO' as diff, null as LENGTH, null as width, null as height, 0,B.RCL_PCS as rclPcs ,B.RCL_NO as rclNo, B.RCL_WT as rclWt, to_char (B.RCL_DATE , 'DD MON YY hh24:mi') as rclDate
        FROM EXP_RCL_HD B 
        WHERE B.PRE_RCL_NO = #preRclNo# 
        <isNotEmpty property="rclNo">
	 		and B.RCL_NO=#rclNo#
	 	</isNotEmpty>       
        UNION ALL
	    SELECT 'SUMPIECES' as diff, null as LENGTH, null as width, null as height, sum(A.PCS) as pieces ,0 as rclPcs,'' as rclNo,0 as rclWt,to_char ('' , 'DD MON YY hh24:mi')  as rclDate
        FROM EXP_PRE_RCL_DMN A, EXP_PRE_RCL_HD B
        WHERE B.PRE_RCL_NO  = A.PRE_RCL_NO 
        AND B.PRE_RCL_NO = #preRclNo#
        UNION ALL
      	SELECT 'RCLSUMPIECES' as diff, null as LENGTH, null as width, null as height, 0,B.RCL_PCS as rclPcs ,B.RCL_NO as rclNo, B.RCL_WT as rclWt, to_char (B.RCL_DATE , 'DD MON YY hh24:mi') as rclDate
        FROM EXP_RCL_HD B
        WHERE B.PRE_RCL_NO = #preRclNo#
        <isNotEmpty property="rclNo">
	 		 and B.RCL_no=#rclNo#  
	 	</isNotEmpty>        
     </select>
     <select id="Export_selecteRCLDetailMixedById_Enquire" 	parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" 	resultClass="cargo.cms.export.bo.ERCLMixedPrepackDetailBO">
		select 'NOSUM'as diff, SUBSTR(TRIM(AWB_NO),1,3)||'-'||SUBSTR(TRIM(AWB_NO),4) as awbNo, DEST as dest, PCS as pieces, trim(to_char(WEIGHT,'9999990.99')) as weight,QCP_IND  AS qcpIndicator,
		QCP_GOODS_DESC as qcp_goods_desc,SPL_CODE1 AS splCode1,SPL_CODE2 AS splCode2,SPL_CODE3 AS splCode3,SPL_CODE4 AS splCode4,SPL_CODE5 AS splCode5,SPL_CODE6 AS splCode6,SPL_CODE7 AS splCode7,SPL_CODE8 AS splCode8,SPL_CODE9 AS splCode9,
		   (decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '', ','))
		|| decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '', ','))
		|| decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '', ','))
		|| decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '', ','))
		|| decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '', ','))
		|| decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '', ','))
		|| decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '', ','))
		  || decode(spl_code8, null, '', spl_code8 || decode(spl_code9, null, '', ','))
		|| decode(spl_code9, null, '', spl_code9)) as splCode
		FROM   exp_pre_rcl_brkdn 
		WHERE  pre_rcl_no= #preRclNo#
		and not exists (select null 
		                from   EXP_RCL_BRKDN 
		                where  rcl_no = #rclNo#)
		union 
		SELECT 'NOSUM'as diff, SUBSTR(TRIM(AWB_NO),1,3)||'-'||SUBSTR(TRIM(AWB_NO),4) as awbNo, DEST as dest, PCS as pieces, trim(to_char(WEIGHT,'9999990.99')) as weight,SEC_CHECK  AS qcpIndicator,
		CONTENT as qcp_goods_desc,SPL_CODE1 AS splCode1,SPL_CODE2 AS splCode2,SPL_CODE3 AS splCode3,SPL_CODE4 AS splCode4,SPL_CODE5 AS splCode5,SPL_CODE6 AS splCode6,SPL_CODE7 AS splCode7,SPL_CODE8 AS splCode8,SPL_CODE9 AS splCode9,
		   (decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '', ','))
		|| decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '', ','))
		|| decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '', ','))
		|| decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '', ','))
		|| decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '', ','))
		|| decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '', ','))
		|| decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '', ','))
		  || decode(spl_code8, null, '', spl_code8 || decode(spl_code9, null, '', ','))
		|| decode(spl_code9, null, '', spl_code9)) as splCode
		FROM   EXP_RCL_BRKDN 
		where  rcl_no = #rclNo#
		union  
		select 'SUM'as diff, null as awbNo, null dest, sum(pcs) pieces, trim(to_char(sum(weight),'9999990.99')) weight,'' AS qcpIndicator,null as qcp_goods_desc,'' AS splCode1,'' AS splCode2,'' AS splCode3,'' AS splCode4,'' AS splCode5,'' AS splCode6,'' AS splCode7,'' AS splCode8,'' AS splCode9,'' as splCode
		from   (select PCS, weight
				FROM   exp_pre_rcl_brkdn 
				WHERE  pre_rcl_no= #preRclNo#
				and not exists (select null 
				                from   EXP_RCL_BRKDN 
				                where  rcl_no = #rclNo#)
				union all
				SELECT PCS, weight
				FROM   EXP_RCL_BRKDN 
				where  rcl_no = #rclNo#)
		 
	 </select>
	 <select id="Exp_seleRCLInfoMixedById_Enquire" 	parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO"  	resultClass="cargo.cms.export.bo.ERCLMixedPrepackDetailBO">		
		SELECT 'RCLINFO' AS diff, RCL_NO AS rclNo,TO_CHAR(RCL_DATE, 'DDMONYY hh24:mi') AS rclDate,RCL_PCS rclPcs,trim(to_char(RCL_WT,'9999990.99')) AS rclWt
   		FROM EXP_RCL_HD
  		WHERE RCL_NO = #rclNo#
	 </select>
	  <select id="geteRCLPIStatus" parameterClass="java.lang.String" resultClass="java.lang.String">
	 <![CDATA[
	 	SELECT (CASE WHEN (SELECT COUNT(1) FROM EXP_PRE_RCL_PI_DTL PIDTL WHERE PIDTL.PRE_RCL_NO=#PARAM#) > 0 THEN 'Y' ELSE 'N' END) FROM DUAL
	 	 ]]>
	 </select>
<select id="geteRCLPIULDStatus" parameterClass="map" resultClass="java.lang.Integer">
	 <![CDATA[
	 	SELECT COUNT(1) FROM EXP_PRE_RCL_HD HD,EXP_PRE_RCL_DTL DTL
		WHERE DTL.PRE_RCL_NO = HD.PRE_RCL_NO AND DTL.ULD_KEY = #uldKey#
		AND HD.PPK_TYPE='P' 
		AND HD.PRE_RCL_NO = #preRclNo#		
	 	 ]]>
	 </select>
	 <select id="findPrepackULDList" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	 select uld_key as uldNo from exp_pre_rcl_dtl where pre_rcl_no=#PARAM#
	 </select>
		 <select id="Export_selecteRCLDetailPrepackById_Enquire" 	parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" 	resultClass="cargo.cms.export.bo.ERCLPrepackDetailBO">
		SELECT 'PRE' as diff,
        A.pcs as pieces,   
        trim(to_char(A.gross_wt,'9999990.99')) as grossWeight,   
        A.contr_code as contorCode,
        A.uld_key as ULDNo ,to_char ('' , 'DD MON YY hh24:mi') AS rclDate, ' ' AS rclNo ,0 AS rclPcs,null AS rclWt,
        A.NET_WT AS netWeight, A.TARE_WT AS tareWeight,A.securenet_serial_no as secSerialNo,
        A.SECURENET_COUNT as secSerialCount,
        A.ELI_YN as eliYN,
		A.ELI_PI_NUM as eliPINumer,
		A.ELM_YN as elmYN,
		A.ELM_PI_NUM  as elmPINumer
        FROM EXP_PRE_RCL_DTL A
        WHERE A.pre_rcl_no= #preRclNo# 
        UNION ALL
        SELECT 'MRC' as diff,0,null as grossWeight,'','', to_char (B.RCL_DATE , 'DD MON YY hh24:mi')  as rclDate,B.RCL_NO as rclNo, B.RCL_PCS as rclPcs, (select trim(to_char(sum(gross_wt),'9999990.99')) from   exp_rcl_dtl where rcl_no = #rclNo#) as rclWt,
        NULL AS netWeight, NULL AS tareWeight,'','','','','',''
        FROM   EXP_RCL_HD B
        WHERE B.RCL_NO = #rclNo#
        UNION ALL
   		SELECT 'SUMMRC' AS diff, 0,null as grossWeight,'','','' AS rclDate,''  AS rclNo ,SUM(B.PCS) AS rclPcs,trim(to_char(SUM(B.GROSS_WT),'9999990.99')) AS rclWt,
   		NULL AS netWeight, NULL AS tareWeight,'','','','','',''
   		FROM EXP_RCL_DTL B
  		WHERE B.RCL_NO = #rclNo#
  		UNION ALL
   		SELECT 'SUMPRE' AS diff,SUM(A.pcs) AS pieces,trim(to_char(SUM(A.gross_wt),'9999990.99')) AS grossWeight,'' AS contorCode ,'' AS ULDNo,'' AS rclDate,'' AS rclNo,0 AS rclPcs,null AS rclWt,
   		NULL AS netWeight, NULL AS tareWeight,'','','','','',''   		
   		FROM EXP_PRE_RCL_DTL A
  		WHERE A.pre_rcl_no= #preRclNo#   		
 	 </select>
	<!-- Enquire eRCL Pre Decl (Internal)::End --> 



	<!--  Added By Surendra Gollapalli on 16 March 2011 for Iteration 3a START Maintain AWB Remarks START -->
	<select id="getMaintainAWBRemarksList" parameterClass="cargo.cms.export.bo.MtnAWBRmkBO" resultClass="cargo.cms.export.bo.MtnAWBRmkBO">
		SELECT 
			rmk.SEQ_NO AS seqNo,
			rmk.AWB_NO AS awbNo,			
			substr(rmk.AWB_NO,0,3) as awbPfx,
			substr(rmk.AWB_NO,4) as awbSfx,
			rmk.RMK_TYPE    AS rmkType,			
			rmk.RMK          AS remarks,			
			rmk.RMK          AS oldRemarks,			
		TO_CHAR(rmk.LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModDate,	
		TO_CHAR(rmk.AWB_DATE , 'DDMONYY') AS awbDate		
		 FROM AWB_RMK rmk
		 where 1= 1 	
		<isNotEmpty prepend="AND" property="awbNo">
			rmk.AWB_NO = #awbNo# 
		</isNotEmpty>  
		 ORDER BY rmk.SEQ_NO
	</select>
	
	<update id="Export_UpdateAWBRemarks"  parameterClass="cargo.cms.export.bo.MtnAWBRmkBO">
		UPDATE  AWB_RMK 
		SET		RMK = #remarks#,lm_date = sysdate,TR_TYPE='AWBRU'
		WHERE  AWB_NO=#awbNo# AND AWB_DATE = to_date(#awbDate#,'DDMONYY')		
	</update>
	
	<select id="getMaintainAWBRemarksListAll" parameterClass="cargo.cms.export.bo.MtnAWBRmkBO" resultClass="cargo.cms.export.bo.MtnAWBRmkBO">
	select a.* from 
    ( SELECT rmk.SEQ_NO AS seqNo  ,
            rmk.AWB_NO AS awbNo  ,
            SUBSTR(rmk.AWB_NO,0,3) AS awbPfx ,
            SUBSTR(rmk.AWB_NO,4) AS awbSfx ,
            rmk.RMK_TYPE  AS rmkType,
            rmk.RMK AS remarks,
            case when awb_type = 'I' then 
                (select CAR_CREATED from imp_car_shp 
                    where awb_no = rmk.AWB_NO  and awb_date = rmk.AWB_DATE and rownum = 1)
            else awb.car_yn end AS carInd,
            TO_CHAR(rmk.LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModDate
            FROM AWB_RMK rmk
            LEFT JOIN AWB awb
            ON rmk.AWB_NO = awb.AWB_NO
            AND rmk.awb_date   =awb.awb_date 
	 	<isEmpty property="awbNo">
			<isNotEmpty property="loginCarrier">
                 WHERE     (substr(rmk.AWB_NO,0,3) IN (SELECT CODE FROM MAST_AWB_PREFIX WHERE CARR_CODE= #loginCarrier#) 
     			   or substr(rmk.AWB_NO,0,3) IN (SELECT CODE FROM MAST_AWB_PREFIX WHERE CARR_CODE IN(
      											 SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #loginCarrier#)))                                        
             </isNotEmpty> 
		</isEmpty> ) a where nvl(carInd,'N') = 'N'
		   ORDER BY seqNo
	</select>
	
	<select id="checkValidPrefix" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) from mast_awb_prefix WHERE code = #awbPfx#
	</select>
	
	<select id="checkAWBExist" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) from AWB WHERE awb_no = #awbNo# 
	</select>
	
	<select id="checkCarExistfor_Exp" parameterClass="map" resultClass="java.lang.Integer">
		SELECT COUNT(1) from AWB WHERE awb_no = #awbNo# and awb_date = #awbDate# and awb_type = #awbType# and car_yn = 'Y'
	</select>
	
	<select id="checkCarExistfor_Imp" parameterClass="map" resultClass="java.lang.Integer">
		SELECT COUNT(1) from Imp_CAR_SHP WHERE awb_no = #awbNo# and awb_date = #awbDate# and car_created = 'Y' 
	</select>
	
	<insert id="insertAWBRemarks" parameterClass="cargo.cms.export.bo.MtnAWBRmkBO">
		INSERT INTO AWB_RMK (
			SEQ_NO,AWB_NO, RMK_TYPE,AWB_DATE,RMK ,CR_USER_ID,CR_DATE, LM_USER_ID,LM_DATE,TR_TYPE)
		values(
			AWB_RMK_SEQ.nextval,
			#awbNo#,
			 'AWB_RMK',
			 NVL(TO_DATE(#awbDate#,'DDMONYY'),TO_DATE(TO_CHAR(SYSDATE,'DDMONYY'),'DDMONYY')),			
			 #remarks#,
             #crUserId#,
			 sysdate,
			 #crUserId#,
			 sysdate,
			 'MAWBR')
	</insert>
	<select id="checkAWBExistInAWBRMK" parameterClass="map" resultClass="java.lang.Integer">
		SELECT COUNT(1) from AWB_RMK WHERE awb_no = #awbNo#
	</select>	
	
	<select id="checkForIndicator" parameterClass="map" resultClass="java.lang.String">
		SELECT car_yn from AWB WHERE awb_no = #awbNo# and awb_date = #awbDate#
	</select>	
	<select id="checkAwbBelongsToImport" parameterClass="map" resultClass="java.lang.String">
		SELECT awb_type from AWB WHERE awb_no = #awbNo# and awb_date = #awbDate#
	</select>
	<select id="checkAWBExistinAWBTable" parameterClass="map" resultClass="java.lang.Integer">
		SELECT COUNT(1) from AWB WHERE awb_no = #awbNo#  and awb_date = #awbDate#
	</select>
	
	<select id="sqlgetAWBLockUnlockStatus" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.MtnAWBRmkBO">
		select 
			SUBSTR(AWB_NO,0,3)||'-'|| SUBSTR(AWB_NO,4) AS awbNo,
			SUBSTR(AWB_NO,0,3) AS awbPfx ,
            SUBSTR(AWB_NO,4) AS awbSfx ,
			TO_CHAR(AWB_DATE,'DDMONYY') as awbDate,
 			EXP_AWB_LOCK as lockStatus,
 			EXP_AWB_LOCK as oldLockStatus,
 			LM_USER_ID as lockUserId,
 			TO_CHAR(LM_DATE,'DDMONYY') as lockDate
			from awb 
		    where awb_no = #awbNo#
			and car_yn='N' 
			and awb_type='E'
   </select>
   
   <select id="sqlgetAWBLockUnlockStatus1" parameterClass="map" resultClass="cargo.cms.export.bo.MtnAWBRmkBO">
		select 
			EXP_AWB_LOCK as lockStatus,
 			EXP_AWB_LOCK as oldLockStatus,
 			LM_USER_ID as lockUserId,
 			TO_CHAR(LM_DATE,'DDMONYY') as lockDate
			from awb 
		    where awb_no = #awbNo#
		    and awb_date = #awbDate#
			and car_yn='N' 
			and awb_type='E'
   </select>
	
	<insert id="insertAwbLockStatusinAWB" parameterClass="cargo.cms.export.bo.MtnAWBRmkBO">
		INSERT INTO 
			AWB(AWB_NO,AWB_DATE,AWB_TYPE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,EXP_AWB_LOCK,AIRLN_RMK,TR_TYPE) 
		VALUES 
			   (#awbNo#,#awbDate#,'E',#userID#,sysdate,#userID#,sysdate,'Y',(SELECT RMK FROM AWB_RMK where AWB_NO = #awbNo# and awb_date = #awbDate# and rownum = 1),'AWBLCK')
	</insert>
	
	<update id="updateAwbLockStatusinAWB" parameterClass="cargo.cms.export.bo.MtnAWBRmkBO">
		update AWB set EXP_AWB_LOCK = 'Y',LM_USER_ID = #userID#,LM_DATE=sysdate,TR_TYPE='AWBLCK'
		where AWB_NO = #awbNo# and  AWB_DATE=#awbDate#
	</update>
	
<insert id="insertAwbUnLockStatusinAWB" parameterClass="cargo.cms.export.bo.MtnAWBRmkBO">
		INSERT INTO 
			AWB(AWB_NO,AWB_DATE,AWB_TYPE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,EXP_AWB_LOCK,TR_TYPE) 
		VALUES 
			   (#awbNo#,#awbDate#,'E',#userID#,sysdate,#userID#,sysdate,'N','AWBLCK')
	</insert>	
	<update id="updateAwbUnLockStatusinAWB" parameterClass="cargo.cms.export.bo.MtnAWBRmkBO">
		update AWB set EXP_AWB_LOCK = 'N',LM_USER_ID = #userID#,LM_DATE=sysdate,TR_TYPE='AWBLCK'
		where AWB_NO = #awbNo# and  AWB_DATE=#awbDate#
	</update>
	
	
	<!--  Added By Surendra Gollapalli on 16 March 2011 for Iteration 3a START Maintain AWB Remarks START -->
	
   <!--  Added By Santosh Desai for Iteration 3a House Mainfest START -->
        <insert id="insertExportAWBImage" parameterClass="java.util.HashMap">
		INSERT INTO 
			AWB_IMAGE 
			(SEQ_NO, AWB_IMAGE_NAME, AWB_NO, AWB_DATE, HAWB_NO) 
		VALUES 
			(AWB_IMAGE_SEQ.NEXTVAL, #trnsId#, #awbNo#, TO_DATE(#awbDate#, 'DDMONYY'), #hawbNo#)
	</insert>	 
	
	<parameterMap class="cargo.cms.edi.bo.EdiFhlHawb" id="hawbImageMap">		
		<parameter property="imageSize" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="imageName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="sessionId" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="imagePath" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="hawbImageSesId" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
	</parameterMap>
	<insert id="insertFWImageStore" parameterMap="hawbImageMap">
		<![CDATA[
			INSERT INTO FW_IMAGE_STORE(
			IMG_ID,	
			IMG_SIZE, IMG_NAME, IMG_SESSION_ID, IMG_PATH, 
			IMG_UPLOAD_DATE,
			IMG_HAWB_SESSION_ID
			)
			VALUES(
			FW_IMAGE_SEQ.NEXTVAL, 
			?, ?, ?, ?, 
			CURRENT_TIMESTAMP,?
			)
		]]>
	</insert>
	
	<parameterMap class="cargo.cms.edi.bo.EdiFhlHawb" id="hawbNonImageMap">		
		<parameter property="imageSize" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="imageName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="sessionId" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="imagePath" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="hawbImageSesId" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
	</parameterMap>
	<insert id="insertFWNonImageStore" parameterMap="hawbNonImageMap">
		<![CDATA[
			INSERT INTO FW_IMAGE_STORE(
			IMG_ID,				 			
			IMG_SIZE, IMG_NAME, IMG_SESSION_ID, IMG_PATH, 
			IMG_UPLOAD_DATE,
			IMG_HAWB_SESSION_ID
			)
			VALUES(
			FW_IMAGE_SEQ.NEXTVAL, 
			?, ?, ?, ?, 
			CURRENT_TIMESTAMP,?
			)
		]]>
	</insert>
	
	<update id="updateFWImageStore" parameterClass="java.util.HashMap">
		update FW_IMAGE_STORE
		set IMG_SESSION_ID = #trnsId#,IMG_HAWB_SESSION_ID = #hawbTrnsId#
		where 
		IMG_SESSION_ID in(
		   select B.IMG_SESSION_ID
		   FROM 
		   AWB_IMAGE A,
		   FW_IMAGE_STORE B
		   WHERE 
		   A.AWB_IMAGE_NAME = B.IMG_SESSION_ID AND
		   A.AWB_NO = #awbNo# AND
		   AWB_DATE = TO_DATE(#awbDate#,'DDMONYY'))
		   OR  IMG_SESSION_ID = #newTrnsId#
	</update>
	
	
	<select id="getAwbImageName" parameterClass="java.util.HashMap" resultClass="java.lang.String">				
		select awb_image_name from awb_image 
		where awb_no = #awbNo#
		and awb_date = to_date(#awbDate#,'DDMONYY')
		and rownum=1		
	</select>	
	
	<select id="getOldTransactionID" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		select AWB_IMAGE_NAME FROM AWB_IMAGE WHERE seq_no = (SELECT MAX(SEQ_NO) FROM AWB_IMAGE WHERE AWB_NO = #awbNo# AND AWB_DATE = #awbDate#)
	</select>
		
	<!-- Changed for QR -->
	<select id="checkFHLMessageFreeze" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
		SELECT COUNT(1) FROM START_PREP_DTL WHERE AWB_NO = #awbNo#  AND AWB_DATE = #awbDate# AND MSG_TYPE = #messageType# 
		AND FHL_FRZ_DATE IS NOT NULL AND FHL_FRZ_USER_ID IS NOT NULL
	</select>
	
	<select id="checkFlightFrozenForAWB" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
			select count(1) 
			from imp_car_shp a, flt_opr_events b, awb
			where a.flt_key = b.flt_key and a.flt_date = b.sch_date
			and a.awb_no = awb.awb_no and a.awb_date = awb.awb_date 
			and awb.awb_type = 'I'
			and a.awb_no = #awbNo# and a.awb_date = #awbDate#
			and b.flt_type = 'A' and b.freeze_ind = 'Y' and awb_closed_yn = 'N'
	</select>
	
	<select id="checkDocReceivedForAWB" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
		select count(1) 
		from exp_doc_recd a, awb b where a.awb_no = b.awb_no 
		and a.awb_date = b.awb_date
		and b.awb_type = 'E' and b.awb_closed_yn = 'N' 
        and b.awb_no = #awbNo# and b.awb_date = #awbDate# and a.AWB_FRZ_YN = 'Y'
	</select>
	
	
	<select id="fetchAwbDatePkgCommon" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(pkg_common.get_awb_date(#awbNo#,#awbType#), TRUNC(SYSDATE)) FROM DUAL
	</select>

	<select id="checkDocReceived" parameterClass="map" resultClass="java.lang.String" >
		select count(1) from exp_doc_recd a,awb b where a.awb_no = b.awb_no and a.awb_date = b.awb_date
		and b.awb_closed_yn='N' and b.awb_no = #AWB_NO# 
		and b.awb_date = to_date(#AWB_DATE#,'DDMONYY') 
		and a.AWB_FRZ_YN='Y'
	</select>
	
	<select id="checkCarCreatedHouseMnfst" parameterClass="map" resultClass="java.lang.String" >
		select count(1) from awb where awb_no = #AWB_NO# and awb_date = to_date(#AWB_DATE#,'DDMONYY') and awb_type=#AWB_TYPE# and car_yn='Y'
	</select>
	<select id="HouseMnfstCustomsSubmission" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
	      SELECT COUNT(1) FROM (SELECT T1.CC_CODE FROM V_CST_IMP_CC_CODE_AWB T1,MAST_CONSTRAINT_CODE T2 
                WHERE T1.CC_CODE = T2.CODE AND AWB_NO = #PARAM# AND NVL(HAWB_NO, '000000000000000000') = '000000000000000000'
                ORDER BY recv_date DESC, priority DESC) where CC_CODE != 'ND' and rownum = 1
    </select>
	<!-- Changed for QR -->
	<!--<select id="checkFltFrozen" parameterClass="java.lang.String" resultClass="java.lang.String">
		select count(1)
		from imp_car_shp a, flt_opr_events b, awb
		where a.flt_key = b.flt_key and a.flt_date = b.sch_date
		and a.awb_no = awb.awb_no and a.awb_date = awb.awb_date
		and a.awb_no =  #AWB_NO# 		
		and b.flt_type='A' and b.freeze_ind ='Y' and awb_closed_yn = 'N'
	</select>

	--><select id="fetchAmendHawbNoCnt" parameterClass="cargo.cms.edi.bo.EdiFhlBO" resultClass="java.lang.String">
<!-- As told by XXY SELECT count(B.HAWB_NO) CNT
		FROM EDI_FHL A,EDI_FHL_HAWB B WHERE A.TR_NO = B.TR_NO AND A.AWB_NO =#AWB_NO#
		 AND A.FHL_OWNER  = (SELECT CUST_NO FROM SEC_USER WHERE CODE =#FHL_OWNER#) -->
		SELECT count(B.HAWB_NO) CNT FROM EDI_FHL A,EDI_FHL_HAWB B  WHERE A.TR_NO = B.TR_NO 
   AND A.AWB_NO =#AWB_NO# and A.AWB_DATE = #AWB_DATE#
   AND (UPPER(B.FHL_OWNER) =(SELECT CUST_NO FROM SEC_USER WHERE UPPER(CODE) = UPPER(#FHL_OWNER#)) OR UPPER(B.FHL_OWNER) = UPPER(#FHL_OWNER#))
	</select>
	
	<select id="fetchAmendHouseList" parameterClass="cargo.cms.edi.bo.EdiFhlBO" resultClass="cargo.cms.edi.bo.EdiFhlHawb" >
<!--	SELECT A.TR_NO,B.DOC_LINE_NO,B.HAWB_NO,B.MANIFEST_DESC,B.HAWB_ORG,B.HAWB_DEST, B.HAWB_PCS||'/'||TRIM(TO_CHAR(
		B.HAWB_NET_WT,'9999999.0')) AS tmpPcsWt,DECODE(A.SI_TYPE,'AIMS','AIMS','ISACS','AIMS','FHL_I','SITA','TX_HM','TRAXON',
		'S','CMS') AS tmpSrcDispName,     DECODE(A.SI_TYPE,'AIMS',C.CODE_DESC,'ISACS',C.CODE_DESC,'TX_HM',C.CODE_DESC,'') AS tmpCustName,
		 DECODE(A.SI_TYPE,'S',B.LM_USER_ID,'') AS LM_USER_ID  
		 FROM EDI_FHL A,EDI_FHL_HAWB B,CUST_COMPANY C
		 WHERE A.TR_NO = B.TR_NO AND A.AWB_NO =#AWB_NO# AND A.FHL_OWNER = C.CODE
		 AND A.FHL_OWNER  = (SELECT CUST_NO FROM SEC_USER WHERE CODE =#FHL_OWNER#) ORDER BY HAWB_NO-->
		SELECT A.TR_NO,B.DOC_LINE_NO,B.HAWB_NO,B.MANIFEST_DESC,B.HAWB_ORG,B.HAWB_DEST,
       B.HAWB_PCS||'/'||TO_CHAR(B.HAWB_NET_WT,'9999999.99') AS tmpPcsWt,
	   B.SOURCE AS tmpSrcDispName,C.CODE_DESC AS tmpCustName,
	   DECODE(B.SOURCE,'CMS',B.LM_USER_ID,'') AS LM_USER_ID,SHPR_NAME AS SHPR_NAME,CSGNE_NAME AS CSGNE_NAME
  FROM EDI_FHL A,EDI_FHL_HAWB B,CUST_COMPANY C  WHERE A.TR_NO = B.TR_NO     AND A.AWB_NO =#AWB_NO# AND A.AWB_DATE = #AWB_DATE#
   AND B.FHL_OWNER = C.CODE(+)
   AND (UPPER(B.FHL_OWNER) =(SELECT CUST_NO FROM SEC_USER WHERE UPPER(CODE) = UPPER(#FHL_OWNER#)) OR UPPER(B.FHL_OWNER) = UPPER(#FHL_OWNER#))
 ORDER BY HAWB_NO
	</select>
	
	<!-- <select id="fetchShpDropdownList" parameterClass="java.util.HashMap" resultClass="cargo.cms.edi.bo.CustAddressBookBO">
	  select a.AGENT_ID,a.CUSTOMER_NAME,a.ADD1,a.ADD2,a.ADD3,a.ADD4,a.ADD5,a.CITY_CODE,a.CTRY_CODE,
		a.STATE_CODE,a.PIN_CODE from CUST_ADDRESS_BOOK a JOIN CUST_COMPANY b on a.CUSTOMER_NAME=b.CODE_DESC 
    where b.SHPR_YN='Y' and a.AGENT_ID=(select cust_no from 
		sec_user where code =#CODE# and user_type='E')  order by a.CUSTOMER_NAME asc
		</select>
	
	<select id="fetchConsDropdownList" parameterClass="java.util.HashMap" resultClass="cargo.cms.edi.bo.CustAddressBookBO">
	  select a.AGENT_ID,a.CUSTOMER_NAME,a.ADD1,a.ADD2,a.ADD3,a.ADD4,a.ADD5,a.CITY_CODE,a.CTRY_CODE,
		a.STATE_CODE,a.PIN_CODE from CUST_ADDRESS_BOOK a JOIN CUST_COMPANY b on a.CUSTOMER_NAME=b.CODE_DESC 
    where b.CONS_YN='Y' and a.AGENT_ID=(select cust_no from 
		sec_user where code =#CODE# and user_type='E')  order by a.CUSTOMER_NAME asc
		</select> -->
	<select id="fetchShpDropdownList" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select count(*) from CUST_ADDRESS_BOOK where AGENT_ID=(select cust_no from 
		sec_user where code = #CODE# and user_type='E') AND CUSTOMER_NAME LIKE UPPER(#SEARCHNAME#||'%')		
	</select>
	
	<select id="fetchAgentIdCustomer" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select AGENT_ID from CUST_ADDRESS_BOOK where CUSTOMER_NAME = #CNAME# AND AGENT_ID=(select cust_no from 
		sec_user where code = #CODE# and user_type='E') AND ROWNUM = 1	
	</select>
	
	<!-- <select id="fetchNfyDropdownList" parameterClass="java.util.HashMap" resultClass="cargo.cms.edi.bo.CustAddressBookBO">
		select AGENT_ID,CUSTOMER_NAME,ADD1,ADD2,ADD3,ADD4,ADD5,CITY_CODE,CTRY_CODE,
		STATE_CODE,PIN_CODE from CUST_ADDRESS_BOOK where AGENT_ID=(select cust_no from 
		sec_user where code = #CODE# and user_type='E') order by customer_name asc		
	</select> -->
	
	
	<select id="fetchAgentAddress" parameterClass="java.util.HashMap" resultClass="cargo.cms.edi.bo.CustAddressBookBO">
		select  
		AGENT_ID,CUSTOMER_NAME,ADD1,ADD2,ADD3,ADD4,ADD5,CITY_CODE,CTRY_CODE,
		STATE_CODE,PIN_CODE,
		CONTACT_ID1,CONTACT_ID2,CONTACT_ID3,CONTACT_ID4,CONTACT_ID5,
		CONTACT_NO1,CONTACT_NO2,CONTACT_NO3,CONTACT_NO4,CONTACT_NO5 
		from CUST_ADDRESS_BOOK where AGENT_ID=(select cust_no from 
		sec_user where code = #CODE# and user_type='E') and CUSTOMER_NAME=#CNAME#
	</select>
	
	<select id="checkAgentExists" parameterClass="cargo.cms.edi.bo.CustAddressBookBO" resultClass="java.lang.Integer">
		select COUNT(1) from CUST_ADDRESS_BOOK a where a.CUSTOMER_NAME=#CUSTOMER_NAME# and a.AGENT_ID=#AGENT_ID# 
	</select>
	
	<insert id="insertEdiShpAgtCne" parameterClass="cargo.cms.edi.bo.CustAddressBookBO" >
		insert into CUST_ADDRESS_BOOK (AGENT_ID,CUSTOMER_NAME,ADD1,ADD2,ADD3,ADD4,ADD5,CITY_CODE,CTRY_CODE,
		STATE_CODE,PIN_CODE,CR_DATE,CR_USER_ID,LM_DATE,LM_USER_ID,
		CONTACT_ID1,CONTACT_ID2,CONTACT_ID3,CONTACT_ID4,CONTACT_ID5,
	    CONTACT_NO1,CONTACT_NO2,CONTACT_NO3,CONTACT_NO4,CONTACT_NO5)
		values (#AGENT_ID#,#CUSTOMER_NAME#,#ADD1#,#ADD2#,#ADD3#,#ADD4#,#ADD5#,#CITY_CODE#,#CTRY_CODE#,
		#STATE_CODE#,#PIN_CODE#,SYSDATE,#createdUserId#,SYSDATE,#createdUserId#,
		#CONTACT_ID1#,#CONTACT_ID2#,#CONTACT_ID3#,#CONTACT_ID4#,#CONTACT_ID5#,
	    #CONTACT_NO1#,#CONTACT_NO2#,#CONTACT_NO3#,#CONTACT_NO4#,#CONTACT_NO5#)
	</insert>
	
	<update id="updateEdiShpAgtCne" parameterClass="cargo.cms.edi.bo.CustAddressBookBO">
		update CUST_ADDRESS_BOOK set add1=#ADD1#,add2=#ADD2#,add3=#ADD3#,add4=#ADD4#,add5=#ADD5#,CITY_CODE=#CITY_CODE#,
		ctry_code=#CTRY_CODE#,STATE_CODE=#STATE_CODE#,pin_code=#PIN_CODE#,LM_DATE=SYSDATE,LM_USER_ID=#createdUserId#,
		CONTACT_ID1=#CONTACT_ID1#,CONTACT_ID2=#CONTACT_ID2#,
		CONTACT_ID3=#CONTACT_ID3#,CONTACT_ID4=#CONTACT_ID4#,
		CONTACT_ID5=#CONTACT_ID5#,CONTACT_NO1=#CONTACT_NO1#,
		CONTACT_NO2=#CONTACT_NO2#,CONTACT_NO3=#CONTACT_NO3#,
		CONTACT_NO4=#CONTACT_NO4#,CONTACT_NO5=#CONTACT_NO5#
		where 
		AGENT_ID=#AGENT_ID# and CUSTOMER_NAME=#CUSTOMER_NAME#
	</update>
	
	<select id="fetchCustNo_transmit" parameterClass="java.util.HashMap" resultClass="cargo.cms.external.admin.bo.CompanyProfileBO" >
		select code as customerNo , CODE_DESC AS companyName , EMAIL1 as email1 , EMAIL2 as email2 ,  EMAIL3 as email3 ,EMAIL4 as email4 ,  
		EMAIL5 as email5 from cust_company 	where code in (select cust_no from sec_user a where a.CODE =#USERID#)
	</select>
	
	<select id="fetchCustNo" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		select cust_no from sec_user a where a.CODE =#USERID#		
	</select>
	
	<select id="checkFltFrozenCreate" parameterClass="cargo.cms.edi.bo.EdiFhlBO" resultClass="java.lang.Integer">
	select count(1)
	from imp_car_shp a, flt_opr_events b, awb
	where a.flt_key = b.flt_key and a.flt_date = b.sch_date
	and a.awb_no = awb.awb_no and a.awb_date = awb.awb_date
	and a.awb_no =  #AWB_NO# and a.AWB_DATE = #AWB_DATE#		
	and b.flt_type='A' and b.freeze_ind ='Y' and awb_closed_yn = 'N'
	</select>

	<select id="checkStatePostalReqCountry" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from mast_country where code=#ctryCode# AND STAT_REQ = 'Y'
	</select>
	
	<select id="checkAwbInAWB" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from awb where awb_no=#PARAM# 
	</select>
	
	<select id="checkAwbInEDIFHL" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from edi_fhl where awb_no=#PARAM# 
	</select>
	
	<select id="getAWBTrNoEDIFHL" parameterClass="map" resultClass="java.lang.String">
		select tr_no from edi_fhl where awb_no=#AWB_NO# and awb_date = to_date(#AWB_DATE#,'DDMONYY')
	</select>
	
	<select id="checkAwbInEDIFWB" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from edi_fwb where awb_no=#PARAM# 
	</select>
	
		<select id="getAwbTypeFromAWB" parameterClass="map" resultClass="java.lang.String">
	select awb_type from awb where  awb_no = #awbNo# and awb_date = #awbDate#
	</select>
	
	<select id="getAwbTypeFromEDIFHL" parameterClass="map" resultClass="java.lang.String">
		SELECT imp_exp_ind from edi_fhl where awb_no=#awbNo# and awb_date = #awbDate#
	</select>
	
	<select id="getAwbTypeFromEDIFWB" parameterClass="map" resultClass="java.lang.String">
		SELECT ship_desc_c from edi_fwb where awb_no=#awbNo# and awb_date = #awbDate#
	</select>
            
<!--  Added By Santosh Desai for Iteration 3a House Mainfest END -->
<!-- Maintain/Create Outbound OBC Start -->
	<select id="checkShcValOBC"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
		select COUNT(1) from cust_airl_spl_code where spl_type='SPL_VAL' AND carr_code=#carrCode# AND SPL_CODE=#shcCode#
	</select>
	<select id="fetch_sec_holding_date" parameterClass="java.lang.String" resultClass="java.util.HashMap">
		SELECT 
			TO_CHAR(SYSDATE, 'DDMONYY HH24:MI') AS STARTDATE, TO_CHAR(SYSDATE + NUMTODSINTERVAL((SELECT SUBSTR(LPAD(MIN_HOLD_HR,4, 0), 1, 2) 
			FROM MAST_CARRIER WHERE CODE=#PARAM#), 'HOUR') + NUMTODSINTERVAL((SELECT SUBSTR(LPAD(MIN_HOLD_HR,4, 0), 3, 2)  FROM MAST_CARRIER WHERE CODE=#PARAM#), 'MINUTE'), 
			'DDMONYY HH24:MI') AS ENDDATE 
		FROM DUAL
	</select>
	<insert id="insertOBCExpSecJoHdr" parameterClass="cargo.cms.export.bo.ExpCarSecBO">
		Insert into EXP_SEC_CHK_JO (JO_NO,AWB_NO,AWB_DATE,JO_TYPE,PC,WT,STATUS,CHARGE_TO,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,FLT_KEY,FLT_DATE) values 
		(EXP_SEC_CHK_JO_SEQ.nextVal,#awbNo#,to_date(#awbDate#,'DDMONYY'),#joOrderType#,#secpcs#,#secwt#,'Completed',#payerC#,#crUserId#,sysdate,#crUserId#,sysdate,#fltKey#,to_date(#fltDate#,'DDMONYY'))
	</insert>
	<insert id="insertOBCExpSecJoDtl" parameterClass="cargo.cms.export.bo.ExpCarSecBO">
		Insert into EXP_SEC_CHK_JO_DTL (JO_NO,JO_TYPE,SEC_CHK,PC,WT,RESULT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) values 
		(EXP_SEC_CHK_JO_SEQ.currVal,#joOrderType#,'Holding',#secpcs#,#secwt#,'Pass',#crUserId#,sysdate,#crUserId#,sysdate)
	</insert>
	<select id="sqlgetLocCodeforLSP"  parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT LOC_CODE FROM LSP_INVENTORY WHERE LSP_NO = #lspNo# and LOC_CODE IS NOT NULL AND EMPTY_FLG='N'
	</select>

	<parameterMap id="maintain_outbound_obc_validate_map" class="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" >
		<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="agentName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="iataCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="INOUT"/>
		<parameter property="whDest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="locn" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="uldBtNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="contrCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="INOUT"/>
		<parameter property="isAWBDummy" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbPfx" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="truckNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="orig" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="dest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="ectCargoHandler" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode1" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode3" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode4" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode5" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode6" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode7" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode8" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbRmk" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="etd" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
	</parameterMap>
	
	<procedure id="maintain_outbound_obc_validate" 
		parameterMap="maintain_outbound_obc_validate_map" >
		{? = call PKG_EXP_ACPT.val_accpt_obc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap id="maintain_outbound_obc_add_map" class="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" >
		<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>                  
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>              
		<parameter property="fltDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="agentName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>           
		<parameter property="iataCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  
		<parameter property="whDest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
		<parameter property="locn" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>                
		<parameter property="uldBtNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="contrCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="INOUT"/> 
        <parameter property="isAWBDummy" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>          
		<parameter property="awbPfx" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
		<parameter property="truckNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="orig" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>                
		<parameter property="dest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/> 
	    <parameter property="ectCargoHandler" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>     
		<parameter property="splCode1" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode3" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode4" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/> 
		<parameter property="splCode5" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode6" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode7" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode8" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="awbRmk" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  
		<parameter property="tagList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="pcList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
		<parameter property="wtList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
		<parameter property="rmkList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="user" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="rclNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>  
		<parameter property="secAgentName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secShipperName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="raNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="kcNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secRemarks" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secItmList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secPcList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secWtList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secPaidBy" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
	</parameterMap>

	<procedure id="maintain_outbound_obc_add" 
		parameterMap="maintain_outbound_obc_add_map" >
		{? = call PKG_EXP_ACPT.accpt_obc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap id="create_outbound_obc_validate_map" class="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" >
		<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="agentName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="custId" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="whDest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="locn" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="uldBtNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="contrCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="orig" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="dest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="ectCargoHandler" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="INOUT"/>
		<parameter property="isAWBDummy" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbPfx" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>				
		<parameter property="splCode1" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode3" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode4" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode5" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode6" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode7" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode8" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>			
	</parameterMap>
	
	<procedure id="create_outbound_obc_validate" 
		parameterMap="create_outbound_obc_validate_map" >
		{? = call pkg_exp_hht.val_accpt_obc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	
	<parameterMap id="create_outbound_obc_add_map" class="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" >
		<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>                  
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>              
		<parameter property="fltDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="agentName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>           
		<parameter property="custId" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  
		<parameter property="whDest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
		<parameter property="locn" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>                
		<parameter property="uldBtNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="contrCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="INOUT"/> 
        <parameter property="isAWBDummy" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>          
		<parameter property="awbPfx" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
		<parameter property="truckNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="orig" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>                
		<parameter property="dest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/> 
	    <parameter property="ectCargoHandler" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>     
		<parameter property="splCode1" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode3" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode4" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/> 
		<parameter property="splCode5" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode6" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode7" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="splCode8" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>            
		<parameter property="awbRmk" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  
		<parameter property="tagList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="pcList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
		<parameter property="wtList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
		<parameter property="rmkList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="user" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="rclNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>  
		<parameter property="secAgentName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secShipperName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="raNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="kcNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secRemarks" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secItmList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secPcList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secWtList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secPaidBy" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
	</parameterMap>

	<procedure id="create_outbound_obc_add" parameterMap="create_outbound_obc_add_map" >
		{? = call pkg_exp_hht.accpt_obc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	
	<select id="print_outbound_obc_getheader"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.PrintOutboundOBCDetailsBO">
		SELECT 
			FLT_KEY as fltKey,
			to_char(SCH_DATE,'DDMONYY') as fltDate,
			to_char(EST_DATE,'DDMONYY') as etd,
			SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),0,2)|| ':'||  SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),3,4)  as etdTime
		FROM FLT_OPR
		WHERE
			FLT_KEY= #fltKey# 		
			AND SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
			AND FLT_TYPE = 'D'
	</select>
	
	<select id="print_outbound_obc_getdetails"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.PrintOutboundOBCItemBO">
		SELECT
		distinct RCL_NO as rclNoDisplay,
			RCL_NO as rclNo,
			AGENT_NAME as agentName,
			IATA_CODE as iataCode,
			CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,
			AWB_NO as awbNo,
			ULD_KEY as uldBtNo,
			VOID_IND as voidInd,
			AGENT_CODE AS agentCode,
			FLT_KEY as fltKey,
			TO_CHAR(FLT_DATE,'DDMONYY') as fltDate,
			RCL_PCS as rclPc,
			RCL_WT as rclWt,
			SEC_CHK_IND as SCInd,
			RTN_IND as cargoRetInd,
			DEST as dest,
			TRUCK_NO as truckNo,
			TO_CHAR(RCL_DATE,'DDMONYY') as rclDate,
			CAR_IND as carInd,
			AGENT_CODE as agentCode,
			ETD as etd,
			RECEIVED_DATE as receivedDate,
			TRUCK_DOC as truckDoc,
			BU_COMPLETE as buComplete,
			ACCP_DATE_TIME as accpDateTime
		FROM
			V_RCL_OBC
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')			
			<isNotEmpty property="checkBox" >
					<isEqual property="checkBox" compareValue="Y">			
						AND BU_COMPLETE = 'N'
					</isEqual>			
			</isNotEmpty> 
	</select>
	
	<select id="print_outbound_obc_getheader_rcl"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.PrintOutboundOBCDetailsBO">
		SELECT
			FLT_KEY as fltKey,
			TO_CHAR(FLT_DATE,'DDMONYY') as fltDate,
			RCL_NO as rclNoDisplay,
			RCL_NO as rclNo,			
			SPL_CODES as splCode,
			RMK as rmk,
			AGENT_NAME as agentName,
			IATA_CODE as iataCode,
			LOC_CODE as locCode,
			CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,
			AWB_NO as awbNo,
			ULD_KEY as uldBtNo,
			VOID_IND as voidInd,
			RCL_PCS as rclPc,
			RCL_WT as rclWt,
			SEC_CHK_IND as SCInd,
			RTN_IND as cargoRetInd,
			DEST as dest,
			TRUCK_NO as truckNo,
			TO_CHAR(RCL_DATE,'DDMONYY') as rclDate,
			CAR_IND as carInd,
			AGENT_CODE as agentCode,
			ETD as etd,
			RECEIVED_DATE as receivedDate,
			TRUCK_DOC as truckDoc,
			BU_COMPLETE as buComplete,
			TO_CHAR(ACCP_DATE_TIME,'DDMONYY HH24:MI') as accpDateTime,
			CARR_CODE as carrCode
		FROM
			V_RCL_OBC
		WHERE
			RCL_NO = #rclNo#
			<isNotEmpty property="fltKey">
			<![CDATA[
				AND FLT_KEY = #fltKey#
				AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')		
				]]>
			</isNotEmpty> 	
			<isNotEmpty property="fltKey">	
				<isNotEmpty property="checkBox" >
					<isEqual property="checkBox" compareValue="Y">			
						AND BU_COMPLETE = 'N'
					</isEqual>			
				</isNotEmpty> 
			</isNotEmpty>
			<isNotEmpty property="loginCarrier">    
            and  (CARR_CODE = #loginCarrier#
                        OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE     = #loginCarrier#))    
            </isNotEmpty>
        
			AND ROWNUM = 1	

	</select>
	
	<select id="print_outbound_obc_getdetails_rcl"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.MaintainOutboundOBCItemBO">
		SELECT
			a.TAG_NO as tagNo,
			a.TAG_PCS as pc,
			a.TAG_WT as wt,
			a.RMK as rmk,
			a.LSP_NO as lspNo,
			a.TARGET as target 
		FROM
			EXP_RCL_OBC a
		WHERE
			a.RCL_NO = #rclNo#
	</select>
	<select id="checkOBCCarCreated"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
		<![CDATA[
			SELECT NVL(COUNT(1),0)
			FROM AWB
			WHERE awb_no=#awbNo# AND CATALOG !='EO'
		]]>
   	</select>
	<select id="checkAWBPFXAndCarr"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
		<![CDATA[
			SELECT NVL(COUNT(1),0)
			FROM MAST_AWB_PREFIX
			WHERE CODE = #awbPfx# AND  
			CARR_CODE = #fltPfx# 
		]]>
   	</select>
   	
   	<select id="getAgentDetailsRa" parameterClass="map" resultClass="java.lang.String">
		SELECT a.ra_no 
		FROM cust_agent_ra a
		WHERE a.cust_no = 
			<isNotEmpty property="agentName">
				(SELECT code FROM cust_company WHERE code_desc = upper(#agentName#))
			</isNotEmpty>
			<isEmpty property="agentName">
				(SELECT code FROM cust_company WHERE co_iata_code = #IATACode#)
			</isEmpty>
			AND to_date(to_char(sysdate,'DDMONYY'),'DDMONYY') BETWEEN ra_eff_date_from AND ra_eff_date_to
	</select>

	<select id="getAgentDetailsKc" parameterClass="map" resultClass="java.lang.String">
		SELECT a.kc_no 
		FROM cust_agent_kc a
		WHERE a.cust_no = 
			<isNotEmpty property="agentName">
				(SELECT code FROM cust_company WHERE code_desc = upper(#agentName#))
			</isNotEmpty>
			<isEmpty property="agentName">
				(SELECT code FROM cust_company WHERE co_iata_code = #IATACode#)
			</isEmpty>
			AND a.carr_code = #carrCode#
			AND to_date(to_char(sysdate,'DDMONYY'),'DDMONYY') BETWEEN eff_date_from AND eff_date_to
	</select>
	<select id="getAgentDetailsAc" parameterClass="map" resultClass="java.lang.String">
		SELECT a.ac_no 
		FROM cust_agent_ac a
		WHERE a.cust_no = 
			<isNotEmpty property="agentName">
				(SELECT code FROM cust_company WHERE code_desc = upper(#agentName#))
			</isNotEmpty>
			<isEmpty property="agentName">
				(SELECT code FROM cust_company WHERE co_iata_code = #IATACode#)
			</isEmpty>
			AND a.carr_code = #carrCode#
			AND to_date(to_char(sysdate,'DDMONYY'),'DDMONYY') BETWEEN eff_date_from AND eff_date_to
	</select>
   	
   	<select id="getAgentNameFromIATA" parameterClass="map" resultClass="java.lang.String">
		SELECT code_desc
		FROM cust_company 
		WHERE co_iata_code = #iataCode#
			AND AGENT_YN = 'Y'
			AND rownum=1
	</select>
	
	
	<select id="validateAgentNameIATA" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
	 select COUNT(1) from   cust_company where  agent_yn = 'Y'
        	<isNotEmpty property="agentName">
				AND code_desc = upper(#agentName#)
			</isNotEmpty>
			<isNotEmpty property="iataCode">
				AND co_iata_code = #iataCode#
			</isNotEmpty>
	</select>
	<select id="validateDLSFinalize" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.String">
	   select nvl(t2.dls_ind, 'N') from   flt_opr t1, flt_opr_events t2
       where  t1.tr_no = t2.tr_no and    t1.flt_key = #fltKey#
       and    t1.sch_date = #fltDate#  and    t1.flt_type = 'D'
	</select>
	<select id="validateFlightComplete"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.String">
  		select flt_cls_yn from flt_opr_events where flt_key=#fltKey# and flt_type='D' and sch_date=#fltDate#
 	</select>
 	<select id="getFlightETD"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.String">
 	 select decode(p_flt_date, est_date, lpad(est_time, 4, 0), to_char(est_date, 'DDMONYY')||' '||lpad(est_time, 4, 0))
		 from   flt_opr  where  flt_key = #fltKey# and sch_date = #fltDate#  and flt_type = 'D'
   	</select>
   	<select id="validateFlightCarrier"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
 	  select COUNT(1) from   mast_carrier where  (code = substr(#fltKey#, 1, 2) OR code = substr(#fltKey#, 1, 3))
   	</select>
   	<select id="validateBasePort"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.String">
 	  select base_port from sys_param
   	</select>
   	<select id="validateFlightPath"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
 	   select COUNT(1)	from   flt_opr t1, flt_opr_leg t2
	   where  t1.tr_no = t2.tr_no and t1.flt_key = #fltKey# and t1.sch_date = #fltDate#
	   and t1.flt_type = 'D' and t2.off_point = #dest#
   	</select>
   	<select id="validateCarCreated"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
 	    select COUNT(1) from   awb where  awb_no = #awbNo#
  		and (awb_type = 'E' or awb_type = 'T') and awb_closed_yn = 'N' and car_yn = 'Y'
   	</select>
   	<select id="validateContourCode"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO"  resultClass="java.lang.Integer">
			SELECT COUNT(1) FROM ULD_TYPE_CONTR WHERE ULD_TYPE=#uldType# AND CONTR_CODE = #contrCode#	   
   	</select>
   	<select id="getULDTareWeight"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO"  resultClass="java.lang.String">
		select TARE_WEIGHT from mast_uld_type where CODE =  #uldType#   
   	</select>
   	<select id="getCfmInvStatus"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO"  resultClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		select owned_inv ownedInv, cfm_status cfmStatus from  uld_inventory where  uld_key = #uldBtNo#
   	</select>
	<insert id="insertOBCUldInv" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		insert into uld_inventory(uld_key, flt_type, flt_key, flt_date, loc_code,  owner_id, strg_date, agent_inv, cfm_status,
			    	lm_user_id, lm_date,first_wt)
		values (#uldBtNo#, 'E', #fltKey#, #fltDate#, #locn#,  '---', sysdate, 'N', 'CONFIRMED',
				#user#, sysdate,#secTotWt#)
	</insert>
	<update id="updateOBCUldInv" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
			update uld_inventory set
                  owned_inv = 'Y',
                  cfm_status = 'CONFIRMED',
                  loc_code = #locn#,
                  EMPTY_FLG = 'N',
                  ENTRY_TIME = sysdate             
             where uld_key = #uldBtNo#
	</update>
	<insert id="insertOBCRCLHd" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		insert into exp_rcl_hd(TR_TYPE_EVT,rcl_no, rcl_date, awb_no,awb_date, awb_dest, awb_content, ppk_type, accpt_mode, carr_code, rcl_pcs, rcl_wt, cr_user_id, cr_date, lm_user_id, lm_date,
				cust_no, flt_key, flt_date, truck_no, spl_code1, spl_code2, spl_code3, spl_code4, spl_code5, spl_code6, spl_code7, spl_code8, spl_code9,sec_check,RMK)
			values (#trtypeEvt#,#rclNo#, sysdate, #awbNo#,#awbDate#, #dest#, 'OUTBOUND OBC', 'B', 'LOB', #carrCode#, #secTotPcs#, #secTotWt#, #user#, sysdate, #user#, sysdate,
				#agentCode#, #fltKey#, #fltDate#, #truckNo#, #splCode1#, #splCode2#,#splCode3#, #splCode4#, #splCode5#, #splCode6#, #splCode7#, #splCode8#,#splCode9#, 'Y',#awbRmk#)
	</insert>
	<insert id="insertOBCRCLDtl" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		insert into exp_rcl_dtl(rcl_no, doc_line_no, ppk_type, loc_code, uld_key, contr_code, pcs, gross_wt, tare_wt, net_wt, cr_user_id, cr_date, lm_user_id, lm_date,LSP_NO,ULD_NO,ULD_CARR,ULD_TYPE,BLDUP_COMPLETE,TR_TYPE_EVT)
		values (#rclNo#, #docLineNo#, 'B', #locn#, #uldBtNo#, #contrCode#, #pcs#, #secTotWt#,#uldTareWt#, #wt#, #user#, sysdate, #user#, sysdate,#lspNo#,#uldNo#,#uldCarr#,#uldType#,#bldUpCmpltYN#,'MTOBC')
	</insert>
	<insert id="insertOBCExpCar" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		insert into exp_car(awb_no, awb_date, awb_prfx, accept_mode, handler_code, catalog, carr_code, origin, dest,
			pcs, wt, content, agent_code, agent_name, security_option,
			spl_code1, spl_code2, spl_code3, spl_code4, spl_code5, spl_code6, spl_code7, spl_code8,spl_code9,
			cr_user_id, cr_date, lm_user_id, lm_date,HLDG_PERIOD,OBC_TYPE,AIRL_RMK)
		values (#awbNo#, #awbDate#, substr(#awbNo#, 1, 3), 'LOB', #ectCargoHandler#, 'EO', #carrCode#, #orig#, #dest#,
			#secTotPcs#, #secTotWt#, 'OUTBOUND OBC', #agentCode#, #agentName#, 'FREIGHTER',
			nvl(#splCode1#, 'OBC'), #splCode2#, #splCode3#, #splCode4#, #splCode5#, #splCode6#, #splCode7#, #splCode8#,#splCode9#,
			#user#, sysdate, #user#, sysdate,(SELECT MIN_HOLD_HR FROM MAST_CARRIER WHERE CODE=#carrCode#),#type#,#awbRmk#)
	</insert>
	<update id="updateCARDetailsOBC_CAR" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		UPDATE EXP_CAR SET
			HANDLER_CODE=      #ectCargoHandler#,
			ORIGIN=            #orig#,
			DEST=              #dest#,
			PCS=               #secTotPcs#,
			WT=                #secTotWt#,
      		OBC_TYPE =         #type#,
      		agent_code =       #agentCode#,
			AGENT_NAME=        #agentName#,
			SPL_CODE1=         #splCode1#,
			SPL_CODE2=         #splCode2#,
			SPL_CODE3=         #splCode3#,
			SPL_CODE4=         #splCode4#,
			SPL_CODE5=         #splCode5#,
			SPL_CODE6=         #splCode6#,
			SPL_CODE7=         #splCode7#,
			SPL_CODE8=         #splCode8#,
			SPL_CODE9=         #splCode9#,
			LM_USER_ID=        #user#,
			LM_DATE=           sysdate,
			AIRL_RMK = #awbRmk# 
		WHERE AWB_NO = #awbNo#
		and awb_date = to_date(#awbDate#,'DDMONYY')
	</update>
	<select id="getOBCRCLNo"  parameterClass="java.lang.Integer" resultClass="java.lang.String">
		select lpad(rcl_no_seq.nextval, 8, 0) from dual
	</select>
	<insert id="insertOBCExpRCLOBC" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCItemBO">
		 insert into exp_rcl_obc(rcl_no, tag_no, tag_pcs, tag_wt, rmk,lsp_no, cr_user_id, cr_date, lm_user_id, lm_date,dest,TARGET)
            values (#rclNo#, #tagNo#, #pc#, #wt#, #rmk#,#lspNo#, #user#, sysdate, #user#, sysdate,#dest#,#target#)
	</insert>
	<insert id="insertOBCExpRCLOBCSec" parameterClass="cargo.cms.export.bo.ExpCarSecBO">
		 insert into exp_rcl_sec_chk_dtl(rcl_no, doc_line_no, sc_itm_code, sc_pcs, sc_wt, sc_paid_by, cr_user_id, cr_date, lm_user_id, lm_date, tr_type, tr_status,SC_START_DATE,SC_END_DATE)
			values (#rclNo#, #itmSno#, #itmCode#, #secpcs#, #secwt#, #payerC#, #crUserId#, sysdate, #crUserId#, sysdate, 'T', 'T',TO_DATE(#startDate#,'DDMONYY HH24:MI'),TO_DATE(#endDate#,'DDMONYY HH24:MI'))
	</insert>
	<insert id="insertOBCExpSec" parameterClass="cargo.cms.export.bo.ExpCarSecBO">
		 insert into exp_car_sec(awb_no, awb_date, doc_line_no, itm_code, pcs, wt, payable_by, cr_user_id, cr_date, lm_user_id, lm_date,RCL_NO)
			values (#awbNo#, TO_DATE(#awbDate#,'DDMONYY'), #itmSno#, #itmCode#, #secpcs#, #secwt#, #payerC#, #crUserId#, sysdate, #crUserId#, sysdate,#rclNo#)
	</insert>
	<insert id="insertOBCExpPmanAWB" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
			insert into exp_pmanifest_awb(flt_key, flt_date, unldg_pt, awb_no, awb_date, group_no, bulk_pcs, bulk_wt, shp_type, cr_user_id, cr_date, lm_user_id, lm_date,FLT_TYPE,PMAN_PCS,PMAN_WT)
		values (#fltKey#, #fltDate#, #dest#, #awbNo#, #awbDate#, 1, #secTotPcs#, #secTotWt#, 'OBC', #user#, sysdate, #user#, sysdate,#fltType#,#secTotPcs#, #secTotWt#)
	</insert>
	<select id="checkOBCExpManfULDExists"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
		select COUNT(1) from exp_pmanifest_uld where  flt_key = #fltKey# and flt_date = #fltDate# and uld_bt_no = #uldBtNo#
	</select>
	<update id="updateOBCExpPManfULD" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		update exp_pmanifest_uld set gross_wt = gross_wt + #secTotWt#,BLDUP_COMPLETE='Y',BLDUP_COMPLETE_USER_ID=#user#,BLDUP_COMPLETE_DATE=sysdate,READY_WH='Y' where  flt_key = #fltKey# and flt_date = #fltDate# and uld_bt_no = #uldBtNo#
	</update>
	<insert id="insertOBCExpPManfULD" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		insert into exp_pmanifest_uld(flt_key, flt_date, uld_bt_no, contr_code, ppk_type, unldg_pt, group_no, gross_wt, tare_wt, 
			cr_user_id, cr_date, lm_user_id, lm_date,FLT_TYPE,BLDUP_COMPLETE,BLDUP_COMPLETE_USER_ID,BLDUP_COMPLETE_DATE,RCL_NO,BLDUP_START,BLDUP_START_DATE,BLDUP_START_USER_ID,READY_WH,TRANSIT_FLG,HDLG_MODE)
		values (#fltKey#, #fltDate#, #uldBtNo#, #contrCode#, 'B', #dest#, '97', (#secTotWt#+#uldTareWt#), #uldTareWt#, 
			#user#, sysdate, #user#, sysdate,#fltType#,'Y',#user#,sysdate,#rclNo#,'Y',sysdate,#user#,'Y',
			(SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#uldBtNo#),
			(SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#uldBtNo#))
	</insert>
	<insert id="insertOBCExpPManfULDAWB" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		insert into exp_pmanifest_uld_awb(flt_key, flt_date, uld_bt_no, unldg_pt, awb_no, awb_date, assigned_pcs, assigned_wt, cr_user_id, cr_date, lm_user_id, lm_date,tr_no)
			values (#fltKey#, #fltDate#, #uldBtNo#, #dest#, #awbNo#, #awbDate#, #secTotPcs#, TO_CHAR(#secTotWt#,'9999990D99'), #user#, sysdate, #user#, sysdate,#trNo#)
	</insert>
	<select id="countExpFltUld" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
		select COUNT(1) from exp_flt_uld where uld_key=#uldBtNo#
	</select>
	
	<insert id="insertOBCExpPManfULDAWBTag" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCItemBO" >	
	      Insert into EXP_PMANIFEST_ULD_AWB_TAG (TR_NO,TAG_NO,PC,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
	      values (#trNo#,#tagNo#,#pc#,#wt#,#user#,sysdate,#user# , sysdate)
	</insert>
	
	
	<insert id="insertOBCExpPManfULDAWBSHC" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" >	
	      Insert into EXP_PMANIFEST_ULD_AWB_SHC (TR_NO,SHC,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
	      values (#trNo#,#splCode#,#user#,sysdate,#user# , sysdate)
	</insert>
	<select id="getTrNoExpULdAWB" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.String">
		SELECT TR_NO FROM EXP_PMANIFEST_ULD_AWB WHERE flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no = #uldBtNo# and awb_no=#awbNo# and awb_date=#awbDate#
	</select>
	<update id="updateOBCAwbInv" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		update awb_inventory	set flt_key = #fltKey#,flt_date = #fltDate#,uld_key = #uldBtNo#,
		flt_type = 'E',ref_tr_no = #uldBtNo#,ref_tr_type = 'EF',ref_tr_date = sysdate,
		ref_doc_line_no = 1,ref_tr_event = 'EFP',lm_date = sysdate,lm_user_id = #user#
		where  awb_no = #awbNo# and awb_date = sysdate
	</update>
	<update id="sqlUpdateOBCAWBPCWT" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		update AWB SET PCS=#secTotPcs#, WT=#secTotWt#,TR_TYPE=#trtype# 
		where  awb_no = #awbNo# and awb_date = to_date(#awbDate#,'DDMONYY') and AWB_TYPE='E'
	</update>
	<update id="updateCAROBC" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		update AWB set CAR_YN='Y' 
			,PCS=#secTotPcs#,WT=#secTotWt#,TR_TYPE=#trtype#,content='OUTBOUND OBC'
		where awb_no = #awbNo#
		and awb_date = to_date(#awbDate#,'DDMONYY') and AWB_TYPE='E'
	</update>
	<select id="sqlFetchOBCFltOldDtls" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		select gross_wt oldUldGrossWt, net_wt oldUldNetWt , tare_wt oldUldTareWt from exp_flt_uld where flt_key = #fltKey#
                    and    flt_date = TO_DATE(#fltDate#,'DDMONYY')
                    and    uld_key = #uldBtNo#
	</select>
	<update id="sqlUpdateOBCFltOldDtls" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		update exp_flt_uld set gross_wt=#oldUldGrossWt#+ #secTotWt#,
			net_wt = (#oldUldNetWt# + #secTotWt#) 
		where flt_key = #fltKey#
                    and    flt_date = TO_DATE(#fltDate#,'DDMONYY')
                    and    uld_key = #uldBtNo#
	</update>
	<!-- Maintain/Create Outbound OBC End -->


	<!-- Update eRcl start -->
	 <select id="getPrepackDtl" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	 SELECT sum(pcs) as totalPieces, trim(to_char(sum(net_wt),'9999990.99')) as totalWeight
     FROM EXP_PRE_RCL_DTL WHERE pre_rcl_no=#preRclNo#
    </select>
	<select id="searchDaysDiff" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.Integer">
	select round( to_date(#issueDateTo#,'ddmonyy') - to_date(#issueDateFrom#,'ddmonyy')) from dual
	</select>
	<select id="searchDaysDiffForFromDate" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.Integer">
	select round( sysdate - to_date(#issueDateFrom#,'ddmonyy')) from dual
	</select>
	<select id="fetcheRuleValueFromCMSRules" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.Integer">
	select RULE_VALUE from CMSRULES where RULE_CODE = 'MRCL_ENQ_PERIOD'
	</select>
	<select id="Export_eRCLEnquireQueryBasedOnAWB" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		SELECT substr(preheader.pre_rcl_no,1,4)||'-'||substr(preheader.pre_rcl_no,5) AS preRclNoFormat,preheader.AWB_NO AS awbNo,preheader.pre_rcl_no as preRclNo, decode(preheader.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS rclTypeDescription,
		preheader.PPK_TYPE as rclType,to_char(preheader.RCL_ISS_DATE,'DDMONYY     hh24:mi') AS rclsubmissiondate,preheader.ULD_NO AS uldNo, upper( preheader.STATUS)  AS searchStatus,preheader.qcp_pcs as qcp_pcs,
    	preheader.qcp_wt as qcp_wt,
		customer.code_desc as agentName,preheader.carr_code as carr,preheader.cust_no as custNo,
		decode((select count(uld.pre_rcl_no) from EXP_PRE_RCL_ULD_MANF uld where uld.awb_no=preheader.awb_no  and uld.pre_rcl_no=preheader.pre_rcl_no),0,'N','Y') as hseExist,
		preheader.ttl_pcs as pieces,preheader.ttl_wt as weight,rclhd.RCL_NO as rclNo,
		case when preheader.PPK_TYPE!='M' then nvl(doc.awb_no,'N') 
       else 
      case when instr( ( select STRAGG(STRINGDELIM(decode(doc.awb_no,null,'N','Y'),'') )  from exp_pre_rcl_hd hd 
    	join EXP_PRE_RCL_BRKDN BRK on hd.pre_rcl_no=brk.pre_rcl_no
		left outer JOIN (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC  ON BRK.AWB_NO=DOC.AWB_NO AND BRK.AWB_DATE=DOC.AWB_DATE
		where hd.pre_rcl_no=preheader.pre_rcl_no),'N')>0 then 'N' else 'Y' end 
         end  as docRcv,preheader.SPL_CODE1 as splCode1,preheader.SPL_CODE2 as splCode2,preheader.SPL_CODE3 as splCode3
		FROM EXP_PRE_RCL_HD preheader
		left outer join exp_rcl_hd rclhd on rclhd.PRE_RCL_NO=preheader.PRE_RCL_NO 
		left outer join cust_company customer on preheader.cust_no = customer.code
		
  		left outer join (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y') doc on doc.awb_no=preheader.awb_no and doc.awb_date=preheader.awb_date
 		WHERE    preheader.awb_no=#awbNo#  
        <isNotEmpty property="custNo">
		and preheader.cust_no=#custNo#
		</isNotEmpty>
        AND upper(preheader.status) in ('SUBMITTED','WT_DIFFERENCE','OUTSTANDING')
	  ORDER BY preheader.RCL_ISS_DATE desc,preheader.PPK_TYPE
	</select>
	<select id="Export_eRCLEnquireQueryBasedOnULD" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		SELECT substr(preheader.pre_rcl_no,1,4)||'-'||substr(preheader.pre_rcl_no,5) AS preRclNoFormat, preheader.AWB_NO AS awbNo,preheader.PPK_TYPE AS rclType,preheader.pre_rcl_no as preRclNo, decode(preheader.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS rclTypeDescription,to_char(RCL_ISS_DATE,'DDMONYY hh24:mi') AS rclsubmissiondate,
		preheader.ULD_key AS uldNo,upper(preheader.STATUS)  AS searchStatus,customer.code_desc as agentName,preheader.carr_code as carr,ttl_pcs as pieces,
		preheader.ttl_wt as weight,preheader.cust_no as custNo,
		decode((select count(uld.pre_rcl_no) from EXP_PRE_RCL_ULD_MANF uld where uld.uld_key=preheader.uld_key  and uld.pre_rcl_no=preheader.pre_rcl_no),0,'N','Y') as hseExist,
		preheader.carr_code as carr,preheader.qcp_pcs as qcp_pcs,preheader.qcp_wt as qcp_wt,preheader.ttl_pcs as pieces,preheader.ttl_wt as weight,rclhd.RCL_NO as rclNo,
		case when preheader.PPK_TYPE!='M' then nvl(doc.awb_no,'N') 
       else 
      case when instr( ( select STRAGG(STRINGDELIM(decode(doc.awb_no,null,'N','Y'),'') )  from exp_pre_rcl_hd hd 
    	join EXP_PRE_RCL_BRKDN BRK on hd.pre_rcl_no=brk.pre_rcl_no
		left outer JOIN (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC  ON BRK.AWB_NO=DOC.AWB_NO AND BRK.AWB_DATE=DOC.AWB_DATE
		where hd.pre_rcl_no=preheader.pre_rcl_no),'N')>0 then 'N' else 'Y' end 
         end  as docRcv,preheader.SPL_CODE1 as splCode1,preheader.SPL_CODE2 as splCode2,preheader.SPL_CODE3 as splCode3
		FROM EXP_PRE_RCL_HD preheader
		left outer join exp_rcl_hd rclhd on rclhd.PRE_RCL_NO=preheader.PRE_RCL_NO
		left outer join cust_company customer on preheader.cust_no = customer.code
		left outer join (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y') doc on doc.awb_no=preheader.awb_no and doc.awb_date=preheader.awb_date
		WHERE preheader.status in ('SUBMITTED','WT_DIFFERENCE','OUTSTANDING') 
		and preheader.uld_key =#uldNo# 
		<isNotEmpty property="custNo">
		and preheader.cust_no=#custNo#
		</isNotEmpty>		 
		AND status  IN ('SUBMITTED','WT_DIFFERENCE','OUTSTANDING')   
		ORDER BY preheader.RCL_ISS_DATE desc,preheader.PPK_TYPE	
	</select>
		
	<select id="Export_eRCLEnquireQueryBasedOnOthers" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
     select * from
	( SELECT TO_CHAR (RCL_ISS_DATE,'ddmonyy'), SUBSTR(PREHEADER.PRE_RCL_NO,1,4)||'-'||SUBSTR(PREHEADER.PRE_RCL_NO,5) AS PRERCLNOFORMAT,
       preheader.carr_code AS carr,
       case when preheader.ppk_type='M' then (select awb_no from EXP_PRE_RCL_BRKDN where pre_rcl_no = preheader.PRE_RCL_NO and awb_no=#awbNo#)else preheader.awb_no end AS awbno,preheader.pre_rcl_no as prerclNo,
      to_char(preheader.CR_DATE,'DDMONYY     hh24:mi') AS rclsubmissiondate, to_char(preheader.CR_DATE,'DDMONYY') as receptionDate,preheader.ppk_type AS rcltype, decode(preheader.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS rclTypeDescription,
       preheader.awb_dest AS destination, SUBSTR(TRIM(preheader.AWB_NO),1,3)||'-'||SUBSTR(TRIM(preheader.AWB_NO),4) as awbNoDisplay,
       preheader.uld_type AS uldtype, preheader.uld_no AS uldseqno,preheader.uld_key as uldNo, trim(preheader.status) AS searchStatus,preheader.cust_no as custNo,customer.code_desc as agentName,
       qcp_pcs as qcp_pcs,qcp_wt as qcp_wt,ttl_pcs as pieces,TRIM(TO_CHAR(nvl(ttl_wt,0), '9999999990D9')) as weight,rclhd.RCL_NO as rclNo,       
       decode((select count(uld.pre_rcl_no) from EXP_PRE_RCL_ULD_MANF uld where uld.uld_key=preheader.uld_key  and uld.pre_rcl_no=preheader.pre_rcl_no),0,'N','Y') as hseExist,
              
        case when instr( ( select STRAGG(STRINGDELIM(decode(doc.awb_no,null,'N','Y'),'') )  from exp_pre_rcl_hd hd 
    	join EXP_PRE_RCL_BRKDN BRK on hd.pre_rcl_no=brk.pre_rcl_no
		left outer JOIN (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC  ON BRK.AWB_NO=DOC.AWB_NO AND BRK.AWB_DATE=DOC.AWB_DATE
		where hd.pre_rcl_no=preheader.pre_rcl_no),'N')>0 then 'N' else 'Y'   end  as docRcv,         
    	preheader.SPL_CODE1 as splCode1,preheader.SPL_CODE2 as splCode2,preheader.SPL_CODE3 as splCode3
  		FROM exp_pre_rcl_hd preheader
  		left outer join exp_rcl_hd rclhd on rclhd.PRE_RCL_NO=preheader.PRE_RCL_NO
  		join cust_company customer on preheader.cust_no = customer.code  	  	
  		left outer join (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y') doc on doc.awb_no=preheader.awb_no and doc.awb_date=preheader.awb_date
  		where preheader.ppk_type='M'    
    union 
   		 SELECT to_char (rcl_iss_date,'ddmonyy'), substr(preheader.pre_rcl_no,1,4)||'-'||substr(preheader.pre_rcl_no,5) AS preRclNoFormat,
       preheader.carr_code AS carr, case when preheader.ppk_type='M' then (select awb_no from EXP_PRE_RCL_BRKDN where pre_rcl_no = preheader.PRE_RCL_NO and awb_no=#awbNo#)else preheader.awb_no end,preheader.pre_rcl_no as prerclNo,
      	to_char(preheader.CR_DATE,'DDMONYY     hh24:mi') AS rclsubmissiondate,to_char(preheader.CR_DATE,'DDMONYY') as receptionDate, preheader.ppk_type AS rcltype, decode(preheader.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS rclTypeDescription,
       preheader.awb_dest AS destination, SUBSTR(TRIM(preheader.AWB_NO),1,3)||'-'||SUBSTR(TRIM(preheader.AWB_NO),4) as awbNoDisplay,
       '' AS uldtype, '' AS uldseqno,'' as uldNo, trim(preheader.status) AS searchStatus,preheader.cust_no as custNo,customer.code_desc as agentName,
       qcp_pcs as qcp_pcs,qcp_wt as qcp_wt,ttl_pcs as pieces,TRIM(TO_CHAR(nvl(ttl_wt,0), '9999999990D9')) as weight,'' as rclNo,
       decode((select count(uld.pre_rcl_no) from EXP_PRE_RCL_ULD_MANF uld where uld.awb_no=preheader.awb_no  and uld.pre_rcl_no=preheader.pre_rcl_no),0,'N','Y') as hseExist,
       DECODE(doc.awb_no,NULL,'N','Y')   as docRcv,
   	   preheader.SPL_CODE1 as splCode1,preheader.SPL_CODE2 as splCode2,preheader.SPL_CODE3 as splCode3
  	  FROM exp_pre_rcl_hd preheader 
       <!-- left outer join EXP_PRE_RCL_DTL preDtl on  preDtl.pre_rcl_no=preheader.pre_rcl_no --> 
       inner join cust_company customer on preheader.cust_no = customer.code 	  	
  	  left outer join (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y') doc on doc.awb_no=preheader.awb_no and doc.awb_date=preheader.awb_date
  	  where preheader.pre_rcl_no not in (select pre_rcl_no from exp_rcl_hd where  pre_rcl_no is not null and ppk_type in('B','P')) and preheader.ppk_type in ('B','P')
   ) 
  	WHERE SEARCHSTATUS IN ('SUBMITTED','WT_DIFFERENCE','OUTSTANDING')
  	<isNotEmpty property="rclType">
		and rcltype=DECODE(#rclType#,'A',rcltype,#rclType#)
		</isNotEmpty>
		<isNotEmpty property="search">
		and searchStatus=#search#
		</isNotEmpty>
		<isNotEmpty property="issueDateFrom">
		<isNotEmpty property="issueDateTo">
		 and receptionDate between to_date(#issueDateFrom#||'0000','DDMONYYHH24MI') and to_date(#issueDateTo#||'2359','DDMONYYHH24MI') 
		</isNotEmpty>	
		</isNotEmpty>
		<isNotEmpty property="issueDateFrom">
		<isEmpty property="issueDateTo">
		 and receptionDate>=to_date(#issueDateFrom#,'DDMONYY') 
		</isEmpty>	
		</isNotEmpty>
		<isEmpty property="issueDateFrom">
		<isNotEmpty property="issueDateTo">
		 and to_date(#issueDateFrom#,'DDMONYY') >receptionDate
		</isNotEmpty>	
		</isEmpty>	
		<isNotEmpty property="agentName">
		and agentName=#agentName#
		</isNotEmpty>
		<isNotEmpty property="agentCode">
		and custNo=#agentCode#
		</isNotEmpty>
		<isNotEmpty property="custNo">
		and custNo=#custNo#
		</isNotEmpty>
		<isNotEmpty property="awbNo">
		and awbno=#awbNo#
		</isNotEmpty>
		<isNotEmpty property="uldNo">
		and uldNo=#uldNo#
		</isNotEmpty>
   <!--AND upper(status) = upper('SUBMITTED')-->
    order by receptionDate desc,rcltype
	</select>
	
	<select id="Export_eRCLEnquireQueryBasedOnOthers_ULD" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
     select * from
	( SELECT TO_CHAR (RCL_ISS_DATE,'ddmonyy'), SUBSTR(PREHEADER.PRE_RCL_NO,1,4)||'-'||SUBSTR(PREHEADER.PRE_RCL_NO,5) AS PRERCLNOFORMAT,
       preheader.carr_code AS carr,
       case when preheader.ppk_type='M' then (select awb_no from EXP_PRE_RCL_BRKDN where pre_rcl_no = preheader.PRE_RCL_NO and awb_no=#awbNo#)else preheader.awb_no end AS awbno,preheader.pre_rcl_no as prerclNo,
      to_char(preheader.CR_DATE,'DDMONYY     hh24:mi') AS rclsubmissiondate, to_char(preheader.CR_DATE,'DDMONYY') as receptionDate,preheader.ppk_type AS rcltype, decode(preheader.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS rclTypeDescription,
       preheader.awb_dest AS destination, SUBSTR(TRIM(preheader.AWB_NO),1,3)||'-'||SUBSTR(TRIM(preheader.AWB_NO),4) as awbNoDisplay,
       preheader.uld_type AS uldtype, preheader.uld_no AS uldseqno,preheader.uld_key as uldNo, upper(trim(preheader.status)) AS searchStatus,preheader.cust_no as custNo,customer.code_desc as agentName,
       qcp_pcs as qcp_pcs,qcp_wt as qcp_wt,ttl_pcs as pieces,ttl_wt as weight,rclhd.RCL_NO as rclNo,       
       decode((select count(uld.pre_rcl_no) from EXP_PRE_RCL_ULD_MANF uld where uld.uld_key=preheader.uld_key  and uld.pre_rcl_no=preheader.pre_rcl_no),0,'N','Y') as hseExist,
              
        case when instr( ( select STRAGG(STRINGDELIM(decode(doc.awb_no,null,'N','Y'),'') )  from exp_pre_rcl_hd hd 
    	join EXP_PRE_RCL_BRKDN BRK on hd.pre_rcl_no=brk.pre_rcl_no
		left outer JOIN (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y' ) DOC  ON BRK.AWB_NO=DOC.AWB_NO AND BRK.AWB_DATE=DOC.AWB_DATE
		where hd.pre_rcl_no=preheader.pre_rcl_no),'N')>0 then 'N' else 'Y'   end  as docRcv,         
    	preheader.SPL_CODE1 as splCode1,preheader.SPL_CODE2 as splCode2,preheader.SPL_CODE3 as splCode3
  		FROM exp_pre_rcl_hd preheader
  		left outer join exp_rcl_hd rclhd on rclhd.PRE_RCL_NO=preheader.PRE_RCL_NO
  		join cust_company customer on preheader.cust_no = customer.code  	  	
  		left outer join (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y') doc on doc.awb_no=preheader.awb_no and doc.awb_date=preheader.awb_date
  		where preheader.ppk_type='M'    
    union 
   		 SELECT to_char (rcl_iss_date,'ddmonyy'), substr(preheader.pre_rcl_no,1,4)||'-'||substr(preheader.pre_rcl_no,5) AS preRclNoFormat,
       preheader.carr_code AS carr, case when preheader.ppk_type='M' then (select awb_no from EXP_PRE_RCL_BRKDN where pre_rcl_no = preheader.PRE_RCL_NO and awb_no=#awbNo#)else preheader.awb_no end,preheader.pre_rcl_no as prerclNo,
      	to_char(preheader.CR_DATE,'DDMONYY     hh24:mi') AS rclsubmissiondate,to_char(preheader.CR_DATE,'DDMONYY') as receptionDate, preheader.ppk_type AS rcltype, decode(preheader.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS rclTypeDescription,
       preheader.awb_dest AS destination, SUBSTR(TRIM(preheader.AWB_NO),1,3)||'-'||SUBSTR(TRIM(preheader.AWB_NO),4) as awbNoDisplay,
       preDtl.uld_type AS uldtype, preDtl.uld_no AS uldseqno,preDtl.uld_key as uldNo, upper(trim(preheader.status)) AS searchStatus,preheader.cust_no as custNo,customer.code_desc as agentName,
       qcp_pcs as qcp_pcs,qcp_wt as qcp_wt,ttl_pcs as pieces,ttl_wt as weight,'' as rclNo,
       decode((select count(uld.pre_rcl_no) from EXP_PRE_RCL_ULD_MANF uld where uld.awb_no=preheader.awb_no  and uld.pre_rcl_no=preheader.pre_rcl_no),0,'N','Y') as hseExist,
       nvl(doc.awb_no,'N')   as docRcv,
   	   preheader.SPL_CODE1 as splCode1,preheader.SPL_CODE2 as splCode2,preheader.SPL_CODE3 as splCode3
  	  FROM exp_pre_rcl_hd preheader 
       left outer join EXP_PRE_RCL_DTL preDtl on  preDtl.pre_rcl_no=preheader.pre_rcl_no 
       inner join cust_company customer on preheader.cust_no = customer.code 	  	
  	  left outer join (select awb_no,awb_date from exp_doc_recd where awb_closed_yn='N' and AWB_FRZ_YN='Y') doc on doc.awb_no=preheader.awb_no and doc.awb_date=preheader.awb_date
  	  where preheader.pre_rcl_no not in (select pre_rcl_no from exp_rcl_hd where  pre_rcl_no is not null and ppk_type in('B','P')) and preheader.ppk_type in ('B','P')
   ) 
  	WHERE SEARCHSTATUS IN ('SUBMITTED','WT_DIFFERENCE','OUTSTANDING')
  	<isNotEmpty property="uldNo">
		and uldNo=#uldNo#
		</isNotEmpty>
    order by receptionDate desc,rcltype
	</select>
	
	<select id="Export_eRCLEnquireQueryForMixed" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		SELECT TO_char (rcl_iss_date,'ddmonyy'), substr(preheader.pre_rcl_no,1,4)||'-'||substr(preheader.pre_rcl_no,5) AS preRclNoFormat ,
       preheader.carr_code AS carr, awb_no AS awbno,preheader.pre_rcl_no AS preRclNo ,
       to_char(RCL_ISS_DATE,'DDMONYY     hh24:mi') AS rclsubmissiondate, ppk_type AS rcltype, decode(PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS rclTypeDescription,
       awb_dest AS destination, to_char(RCL_ISS_DATE,'DDMONYY')||' '||to_char(RCL_ISS_DATE,'hh24:mm') AS rclsubmissiondate,
       uld_type AS uldtype, uld_no AS uldseqno,uld_key as uldNo, upper(trim(status)) AS searchStatus,cust_no as custNo,customer.code_desc as agentName,upper(preheader.truck_no1)||decode(upper(preheader.truck_no2),null,'',',')||preheader.truck_no2||decode(upper(preheader.truck_no3),null,'',',')||preheader.truck_no3||decode(upper(preheader.truck_no4),null,'',',')||preheader.truck_no4||decode(upper(preheader.truck_no5),null,'',',')||preheader.truck_no5 as truckNo1,qcp_pcs as qcp_pcs,qcp_wt as qcp_wt,ttl_pcs as pieces,ttl_wt as weight
  		FROM exp_pre_rcl_hd preheader, cust_company customer
 		WHERE preheader.cust_no = customer.code
  		 AND trunc(rcl_iss_date) BETWEEN  (NVL (decode(#issueDateFrom#,null,null,to_date(#issueDateFrom#,'ddmonyy ')), rcl_iss_date   ))
          AND (NVL (decode(#issueDateTo#,null,null,to_date(#issueDateTo#,'ddmonyy')), rcl_iss_date ))                                             
   		AND (   (#agentName# IS NOT NULL AND customer.code_desc = #agentName#)  OR #agentName# IS NULL  )
   		AND (   (#iataCode# IS NOT NULL AND co_iata_code = #iataCode#) OR #iataCode# IS NULL  )
		AND	PPK_TYPE =DECODE(#rclType#,'',PPK_TYPE,'A',PPK_TYPE, #rclType#)
		order by RCL_ISS_DATE desc,PPK_TYPE
  </select>
   
	<select id="Export_selecteRCLDetailBulkById" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkDetailBO">
	SELECT pre_rcl_no                  AS preRCLNO ,
  doc_line_no                      AS docLineNo,
  trim(TO_CHAR(LENGTH,'9990.99'))  AS LENGTH,
  trim(TO_CHAR(width,'9990.99'))   AS width,
  trim(TO_CHAR(height ,'9990.99')) AS height,
  pcs                              AS pieces,
  trim(TO_CHAR(LENGTH,'9990.99'))  AS oldLength,
  trim(TO_CHAR(width,'9990.99'))   AS oldWidth,
  trim(TO_CHAR(height ,'9990.99')) AS oldHeight,
  pcs                              AS oldPieces,
  tr_type                          AS trType,
  tr_status                        AS trStatus,
  cr_user_id                       AS createdUserId,
  cr_date                          AS createdDate ,
  lm_user_id                       AS lastModifiedBy,
  lm_date                          AS lastmodifiedDate
  FROM EXP_PRE_RCL_DMN
  WHERE pre_rcl_no=#preRclNo# 
	</select>
	
	
	<select id="Export_totalBulk" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
     SELECT pre_rcl_no as preRCLNO,sum(pcs) as totalPieces
     FROM EXP_PRE_RCL_DMN where pre_rcl_no=#preRclNo# GROUP BY pre_rcl_no
    </select>  
		<select id="Export_selecteRCLDetailMixedById" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLMixedPrepackDetailBO">
	  SELECT brk.pre_rcl_no as preRCLNO, brk.doc_line_no as docLineNo , brk.awb_no as awbNo,brk.awb_no as oldAwbNo,brk.dummy_awb_yn as dummyAwbNo, brk.dest as destination, brk.pcs as pieces,
       brk.weight as netWeight, brk.tr_type as trType, brk.tr_status as trStatus, brk.cr_user_id as createdUserId, brk.cr_date as createdDate, brk.lm_user_id as lastModifiedBy, 
       brk.lm_date as lastmodifiedDate,to_char(brk.AWB_DATE,'DDMONYY') as awbDate,
       brk.qcp_ind as qcpIndicator, brk.qcp_contact_person as qcp_contactPerson, brk.qcp_contact_no as qcp_contactNo, brk.qcp_fax_no as qcp_faxNo, brk.qcp_pcs as qcp_pcs,
       brk.qcp_wt as qcp_wt, brk.qcp_goods_desc as qcp_goods_desc, to_char(brk.qcp_delv_date,'ddmonyy') as qcp_delivery_date, brk.qcp_delv_time as qcp_delv_time,
       decode(fhl.awb_no,null,'N','Y') as fhl,(select status from exp_pre_rcl_hd where pre_rcl_no=#preRclNo#) as searchStatus ,brk.pcs as oldPieces,brk.weight as oldWeight,brk.dest as oldDest,
       SPL_CODE1 AS splCode1,SPL_CODE2 AS splCode2,SPL_CODE3 AS splCode3,SPL_CODE4 AS splCode4,SPL_CODE5 AS splCode5,SPL_CODE6 AS splCode6,SPL_CODE7 AS splCode7,SPL_CODE8 AS splCode8,SPL_CODE9 AS splCode9
      FROM exp_pre_rcl_brkdn brk
      left outer join edi_fhl fhl on fhl.awb_no=brk.awb_no and fhl.awb_date=brk.awb_date
      WHERE pre_rcl_no=#preRclNo#
    </select> 
    <select id="Export_selecteRCLDetailPrepackById" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLPrepackDetailBO">
	 SELECT securenet_serial_no AS secSerialNo,SECURENET_COUNT as secSerialCount,pre_rcl_no as preRCLNO, doc_line_no as docLineNo, uld_type as uldType, uld_no as uldSeqNo, uld_carr as uldCarrier, uld_key as ULDNo,
       contr_code as contorCode, pcs pieces, wt, net_wt, gross_wt as grossWeight, tare_wt, fscale_wt, rtn_pcs,
       rtn_wt, tr_type, tr_status, cr_user_id, cr_date, lm_user_id, lm_date,uld_key as altUld,
       ELI_YN as eliYN,ELI_PI_NUM as eliPINumer,ELM_YN as elmYN,ELM_PI_NUM  as elmPINumer,
       ELI_PI_NUM as newEliPINumer, ELM_PI_NUM  as newElmPINumer
     FROM EXP_PRE_RCL_DTL WHERE pre_rcl_no=#preRclNo#
    </select>
    <select id="Export_totalPrepack" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	 SELECT sum(pcs) totalPieces, trim(to_char(sum(gross_wt),'9999990.99')) as totalWeight
     FROM EXP_PRE_RCL_DTL WHERE pre_rcl_no=#preRclNo#
    </select>
    <select id="Export_totalMixed" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	 select  sum(PCS) as totalPieces, trim(to_char(sum(WEIGHT),'9999990.99')) as totalWeight
		from   exp_pre_rcl_brkdn WHERE  pre_rcl_no= #preRclNo#
				
    </select>
   <update id="Export_updatePreRCLHeaderBeforeCAR" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		UPDATE exp_pre_rcl_hd
   		SET carr_code = #carr#,
	       awb_dest = #destination#,
		   ttl_pcs= #pieces#,
		   ttl_wt =#weight#,
		   SPL_CODE1=#splCode1#,
	      SPL_CODE2=#splCode2#,
	      SPL_CODE3=#splCode3#,
	      SPL_LOAD_REQ=#splLoadReqCode#,
	      CONTENT=#content#,
	      uld_key = #uldNo#,
	      contr_code = #contourCode#,	      
	       dummy_awb_yn = #dummyAWBNo#,
	       uld_type = #uldType#,
	       uld_no = #uldSeqNo#,
	       uld_carr = #uldCarrier#, 
	       qcp_ind = #qcpIndicator#,	       
		   lm_user_id =#lastModifiedBy#,
		   lm_date = sysdate,
		   ACT_ACC_DATE=to_date(#accpTime#,'DD-MON-YY'),
		    status=nvl(#status#,status),
		   ACT_ACC_TIME=to_number(#actAcpTime#),
		   GROSS_WT = nvl(#totalGrossWt#,GROSS_WT),
		   SCREENING_OPTION=#racfRadioOption#,
		   RACSF_CODE=#screenUnderRacsfCode#,
		   SCREENING_METHOD=#screeningMethod#,
		   EXEMPTED_REASON=#exemptedReason#,
		   REMARKS=#remarks#,RA_TYPE=#rakcType#,RACSF_TRK_NUMBER=#truckNo#,
		   DEDICATED_PERSON=#personInCab#,
		   CARR_RF=#carrierRF#,
		   VKC_CODE = #vkcCode#,
			SEAL_NUM1 = #sealNum1#,
			SEAL_NUM2 = #sealNum2#,
			SEAL_NUM3 = #sealNum3#,
			SEAL_NUM4 = #sealNum4#,
			SEAL_NUM5 = #sealNum5#,
			SEAL_NUM6 = #sealNum6#,
			SEAL_NUM7 = #sealNum7#,
			SEAL_NUM8 = #sealNum8#,
			SEAL_NUM9 = #sealNum9#,
			DC_NOTICE = #discNotice# ,
			BU_PERSON_NAME  =  #buPersonName#,
			ELI_YN = nvl(#eliYN#,'ELI_YN'),
			ELM_YN = nvl(#elmYN#,'ELM_YN')
 		WHERE pre_rcl_no =#preRclNo#
 	</update>
 		<update id="Export_updatePreRCLHeaderMix" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		UPDATE exp_pre_rcl_hd
   		SET carr_code = #carr#,
	       awb_dest = #destination#,
		   SPL_CODE1=#splCode1#,
	      SPL_CODE2=#splCode2#,
	      SPL_CODE3=#splCode3#,
	      SPL_LOAD_REQ=#splLoadReqCode#,
	      CONTENT=#content#,
	      uld_key = #uldNo#,
	      contr_code = #contourCode#,	      
	       dummy_awb_yn = #dummyAWBNo#,
	       uld_type = #uldType#,
	       uld_no = #uldSeqNo#,
	       uld_carr = #uldCarrier#, 
	       qcp_ind = #qcpIndicator#,	       
		   lm_user_id =#lastModifiedBy#,
		   lm_date = sysdate,
		   TTL_PCS = #pieces#,
		   TTL_WT = #weight#,
		   ACT_ACC_DATE=to_date(#accpTime#,'DD-MON-YY'),
		   status=nvl(#status#,status),
		   ACT_ACC_TIME=to_number(#actAcpTime#),
		   GROSS_WT = nvl(#totalGrossWt#,GROSS_WT),
		   WEIGHT_SENT_BY_GLS = NVL(#weightSentByGLS#,WEIGHT_SENT_BY_GLS),
		   SECURENET_SERIAL_NO = #secSerialNo#,
		   SECURENET_COUNT = #secSerialCount#,
 ELI_YN =  #eliYN# ,
			ELI_PI_NUM = #eliPINumer# ,
			ELM_YN = #elmYN# ,
			ELM_PI_NUM = #elmPINumer# ,
			DC_NOTICE = #discNotice# ,
			BU_PERSON_NAME  =  #buPersonName#,
		   SCREENING_OPTION=#racfRadioOption#,
		   RACSF_CODE=#screenUnderRacsfCode#,
		   SCREENING_METHOD=#screeningMethod#,
		   EXEMPTED_REASON=#exemptedReason#,
		   REMARKS=#remarks#,RA_TYPE=#rakcType#,RACSF_TRK_NUMBER=#truckNo#,
		   DEDICATED_PERSON=#personInCab#,
		   CARR_RF=#carrierRF#,
		    VKC_CODE = #vkcCode#,
			SEAL_NUM1 = #sealNum1#,
			SEAL_NUM2 = #sealNum2#,
			SEAL_NUM3 = #sealNum3#,
			SEAL_NUM4 = #sealNum4#,
			SEAL_NUM5 = #sealNum5#,
			SEAL_NUM6 = #sealNum6#,
			SEAL_NUM7 = #sealNum7#,
			SEAL_NUM8 = #sealNum8#,
			SEAL_NUM9 = #sealNum9#
 		WHERE pre_rcl_no =#preRclNo#
 	</update>
 	<insert id="insertServiceErrorLogForUpdMixPPK" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		INSERT INTO SERVICE_ERR_LOG(TR_NO ,TR_TYPE,DOC_LINE_NO,TR_DATE,OWNER_ID,AGENT_NO,CARR_CODE  ,RMK1,RMK2,ERR_REASON ,SVC_USER_ID,SVC_DATE,ULD_TYPE,ULD_NO,
     								ULD_CARR   ,ULD_KEY    ,CR_USER_ID ,CR_DATE    ,LM_USER_ID ,LM_DATE    ,ORG_OWNED_INV,FLT_TYPE)
     	VALUES( #preRclNo#,'MR',SERVICE_ERR_LOG_DLN_SEQ.nextval,SYSDATE,#carr#,NULL,#carr#,NULL,NULL,'Found ULD in inventory during Update eRCL(Mixed)' ,'',
      	'',#uldType#,#uldSeqNo#,#uldCarrier#,#uldNo#,#lastModifiedBy# ,SYSDATE,#lastModifiedBy# ,SYSDATE,'N','E')
	</insert>	
 	
 	<update id="Export_updatePreRCLBulkDetail" parameterClass="cargo.cms.export.bo.ERCLBulkDetailBO">
		UPDATE EXP_PRE_RCL_DMN
		SET    PRE_RCL_NO  = #preRCLNO#,
		       LENGTH      = #length#,
		       WIDTH       = #width#,
		       HEIGHT      = #height#,
		       PCS         = #pieces#,
		       TR_STATUS   = #trStatus#,
		       LM_USER_ID  = #lastModifiedBy#,
		       LM_DATE     = sysdate
			   WHERE  PRE_RCL_NO  = #preRCLNO#
		AND    DOC_LINE_NO = #docLineNo#
	</update>
	<insert id="Export_insertmRCLBulkDetail" parameterClass="cargo.cms.export.bo.ERCLBulkDetailBO">
	  INSERT INTO EXP_PRE_RCL_DMN (
	   PRE_RCL_NO, DOC_LINE_NO, LENGTH, 
	   WIDTH, HEIGHT, PCS, 
	   TR_TYPE, TR_STATUS, CR_USER_ID, 
	   CR_DATE, LM_USER_ID, LM_DATE) 
	 VALUES (#preRCLNO#,#docLineNo#,#length#,#width#,#height#,#pieces#,'MR','N',#createdUserId#,sysdate,#lastModifiedBy#,sysdate)
  </insert>
  <select id="Export_mRCLDocumentSequence" resultClass="java.lang.Integer">
     	  select EXP_MRCLDLINE_SEQ.NEXTVAL from dual
	 	 
	</select>
	<update id="Export_updateMixedPrepackDetail" parameterClass="cargo.cms.export.bo.ERCLMixedPrepackDetailBO">
		UPDATE EXP_PRE_RCL_BRKDN
		SET    PRE_RCL_NO         = #preRCLNO#,
		       AWB_NO             = #awbNo#,
		       awb_date             = NVL(#awbDate#,awb_date),
		       DUMMY_AWB_YN       = #dummyAwbNo#,
		       DEST               = #destination#,
		       PCS                = #pieces#,
		       WEIGHT             = #netWeight#,
		       TR_TYPE            = #trType#,
		       TR_STATUS          = #trStatus#,
		       LM_USER_ID         = #lastModifiedBy#,
		       LM_DATE            = sysdate,
		       QCP_IND            = #qcpIndicator#,
		       QCP_CONTACT_PERSON = #qcp_contactPerson#,
		       QCP_CONTACT_NO     = #qcp_contactNo#,
		       QCP_FAX_NO         = #qcp_faxNo#,
		       QCP_PCS            = #qcp_pcs#,
		       QCP_WT             = #qcp_wt#,
		       QCP_GOODS_DESC     = #qcp_goods_desc#,
		       QCP_DELV_DATE      = to_date(#qcp_delivery_date#,'ddmonyy'),
		       QCP_DELV_TIME      = #qcp_delv_time#,
		       SPL_CODE1 = #splCode1#,
		       SPL_CODE2 = #splCode2#,
		       SPL_CODE3 = #splCode3#,
		       SPL_CODE4 = #splCode4#,
		       SPL_CODE5 = #splCode5#,
		       SPL_CODE6 = #splCode6#,
		       SPL_CODE7 = #splCode7#,
		       SPL_CODE8 = #splCode8#,
		       SPL_CODE9 = #splCode9#,
		       tr_type_evt = 'ERAMIX',
		       CARR_RF=#carrierRF#
		WHERE  PRE_RCL_NO         = #preRCLNO#
		AND    DOC_LINE_NO        = #docLineNo#
	</update>
		<insert id="Export_insertmRCLMixedDetail" parameterClass="cargo.cms.export.bo.ERCLMixedPrepackDetailBO">
	INSERT INTO EXP_PRE_RCL_BRKDN (
	   PRE_RCL_NO, DOC_LINE_NO, AWB_NO, 
	   AWB_DATE, DUMMY_AWB_YN, DEST, 
	   PCS, WEIGHT, TR_TYPE, 
	   TR_STATUS, CR_USER_ID, CR_DATE, 
	   LM_USER_ID, LM_DATE, QCP_IND, 
	   QCP_CONTACT_PERSON, QCP_CONTACT_NO, QCP_FAX_NO, 
	   QCP_PCS, QCP_WT, QCP_GOODS_DESC, 
	   QCP_DELV_DATE, QCP_DELV_TIME,SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9,CARR_RF) 
		VALUES (#preRCLNO#,#docLineNo#,#awbNo# ,NVL(pkg_common.get_awb_date(#awbNo#, 'E'), SYSDATE),#dummyAwbNo#,upper(#destination#),#pieces#,#netWeight2#,'MR','C',
		#createdUserId#,sysdate,#lastModifiedBy#,sysdate,#qcpIndicator#,#qcp_contactPerson#,#qcp_contactNo#,#qcp_faxNo#,#qcp_pcs#,#qcp_wt#,#qcp_goods_desc#,
		TO_DATE(#qcp_delivery_date#,'ddmonyy'),#qcp_delv_time#,#splCode1#,#splCode2#,#splCode3#,#splCode4#,#splCode5#,#splCode6#,#splCode7#,#splCode8#,#splCode9#,#carrierRF#)
	</insert>
	<select id="Export_mRCLMixedDocumentSequence" resultClass="java.lang.Integer">
	  select EXP_MRCLBDNLINE_SEQ.NEXTVAL from dual
	</select>
	<select id="Export_checkrepeatedawb"  parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
   	select cnt1 + cnt2
	 from
	 (select count(1) cnt1 from exp_pre_rcl_hd,cust_company c where awb_no = #awbNo# and status in('SUBMITTED','WT DIFFERENCE') and ppk_type=#rclType#
	 and cust_no=c.code
	and c.code_desc!=#agentName#) c,
	 (select count(1) cnt2 from exp_pre_rcl_hd a, exp_pre_rcl_brkdn b,cust_company c
	          where a.pre_rcl_no = b.pre_rcl_no(+)
	            and a.status in('SUBMITTED','WT DIFFERENCE')
				and b.awb_no = #awbNo# and PPK_TYPE=#rclType#
				and a.cust_no=c.code
				and c.code_desc!=#agentName#) d
 
 	</select>
 	
 	<select id="export_checkuldinventory"  parameterClass="java.lang.String" resultClass="java.lang.Integer">
	   select count(uld_Key) from ULD_INVENTORY where uld_Key=#uldNo# and LOC_CODE IS NOT NULL
  	  <!-- Changes made for the defect number  #4369# on 10/JAN/2007
	    select count(uld_Key) from ULD_INVENTORY where uld_Key=#uldNo# and WH_DEST is not null and owned_inv = 'Y'
	  -->   
	 </select>
	 <select id="getDocLineNoForGlsBulkUpdate"  parameterClass="java.lang.String" resultClass="java.lang.Integer">
	   select doc_line_no from EXP_PRE_RCL_DMN where pre_rcl_no = #preRclNo# and rownum = 1
  	  </select>
  	  <select id="getDocLineNoForGlsPpkUpdate"  parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	  select doc_line_no from EXP_PRE_RCL_DTL where pre_rcl_no = #preRclNo# and ULD_KEY=#uldNo# and rownum = 1
  	  </select>
  	   <select id="getDocLineNoForGlsMixUpdate"  parameterClass="java.util.HashMap" resultClass="java.lang.String">
	   select doc_line_no from EXP_PRE_RCL_BRKDN where pre_rcl_no = #preRclNo# and AWB_NO=#awbNo# and rownum = 1
  	  </select>
  	   <select id="getStatusForGlsMixUpdate"  parameterClass="java.lang.String" resultClass="java.lang.String">
	   select status from exp_pre_rcl_hd where pre_rcl_no = #preRclNo# 
  	  </select>
		 <update id="Export_updatePreRCLPrepackDetail" parameterClass="cargo.cms.export.bo.ERCLPrepackDetailBO">
		UPDATE EXP_PRE_RCL_DTL
		SET    PRE_RCL_NO  = #preRCLNO#,
		       ULD_TYPE    = #uldType#,
		       ULD_NO      = #uldSeqNo#,
		       ULD_CARR    = #uldCarrier#,
		       ULD_KEY     = #ULDNo#,
		       CONTR_CODE  = #contorCode#,
		       PCS         = #pieces#,
		       GROSS_WT    = #grossWeight#,
		       TARE_WT     =#tareWeight#,
		       NET_WT=#grossWeight#-#tareWeight#,
		       TR_STATUS   = #trStatus#,
		       LM_USER_ID  = #lastModifiedBy#,
		       LM_DATE     =sysdate,
		        SECURENET_SERIAL_NO = #secSerialNo#,
		   	   SECURENET_COUNT = #secSerialCount#,
		   	   ELI_YN =  #eliYN# ,
				ELI_PI_NUM = #eliPINumer# ,
				ELM_YN = #elmYN# ,
				ELM_PI_NUM = #elmPINumer# 
		WHERE  PRE_RCL_NO  = #preRCLNO#
		AND    DOC_LINE_NO = #docLineNo#
	</update>
	<insert id="Export_insertmRCLPrepackDetail" parameterClass="cargo.cms.export.bo.ERCLPrepackDetailBO">
		INSERT INTO EXP_PRE_RCL_DTL (
		   PRE_RCL_NO, DOC_LINE_NO, ULD_TYPE, 
		   ULD_NO, ULD_CARR, ULD_KEY, 
		   CONTR_CODE, PCS, WT, 
		   NET_WT, GROSS_WT, TARE_WT, 
		   FSCALE_WT, RTN_PCS, RTN_WT, 
		   TR_TYPE, TR_STATUS, CR_USER_ID, 
		   CR_DATE, LM_USER_ID, LM_DATE,TR_TYPE_EVT,securenet_serial_no,SECURENET_COUNT,ELI_YN,ELI_PI_NUM,ELM_YN,ELM_PI_NUM) 
		VALUES (#preRCLNO#,#docLineNo#,#uldType# ,#uldSeqNo#,#uldCarrier#,#ULDNo#,#contorCode#,1,0,#grossWeight#-#tareWeight#,#grossWeight#,#tareWeight#,0,0,0,'MR',
		'S',#createdUserId#,sysdate,#lastModifiedBy#,sysdate,#trtypeEvt#,#secSerialNo#,#secSerialCount#,#eliYN#,#eliPINumer#,#elmYN#,#elmPINumer#)
	</insert>
	<select id="Export_mRCLPrepackDocumentSequence" resultClass="java.lang.Integer">
  	select EXP_RCLDLINE_SEQ.NEXTVAL from dual
	</select>
	<select id="Export_selectAWBPrefix" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		SELECT CODE as awbNo1 FROM MAST_AWB_PREFIX WHERE CARR_CODE = #carr#
	</select>
	<select id="Export_selectDestination" resultClass="java.lang.String">
  		select base_port from sys_param
  	</select>
  	<delete id="Export_deletemRCLBulkDetailFromUpdate" parameterClass="cargo.cms.export.bo.ERCLBulkDetailBO">
	delete from exp_pre_rcl_dmn where  doc_line_no=#docLineNo#
	</delete>
	<update id="Export_updatePieces" parameterClass="cargo.cms.export.bo.ERCLBulkDetailBO">
     update exp_pre_rcl_hd
	   set ttl_pcs=ttl_pcs-#pieces# 
	   where  pre_rcl_no=#preRCLNO#
	</update>
	<delete id="Export_deletemRCLPrepackDetailFromUpdate" parameterClass="cargo.cms.export.bo.ERCLPrepackDetailBO">
	delete from exp_pre_rcl_dtl where  doc_line_no=#docLineNo#
	</delete>
	<update id="Export_updatePiecesPrepack" parameterClass="cargo.cms.export.bo.ERCLPrepackDetailBO">
     update exp_pre_rcl_hd
	   set ttl_pcs=ttl_pcs-#pieces# 
	   where  pre_rcl_no=#preRCLNO#
	</update>
	<select id="expFetchUldHseHeader" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO"  resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		SELECT DTL.ULD_KEY AS uldNo,DTL.TARE_WT AS uldWt,HD.AWB_NO as awbNo,SUBSTR(TRIM(HD.AWB_NO),1,3)||'-'||SUBSTR(TRIM(HD.AWB_NO),4) awbNoDisplay,
		BRK.PCS as pieces
		 FROM EXP_PRE_RCL_HD HD
		 LEFT OUTER JOIN EXP_PRE_RCL_DTL DTL ON HD.PRE_RCL_NO=DTL.PRE_RCL_NO  
		 left outer join EXP_PRE_RCL_BRKDN BRK ON BRK.PRE_RCL_NO=DTL.PRE_RCL_NO AND BRK.AWB_NO=HD.AWB_NO AND BRK.AWB_DATE=HD.AWB_DATE
		 
		 WHERE HD.pre_rcl_no=#preRclNo# AND HD.AWB_NO=#awbNo#
	</select>
	<select id="expFetchUldHseManf" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO"  resultClass="cargo.cms.export.bo.UldHseManfDetailBO">
		SELECT BRKDN.AWB_NO as awbNo,HAWB.HAWB_NO AS hawbNo,HAWB.HAWB_ORG orig,FHL.AWB_DEST dest,HAWB.HAWB_PCS fhlPc,HAWB.HAWB_NET_WT fhlWt,ULD_MANF.PC AS loadPc,ULD_MANF.WT AS loadWt,
		(HAWB.HAWB_PCS-ULD_MANF.PC) as avlPc ,(HAWB.HAWB_NET_WT-ULD_MANF.WT ) as avlWt,#lastModifiedBy# as modifiedUserId,ULD_MANF.PC AS newBuPc,ULD_MANF.WT AS newBuWt,
		BRKDN.pre_rcl_no as preRcl
		 FROM EXP_PRE_RCL_BRKDN BRKDN
		 JOIN EDI_FHL FHL ON  FHL.AWB_NO=BRKDN.AWB_NO
		 JOIN EDI_FHL_HAWB HAWB ON HAWB.TR_NO=FHL.TR_NO
		 JOIN EXP_PRE_RCL_ULD_MANF ULD_MANF ON ULD_MANF.PRE_RCL_NO=BRKDN.PRE_RCL_NO AND ULD_MANF.AWB_NO=BRKDN.AWB_NO AND HAWB.HAWB_NO=ULD_MANF.HAWB_NO
		 WHERE BRKDN.pre_rcl_no=#preRclNo# AND BRKDN.AWB_NO=#awbNo#
	</select>
    <update id="updUldHseManf" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
     update EXP_PRE_RCL_ULD_MANF  
     SET PC = #newBUPcs#,
   	WT = #newBUWt#,
  	 LM_USER_ID =#lastModifiedBy#,
  	 LM_DATE = sysdate
  	 WHERE AWB_NO = #houseAwbNo# AND
		HAWB_NO = #hawbNo# 
	   and PRE_RCL_NO=#preRclNo#
	   and uld_key = #uldNo#
	</update>
	<delete id="deleteupdUldHseManf" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	delete from EXP_PRE_RCL_ULD_MANF where PRE_RCL_NO=#preRclNo# and HAWB_NO = #hawbNo# and AWB_NO = #houseAwbNo# 
	</delete>
	<delete id="Export_deletemRCLMixedDetailFromUpdate" parameterClass="cargo.cms.export.bo.ERCLMixedPrepackDetailBO">
	delete from exp_pre_rcl_brkdn where pre_rcl_no=#preRCLNO# and doc_line_no=#docLineNo#
	</delete>
	<delete id="Export_deletemRCLUldMnfstDtlFromUpdate" parameterClass="map">
	delete from exp_pre_rcl_uld_manf where PRE_RCL_NO = #preRCLNO# and ULD_KEY = #uldNo# and AWB_NO = #awbNo#
	</delete>
	<select id="checkhse" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.Integer">
	select count(1) from EDI_FHL where AWB_NO=#houseAwbNo#
	</select>
	<select id="getSHCType_update" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.String">
	select decode(count(spl_code),0,'UNKNOWN_SPL_EXP','SPL_EXP') FROM CUST_AIRL_SPL_CODE 
	WHERE CARR_CODE=#carr#  and SPL_TYPE='SPL_EXP' AND SPL_CODE in( #splCode1# , #splCode2#,#splCode3#)
	</select>
	<insert id="insert_rclheader" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	    INSERT INTO EXP_RCL_HD (
	   RCL_NO,PRE_RCL_NO, CARR_CODE, AWB_NO, 
	   AWB_DATE, PPK_TYPE, AWB_PFX, 
	   AWB_DEST, RCL_DATE, CUST_NO, SEC_CHECK, 
	    REPT_VER, RMK, 
	     TR_TYPE, TR_STATUS, 
	   CR_USER_ID, CR_DATE, LM_USER_ID, 
	   LM_DATE,SPL_CODE1,SPL_CODE2,SPL_CODE3,
	   RCL_PCS,RCL_WT,ULD_TYPE,ULD_NO,ULD_CARR,ULD_KEY,AWB_CONTENT,STATUS,EXP_CRGO,CARR_RF,SCREENING_OPTION,RACSF_CODE,SCREENING_METHOD,EXEMPTED_REASON,REMARKS,RA_TYPE,RACSF_TRK_NUMBER,DEDICATED_PERSON) 
	   VALUES (#rclNo#,#preRclNo#,#carr#,#awbNo#,#awbDate#,#rclType#,#awbNo1#,
	   #destination#,SYSDATE,#custNo#,#qcpIndicator#,0,#remarks#,'N','N',#createdUserId#,SYSDATE,#lastModifiedBy#,SYSDATE,#splCode1#,#splCode2#,#splCode3#,#pieces#,#weight#,
	   #uldType#,#uldSeqNo#,#uldCarrier#,#uldNo#,#content#,DECODE(#qcpIndicator#,'Y','P','S'),'Y',#carrierRF#,#racfRadioOption#,#screenUnderRacsfCode#,#screeningMethod#,#exemptedReason#,
			#screenUnderRacsfRemarks#,#rakcType#,#truckNo#,#personInCab#)
 	</insert>
 	<select id="get_rclseqNo" parameterClass="java.lang.String" resultClass="java.lang.String">
	 select lpad(rcl_no_seq.nextval, 8, 0) as nextval from dual 
	</select>
	<update id="update_rclbulkdmn" parameterClass="cargo.cms.export.bo.ERCLBulkDetailBO">
	  UPDATE EXP_RCL_DMN
		SET    
		       LENGTH      = #length#,
		       WIDTH       = #width#,
		       HEIGHT      = #height#,
		       PCS         = #pieces#,
		       TR_STATUS   = #trStatus#,
		       LM_USER_ID  = #lastModifiedBy#,
		       LM_DATE     = sysdate
			   WHERE  RCL_NO  = #rclNo#
		AND    DOC_LINE_NO = #docLineNo#
	</update>
	<insert id="insert_rclbulkdmn" parameterClass="cargo.cms.export.bo.ERCLBulkDetailBO">
		INSERT INTO EXP_RCL_DMN (
	   RCL_NO, DOC_LINE_NO, LENGTH, 
	   WIDTH, HEIGHT, PCS, 
	   TR_TYPE, TR_STATUS, CR_USER_ID, 
	   CR_DATE, LM_USER_ID, LM_DATE) 
	 VALUES (#rclNo#,#docLineNo#,#length#,#width#,#height#,#pieces#,'MR','N',#createdUserId#,sysdate,#lastModifiedBy#,sysdate)
	</insert>
	<select id="validateSpecialLoad" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	SELECT count(1) FROM MAST_CODE_DTL WHERE code_type='SPL_LOAD_REQUIREMENT' and code_desc=#param# ORDER BY CODE
	</select>
	<insert id="insert_rclDtl" parameterClass="cargo.cms.export.bo.ERCLPrepackDetailBO">
	INSERT INTO EXP_RCL_DTL (
	   RCL_NO,PRE_RCL_NO,DOC_LINE_NO,PPK_TYPE,ULD_TYPE, 
	   ULD_NO, ULD_CARR, ULD_KEY, 
	   CONTR_CODE, PCS,
	   NET_WT, GROSS_WT, TARE_WT,
	   FSCALE_WT, RTN_PCS, RTN_WT, 
	   TR_TYPE, TR_STATUS, CR_USER_ID, 
	   CR_DATE, LM_USER_ID, LM_DATE,LOC_CODE) 
	VALUES (#rclNo#,#preRCLNO#,#docLineNo#,'P',#uldType# ,#uldSeqNo#,#uldCarrier#,#ULDNo#,#contorCode#,#pieces#,#grossWeight#-#tareWeight#,#grossWeight#,#tareWeight#,0,0,0,
	'MR','S',#createdUserId#,sysdate,#lastModifiedBy#,sysdate,#dummyLocn#)
</insert>
<select id="chkServiceErrorLog" parameterClass="map" resultClass="java.lang.Integer">
	select count(1) from service_err_log where tr_no= #tr_no#
</select>
<insert id="insertServiceErrorLogUpdateErclPrepack" parameterClass="cargo.cms.export.bo.ERCLPrepackDetailBO">
		INSERT INTO SERVICE_ERR_LOG(TR_NO ,TR_TYPE,DOC_LINE_NO,TR_DATE,OWNER_ID,CARR_CODE,RMK1,RMK2,ERR_REASON ,SVC_USER_ID,SVC_DATE,ULD_TYPE,ULD_NO,
     								ULD_CARR   ,ULD_KEY    ,CR_USER_ID ,CR_DATE    ,LM_USER_ID ,LM_DATE,FLT_TYPE)
     	VALUES( #preRCLNO#,'MR',SERVICE_ERR_LOG_DLN_SEQ.nextval,SYSDATE,#uldCarrier#,#uldCarrier#,NULL,NULL,'Found ULD in cpct inventory during Update eRCL(Prepack)' ,'',
      	'',#uldType#,#uldSeqNo#,#uldCarrier#,#ULDNo#,#createdUserId# ,SYSDATE,#lastModifiedBy# ,SYSDATE,'E')
</insert>
<select id="fetchSumUldManfPcsWt" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		SELECT NVL(SUM(PC),0) AS totalBUPcs, NVL(SUM(WT),0) AS totalBUWt FROM EXP_PRE_RCL_ULD_MANF WHERE PRE_RCL_NO = #preRclNo# AND ULD_KEY =#uldNo# AND AWB_NO = #houseAwbNo#
	</select>
	<select id="checkUldAgainstAgentForUpdPrepack" parameterClass="map" resultClass="java.lang.Integer">
		SELECT   count(1) FROM EXP_PRE_RCL_HD hd,EXP_PRE_RCL_DTL dtl
		WHERE hd.PRE_RCL_NO = dtl.PRE_RCL_NO AND dtl.ULD_KEY = #uldNo#  AND hd.STATUS = 'SUBMITTED' AND hd.CUST_NO=#custNo#
	</select>
<select id="Export_eRCLUpdateMixedHouseDtls" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO" >
	SELECT 
	H.HAWB_NO AS hawbNo ,
	H.HAWB_ORG AS hawbOrg,
	H.HAWB_DEST AS hawbDest,
	H.HAWB_PCS AS fhlPcs,
	H.HAWB_NET_WT AS fhlWt,
	ABS(H.HAWB_PCS - NVL((SELECT SUM(PC) FROM EXP_PRE_RCL_ULD_MANF U  WHERE A.AWB_NO = U.AWB_NO AND H.HAWB_NO    = U.HAWB_NO),0)) AS avlPcs,
	ABS(H.HAWB_NET_WT- NVL((SELECT SUM(WT) FROM EXP_PRE_RCL_ULD_MANF U WHERE A.AWB_NO = U.AWB_NO AND H.HAWB_NO    = U.HAWB_NO),0)) AS avlWt ,
	ABS(NVL((SELECT SUM(PC) FROM EXP_PRE_RCL_ULD_MANF U  WHERE A.AWB_NO = U.AWB_NO AND H.HAWB_NO    = U.HAWB_NO AND PRE_RCL_NO = #preRclNo# AND ULD_KEY=#uldNo#),0)) AS loadPcs,
    ABS(NVL((SELECT SUM(WT) FROM EXP_PRE_RCL_ULD_MANF U WHERE A.AWB_NO = U.AWB_NO AND H.HAWB_NO    = U.HAWB_NO AND PRE_RCL_NO = #preRclNo# AND ULD_KEY=#uldNo#),0)) AS loadWt ,  
	A.AWB_PCS as awbPcs
	FROM EDI_FHL A
	JOIN EDI_FHL_HAWB H
	ON A.TR_NO = H.TR_NO	
	WHERE A.AWB_NO =#houseAwbNo#	
</select>

<select id="getUpdateHouseManifestDtls" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO" >

SELECT H.HAWB_NO AS hawbNo  ,
  H.HAWB_ORG      AS hawbOrg ,
  H.HAWB_DEST     AS hawbDest,
  H.HAWB_PCS      AS fhlPcs  ,
  H.HAWB_NET_WT   AS FHLWT   , 
  ABS(H.HAWB_PCS - NVL((SELECT SUM(PC) FROM EXP_PRE_RCL_ULD_MANF U WHERE A.AWB_NO = U.AWB_NO AND H.HAWB_NO = U.HAWB_NO),0))  AS AVLPCS  ,
  ABS(H.HAWB_NET_WT - NVL((SELECT SUM(WT) FROM EXP_PRE_RCL_ULD_MANF U WHERE A.AWB_NO = U.AWB_NO AND H.HAWB_NO = U.HAWB_NO),0))  AS avlWt   ,
  ABS(NVL((SELECT SUM(PC) FROM EXP_PRE_RCL_ULD_MANF U  WHERE A.AWB_NO = U.AWB_NO AND H.HAWB_NO    = U.HAWB_NO ),0)) AS loadPcs,
  ABS(NVL((SELECT SUM(WT) FROM EXP_PRE_RCL_ULD_MANF U WHERE A.AWB_NO = U.AWB_NO AND H.HAWB_NO    = U.HAWB_NO),0)) AS loadWt ,  
  A.AWB_PCS       AS awbPcs  
  FROM EDI_FHL A
  JOIN EDI_FHL_HAWB H ON A.TR_NO = H.TR_NO  
where A.AWB_NO = #houseAwbNo#
</select>
<select id="recvDocForAwb" parameterClass="java.lang.String" resultClass="java.lang.Integer">
  select count(1) from EXP_DOC_RECD where AWB_NO=#param# AND AWB_FRZ_YN = 'Y'
</select>
<select id="updPreRCLHouseDtls" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.Integer">
 select count(1) from EXP_PRE_RCL_ULD_MANF where AWB_NO=#houseAwbNo# and HAWB_NO =#hawbNo# AND ULD_KEY = #uldNo#
</select>
<insert id="insert_erclHouseMnfstDtls" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
INSERT INTO EXP_PRE_RCL_ULD_MANF (
   PRE_RCL_NO,ULD_KEY,AWB_NO,HAWB_NO,
	PC,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
VALUES (#preRclNo#,#uldNo#,#houseAwbNo#,#hawbNo#,#newBUPcs#,#newBUWt#,#createdUserId#,sysdate,#lastModifiedBy#,sysdate)
</insert>
<insert id="update_RCLHouseMnfstDtls" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
INSERT INTO EXP_RCL_ULD_MANF (
   RCL_NO,ULD_KEY,AWB_NO,HAWB_NO,
	PC,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
VALUES (#rclNo#,#uldNo#,#houseAwbNo#,#hawbNo#,#newBUPcs#,#newBUWt#,#createdUserId#,sysdate,#lastModifiedBy#,sysdate)
</insert>
<select id="fetchERCLHouseMnfstDtls" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT PRE_RCL_NO AS preRclNo,ULD_KEY AS uldNo,AWB_NO AS houseAwbNo,HAWB_NO AS hawbNo,PC AS newBUPcs,WT AS newBUWt FROM EXP_PRE_RCL_ULD_MANF WHERE PRE_RCL_NO = #preRclNo#
</select>
<insert id="update_insertERCLMixedDetail" parameterClass="cargo.cms.export.bo.ERCLMixedPrepackDetailBO">
INSERT INTO EXP_RCL_BRKDN (
   RCL_NO,AWB_NO,AWB_DATE,ULD_KEY,PCS,WEIGHT,DEST,
   TR_TYPE, TR_STATUS, CR_USER_ID, CR_DATE, 
   LM_USER_ID, LM_DATE,SEC_CHECK,CONTENT,SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9,CARR_RF) 
VALUES (#rclNo#,#awbNo# ,#awbDate#,#uldNo#,#pieces#,#netWeight2#,upper(#destination#),'MR','C',#createdUserId#,sysdate,#lastModifiedBy#,sysdate,#qcpIndicator#,#qcp_goods_desc#,#splCode1#,#splCode2#,#splCode3#,#splCode4#,#splCode5#,#splCode6#,#splCode7#,#splCode8#,#splCode9#,#carrierRF#)
</insert>
	<insert id="exp_updInsertRCLDtlBulk" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" >
	INSERT INTO EXP_RCL_DTL (

   RCL_NO,DOC_LINE_NO,PPK_TYPE,PRE_RCL_NO,CONTENT,PCS,NET_WT,TR_TYPE,TR_STATUS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,LOC_CODE,LSP_NO,
   GROSS_WT,TARE_WT,FSCALE_WT)    
   VALUES (#rclNo#,EXP_RCLDLINE_SEQ.NEXTVAL,'B',#preRclNo#,#content#,#pieces#,#weight#,'MR','N',#createdUserId#,SYSDATE,#lastModifiedBy#,SYSDATE,#dummyLocn#,#dummyLSP#,
   #weight#,0,#weight# )
	</insert>
	<insert id="exp_updInsertRCLDtlMix" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" >
	INSERT INTO EXP_RCL_DTL (
   RCL_NO,DOC_LINE_NO,PPK_TYPE,PRE_RCL_NO,PCS,NET_WT,GROSS_WT,TARE_WT,FSCALE_WT,CONTR_CODE,TR_TYPE,TR_STATUS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,LOC_CODE,
   ULD_CARR,ULD_KEY,ULD_NO,ULD_TYPE)    
   VALUES (#rclNo#,EXP_RCLDLINE_SEQ.NEXTVAL,'M',#preRclNo#,#totalPieces#,#grossWeight#-#tareWeight#, #grossWeight#,#tareWeight#,0,
   #contourCode#,'MR','C',#createdUserId#,SYSDATE,#lastModifiedBy#,SYSDATE,#dummyLocn#,#uldCarrier#,#uldNo#,#uldSeqNo#,#uldType# )
	</insert>
	<select id="upDateFetchTareWt" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.String" >
	select TARE_WEIGHT from ULD_TYPE_CARR_TARE_WT where ULD_CARR=#uldCarrier# and ULD_TYPE=#uldType# and #uldSeqNo# between ULD_NO_FROM and ULD_NO_TO and rownum=1
	</select>
	<update id="update_wtDiffRCLBrkdwn" parameterClass="cargo.cms.export.bo.ERCLMixedPrepackDetailBO">
	update EXP_RCL_BRKDN 
	set WEIGHT=#netWeight#
	and LM_USER_ID=#lastModifiedBy#  and LM_DATE=sysdate where AWB_NO=#awbNo# and   RCL_NO=#rclNo#
	</update>
	<update id="update_wtDiffeRCLHd" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO"  >
	 update EXP_PRE_RCL_HD
	 set  TTL_WT=#weight# ,status=#status#,  LM_USER_ID=#lastModifiedBy#  , LM_DATE=sysdate where PRE_RCL_NO=#preRclNo#	 
	</update>
	<update id="updPreRclUldManfMix" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO"  >
		update EXP_PRE_RCL_ULD_MANF
	 set  ULD_KEY=#uldNo# ,  LM_USER_ID=#lastModifiedBy#  , LM_DATE=sysdate where PRE_RCL_NO=#preRclNo#	 and ULD_KEY=#oldUldNo#
	</update>
	<update id="updPreRclUldManfPpk" parameterClass="cargo.cms.export.bo.ERCLPrepackDetailBO"  >
		update EXP_PRE_RCL_ULD_MANF
	 set  ULD_KEY=#ULDNo# ,  LM_USER_ID=#lastModifiedBy#  , LM_DATE=sysdate where PRE_RCL_NO=#preRCLNO#	 and ULD_KEY=#altUld#
	</update>
	<delete id="deleteAwbMixeRCL" parameterClass="cargo.cms.export.bo.ERCLMixedPrepackDetailBO"  >
		delete from EXP_PRE_RCL_ULD_MANF
	 where  ULD_KEY=#uldNo# and  PRE_RCL_NO=#preRCLNO#  and AWB_NO=#oldAwbNo# 
	</delete>
	<select id="chkUldConsgList" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.Integer" >
	select count(1) from exp_rcl_uld_manf
	where to_char(LM_DATE ,'DDMONYYHH24MI') >to_char(CR_DATE ,'DDMONYYHH24MI') and 
	rcl_no=#rclNo# and ULD_KEY=#uldNo# and AWB_NO=#houseAwbNo# and HAWB_NO=#hawbNo#
	</select>
	<update id="updatePrepackHdDelete" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	 update EXP_PRE_RCL_HD set TTL_PCS=#totalPieces# , TTL_WT=#totalWeight#,LM_USER_ID=#lastModifiedBy#  , LM_DATE=sysdate where PRE_RCL_NO=#preRclNo#
	</update>
	<select id="updateMixChkUld" parameterClass="java.lang.String" resultClass="java.lang.String">
	select uld_key from ULD_INVENTORY where uld_key=#param#
	</select>
	<update id="updateServiceErrLog" parameterClass="java.util.HashMap"  >
		update service_err_log set uld_key=#uld_key#,lm_user_id = #lmUserId# ,lm_date = sysdate , TR_DATE = sysdate
	where tr_no = #tr_no# and DOC_LINE_NO = #docLineNo#
	</update>
	
	<select id="geteRCLTypeforELIELM" parameterClass="java.lang.String" resultClass="java.lang.String" >
	SELECT HD.PPK_TYPE FROM EXP_PRE_RCL_HD HD WHERE HD.PRE_RCL_NO=#PARAM#
	</select>
<select id="getPIDetailsForELIELM" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT piCode,pidescription FROM (
	SELECT CODE as piCode,CODE_DESC as pidescription FROM MAST_CODE_DTL WHERE CODE_TYPE IN ('ELI_PI_CONFIG') ORDER BY SNO ASC)
	UNION ALL
	SELECT piCode,pidescription FROM(
	SELECT CODE as piCode,CODE_DESC as pidescription FROM MAST_CODE_DTL WHERE CODE_TYPE IN ('ELM_PI_CONFIG') ORDER BY SNO ASC)
	</select>
<select id="getELIELMBulkDetailsForeRCL" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT HD.AWB_NO AS awbNo,TO_CHAR(HD.AWB_DATE,'DDMONYY') AS awbDate,HD.TTL_PCS AS totalPieces,HD.TTL_WT AS totalWeight,HD.PRE_RCL_NO AS preRclNo
	FROM EXP_PRE_RCL_HD HD 
	WHERE HD.PRE_RCL_NO=#PARAM# AND HD.PPK_TYPE='B'
	</select>
<select id="getBookingFlightDetailforELIELM" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT NVL(PI_BK_FLT_KEY,BK_FLT_KEY) AS bookFlight,TO_CHAR(NVL(PI_BK_FLT_DATE,BK_FLT_DATE),'DDMONYY') AS bookFlightDate,status as status FROM EXP_PRE_RCL_HD HD WHERE HD.PRE_RCL_NO=#PARAM#
	</select>
<select id="getELIELMoldSHCForeBulkRCL" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT SPL_CODE1 AS splCode1,SPL_CODE2 AS splCode2,SPL_CODE3 AS splCode3 FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRclNo#
	</select>
<select id="getELIELMoldSHCForeMixRCL" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT SPL_CODE1 AS splCode1,SPL_CODE2 AS splCode2,SPL_CODE3 AS splCode3,SPL_CODE4 AS splCode4,SPL_CODE5 AS splCode5,SPL_CODE6 AS splCode6,SPL_CODE7 AS splCode7,SPL_CODE8 AS splCode8,SPL_CODE9 AS splCode9 FROM EXP_PRE_RCL_BRKDN WHERE PRE_RCL_NO=#preRclNo# AND AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</select>
<select id="getELIELMPrioritySHCForBulkeRCL" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT CODE AS   splCode1 FROM(
	SELECT distinct  CODE FROM MAST_SPL_HAND_CODE WHERE CODE IN (#splCode1#,#splCode2#,#splCode3#,#splCode4#,#splCode5#) ORDER BY PRIORITY DESC)
	<![CDATA[
	WHERE ROWNUM <= 3
	]]>
	</select>
	<select id="getELIELMPrioritySHCForMixeRCL" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT CODE AS splCode1 FROM(
	SELECT distinct  CODE FROM MAST_SPL_HAND_CODE WHERE
	CODE IN (#splCode1#,#splCode2#,#splCode3#,#splCode4#,#splCode5#,#splCode6#,#splCode7#,#splCode8#,#splCode9#,#splCode10#,#splCode11#) ORDER BY PRIORITY DESC)
	<![CDATA[ 
	WHERE ROWNUM <= 9
	]]>
	</select>
<select id="getELIshcbasedonopinum" parameterClass="java.lang.String" resultClass="java.lang.String">
	SELECT 'ELI' FROM MAST_CODE_DTL WHERE CODE_TYPE = 'ELI_PI_CONFIG' AND GROUP_CODE='38' AND CODE=#PARAM# AND ROWNUM=1
	</select>
	<select id="getELMshcbasedonopinum" parameterClass="java.lang.String" resultClass="java.lang.String">
	SELECT 'ELM' FROM MAST_CODE_DTL WHERE CODE_TYPE = 'ELM_PI_CONFIG' AND GROUP_CODE='38' AND CODE=#PARAM# AND ROWNUM=1
	</select>
	<select id="checkBookFlightValidation" parameterClass="java.lang.String" resultClass="java.lang.String">
	SELECT NVL(BOOK_IND_ERCL,'N') FROM MAST_SPL_HAND_CODE WHERE CODE=#PARAM#
	</select>
	<select id="checkpiwtwithtotalwt" parameterClass="map" resultClass="java.lang.Integer">
	<![CDATA[
	SELECT COUNT(1) FROM (        
    SELECT TO_NUMBER(trim(to_char(nvl(SUM(PI_WT), 0), '99999999990.0'))) as totalPiWt,
    TO_NUMBER(trim(to_char(nvl(#totalWt#, 0), '99999999990.0'))) AS totalWeight FROM EXP_PRE_RCL_PI_DTL WHERE PRE_RCL_NO=#preRclNo#)
 WHERE totalPiWt > totalWeight
	]]>
	</select>
<select id="getELIELMoldPIDetailsForeRCL" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT TR_NO as uldSeqNo,PIDTL.PI_NUM AS piCode,(SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE IN ('ELI_PI_CONFIG','ELM_PI_CONFIG') AND CODE=PIDTL.PI_NUM AND ROWNUM=1) AS pidescription,
  	PIDTL.PI_PCS AS piPcs,PIDTL.PI_WT AS piWt,PIDTL.PI_PCS AS oldpiPcs,PIDTL.PI_WT AS oldpiWt FROM EXP_PRE_RCL_PI_DTL PIDTL
  	WHERE 
  	PIDTL.PRE_RCL_NO=#preRclNo#
  	<isNotEmpty property="rclType">
  	<isEqual property="rclType" compareValue="B">
  	<isNotEmpty property="awbNo" >
  	AND PIDTL.AWB_NO = #awbNo#
  	</isNotEmpty>
  	<isNotEmpty property="awbDate" >
  	AND PIDTL.AWB_DATE=#awbDate#
  	</isNotEmpty>
  	</isEqual>  	
  	<isEqual property="rclType" compareValue="M">
  	<isNotEmpty property="awbNo" >
  	AND PIDTL.AWB_NO = #awbNo#
  	</isNotEmpty>
  	<isNotEmpty property="awbDate" >
  	AND PIDTL.AWB_DATE=#awbDate#
  	</isNotEmpty>
  	</isEqual>
  	<isEqual property="rclType" compareValue="P">
  	<isNotEmpty property="uldNo" >
  	AND PIDTL.ULD_KEY=#uldNo#
  	</isNotEmpty>
  	</isEqual>
  	</isNotEmpty>  	
	</select>
	<select id="getRCLstatusforElielm" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EXP_RCL_HD WHERE PRE_RCL_NO=#PARAM#
	</select>
	<select id="getELIELMoldeRCLStatusForPI" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.String">
	SELECT STATUS FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRclNo#
	</select>
	<select id="getELIELMoldPIDetailsForPIeRCL" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="java.lang.String">
	SELECT TR_NO as uldSeqNo FROM EXP_PRE_RCL_PI_DTL PIDTL
  	WHERE 
  	PIDTL.PRE_RCL_NO=#preRclNo#
  	<isNotEmpty property="rclType">
  	<isEqual property="rclType" compareValue="B">
  	<isNotEmpty property="awbNo" >
  	AND PIDTL.AWB_NO = #awbNo#
  	</isNotEmpty>
  	<isNotEmpty property="awbDate" >
  	AND PIDTL.AWB_DATE=#awbDate#
  	</isNotEmpty>
  	</isEqual>  	
  	<isEqual property="rclType" compareValue="M">
  	<isNotEmpty property="awbNo" >
  	AND PIDTL.AWB_NO = #awbNo#
  	</isNotEmpty>
  	<isNotEmpty property="awbDate" >
  	AND PIDTL.AWB_DATE=#awbDate#
  	</isNotEmpty>
  	<isNotEmpty property="uldNo" >
  	AND PIDTL.ULD_KEY=#uldNo#
  	</isNotEmpty>
  	</isEqual>
  	<isEqual property="rclType" compareValue="P">
  	<isNotEmpty property="awbNo" >
  	AND PIDTL.AWB_NO = #awbNo#
  	</isNotEmpty>
  	<isNotEmpty property="awbDate" >
  	AND PIDTL.AWB_DATE=#awbDate#
  	</isNotEmpty>
  	<isNotEmpty property="uldNo" >
  	AND PIDTL.ULD_KEY=#uldNo#
  	</isNotEmpty>
  	</isEqual>
  	</isNotEmpty>
  	<isNotEmpty property="piCode" >
  	AND PIDTL.PI_NUM=#piCode#
  	</isNotEmpty>
	</select>
<update id="updateelielmConfirmedERCLStatus" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		UPDATE EXP_PRE_RCL_HD SET STATUS='CONFIRMED',lm_user_id=#userID#,LM_DATE=SYSDATE WHERE PRE_RCL_NO=#preRclNo#
	</update>
<update id="updateeRCLSSHCSEliELM" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	 update EXP_PRE_RCL_HD set SPL_CODE1=#splCode1# , SPL_CODE2=#splCode2#,SPL_CODE3=#splCode3#  where PRE_RCL_NO=#preRclNo#
	</update>
	<update id="updateLoadingFormstatustoy" parameterClass="java.util.HashMap">
	 UPDATE EXP_PRE_RCL_HD SET UPD_BATTERY_LDG_FORM='Y',LM_USER_ID = #userID#,LM_DATE=SYSDATE,TR_TYPE_EVT='ERBLK' WHERE PRE_RCL_NO=#preRclNo#
	</update>
	<update id="updateLoadingFormstatuston" parameterClass="java.util.HashMap">
	 UPDATE EXP_PRE_RCL_HD SET UPD_BATTERY_LDG_FORM='N',LM_USER_ID = #userID#,LM_DATE=SYSDATE,TR_TYPE_EVT='ERBLK' WHERE PRE_RCL_NO=#preRclNo#
	</update>
	<update id="updateeRCLSBookingDtlsEliELM" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	 UPDATE EXP_PRE_RCL_HD SET PI_BK_FLT_KEY=#bookFlight#,PI_BK_FLT_DATE=#bookFlightDate# WHERE PRE_RCL_NO=#preRclNo#
	</update>
	<update id="updateeRCLSMIXSHCSEliELM" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	 UPDATE EXP_PRE_RCL_BRKDN SET SPL_CODE1=#splCode1#,SPL_CODE2=#splCode2#,SPL_CODE3=#splCode3#,
	 SPL_CODE4=#splCode4#,SPL_CODE5=#splCode5#,SPL_CODE6=#splCode6#,SPL_CODE7=#splCode7#,
	 SPL_CODE8=#splCode8#,SPL_CODE9=#splCode9# WHERE PRE_RCL_NO=#preRclNo# AND AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</update>
	<select id="getELIELMPrepackDetailsForeRCL" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT HD.AWB_NO AS awbNo,TO_CHAR(HD.AWB_DATE,'DDMONYY') AS awbDate,DTL.ULD_KEY AS uldNo,HD.TTL_PCS AS totalPieces,HD.TTL_WT AS totalWeight,HD.PRE_RCL_NO AS preRclNo
	FROM EXP_PRE_RCL_HD HD,EXP_PRE_RCL_DTL DTL WHERE 
	DTL.PRE_RCL_NO = HD.PRE_RCL_NO AND HD.PRE_RCL_NO=#PARAM# AND HD.PPK_TYPE='P'
	</select>
<select id="getELIELMMixDetailsForeRCL" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	SELECT HD.ULD_KEY AS uldNo,BRKDN.AWB_NO AS awbNo,TO_CHAR(BRKDN.AWB_DATE,'DDMONYY') AS awbDate,HD.TTL_PCS AS totalPieces,HD.TTL_WT AS totalWeight,HD.PRE_RCL_NO AS preRclNo
	FROM EXP_PRE_RCL_HD HD,EXP_PRE_RCL_BRKDN BRKDN WHERE 
	BRKDN.PRE_RCL_NO = HD.PRE_RCL_NO AND HD.PRE_RCL_NO=#PARAM# AND HD.PPK_TYPE='M'
	</select>
<insert id="insertelielmforERCL"  parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	INSERT INTO EXP_PRE_RCL_PI_DTL(TR_NO,PRE_RCL_NO,AWB_NO,AWB_DATE,ULD_KEY,PI_NUM,PI_PCS,PI_WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,PPK_TYPE,TR_TYPE) 
	VALUES (EXP_PRE_RCL_PI_DTL_SEQ.NEXTVAL,#preRclNo#,#awbNo#,#awbDate#,#uldNo#,#piCode#,#piPcs#,#piWt#,#userID#,SYSDATE,#userID#,SYSDATE,#rclType#,'EPID')
   	</insert>
<update id="updateelielmforERCL" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		UPDATE EXP_PRE_RCL_PI_DTL SET PI_PCS=#piPcs#,PI_WT=#piWt#,LM_USER_ID=#userID#,LM_DATE=SYSDATE,TR_TYPE='EPID' WHERE TR_NO=#uldSeqNo#
	</update>
	<update id="updateelielmERCLStatus" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		UPDATE EXP_PRE_RCL_HD SET STATUS='SUBMITTED',lm_user_id=#userID#,LM_DATE=SYSDATE WHERE PRE_RCL_NO=#preRclNo#
	</update>

<update id="befUpdateelielmforERCL" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		UPDATE EXP_PRE_RCL_PI_DTL SET PI_NUM='',PI_PCS='',PI_WT='',LM_USER_ID=#userID#,LM_DATE=SYSDATE,TR_TYPE='EPID' WHERE TR_NO=#uldSeqNo#
	</update>
	<delete id="deleteelielmforERCL" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		DELETE FROM EXP_PRE_RCL_PI_DTL WHERE TR_NO=#uldSeqNo#
	</delete>

	<update id="updateAwbInventoryeRCL" parameterClass="java.util.HashMap">
		UPDATE AWB_INVENTORY SET LOCN_WT=#locnWt# WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND PPK_IND=#rclType# AND ULD_KEY=#uldNo#
	</update>
	
	<update id="updateAwbeRCLWt" parameterClass="java.util.HashMap">
		 UPDATE AWB SET
		 	 RCL_WT = RCL_WT - nvl(#oldRclWt#,0) + nvl(#newErclWt#,0),
             RCL_MIX_WT = RCL_MIX_WT - nvl(#oldRclWt#,0) + nvl(#newErclWt#,0)    
         WHERE  AWB_NO = #awbNo#
         AND    AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY') 
	</update>
	
	<update id="updateExpUldAwbWteRcl" parameterClass="java.util.HashMap">
		UPDATE EXP_ULD_AWB SET WT=#locnWt# WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND RCL_NO=#rclNo# AND PPK_TYPE='M'
	</update>
	<!-- Update eRcl end -->



	<select id="get_security_header"  parameterClass="map"  resultClass="cargo.cms.export.bo.SecurityBO" >
		SELECT RCL_NO AS rclNo, 
		   AWB_NO AS awbNo, CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,
		   CARR_CODE AS carrCode,
		   RCL_PCS AS totalPc,
		   RCL_WT AS totalWt,
		   SEC_AGENT_NAME as agentName,
		   SEC_RA_NO AS raNo,
		   SEC_KC_NO AS kcNo, 
		   SEC_RMK AS remark,
		   WAVR_IND AS waveChrg
	   FROM EXP_RCL_HD WHERE RCL_NO=#RCLNO# 
	</select>
	<select id="get_security_list"  parameterClass="map"  resultClass="cargo.cms.export.bo.SecurityListBO" >
		SELECT
			(SELECT B.ITM_DESC FROM BILL_ITM_MASTER B
				WHERE B.ITM_CODE=A.SC_ITM_CODE
				and decode(B.ITM_CODE_SFX, '', 'a', B.ITM_CODE_SFX) = decode(A.SC_ITM_SFX, '', 'a', A.SC_ITM_SFX)) 
		   AS ItemDesc,
		   A.SC_PCS AS pcs,
		   A.SC_WT AS wt, 
		   A.SC_PAID_BY AS chargeTo,
		   TO_CHAR(A.SC_START_DATE,'DDMONYY HH24:MI') AS startDate,
		   TO_CHAR( A.SC_END_DATE,'DDMONYY HH24:MI') AS holdingDate, 
		   A.SC_RESULT AS secResult 
		FROM 
			EXP_RCL_SEC_CHK_DTL A 
		WHERE 
			RCL_NO=#RCLNO# 
	</select>
	
	<select id="getTruckDoc"  parameterClass="java.lang.String" resultClass="java.lang.String">
  		select trip.truck_dock from truck_trip trip where trip.truck_no=#str# and trip.closed='N' 
 	</select> 	
 	<select id="print_outbound_obc_getdetails_Acceptence"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.PrintOutboundOBCItemBO">
		SELECT
			DISTINCT RCL_NO as rclNoDisplay,
			RCL_NO as rclNo,
			AGENT_NAME as agentName,
			IATA_CODE as iataCode,
			CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,
			AWB_NO as awbNo,
			ULD_KEY as uldBtNo,
			VOID_IND as voidInd,
			AGENT_CODE AS agentCode,
			FLT_KEY as fltKey,
			TO_CHAR(FLT_DATE,'DDMONYY') as fltDate,
			RCL_PCS as rclPc,
			RCL_WT as rclWt,
			SEC_CHK_IND as SCInd,
			RTN_IND as cargoRetInd,
			DEST as dest,
			TRUCK_NO as truckNo,
			TO_CHAR(RCL_DATE,'DDMONYY') as rclDate,
			CAR_IND as carInd,
			AGENT_CODE as agentCode,
			ETD as etd,
			RECEIVED_DATE as receivedDate,
			TRUCK_DOC as truckDoc,
			BU_COMPLETE as buComplete,
			TO_CHAR(ACCP_DATE_TIME,'DDMONYY HH24:MI') as accpDateTime
		FROM
			V_RCL_OBC
		WHERE			
			ACCP_DATE_TIME BETWEEN TO_DATE(#accpDateTimeFrom#,'DDMONYY HH24:MI') AND TO_DATE(#accpDateTimeto#,'DDMONYY HH24:MI')
			<isNotEmpty property="checkBox" >
					<isEqual property="checkBox" compareValue="Y">			
						AND BU_COMPLETE = 'N'
					</isEqual>			
			</isNotEmpty> 
			<isNotEmpty property="loginCarrier">    
            and  (CARR_CODE = #loginCarrier#
                        OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE     = #loginCarrier#))    
            </isNotEmpty>
	</select>
	
	<select id="check_the_flight" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) from flt_opr WHERE flt_key = #flightNo# 
	</select>
	

	<select id="freezedocumentsearchuld"  parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.ExportULDBO">
		select * from (SELECT H.AWB_NO awbNo,H.ULD_KEY uldNo,D.CONTR_CODE contrCode,H.RCL_NO rclNo,TO_CHAR(H.RCL_DATE,'DDMONYY HH24:MI')  rclIssueDate ,H.AWB_CONTENT cont,TO_CHAR(D.NET_WT,'9999999.99') netWeight,TO_CHAR(GROSS_WT-TARE_WT,'9999999.99')balWeight, H.AWB_DEST destination 
		FROM EXP_RCL_HD H, EXP_RCL_DTL D WHERE H.RCL_NO=D.RCL_NO 
		and ((H.PPK_TYPE ='M' and  H.ULD_KEY =UPPER(#uldNo#)) or (H.PPK_TYPE ='P' and  UPPER(D.ULD_KEY) =UPPER(#uldNo#) ) )
		and status != 'V' and NVL(h.rtn_ind,'N') = 'N' order by rcl_date desc) where rownum =1
	</select>

	<select id="freezedocumentsearchuldholder"  parameterClass="cargo.cms.export.bo.FreezeDocumentSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
		SELECT	B.ULD_KEY uldKey , CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) awbNo1,
		A.AWB_NO awbNo,TO_CHAR(A.AWB_DATE,'DDMONYY') awbDate,TO_CHAR(A.RECD_DATE,'DDMONYY HH24:MI') docRecvdDate, TO_CHAR(A.AWB_FRZ_DATE,'DDMONYY HH24:MI') awbFrzDate , 	
		TO_CHAR(A.AWB_UNFRZ_DATE,'DDMONYY HH24:MI') awbUnFrzDate, 	A.AWB_FRZ_YN awbFrzFlg FROM EXP_DOC_RECD A,EXP_ULD_AWB B
		WHERE B.ULD_KEY=#uldNo# AND A.AWB_NO = B.AWB_NO AND to_char(A.AWB_DATE,'DDMONYY') = to_char(B.AWB_DATE,'DDMONYY') AND A.AWB_CLOSED_YN = 'N' 
		ORDER BY A.AWB_NO
	</select>
	<select id="freezedocumentsearchawbholder"  parameterClass="cargo.cms.export.bo.FreezeDocumentSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
		SELECT ULD_KEY uldKey , CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) awbNo1, AWB_NO awbNo,TO_CHAR(AWB_DATE,'DDMONYY') awbDate, TO_CHAR(RECD_DATE,'DDMONYY HH24:MI') docRecvdDate, TO_CHAR(AWB_FRZ_DATE,'DDMONYY HH24:MI') awbFrzDate , 	
		TO_CHAR(AWB_UNFRZ_DATE,'DDMONYY HH24:MI') awbUnFrzDate,AWB_FRZ_YN awbFrzFlg FROM EXP_DOC_RECD WHERE 
		AWB_CLOSED_YN = 'N' AND AWB_NO IN  (#awb1#,#awb2#,#awb3#,#awb4#,#awb5#,#awb6#,#awb7#,#awb8#,#awb9#,#awb10#) 
		ORDER BY AWB_NO,AWB_DATE
	</select>
	<update id="freezedocumentuldupdate"  parameterClass="cargo.cms.export.bo.AWBBO">
	<![CDATA[
			UPDATE EXP_DOC_RECD SET TR_TYPE = 'FUNFH',AWB_FRZ_YN = #awbFrzFlg#,LM_USER_ID = #lastModUserId#,LM_DATE = sysdate,AWB_UNFRZ_DATE=Decode(#awbFrzFlg#,'N',sysdate,AWB_UNFRZ_DATE),AWB_FRZ_DATE=Decode(#awbFrzFlg#,'Y',sysdate,AWB_FRZ_DATE) 
			WHERE AWB_NO= #awbNo#	]]>
   	</update>
<!-- Added by Manorama on 28th March for Super Urgent Cargo::: Starts -->
   	<select id="fetchULDDetails"  parameterClass="cargo.cms.export.bo.SuperUrgentCgoBO"  resultClass="cargo.cms.export.bo.SuperUrgentResultBO">
 				SELECT E.TR_NO trNo,E.ULD_KEY               AS oldUldNo,
				 E.ULD_KEY as newUldNo,
				 F.CARR_CODE as carrCode, 
				 F.FLT_NO as fltNO,
				  E.FLT_KEY                     AS fltKey ,
				  to_char(E.FLT_DATE,'DDMONYY') AS fltDate,
				  E.WT                          AS wt     ,
				  to_char(E.EST_TIME,'DDMONYY')  AS estDate,
				  to_char(E.EST_TIME,'HH24MI')  AS estTime,
				 	E.TRUCK                       AS truckNo,
				  E.AWB_NO                      AS awbNo,
				  E.DEDICATED_TD dedicatedTd,E.STATUS status,E.OFF_POINT as unLadingPt,E.RCL_NO as rclNo,to_char(E.LM_DATE,'DDMONYY HH24:MI SSSSS') as lmDate
				   FROM EXP_SUPER_URGENT E left join FLT_OPR F on F.flt_key = E.flt_key and F.sch_date = E.flt_date and 
				   F.flt_type = 'D'
					where ULD_KEY = #uldNo#
					 and E.STATUS not in ('VOID','EXPIRED')
					 
	</select>
	<insert id="insertULD"  parameterClass="cargo.cms.export.bo.SuperUrgentResultBO">
	insert into EXP_SUPER_URGENT( TR_TYPE ,TR_NO,ULD_KEY,FLT_KEY,FLT_DATE,AWB_NO,EST_TIME,WT,DEDICATED_TD,STATUS,OFF_POINT,TRUCK,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
    values ('SURGC',EXP_SUPR_URGT_SEQ.nextval,#newUldNo#,#fltKey#,to_date(#fltDate#,'DDMONYY'),#awbNo#,to_date(#estTime#,'DDMONYY HH24MI'),#wt#,#dedicatedTd#,'OPEN',#unLadingPt#,#truckNo#,#logUserId#,sysdate,#logUserId#,sysdate)
   	</insert>
   	
 <select id="get_ininventory_count" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from ULD_INVENTORY where ULD_KEY = #uldNo# and (OWNED_INV='Y' or loc_code is not null)
</select>
<update id = "updateULDVoid" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO">
update EXP_SUPER_URGENT set TR_TYPE = 'SURGC',void_date = sysdate, void_user_id = #logUserId#, status = 'VOID' where uld_key = #oldUldNo#
and status != 'EXPIRED' and LM_DATE = to_date(#lmDate#,'DDMONYY HH24:MI SSSSS')
</update>
<select id = "uldGrpType" parameterClass="java.lang.String" resultClass="java.lang.Integer">
select count(1) from uld_group_type where uld_type = #uldGrpType#
</select>
<select id = "voidUldCheck" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO" resultClass="java.lang.Integer">
select count(1) from EXP_RCL_HD H left join EXP_RCL_DTL D
on H.RCL_NO = D.RCL_NO
where upper(status) = 'S'
and D.uld_key = #newUldNo#
</select>
<update id = "updateNewULDVoid" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO">
update EXP_SUPER_URGENT set TR_TYPE = 'SURGC', void_date = sysdate, void_user_id = #logUserId#, status = 'VOID' where uld_key = #newUldNo# and status != 'EXPIRED' and LM_DATE = to_date(#lmDate#,'DDMONYY HH24:MI SSSSS')
</update>

<update id = "updateExistingUld" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO">
update EXP_SUPER_URGENT set TR_TYPE = 'SURGC', ULD_KEY = #newUldNo#,FLT_KEY = #fltKey#,FLT_DATE = to_date(#fltDate#,'DDMONYY'),AWB_NO = #awbNo#,EST_TIME = to_date(#estTime#,'DDMONYY HH24MI'),WT = #wt#,
DEDICATED_TD = #dedicatedTd#,STATUS = 'OPEN',TRUCK = #truckNo#,OFF_POINT = #unLadingPt# where tr_no = #trNo# and LM_DATE = to_date(#lmDate#,'DDMONYY HH24:MI SSSSS')
</update>
<select id="validTruckNo"  parameterClass="java.lang.String" resultClass="java.lang.Integer">
select count(0) from truck_trip where truck_no = #truckNo#
</select>
<!-- Added by Manorama on 28th March for Super Urgent Cargo::: Ends -->

   	<!-- Issue RCL :: Anup :: Begins -->
   	<!--  Changed for QR -->
   	<select id="fetchIssueRCLBulkForMultipleAcceptance" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLDetailBO">
   		<![CDATA[
   			select ORIG as tempOrig , DEST AS awbDest,CONTENT AS awbCont,'' as rclNum,CARR_CODE AS carrCode  from AWB WHERE AWB_NO = #awbNum# 
				and AWB_DATE= TO_DATE(#awbDate#,'DDMONYY') AND ( RCL_PCS > 0  OR CAR_YN = 'Y')
		]]>
   	</select>
	<select id="sqlWtScaleList"  parameterClass="java.lang.String"  resultClass="cargo.cms.afw.bo.MasterBO">
		SELECT CODE as codeId, CODE_DESC as codeDesc FROM MAST_WGT_IP_DTL ORDER BY CODE
	</select>
	<select id="sqlisawblocked"  parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT PKG_EXP_VAL.awb_locked(#PARAM#) FROM DUAL
	</select>
	<select id="awbprefix" parameterClass="cargo.cms.export.bo.RCLSearchBO"  resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM MAST_AWB_PREFIX WHERE CODE=#awbNum1#
   	</select>
   	<!--  Changed for QR -->
	<select id="qheader"  parameterClass="cargo.cms.export.bo.RCLSearchBO"  resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT A.PRE_RCL_NO as preRCLNum, A.ULD_KEY as uldNum, A.PPK_TYPE as pkgType, A.CARR_CODE as carrCode, A.TRUCK_NO as truckNum, A.QCP_IND as qcpInd, 
			A.AWB_NO as awbNum, A.AWB_DEST as destination, A.AWB_CONTENT as awbContent, A.RCL_PCS, A.RCL_NO as rclNum, TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate, 
			TO_CHAR(sum(A.RCL_WT)  OVER (PARTITION BY A.AWB_NO ORDER BY A.AWB_NO),999999999.99) AS rclWT, SUM(A.RCL_PCS) OVER (PARTITION BY A.AWB_NO ORDER BY A.AWB_NO) AS rclPcs, 
			B.FLT_NO as flightNum, B.ORG_FLT_DATE as flightDate, B.SCH_DATE as schDate, 
			NVL(PKG_COMMON.get_flt_eta(B.FLT_KEY, B.SCH_DATE, 'D', 'DD'),PKG_COMMON.get_flt_sta(B.FLT_KEY, B.SCH_DATE, 'D', 'DD')) AS schTimeDep,
			B.DEST as unladingPt, B.FLT_KEY as flightKey, C.CODE_DESC as agentName, C.CO_IATA_CODE as iataCode, C.CODE as custNum, A.DLV_BY as dlvBy, 
			A.DLV_BY_HKID as HKID, A.REJECT_IND as reject,A.RCL_REJECT_REASON as rejectReasonRmk, A.PRT_CODE as printerCode, A.SEC_CHECK as secCheck, A.ASIDE_ACCEPT as airsideAccept, A.HCARRY_IND as handCarry, 
			A.THICK_IND as thickInd, A.DUT_COMMODITY as dutCommodity, A.SPL_CODE1 as splCode1, A.SPL_CODE2 as splCode2, A.SPL_CODE3 as splCode3, A.SPL_CODE4 as splCode4, 
			A.SPL_CODE5 as splCode5, A.SPL_CODE6 as splCode6, A.SPL_CODE7 as splCode7, A.SPL_CODE8 as splCode8, A.SPL_CODE9 as splCode9, A.RMK as remarks, A.VCL_NO as vclNum, 
			A.DLV_BY as dlvBy, A.DLV_BY_HKID as HKID 
		FROM 
			EXP_RCL_HD A, FLT_OPR B , CUST_COMPANY C 
		WHERE 
			A.AWB_NO=#awbNum# AND A.AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') AND A.STATUS NOT IN ('V', 'S', 'R') AND A.PPK_TYPE = 'B' AND A.FLT_KEY=B.FLT_KEY(+) 
			AND A.FLT_DATE=B.SCH_DATE(+) AND C.CODE(+)=A.CUST_NO  
			<isNotEmpty prepend="AND" property="preRclNum">
  				A.PRE_RCL_NO=#preRclNum#
  			</isNotEmpty>
		ORDER BY 
			A.CR_DATE ASC
   	</select>
   	<!--  Changed for QR -->
   	<select id="fetchAwbDestByAwb" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="java.lang.String">
   		SELECT * FROM (SELECT AWB_DEST as destination FROM EXP_RCL_HD WHERE AWB_NO=#awbNum# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') 
   			AND STATUS NOT IN ('V', 'R') ORDER BY CR_DATE ASC) WHERE ROWNUM=1
   	</select>
   	<!--  Changed for QR -->
   	<select id="qHeaderPpkHht"  parameterClass="cargo.cms.export.bo.RCLSearchBO"  resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT A.PRE_RCL_NO as preRCLNum, A.ULD_KEY as uldNum, A.PPK_TYPE as pkgType, A.CARR_CODE as carrCode, A.TRUCK_NO as truckNum, A.QCP_IND as qcpInd, 
			A.AWB_NO as awbNum, TO_CHAR(A.AWB_DATE, 'DDMONYY') as awbDate, A.AWB_DEST as destination, A.AWB_CONTENT as awbContent, A.RCL_PCS, A.RCL_NO as rclNum, 
			TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate, TO_CHAR(sum(A.RCL_WT)  OVER (PARTITION BY A.AWB_NO ORDER BY A.AWB_NO),999999999.99) AS rclWT, 
			SUM(A.RCL_PCS) OVER (PARTITION BY A.AWB_NO ORDER BY A.AWB_NO) AS rclPcs, B.FLT_NO as flightNum, B.ORG_FLT_DATE as flightDate, B.SCH_DATE as schDate, 
			NVL(PKG_COMMON.get_flt_eta(B.FLT_KEY, B.SCH_DATE, 'D', 'DD'),PKG_COMMON.get_flt_sta(B.FLT_KEY, B.SCH_DATE, 'D', 'DD')) AS schTimeDep, B.DEST as unladingPt, B.FLT_KEY as flightKey, 
			C.CODE_DESC as agentName, C.CO_IATA_CODE as iataCode, C.CODE as custNum, A.DLV_BY as dlvBy, A.DLV_BY_HKID as HKID, A.REJECT_IND as reject, A.RCL_REJECT_REASON as rejectReasonRmk,
			A.PRT_CODE as printerCode, A.SEC_CHECK as secCheck, A.ASIDE_ACCEPT as airsideAccept, A.HCARRY_IND as handCarry, A.THICK_IND as thickInd, 
			A.DUT_COMMODITY as dutCommodity, A.SPL_CODE1 as splCode1, A.SPL_CODE2 as splCode2, A.SPL_CODE3 as splCode3, A.SPL_CODE4 as splCode4, 
			A.SPL_CODE5 as splCode5, A.SPL_CODE6 as splCode6, A.SPL_CODE7 as splCode7, A.SPL_CODE8 as splCode8, A.SPL_CODE9 as splCode9, A.RMK as remarks, A.VCL_NO as vclNum, 
			A.DLV_BY as dlvBy, A.DLV_BY_HKID as HKID 
		FROM 
			EXP_RCL_HD A, FLT_OPR B , CUST_COMPANY C 
		WHERE 
			A.AWB_NO=#awbNum# AND A.AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') AND A.STATUS NOT IN ('V', 'R') AND A.FLT_KEY=B.FLT_KEY(+) 
			AND A.FLT_DATE=B.SCH_DATE(+) AND C.CODE(+)=A.CUST_NO AND A.PRE_RCL_NO=#preRclNum# 
			<!-- <isNotEmpty prepend="AND" property="preRclNum">
  				A.PRE_RCL_NO=#preRclNum#
  			</isNotEmpty> -->
		ORDER BY 
			A.CR_DATE DESC
   	</select>
   	<!--  Changed for QR -->
   	<select id="qalternateheader"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT 
			AWB_NO as awbNum, CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNumDisplay, FLT_NO as flightNum, TO_CHAR(FLT_DATE,'DDMONYY') as flightDate, 
			UNLDG_PT as unladingPt, PCS as rclPcs, NET_WT as rclWT, TOTAL_PCS as rclPcs, 'N' as qcpInd, TO_CHAR(AWB_DATE, 'DDMONYY') as awbDate 
		FROM 
			(SELECT t2.AWB_NO, t1.FLT_NO, t1.FLT_DATE, t2.UNLDG_PT, t2.PCS, t2.NET_WT, t2.TOTAL_PCS, t2.AWB_DATE FROM EDI_FBL t1, 
			EDI_FBL_SHP t2 WHERE t1.TR_NO=t2.TR_NO ORDER BY FLT_DATE DESC) WHERE AWB_NO=#awbNum# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') AND ROWNUM=1
   	</select>
   	<!--  Changed for QR -->
   	<select id="getfblflightinfo" parameterClass="map" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">		
		SELECT 
			t2.CARR_CODE AS carrCode, t2.FLT_NO AS flightNum, t2.FLT_KEY AS flightKey, TO_CHAR(t1.FLT_DATE, 'DDMONYY') AS flightDate, 
			NVL(PKG_COMMON.get_flt_eta(t2.FLT_KEY, t1.flt_DATE, 'D', 'DD'),PKG_COMMON.get_flt_sta(t2.FLT_KEY, t1.flt_DATE, 'D', 'DD')) AS schTimeDep, T1.UNLDG_PT AS unladingPt, 
			TO_CHAR(SYSDATE, 'DDMONYY HH24MI') AS currentTime, TO_CHAR(NVL(EST_DATE, NVL((SELECT CTM_OUT_DATE FROM FLT_OPR_EVENTS WHERE TR_NO=T2.TR_NO), 
			SCH_DATE)), 'DDMONYY') || ' ' || LPAD(NVL(EST_TIME, NVL((SELECT CTM_OUT_TIME FROM FLT_OPR_EVENTS WHERE TR_NO=T2.TR_NO), SCH_TIME)) , 4, '0') as fbltime 
		FROM 
			(SELECT a.FLT_KEY, a.FLT_DATE, b.UNLDG_PT, ROWNUM rn FROM EDI_FBL a, EDI_FBL_SHP b WHERE a.TR_NO=b.TR_NO AND a.TR_NO=(SELECT MAX(TO_NUMBER(TR_NO)) 
			FROM EDI_FBL_SHP WHERE AWB_NO= #awbNo# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY')) AND B.AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') 
			AND A.FBL_STATUS='P') T1, FLT_OPR t2 WHERE t2.FLT_KEY=T1.FLT_KEY AND t2.SCH_DATE=t1.FLT_DATE AND t2.FLT_TYPE='D'
	</select>
	<select id="get_hour_diff"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="java.lang.String">
		 SELECT ROUND((TO_DATE(#fbltime#,'DDMONYY HH24MI') - TO_DATE(#currentTime#,'DDMONYY HH24MI'))*24,2) FROM DUAL
	</select>
	<!--  Changed for QR -->
	<select id="qissuercldetails"  parameterClass="cargo.cms.export.bo.RCLSearchBO"  resultClass="cargo.cms.export.bo.IssueRCLDetailBO">		
		SELECT * FROM 
			(SELECT preRCLNum, awbNum, awbNumDisplay, carrCode, awbDest, qcpInd, qcpContactPer, qcpContactNum, qcpFaxNum, qcpPieces, qcpWeight, qcpGoods, 
			qcpDelvDate, qcpDelvTime, agentName, iataCode, custNum, remarks FROM (
			SELECT A.PRE_RCL_NO as preRCLNum, A.AWB_NO as awbNum, 
			CONCAT(CONCAT(SUBSTR(A.AWB_NO, 0, 3), '-'), SUBSTR(A.AWB_NO, 4)) as awbNumDisplay, A.CARR_CODE as carrCode, A.AWB_DEST as awbDest, A.QCP_IND as qcpInd, 
			A.QCP_CONTACT_PERSON as qcpContactPer, A.QCP_CONTACT_NO as qcpContactNum, A.QCP_FAX_NO as qcpFaxNum, A.QCP_PCS as qcpPieces, TO_CHAR(A.QCP_WT, 999999999.99) 
			as qcpWeight, A.QCP_GOODS_DESC as qcpGoods, TO_CHAR(A.QCP_DELV_DATE, 'DDMONYY') as qcpDelvDate, A.QCP_DELV_TIME as qcpDelvTime, B.code_desc as agentName, 
			B.CO_IATA_CODE as iataCode, B.CODE as custNum, A.RMK as remarks 
		FROM 
			EXP_PRE_RCL_HD A, CUST_COMPANY B 
		WHERE 
			A.CUST_NO=B.CODE AND A.AWB_NO=#awbNum# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') AND A.PPK_TYPE=#packageType# AND A.STATUS='SUBMITTED'  
			<isNotEmpty prepend="AND" property="preRclNum">
  				A.PRE_RCL_NO=#preRclNum#
  			</isNotEmpty>
			ORDER BY A.CR_DATE DESC) WHERE ROWNUM=1
		UNION
		SELECT 
			preRCLNum, awbNum, awbNumDisplay, carrCode, awbDest, qcpInd, qcpContactPer, qcpContactNum, qcpFaxNum, qcpPieces, qcpWeight, qcpGoods, qcpDelvDate, 
			qcpDelvTime, agentName, iataCode, custNum, remarks FROM (SELECT A.PRE_RCL_NO as preRCLNum, #awbNum# as awbNum, 
			CONCAT(CONCAT(SUBSTR(#awbNum#, 0, 3), '-'), substr (#awbNum#, 4)) as awbNumDisplay, A.CARR_CODE as carrCode, A.AWB_DEST as awbDest, A.QCP_IND as qcpInd, 
			A.QCP_CONTACT_PERSON as qcpContactPer, A.QCP_CONTACT_NO as qcpContactNum, A.QCP_FAX_NO as qcpFaxNum, A.QCP_PCS as qcpPieces, TO_CHAR(A.QCP_WT, 999999999.99) 
			as qcpWeight, A.QCP_GOODS_DESC as qcpGoods, TO_CHAR(A.QCP_DELV_DATE, 'DDMONYY') as qcpDelvDate, A.QCP_DELV_TIME as qcpDelvTime, B.CODE_DESC as agentName, 
			B.CO_IATA_CODE as iataCode, B.CODE as custNum, A.RMK as remarks 
		FROM 
			EXP_PRE_RCL_HD A, CUST_COMPANY B, (SELECT PRE_RCL_NO, COUNT(1) TOTAL_AWB FROM EXP_PRE_RCL_BRKDN t1 WHERE EXISTS (SELECT NULL FROM EXP_PRE_RCL_BRKDN 
			WHERE PRE_RCL_NO=t1.PRE_RCL_NO AND AWB_NO=#awbNum# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY')) GROUP BY PRE_RCL_NO) C 
		WHERE 
			A.CUST_NO=B.CODE AND a.PRE_RCL_NO=c.PRE_RCL_NO AND #packageType#='P' AND A.PPK_TYPE='M' AND A.STATUS='SUBMITTED' AND c.TOTAL_AWB=1 
			ORDER BY a.CR_DATE DESC) WHERE ROWNUM=1) WHERE ROWNUM=1
   	</select>
   	
   	<select id="fetchSpeclHandCodeforERCL"  parameterClass="cargo.cms.export.bo.RCLSearchBO"  resultClass="cargo.cms.export.bo.IssueRCLDetailBO">
   	SELECT spl_code1 AS splCode1,spl_code2 AS splCode2,spl_code3 AS splCode3 FROM EXP_PRE_RCL_HD WHERE pre_rcl_no=#preRclNum#
   	</select>
   	<!--  Changed for QR -->
   	<select id="truck_number" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.afw.bo.MasterBO">
			SELECT TRUCK AS codeId, TRUCK AS codeDesc FROM EXP_BOOKING A, EXP_BOOKING_DTL B where B.BOOKING_NO=A.BOOKING_NO AND ERCL_NO=#preRclNum# AND ROWNUM=1
   	</select>
   	<!--  Changed for QR -->
	<select id="truck_number_mix" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.afw.bo.MasterBO">
		SELECT TRUCK AS codeId, TRUCK AS codeDesc FROM EXP_BOOKING A, EXP_BOOKING_DTL B where B.BOOKING_NO=A.BOOKING_NO AND ERCL_NO=#preRclNum# AND ROWNUM=1
   	</select>
   	<!--  Changed for QR -->
   	<select id="qissuercllocation" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLBulkLocBO">   	
   	SELECT 
			A.RCL_NO as rclNum, A.DOC_LINE_NO as docLineNum, TO_CHAR(A.GROSS_WT,999999999.9) as grossWt, A.PCS as locationPcs, TO_CHAR(A.NET_WT,999999999.9) as netWeight, 
			TO_CHAR(A.FSCALE_WT,999999999.9) as flrScaleWt, TO_CHAR(A.TARE_WT,999999999.9) as tareWt, A.LOC_CODE as locationCode, A.LSP_NO as lspNum, 
			A.BT_NO as btNum, A.ULD_KEY as uldNum, A.CONTR_CODE as contourCode, (A.NET_WT + A.TARE_WT) as grossWt , A.MAN_WT_YN as manWtYN,
      (select decode(count(1),0,'N','Y') from uld_inventory where owned_inv = 'Y' and uld_key = A.uld_key) as inULDInv,A.OHG ohg
		FROM 
			EXP_RCL_DTL A, EXP_RCL_HD B  WHERE A.RCL_NO=B.RCL_NO AND A.RCL_NO=#rclNum# 
			<isNotEmpty property="packageType">
				AND A.PPK_TYPE=#packageType# 
			</isNotEmpty>
   	</select>
   	<!--  Changed for QR -->
   	<select id="qbulkdimension" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLBulkDim">
		SELECT 
			A.RCL_NO as rclNum, A.DOC_LINE_NO as docLineNum, A.LENGTH as length, A.WIDTH as width, A.HEIGHT as height, A.PCS as pieces, A.REMARKS as remarks 
		FROM 
			EXP_RCL_DMN A, EXP_RCL_HD B WHERE A.RCL_NO=#rclNum# AND B.RCL_NO=A.RCL_NO 
	</select>
	<!--  Changed for QR -->
	<select id="sqlCountMRCLNO" parameterClass="java.lang.String" resultClass="java.lang.Integer">
    	SELECT COUNT(1) FROM EXP_RCL_HD WHERE RCL_NO=#PARAM# AND PRE_RCL_NO IS NOT NULL 
    </select>
    <select id="fetchEmailAndFax" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.CustContactBO" >
		SELECT 
			C.EMAIL1 AS email1, C.EMAIL2 AS email2, C.EMAIL3 AS email3, C.EMAIL4 AS email4, C.EMAIL5 AS email5, C.FAX1 AS fax1, C.FAX2 AS fax2, 
			C.FAX3 AS fax3, C.FAX4 AS fax4, C.FAX5 AS fax5, D.CODE_DESC AS agentName
		FROM 
			EXP_RCL_HD A, EXP_PRE_RCL_HD B , CUST_CONTACT C, CUST_COMPANY D 
		WHERE 
			A.PRE_RCL_NO=B.PRE_RCL_NO AND C.CONTACT_TYPE='MRC' AND B.CUST_NO=C.CUST_NO AND B.CUST_NO=D.CODE AND A.RCL_NO=#PARAM#
	</select>
	<select id="fetchRCLDetailsForEmail" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.CustContactBO" >
		SELECT 
			DECODE(A.AWB_NO,NULL,B.ULD_KEY,(SUBSTR(A.AWB_NO,1,3)||'-'||SUBSTR(A.AWB_NO,4))|| DECODE(B.ULD_KEY,NULL,' ','/'||B.ULD_KEY)) AS uldNo, 
			B.RCL_NO AS rclNo, DECODE(B.PCS,NULL,'',B.PCS || DECODE(B.NET_WT,NULL,' ','/'||TRIM(TO_CHAR(B.NET_WT,'99999999999999999.9')))) AS pcs, 
			TO_CHAR(A.RCL_DATE, 'DDMONYY HH24:MI') AS rclDate 
		FROM 
			EXP_RCL_HD A,EXP_RCL_DTL B 
		WHERE 
			A.RCL_NO=B.RCL_NO AND A.RCL_NO=#PARAM#
	</select>
	<!--  Changed for QR -->
	<select id="calculate_tarewt" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(TARE_WEIGHT, 0) AS maxTareWt FROM ULD_TYPE_CARR_TARE_WT WHERE ULD_CARR=#fltPfx# AND ULD_TYPE=#uldBtNo#
			AND #uldNo# BETWEEN ULD_NO_FROM and ULD_NO_TO
	</select>
	<select id="calculate_tarewt_bylsp" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(RULE_VALUE , 0) FROM CMSRULES WHERE RULE_CODE='LSP_TAR_WGT'
	</select>
	<select id="warehouse_destination_validate_exp" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_WH_LOC WHERE CODE=UPPER(#CODE#)
   	</select>
   	<select id="countWarehouseDestinationAndLocation" parameterClass="java.util.HashMap" resultClass="java.lang.Integer"  >
		SELECT COUNT(CODE) FROM MAST_WH_LOC_CODE WHERE WH_LOC=#WHDEST# AND CODE=#LOC#
	</select>
	<!--  Changed for QR -->
	<select id="isImportULDBT" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		   SELECT TO_CHAR(COUNT(1)) FROM AWB_INVENTORY t1
		   join awb t2 on t1.awb_no = t2.awb_no and t1.awb_date = t2.awb_date and t2.awb_type = 'I'
           WHERE t1.ULD_KEY=#uldKey#
	</select>
	<!--  Changed for QR -->
	<select id="isImportULDBTULD_Inventory" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey# AND FLT_TYPE='I' AND EMPTY_FLG='N'
	</select>
	<select id="checkBDComplforEIC" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT COUNT(1) FROM ULD_INVENTORY A, IMP_RAMP_CHK_DTL B WHERE B.FLT_KEY=A.FLT_KEY AND B.FLT_DATE=A.FLT_DATE AND B.ULD_KEY = A.ULD_KEY AND A.FLT_TYPE='I' AND A.ULD_KEY=#uldKey# AND B.BRKDN_COMPL_DATE IS NULL
	</select>
	<select id="checkuldstatasOnEIC" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT (CASE WHEN FUN_GET_ULD_STATE(A.ULD_KEY) = 'OnEIC' THEN 'Y' ELSE 'N' END) FROM ULD_INVENTORY A WHERE A.ULD_KEY=#PARAM#
	</select>
	
	<parameterMap id="getULDOrBTMap" class="java.util.HashMap" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>    
		<parameter property="ULDKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	</parameterMap>
	<procedure id="check_uld_or_bt" parameterMap="getULDOrBTMap" >
		{ ? = call PKG_VALIDATE.VALIDATE_ULD_OR_BT(?)  }
	</procedure>
	<!--  Changed for QR -->
	<select id="validate_uld_owned_inventory" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM ULD_INVENTORY WHERE ULD_KEY=UPPER(#ULDKEY#) AND OWNED_INV='Y'
	</select>
	<!--  Changed for QR -->
	<select id="get_uld_reserve_status" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM ULD_INVENTORY WHERE ULD_KEY=#ULDKEY# AND RESV_FLG='N'
   	</select>
   	<!--  Changed for QR -->
   	<select id="get_uld_empty_status_mix" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM ULD_INVENTORY WHERE ULD_KEY=#ULDKEY# AND EMPTY_FLG='Y' AND AGENT_INV='N'  
   	</select>
   	<!--  Changed for QR -->
   	<select id="get_uld_luc_reserve_status" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM ULD_INVENTORY WHERE ULD_KEY=#ULDKEY# AND CFM_STATUS!='LUC_RESERVED'  
   	</select>
   	<select id="get_tar_weight" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(RULE_VALUE,0) FROM CMSRULES WHERE RULE_CODE='LSP_TAR_WGT'
   	</select>
   	<select id="getAlertMessage"  parameterClass="map"  resultClass="java.lang.String">
		SELECT PKG_EXP_VAL.GET_OPS_MSG('Issue RCL',#CARRCODE#,#DEST#) FROM DUAL
   	</select>	
   	<select id="fetch_holding_hour"  parameterClass="cargo.cms.export.bo.SecurityCheckBO" resultClass="cargo.cms.export.bo.SecurityCheckBO">
		SELECT 
			TO_CHAR(SYSDATE, 'DDMONYY HH24:MI') AS compStartDate, TO_CHAR(SYSDATE + NUMTODSINTERVAL((SELECT SUBSTR(LPAD(MIN_HOLD_HR, '0'), 1, 2) 
			FROM MAST_CARRIER WHERE CODE=''), 'HOUR') + NUMTODSINTERVAL((SELECT SUBSTR(MIN_HOLD_HR, -2) FROM MAST_CARRIER WHERE CODE=''), 'MINUTE'), 
			'DDMONYY HH24:MI') AS holdingDate 
		FROM DUAL
   	</select>
   	<select id="fetchIpAddressNport" parameterClass="cargo.cms.export.bo.IssueRCLDetailBO" resultClass="cargo.cms.export.bo.IssueRCLBulkLocBO">
	       SELECT IP AS ipAddress, PORT AS port FROM MAST_WGT_IP_DTL WHERE CODE=#wtScale#
	</select>
	<!--  Changed for QR -->
	<select id="getItemCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT DISTINCT ITM_CODE FROM BILL_ITM_MASTER WHERE ITM_DESC=#itemDesc#
	</select>
	<select id="getItemDesc" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT DISTINCT ITM_DESC FROM BILL_ITM_MASTER WHERE ITM_CODE=#itemCode#
	</select>
	<select id="getcarpcandwt" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT 
			A.PCS AS rclPcs, A.WT AS rclWt 
		FROM 
			EXP_CAR A, AWB B 
		WHERE 
			B.AWB_NO=A.AWB_NO AND B.AWB_DATE=A.AWB_DATE AND B.AWB_NO=#AWBNO# AND B.AWB_DATE=TO_DATE(#AWBDATE#, 'DDMONYY') AND B.CAR_YN='Y'
	</select>
	<select id="getrclpcandwt" parameterClass="map" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT RCL_PCS-NVL(RTN_PCS,'0') AS rclPcs, RCL_WT - NVL(RTN_WT,'0') AS rclWt, AWB_NO FROM AWB WHERE AWB_NO=#AWBNO# AND AWB_DATE=TO_DATE(#AWBDATE#, 'DDMONYY') 
	</select>
	<select id="sqlCountSPL_HAND_CODE" parameterClass="java.lang.String" resultClass="java.lang.Integer"  >
		SELECT COUNT(CODE) FROM MAST_SPL_HAND_CODE WHERE CODE=#PARAM#
	</select>
	<select id="getContourCodeFromULDType" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT MAX(a.CONTR_CODE) FROM ULD_TYPE_CONTR a WHERE ULD_TYPE=#uldType# GROUP BY a.ULD_TYPE 
		<!-- HAVING COUNT(1)=1 -->
	</select>
	<parameterMap id="rclMap" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="TR_TYPE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
	</parameterMap>
	<procedure id="generaterclnumber" parameterMap="rclMap" >
		{? = call FUN_GET_TR_NO(?)}
	</procedure>
	<!--  Changed for QR -->
	<select id="get_prercl_status_awb" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM EXP_PRE_RCL_HD WHERE AWB_NO=#AWBNO# AND AWB_DATE=TO_DATE(#AWBDATE#, 'DDMONYY') AND STATUS!='EXPIRED'    
	</select>
	<!--  Changed for QR -->
	<select id="get_prercl_cust_code" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT CUST_NO FROM EXP_PRE_RCL_HD WHERE AWB_NO=#AWBNO# AND AWB_DATE=TO_DATE(#AWBDATE#, 'DDMONYY') AND ROWNUM='1'  
	</select>
       <insert id="ibulkrclheaderppack" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		INSERT INTO EXP_RCL_HD 
			(RCL_NO, RCL_DATE, PRT_CODE, AWB_NO, AWB_DATE, PPK_TYPE, AWB_DEST, AWB_CONTENT, RCL_PCS, RCL_WT, CARR_CODE, FLT_NO, FLT_DATE, FLT_TYPE, FLT_KEY, ULD_KEY, 
			HCARRY_IND, SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9, CUST_NO, ASIDE_ACCEPT, QCP_IND, SEC_CHECK, 
			THICK_IND, DUT_COMMODITY, TRUCK_NO, RMK, PRE_RCL_NO,PRE_RCL_NO2, STATUS, TR_TYPE, TR_STATUS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, VOID_USER_ID,  
			VOID_RMK, SEC_AGENT_NO, SEC_AGENT_NAME,SEC_KC_NO, SEC_RA_NO, SEC_RMK, WAVR_IND, DLV_BY, DLV_BY_HKID, REJECT_IND,RCL_REJECT_REASON, AWB_PFX, ACCPT_MODE, VCL_NO, 
			REJECT_REASON, ENDORSED_BY, ENDORSED_DATE, TR_TYPE_EVT, ENDORSED_DC_BY, ENDORSED_DC_DATE,
			SCREENING_OPTION,RACSF_CODE,SCREENING_METHOD,EXEMPTED_REASON,REMARKS,RA_TYPE,RACSF_TRK_NUMBER,DEDICATED_PERSON,TSA_RCL_IND,CARR_RF,un_eli_num,un_elm_num,UN_ELI_PCS,UN_ELM_PCS,TRUCK_FLT_NO,TRUCK_FLT_DATE,AWB_ORG,PCS,WT) 
		VALUES 
			(#rclNum#, SYSDATE, #printerCode#, #awbNum#, to_date(#awbDate#,'DDMONYY'), #pkgType#, #awbDest#, #awbContent#, #totalLocPieces#, #totalLocWeight#, #carrCode#, #flightNum#, 
			TO_DATE(#flightDate#,'DDMONYY'), #flightType#, #flightKey#, UPPER(#uldNum#), #handCarry#, #splCode1#, #splCode2#, #splCode3#, #splCode4#, #splCode5#, 
			#splCode6#, #splCode7#, #splCode8#, #splCode9#, #custNum#, #airsideAccept#, #qcpInd#,  #secCheck#, #thickInd#, NVL(#dutCommodity#,'N'), #truckNum#, #remarks#,decode(#reject#,'Y','',#preRCLNum#),#preRCLNum#, 
			#status#, #trType#, #trStatus#, #crUserID#, SYSDATE, #lmUserID#, SYSDATE, #voidUID#, #voidRemark#, #secAgentNo#,#secAgentName#, #kcNumber#, #raNumber#, 
			#secRemarks#, #waiveCharge#, #dlvBy#, #HKID#, #reject#,#rejectReasonRmk#, SUBSTR(#awbNum#, 1, 3), #accptMode#, #vclNum#, #rejectReason#, #username#, 
			TO_DATE(#endorsedDate#, 'DDMONYY HH24:MI:SS'), #trtype#, DECODE(#dutCommodity#, 'Y', #username#, ''), DECODE(#dutCommodity#, 'Y', 
			TO_DATE(#endorsedDate#, 'DDMONYY HH24:MI:SS'), ''),
			#racfRadioOption#,#screenUnderRacsfCode#,#screeningMethod#,#exemptedReason#,
			#screenUnderRacsfRemarks#,#rakcType#,#truckNo#,#personInCab#,#tsaRclInd#,#carrierRF#,#unELINumber#,#unELMNumber#,#unELIPcs#,#unELMPcs#,#trkFlightKey#,#trkFlightDate#,#awbOrig#,#manfPcs#,#manfWt#)
	</insert>
	<select id="getInboundFltDtlsSaved" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		select FLT_KEY as FLTKEY, to_char(FLT_DATE,'DDMONYY') as FLTDATE from CDT_INB_FLT_DTLS where awb_no = #AWB_NO# and awb_date = to_date(#AWB_DATE#,'DDMONYY') 
	</select>
	<select id="getInboundEITTFltDtls" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLDetailBO">
			select FLT_KEY as impFlightKey, to_char(FLT_DATE,'DDMONYY') as impFlightDate  from cst_itt_dtl where awb_no = #awbNum#
	</select>
	<select id="chkAWBExistsInEITT" parameterClass="cargo.cms.export.bo.IssueRCLDetailBO" resultClass="cargo.cms.export.bo.IssueRCLDetailBO">
		select distinct awb_no as awbNum from cst_itt_dtl where
			(awb_no in
			  	<iterate property="concatAWB" open="(" close=")" conjunction=",">
					#concatAWB[]#
				</iterate>
			 ) group by awb_no
	</select>
	<select id="getInbFltLstForAWBList" parameterClass="cargo.cms.export.bo.IssueRCLDetailBO" resultClass="cargo.cms.export.bo.IssueRCLDetailBO">
		select FLT_KEY as impFlightKey, to_char(FLT_DATE,'DDMONYY') as impFlightDate  from cst_itt_dtl where 1 =1 
		<isNotEmpty prepend="AND" property="concatAWB">
			awb_no in
			<iterate property="concatAWB" open="(" close=")" conjunction=",">
				   #concatAWB[]#  
			</iterate>	
		</isNotEmpty>
	</select>
	<insert id="insertInboundFltDetails" parameterClass="java.util.HashMap">
		INSERT INTO
		CDT_INB_FLT_DTLS
		(RCL_NO, RCL_DATE, AWB_NO, AWB_DATE,FLT_KEY,
		FLT_DATE,
		CR_USER_ID,
		CR_DATE,
		LM_USER_ID,
		LM_DATE)VALUES
		(#RCL_NO#,SYSDATE,#AWB_NO#,to_date(#AWB_DATE#,'DDMONYY'),#FLT_KEY#,to_date(#FLT_DATE#,'DDMONYY'),#CR_USER_ID#,SYSDATE,#CR_USER_ID#,SYSDATE)
	</insert>
	<insert id="ilocation" parameterClass="cargo.cms.export.bo.IssueRCLBulkLocBO">
		INSERT INTO 
			EXP_RCL_DTL 
			(RCL_NO, DOC_LINE_NO, PCS, GROSS_WT, NET_WT, FSCALE_WT, ULD_KEY, CONTR_CODE, TARE_WT, LOC_CODE, TR_STATUS, TR_TYPE, CR_USER_ID, CR_DATE, 
			LM_DATE, LM_USER_ID, PPK_TYPE, ULD_CARR, ULD_NO, ULD_TYPE, LSP_NO, TARGET_LOC, MAN_WT_YN, OHG,TR_TYPE_EVT) 
		VALUES 
			(#rclNum#, EXP_RCLBDNLINE_SEQ.NEXTVAL, #locationPcs#, #grossWt#, #netWeight#, #flrScaleWt#, #uldNum#, #contourCode#, #tareWt#, #locationCode#, #trStatus#, 
			#trType#, #crUserID#, SYSDATE, SYSDATE, #lmUSerID#, #packageType#, #uldCarrier#, #uldKey#, #uldType#, #lspNum#, #targetLocn#, #manWtYN#, #overHung#,#trtypeEvt#)
	</insert>
	<insert id="idimension" parameterClass="cargo.cms.export.bo.IssueRCLBulkDim">
		INSERT INTO 
			EXP_RCL_DMN 
			(RCL_NO, DOC_LINE_NO, LENGTH, WIDTH, HEIGHT, PCS, TR_TYPE, TR_STATUS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, REMARKS) 
		VALUES 
			(#rclNum#, EXP_MRCLDLINE_SEQ.NEXTVAL, #length#, #width#, #height#, #pieces#, #trType#, #trStatus#, #crUserID#, SYSDATE, #lmUserID#, SYSDATE, #remarks#)
	</insert>
	<insert id="isecurity" parameterClass="cargo.cms.export.bo.SecurityCheckBO">
		INSERT INTO 
			EXP_RCL_SEC_CHK_DTL 
			(RCL_NO, DOC_LINE_NO, SC_ITM_CODE, SC_START_DATE, SC_END_DATE, SC_PCS, SC_WT, TR_TYPE, TR_STATUS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, 
			SC_REL_DATE, SC_PAID_BY, AWB_NO, SC_RESULT,AWB_DATE) 
		VALUES 
			(#rclNum#, #docLineNum#, #secItemCode#, TO_DATE(#compStartDate#,'DDMONYY HH24:MI'), TO_DATE(#holdingDate#,'DDMONYY HH24:MI'), #secPieces#, #secWeight#, 
			#trType#, #trStatus#, #crUserID#, SYSDATE, #lmUserID#, SYSDATE, NULL, #chargeTo#, #awbNum#, #secResult#,TO_DATE(pkg_common.get_awb_date(#awbNum#, 'E'),'DDMONYY'))
	</insert>
	<update id="updatedmrcl" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		UPDATE EXP_PRE_RCL_HD SET STATUS='CONFIRMED' WHERE PRE_RCL_NO=#oldRCLNum#
	</update>
	<select id="sqlCountARPT" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(CODE) FROM MAST_ARPT WHERE CODE=#PARAM#
	</select>
	<select id="generateRCLNo" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT TO_CHAR(RCL_NO_SEQ.NEXTVAL, '00000000') FROM DUAL
	</select>
	<select id="generateVCLNo" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT TO_CHAR(VCL_NO_SEQ.NEXTVAL, '00000000') FROM DUAL
	</select>
	<select id="doclinenumberlocation" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="java.lang.String">
		SELECT MAX(DOC_LINE_NO) FROM EXP_RCL_DTL WHERE RCL_NO=#rclNum#
   	</select>
   	<select id="doclinenumberdimension" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="java.lang.String">
		SELECT MAX(DOC_LINE_NO) FROM EXP_RCL_DMN WHERE RCL_NO=#rclNum#
   	</select>
   	<select id="doclinenumbersecurity"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="java.lang.String">
		SELECT MAX(DOC_LINE_NO) FROM EXP_RCL_SEC_CHK_DTL WHERE RCL_NO=#rclNum#
   	</select>
   	<!--  Changed for QR -->
   	<select id="findRclNoByAwbNo" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
   		SELECT 
   			DISTINCT A.PRE_RCL_NO AS preRCLNum, A.TTL_PCS AS rclPcs, A.TTL_WT AS rclWt, CASE WHEN (B.PRE_RCL_NO IS NULL OR 
   			(B.PRE_RCL_NO IS NOT NULL AND B.STATUS IN ('V', 'I')) OR (B.PRE_RCL_NO IS NOT NULL 
   			AND A.STATUS='SUBMITTED')) THEN 'N' ELSE 'Y' END AS preRCLYN, A.AWB_NO as awbNum, B.STATUS as status 
   		FROM 
   			EXP_PRE_RCL_HD A LEFT JOIN EXP_RCL_HD B ON B.PRE_RCL_NO=A.PRE_RCL_NO AND B.PPK_TYPE=A.PPK_TYPE 
   		WHERE 
   			(B.PRE_RCL_NO IS NULL OR (B.PRE_RCL_NO IS NOT NULL AND B.STATUS IN ('V', 'I')) OR (B.PRE_RCL_NO IS NOT NULL 
   			AND A.STATUS='SUBMITTED')) AND A.PPK_TYPE=#ppkType# AND (A.STATUS!='EXPIRED' AND A.STATUS!='OUTSTANDING')
   			<isNotEmpty property="awbNo">
   				AND A.AWB_NO=#awbNo# 
   				AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
   			</isNotEmpty>
   			 <isNotEmpty property="preRCLNo">
   				AND A.PRE_RCL_NO=#preRCLNo#
   			</isNotEmpty> 
   			<isNotEmpty property="sealNumber">
   			AND (A.SEAL_NUM1=#sealNumber# OR A.SEAL_NUM2=#sealNumber# OR A.SEAL_NUM3=#sealNumber# OR A.SEAL_NUM4= #sealNumber# OR A.SEAL_NUM5=#sealNumber# OR A.SEAL_NUM6=#sealNumber# OR A.SEAL_NUM7=#sealNumber# OR A.SEAL_NUM8=#sealNumber# OR A.SEAL_NUM9=#sealNumber#)
   			</isNotEmpty> 
   			 
   			
   			<!-- AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') -->
   	</select>
   	<select id="findRclNoByUldKey" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
   		SELECT 
   			DISTINCT A.PRE_RCL_NO AS preRCLNum, A.TTL_PCS AS rclPcs, A.TTL_WT AS rclWt, CASE WHEN (B.PRE_RCL_NO IS NULL OR 
   			B.STATUS IN ('V', 'I')) THEN 'N' ELSE 'Y' END AS preRCLYN, A.AWB_NO as awbNum, B.STATUS as status 
   		FROM 
   			EXP_PRE_RCL_HD A LEFT JOIN EXP_RCL_HD B ON B.PRE_RCL_NO=A.PRE_RCL_NO AND B.PPK_TYPE=A.PPK_TYPE 
   		WHERE 
   			(B.PRE_RCL_NO IS NULL OR (B.PRE_RCL_NO IS NOT NULL AND B.STATUS IN ('V', 'I'))) AND A.PPK_TYPE=#ppkType#  AND (A.STATUS != 'EXPIRED' AND A.STATUS != 'OUTSTANDING')
   			<isNotEmpty property="uldKey">
   				AND A.ULD_KEY=#uldKey#
   			</isNotEmpty>
   			 <isNotEmpty property="preRCLNo">
   				AND A.PRE_RCL_NO=#preRCLNo#
   			</isNotEmpty>
   			<isNotEmpty property="sealNumber">
   			AND (A.SEAL_NUM1=#sealNumber# OR A.SEAL_NUM2=#sealNumber# OR A.SEAL_NUM3=#sealNumber# OR A.SEAL_NUM4= #sealNumber# OR A.SEAL_NUM5=#sealNumber# OR A.SEAL_NUM6=#sealNumber# OR A.SEAL_NUM7=#sealNumber# OR A.SEAL_NUM8=#sealNumber# OR A.SEAL_NUM9=#sealNumber#)
   			</isNotEmpty>
   	</select>
   	<select id="agent_details" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.SecurityCheckBO">
		 SELECT 
		 	A.CODE AS secAgentNum, A.CODE_DESC AS secAgentName, A.CO_IATA_CODE AS secIataCode, A.CARR_CODE AS carrCode, B.RA_NO AS raNumber, 
		 	C.KC_NO AS kcNumber FROM CUST_COMPANY A, CUST_AGENT_RA B , CUST_AGENT_KC C  
		 WHERE 
		 	A.CODE=#agentNum# AND A.CODE=B.CUST_NO(+) AND A.CODE=C.CUST_NO(+)
   	</select>
   	<select id="findRCLDtlsIfPreRCLExists" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLDetailBO">
   		SELECT 
   			B.CODE_DESC as agentName, A.CUST_NO as custNum, A.CARR_CODE as carrCode, A.AWB_DEST as awbDest 
   		FROM 
   			EXP_PRE_RCL_HD A LEFT JOIN CUST_COMPANY B ON B.CODE=A.CUST_NO 
   		WHERE 
   			A.PRE_RCL_NO=#preRCLNo#
   	</select>   
	<select id="findLocnDtlsforMixPrepack" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLDetailBO">
   	select sum(b.locn_pcs) totalErclPcs,sum(b.locn_wt) toatalErclWt from exp_rcl_brkdn a,awb_inventory b 
	where b.awb_no = a.awb_no and b.awb_date = a.awb_date and b.uld_key = a.uld_key and a.rcl_no=#rclNo#
   	</select>
   	<select id="findLocnDtlsforPrepack" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLDetailBO">
   	SELECT SUM(b.locn_pcs) totalErclPcs,  SUM(b.locn_wt) toatalErclWt FROM exp_rcl_hd a,  awb_inventory b,  exp_rcl_dtl c
	WHERE b.awb_no = a.awb_no AND b.awb_date = a.awb_date AND b.uld_key  = c.uld_key and c.rcl_no = a.rcl_no AND a.rcl_no   =#rclNo#
   	</select>	
   	<select id="findDimDtlsIfPreRCLExists" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLBulkDim">   		
   		SELECT EXP_PRE_RCL_DMN.LENGTH as length, EXP_PRE_RCL_DMN.WIDTH as width, EXP_PRE_RCL_DMN.HEIGHT as height, EXP_PRE_RCL_DMN.PCS as pieces FROM EXP_PRE_RCL_DMN,EXP_PRE_RCL_HD WHERE 
		EXP_PRE_RCL_DMN.PRE_RCL_NO = EXP_PRE_RCL_HD.PRE_RCL_NO AND EXP_PRE_RCL_HD.STATUS = 'SUBMITTED' AND
		EXP_PRE_RCL_DMN.PRE_RCL_NO=#preRCLNo#
   	</select>
   	<update id="udpateExpRCLHD" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
   		UPDATE EXP_RCL_HD 
   		SET 
   			CUST_NO=#custNum#, PRT_CODE=#printerCode#, CARR_CODE=#carrCode#, AWB_DEST=#awbDest#, AWB_CONTENT=#awbContent#, TRUCK_NO=#truckNum#, 
			DLV_BY=#dlvBy#, DLV_BY_HKID=#HKID#, ASIDE_ACCEPT=#airsideAccept#, SEC_CHECK=#secCheck#, REJECT_IND=#reject#,RCL_REJECT_REASON = #rejectReasonRmk#,REJECT_REASON=#rejectReason#, HCARRY_IND=#handCarry#, 
			THICK_IND=#thickInd#, DUT_COMMODITY=#dutCommodity#, SPL_CODE1=#splCode1#, SPL_CODE2=#splCode2#, SPL_CODE3=#splCode3#, SPL_CODE4=#splCode4#, 
			SPL_CODE5=#splCode5#, SPL_CODE6=#splCode6#, SPL_CODE7=#splCode7#, SPL_CODE8=#splCode8#, SPL_CODE9=#splCode9#, RMK=#remarks#, LM_DATE=SYSDATE, 
			LM_USER_ID=#lmUserID#, RCL_PCS=#totalLocPieces#, RCL_WT=#totalLocWeight#, STATUS=#status#,SCREENING_OPTION=#racfRadioOption#,
 			RACSF_CODE=#screenUnderRacsfCode#,SCREENING_METHOD=#screeningMethod#,EXEMPTED_REASON=#exemptedReason#,REMARKS=#screenUnderRacsfRemarks#,
 			RA_TYPE=#rakcType#,RACSF_TRK_NUMBER=#truckNo#,DEDICATED_PERSON=#personInCab# 
		WHERE 
			RCL_NO=#rclNum#
   	</update>
   	<update id="udpateExpRCLDtl" parameterClass="cargo.cms.export.bo.IssueRCLBulkLocBO">
   		UPDATE 
   			EXP_RCL_DTL 
   		SET 
   			PCS=#locationPcs#, GROSS_WT=#grossWt#, NET_WT=#netWeight#, FSCALE_WT=#flrScaleWt#, ULD_KEY=#uldKey#, CONTR_CODE=#contourCode#, TARE_WT=#tareWt#, 
			LOC_CODE=#locationCode#, LM_DATE=SYSDATE, LM_USER_ID=#lmUSerID#, PPK_TYPE=#packageType#, ULD_CARR=#uldCarrier#, ULD_NO=SUBSTR(#uldKey#,4,6), 
			ULD_TYPE=#uldType#, LSP_NO=#lspNum#, TARGET_LOC=#targetLocn#, OHG=#overHung# 
		WHERE 
			RCL_NO=#rclNum# AND DOC_LINE_NO=#docLineNum#
   	</update>
   	<update id="udpateExpRCLDim" parameterClass="cargo.cms.export.bo.IssueRCLBulkDim">
   		UPDATE 
   			EXP_RCL_DMN 
   		SET 
   			LENGTH=#length#, WIDTH=#width#, HEIGHT=#height#, PCS=#pieces#, LM_USER_ID=#lmUserID#, LM_DATE=SYSDATE, REMARKS=#remarks# 
   		WHERE 
   			RCL_NO=#rclNum# AND DOC_LINE_NO=#docLineNum#
   	</update>
   	<!--  Changed for QR -->
   	<select id="findEndrReqIssueRCL" parameterClass="cargo.cms.export.bo.IssueRCLDetailBO" resultClass="java.lang.Integer">
   		SELECT 
   			COUNT(1) 
   		FROM 
   			MAST_SPL_HAND_CODE 
   		WHERE 
   			ENDR_RCL='Y' AND (CODE=#splCode1# OR CODE=#splCode2# OR CODE=#splCode3# OR CODE=#splCode4# OR CODE=#splCode5# 
   			OR CODE=#splCode6# OR CODE=#splCode7# OR CODE=#splCode8# OR CODE=#splCode9#)
   	</select>
	<select id="findEndrReqIssueRCLTranshipment" parameterClass="cargo.cms.export.bo.IssueRCLDetailBO" resultClass="java.lang.Integer">
   		SELECT 
   			COUNT(1) 
   		FROM 
   			MAST_SPL_HAND_CODE 
   		WHERE 
   			ENDR_TRANSHIPMENT='Y' AND (CODE=#splCode1# OR CODE=#splCode2# OR CODE=#splCode3# OR CODE=#splCode4# OR CODE=#splCode5# 
   			OR CODE=#splCode6# OR CODE=#splCode7# OR CODE=#splCode8# OR CODE=#splCode9#)
   	</select>
   	<!--  Changed for QR -->
   	<select id="findRCLEndorseUsername" parameterClass="java.lang.String" resultClass="java.lang.String">
 		SELECT CODE AS username FROM SEC_USER WHERE CODE = UPPER(#username#)
 	</select>
 	<select id="findRCLEndorsePassword" parameterClass="java.lang.String" resultClass="java.lang.String">
 		SELECT USER_PASSWORD  AS orgPwd FROM SEC_USER WHERE CODE = UPPER(#username#)
 	</select>
 	<select id="findRoleBYUsername" parameterClass="java.lang.String" resultClass="java.lang.String">
 		SELECT ROLE_NAME AS rolename FROM SEC_USER_ROLE WHERE USER_ID= UPPER(#username#) ORDER BY ROLE_NAME
 	</select>
	<select id="getAccessorySummaryList" parameterClass="java.lang.String" resultClass="cargo.cms.afw.bo.MasterBO">
 		select codeId , codeDesc  from (
		  select CODE AS codeId, CODE_DESC AS codeDesc from mast_code_dtl where code_type = 'EQUIP_TYPE'
		  union
		  select urf.CODE AS codeId, urf.CODE_DESC AS codeDesc from mast_code_dtl urf where urf.code_type = 'URF_EQUIP_TYPE'   
      		 AND UPPER(urf.CODE) not in (select UPPER(CODE) from mast_code_dtl where code_type = 'EQUIP_TYPE')
		)
 	</select>
 	<insert id="insertRCLeRCLDisc" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
 		INSERT INTO EXP_PRE_RCL_DISC
 			(PRE_RCL_NO, PRE_TOT_VOL, PRE_TOT_PCS, RCL_NO, TOT_VOL, TOT_PCS, CR_DATE, CR_USER_ID, LM_DATE, LM_USER_ID) 
 		VALUES
 			(#preRCLNum#, #totalPreDimVol#, #totalPreDimPcs#, #rclNum#, #totalDimVol#, #totalDimPcs#, SYSDATE, #crUserID#, SYSDATE, #lmUserID#)
 	</insert>
	<insert id="insertRCLHAWB" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
 		INSERT INTO EXP_RCL_HAWB
 			(RCL_NO, HAWB_NO, AWB_NO, AWB_DATE, CR_DATE, CR_USER_ID, LM_DATE, LM_USER_ID) 
 		VALUES
 			(#rclNum#, #hawb#, #awbNum#, #awbDate#, SYSDATE, #crUserID#, SYSDATE, #lmUserID#)
 	</insert>
 	<update id="updateRCLeRCLDisc" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
 		UPDATE 
 			EXP_PRE_RCL_DISC
 		SET 
 			PRE_RCL_NO=#preRCLNum#, PRE_TOT_VOL=#totalPreDimVol#, PRE_TOT_PCS=#totalPreDimPcs#, TOT_VOL=#totalDimVol#, TOT_PCS=#totalDimPcs#, 
 			LM_DATE=SYSDATE, LM_USER_ID=#lmUserID# 
 		WHERE 
 			RCL_NO=#rclNum#
 	</update>
 	<select id="findPreRclDmns" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLBulkDim">
 		SELECT LENGTH as length, WIDTH as width, HEIGHT as height, PCS as pieces FROM EXP_PRE_RCL_DMN WHERE PRE_RCL_NO=#preRCLNo#
 	</select>
 	<insert id="insert_exp_truck_rcl" parameterClass="java.util.HashMap">
 		INSERT INTO EXP_TRUCK_RCL
 			(TRIP_ID, RCL_NO, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE) 
 		VALUES
 			(#tripId#, #rclNo#, #userid#, SYSDATE, #userid#, SYSDATE)
 	</insert>
 	<!--  Changed for QR -->
 	<select id="findAgtNameExists" parameterClass="java.lang.String" resultClass="java.lang.Integer">
 		SELECT COUNT(1) FROM CUST_AGENT_AUTH_REP WHERE AUTH_REP_NAME=#agtName#
 	</select>
 	<!--  Changed for QR -->
 	<select id="findHKidForAgtExists" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
 		SELECT COUNT(1) FROM CUST_AGENT_AUTH_REP WHERE AUTH_REP_NAME=#agtName# AND AUTH_REP_ID=#hkid#
 	</select>
 	<!--  Changed for QR -->
 	<select id="findLocnExistsInWOS" parameterClass="java.lang.String" resultClass="java.lang.Integer">
 		SELECT COUNT(1) FROM MAST_WH_LOC WHERE CODE=#locnCode#
 	</select>
 	<!--  Changed for QR -->
 	<select id="findSHCAssociatedWitLocn" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
 		SELECT 
 			COUNT(1) FROM SHC_RESTRICT_LOC 
 		WHERE 
 			(SHC=#splCode1# OR SHC=#splCode2# OR SHC=#splCode3# OR SHC=#splCode4# OR SHC=#splCode5# OR SHC=#splCode6# OR 
 			SHC=#splCode7# OR SHC=#splCode8# OR SHC=#splCode9#) AND LOC_CODE=#locCode#
 	</select>
 	<!--  Changed for QR -->
	<select id="qheaderppk" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
   	<![CDATA[
		SELECT rclNum,pkgType,rclIssueDate,awbNum,preRCLNum,uldNum,carrCode,truckNum,qcpInd,destination,awbContent,rclWT,rclPcs FROM 
			(SELECT A.RCL_NO                                      AS rclNum,
			  DECODE(A.PPK_TYPE, 'B', 'Bulk', 'P', 'BUP', 'Mix') AS pkgType,
			  TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI')              AS rclIssueDate,
			  A.AWB_NO                                           AS awbNum,
			  A.PRE_RCL_NO                                       AS preRCLNum,
			  A.ULD_KEY                                          AS uldNum,
			  A.CARR_CODE                                        AS carrCode,
			  A.TRUCK_NO                                         AS truckNum,
			  A.QCP_IND                                          AS qcpInd,
			  A.AWB_DEST                                         AS destination,
			  A.AWB_CONTENT                                      AS awbContent,
			  A.RCL_WT                                           AS rclWT,
			  A.RCL_PCS                                          AS rclPcs
			FROM EXP_RCL_HD A
			WHERE A.AWB_NO      = #awbNum#
			AND A.AWB_DATE      = NVL(to_date(#awbDate#,'DDMONYY'),A.AWB_DATE)
			AND rcl_pcs-rtn_pcs > 0 AND A.PPK_TYPE = 'B' 
			AND A.STATUS       <> 'V'
			union 
			SELECT A.RCL_NO                                      AS rclNum,
			  DECODE(A.PPK_TYPE, 'B', 'Bulk', 'P', 'BUP', 'Mix') AS pkgType,
			  TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI')              AS rclIssueDate,
			  NVL(A.AWB_NO,(select DISTINCT(awb_no) from exp_uld_awb where awb_no = #awbNum#  AND AWB_DATE  = to_date(#awbDate#,'DDMONYY')))   AS awbNum,
			  A.PRE_RCL_NO                                       AS preRCLNum,
			  A.ULD_KEY                                          AS uldNum,
			  A.CARR_CODE                                        AS carrCode,
			  A.TRUCK_NO                                         AS truckNum,
			  A.QCP_IND                                          AS qcpInd,
			  A.AWB_DEST                                         AS destination,
			  A.AWB_CONTENT                                      AS awbContent,
			  A.RCL_WT                                           AS rclWT,
			  A.RCL_PCS                                          AS rclPcs
			FROM EXP_RCL_HD A
			WHERE A.RCL_NO  IN (select DISTINCT(RCL_NO) from exp_uld_awb where awb_no = #awbNum# AND AWB_DATE  = to_date(#awbDate#,'DDMONYY')) 
			AND rcl_pcs-rtn_pcs > 0 AND A.STATUS  <> 'V')  DUAL  ORDER BY  rclIssueDate ASC  
	]]>
   	</select>
   	<!--  Changed for QR -->
   	<select id="validate_uld_in_inventory" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM ULD_INVENTORY WHERE ULD_KEY=#ULDKEY#
   	</select>
   	<!--  Changed for QR -->
   	<select id="uldinventory" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM ULD_INVENTORY WHERE ULD_KEY=#uldNum#
   	</select>
   	<!--  Changed for QR -->
   	<select id="agentholding"  parameterClass="cargo.cms.export.bo.RCLSearchBO"  resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM ULD_INVENTORY WHERE ULD_KEY=#uldNum# AND AGENT_INV='Y' AND AGENT_ID IS NOT NULL AND TARGET IS NULL
   	</select>
   	<!--  Changed for QR -->
   	<select id="isULDOnAgentHoldingList" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey# AND AGENT_INV!='Y'
	</select>
	<!--  Changed for QR -->
	<select id="get_eic_status_uld" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM ULD_INVENTORY WHERE ULD_KEY=#ULDKEY#  AND NVL(EIC_FLG, 'N')='Y'
	</select>
	<!--  Changed for QR -->
	<select id="get_uld_empty_status" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM ULD_INVENTORY WHERE EMPTY_FLG='Y' AND ULD_KEY=#ULDKEY#
   	</select>
   	<select id="get_max_weight_uld" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(MAX_WEIGHT,0) FROM ULD_GROUP_CARR WHERE CARR_CODE=#ULDCARR# AND ULD_TYPE=#ULDTYPE#
   	</select>
   	
   	<select id="getULDTareWeightForTarmac" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(TARE_WEIGHT, 0) as tareWeight 
        FROM ULD_INVENTORY WHERE ULD_KEY = #ULD_KEY#
        AND FLT_KEY = #FLT_KEY#
        AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
   	</select>
   	
   	<select id="get_tar_weight_uld" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(TARE_WEIGHT,0) FROM ULD_GROUP_CARR WHERE CARR_CODE=#ULDCARR# AND ULD_TYPE=#ULDTYPE#
   	</select>
   	<!--  Changed for QR -->
   	<select id="inUldInventoryInd" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="java.lang.String">
		SELECT NVL(COUNT(1),0) FROM ULD_INVENTORY WHERE ULD_KEY= #uldNum# AND OWNED_INV='Y'
   	</select>
   	<!--  Changed for QR -->
   	<select id="validate_contrcode_issuercl" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT COUNT(CONTR_CODE) FROM ULD_TYPE_CONTR WHERE ULD_TYPE LIKE #uldType# AND CONTR_CODE=#contrCode#
	</select>
	<select id="findIssueRCLDtls" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLDetailBO">
		SELECT * FROM 
			(SELECT A.PRE_RCL_NO as preRCLNum, A.AWB_NO as awbNum, A.RCL_NO as rclNum, CONCAT(CONCAT(SUBSTR(A.AWB_NO, 0, 3), '-'), SUBSTR(A.AWB_NO, 4)) as 
			awbNumDisplay, A.CARR_CODE as carrCode, A.AWB_DEST as awbDest, B.code_desc as agentName, B.CO_IATA_CODE as iataCode, B.CODE as custNum, A.RMK as remarks 
			<!-- A.SPL_CODE1 splCode1, A.SPL_CODE2 splCode2, A.SPL_CODE3 splCode3, A.SPL_CODE4 splCode4, A.SPL_CODE5 splCode5, A.SPL_CODE6 splCode6, A.SPL_CODE7 splCode7, 
			A.SPL_CODE8 splCode8, A.SPL_CODE9 splCode9, A.DLV_BY as dlvBy, A.DLV_BY_HKID as HKID, A.REJECT_IND as reject, A.PRT_CODE as printerCode, A.SEC_CHECK as secCheck, 
			A.ASIDE_ACCEPT as airsideAccept, A.TRUCK_NO as truckNum -->
		FROM 
			EXP_RCL_HD A LEFT JOIN CUST_COMPANY B ON A.CUST_NO=B.CODE 
		WHERE 
			A.AWB_NO=#awbNum# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND A.PPK_TYPE=#packageType# AND A.STATUS!='EXPIRED' ORDER BY A.CR_DATE DESC) WHERE ROWNUM=1
	</select>
	<!--  Changed for QR -->
	<select id="findAwbDtlsByAwbNo" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.AWBBO">
		SELECT 
			AWB_TYPE as awbType, CR_USER_ID as crUserId, LM_USER_ID as lastModUserId, CAR_YN as carYN, ACCEPT_MODE as acceptMode, PCS as awbPcs, 
			WT as awbWt, RCL_BULK_PCS as rclBulkPcs, RCL_BULK_WT as rclBulkWt, RCL_PPK_PCS as rclPPackPcs, RCL_PPK_WT as rclPPackWt, RCL_MIX_PCS as rclMixPcs, 
			RCL_MIX_WT as rclMixWt 
		FROM 
			AWB 
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	<!--  Changed for QR -->
	<select id="checkAwbLockStatus" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE = to_date(#awbDate#,'DDMONYY') AND AWB_TYPE='E' AND EXP_AWB_LOCK='Y'
	</select>
	<!--  Changed for QR -->
	<select id="checkAwbClosedStatus" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE = to_date(#awbDate#,'DDMONYY') AND AWB_TYPE='E' AND AWB_CLOSED_YN='Y'
	</select>
	<select id="qheadermix"  parameterClass="cargo.cms.export.bo.RCLSearchBO"  resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT 
			A.PRE_RCL_NO as preRCLNum, A.AWB_NO as awbNum, CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) as awbNumDisplay, 
			NVL(A.ULD_KEY, D.ULD_KEY) as uldNum, A.CARR_CODE as carrCode, A.AWB_DEST as awbDest, A.QCP_IND as qcpInd, A.QCP_CONTACT_PERSON as qcpContactPer, 
			A.QCP_CONTACT_NO as qcpContactNum, A.QCP_CONTACT_NO as qcpContactNum, A.QCP_FAX_NO as qcpFaxNum, A.QCP_PCS as qcpPieces, TO_CHAR(A.QCP_WT,999999999.99) as qcpWeight, 
			A.QCP_GOODS_DESC as qcpGoods, TO_CHAR(A.QCP_DELV_DATE,'DDMONYY') as qcpDelvDate, A.QCP_DELV_TIME as qcpDelvTime, B.CODE_DESC as agentName, 
			B.CO_IATA_CODE as iataCode, B.CODE as custNum, A.RMK as remarks, A.RCL_PCS as rclPcs, TO_CHAR(A.RCL_WT,999999999.99) AS rclWt, A.SPL_CODE1 splCode1, 
			A.SPL_CODE2 splCode2, A.SPL_CODE3 splCode3, A.PPK_TYPE as pkgType 
		FROM 
			EXP_PRE_RCL_HD A, EXP_PRE_RCL_DTL D, CUST_COMPANY B 
		WHERE 
			A.PRE_RCL_NO=D.PRE_RCL_NO AND B.CODE=A.CUST_NO AND A.PRE_RCL_NO=#preRclNum# AND NVL(A.ULD_KEY, D.ULD_KEY)=#uldNum#
   	</select>
   	<!--  Changed for QR -->
   	<select id="qalternateheadermix"  parameterClass="cargo.cms.export.bo.RCLSearchBO"  resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT 
			ULD_KEY as uldNum, 
			<!-- commented on 16NOV11: flight is fetched only from FBL -->
			<!-- FLT_KEY as flightKey, FLT_NO as flightNum, FLT_DATE as flightDate, FLT_DATE as schDate,--> 
			CARR_CODE as carrCode, 'N' as qcpInd 
		FROM 
			ULD_INVENTORY 
		WHERE 
			ULD_KEY=#uldNum#
   	</select>
   	<select id="get_owner_for_uld" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(OWNER_ID,'SQ') FROM ULD_INVENTORY WHERE ULD_KEY=#ULDKEY# 
	</select>
	<select id="qmissuemixdetail"  parameterClass="cargo.cms.export.bo.RCLSearchBO"  resultClass="cargo.cms.export.bo.IssueRCLDetailBO">
	<![CDATA[
	    SELECT * FROM
	    	(SELECT preRCLNum, awbNum, awbNumDisplay, uldNum, carrCode, awbDest, qcpInd, qcpContactPer, qcpContactNum, qcpFaxNum, qcpPieces, qcpWeight, 
	    		qcpGoods, qcpDelvDate, qcpDelvTime, agentName, iataCode, custNum, remarks,splCode1, splCode2, splCode3, rclTotalPcs 
	    	FROM 
	    		(SELECT 
	    			A.PRE_RCL_NO as preRCLNum, A.AWB_NO as awbNum, CONCAT(CONCAT(SUBSTR(A.AWB_NO, 0, 3), '-'), SUBSTR(A.AWB_NO, 4)) as awbNumDisplay, A.ULD_KEY as uldNum,
						   A.CARR_CODE as carrCode, A.AWB_DEST as awbDest, A.QCP_IND as qcpInd, A.QCP_CONTACT_PERSON as qcpContactPer, A.QCP_CONTACT_NO as qcpContactNum, 
						   A.QCP_FAX_NO as qcpFaxNum, A.QCP_PCS as qcpPieces, TO_CHAR(A.QCP_WT, 999999999.99) as qcpWeight, A.QCP_GOODS_DESC as qcpGoods, TO_CHAR(A.QCP_DELV_DATE, 
						   'DDMONYY') as qcpDelvDate, A.QCP_DELV_TIME as qcpDelvTime, B.CODE_DESC as agentName, B.CO_IATA_CODE as iataCode, B.CODE as custNum, A.RMK as remarks,
						   A.SPL_CODE1 splCode1, A.SPL_CODE2 splCode2, A.SPL_CODE3 splCode3,A.TTL_PCS as rclTotalPcs 
					FROM   EXP_PRE_RCL_HD A, CUST_COMPANY B
					WHERE  A.CUST_NO = B.CODE
					AND    A.PPK_TYPE = 'M'
					AND    A.ULD_KEY = UPPER(#uldNum#)
					AND    A.STATUS = 'SUBMITTED'
					AND    A.PRE_RCL_NO = #preRclNum#
					ORDER BY a.LM_DATE DESC)
			WHERE   ROWNUM = 1
			UNION
			SELECT preRCLNum, awbNum, awbNumDisplay, uldNum, carrCode, awbDest, qcpInd, qcpContactPer, qcpContactNum, qcpFaxNum, 
				   qcpPieces, qcpWeight, qcpGoods, qcpDelvDate, qcpDelvTime,
				   agentName, iataCode, custNum, remarks,splCode1, splCode2, splCode3, rclTotalPcs 
			FROM   (SELECT A.PRE_RCL_NO as preRCLNum, A.AWB_NO as awbNum, CONCAT(CONCAT(SUBSTR(A.AWB_NO, 0, 3), '-'), SUBSTR(A.AWB_NO, 4)) as awbNumDisplay, c.ULD_KEY as uldNum, 
						   A.CARR_CODE as carrCode, A.AWB_DEST as awbDest, A.QCP_IND as qcpInd, A.QCP_CONTACT_PERSON as qcpContactPer, A.QCP_CONTACT_NO as qcpContactNum, 
						   A.QCP_FAX_NO as qcpFaxNum, A.QCP_PCS as qcpPieces, TO_CHAR(A.QCP_WT, 999999999.99) as qcpWeight, A.QCP_GOODS_DESC as qcpGoods, 
						   TO_CHAR(A.QCP_DELV_DATE, 'DDMONYY') as qcpDelvDate, A.QCP_DELV_TIME as qcpDelvTime, B.CODE_DESC as agentName, B.CO_IATA_CODE as iataCode, 
						   B.CODE as custNum, A.RMK as remarks, 
						   A.SPL_CODE1 splCode1, A.SPL_CODE2 splCode2, A.SPL_CODE3 splCode3, A.TTL_PCS as rclTotalPcs 
					FROM   EXP_PRE_RCL_HD A, CUST_COMPANY B, EXP_PRE_RCL_DTL C
					WHERE  A.CUST_NO = B.CODE
					AND    a.PRE_RCL_NO = c.PRE_RCL_NO
					AND    A.PPK_TYPE = 'P'
					AND    c.ULD_KEY = UPPER(#uldNum#)
					AND    A.STATUS = 'SUBMITTED'
					AND  NOT EXISTS(SELECT NULL FROM EXP_PRE_RCL_HD WHERE PPK_TYPE = 'M' AND ULD_KEY = upper(#uldNum#) AND STATUS = 'SUBMITTED') ORDER BY a.LM_DATE DESC)
			WHERE   ROWNUM = 1)
		WHERE   ROWNUM = 1
		]]>
   	</select>

   	<select id="fetch_issueRcl_mix_awbList"  parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT AWB_NO awbNum FROM EXP_PRE_RCL_BRKDN WHERE PRE_RCL_NO = #pRclNum#
	</select>
	<!--  Changed for QR -->
	<select id="getfblflightinfo_mix" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">		
		SELECT 
			B.CARR_CODE AS carrCode, B.FLT_NO AS flightNum, B.FLT_KEY AS flightKey, TO_CHAR(B.SCH_DATE,'DDMONYY') AS flightDate, 
			NVL(PKG_COMMON.get_flt_eta(B.FLT_KEY, B.SCH_DATE, 'D', 'DD'),PKG_COMMON.get_flt_sta(B.FLT_KEY, B.SCH_DATE, 'D', 'DD'))  AS schTimeDep, C.UNLDG_PT AS unladingPt, TO_CHAR(NVL(EST_DATE, 
			NVL((SELECT CTM_OUT_DATE FROM FLT_OPR_EVENTS WHERE TR_NO=B.TR_NO), SCH_DATE)), 'DDMONYY') || ' ' || LPAD(NVL(EST_TIME, NVL((SELECT CTM_OUT_TIME 
			FROM FLT_OPR_EVENTS WHERE TR_NO=B.TR_NO), SCH_TIME)) , 4, '0') as fbltime,	TO_CHAR(SYSDATE,'DDMONYY HH24MI') AS currentTime 
		FROM 
			EDI_FBL A, FLT_OPR B, EDI_FBL_SHP C 
		WHERE 
			A.FLT_KEY=B.FLT_KEY AND A.FLT_DATE=B.SCH_DATE AND (C.AWB_NO, C.AWB_DATE) IN (SELECT AWB_NO, AWB_DATE FROM EXP_PRE_RCL_BRKDN WHERE PRE_RCL_NO=#PRE_RCL_NUM#) 
			AND A.TR_NO=C.TR_NO AND B.FLT_TYPE='D' AND ROWNUM=1 
	</select>
	
		<select id="findAwbByPreRclNo" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT 
			AWB_NO AS awbNum, pkg_common.get_awb_date(awb_no,'E') AS awbDate, DEST AS awbDest, PCS AS rclPcs, WEIGHT AS rclWt, 
			SUBSTR(AWB_NO, 1, 3) || '-' || SUBSTR(AWB_NO, 4) AS awbNumDisplay, QCP_IND AS selRecord, QCP_GOODS_DESC AS awbContent,spl_code1 as splCode1,spl_code2 as splCode2,spl_code3 as splCode3,spl_code4 as splCode4,spl_code5 as splCode5,spl_code6 as splCode6,spl_code7 as splCode7,spl_code8 as splCode8,spl_code9 as splCode9
		FROM 
			EXP_PRE_RCL_BRKDN 
		WHERE 
			PRE_RCL_NO=#preRCLNo#
	</select>
	
	<select id="getErclTotalAwbWt" parameterClass="java.lang.String" resultClass="java.lang.String">
		 Select sum(WEIGHT) totWt FROM	EXP_PRE_RCL_BRKDN	Where	PRE_RCL_NO = #preRCLNo#
	</select>
	
	<select id="getRclNetWt" parameterClass="java.lang.String" resultClass="java.lang.String">
		 Select sum(NET_WT) rclNtWt From EXP_RCL_DTL	Where	 Rcl_No = #rclNum#
	</select>
	
	<!--  Changed for QR -->
	<select id="findPreRCLNoExistsForUld" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PRE_RCL_HD WHERE PPK_TYPE=#pkgType# AND ULD_KEY=#uldNum# AND STATUS='SUBMITTED'
	</select>
	<!--  Changed for QR -->
	<select id="findPreRCLNoExistsForAwb" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PRE_RCL_HD WHERE PPK_TYPE=#pkgType# AND AWB_NO=#awbNo# AND STATUS='SUBMITTED'
	</select>
	
	<select id="findeRCLWtByPreRCLNo" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT NVL(TTL_WT, 0) FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRCLNo#
	</select>
	
	<select id="findeRCLGrossWtByPreRCLNo" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT NVL(GROSS_WT, 0) FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = #preRCLNo#
	</select>
	
	<select id="findeRCLGrossWtByPreRCLNoPPK" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(GROSS_WT, 0) FROM EXP_PRE_RCL_DTL WHERE PRE_RCL_NO = #PRE_RCL_NUM# AND ULD_KEY = #ULD_KEY#
	</select>
	
	<select id="findeRCLWtByPreRCLNoPPK" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(NET_WT,0) FROM EXP_PRE_RCL_DTL WHERE PRE_RCL_NO = #PRE_RCL_NUM# AND ULD_KEY = #ULD_KEY#
	</select>
	
	<update id="updateeRCLStatus" parameterClass="java.util.HashMap">
		UPDATE EXP_PRE_RCL_HD SET STATUS=#status# WHERE PRE_RCL_NO=#preRCLNo#
	</update>

	<update id="updateeRCLOwnerId" parameterClass="java.util.HashMap">
		update uld_inventory set owner_id = #carr# where ULD_KEY=#uldKey# 
	</update>
	
	<update id="updateRCLBrkDwnSecChk" parameterClass="java.util.HashMap">
		UPDATE EXP_RCL_BRKDN SET SEC_CHECK=#secChkYN# WHERE RCL_NO=#rclNo# AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</update>
	<!--  Changed for QR -->
	<select id="findUldShpInAgtInv" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ASV_INVENTORY WHERE ULD_KEY=#uldKey# AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	<delete id="deleteShpFromAgtInv" parameterClass="java.util.HashMap">
		DELETE FROM ASV_INVENTORY WHERE ULD_KEY=#uldKey# AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</delete>
	<select id="findShpHasEmbargoForIssueRCL" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		<![CDATA[
			SELECT MSG as message, ACT_TYPE as actionType, SPL_CODE1 as splCode1, SPL_CODE2 as splCode2, SPL_CODE3 as splCode3 FROM 
			MAST_OPT_MSG WHERE SECTION='Issue RCL' AND CARR_CODE=#carrCode# AND (DEST=#dest# OR COU_CODE = (SELECT B.CTRY_CODE FROM MAST_ARPT A, MAST_CITY B 
			WHERE B.CODE=A.CITY_CODE AND A.CODE=#dest#))
			AND sysdate BETWEEN eff_date AND ( case when EFF_DATE_TO is not null then  (EFF_DATE_TO + 1)  else (sysdate + 1)  end)
			AND SUSPEND_IND='N' and nvl(not_allow_split_carr,'N') = 'N'
		]]>
			<!-- <isEmpty property="splCode1">
				<isEmpty property="splCode2">
					<isEmpty property="splCode3">
						<isEmpty property="splCode4">
							<isEmpty property="splCode5">
								<isEmpty property="splCode6">
									<isEmpty property="splCode7">
										<isEmpty property="splCode8">
											<isEmpty property="splCode9">
												AND (SPL_CODE1 IS NULL AND SPL_CODE2 IS NULL AND SPL_CODE3 IS NULL)
											</isEmpty>
										</isEmpty>
									</isEmpty>
								</isEmpty>
							</isEmpty>
						</isEmpty>
					</isEmpty>					
				</isEmpty>	
			</isEmpty>
			<isNotEmpty property="splCode1">
				AND (SPL_CODE1=#splCode1# OR SPL_CODE2=#splCode1# OR SPL_CODE3=#splCode1#)
			</isNotEmpty>
			<isNotEmpty property="splCode2">
				AND (SPL_CODE1=#splCode2# OR SPL_CODE2=#splCode2# OR SPL_CODE3=#splCode2#)
			</isNotEmpty>
			<isNotEmpty property="splCode3">
				AND (SPL_CODE1=#splCode3# OR SPL_CODE2=#splCode3# OR SPL_CODE3=#splCode3#)
			</isNotEmpty>
			<isNotEmpty property="splCode4">
				AND (SPL_CODE1=#splCode4# OR SPL_CODE2=#splCode4# OR SPL_CODE3=#splCode4#)
			</isNotEmpty>
			<isNotEmpty property="splCode5">
				AND (SPL_CODE1=#splCode5# OR SPL_CODE2=#splCode5# OR SPL_CODE3=#splCode5#)
			</isNotEmpty>
			<isNotEmpty property="splCode6">
				AND (SPL_CODE1=#splCode6# OR SPL_CODE2=#splCode6# OR SPL_CODE3=#splCode6#)
			</isNotEmpty>
			<isNotEmpty property="splCode7">
				AND (SPL_CODE1=#splCode7# OR SPL_CODE2=#splCode7# OR SPL_CODE3=#splCode7#)
			</isNotEmpty>
			<isNotEmpty property="splCode8">
				AND (SPL_CODE1=#splCode8# OR SPL_CODE2=#splCode8# OR SPL_CODE3=#splCode8#)
			</isNotEmpty>
			<isNotEmpty property="splCode9">
				AND (SPL_CODE1=#splCode9# OR SPL_CODE2=#splCode9# OR SPL_CODE3=#splCode9#)
			</isNotEmpty>  -->
	</select>
	<!--  Changed for QR -->
	<select id="findLspUldExistsInAgtInv" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ASV_INVENTORY 
		<isNotEmpty property="lspNo">
			WHERE LSP_NO=#lspNo#
		</isNotEmpty>
		<isNotEmpty property="uldKey">
			WHERE ULD_KEY=#uldKey#
		</isNotEmpty>
	</select>
	<update id="updateAgtIndInUldInventory" parameterClass="java.util.HashMap">
		UPDATE ULD_INVENTORY SET ASV_INV=#agtInd# WHERE ULD_KEY=#uldKey#
	</update>
	<select id="findStatusOfRCL" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT STATUS FROM EXP_RCL_HD WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND PPK_TYPE=#pkgType# 
		<isNotEmpty property="preRCLNo">
			AND PRE_RCL_NO=#preRCLNo#
		</isNotEmpty>
	</select>
	<!--  Changed for QR -->
	<select id="findPcWtMatchWitAgtInv" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ASV_INVENTORY WHERE ULD_KEY=#uldKey# AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND LOCN_PCS=#pcs# AND LOCN_WT=#wt#
	</select>
	<select id="findpreRCLUldMnfstDtls" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT ULD_KEY as uldNum, AWB_NO as awbNum, HAWB_NO as hawbNo, PC as rclPcs, WT as rclWt FROM EXP_PRE_RCL_ULD_MANF WHERE PRE_RCL_NO=#preRCLNo#
	</select>
	<select id="findpreRCLUldMnfstDtlsForIns" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT ULD_KEY as uldNum, AWB_NO as awbNum, HAWB_NO as hawbNo, PC as rclPcs, WT as rclWt FROM EXP_PRE_RCL_ULD_MANF WHERE PRE_RCL_NO=#preRclNo# and ULD_KEY=#uldKey#
	</select>
	<insert id="insertRclUldMnfstDtls" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		INSERT INTO EXP_RCL_ULD_MANF 
			(RCL_NO, ULD_KEY, AWB_NO, HAWB_NO, PC, WT, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE) 
		VALUES 
			(#rclNum#, #uldNum#, #awbNum#, #hawbNo#, #rclPcs#, #rclWt#, #crUserID#, SYSDATE, #lmUserID#, SYSDATE)
	</insert>
	<!--  Changed for QR -->
	<select id="findAgtCertifiedStatus" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM CUST_COMPANY WHERE CODE=#code# AND CERTIFIED_YN='Y'
	</select>
	<select id="findAuthRepIdByAutRepName" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT AUTH_REP_ID FROM CUST_AGENT_AUTH_REP WHERE AUTH_REP_NAME=#authRepName#
	</select>
	<select id="findAuthRepNameByAutRepId" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT AUTH_REP_NAME FROM CUST_AGENT_AUTH_REP WHERE AUTH_REP_ID=#authRepId#
	</select>
	<update id="updateLSPInventory" parameterClass="java.util.HashMap">
		UPDATE LSP_INVENTORY SET 
			EMPTY_FLG=#emptyFlag#, TARGET=#targetLocn#, LOC_CODE=#locCode#, STRG_DATE=SYSDATE, STATUS=#status#, CR_USER_ID=#userid#, CR_DATE=SYSDATE, LM_USER_ID=#userid#, 
			LM_DATE=SYSDATE, REF_TR_TYPE=#trType#, REF_TR_NO=#trNo#, REF_TR_EVENT=#trEvent#, REF_TR_DATE=SYSDATE, REF_DOC_LINE_NO=#docLineNo#, 
			REF_MOV_FROM=#targetLocn#, REF_LOC_FROM=#locCode# 
		WHERE LSP_NO=#lspNo#
	</update>
	<select id="findLspInventoryDtls" parameterClass="java.lang.String" resultClass="java.util.HashMap">
		SELECT 
			LSP_NO, EMPTY_FLG, HGT_CLASS, LOC_CODE, STRG_DATE, TO_CHAR(RTRV_DATE, 'DDMONYY HH:MI:SS') AS RTRV_DATE, LOCKED, STATUS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, 
			REF_TR_NO, REF_TR_TYPE, REF_TR_EVENT, REF_TR_DATE, REF_DOC_LINE_NO, REF_MOV_FROM, REF_LOC_FROM, REF_RMK, TARGET, REF_WT, LSP_TYPE, LOCK_RQS  
		FROM 
			LSP_INVENTORY 
		WHERE 
			LSP_NO=#lspNo#
	</select>
	<insert id="insertLspMov" parameterClass="java.util.HashMap">
		INSERT INTO LSP_MOV
			(SEQ_NO, TR_TYPE, MOV_DATE, DOC_LINE_NO, LSP_NO, ORG_LOC_CODE, DEST_LOC_CODE, STRG_DATE, RTRV_DATE, STATUS, CR_USER_ID, CR_DATE, 
			LM_USER_ID, LM_DATE, EVENT_ID) 
		VALUES 
			(LSP_MOV_SEQ.NEXTVAL, #trType#, SYSDATE, #docLineNo#, #lspNo#, #locCode#, #locCode#, SYSDATE, TO_DATE(#rtrvDate#, 'DDMONYY HH:MI:SS'), 
			#status#, #userid#, SYSDATE, #userid#, SYSDATE, #eventId#)
	</insert>
	<update id="updateRCLHeaderTripId" parameterClass="java.util.HashMap">
		UPDATE EXP_RCL_HD SET TRIP_ID=#tripId# WHERE RCL_NO=#rclNo#
	</update>
	<!--  Changed for QR -->
	<select id="findPkgTypeByUldNo" parameterClass="java.lang.String" resultClass="java.util.HashMap">
		SELECT * FROM 
			(SELECT A.PRE_RCL_NO as PRERCLNO, A.PPK_TYPE as PKGTYPE FROM EXP_PRE_RCL_HD A LEFT JOIN EXP_PRE_RCL_DTL B ON B.PRE_RCL_NO=A.PRE_RCL_NO 
			WHERE (A.ULD_KEY=#uldNo# OR B.ULD_KEY=#uldNo#) AND PPK_TYPE IN ('P', 'M') 
			AND A.STATUS='SUBMITTED'   
			ORDER BY A.PRE_RCL_NO DESC) WHERE ROWNUM=1
	</select>
	<!--  Changed for QR -->
	<select id="findValuableShipment" parameterClass="cargo.cms.export.bo.IssueRCLDetailBO" resultClass="java.lang.Integer">
		SELECT 
			COUNT(1) 
		FROM 
			CUST_AIRL_SPL_CODE 
		WHERE 
			SPL_TYPE='SPL_VAL' AND CARR_CODE=#carrCode# AND (SPL_CODE=#splCode1# OR SPL_CODE=#splCode2# OR SPL_CODE=#splCode3# 
			OR SPL_CODE=#splCode4# OR SPL_CODE=#splCode5# OR SPL_CODE=#splCode6# OR SPL_CODE=#splCode7# OR SPL_CODE=#splCode8# 
			OR SPL_CODE=#splCode9#)
	</select>
	
	<select id="checkAWBcarrValidation" parameterClass="cargo.cms.export.bo.IssueRCLBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM DUAL WHERE (
		  FUN_GET_PARENT_CARR(NVL((SELECT CARR_CODE FROM MAST_AWB_PREFIX WHERE CODE=#awbPrefix#),'')) = FUN_GET_PARENT_CARR(#carrCode#)
 		)	
	</select>

<select id="getCbxCarrConfigCnt" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_CARRIER WHERE CODE= #carrCode# and NVL(SOUTHBND_TRUCK_YN,'N') ='Y'
	</select>
	<select id="findeRCLGrossWtPPK" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT GROSS_WT FROM EXP_PRE_RCL_DTL WHERE PRE_RCL_NO=#preRCLNo# AND ULD_KEY=#uldKey#
	</select>
	<select id="findCustNumByCustName" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT CODE AS custNum FROM CUST_COMPANY WHERE CODE_DESC=#custName#
	</select>
	<select id="findCustNameByCustNum" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT CODE_DESC AS custNum FROM CUST_COMPANY WHERE CODE=#custNum#
	</select>
	<select id="sqlGetLocCodeForUld" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey#
	</select>
	<select id="findPPKAwbByPreRCLNo" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.RCLSearchBO">
		SELECT * FROM (SELECT AWB_NO AS awbNum, TO_CHAR(AWB_DATE, 'DDMONYY') AS awbDate FROM EXP_PRE_RCL_HD WHERE PPK_TYPE='P' 
		AND PRE_RCL_NO=#preRCLNo# AND (STATUS!='EXPIRED' AND STATUS!='OUTSTANDING') ORDER BY PRE_RCL_NO) WHERE ROWNUM=1
	</select>
	<select id="findLSPTareWt" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT NVL(TARE_WT, 0) FROM MAST_CSD WHERE CODE=#lspNo#
	</select>
	<update id="updateAgtInDocRcvd" parameterClass="java.util.HashMap">
		UPDATE EXP_DOC_RECD SET AGENT_ID=#agtCode#, AGENT_NAME=#agtName# WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</update>
	<select id="findSuperUrgentCargoExists" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_SUPER_URGENT WHERE ULD_KEY=#uldKey# AND NVL(AWB_NO, #awbNo#)=#awbNo# AND TRUCK=#truckNo# AND STATUS='OPEN'
	</select>
	<update id="updateCloseSuperUrgent" parameterClass="java.util.HashMap">
		UPDATE EXP_SUPER_URGENT SET STATUS='CLOSED' WHERE ULD_KEY=#uldKey# AND NVL(AWB_NO, #awbNo#)=#awbNo# AND TRUCK=#truckNo#
	</update>
	<select id="sqlIsSuperUrgntCgoAvailableForTrk" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		<![CDATA[
			SELECT 
				COUNT(1) 
			FROM 
				EXP_SUPER_URGENT 
			WHERE 
				TRUCK=#truckNo# AND ((TO_CHAR(EST_TIME, 'DDMONYY HH24MI') >= TO_CHAR(SYSDATE - #estTime#/1440, 'DDMONYY HH24MI')) 
				AND (TO_CHAR(EST_TIME, 'DDMONYY HH24MI') <= TO_CHAR(SYSDATE + #estTime#/1440, 'DDMONYY HH24MI')))
		]]>
	</select>
	<select id="sqlRCLFetchSuperUrgCrgoFltDtls" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT FLT_KEY, TO_CHAR(FLT_DATE, 'DDMONYY') as FLT_DATE, OFF_POINT UNLDGPT FROM EXP_SUPER_URGENT WHERE ULD_KEY=#uldKey# AND NVL(AWB_NO, #awbNo#)=#awbNo# AND TRUCK=#truckNo# AND STATUS='OPEN'
	</select>
	<insert id="insertLSPinLSPInventory" parameterClass="java.util.HashMap">
	INSERT INTO 
		LSP_INVENTORY (LSP_NO, LOC_CODE, STRG_DATE, STATUS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, REF_TR_NO, REF_TR_TYPE, REF_TR_EVENT,
		REF_TR_DATE, REF_DOC_LINE_NO, LSP_TYPE, TARGET, EMPTY_FLG) 
	VALUES 
		(#lspNo#, #locCode#, SYSDATE, 'N', #userID#, SYSDATE, #userID#, SYSDATE, #trNo#, #trType#, #trEvent#, SYSDATE, #docLineNo#, 
		#lspType#, #targetLocn#, #emptyFlag#)
	</insert>
	<select id="findSHCLockStatus" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="java.lang.Integer">
		SELECT 
			COUNT(1) 
		FROM 
			MAST_SPL_HAND_CODE 
		WHERE 
			LOCK_YN='Y' AND (CODE=#splCode1# OR CODE=#splCode2# OR CODE=#splCode3# OR CODE=#splCode4# OR CODE=#splCode5# OR CODE=#splCode6# 
			OR CODE=#splCode7# OR CODE=#splCode8# OR CODE=#splCode9#)
	</select>
	<update id="updateSHCLockIndInAWB" parameterClass="java.util.HashMap">
		UPDATE AWB SET SHCLOCK_IND='Y',FINALLOCK_IND = 'Y' WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</update>
	<update id="updateDCLockIndInAWB" parameterClass="java.util.HashMap">
		UPDATE AWB SET DCLOCK_IND='Y',FINALLOCK_IND = 'Y' WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</update>
	<select id="sqlFetchUldLspByAwbNo" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(ULD_KEY, LSP_NO) uldLsp FROM AWB_INVENTORY WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	<update id="sqlUpdateLockIndUld" parameterClass="java.lang.String">
   	 	UPDATE ULD_INVENTORY SET LOCK_RQS='Y' WHERE ULD_KEY= #uldKey#
   	 </update>
   	 <update id="sqlUpdateLockIndCsd" parameterClass="java.lang.String">
   	 	UPDATE LSP_INVENTORY SET LOCK_RQS='Y' WHERE LSP_NO= #lspNo#   	 
   	</update> 

   	
	<select id="fetchLspRefWt" parameterClass="java.lang.String" resultClass="java.lang.String">
		select to_char(REF_WT) from lsp_inventory  where lsp_no= #lspNum#  AND NVL(BINENTRY_MSG_RCVD_YN, 'N') = 'Y'
	</select>
	
	<select id="fetchUldRefWt" parameterClass="java.lang.String" resultClass="java.lang.String">
		select to_char(REF_WT) from uld_inventory  where uld_key = #uldNum# AND NVL(ULDENTRY_MSG_RCVD_YN, 'N') = 'Y'
	</select>
	
        <update id="updateCargoRcvdLocnDtl" parameterClass="java.util.HashMap">
		UPDATE exp_cargo_receive_record SET RCL_NO=#rclNo# , REF_WT = #refWt# WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND TR_NO=#trNo#
	</update>
	
	<update id="updateVoidCargoRcvdLocnDtl" parameterClass="java.lang.String">
		UPDATE exp_cargo_receive_record SET RCL_NO='', REF_WT = '', ENDORSED_BY = '', ENDORSED_DATE = '' WHERE TR_NO IN (SELECT TR_NO FROM exp_cargo_receive_record WHERE RCL_NO=#PARAM#)
	</update> 
   	<!--  Changed for QR -->
	<select id="findULDProfile" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_TYPE_CARR_TARE_WT WHERE ((ULD_CARR=#fltPfx# AND ULD_TYPE=#uldBtNo# AND UPPER(#uldNo#) BETWEEN ULD_NO_FROM and ULD_NO_TO)
		 OR (exists (select 1 from mast_uld_type where code=#uldBtNo# and bt_ind='Y')))
	</select>
	<!--  Changed for QR -->
		<select id="sqlCheckIfDiffAccptMode" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		<![CDATA[
						SELECT SUM(CNT) FROM (
			SELECT COUNT(1) CNT FROM EXP_RCL_HD WHERE AWB_NO      = #awbNo#
			AND AWB_DATE      =TO_DATE(#awbDate#, 'DDMONYY')
			AND ACCPT_MODE   <> #accptMode#
			AND void_date    IS NULL
			AND void_user_id IS NULL
			UNION
			SELECT COUNT(1) CNT
			FROM EXP_RCL_HD
			WHERE ACCPT_MODE <> #accptMode#
			AND void_date    IS NULL
			AND void_user_id IS NULL
			AND RCL_NO       IN
			  (SELECT RCL_NO
			  FROM EXP_RCL_BRKDN
			  WHERE AWB_NO= #awbNo#
			  AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
			  ) 
			UNION
			SELECT COUNT(1) CNT
			FROM TRF_ACCEPT_HD
			WHERE AWB_NO      = #awbNo#
			AND AWB_DATE      =TO_DATE(#awbDate#, 'DDMONYY')
			AND ACCPT_MODE   <> #accptMode#
			AND void_date    IS NULL
			AND void_user_id IS NULL
			UNION
			SELECT COUNT(1) CNT
			FROM TRF_ACCEPT_HD 
			WHERE ACCPT_MODE <> #accptMode#
			AND void_date    IS NULL
			AND void_user_id IS NULL
			AND TRF_NO       IN
			  (SELECT TRF_NO
			  FROM TRF_ACCEPT_BRKDN
			  WHERE AWB_NO= #awbNo#
			  AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
			  ))
		]]>
	</select>
	<!--  Changed for QR -->
	<select id="sqlIsRCLPpkPcWtEqlToAwbPcWt" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT FLTEY, FLTDATE,UNLDGPT,ESTDATETIME FROM ( SELECT A.FLT_KEY FLTEY, TO_CHAR(A.FLT_DATE, 'DDMONYY') FLTDATE,A.UNLDG_PT UNLDGPT, 
		 TO_DATE((NVL(B.EST_DATE, B.SCH_DATE) || ' ' || TO_CHAR(NVL(B.EST_TIME, B.SCH_TIME), '0000')), 'DD-MON-YY HH24MI') ESTDATETIME	 FROM EXP_PMANIFEST_AWB A, FLT_OPR B
			WHERE A.FLT_KEY = B.FLT_KEY And A.FLT_DATE = B.SCH_DATE AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
			 AND BULK_PCS = #pcs# AND BULK_WT = #wt# ORDER BY ESTDATETIME ASC) WHERE ROWNUM = 1
	</select>
	<select id="sqlFetchFltDtlsForPmanAwb" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT FLT_KEY FLTKEY, TO_CHAR(FLT_DATE, 'DDMONYY') FLTDATE, UNLDG_PT UNLDGPT FROM EXP_PMANIFEST_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	<!--  Changed for QR -->
	<select id="sqlIsUldForPpkOrMix" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE ((PPK_IND='Y' OR MIX_PPK_IND='Y') and (rebuild_yn = 'N' AND topup_yn = 'N')) and owned_inv='Y' AND ULD_KEY=#uldKey#
	</select>
	<update id="updateReadyDispForExpPmanUld" parameterClass="java.util.HashMap">
		UPDATE EXP_PMANIFEST_ULD SET READY_DISP='Y',READY_WH='Y',
		READY_DISP_DATE = SYSDATE,READY_DISP_TIME = TO_CHAR(SYSDATE,'HH24MI')
		WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND PPK_TYPE=#ppkType#
	</update>
	<!--  Changed for QR -->
	<select id="sqlIsAwbOfTranshipment" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND AWB_TYPE='T' AND AWB_CLOSED_YN='N'
	</select>
	
	
	<select id="sqlIsAwbPremanifested" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(1) FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND AWB_TYPE='T' AND PMAN_PCS > 0
		]]>
	</select>
	
	<select id="sqlIsAwbhasImportCAR" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
			SELECT COUNT(1) FROM IMP_CAR_SHP  WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	
	<select id="sqlcarrfromImportCAR" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
			SELECT COUNT(1) FROM IMP_CAR_SHP WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND carr_code != #carrier# AND CAR_CREATED='Y'
	</select>
	
	<!--  Changed for QR -->
	<select id="sqlIsAwbOfTranshipmentByUld" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT 
			COUNT(1) 
		FROM 
			EXP_PRE_RCL_BRKDN A, AWB B 
		WHERE 
			B.AWB_NO=A.AWB_NO AND B.AWB_DATE=A.AWB_DATE AND B.AWB_TYPE='T' AND B.AWB_CLOSED_YN='N' AND 
			A.PRE_RCL_NO=#preRclNo#
	</select>
	<!--  Changed for QR -->
	<select id="sqlFetcheRclListHht" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT 
   			A.PRE_RCL_NO AS preRCLNum, A.TTL_PCS AS rclPcs, A.TTL_WT AS rclWt, CASE WHEN B.PRE_RCL_NO IS NULL OR 
   			B.STATUS='V' THEN 'N' ELSE 'Y' END AS preRCLYN, A.AWB_NO as awbNum, B.STATUS as status 
   		FROM 
   			EXP_PRE_RCL_HD A LEFT JOIN EXP_RCL_HD B ON B.PRE_RCL_NO=A.PRE_RCL_NO AND B.PPK_TYPE=A.PPK_TYPE 
   		WHERE 
   			(B.PRE_RCL_NO IS NULL OR (B.PRE_RCL_NO IS NOT NULL AND B.STATUS IN ('V', 'I'))) 
   			<isNotEmpty property="uldKey">
   				AND A.ULD_KEY=#uldKey#
   			</isNotEmpty>
   			 <isNotEmpty property="preRCLNo">
   				AND A.PRE_RCL_NO=#preRCLNo#
   			</isNotEmpty>
		UNION
		SELECT 
   			C.PRE_RCL_NO AS preRCLNum, C.TTL_PCS AS rclPcs, C.TTL_WT AS rclWt, CASE WHEN C.PRE_RCL_NO IS NULL OR 
   			C.STATUS='V' THEN 'N' ELSE 'Y' END AS preRCLYN, C.AWB_NO as awbNum, C.STATUS as status 
   		FROM 
   			EXP_PRE_RCL_DTL A, EXP_PRE_RCL_HD C LEFT JOIN EXP_RCL_HD B ON B.PRE_RCL_NO=C.PRE_RCL_NO AND B.PPK_TYPE=C.PPK_TYPE 
   		WHERE 
     		C.PRE_RCL_NO=A.PRE_RCL_NO AND (B.PRE_RCL_NO IS NULL OR (B.PRE_RCL_NO IS NOT NULL AND B.STATUS IN ('V', 'I'))) 
     		<isNotEmpty property="uldKey">
   				AND A.ULD_KEY=#uldKey# 
   			</isNotEmpty>
   			<isNotEmpty property="preRCLNo">
          		AND C.PRE_RCL_NO=#preRCLNo#
          	</isNotEmpty>
	</select>
	<!--  Changed for QR -->
	<select id="sqlFetchPreRclCountByAwb" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="java.lang.Integer">
		<!-- SELECT COUNT(1) FROM EXP_PRE_RCL_HD A, EXP_PRE_RCL_DTL B WHERE B.PRE_RCL_NO=A.PRE_RCL_NO AND A.PRE_RCL_NO=#preRCLNum# -->		
		SELECT ((SELECT COUNT(1) FROM EXP_RCL_HD A, EXP_RCL_DTL B WHERE B.RCL_NO=A.RCL_NO AND A.PRE_RCL_NO=#preRCLNum# AND A.PPK_TYPE='P' AND A.STATUS IN ('S','P'))-
		(SELECT COUNT(1) FROM EXP_PRE_RCL_HD A, EXP_PRE_RCL_DTL B WHERE B.PRE_RCL_NO=A.PRE_RCL_NO AND A.PRE_RCL_NO=#preRCLNum# AND A.PPK_TYPE='P')) AS cnt FROM DUAL
	</select>
	<!--  Changed for QR -->
	<select id="sqlFetchUldKeySavedForPpk" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_RCL_HD WHERE PRE_RCL_NO=#preRCLNum# AND ULD_KEY=#uldKey# AND PPK_TYPE='P'
	</select>
	<select id="isUldInAgentInventory"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="java.lang.Integer">
    	SELECT COUNT(1) FROM ASV_INVENTORY WHERE ULD_KEY=#uldNum#
    </select>
    <!--  Changed for QR -->
	<select id="fetchFlightForULDAssignment" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.CreateULDBO">
		SELECT fltKey,fltDate,awbNo,awbDate,unldg_pt,carrCode,estDateTime FROM (
		SELECT 
			B.FLT_KEY AS fltKey, TO_CHAR(B.SCH_DATE, 'DDMONYY') as fltDate, A.AWB_NO AS awbNo, TO_CHAR(A.AWB_DATE, 'DDMONYY') AS awbDate, A.UNLDG_PT AS unldg_pt, 
			B.CARR_CODE AS carrCode,
			TO_DATE((NVL(B.EST_DATE, B.SCH_DATE) || ' ' || TO_CHAR(NVL(B.EST_TIME, B.SCH_TIME), '0000')), 'DD-MON-YY HH24MI') estDateTime			
		FROM 
			EXP_PMANIFEST_AWB A, FLT_OPR B, FLT_OPR_LEG C, FLT_OPR_EVENTS D 
		WHERE 
			A.FLT_KEY=B.FLT_KEY AND A.FLT_DATE=B.SCH_DATE AND B.TR_NO=C.TR_NO AND B.TR_NO=D.TR_NO AND C.AUTO_ASSGN_ULD='Y' AND A.UNLDG_PT=C.OFF_POINT AND D.CTM_OUT_DATE IS NULL 
			AND TO_DATE((NVL(B.EST_DATE, B.SCH_DATE) || ' ' || TO_CHAR(NVL(B.EST_TIME, B.SCH_TIME), '0000')), 'DD-MON-YY HH24MI') BETWEEN SYSDATE AND 
			TO_DATE(TO_CHAR(SYSDATE + (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE=DECODE(B.CGO_ACFT_TYPE, 'PSR', 'ULD_ASGMNT_TIME_PAX', 'FRE', 
			'ULD_ASGMNT_TIME_FRTR', 'COM', 'ULD_ASGMNT_TIME_COMBI', 'ULD_ASGMNT_TIME_OTHR'))/24, 'DDMONYY HH24MI'), 'DDMONYY HH24MI') AND 
			A.AWB_NO=#awbNo# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') ORDER BY estDateTime ASC) WHERE ROWNUM = 1
	</select>	
	
	<select id="getOldAWBList" parameterClass="cargo.cms.export.bo.CreateULDBO" resultClass="cargo.cms.export.bo.CreateULDBO">
	select awb_no as awbNo,TO_CHAR(awb_date, 'DDMONYY') as awbDate from exp_pmanifest_uld_awb where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldKey# and unldg_pt=#unldg_pt#
	</select>
	<select id = "chkDCDetailsExists" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
		Select Count(1) From Cst_Dc_Dtl Where  AWB_NO = #awbNo# AND AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY') AND 
			HAWB_NO = '000000000000000000' AND DUT_TYPE = 'P' AND SHPM_TYPE = 'E' 
	</select>
	
	<insert id="insertCstDcDtl" parameterClass="java.util.HashMap">
		INSERT INTO CST_DC_DTL
			(SHPM_TYPE, FLT_KEY, FLT_DATE, AWB_NO, AWB_DATE, HAWB_NO, DUT_TYPE, LM_USER_ID, LM_DATE, LM_VER) 
		VALUES
			('E', #fltKey#, TO_DATE(#fltDate#, 'DDMONYY'), #awbNo#, TO_DATE(#awbDate#, 'DDMONYY'), '000000000000000000', 'P', #userId#, SYSDATE, '1')
	</insert>
	<insert id="insertCstCodeDtl" parameterClass="java.util.HashMap">
		INSERT INTO CST_CODE_DTL
			(FLT_TYPE, FLT_KEY, FLT_DATE, AWB_NO, AWB_DATE, HAWB_NO, DUT_CODE, DUT_QTY, DUT_UNIT, DUT_PCS, DUT_RMK, LM_USER_ID, LM_DATE, LM_VER, DC_COMP) 
		VALUES
			('E', #fltKey#, TO_DATE(#fltDate#, 'DDMONYY'), #awbNo#, TO_DATE(#awbDate#, 'DDMONYY'), '000000000000000000', 
			(select code as func from mast_code_dtl where code_type = 'DC_CODE' AND ROWNUM = 1), #rclPcs#, 'LIT', #rclPcs#, 
			#rclRmk#, #userId#, SYSDATE, '1', 'N')
	</insert>
	<update id="updateSecChkInRclBrkdwn" parameterClass="java.lang.String">
		UPDATE EXP_RCL_BRKDN SET SEC_CHECK='Y' WHERE RCL_NO=#rclNo#
	</update>
	<select id="isUldInAgtHoldingList" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey# AND AGENT_ID=(SELECT CUST_NO FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRclNo#)
	</select>
	<select id="isRclBulkStsPending" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_RCL_HD WHERE AWB_NO=#awbNo# AND PPK_TYPE='B' AND STATUS IN ('P', 'I')
	</select>
	<select id="fetchWScaleIdAndPrtIdByLoc" parameterClass="java.lang.String" resultClass="java.util.HashMap">
		SELECT MAST_WH_LOC.SCALE_ID SCALE_ID, PRINTER_ID, SCDC_PRINTER_ID, SCALE_NAME FROM MAST_WH_LOC LEFT JOIN WEIGHING_SCALE_DET ON WEIGHING_SCALE_DET.SCALE_ID = MAST_WH_LOC.SCALE_ID WHERE CODE=#locCode#  AND ROWNUM = 1
	</select>
	<select id="fetchAgtDtlsByAwb" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT AGENT_NAME, AGENT_CODE FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	<update id="updateUldInvFltDetailsByUld" parameterClass="java.lang.String">
		UPDATE ULD_INVENTORY SET FLT_NO='', FLT_DATE='', FLT_KEY='', FLT_TYPE='' WHERE ULD_KEY=#uldKey#
	</update>
	<update id="updateResrvFlgInUldInventory" parameterClass="java.lang.String">
		UPDATE ULD_INVENTORY SET RESV_FLG = 'N' WHERE ULD_KEY=#uldKey#
	</update>
	<update id="updateEndrDcDtlsForMix" parameterClass="java.util.HashMap">
		UPDATE EXP_RCL_BRKDN SET ENDORSED_DC_BY=#username#, ENDORSED_DC_DATE=SYSDATE WHERE RCL_NO=#rclNo#
	</update>
		<!-- Transition Related -->
	<select id="fetchCTOByCarrierCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT 
			TRN_SETUP_CARR.EXP_CTO 
		FROM 
			TRN_SETUP, TRN_SETUP_CARR 
		WHERE 
			TRN_SETUP_CARR.TR_NO=TRN_SETUP.TR_NO AND TRN_SETUP_CARR.CARR_CODE=#carrCode# AND TO_DATE(#fltDate#, 'DDMONYY') 
			BETWEEN TRN_SETUP.PERIOD_FRM AND TRN_SETUP.PERIOD_TO
	</select>	
	<select id="fetchCTOBySHC" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT 
			TRN_SETUP_SHC.EXP_TRMNL 
		FROM 
			TRN_SETUP, TRN_SETUP_SHC 
		WHERE 
			TRN_SETUP_SHC.TR_NO=TRN_SETUP.TR_NO AND TRUNC(SYSDATE) BETWEEN TRN_SETUP.PERIOD_FRM AND TRN_SETUP.PERIOD_TO 
			AND (TRN_SETUP_SHC.SHC=#splCode1# OR TRN_SETUP_SHC.SHC=#splCode2# OR TRN_SETUP_SHC.SHC=#splCode3# OR TRN_SETUP_SHC.SHC=#splCode4# 
			OR TRN_SETUP_SHC.SHC=#splCode5# OR TRN_SETUP_SHC.SHC=#splCode6# OR TRN_SETUP_SHC.SHC=#splCode7# OR TRN_SETUP_SHC.SHC=#splCode8# OR 
			TRN_SETUP_SHC.SHC=#splCode9#)
	</select>
	
	<select id="fetchContrCodeForPPKCargoRCL" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT CONTR_CODE FROM EXP_PRE_RCL_DTL WHERE PRE_RCL_NO=#preRCLNo# AND ULD_KEY=#uldKey#
	</select>
	
	<select id="fetchContrCodeForMixCargoRCL" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT CONTR_CODE FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRCLNo# AND ULD_KEY=#uldKey#
	</select>
	<!-- Issue RCL :: Anup :: Ends -->
	
	<!-- ##################### List Transfer Cargo  : Start (Yugandhar) ########################################-->	
     <select id = "listtransfersearchbydate" parameterClass="cargo.cms.export.bo.ListTransferCargoSearchBO"  resultClass="cargo.cms.export.bo.ListTransferCargoBO">
   SELECT * FROM (
	SELECT * FROM(select 'Normal' as type,rcl_no as rclNo, rcl_no as rclNo1, substr(awb_no, 1, 3)||'-'||substr(awb_no, 4) as awbNoDisplay, awb_no as awbNo, ppk_type as pkgType,
	uld_key as uldNo, ref_trm_no as trmNo, trans_carr_code trnsfCarr, carr_code as carr, rcl_pcs as pc, rcl_wt as wt, to_char(rcl_date, 'DDMONYY HH24:MI') as recvDate,
	pkg_exp_val.get_exp_awb_cc_code(awb_no) ccCode,
	decode(status, 'V', 'Y', 'N') as voidInd, decode(accpt_mode,'LIT', 'Local Inter-Terminal', 'TIT', 'Transhipment Inter Terminal', 'LDM', 'Dummy') as transType
	from   exp_rcl_hd where  to_char(rcl_date, 'DDMONYY') between to_date(#dateFrom#, 'DDMONYY') and to_date(#dateTo#, 'DDMONYY')
	and    accpt_mode in ('LIT', 'TIT', 'LDM') and nvl(tarmac_yn,'N') = 'N'
  <dynamic>
			<isNotEmpty property="carrCode">
				and carr_code=#carrCode#			
			</isNotEmpty>
		</dynamic>
		<isNotEmpty property="loginCarrier">
				   AND ( carr_code = #loginCarrier#
                        OR  carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
		</isNotEmpty>
  UNION ALL
 select 'Transhipment' as type,HD.TRF_NO as rclNo, HD.TRF_NO as rclNo1, substr(HD.awb_no, 1, 3)||'-'||substr(HD.awb_no, 4) as awbNoDisplay, HD.awb_no as awbNo, HD.ppk_type as pkgType,
	HD.uld_key as uldNo, HD.ref_trm_no as trmNo, HD.trans_carr_code trnsfCarr, HD.carr_code as carr, HD.rcl_pcs as pc, HD.rcl_wt as wt, to_char(HD.TRF_DATE, 'DDMONYY HH24:MI') as recvDate,
	pkg_exp_val.get_exp_awb_cc_code(awb_no) ccCode,
	decode(HD.status, 'V', 'Y', 'N') as voidInd, decode(HD.accpt_mode,'LIT', 'Local Inter-Terminal', 'TIT', 'Transhipment Inter Terminal', 'LDM', 'Dummy') as transType
	from   TRF_ACCEPT_HD HD where  to_char(TRF_DATE, 'DDMONYY') between to_date(#dateFrom#, 'DDMONYY') and to_date(#dateTo#, 'DDMONYY')
	and    accpt_mode in ('LIT', 'TIT', 'LDM') and nvl(tarmac_yn,'N') = 'N'
  AND NOT EXISTS (SELECT NULL FROM trf_accept_hawb HAWB WHERE HAWB.TRF_NO = HD.TRF_NO)
  <dynamic>
			<isNotEmpty property="carrCode">
				and HD.carr_code=#carrCode#			
			</isNotEmpty>
		</dynamic>
		<isNotEmpty property="loginCarrier">
				   AND ( HD.carr_code = #loginCarrier#
                        OR  HD.carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
		</isNotEmpty>
		UNION ALL
  select 'TransitMail' as type,HD.TRF_NO as rclNo, HD.TRF_NO as rclNo1, substr(HD.awb_no, 1, 3)||'-'||substr(HD.awb_no, 4) as awbNoDisplay, HD.awb_no as awbNo, HD.ppk_type as pkgType,
	HD.uld_key as uldNo, HD.ref_trm_no as trmNo, HD.trans_carr_code trnsfCarr, HD.carr_code as carr, HD.rcl_pcs as pc, HD.rcl_wt as wt, to_char(HD.TRF_DATE, 'DDMONYY HH24:MI') as recvDate,
	pkg_exp_val.get_exp_awb_cc_code(awb_no) ccCode,
	decode(HD.status, 'V', 'Y', 'N') as voidInd, decode(HD.accpt_mode,'LIT', 'Local Inter-Terminal', 'TIT', 'Transhipment Inter Terminal', 'LDM', 'Dummy') as transType
	from   TRF_ACCEPT_HD HD where  to_char(TRF_DATE, 'DDMONYY') between to_date(#dateFrom#, 'DDMONYY') and to_date(#dateTo#, 'DDMONYY')
	and    accpt_mode in ('LIT', 'TIT', 'LDM') and nvl(tarmac_yn,'N') = 'N'
    AND EXISTS (SELECT NULL FROM trf_accept_hawb HAWB WHERE HAWB.TRF_NO = HD.TRF_NO)
  <dynamic>
			<isNotEmpty property="carrCode">
				and HD.carr_code=#carrCode#			
			</isNotEmpty>
		</dynamic>
		<isNotEmpty property="loginCarrier">
				   AND ( HD.carr_code = #loginCarrier#
                        OR  HD.carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
		</isNotEmpty>
		
		) ORDER BY recvDate desc) dtl where 1=1
		<isNotEmpty property="tagNo">
		and dtl.type='TransitMail' and dtl.rclNo in (select trf_no from trf_accept_hawb hawb where hawb.hawb_no=#tagNo#)
		</isNotEmpty>
		<isNotEmpty property="inBoundUldType">
		<isEqual compareValue="ALL" property="inBoundUldType">
		and dtl.type in ('TransitMail','Transhipment','Normal')
		</isEqual>
		<isEqual compareValue="CARGO" property="inBoundUldType">
		and dtl.type in ('Transhipment','Normal')
		</isEqual>
		<isEqual compareValue="MAIL" property="inBoundUldType">
		and dtl.type in ('TransitMail')
		</isEqual>
		</isNotEmpty>
	</select>
	
		<select id = "listtransfersearchbyAwb" parameterClass="cargo.cms.export.bo.ListTransferCargoSearchBO"  resultClass="cargo.cms.export.bo.ListTransferCargoBO">
	SELECT * FROM (SELECT 'Normal' as type,RCL_NO as rclNo, RCL_NO as rclNo1, CR_USER_ID as staffId, 
	decode(accpt_mode,'LIT', 'Local Inter-Terminal', 'TIT', 'Transhipment Inter Terminal', 'LDM', 'Dummy') as transType,
    CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,  AWB_NO as awbNo, PPK_TYPE as pkgType, 
    ULD_KEY as uldNo, ref_trm_no as trmNo, TRANS_CARR_CODE trnsfCarr, CARR_CODE as carr, RCL_PCS as pc, RCL_WT as wt, 
    to_char(RCL_DATE,'DDMONYY HH24:MI') as recvDate, pkg_exp_val.get_exp_awb_cc_code(awb_no) ccCode, 
    DECODE(STATUS, 'V','Y', 'N') as voidInd 
	FROM EXP_RCL_HD WHERE AWB_NO = #awbNo#   and  accpt_mode in ('LIT', 'TIT', 'LDM')
	<isNotEmpty property="loginCarrier">
				   AND ( carr_code = #loginCarrier#
                        OR  carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
		</isNotEmpty>
   UNION ALL
   SELECT 'Transhipment' as type,TRF_NO as rclNo, TRF_NO as rclNo1, CR_USER_ID as staffId, 
	decode(accpt_mode,'LIT', 'Local Inter-Terminal', 'TIT', 'Transhipment Inter Terminal', 'LDM', 'Dummy') as transType,
    CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,  AWB_NO as awbNo, PPK_TYPE as pkgType, 
    ULD_KEY as uldNo, ref_trm_no as trmNo, TRANS_CARR_CODE trnsfCarr, CARR_CODE as carr, RCL_PCS as pc, RCL_WT as wt, 
    to_char(TRF_DATE,'DDMONYY HH24:MI') as recvDate, pkg_exp_val.get_exp_awb_cc_code(awb_no) ccCode, 
    DECODE(STATUS, 'V','Y', 'N') as voidInd 
	FROM TRF_ACCEPT_HD WHERE AWB_NO = #awbNo#   and  accpt_mode in ('LIT', 'TIT', 'LDM')  AND NOT EXISTS (SELECT NULL FROM trf_accept_hawb HAWB WHERE HAWB.TRF_NO = TRF_ACCEPT_HD.TRF_NO)
	<isNotEmpty property="loginCarrier">
				   AND ( carr_code = #loginCarrier#
                        OR  carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
		</isNotEmpty>
	UNION ALL
  	SELECT 'TransitMail' as type,TRF_NO as rclNo, TRF_NO as rclNo1, CR_USER_ID as staffId, 
	decode(accpt_mode,'LIT', 'Local Inter-Terminal', 'TIT', 'Transhipment Inter Terminal', 'LDM', 'Dummy') as transType,
    CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,  AWB_NO as awbNo, PPK_TYPE as pkgType, 
    ULD_KEY as uldNo, ref_trm_no as trmNo, TRANS_CARR_CODE trnsfCarr, CARR_CODE as carr, RCL_PCS as pc, RCL_WT as wt, 
    to_char(TRF_DATE,'DDMONYY HH24:MI') as recvDate, pkg_exp_val.get_exp_awb_cc_code(awb_no) ccCode, 
    DECODE(STATUS, 'V','Y', 'N') as voidInd 
	FROM TRF_ACCEPT_HD WHERE AWB_NO = #awbNo#   and  accpt_mode in ('LIT', 'TIT', 'LDM')  AND EXISTS (SELECT NULL FROM trf_accept_hawb HAWB WHERE HAWB.TRF_NO = TRF_ACCEPT_HD.TRF_NO)
	<isNotEmpty property="loginCarrier">
				   AND ( carr_code = #loginCarrier#
                        OR  carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
		</isNotEmpty>	
	
	) order by recvDate desc
	</select>
	
	<select id = "listtransfersearchbyUld" parameterClass="cargo.cms.export.bo.ListTransferCargoSearchBO"  resultClass="cargo.cms.export.bo.ListTransferCargoBO">
	SELECT * FROM (SELECT 'Normal' as type,RCL_NO as rclNo, RCL_NO as rclNo1, CR_USER_ID as staffId, 
	CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,  
	decode(accpt_mode,'LIT', 'Local Inter-Terminal', 'TIT', 'Transhipment Inter Terminal', 'LDM', 'Dummy') as transType, 
	AWB_NO as awbNo, PPK_TYPE as pkgType, ULD_KEY as uldNo, ref_trm_no as trmNo, TRANS_CARR_CODE trnsfCarr, 
	CARR_CODE as carr, RCL_PCS as pc, RCL_WT as wt, to_char(RCL_DATE,'DDMONYY HH24:MI') as recvDate, 
	pkg_exp_val.get_exp_awb_cc_code(awb_no) ccCode,
	DECODE(STATUS, 'V','Y', 'N') as voidInd 
	FROM EXP_RCL_HD WHERE ULD_KEY = #uldNo# and accpt_mode in ('LIT', 'TIT', 'LDM')
	<isNotEmpty property="loginCarrier">
				   AND ( carr_code = #loginCarrier#
                        OR  carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
		</isNotEmpty>
    UNION ALL
    SELECT 'Transhipment' as type,TRF_NO as rclNo, TRF_NO as rclNo1, CR_USER_ID as staffId, 
	CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,  
	decode(accpt_mode,'LIT', 'Local Inter-Terminal', 'TIT', 'Transhipment Inter Terminal', 'LDM', 'Dummy') as transType, 
	AWB_NO as awbNo, PPK_TYPE as pkgType, ULD_KEY as uldNo, ref_trm_no as trmNo, TRANS_CARR_CODE trnsfCarr, 
	CARR_CODE as carr, RCL_PCS as pc, RCL_WT as wt, to_char(TRF_DATE,'DDMONYY HH24:MI') as recvDate, 
	pkg_exp_val.get_exp_awb_cc_code(awb_no) ccCode,
	DECODE(STATUS, 'V','Y', 'N') as voidInd 
	FROM TRF_ACCEPT_HD WHERE ULD_KEY = #uldNo# and accpt_mode in ('LIT', 'TIT', 'LDM') AND NOT EXISTS (SELECT NULL FROM trf_accept_hawb HAWB WHERE HAWB.TRF_NO = TRF_ACCEPT_HD.TRF_NO)
	<isNotEmpty property="loginCarrier">
				   AND ( carr_code = #loginCarrier#
                        OR  carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
		</isNotEmpty>
	UNION ALL
    SELECT 'TransitMail' as type,TRF_NO as rclNo, TRF_NO as rclNo1, CR_USER_ID as staffId, 
	CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,  
	decode(accpt_mode,'LIT', 'Local Inter-Terminal', 'TIT', 'Transhipment Inter Terminal', 'LDM', 'Dummy') as transType, 
	AWB_NO as awbNo, PPK_TYPE as pkgType, ULD_KEY as uldNo, ref_trm_no as trmNo, TRANS_CARR_CODE trnsfCarr, 
	CARR_CODE as carr, RCL_PCS as pc, RCL_WT as wt, to_char(TRF_DATE,'DDMONYY HH24:MI') as recvDate, 
	pkg_exp_val.get_exp_awb_cc_code(awb_no) ccCode,
	DECODE(STATUS, 'V','Y', 'N') as voidInd 
	FROM TRF_ACCEPT_HD WHERE ULD_KEY = #uldNo# and accpt_mode in ('LIT', 'TIT', 'LDM') AND EXISTS (SELECT NULL FROM trf_accept_hawb HAWB WHERE HAWB.TRF_NO = TRF_ACCEPT_HD.TRF_NO)
	<isNotEmpty property="loginCarrier">
				   AND ( carr_code = #loginCarrier#
                        OR  carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
		</isNotEmpty>	
		
	)
	order by recvDate desc 
	</select>

    <select id="validateCarrierCodeListTrnsCargo" parameterClass="map" resultClass="java.lang.Integer">
	    SELECT COUNT(CODE) FROM MAST_CARRIER WHERE CODE=#carrierCode#
	</select>
		<select id="validateAwbNumber" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	    SELECT COUNT(1) FROM (
	Select AWB_NO from exp_rcl_hd where awb_no = #awbNo# AND AWB_NO IS NOT NULL
	UNION
	Select AWB_NO from TRF_ACCEPT_HD where awb_no = #awbNo# AND AWB_NO IS NOT NULL)
	</select>

<!-- ##################################Queries For Delete List Transfer Cargo :: Start#############################-->
	<select id = "getListTransferCargo" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.ListTransferCargoBO">
	select ppk_type as v_ppk_type, 
	       awb_no as v_awb_no, 
	       to_char(awb_date, 'DDMONYY') as v_awb_date,
	       accpt_mode as v_accpt_mode, 
	       uld_key as v_uld_key, 
	       ref_trf_no as v_ref_trf_no
           from   exp_rcl_hd
           where  rcl_no = #rclNoMap#
	</select>
	<select id = "getAwbNoStatusListTrns" parameterClass="java.lang.String"  resultClass="java.lang.String">
	 select substr(t1.awb_no, 1, 3)||'-'||substr(t1.awb_no, 4)
	            as   v_awb_no
	            from   exp_car t1, exp_rcl_brkdn t2,AWB t3
	            where  t1.awb_no = t2.awb_no
	            and    t1.awb_date = t2.awb_date
                AND t1.AWB_NO = t3.AWB_NO 
				AND TO_CHAR(t1.AWB_DATE,'DDMONYY') = TO_CHAR(t3.AWB_DATE,'DDMONYY')
                and    t2.rcl_no = #rclNoMap#
				and   t3.CAR_YN = 'Y'
	            and    rownum = 1
	            
	</select>
	<select id = "getDummyStatusListTrns" parameterClass="map"  resultClass="java.lang.String">
	   select 'X'
	           as   v_dummy
	           from   exp_car t1,AWB t3
	           where  t1.awb_no = #v_awb_no#
	           and    t1.awb_date = #v_awb_date#
	           AND t1.AWB_NO = t3.AWB_NO 
			   AND TO_CHAR(t1.AWB_DATE,'DDMONYY') = TO_CHAR(t3.AWB_DATE,'DDMONYY')
			   and   t3.CAR_YN = 'Y'
	</select>
	<update id="updateUldInventoryListTrns" parameterClass="java.lang.String">
		update uld_inventory set
		       flt_type  = 'I',
		       flt_no    = imp_flt_no,
		       flt_key   = imp_flt_key,
		       flt_date  = imp_flt_date,
		       carr_code = imp_flt_carr
		       where uld_key = #v_uld_key#
	</update>
	<select id = "getUldInventoryDetailsListTrns" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.ListTransferCargoBO">
	   select imp_flt_key as v_imp_flt_key ,
              to_char(imp_flt_date, 'DDMONYY') as v_imp_flt_date
              from uld_inventory 
              where uld_key = #v_uld_key#
	</select>
   <select id = "getAwbDateFromAwbInventoryListTrns" parameterClass="java.lang.String"  resultClass="java.lang.String">
	    select awb_no from awb_inventory where uld_key = #v_uld_key#
   </select>
   <update id="updateAwbInventoryListTrns" parameterClass="cargo.cms.export.bo.ListTransferCargoBO">
		update awb_inventory t1 set
		            awb_date = (select awb_date
		                        from   imp_trf_dtl
		                        where  trf_no = #v_ref_trf_no#
		                        and    uld_key = #v_uld_key#
		                        and    awb_no = t1.awb_no
		                        and    flt_key = #v_imp_flt_key#
		                        and    flt_date = #v_imp_flt_date#),
		            flt_type = 'I',
		            flt_key = #v_imp_flt_key#,
		            flt_date = #v_imp_flt_date#
		        where  uld_key = #v_uld_key#
	</update>
	 <update id="updateEdiFhlTableListTrns" parameterClass="cargo.cms.export.bo.ListTransferCargoBO">
		update edi_fhl t1
				set awb_date = (select awb_date
		                        from   imp_trf_dtl
		                        where  trf_no = #v_ref_trf_no#
		                        and    uld_key = #v_uld_key#
		                        and    awb_no = t1.awb_no
		                        and    flt_key = #v_imp_flt_key#
		                        and    flt_date = #v_imp_flt_date#)
				where  awb_no   = (select awb_no from   exp_rcl_brkdn where  rcl_no = #p_rcl_no#) and
                       awb_date = (select awb_date from   exp_rcl_brkdn where  rcl_no = #p_rcl_no#)
				       and (AWB_ORG = 'HKG' or AWB_DEST != 'HKG' or IMP_EXP_IND = 'E')
	</update>
	<delete id="deleteFromAWBTableListTrns" parameterClass="map">
		delete from awb
        where  awb_no   = (select awb_no from exp_rcl_brkdn where rcl_no = #p_rcl_no#) and
               awb_date = (select awb_date from   exp_rcl_brkdn where  rcl_no = #p_rcl_no#)               
	</delete>
	<delete id="deleteFromExpULDAWBTableListTrns" parameterClass="map">
		 delete from exp_uld_awb
                where  rcl_no = #p_rcl_no#
                and    uld_key = #v_uld_key#
	</delete>
	<select id = "getCursorDetailsFromImpTrfDtl" parameterClass="map"  resultClass="cargo.cms.export.bo.ListTransferCargoBO">
	    select flt_key as flt_key, 
	           to_char(flt_date, 'DDMONYY') as flt_date,
	           to_char(awb_date, 'DDMONYY') as awb_date,
	           from   imp_trf_dtl
	      	   where  trf_no = #v_ref_trf_no#
	</select>
	<update id="updateAwbInventoryListCargo" parameterClass="map">
		     update awb_inventory set
			        awb_date = #awb_date#,
			        flt_type = 'I',
			        flt_key = #flt_key#,
			        flt_date = #flt_date#
			        where  awb_no = #v_awb_no#
			        and    awb_date = #v_awb_date#
	</update>
	<update id="updateEdiFhlListCargo" parameterClass="map">
		    update edi_fhl t1
					set awb_date = #awb_date#
					where  awb_no = #v_awb_no#
			        and    awb_date = #v_awb_date#
					and (AWB_ORG = 'HKG' or AWB_DEST != 'HKG' or IMP_EXP_IND = 'E')
	</update>
	<delete id="deleteFromAWBTableListCargo" parameterClass="map">
		delete from awb
			   where  awb_no = #v_awb_no#
			   and    awb_date = #v_awb_date#			   
	</delete>
	<update id="updateExpRclHdListCargo" parameterClass="map">
		 update exp_rcl_hd set
	        status = 'V',
	        void_user_id = #p_user_id#,
	        void_date = sysdate,
	        TR_TYPE_EVT = 'RCLVOID'
	    where  rcl_no = #p_rcl_no#
	</update>
	<select id="fetchAWBSeqNoForListCargoDelete" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.ListTransferCargoBO">
		SELECT 
			SEQ_NO AS seqNo, LOCN_PCS AS locnPcs, LOCN_WT AS locnWt 
		FROM 
			AWB_INVENTORY A JOIN EXP_RCL_HD B ON B.AWB_NO=A.AWB_NO AND B.AWB_DATE=A.AWB_DATE 
		WHERE 
			B.RCL_NO=#rclNo# AND NOT EXISTS (SELECT NULL FROM EXP_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND ULD_KEY=NVL(A.ULD_KEY, '**'))
	</select>
    <select id = "getOldRecordListFromExpRclHD" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.ListTransferCargoBO">
		SELECT RCL_NO as rclNo,
	       PPK_TYPE AS pkgType,
	       AWB_NO as awbNo,
	       to_char(AWB_DATE, 'DDMONYY') as awb_date,
	       ACCPT_MODE as transType,
	       FLT_KEY as flt_key,
	       to_char(FLT_DATE, 'DDMONYY') as flt_date,
	       ULD_KEY as uldNo,
	       RCL_PCS as pc,
	       RCL_WT as wt
		   FROM EXP_RCL_HD WHERE RCL_NO = #rclNoMap#
	</select>
	<select id = "getNewRecordListFromExpRclHD" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.ListTransferCargoBO">
		SELECT RCL_NO as rclNo,
	       VOID_USER_ID AS voidUserId,
	       to_char(VOID_DATE, 'DDMONYY') as voidDate,
	       FLT_KEY as flt_key,
	       to_char(FLT_DATE, 'DDMONYY') as flt_date,
	       AWB_NO as awbNo,
	       to_char(AWB_DATE, 'DDMONYY') as awb_date, 
	       ULD_KEY as uldNo,
	       RCL_PCS as pc,
	       RCL_WT as wt,
	       ACCPT_MODE as transType,
	       VOID_FROM as voidFrom,
	       to_char(LM_DATE, 'DDMONYY') as lmDate,
	       RMK  as remarks, 
	       PRE_RCL_NO as preRclNo
	       FROM EXP_RCL_HD WHERE RCL_NO = #rclNoMap#
	</select>
	
<!-- ##################################Queries  For Delete List Transfer Cargo :: End#############################-->

<!-- ##################### List Transfer Cargo  : End (Yugandhar) ########################################-->

	<!-- Issue RCL :: Yugandhar : Start-->
		
	<select id = "getIssueRclList" parameterClass="map"  resultClass="cargo.cms.export.bo.IssueRCLBO">
        SELECT PR.PRE_RCL_NO AS rclNo,
                                 PR.PPK_TYPE AS rclType,
                         PR.TTL_PCS AS totaleRclPcs,
                         TRIM(TO_CHAR(NVL(PR.TTL_WT,0), '9999999.99')) as totaleRclWts,
                         CONCAT(CONCAT(SUBSTR(PR.AWB_NO,0,3),'-'),SUBSTR(PR.AWB_NO,4)) as awbNoDisplay,
                         PR.AWB_NO AS awbNumber,
                         PR.ULD_KEY AS uldNumber, 
             pr.status as rclStatus,
             (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = (PR.cust_no)) as agentName,
             TO_CHAR(TO_DATE(TO_CHAR(B.BOOKING_DATE ||' ' || LPAD(B.TIME_SLOT_FROM,4,0)),'DD-MON-YY HH24MI') - (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'SRF_BKG_TIME_PRIOR')/24,'HH24MI'),
             TO_CHAR(TO_DATE(TO_CHAR(B.BOOKING_DATE ||' ' || LPAD(B.TIME_SLOT_FROM,4,0)),'DD-MON-YY HH24MI') + (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'SRF_BKG_TIME_AFTER')/24,'HH24MI')
      FROM EXP_PRE_RCL_HD PR, EXP_BOOKING B,exp_booking_dtl dt
      WHERE dt.booking_no = b.booking_no and dt.ercl_no = pr.pre_rcl_no and B.TRUCK= #truckNo#
       AND SYSDATE
       BETWEEN TO_DATE(TO_CHAR(BOOKING_DATE,'DDMONYY')||''||LPAD(TIME_SLOT_FROM,4,0),'DDMONYYHH24MI') - (SELECT TO_NUMBER (RULE_VALUE)/(60*24) FROM CMSRULES WHERE RULE_CODE = 'SRF_BKG_TIME_PRIOR')
              AND TO_DATE(TO_CHAR(BOOKING_DATE,'DDMONYY')||''||LPAD(TIME_SLOT_TO,4,0),'DDMONYYHH24MI') + (SELECT TO_NUMBER (RULE_VALUE)/(60*24) FROM CMSRULES WHERE RULE_CODE = 'SRF_BKG_TIME_AFTER')
            ORDER BY PR.PPK_TYPE ASC, PR.PRE_RCL_NO DESC
        
      </select>
	<!-- Issue RCL :: Yugandhar :End-->
	<!-- Maintain Outbound Transfer :: Yugandhar : Start-->
	 <select id="getValidateFlightAgnstDate" parameterClass="map" resultClass="java.lang.Integer">
	   select COUNT(1) from flt_opr Where flt_key= #fltKey# and sch_date=to_date(#fltDate#,'DDMONYY') and flt_type='D'
	 </select>
	 <select id="getValidateExportFlight" parameterClass="map" resultClass="java.lang.Integer">
	    select COUNT(1) from flt_opr where flt_key=#fltKey# and sch_date=#fltDate# and flt_type='D'
	 </select>
	 <select id="checkFlightCustomValidation" parameterClass="map" resultClass="java.lang.Integer">
	    select COUNT(1) from flt_opr_events where ctm_out_time is not null and ctm_out_date is not null and flt_key=#fltKey# and sch_date=#fltDate# and flt_type='D'
	 </select>
	 <select id="getValidate_TO_Applicable_forFlight" parameterClass="map" resultClass="java.lang.Integer">
	    select COUNT(1) from flt_opr where flt_key=#fltKey# and sch_date=#fltDate# and flt_type='D' and TO_IND='Y'
	 </select>
	
	<select id="outbound_transfer_uld_get_header"
    	parameterClass="map"
    	resultClass="cargo.cms.export.bo.OutboundTransferDetailsBO">
    	SELECT DISTINCT
			SUBSTR(FLT_KEY,0,2) AS fltPfx,
			SUBSTR(FLT_KEY,3) AS fltSfx,
			FLT_KEY AS fltNo,
			TO_CHAR(FLT_DATE,'DDMONYY') AS fltDate
		FROM
			EXP_CHKOUT_DTL A
		WHERE
			A.FLT_KEY = #fltKey#
			AND A.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') 
    </select>
    <select id="outbound_transfer_finalize" 
   	    parameterClass="map" 
   	    resultClass="java.lang.String">
   	     select decode(to_finalize,'Y','Y','N') as finaliseInd
       			from flt_opr_events 
       			where flt_key=#fltKey# 
       			and sch_date=TO_DATE(#fltDate#,'DDMONYY')  
       			and flt_type='D'
	</select>
    <select id="outbound_transfer_uld_get_items"
    	parameterClass="map"
    	resultClass="cargo.cms.export.bo.OutboundTransferDetailsBO">
			SELECT   
				cd.ML_IND as mlIndicator,   
				cd.SEQ_NUM as sequenceNo,
            	cd.LOAD_POSITION as loadingPos,
		        cd.ULD_KEY as uldNum,
		        cd.CONTR_CODE as contourCode,
		        ui.TRANSIT_TYPE as transferType,
		        TRIM(TO_CHAR(NVL(ui.GROSS_WEIGHT,0), '999999990D99')) as grossWt,
		        ui.LOC_CODE as location,
            	decode(mu.h_cont_ind,'Y','Y',decode(mu.bt_ind,'Y','Y','N')) as btHcontainer
		    FROM  EXP_CHKOUT_DTL cd
		    JOIN  ULD_INVENTORY  ui on ui.ULD_KEY= cd.ULD_KEY
            LEFT  OUTER JOIN  MAST_ULD_TYPE mu on mu.code=ui.ULD_TYPE
		    WHERE cd.FLT_KEY = #fltKey#
		          AND cd.FLT_DATE =TO_DATE(#fltDate#,'DDMONYY')
		          and not exists (select null from uld_inventory t2 where ui.uld_key = cd.uld_key and nullif(ui.base_plt, 'N') is not null)
		          order by mlIndicator desc nulls last, sequenceNo asc nulls last
    </select>
     <update id="outbound_transfer_uld_save"
    	parameterClass="map">
    	 UPDATE
    		EXP_CHKOUT_DTL A
   		 SET  TR_TYPE = 'ENQTO',
   		 	 A.ML_IND = #mlIndicator#,
    		 A.SEQ_NUM = #sequenceNo#,
       		 A.LOAD_POSITION = #loadingPos#
         WHERE
    		A.FLT_KEY = #fltKey#
			AND A.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND A.ULD_KEY = #uldKey#
	</update>
	<update id="finalize_Outbound_TrnsOperation"
    	parameterClass="map">
    	UPDATE 
    		FLT_OPR_EVENTS 
        SET 
        	TO_FINALIZE = 'Y', 
        	TO_FINALIZE_DAT = sysdate 
        where 
        	FLT_KEY = #fltKey# 
          	and SCH_DATE = TO_DATE(#fltDate#,'DDMONYY')
          and FLT_TYPE = 'D'
	</update>
<!-- Maintain Outbound Transfer :: Yugandhar : End-->
<!-- Rebuild Log Book :: Yugandhar : Starts -->
	<select id="checkRebuildAlreadyDone" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) 
		FROM EXP_REBUILT_ADVICE 
		WHERE FLT_KEY =#fltKey# 
		and FLT_DATE =#fltDate# 
		and	uld_key =#uldKey# 
		AND TR_NO is not null
	</select>
	<select id="getHeaderDtlForRebuildLogBook"  parameterClass="cargo.cms.export.bo.RebuildLogBookBO" resultClass="cargo.cms.export.bo.RebuildLogBookBO" >
	  SELECT ULD_KEY as uldKey,
	         CARR_CODE as flightKey,
	         #flightNo# as flightNo,
        	 FLT_KEY as flightNoKey,
        	 to_char(FLT_DATE,'DDMONYY') as flightDate, 
	         PERCENTAGE AS reBuildPersent,
        	 RMK AS remarks,
        	 (SELECT code_desc from mast_code_dtl 
         			where code = FUN_GET_ULD_STATE(#uldKey#) and rownum=1) as uldState
         from EXP_REBUILT_ADVICE
        where flt_key = #flightNoKey#
          and flt_date = #flightDate#
          and uld_key = #uldKey#
	</select>
	<select id="getUldStateForRebuildLogBook"  parameterClass="java.lang.String" resultClass="java.lang.String" >
	    	 SELECT code_desc as uldState from mast_code_dtl 
         			where code = FUN_GET_ULD_STATE(#PARAM#) and rownum=1
	</select>
	
	<!-- <select id="fetchParentCarr"  parameterClass="java.lang.String" resultClass="java.lang.String" >
	    	 select FUN_GET_PARENT_CARR(#PARAM#) as carr from dual
	</select> -->
	
	<select id="getFlightDtlsFrom_ULDInventory"  parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.RebuildLogBookBO" >
	    	 SELECT FLT_KEY AS uldfltKey, to_char(FLT_DATE,'DDMONYY') AS uldfltDate FROM ULD_INVENTORY WHERE ULD_KEY = #PARAM#
	</select>
	<select id="getRebuildLogBookShipmentList"  parameterClass="cargo.cms.export.bo.RebuildLogBookBO" resultClass="cargo.cms.export.bo.RebuildLogBookBO" >
	    select  ai.AWB_NO as awbNo,
	    		TO_CHAR(ai.AWB_DATE,'DDMONYY') as awbDate,
       			ai.uld_key as uldKey,
       			SUBSTR(TRIM(ai.AWB_NO),1,3)||'-'||SUBSTR(TRIM(ai.AWB_NO),4) awbNoDisplay,
       			sum(locn_pcs) as loadedPcs,
       			TRIM(TO_CHAR(sum(locn_wt), '99999990D99')) as loadedWts
   			from  AWB_INVENTORY ai
    		where ai.uld_key = #uldKey# 
    		group by ai.AWB_NO,ai.uld_key,ai.AWB_DATE
	</select>
	<select id="getRebuildLogBookShipmentListMaintain"  parameterClass="cargo.cms.export.bo.RebuildLogBookBO" resultClass="cargo.cms.export.bo.RebuildLogBookBO" >
	     select ERAA.AWB_NO as awbNo,
       			ERA.uld_key as uldKey,
       			SUBSTR(TRIM(ERAA.AWB_NO),1,3)||'-'||SUBSTR(TRIM(ERAA.AWB_NO),4) awbNoDisplay,
       			sum(ERAA.LOADED_PC) as loadedPcs,
       			TRIM(TO_CHAR(sum(ERAA.LOADED_WT), '99999990D99')) as loadedWts,
            	sum(ERAA.REBUILD_PC) as reBuildPcs,
       			TRIM(TO_CHAR(sum(ERAA.REBUILD_WT), '99999990D99')) as reBuildWts
      	  from  EXP_REBUILD_ADVICE_AWB ERAA
      	  join  EXP_REBUILT_ADVICE ERA on ERA.TR_NO = ERAA.TR_NO
    	  where ERA.uld_key = #uldKey#
    	   and  ERA.TR_NO =#trNum#
          group by ERAA.AWB_NO,ERA.uld_key
	</select>
	<select id="getTransactionNoForRebuildLogBook"  parameterClass="cargo.cms.export.bo.RebuildLogBookBO" resultClass="java.lang.String" >
	    SELECT TR_NO as trNum 
	    from EXP_REBUILT_ADVICE 
        where FLT_KEY  = #flightNoKey# 
          and FLT_DATE = #flightDate#
          and ULD_KEY  = #uldKey#
	</select>
	<insert id="insertHeaderDtlsinReBuildAdvice" parameterClass="cargo.cms.export.bo.RebuildLogBookBO">
		INSERT INTO EXP_REBUILT_ADVICE (
			TR_NO,FLT_KEY,FLT_DATE,CARR_CODE,ULD_KEY,RMK,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,PERCENTAGE,TR_TYPE)            
		VALUES (EXP_REBUILT_ADVICE_SEQ.nextval,#flightNoKey#,#flightDate#,#flightKey#,#uldKey#,
				#remarks#,#crUserId#,sysdate,#lastModUserId#,sysdate,#reBuildPersent#,'RBLBC'
                )	
	</insert>
	<update id="updateHeaderDtlsinReBuildAdvice" parameterClass="cargo.cms.export.bo.RebuildLogBookBO">
		UPDATE EXP_REBUILT_ADVICE  
		   SET FLT_KEY    =#flightNoKey#,	
			   FLT_DATE   =#flightDate#,
			   CARR_CODE  =#flightKey# ,         
			   ULD_KEY    =#uldKey#,
			   RMK 		  = #remarks#,
			   CR_USER_ID = #crUserId#,
			   CR_DATE    = sysdate,
			   LM_USER_ID = #lastModUserId#,
			   LM_DATE    = sysdate,
			   PERCENTAGE = #reBuildPersent#, 
			   TR_TYPE    = 'RBLBU'
		   WHERE 
			   TR_NO = #trNum# 
	</update>
<insert id="insertShipmentDtlinReBuildAdviceAWB" parameterClass="cargo.cms.export.bo.RebuildLogBookBO">
		INSERT INTO EXP_REBUILD_ADVICE_AWB (
			TR_NO,AWB_NO,LOADED_PC,LOADED_WT,REBUILD_PC,REBUILD_WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,AWB_DATE)            
		VALUES (#trNum#,#awbNo#,#loadedPcs#,#loadedWts#,#reBuildPcs#,#reBuildWts#,
				#crUserId#,sysdate,#lastModUserId#,sysdate,#awbDate#)
	</insert>
	<update id="updateShipmentDtlinReBuildAdviceAWB" parameterClass="cargo.cms.export.bo.RebuildLogBookBO">
		UPDATE EXP_REBUILD_ADVICE_AWB  
		   SET LOADED_PC  =#loadedPcs#,	
			   LOADED_WT  =#loadedWts#,
			   REBUILD_PC =#reBuildPcs# ,         
			   REBUILD_WT =#reBuildWts#,
			   CR_USER_ID = #crUserId#,
			   CR_DATE    = sysdate,
			   LM_USER_ID = #lastModUserId#,
			   LM_DATE    = sysdate
		  WHERE 
			   TR_NO   = #trNum# 
			and AWB_NO = #awbNo# 
	</update>
	
	<select id="getRebuildLogBookUldList"  parameterClass="cargo.cms.export.bo.RebuildLogBookBO" resultClass="cargo.cms.export.bo.RebuildLogBookBO" >
	    SELECT 
	        TR_NO as trNum,
  			ULD_KEY AS uldKey,
  			#flightNoKey# as flightNoKey,
  			#flightDate# as flightDate,
  			PERCENTAGE as reBuildPersent,
  			RMK as remarks
  			FROM EXP_REBUILT_ADVICE
 			WHERE FLT_KEY    = #flightNoKey#
  			AND FLT_DATE     = #flightDate#
  			<isNotEmpty prepend="AND" property="searchUldKey">
				ULD_KEY = NVL(UPPER(#searchUldKey#),ULD_KEY)
			</isNotEmpty>
			<isNotEmpty property="loginCarrier">
				   AND ( CARR_CODE = #loginCarrier#   OR  CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP  WHERE GRP_CARR_CODE = #loginCarrier#))             
            </isNotEmpty>
  	</select>
  	<select id="getRebuildLogBookUldSubList"  parameterClass="cargo.cms.export.bo.RebuildLogBookBO" resultClass="cargo.cms.export.bo.RebuildLogBookBO" >
	    SELECT
  			AWB_NO as awbNo,
       		SUBSTR(TRIM(AWB_NO),1,3)||'-'||SUBSTR(TRIM(AWB_NO),4) awbNoDisplay,
       		LOADED_PC as loadedPcs,
       		TRIM(TO_CHAR(LOADED_WT, '99999990D99')) as loadedWts,
       		REBUILD_PC as reBuildPcs,
       		TRIM(TO_CHAR(REBUILD_WT, '99999990D99')) as reBuildWts
  		FROM EXP_REBUILD_ADVICE_AWB
 		WHERE TR_NO = #trNum#
  	</select>
  	<delete id="deleteFromRebuildAdvice" parameterClass="map">
		 DELETE FROM EXP_REBUILT_ADVICE WHERE TR_NO = #trNo#
	</delete>
	<delete id="deleteFromRebuildAdviceAWB" parameterClass="map">
		 DELETE FROM EXP_REBUILD_ADVICE_AWB WHERE TR_NO = #trNo#
	</delete>
<!-- Rebuild Log Book :: Yugandhar : Ends -->
<!-- Finalize ULD Weight :: Yugandhar : Starts -->
    <select id="getFinalizeULDWtDiffList"  parameterClass="cargo.cms.export.bo.FinalizeULDWtBO" resultClass="cargo.cms.export.bo.FinalizeULDWtBO" >
	 select PU.ULD_BT_NO as uldKey,
        TRIM(to_char(UI.first_wt,'9999990D99')) as firstWt,
        trim(decode(UI.second_wt,'0','',to_char(UI.second_wt,'9999990D99'))) as secondWt,
        trim(decode(UI.third_wt,'0','',to_char(UI.third_wt,'9999990D99'))) as thirdWt,
        UI.MAN_WT_IND as manWtInd,
        (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'FINALIZED_ULD_WT_Wi-Fi_IND') as wifiInd
       	from EXP_PMANIFEST_ULD PU
        join ULD_INVENTORY UI on UI.ULD_KEY = PU.ULD_BT_NO
       	where PU.FLT_KEY = #flightNoKey#
       	and   PU.FLT_DATE = #flightDate#
       	and   (UI.FINAL_WEIGHT is null or UI.FINAL_WEIGHT !='Y')
       	and   UI.first_wt is not null and UI.first_wt != 0
       	and   PU.BLDUP_COMPLETE = 'Y' 
       	<isEqual property="ppkInd" compareValue="Y" prepend="AND">
       	 (PU.PPK_TYPE = 'P' or PU.PPK_TYPE = 'M')
       	</isEqual>
	</select>
	<select id="getFinalizeULDWtVarienceList"  parameterClass="cargo.cms.export.bo.FinalizeULDWtBO" resultClass="cargo.cms.export.bo.FinalizeULDWtBO" >
	<![CDATA[
		select  wts.uldKey as uldKey,
	        TRIM(to_char(wts.netWt,'9999990D99')) as netWt,
            TRIM(to_char(wts.tareWt,'9999990D99')) as tareWt,
            TRIM(to_char(wts.grossWt,'9999990D99')) as grossWt,
            TRIM(to_char(wts.buildupWt,'9999990D99')) as buildupWt,
	        DECODE(wts.netWt,0,'0',round(100 * (wts.netWt-wts.buildupWt)/wts.netWt)) as varience,
	        (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'FINALIZED_ULD_VARIENCE_LMT') as varienceLmt
	  	from (select 
	        UI.ULD_KEY as uldKey,
	        ui.gross_weight - ui.tare_weight as netWt,
	        UI.tare_weight as tareWt,
	        UI.gross_weight as grossWt,
	        (select SUM(assigned_wt) from EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY = PU.FLT_KEY AND FLT_DATE=PU.FLT_DATE AND ULD_BT_NO = PU.ULD_BT_NO) as buildupWt
	        from EXP_PMANIFEST_ULD PU,
	        ULD_INVENTORY UI  where PU.ULD_BT_NO = ui.ULD_KEY and PU.FLT_KEY = #flightNoKey# and PU.FLT_DATE = #flightDate# ) wts,
	        EXP_PMANIFEST_ULD EPU,ULD_INVENTORY UIN 
	  	where EPU.FLT_KEY = #flightNoKey#
	    and   EPU.FLT_DATE = #flightDate#
	    and   EPU.ULD_BT_NO = wts.uldKey
	    and   UIN.ULD_KEY   = wts.uldKey
    	and   UIN.FINAL_WEIGHT = 'Y'
    	and   EPU.BLDUP_COMPLETE = 'Y' 
    	and   DECODE(wts.netWt,0,'0',(round(100 * (wts.netWt-wts.buildupWt)/wts.netWt))) <> 0
    	]]>
		  <isEqual property="ppkInd" compareValue="Y" prepend="AND">
		    (EPU.PPK_TYPE = 'P' or EPU.PPK_TYPE = 'M')
		   </isEqual>
		
	</select>
	<select id="doesWeightDifferenceExist"  parameterClass="map" resultClass="java.lang.Integer" >
	    	SELECT COUNT(1) from dual where (#netWt# between #f1# and #f2#) or (#netWt# between #s1# and #s2#)
	</select>
	<update id="updateUldInventoryWeights" parameterClass="cargo.cms.export.bo.FinalizeULDWtBO">
		UPDATE ULD_INVENTORY  
		   SET first_wt  = #firstWeight#,
			   second_wt =#secondWeight#,	
			   third_wt =#thirdWeight#,
			   LM_USER_ID =#lastModUserId# ,         
			   LM_DATE =sysdate,
			   man_wt_ind2 = DECODE(#secondWeight#,null,'N','Y'),
			   man_wt_ind3 = DECODE(#thirdWeight#,null,'N','Y'),
			   TR_TYPE='FULDW'   
		   WHERE 
			   ULD_KEY = #uldKey#  
	</update>
	
	<update id="updateFltUldGrossWt" parameterClass="map">
		    update exp_flt_uld set 
                gross_wt = NVL(#finalWt#,0),
                net_wt = DECODE(#finalWt#,'0','0',(NVL(#finalWt#,0) - NVL(#tareWt#,NVL(TARE_WT,0)))),
                TARE_WT = NVL(#tareWt#,TARE_WT),
                CONTR_CODE = NVL(#contrCode#,CONTR_CODE),
                LM_USER_ID    =  #lastModUserId#,         
                LM_DATE       =  sysdate
            where  flt_key = #fltKey#
            and    flt_type = 'E'
            and    flt_date = TO_DATE(#fltDate#,'DDMONYY')
            and    uld_key = #uldKey#
	</update>
	<update id="updateExpPmanUldGrossWt" parameterClass="map">
		    update EXP_PMANIFEST_ULD set 
                gross_wt = NVL(#finalWt#,0),
                TARE_WT = NVL(#tareWt#,TARE_WT),
                LM_USER_ID    =  #lastModUserId#,         
                LM_DATE       =  sysdate,
                TR_TYPE_EVT   =  #trType#
            where  flt_key = #fltKey#
            and    flt_date = TO_DATE(#fltDate#,'DDMONYY')
            and    uld_bt_no = #uldKey#
	</update>
	<update id="updateExpPmanTarmacUldGrossWt" parameterClass="map">
		    update EXP_PMAN_TARMAC_ULD set 
                GROSS_WT    = NVL(#finalWt#,0),
                TARE_WT     = NVL(#tareWt#,TARE_WT),
                CONTR_CODE  = NVL(#contrCode#,CONTR_CODE),
                LM_USER_ID  =  #lastModUserId#,         
                LM_DATE     =  sysdate,
                TR_TYPE     =  #trType#
            where  flt_key = #fltKey#
            and    flt_date = TO_DATE(#fltDate#,'DDMONYY')
            and    uld_bt_no = #uldKey#
	</update>
		
	<update id="updateUldInventoryFinalWeight" parameterClass="map">
		UPDATE ULD_INVENTORY  
		   SET GROSS_WEIGHT  =  #finalWt#,
		   	   FINAL_WEIGHT  =  #finalInd#,
		   	   LM_USER_ID    =  #lastModUserId# ,         
			   LM_DATE       =  sysdate,
			   TR_TYPE='FULDW1'   
		   WHERE 
			   ULD_KEY = #uldKey#  
	</update>
	<update id="updateGrossWtUldInventory" parameterClass="map">
		UPDATE ULD_INVENTORY  
		   SET GROSS_WEIGHT  =  #grossWt#,
		   	   FINAL_WEIGHT  =  'Y',
		   	   LM_USER_ID    =  #lastModUserId# ,         
			   LM_DATE       =  sysdate,
			   TR_TYPE       = #trtype#  
		  WHERE 
			   ULD_KEY = #uldKey#  
	</update>
	<select id="getUldDefaultTareWt_ULD_INV" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select 
			case when (SELECT NVL(TARE_WEIGHT,0) FROM ULD_INVENTORY  WHERE ULD_KEY=#uldKey# ) > 0 then  (SELECT NVL(TARE_WEIGHT,0) FROM ULD_INVENTORY  WHERE ULD_KEY=#uldKey#)
			else (SELECT TARE_WEIGHT FROM ULD_TYPE_CARR_TARE_WT  WHERE ULD_TYPE=#uldType# AND ULD_CARR = #uldCarr# AND #uldSeqNo# between ULD_NO_FROM and ULD_NO_TO) end as ProfTarewt  
			from dual
	</select>
<!-- Finalize ULD Weight :: Yugandhar : Ends -->
<!-- Capture ULD Weight :: Yugandhar : Starts -->
    <select id="getFirstWtFromUldInventory" parameterClass="java.lang.String" resultClass="java.lang.String">
  	 SELECT decode(FIRST_WT,0,null,FIRST_WT) FROM ULD_INVENTORY WHERE ULD_KEY =#PARAM#
	</select>
	<select id="getSecondWtFromUldInventory" parameterClass="java.lang.String" resultClass="java.lang.String">
  	 SELECT decode(SECOND_WT,0,null,SECOND_WT) FROM ULD_INVENTORY WHERE ULD_KEY =#PARAM#
	</select>
	<select id="getThirdWtFromUldInventory" parameterClass="java.lang.String" resultClass="java.lang.String">
  	 SELECT decode(THIRD_WT,0,null,THIRD_WT)  FROM ULD_INVENTORY WHERE ULD_KEY =#PARAM#
	</select>
	<select id="doesWeightIsFinalizeForULD"  parameterClass="java.lang.String" resultClass="java.lang.String" >
	   SELECT DECODE(FINAL_WEIGHT,'Y','Y','N') as finaliWtInd FROM ULD_INVENTORY WHERE ULD_KEY =#PARAM#
	</select>
	<update id="updateSecondWtinUldInventory" parameterClass="cargo.cms.export.bo.CaptureULDWtBO">
		UPDATE ULD_INVENTORY  
		   SET SECOND_WT     =  #grossWt#,
		       man_wt_ind2 = DECODE(#grossWt#,null,'N','Y'),
		   	   TARE_WEIGHT   =	#tareWt#,
		   	   CONTR_CODE    =  nvl(#contrCode#,CONTR_CODE),
		   	   LM_USER_ID    =  #lastModUserId# ,         
			   LM_DATE       =  sysdate,
			   TR_TYPE       = #trtype#   
		   WHERE 
			   ULD_KEY = #uldKey# 
	</update>
	<update id="updateThirdWtinUldInventory" parameterClass="cargo.cms.export.bo.CaptureULDWtBO">
		UPDATE ULD_INVENTORY  
		   SET THIRD_WT      =  #grossWt#,
		  	   man_wt_ind3 = DECODE(#grossWt#,null,'N','Y'),
		   	   TARE_WEIGHT   =	#tareWt#,
		   	   CONTR_CODE    =  nvl(#contrCode#,CONTR_CODE),
		   	   LM_USER_ID    =  #lastModUserId# ,         
			   LM_DATE       =  sysdate,
			   TR_TYPE       = #trtype#   
		   WHERE 
			   ULD_KEY = #uldKey# 
	</update>
	<update id="updateWeightsUldInventory" parameterClass="map">
		UPDATE ULD_INVENTORY  
		   SET SECOND_WT     =  #secondWt#,
		   	   THIRD_WT      =  #thirdWt#,
		   	   GROSS_WEIGHT  =  #grossWt#,
		   	   TARE_WEIGHT   =	#tareWt#,
		   	   CONTR_CODE    =  nvl(#contrCode#,CONTR_CODE),
		   	   FINAL_WEIGHT  =  'Y',
		   	   LM_USER_ID    =  #lastModUserId# , 
		   	   man_wt_ind2 = DECODE(#secondWt#,null,'N','Y'),
			   man_wt_ind3 = DECODE(#thirdWt#,null,'N','Y'),        
			   LM_DATE       =  sysdate,
			   TR_TYPE       = #trtype#   
		   WHERE 
			   ULD_KEY = #uldKey# 
	</update>
	<select id="getFlightDetailsFromULDINV"  parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.CaptureULDWtBO" >
		 select flt_key as flightKey,to_char(flt_date,'DDMONYY') as flightDate,CARR_CODE as carrCode from uld_inventory where uld_key=#PARAM#
	</select>
	<select id="isULDisIFShipment" parameterClass="java.lang.String" resultClass="java.lang.Integer">
  		 select count(*) from ULD_INVENTORY where uld_key=#PARAM# and transit_type='IF'
	</select>
	<update id="updateContCodeUldInventory" parameterClass="map">
		UPDATE ULD_INVENTORY  SET CONTR_CODE = NVL(#contrCode#,CONTR_CODE),LM_USER_ID = #lastModUserId#,LM_DATE = sysdate,TR_TYPE =#trType# where ULD_KEY = #uldKey#
	</update>
	<update id="updateContCodeExpFltUld" parameterClass="map">
		 update exp_flt_uld set 
                CONTR_CODE = NVL(#contrCode#,CONTR_CODE),
                LM_USER_ID    =  #lastModUserId#,         
                LM_DATE       =  sysdate
            where  flt_key = #fltKey#
            and    flt_type = 'E'
            and    flt_date = TO_DATE(#fltDate#,'DDMONYY')
            and    uld_key = #uldKey#
	</update>
	<update id="updateConrCodeExpPmanTarmacUldGrossWt" parameterClass="map">
		 update EXP_PMAN_TARMAC_ULD set 
                CONTR_CODE  = NVL(#contrCode#,CONTR_CODE),
                LM_USER_ID  =  #lastModUserId#,         
                LM_DATE     =  sysdate,
                TR_TYPE     =  #trType#
            where  flt_key = #fltKey#
            and    flt_date = TO_DATE(#fltDate#,'DDMONYY')
            and    uld_bt_no = #uldKey#
	</update>
<!-- Capture ULD Weight :: Yugandhar : Ends -->	

	<select id="CHECK_DIFF_BETWEEN_DATE"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT TO_CHAR(TO_DATE(#erclDateTo#,'DDMONYY') - TO_DATE(#erclDateFrom#,'DD-MON-YY')) DAYDIFF FROM DUAL
	</select>
	
	<select id="FETCH_DATE_LIST"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="cargo.cms.external.bo.BookDlvSlotBO" >
	<![CDATA[
	SELECT TO_CHAR(CDATE,'DDMONYY') AS cdate FROM(
      select (SELECT TO_DATE(SYSDATE,'dd-mon-yyyy') FROM DUAL) + rownum -1 as cdate
      from all_objects
      where rownum <= 
      (SELECT TO_DATE(SYSDATE+(select rule_value from cmsrules where rule_code='BOOK_DLV_SLOT_DATE'),'dd-mon-yyyy') FROM DUAL)-(SELECT TO_DATE(SYSDATE,'dd-mon-yyyy') FROM DUAL))
    ]]>
    </select>
	<select id="FETCH_BOOKING_NO"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.String" >
		SELECT BOOKING_NO 
		FROM EXP_BOOKING 
		WHERE (CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = UPPER(#userID#)) OR 
		(CUST_NO=#agentCode#)) AND BOOKING_DATE = #cdate# AND TIME_SLOT_FROM = #timeSlotFrom# AND TIME_SLOT_TO =#timeSlotTo#
		<isNotEmpty property="poolId">
			AND POOL_ID = #poolId#
		</isNotEmpty>
	</select>
    <select id="FETCH_DOCLINE_NO"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.String" >
			select NVL(max(DOC_LINE_NO)+1,1) FROM EXP_BOOKING_DTL
	</select>
	<select id="FETCH_AGENT_CODE_FOR_EXTERNAL"  parameterClass="java.lang.String" resultClass="java.lang.String" >
			SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = UPPER(#PARAM#)
	</select>

<insert id="INSERT_DATA_INTO_EXP_BOOKING" parameterClass="cargo.cms.external.bo.BookDlvSlotBO">
	 INSERT INTO EXP_BOOKING(
      BOOKING_NO,
 	  CUST_NO,
	  BOOKING_DATE,
      TRUCK,
      CR_USER_ID,
      CR_DATE,
      LM_USER_ID,
      LM_DATE,
      TIME_SLOT_FROM,
      TIME_SLOT_TO, PURPOSE, DOCK_PURPOSE, EXP_DURATION, POOL_ID)
      VALUES(
      lpad(lpad(BOOK_DLV_SLOT_SEQ.nextval,10,'0'),11,'B'),
      #agentCode#,
      #cdate#,
      #truckNo#,
      #userID#,
      sysdate,
      #userID#,
      sysdate,
      #timeSlotFrom#,
      #timeSlotTo#, #bkgPurpose#, #dockPurpose#, #expDuration#, #poolId#
      )
</insert>
	
<insert id="INSERT_DATA_INTO_EXP_BOOKING_DTL" parameterClass="cargo.cms.external.bo.BookDlvSlotBO">
	 INSERT INTO EXP_BOOKING_DTL(
     BOOKING_NO,
     DOC_LINE_NO,
     ERCL_NO,
     CR_USER_ID,
     CR_DATE,
     LM_USER_ID,
     LM_DATE)
      VALUES(
      #bookingNo#,
      #docLineNo#,
      #erclNo#,
      #userID#,
      sysdate,
      #userID#,
      sysdate
      )
</insert>
	
	<insert id="INSERT_EXP_BOOKING_FOR_BOOKING" parameterClass="cargo.cms.external.bo.BookDlvSlotBO">
	 INSERT INTO EXP_BOOKING(
      BOOKING_NO,
      ERCL_NO,
      BOOKING_DATE,
      TRUCK,
      CR_USER_ID,
      CR_DATE,
      LM_USER_ID,
      LM_DATE,
      TIME_SLOT_FROM,
      TIME_SLOT_TO, PURPOSE, DOCK_PURPOSE, EXP_DURATION)
      VALUES(
      lpad(lpad(BOOK_DLV_SLOT_SEQ.nextval,10,'0'),11,'B'),
      #erclNo#,
      #cdate#,
      #truckNo#,
      #userID#,
      sysdate,
      #userID#,
      sysdate,
      #timeSlotFrom#,
      #timeSlotTo#, #bkgPurpose#, #dockPurpose#, #expDuration#
      )
	</insert>
	<update id="UPDATE_EXP_BOOKING_FOR_BOOKING" parameterClass="cargo.cms.external.bo.BookDlvSlotBO">
		UPDATE EXP_BOOKING 
		   SET 
		       BOOKING_NO=#bookingNo#,
			   ERCL_NO=#erclNo#,
			   BOOKING_DATE=#cdate#,
			   TRUCK=#truckNo#,
			   CR_USER_ID=#userID#,
			   CR_DATE=sysdate,
			   LM_USER_ID=#userID#,
			   LM_DATE=sysdate,
			   TIME_SLOT_FROM = #timeSlotFrom#,
			   TIME_SLOT_TO =  #timeSlotTo#		
		 WHERE 
			   ERCL_NO = #erclNo# 
	</update>
	<select id="FETCH_ASSGN_BY_NAME_IN_EXPORT"  parameterClass="java.lang.String" resultClass="java.lang.String" >
		SELECT CUST_COMPANY.CODE_DESC FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = UPPER(#PARAM#)
	</select>
	<select id="FETCH_ASSGN_BY_NAME_IN_EXPORT1"  parameterClass="java.lang.String" resultClass="java.lang.String" >
		SELECT CUST_COMPANY.CODE_DESC FROM CUST_COMPANY WHERE CUST_COMPANY.CODE = #PARAM#
	</select>
	
	<update id="INSERT_EXP_BOOKING_FOR_ASSIGNING" parameterClass="cargo.cms.external.bo.BookDlvSlotBO">
		UPDATE EXP_PRE_RCL_HD 
		   SET 
			   TRUCKER_CUST_NO =(SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #truckName#),
			   ASSIGN_DATE = sysdate,
			   ASSIGN_BY = #assignBy#,
			   CR_USER_ID=#userID#,
			   CR_DATE=sysdate,
			   LM_USER_ID=#userID#,
			   LM_DATE=sysdate		
		 WHERE 
			   PRE_RCL_NO = #erclNo# 
	</update>
	
	<select id="FETCH_AGENT_DETAILS_IN_CUSTCOMPANY"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="cargo.cms.external.bo.BookDlvSlotBO" >
		SELECT AGENT_YN AS agent_yn, TRUCKER_YN AS trucker_yn	 FROM	 CUST_COMPANY,SEC_USER  WHERE	CUST_COMPANY.CODE = SEC_USER.CUST_NO  AND SEC_USER.CODE = UPPER(#userID#)
	</select>
	<select id="FETCH_ERCL_LIST"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="cargo.cms.external.bo.BookDlvSlotBO" >
	SELECT MIN(ERCLNO) AS ERCLNO,AWBNO,AWBNODISPLAY,AWBNOPFX,AWBNOSFX,AGENTNAME,TRUCKNAME,ULDNO,DESTINATION,CARRIER,ERCLPC,ERCLWT,CUSTNO,SPECIALREQ,SHCCODE1,SHCCODE2,SHCCODE3,LASTMODIFIEDDATE,ASSIGNMENTDATE,AGENTSTATUS,STATUS,SHCCODE,CHECKDISABLESTATUS FROM (
		SELECT
		  RCL.PRE_RCL_NO AS erclNo,
			decode(RCL.PPK_TYPE,'M',NULL,RCL.AWB_NO) AS awbNo,
	  		decode(RCL.PPK_TYPE,'M',NULL,RCL.AWB_NO) AS awbNoDisplay,
	  		decode(RCL.PPK_TYPE,'M',NULL,substr(RCL.AWB_NO,0,3)) as awbNoPfx,
	  		decode(RCL.PPK_TYPE,'M',NULL,substr(RCL.AWB_NO,4,8)) as awbNoSfx,
		  RCL.CUST_NO,
		  (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = RCL.CUST_NO) AS agentName,
		  (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = (SELECT TRUCKER_CUST_NO FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = RCL.PRE_RCL_NO)) AS truckName,
		  decode(RCL.PPK_TYPE,'M',RCL.ULD_KEY,NULL) AS uldNo,
		  RCL.AWB_DEST AS destination,
		  RCL.CARR_CODE AS carrier,
		  RCL.TTL_PCS AS erclPc,
		  RCL.TTL_WT AS erclWt,
		  RCL.CUST_NO AS custNo,
		  (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE = RCL.SPL_LOAD_REQ AND CODE_TYPE = 'SPL_LOAD_REQUIREMENT')AS specialReq,
		  RCL.SPL_CODE1 AS shcCode1,
		  RCL.SPL_CODE2 AS shcCode2,
		  RCL.SPL_CODE3 AS shcCode3,
		  TO_CHAR(RCL.ASSIGN_DATE,'DDMONYY HH24:MI:SS') AS lastModifiedDate,
		  TO_CHAR(RCL.ASSIGN_DATE,'DDMONYY') AS assignmentDate,
		  DECODE(CUST.AGENT_YN,'Y','Agent',DECODE(CUST.TRUCKER_YN,'Y','Trucker','null')) as agentStatus,
		  (DECODE((SELECT COUNT(TRUCKER_CUST_NO) FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = RCL.PRE_RCL_NO),'0',DECODE((SELECT COUNT(ERCL_NO) FROM EXP_BOOKING_DTL WHERE ERCL_NO = RCL.PRE_RCL_NO),'0','NOT BOOKED','BOOKED'),'ASSIGNED')) AS status,
		  (decode(spl_code1, null, '', decode(spl_code2,'',spl_code1,'/'))
		               || decode(spl_code2, null, '',decode(spl_code3,'',spl_code2,'/'))
		               || decode(spl_code3, null, '', spl_code3)) AS shcCode,
	    (DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE1),'',DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE2),'',DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE3),'','N','Y'),'Y'),'Y')) AS checkDisableStatus
		FROM
		EXP_PRE_RCL_HD RCL,
		CUST_COMPANY CUST,SEC_USER SEC 
		WHERE
		RCL.STATUS = 'SUBMITTED'				
		AND CUST.CODE = RCL.CUST_NO
		AND CUST.CODE = SEC.CUST_NO 
		AND SEC.CODE = UPPER(#userID#)
		AND RCL.VOID_DATE IS NULL 
		AND RCL.VOID_USER_ID IS NULL
		<!--
		AND RCL.PRE_RCL_NO NOT IN (select HD.PRE_RCL_NO FROM exp_pre_rcl_hd hd,exp_rcl_hd dtl where hd.pre_rcl_no = dtl.pre_rcl_no and hd.cust_no = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND UPPER(SEC_USER.CODE) = UPPER(#userID#))) -->
		<isNotEmpty prepend="AND" property="awbNo">
			RCL.AWB_NO = NVL(UPPER(#awbNo#),RCL.AWB_NO)
		</isNotEmpty>		
		<isNotEmpty  property="uldNo">
			and (RCL.ULD_KEY = #uldNo# OR exists (select null from EXP_PRE_RCL_dtl DTL where  DTL.PRE_RCL_NO =  RCL.PRE_RCL_NO and  DTL.ULD_KEY = #uldNo#) )
		</isNotEmpty>		
		<isNotEmpty prepend="AND" property="agentName">
			CUST.CODE_DESC = NVL(UPPER(#agentName#),CUST.CODE_DESC)
		</isNotEmpty>	
		<isEqual property="erclType" compareValue="All">
		<isNotEmpty prepend="AND" property="erclType">
		    RCL.PPK_TYPE = NVL(DECODE(#erclType#,'All','',#erclType#),RCL.PPK_TYPE)
		</isNotEmpty>	
		</isEqual>	
		<isNotEqual property="erclType" compareValue="All">
		<isNotEmpty prepend="AND" property="erclType">
		    RCL.PPK_TYPE = DECODE(#erclType#,'Prepack','P',DECODE(#erclType#,'Bulk','B',DECODE(#erclType#,'Mix Prepack','M','')))
		</isNotEmpty>	
		</isNotEqual>	
		<isNotEmpty property="erclDateFrom">
		<isNotEmpty property="erclDateTo">
		AND RCL.CR_DATE BETWEEN TO_DATE(#erclDateFrom#,'DDMONYY') AND TO_DATE(#erclDateTo#,'DDMONYY')+1
		</isNotEmpty>
		</isNotEmpty>)
		GROUP BY AWBNO,AWBNODISPLAY,AWBNOPFX,AWBNOSFX,AGENTNAME,TRUCKNAME,ULDNO,DESTINATION,CARRIER,ERCLPC,ERCLWT,CUSTNO,SPECIALREQ,SHCCODE1,SHCCODE2,SHCCODE3,LASTMODIFIEDDATE,ASSIGNMENTDATE,AGENTSTATUS,STATUS,SHCCODE,CHECKDISABLESTATUS
		<dynamic prepend="ORDER BY ">
       			 <isNotEmpty property="sortOrder.sortField">
             		$sortOrder.sortField$
        		</isNotEmpty>
 		</dynamic>			
</select>
	<select id="sqlGetExpBkgIsERCLAccepted" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT DECODE(COUNT(1), 0, 'N', 'Y') FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = #PARAM# AND STATUS = 'CONFIRMED'
	</select>
	<select id="FETCH_ERCL_LISTCOUNT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
		SELECT
		  COUNT(1) AS totalRowCount
		FROM
		EXP_PRE_RCL_HD RCL,
		CUST_COMPANY CUST,SEC_USER SEC 
		WHERE
		RCL.STATUS = 'SUBMITTED'				
		AND CUST.CODE = RCL.CUST_NO
		AND CUST.CODE = SEC.CUST_NO 
		AND SEC.CODE = UPPER(#userID#)
		AND RCL.VOID_DATE IS NULL 
		AND RCL.VOID_USER_ID IS NULL
		AND RCL.PRE_RCL_NO NOT IN (select HD.PRE_RCL_NO FROM exp_pre_rcl_hd hd,exp_rcl_hd dtl where hd.pre_rcl_no = dtl.pre_rcl_no and hd.cust_no = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)))
		<isNotEmpty prepend="AND" property="awbNo">
			RCL.AWB_NO = NVL(UPPER(#awbNo#),RCL.AWB_NO)
		</isNotEmpty>		
		<isNotEmpty property="uldNo">
			AND (RCL.ULD_KEY = #uldNo# OR exists (select null from EXP_PRE_RCL_dtl DTL where  DTL.PRE_RCL_NO =  RCL.PRE_RCL_NO and  DTL.ULD_KEY = #uldNo#))
		</isNotEmpty>		
		<isNotEmpty prepend="AND" property="agentName">
			CUST.CODE_DESC = NVL(UPPER(#agentName#),CUST.CODE_DESC)
		</isNotEmpty>	
		<isEqual property="erclType" compareValue="All">
		<isNotEmpty prepend="AND" property="erclType">
		    RCL.PPK_TYPE = NVL(DECODE(#erclType#,'All','',#erclType#),RCL.PPK_TYPE)
		</isNotEmpty>	
		</isEqual>	
		<isNotEqual property="erclType" compareValue="All">
		<isNotEmpty prepend="AND" property="erclType">
		    RCL.PPK_TYPE = DECODE(#erclType#,'Prepack','P',DECODE(#erclType#,'Bulk','B',DECODE(#erclType#,'Mix Prepack','M','')))
		</isNotEmpty>	
		</isNotEqual>	
		<isNotEmpty property="erclDateFrom">
		<isNotEmpty property="erclDateTo">
		AND RCL.CR_DATE BETWEEN TO_DATE(#erclDateFrom#,'DDMONYY') AND TO_DATE(#erclDateTo#,'DDMONYY')+1
		</isNotEmpty>
		</isNotEmpty> 
</select>



<select id="FETCH_ERCL_LIST_FOR_TRUCKER"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="cargo.cms.external.bo.BookDlvSlotBO" >
SELECT MIN(ERCLNO) AS ERCLNO,AWBNO,AWBNODISPLAY,AWBNOPFX,AWBNOSFX,AGENTNAME,TRUCKNAME,ULDNO,DESTINATION,CARRIER,ERCLPC,ERCLWT,CUSTNO,SPECIALREQ,SHCCODE1,SHCCODE2,SHCCODE3,LASTMODIFIEDDATE,ASSIGNMENTDATE,AGENTSTATUS,STATUS,SHCCODE,CHECKDISABLESTATUS FROM (
		SELECT
	  RCL.PRE_RCL_NO AS erclNo,
	  decode(RCL.PPK_TYPE,'M',NULL,RCL.AWB_NO) AS awbNo,
	  decode(RCL.PPK_TYPE,'M',NULL,RCL.AWB_NO) AS awbNoDisplay,
	  decode(RCL.PPK_TYPE,'M',NULL,substr(RCL.AWB_NO,0,3)) as awbNoPfx,
	  decode(RCL.PPK_TYPE,'M',NULL,substr(RCL.AWB_NO,4,8)) as awbNoSfx,
	  decode(RCL.TRUCKER_CUST_NO,'',decode((select count(code) from cust_company where code=rcl.cust_no and trucker_yn = 'Y'),'1',(select code_desc from cust_company where code = rcl.cust_no),''),(select code_desc from cust_company where code = rcl.cust_no)) AS agentName, 
	 (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = (SELECT TRUCKER_CUST_NO FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = RCL.PRE_RCL_NO)) AS truckName,
	   decode(RCL.PPK_TYPE,'M',RCL.ULD_KEY,NULL) AS uldNo,
	  RCL.AWB_DEST AS destination,
	  RCL.CARR_CODE AS carrier,
	  RCL.TTL_PCS AS erclPc,
	  RCL.TTL_WT AS erclWt,
	  RCL.CUST_NO AS custNo,
	  (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE = RCL.SPL_LOAD_REQ AND CODE_TYPE = 'SPL_LOAD_REQUIREMENT')AS specialReq,
	  RCL.SPL_CODE1 AS shcCode1,
	  RCL.SPL_CODE2 AS shcCode2,
	  RCL.SPL_CODE3 AS shcCode3,
	  TO_CHAR(RCL.ASSIGN_DATE,'DDMONYY HH24:MI:SS') AS lastModifiedDate,
	  TO_CHAR(RCL.ASSIGN_DATE,'DDMONYY') AS assignmentDate,
	  DECODE(CUST.AGENT_YN,'Y','Agent',DECODE(CUST.TRUCKER_YN,'Y','Trucker','null')) as agentStatus,
	  DECODE((SELECT COUNT(ERCL_NO) FROM EXP_BOOKING_DTL WHERE ERCL_NO = RCL.PRE_RCL_NO),'0','NOT BOOKED','BOOKED') AS status,
	  (decode(spl_code1, null, '', decode(spl_code2,'',spl_code1,'/'))
	               || decode(spl_code2, null, '',decode(spl_code3,'',spl_code2,'/'))
	               || decode(spl_code3, null, '', spl_code3)) AS shcCode,
	  (DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE1),'',DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE2),'',DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE3),'','N','Y'),'Y'),'Y')) AS checkDisableStatus             
	 FROM
	EXP_PRE_RCL_HD RCL, 	
	CUST_COMPANY CUST,SEC_USER SEC  
	WHERE	 
	(CUST.CODE =RCL.CUST_NO OR CUST.CODE = RCL.TRUCKER_CUST_NO) AND CUST.CODE = SEC.CUST_NO AND SEC.CODE = UPPER(#userID#) AND RCL.VOID_DATE IS NULL AND RCL.VOID_USER_ID IS NULL AND
	RCL.PRE_RCL_NO IN 
		(SELECT PRE_RCL_NO FROM EXP_PRE_RCL_HD WHERE 
		CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) AND AGENT_YN='Y') 
		OR TRUCKER_CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) AND TRUCKER_YN = 'Y')
	AND PRE_RCL_NO NOT IN (SELECT ERCL_NO FROM EXP_BOOKING_DTL WHERE BOOKING_NO IN (SELECT BOOKING_NO FROM EXP_BOOKING ))
	UNION ALL
	SELECT ERCL_NO  AS ERCL_NO FROM EXP_BOOKING_DTL WHERE BOOKING_NO IN (
				SELECT BOOKING_NO FROM EXP_BOOKING WHERE CUST_NO = 
					(SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) 
					AND TRUCKER_YN='Y')))
					<!--  
					AND RCL.PRE_RCL_NO NOT IN (select HD.PRE_RCL_NO FROM exp_pre_rcl_hd hd,exp_rcl_hd dtl where hd.pre_rcl_no = dtl.pre_rcl_no and hd.cust_no = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND UPPER(SEC_USER.CODE) = UPPER(#userID#))) -->
	<isNotEmpty prepend="AND" property="awbNo">
		RCL.AWB_NO = NVL(UPPER(#awbNo#),RCL.AWB_NO)
	</isNotEmpty>		
	<isNotEmpty property="uldNo">
		 and (RCL.ULD_KEY = #uldNo# OR exists (select null from EXP_PRE_RCL_dtl DTL where  DTL.PRE_RCL_NO =  RCL.PRE_RCL_NO and  DTL.ULD_KEY = #uldNo#))
	</isNotEmpty>		
	<isNotEmpty prepend="AND" property="agentName">
		RCL.CUST_NO = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = UPPER(#agentName#))
	</isNotEmpty>	
	<isEqual property="erclType" compareValue="All">
	<isNotEmpty prepend="AND" property="erclType">
	    RCL.PPK_TYPE = NVL(DECODE(#erclType#,'All','',#erclType#),RCL.PPK_TYPE)
	</isNotEmpty>	
	</isEqual>	
	<isNotEqual property="erclType" compareValue="All">
	<isNotEmpty prepend="AND" property="erclType">
	    RCL.PPK_TYPE = DECODE(#erclType#,'Prepack','P',DECODE(#erclType#,'Bulk','B',DECODE(#erclType#,'Mix Prepack','M','')))
	</isNotEmpty>	
	</isNotEqual>	
	<isNotEmpty property="erclDateFrom">
	<isNotEmpty property="erclDateTo">
	AND RCL.CR_DATE BETWEEN TO_DATE(#erclDateFrom#,'DDMONYY') AND TO_DATE(#erclDateTo#,'DDMONYY')+1
	</isNotEmpty>
	</isNotEmpty>)
	GROUP BY AWBNO,AWBNODISPLAY,AWBNOPFX,AWBNOSFX,AGENTNAME,TRUCKNAME,ULDNO,DESTINATION,CARRIER,ERCLPC,ERCLWT,CUSTNO,SPECIALREQ,SHCCODE1,SHCCODE2,SHCCODE3,LASTMODIFIEDDATE,ASSIGNMENTDATE,AGENTSTATUS,STATUS,SHCCODE,CHECKDISABLESTATUS
	<dynamic prepend="ORDER BY ">
       			 <isNotEmpty property="sortOrder.sortField">
             		$sortOrder.sortField$
        		</isNotEmpty>
 		</dynamic>			
</select>

<select id="FETCH_ERCL_LIST_FOR_TRUCKERCOUNT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
		SELECT
	  COUNT(1) AS totalRowCount             
	 FROM
	EXP_PRE_RCL_HD RCL, 
	CUST_COMPANY CUST,SEC_USER SEC  
	WHERE
	(CUST.CODE =RCL.CUST_NO OR CUST.CODE = RCL.TRUCKER_CUST_NO) AND CUST.CODE = SEC.CUST_NO AND SEC.CODE = UPPER(#userID#) AND RCL.VOID_DATE IS NULL AND RCL.VOID_USER_ID IS NULL AND  
	RCL.PRE_RCL_NO IN 
		(SELECT PRE_RCL_NO FROM EXP_PRE_RCL_HD WHERE 
		CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) AND AGENT_YN='Y') 
		OR TRUCKER_CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) AND TRUCKER_YN = 'Y')
	AND PRE_RCL_NO NOT IN (SELECT ERCL_NO FROM EXP_BOOKING_DTL WHERE BOOKING_NO IN (SELECT BOOKING_NO FROM EXP_BOOKING ))
	UNION ALL
	SELECT ERCL_NO  AS ERCL_NO FROM EXP_BOOKING_DTL WHERE BOOKING_NO IN (
				SELECT BOOKING_NO FROM EXP_BOOKING WHERE CUST_NO = 
					(SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) 
					AND TRUCKER_YN='Y')))
					AND RCL.PRE_RCL_NO NOT IN (select HD.PRE_RCL_NO FROM exp_pre_rcl_hd hd,exp_rcl_hd dtl where hd.pre_rcl_no = dtl.pre_rcl_no and hd.cust_no = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)))
	<isNotEmpty prepend="AND" property="awbNo">
		RCL.AWB_NO = NVL(UPPER(#awbNo#),RCL.AWB_NO)
	</isNotEmpty>		
	<isNotEmpty property="uldNo">
		 and (RCL.ULD_KEY = #uldNo# OR exists (select null from EXP_PRE_RCL_dtl DTL where  DTL.PRE_RCL_NO =  RCL.PRE_RCL_NO and  DTL.ULD_KEY = #uldNo#))
	</isNotEmpty>		
	<isNotEmpty prepend="AND" property="agentName">
		RCL.CUST_NO = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = UPPER(#agentName#))
	</isNotEmpty>	
	<isEqual property="erclType" compareValue="All">
	<isNotEmpty prepend="AND" property="erclType">
	    RCL.PPK_TYPE = NVL(DECODE(#erclType#,'All','',#erclType#),RCL.PPK_TYPE)
	</isNotEmpty>	
	</isEqual>	
	<isNotEqual property="erclType" compareValue="All">
	<isNotEmpty prepend="AND" property="erclType">
	    RCL.PPK_TYPE = DECODE(#erclType#,'Prepack','P',DECODE(#erclType#,'Bulk','B',DECODE(#erclType#,'Mix Prepack','M','')))
	</isNotEmpty>	
	</isNotEqual>	
	<isNotEmpty property="erclDateFrom">
	<isNotEmpty property="erclDateTo">
	AND RCL.CR_DATE BETWEEN TO_DATE(#erclDateFrom#,'DDMONYY') AND TO_DATE(#erclDateTo#,'DDMONYY')+1
	</isNotEmpty>
	</isNotEmpty> 
</select>
<select id="fetchErclListForTruckerAndAgent"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="cargo.cms.external.bo.BookDlvSlotBO" >
SELECT MIN(ERCLNO) AS ERCLNO,AWBNO,AWBNODISPLAY,AWBNOPFX,AWBNOSFX,AGENTNAME,TRUCKNAME,ULDNO,DESTINATION,CARRIER,ERCLPC,ERCLWT,CUSTNO,SPECIALREQ,SHCCODE1,SHCCODE2,SHCCODE3,LASTMODIFIEDDATE,ASSIGNMENTDATE,AGENTSTATUS,STATUS,SHCCODE,CHECKDISABLESTATUS FROM (
	SELECT
	  RCL.PRE_RCL_NO AS erclNo,
	  decode(RCL.PPK_TYPE,'M',NULL,RCL.AWB_NO) AS awbNo,
	  decode(RCL.PPK_TYPE,'M',NULL,RCL.AWB_NO) AS awbNoDisplay,
	  decode(RCL.PPK_TYPE,'M',NULL,substr(RCL.AWB_NO,0,3)) as awbNoPfx,
	  decode(RCL.PPK_TYPE,'M',NULL,substr(RCL.AWB_NO,4,8)) as awbNoSfx,
	  decode(RCL.TRUCKER_CUST_NO,'',decode((select count(code) from cust_company where code=rcl.cust_no and trucker_yn = 'Y'),'1',(select code_desc from cust_company where code = rcl.cust_no),''),(select code_desc from cust_company where code = rcl.cust_no)) AS agentName, 
	 (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = (SELECT TRUCKER_CUST_NO FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = RCL.PRE_RCL_NO)) AS truckName,
		decode(RCL.PPK_TYPE,'M',RCL.ULD_KEY,NULL) AS uldNo,
	  RCL.AWB_DEST AS destination,
	  RCL.CARR_CODE AS carrier,
	  RCL.TTL_PCS AS erclPc,
	  RCL.TTL_WT AS erclWt,
	  RCL.CUST_NO AS custNo,
	  (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE = RCL.SPL_LOAD_REQ AND CODE_TYPE = 'SPL_LOAD_REQUIREMENT')AS specialReq,
	  RCL.SPL_CODE1 AS shcCode1,
	  RCL.SPL_CODE2 AS shcCode2,
	  RCL.SPL_CODE3 AS shcCode3,
	  TO_CHAR(RCL.ASSIGN_DATE,'DDMONYY HH24:MI:SS') AS lastModifiedDate,
	  TO_CHAR(RCL.ASSIGN_DATE,'DDMONYY') AS assignmentDate,
	  DECODE(CUST.AGENT_YN,'Y','Agent',DECODE(CUST.TRUCKER_YN,'Y','Trucker','null')) as agentStatus,
	  DECODE((SELECT COUNT(ERCL_NO) FROM EXP_BOOKING_DTL WHERE ERCL_NO = RCL.PRE_RCL_NO),'0','NOT BOOKED','BOOKED') AS status,
	  (decode(spl_code1, null, '', decode(spl_code2,'',spl_code1,'/'))
	               || decode(spl_code2, null, '',decode(spl_code3,'',spl_code2,'/'))
	               || decode(spl_code3, null, '', spl_code3)) AS shcCode,
	  (DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE1),'',DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE2),'',DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE3),'','N','Y'),'Y'),'Y')) AS checkDisableStatus             
	 FROM
	EXP_PRE_RCL_HD RCL, 	
	CUST_COMPANY CUST,SEC_USER SEC  
	WHERE RCL.status != 'CONFIRMED' and	 
	(CUST.CODE =RCL.CUST_NO OR CUST.CODE = RCL.TRUCKER_CUST_NO) AND CUST.CODE = SEC.CUST_NO AND SEC.CODE = UPPER(#userID#) AND RCL.VOID_DATE IS NULL AND RCL.VOID_USER_ID IS NULL AND 
	RCL.PRE_RCL_NO IN 
		(SELECT PRE_RCL_NO FROM EXP_PRE_RCL_HD WHERE 
		CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) AND AGENT_YN='Y') 
		OR TRUCKER_CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) AND TRUCKER_YN = 'Y')
	AND PRE_RCL_NO NOT IN (SELECT ERCL_NO FROM EXP_BOOKING_DTL WHERE BOOKING_NO IN (SELECT BOOKING_NO FROM EXP_BOOKING ))
	UNION ALL
	SELECT ERCL_NO  AS ERCL_NO FROM EXP_BOOKING_DTL WHERE BOOKING_NO IN (
				SELECT BOOKING_NO FROM EXP_BOOKING WHERE CUST_NO = 
					(SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) 
					AND AGENT_YN = 'Y' AND TRUCKER_YN='Y')))
	<isNotEmpty prepend="AND" property="awbNo">
		RCL.AWB_NO = NVL(UPPER(#awbNo#),RCL.AWB_NO)
	</isNotEmpty>		
	<isNotEmpty property="uldNo">
		 and (RCL.ULD_KEY = #uldNo# OR exists (select null from EXP_PRE_RCL_dtl DTL where  DTL.PRE_RCL_NO =  RCL.PRE_RCL_NO and  DTL.ULD_KEY = #uldNo#))
	</isNotEmpty>		
	<isNotEmpty prepend="AND" property="agentName">
		RCL.CUST_NO = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = UPPER(#agentName#))
	</isNotEmpty>	
	<isEqual property="erclType" compareValue="All">
	<isNotEmpty prepend="AND" property="erclType">
	    RCL.PPK_TYPE = NVL(DECODE(#erclType#,'All','',#erclType#),RCL.PPK_TYPE)
	</isNotEmpty>	
	</isEqual>	
	<isNotEqual property="erclType" compareValue="All">
	<isNotEmpty prepend="AND" property="erclType">
	    RCL.PPK_TYPE = DECODE(#erclType#,'Prepack','P',DECODE(#erclType#,'Bulk','B',DECODE(#erclType#,'Mix Prepack','M','')))
	</isNotEmpty>	
	</isNotEqual>	
	<isNotEmpty property="erclDateFrom">
	<isNotEmpty property="erclDateTo">
	AND RCL.CR_DATE BETWEEN TO_DATE(#erclDateFrom#,'DDMONYY') AND TO_DATE(#erclDateTo#,'DDMONYY')+1
	</isNotEmpty>
	</isNotEmpty>)GROUP BY AWBNO,AWBNODISPLAY,AWBNOPFX,AWBNOSFX,AGENTNAME,TRUCKNAME,ULDNO,DESTINATION,CARRIER,ERCLPC,ERCLWT,CUSTNO,SPECIALREQ,SHCCODE1,SHCCODE2,SHCCODE3,LASTMODIFIEDDATE,ASSIGNMENTDATE,AGENTSTATUS,STATUS,SHCCODE,CHECKDISABLESTATUS 
	<dynamic prepend="ORDER BY ">
       			 <isNotEmpty property="sortOrder.sortField">
             		$sortOrder.sortField$
        		</isNotEmpty>
 	</dynamic>			
</select>
<select id="sqlGetTruckerName"  parameterClass="java.lang.String" resultClass="java.lang.String" >
SELECT CUST_COMPANY.CODE_DESC truckName FROM CUST_COMPANY WHERE  CUST_COMPANY.CODE = UPPER(#truckNo#) AND TRUCKER_YN = 'Y'
</select>
<select id="fetchErclListForTruckerAndAgentCOUNT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
	SELECT COUNT(1) FROM (
	SELECT MIN(ERCLNO) AS ERCLNO,AWBNO,AWBNODISPLAY,AWBNOPFX,AWBNOSFX,AGENTNAME,TRUCKNAME,ULDNO,DESTINATION,CARRIER,ERCLPC,ERCLWT,CUSTNO,SPECIALREQ,SHCCODE1,SHCCODE2,SHCCODE3,LASTMODIFIEDDATE,ASSIGNMENTDATE,AGENTSTATUS,STATUS,SHCCODE,CHECKDISABLESTATUS FROM (
	SELECT
	  RCL.PRE_RCL_NO AS erclNo,
	  decode(RCL.PPK_TYPE,'M',NULL,RCL.AWB_NO) AS awbNo,
	  decode(RCL.PPK_TYPE,'M',NULL,RCL.AWB_NO) AS awbNoDisplay,
	  decode(RCL.PPK_TYPE,'M',NULL,substr(RCL.AWB_NO,0,3)) as awbNoPfx,
	  decode(RCL.PPK_TYPE,'M',NULL,substr(RCL.AWB_NO,4,8)) as awbNoSfx,
	  decode(RCL.TRUCKER_CUST_NO,'',decode((select count(code) from cust_company where code=rcl.cust_no and trucker_yn = 'Y'),'1',(select code_desc from cust_company where code = rcl.cust_no),''),(select code_desc from cust_company where code = rcl.cust_no)) AS agentName, 
	 (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = (SELECT TRUCKER_CUST_NO FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = RCL.PRE_RCL_NO)) AS truckName,
		decode(RCL.PPK_TYPE,'M',RCL.ULD_KEY,NULL) AS uldNo,
	  RCL.AWB_DEST AS destination,
	  RCL.CARR_CODE AS carrier,
	  RCL.TTL_PCS AS erclPc,
	  RCL.TTL_WT AS erclWt,
	  RCL.CUST_NO AS custNo,
	  (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE = RCL.SPL_LOAD_REQ AND CODE_TYPE = 'SPL_LOAD_REQUIREMENT')AS specialReq,
	  RCL.SPL_CODE1 AS shcCode1,
	  RCL.SPL_CODE2 AS shcCode2,
	  RCL.SPL_CODE3 AS shcCode3,
	  TO_CHAR(RCL.ASSIGN_DATE,'DDMONYY HH24:MI:SS') AS lastModifiedDate,
	  TO_CHAR(RCL.ASSIGN_DATE,'DDMONYY') AS assignmentDate,
	  DECODE(CUST.AGENT_YN,'Y','Agent',DECODE(CUST.TRUCKER_YN,'Y','Trucker','null')) as agentStatus,
	  DECODE((SELECT COUNT(ERCL_NO) FROM EXP_BOOKING_DTL WHERE ERCL_NO = RCL.PRE_RCL_NO),'0','NOT BOOKED','BOOKED') AS status,
	  (decode(spl_code1, null, '', decode(spl_code2,'',spl_code1,'/'))
	               || decode(spl_code2, null, '',decode(spl_code3,'',spl_code2,'/'))
	               || decode(spl_code3, null, '', spl_code3)) AS shcCode,
	  (DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE1),'',DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE2),'',DECODE((SELECT CODE FROM MAST_SPL_HAND_CODE WHERE BKG_YN = 'N' AND CODE = RCL.SPL_CODE3),'','N','Y'),'Y'),'Y')) AS checkDisableStatus             
	 FROM
	EXP_PRE_RCL_HD RCL, 	
	CUST_COMPANY CUST,SEC_USER SEC  
	WHERE 	 RCL.status != 'CONFIRMED' and 
	(CUST.CODE =RCL.CUST_NO OR CUST.CODE = RCL.TRUCKER_CUST_NO) AND CUST.CODE = SEC.CUST_NO AND SEC.CODE = UPPER(#userID#) AND RCL.VOID_DATE IS NULL AND RCL.VOID_USER_ID IS NULL AND 
	RCL.PRE_RCL_NO IN 
		(SELECT PRE_RCL_NO FROM EXP_PRE_RCL_HD WHERE 
		CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) AND AGENT_YN='Y') 
		OR TRUCKER_CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) AND TRUCKER_YN = 'Y')
	AND PRE_RCL_NO NOT IN (SELECT ERCL_NO FROM EXP_BOOKING_DTL WHERE BOOKING_NO IN (SELECT BOOKING_NO FROM EXP_BOOKING ))
	UNION ALL
	SELECT ERCL_NO  AS ERCL_NO FROM EXP_BOOKING_DTL WHERE BOOKING_NO IN (
				SELECT BOOKING_NO FROM EXP_BOOKING WHERE CUST_NO = 
					(SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#) 
					AND AGENT_YN = 'Y' AND TRUCKER_YN='Y')))
	<isNotEmpty prepend="AND" property="awbNo">
		RCL.AWB_NO = NVL(UPPER(#awbNo#),RCL.AWB_NO)
	</isNotEmpty>		
	<isNotEmpty property="uldNo">
		 and (RCL.ULD_KEY = #uldNo# OR exists (select null from EXP_PRE_RCL_dtl DTL where  DTL.PRE_RCL_NO =  RCL.PRE_RCL_NO and  DTL.ULD_KEY = #uldNo#))
	</isNotEmpty>		
	<isNotEmpty prepend="AND" property="agentName">
		RCL.CUST_NO = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = UPPER(#agentName#))
	</isNotEmpty>	
	<isEqual property="erclType" compareValue="All">
	<isNotEmpty prepend="AND" property="erclType">
	    RCL.PPK_TYPE = NVL(DECODE(#erclType#,'All','',#erclType#),RCL.PPK_TYPE)
	</isNotEmpty>	
	</isEqual>	
	<isNotEqual property="erclType" compareValue="All">
	<isNotEmpty prepend="AND" property="erclType">
	    RCL.PPK_TYPE = DECODE(#erclType#,'Prepack','P',DECODE(#erclType#,'Bulk','B',DECODE(#erclType#,'Mix Prepack','M','')))
	</isNotEmpty>	
	</isNotEqual>	
	<isNotEmpty property="erclDateFrom">
	<isNotEmpty property="erclDateTo">
	AND RCL.CR_DATE BETWEEN TO_DATE(#erclDateFrom#,'DDMONYY') AND TO_DATE(#erclDateTo#,'DDMONYY')+1
	</isNotEmpty>
	</isNotEmpty>
	)
	GROUP BY AWBNO,AWBNODISPLAY,AWBNOPFX,AWBNOSFX,AGENTNAME,TRUCKNAME,ULDNO,DESTINATION,CARRIER,ERCLPC,ERCLWT,CUSTNO,SPECIALREQ,SHCCODE1,SHCCODE2,SHCCODE3,LASTMODIFIEDDATE,ASSIGNMENTDATE,AGENTSTATUS,STATUS,SHCCODE,CHECKDISABLESTATUS
	)
</select>

<select id="FETCH_TODAY_TIMESLOT_LIST"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="cargo.cms.external.bo.BookDlvSlotBO" >
<![CDATA[
SELECT 
            TIMESLOT_FROM AS timeSlotFrom,
            TIMESLOT_TO AS timeSlotTo
        FROM
            TIME_SLOT 
       WHERE TIMESLOT_FROM > (SELECT 
                                   TO_NUMBER(to_char(sysdate,'HH24')) + 
                                   (select rule_value from cmsrules where rule_code='BOOK_DLV_SLOT_CREATION') ||':'|| 
                                   TO_NUMBER(to_char(sysdate,'MI')) FROM DUAL)
             and TIMESLOT_FROM not in(select (substr(time_slot_from,0,2)||':'||substr(time_slot_from,3,2)) AS timeSlotFrom
                                          from
                                               exp_booking
                                          where
                                               booking_date = TO_DATE(#cdate#,'DDMONYY') AND TRUCK=#truckNo#)                    
                                   order by timeSlotFrom 
                                   
  ]]>
</select>
<select id="FETCH_NOT_TODAY_TIMESLOT_LIST"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="cargo.cms.external.bo.BookDlvSlotBO" >
SELECT 
            TIMESLOT_FROM AS timeSlotFrom,
            TIMESLOT_TO AS timeSlotTo
        FROM
            TIME_SLOT 
       where
             TIMESLOT_FROM not in(select (substr(time_slot_from,0,2)||':'||substr(time_slot_from,3,2)) AS timeSlotFrom
                                          from
                                               exp_booking
                                          where
                                               booking_date = TO_DATE(#cdate#,'DDMONYY') AND TRUCK=#truckNo# AND CUST_NO=(SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#))) 
             order by timeSlotFrom 
</select>

<select id="FETCH_TODAY_DATE"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.String" >
SELECT TO_CHAR(SYSDATE,'DDMONYY') FROM DUAL
</select>
 
 <select id="CHECK_TRUCK_NAME"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(1) FROM CUST_COMPANY C WHERE C.TRUCKER_YN = 'Y' AND C.ACTIVE = 'Y' AND C.BLACKLISTED='N' and  C.CODE_DESC = UPPER(#truckName#)
</select>
<select id="CHECK_ERCL_EXISTS_OR_NOT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(1) FROM EXP_BOOKING WHERE ERCL_NO = #erclNo#
</select>
<select id="CHECK_BOOKING_CREATE_OR_NOT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(1) FROM EXP_BOOKING WHERE ERCL_NO = #erclNo# AND BOOKING_NO = 'XXXXXXXXXXX' 
</select>
<select id="CHECK_ASSIGN_CREATE_OR_NOT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(1) FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = #erclNo# AND TRUCKER_CUST_NO IS NOT NULL AND ASSIGN_DATE IS NOT NULL AND ASSIGN_BY IS NOT NULL 
</select>
<select id="CHECK_BOOKING_ASSIGN_CREATE_OR_NOT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(1) FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = #erclNo# AND TRUCKER_CUST_NO IS NOT NULL AND ASSIGN_DATE IS NOT NULL AND ASSIGN_BY IS NOT NULL 
</select>
<select id="CHECK_ERCL_BOOKING_OR_NOT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
SELECT COUNT(1) FROM EXP_BOOKING_DTL WHERE ERCL_NO = #erclNo#
</select>

<select id="CHECK_TRUCK_BOOKING_CREATE_OR_NOT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
            select COUNT(1) from  exp_booking_dtl bookDtl,
                                  exp_booking book
                                  where bookDtl.ercl_no = #erclNo# and 
                                  book.cust_no = (select TRUCKER_CUST_NO from exp_pre_rcl_hd where pre_rcl_no = #erclNo#)
</select>

<delete id="DELETE_EXP_BOOKING_BOOKING_NOT_CREATE" parameterClass="cargo.cms.external.bo.BookDlvSlotBO">
		 UPDATE EXP_PRE_RCL_HD 
		   SET 
			   TRUCKER_CUST_NO =#custNo#,
			   ASSIGN_DATE = #assignmentDate#,
			   ASSIGN_BY = #agentName#
	      WHERE 
			   PRE_RCL_NO = #erclNo# AND TO_CHAR(ASSIGN_DATE,'DDMONYY HH24:MI:SS') = #lastModifiedDate#
</delete>
<delete id="GLS_DELETE_EXP_BOOKING_BOOKING_NOT_CREATE" parameterClass="cargo.cms.external.bo.BookDlvSlotBO">
		 UPDATE EXP_PRE_RCL_HD 
		   SET 
			   TRUCKER_CUST_NO =#custNo#,
			   ASSIGN_DATE = #assignmentDate#,
			   ASSIGN_BY = #agentName#
	      WHERE 
			   PRE_RCL_NO = #erclNo#
</delete>

<select id="FETCH_BOOK_DLV_TC_STATUS" parameterClass="map" resultClass="cargo.cms.external.bo.BookDlvSlotBO">
	select TC_IND AS showTCStatus,TC_ID AS tcId from MAINTAIN_TC WHERE FUNCTION_CODE = #functionCode#
</select>
<select id="NO_OF_BOOKINGS_INEXP_PRE_RCL_HD" parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
	SELECT COUNT(1) FROM EXP_BOOKING WHERE (CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND UPPER(SEC_USER.CODE) = UPPER(#userID#)) OR (CUST_NO=#agentCode#)) AND BOOKING_DATE = #cdate#
</select>
<select id="NO_OF_BOOKINGS_IN_CUST_COMPANY" parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
	SELECT CUST_COMPANY.NO_OF_BOOKING_PERDAY FROM CUST_COMPANY,SEC_USER  WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE =UPPER(#userID#)
	UNION
    SELECT CUST_COMPANY.NO_OF_BOOKING_PERDAY FROM CUST_COMPANY where code=#agentCode#
</select>
<select id="CHECK_ASSIGN_IS_AGENT_OR_NOT" parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
SELECT
	(SELECT COUNT(AGENT_YN) FROM CUST_COMPANY, SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = UPPER(#userID#) AND AGENT_YN = 'Y') +
    (SELECT COUNT(AGENT_YN) FROM CUST_COMPANY WHERE CUST_COMPANY.CODE = #agentCode#) FROM DUAL
</select>
<select id="CHECK_RCL_IS_BOOKING_OR_NOT" parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
	select COUNT(1) from exp_booking_dtl where ercl_no=#erclNo#
</select>	
<select id="FETCH_BOOKING_TIME_LIST" parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="cargo.cms.external.bo.BookDlvSlotBO" >
SELECT 
      LPAD(TIME_SLOT_FROM,4,0) as timeSlotFrom
  FROM
       EXP_BOOKING
  WHERE
       (CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)) or (CUST_NO=#agentCode#)) AND BOOKING_DATE=#cdate#
       AND TRUCK = #truckNo#
</select>

<select id="CHECK_TIME_SLOT_DIFFERENCE" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
 SELECT
       COUNT(1) 
   FROM
       DUAL
 WHERE
      #newTimeSlot#
BETWEEN
       (select TO_CHAR(to_date(#oldTimeSlot#,'DDMONYY hh24:mi') - (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='BOOK_DLV_TIME_DIFF')/24,'DDMONYY HH24:MI') from dual) AND 
       (select TO_CHAR(to_date(#oldTimeSlot#,'DDMONYY hh24:mi') + (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='BOOK_DLV_TIME_DIFF')/24,'DDMONYY HH24:MI') from dual)


</select>

<delete id="DELETE_EXP_BOOKING_BOOKING_CREATE" parameterClass="cargo.cms.external.bo.BookDlvSlotBO">
		UPDATE EXP_BOOKING 
		   SET CUST_NO = #custNo#
		   WHERE ERCL_NO = #erclNo#
</delete>
<select id="CHECK_SHC_IS_VAL_OR_NOT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE
WHERE SPL_TYPE='SPL_VAL'
AND (SPL_CODE = #shcCode1# or
SPL_CODE = #shcCode2# or
spl_CODE = #shcCode3#)
</select>
	
<select id="FETCH_BOOKED_TIME_SLOTS"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="cargo.cms.external.bo.BookDlvSlotBO" >
select (substr(lpad(time_slot_from,4,0),0,2)||':'||substr(lpad(time_slot_from,4,0),3,2)) AS timeSlotFrom
                                          from
                                               exp_booking
                                               where
                                               booking_date = TO_DATE(#cdate#,'DDMONYY') AND TRUCK=#truckNo#                    
                                   order by timeSlotFrom 
</select>
	<!-- Delete eRCL ##start-->
	<select id="select_deleteeRClList" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	select * from
	(  SELECT to_char (rcl_iss_date,'ddmonyy'),   preheader.carr_code AS carr, 
       case when preheader.ppk_type='M' then (select awb_no from EXP_PRE_RCL_BRKDN where pre_rcl_no = preheader.PRE_RCL_NO and awb_no=#awbNo#) else preheader.awb_no end AS awbno,
       preheader.pre_rcl_no as preRclNo,
      to_char(preheader.CR_DATE,'DDMONYY hh24:mi') AS rclsubmissiondate, to_char(preheader.CR_DATE,'DDMONYY') as receptionDate,preheader.ppk_type AS rcltype, decode(preheader.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS rclTypeDescription,
       preheader.awb_dest AS destination, 
        SUBSTR(TRIM(preheader.AWB_NO),1,3)||'-'||SUBSTR(TRIM(preheader.AWB_NO),4)  as awbNoDisplay,
        to_char(preheader.AWB_DATE,'DDMONYY')  as awbDate,
       preheader.uld_type AS uldtype, preheader.uld_no AS uldseqno,
     case when preheader.ppk_type='P' then (select uld_key from exp_pre_rcl_dtl where pre_rcl_no=preheader.PRE_RCL_NO and  uld_key=#uldNo#) else preheader.uld_key end as uldNo, 
       upper(trim(preheader.status)) AS searchStatus,preheader.cust_no as custNo,customer.code_desc as agentName,
       ttl_pcs as pieces,ttl_wt as weight,  null as rclNo, null as rclPieces,null as rclWeight, null as accpMode,null as fltKey,null as fltDate,
    	preheader.SPL_CODE1 as splCode1,preheader.SPL_CODE2 as splCode2,preheader.SPL_CODE3 as splCode3,
    	case when ( select count(*) from exp_uld_awb where rcl_no in(select rcl_no from exp_rcl_hd where pre_rcl_no = preheader.PRE_RCL_NO  ) and manifest_yn='Y')>0 then 'Y' else 'N' end as  manifestyn
  		FROM exp_pre_rcl_hd preheader,cust_company customer      
  		where 
      preheader.cust_no = customer.code  	  	
      and not exists(select pre_rcl_no from exp_rcl_hd where pre_rcl_no = preheader.pre_rcl_no)
      and preheader.status = 'SUBMITTED'
      and preheader.act_acc_date is null and preheader.act_acc_time is null
    union 
   		SELECT to_char (rcl_iss_date,'ddmonyy'),  preheader.carr_code AS carr, 
       case when preheader.ppk_type='M' then (select awb_no from EXP_PRE_RCL_BRKDN where pre_rcl_no = preheader.PRE_RCL_NO and awb_no=#awbNo#) else preheader.awb_no end AS awbno,
       preheader.pre_rcl_no as preRclNo,
      to_char(preheader.CR_DATE,'DDMONYY hh24:mi') AS rclsubmissiondate, to_char(preheader.CR_DATE,'DDMONYY') as receptionDate,preheader.ppk_type AS rcltype, decode(preheader.PPK_TYPE,'B','Bulk','P','Prepack','M','Mixed') AS rclTypeDescription,preheader.awb_dest AS destination,
        SUBSTR(TRIM(preheader.AWB_NO),1,3)||'-'||SUBSTR(TRIM(preheader.AWB_NO),4)  as awbNoDisplay,
       to_char(preheader.AWB_DATE,'DDMONYY')  as awbDate,
       preheader.uld_type AS uldtype, preheader.uld_no AS uldseqno,
       case when preheader.ppk_type='P' then (select uld_key from exp_pre_rcl_dtl where pre_rcl_no=preheader.PRE_RCL_NO and  uld_key=#uldNo#) else preheader.uld_key end as uldNo, 
       upper(trim(preheader.status)) AS searchStatus,preheader.cust_no as custNo,customer.code_desc as agentName,
       ttl_pcs as pieces,ttl_wt as weight,   rcl.rcl_no as rclNo, rcl.RCL_PCS as rclPieces,rcl.RCL_WT as rclWeight, rcl.ACCPT_MODE as accpMode,rcl.FLT_KEY as fltKey,rcl.FLT_DATE as fltDate,
    	preheader.SPL_CODE1 as splCode1,preheader.SPL_CODE2 as splCode2,preheader.SPL_CODE3 as splCode3,
    	case when ( select count(*) from exp_uld_awb where rcl_no in(select rcl_no from exp_rcl_hd where pre_rcl_no = preheader.PRE_RCL_NO  ) and manifest_yn='Y')>0 then 'Y' else 'N' end as  manifestyn     
  		FROM exp_pre_rcl_hd preheader,cust_company customer,exp_rcl_hd rcl        		
  		 where 
       rcl.pre_rcl_no=preheader.pre_rcl_no   
       and  preheader.cust_no = customer.code  	  	
       and preheader.status in ('SUBMITTED','CONFIRMED','OUTSTANDING')
       and preheader.act_acc_date is not null and preheader.act_acc_time is not null
   ) 
  	where 1=1
  	<isNotEmpty property="rclType">
		and rcltype=#rclType#
		</isNotEmpty>
		<isNotEmpty property="search">
		and searchStatus=#search#
		</isNotEmpty>
		<isNotEmpty property="issueDateFrom">
		<isNotEmpty property="issueDateTo">
		 and receptionDate between to_date(#issueDateFrom#,'DDMONYY') and to_date(#issueDateTo#,'DDMONYY') 
		</isNotEmpty>	
		</isNotEmpty>
		<isNotEmpty property="issueDateFrom">
		<isEmpty property="issueDateTo">
		 and receptionDate>=to_date(#issueDateFrom#,'DDMONYY') 
		</isEmpty>	
		</isNotEmpty>
		<isEmpty property="issueDateFrom">
		<isNotEmpty property="issueDateTo">
		 and to_date(#issueDateFrom#,'DDMONYY') >receptionDate
		</isNotEmpty>	
		</isEmpty>	
		<isNotEmpty property="agentName">
		and agentName=#agentName#
		</isNotEmpty>
		<isNotEmpty property="agentCode">
		and custNo=#agentCode#
		</isNotEmpty>
		<isNotEmpty property="custNo">
		and custNo=#custNo#
		</isNotEmpty>
		<isNotEmpty property="awbNo">
		and awbno=#awbNo#
		</isNotEmpty>
		<isNotEmpty property="uldNo">
		and uldNo=#uldNo#
		</isNotEmpty>
   <!--AND upper(status) = upper('SUBMITTED')-->
    order by receptionDate desc,rcltype 
	</select>
	 <delete id="Export_deleteeRCLBulkDetail" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		delete from exp_pre_rcl_dmn where pre_rcl_no=#preRclNo#
	</delete>
<delete id="deletePIInfoForERclDel" parameterClass="java.util.HashMap">
		DELETE FROM EXP_PRE_RCL_PI_DTL WHERE PRE_RCL_NO=#preRclNo#
	</delete>
	<delete id="Export_deleteeRCLHeader" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
        delete from exp_pre_rcl_hd where pre_rcl_no=#preRclNo#
	</delete>
	<delete id="Export_deleteeRCLPrepackDetail" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	delete from exp_pre_rcl_dtl where pre_rcl_no=#preRclNo#
	</delete>
	<delete id="Export_deleteeRCLMixedDetail" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	delete from exp_pre_rcl_brkdn where pre_rcl_no=#preRclNo#
	</delete>
	<select id="selectMixedDetail" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	 select AWB_NO as awbNo ,to_char(AWB_DATE,'DDMONYY') as awbDate,PCS as pieces,WEIGHT as weight,DEST as destination from EXP_PRE_RCL_BRKDN where PRE_RCL_NO=#param#
	</select>
	<select id="diffCurrDt" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	SELECT TO_CHAR(TO_DATE(#param#,'DDMONYY') - TO_DATE(sysdate)) FROM DUAL 
	</select>
	<delete id="Export_deleteeRCLUldManf" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	DELETE FROM EXP_PRE_RCL_ULD_MANF WHERE PRE_RCL_NO=#preRclNo#
	<isNotEmpty property="uldNo">
		and ULD_KEY=#uldNo#
	</isNotEmpty>
	<isNotEmpty property="awbNo">
		and AWB_NO=#awbNo#
	</isNotEmpty>	
	</delete>
	<update id="Export_updateRCLVoidHd"  parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">	
		UPDATE EXP_RCL_HD SET STATUS = 'V', VOID_USER_ID = #modifiedUserId# , VOID_DATE = SYSDATE, VOID_FROM = 'S'  WHERE RCL_NO = #rclNo# 
   	</update>
	<update id="Export_updateRCLVoidDtl"  parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		UPDATE EXP_RCL_DTL SET TR_STATUS='V', LM_USER_ID=#modifiedUserId#, LM_DATE=SYSDATE WHERE RCL_NO = #rclNo#
   	</update>
	<update id="Export_updateRCLVoidSecDtl"  parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		UPDATE EXP_RCL_SEC_CHK_DTL SET TR_STATUS = 'V',  LM_USER_ID = #modifiedUserId#,  LM_DATE = SYSDATE  WHERE RCL_NO = #rclNo# 
   	</update>
   	<update id="Export_updateERCLVoidHd"  parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">	
		UPDATE EXP_PRE_RCL_HD SET VOID_USER_ID = #modifiedUserId# , VOID_DATE = SYSDATE  WHERE PRE_RCL_NO = #preRclNo# 
   	</update>
   	<select id="fetchExpCargo" parameterClass="java.util.HashMap" resultClass="java.lang.String">
  		SELECT DECODE(COUNT(1), 0, 'UNKNOWN_SPL_EXP', 'SPL_EXP') FROM MAST_SPL_HAND_CODE WHERE CODE IN(#splCode1#, #splCode2#, #splCode3#) AND ECT_HANDLR IS NOT NULL 		
	</select>
	<!-- Delete eRCL ##end -->


<select id = "sqlGetOutTowOrderForUld" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO"  resultClass="java.lang.String">
select  A.to_no from tow_order_in A
			join tow_order_out_dtl B
			on A.to_no = B.to_no
			where B.ULD_KEY = #newUldNo#  and
			A.flt_key = #fltKey# and
			A.flt_date = TO_DATE(#fltDate#,'DDMONYY')	
</select>
<select id="sqlGetSenderAddress" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO" resultClass="java.lang.String">
  select rule_value from cmsrules where rule_code = 'FAD_EMAILID'
</select>
<select id="getCpclAddrFrom" parameterClass="java.lang.String"  resultClass="java.lang.String" >
 		select rule_value from cmsrules where rule_code = 'COM_NOTF_SENDER' and rownum=1
	</select>
		<select id="flightTypeDep"  parameterClass="cargo.cms.export.bo.SuperUrgentResultBO"  resultClass="java.lang.String">
			SELECT FLT_TYPE FROM FLT_OPR WHERE FLT_KEY =#fltKey# AND FLT_TYPE='D' AND SCH_DATE = TO_DATE( #fltDate#, 'DDMONYY')
   	</select> 
<select id="dedicatedTruckDock" parameterClass="java.lang.String"  resultClass="java.lang.Integer" >
select count(1) from tcs_dock_master
</select>
<select id="validTruckIpassYN" parameterClass="java.lang.String"  resultClass="java.lang.Integer" >
select count(1) from TCS_IPASS_MASTER where truck_no = #truckNo#
</select>
<select id="validFlightDetail" parameterClass="java.lang.String"  resultClass="java.lang.Integer" >
select count(1) from flt_opr where flt_type = 'D' and flt_key = #fltKey#
</select>
<select id = "fetchHOArea" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO" resultClass="cargo.cms.export.bo.SuperUrgentResultBO">
SELECT s.rule_value plannedHoArea, b.rule_value transferGroup, to_number(c.rule_value) towEstTime
                        FROM CMSRULES s,CMSRULES b,CMSRULES c
                        WHERE s.rule_code='SUPER_UGNT_HO_AREA' and b.rule_code = 'SUPER_UGNT_TRF_GRP' and
        c.rule_code = 'SUPER_UGNT_EST_TIME'
</select>
<insert id="insertTowOut" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO">
insert into tow_order_out (
TO_NO,
TYPE,
RHO_ID,	
VER_NO,
FLT_KEY,
FLT_DATE,
DEST_CODE,
EST_TIME,
HO_AREA,
STATUS,
CR_USER_ID,
CR_DATE,
LM_USER_ID,
LM_DATE,FLT_TYPE,notf_send_date) values (#instowNo#,'E',#rho#,to_number('1'),#fltKey#,to_date(#fltDate#,'DDMONYY'),'Base', to_date(#towEstTime#,'DDMONYY HH24MI'),
#plannedHoArea#,'ISSUED',#towUserId#,sysdate,#towUserId#,sysdate,'E',sysdate)
</insert>
<insert id="insertTowOrderDetail" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO">
insert into tow_order_out_dtl (TO_NO,
ULD_KEY,
CR_USER_ID,
CR_DATE,
LM_USER_ID,
LM_DATE) values (#towOrderNo#,#newUldNo#,#towUserId#, sysdate,#towUserId#,sysdate)
</insert>
<select id = "getCurrTimeTowOrder" resultClass="java.lang.String">
select to_char((to_date((select to_char(sysdate,'DDMONYY HH24MI') from dual),'DDMONYY HH24MI') + 
(SELECT RULE_VALUE FROM CMSRULES where RULE_CODE = 'SUPER_UGNT_EST_TIME')/1440 ),'DDMONYY HH24MI')currTime  from dual
</select>
<select id="retrieveSchTime"  parameterClass="cargo.cms.export.bo.SuperUrgentResultBO" resultClass="cargo.cms.export.bo.SuperUrgentResultBO">
 select to_char(NVL(est_date,sch_date),'DDMONYY') estSchDate,lpad(NVL(est_time,sch_time),4,'0') schTime from flt_opr where flt_key = #fltKey# and sch_date = #fltDate# and flt_type = 'D'
</select>

<insert id="sqlSaveExportDGDRecord" parameterClass="cargo.cms.export.bo.DGRGoodsBO" >
   		INSERT INTO EXP_DGD (TR_TYPE,UN_TR_NO,AWB_NO,AWB_DATE,UN_ID,RCAT,PGP,DPCS,QTY,CAO,QU,OPCS,OP_ON,PINS,ACC,PTYP_MATERIAL,PTYP_TYPE,PSN,SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9,TECH_NM,SHIPPER,EX,DRILL_CODE,CL_DV,SR1,SR2,REV,SI,RADIO_ACTIVE,ACTIVITY,TI,HGT,ACTION,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,PKG_PCS) VALUES
		('MTDGD',EXP_DGD_SEQNO.nextVal,#awbNo#,(SELECT NVL(pkg_common.get_awb_date(#awbNo#,'E'), TO_CHAR(SYSDATE,'DDMONYY')) FROM DUAL),#unId#,#rcat#,#pgp#,#dpcs#,#qty#,#cao#,#qu#,#opcs#,#on#,#pins#,#acc#,#ptypeMat#,#ptype#,#psn#,#splCode1#,#splCode2#,#splCode3#,#splCode4#,#splCode5#,#splCode6#,#splCode7#,#splCode8#,#splCode9#,#techNm#,#shprName#,#ex#,#drillCode#,#cldv#,#sr1#,#sr2#,#rev#,#si#,#radioActvty#,#activity#,#ti#,#hgt#,#action#,#crUserId#,sysdate,#lastModUserId#,sysdate,NVL(#pkgNos#,1))
   	</insert>
   	<select id="populateUNIDDtls"  parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.DGRGoodsBO">
   		select un_id unId,psn psn,cl_dv cldv,sr1 sr1,sr2 sr2,drill_code drillCode,spl_code1 splCode1,spl_code2 splcode2,spl_code3 splCode3 from mast_unid where un_id=#PARAM#
   	</select>
   	<select id="checkExpDGDExists"  parameterClass="java.lang.String"  resultClass="java.lang.Integer">
   		select COUNT(1) from EXP_DGD where AWB_NO=#PARAM#
   	</select>
   	<select id="fetchDGDList"  parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.DGRGoodsBO">
   		select un_tr_no unTrNo,un_id unId,psn psn,TECH_NM techNm,cl_dv cldv,sr1 sr1,sr2 sr2,rcat rcat,pins pins,DPCS pcs,nvl(qty,'0') qty,qu qu,cao cao,APIO_ID apioId,OP_ON opId,to_char(awb_date,'DDMONYY') awbDate,PKG_PCS pkgNos,CR_DATE,decode(APIO_ID,null,decode(op_on,null,'N','Y'),'Y') selDisable,to_char(CR_DATE,'DDMONYY HH24:MI') crDate,ti ti from exp_dgd where awb_no=#awbNo# order by CR_DATE asc
   	</select>
   	<select id="fetchMaxAPIOId"  parameterClass="cargo.cms.export.bo.DGRGoodsBO"  resultClass="java.lang.String">
   		select decode(count(apio_id),0,'APIO1','APIO'||max(to_number(substr(apio_id,5))+1)) from exp_dgd_apio where awb_no=#awbNo#
   	</select>
   	<insert id="sqlSaveAPIOGrp" parameterClass="cargo.cms.export.bo.DGRGoodsBO" >
   		Insert into EXP_DGD_APIO 
		(APIO_ID,AWB_NO,AWB_DATE,APIO_PTYP_MATERIAL,APIO_PTYP_TYPE,APIO_PKG,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) values 
		(#apioId#,#awbNo#,to_date(#awbDate#,'DDMONYY'),#ptypeMat#,#ptype#,#dpcs#,#crUserId#,sysdate,#crUserId#,sysdate)
	</insert>
	<update id="updateExpDgdAPIOGrp" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
		update EXP_DGD set TR_TYPE = 'MTDGD', apio_id=#apioId# where awb_no=#awbNo# and un_id=#unId# and un_tr_no=#unTrNo#
	</update>
	<select id="fetchAPIOList"  parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.DGRGoodsBO">
		select apio_id apioId,apio_pkg||' ' || apio_ptyp_material||' ' ||UPPER(APIO_PTYP_TYPE) ptypeMat,OVERPACK_ID opId,apio_pkg pkgNos  from EXP_DGD_APIO  where awb_no=#PARAM#
	</select>
	<select id="fetchMaxOPId"  parameterClass="cargo.cms.export.bo.DGRGoodsBO"  resultClass="java.lang.String">
   		select decode(count(OVERPACK_ID),0,'OP1','OP'||max(to_number(substr(OVERPACK_ID,3))+1)) from exp_dgd_op where awb_no=#awbNo#
   	</select>
   	<insert id="sqlSaveOpGrp" parameterClass="cargo.cms.export.bo.DGRGoodsBO" >
   		Insert into EXP_DGD_OP 
		(OVERPACK_ID,AWB_NO,AWB_DATE,OVERPACK_PTYP_MATERIAL,OVERPACK_PTYP_TYPE,OVERPACK_PKG,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) values 
		(#opId#,#awbNo#,to_date(#awbDate#,'DDMONYY'),#ptypeMat#,#ptype#,#dpcs#,#crUserId#,sysdate,#crUserId#,sysdate)
	</insert>
	<update id="updateExpDgdOpGrp" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
		update EXP_DGD set op_on=#opId# where awb_no=#awbNo# and un_id=#unId# and un_tr_no=#unTrNo#
	</update>
	<select id="fetchOpList"  parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.DGRGoodsBO">
		select OVERPACK_ID opId, OVERPACK_PKG||' ' || OVERPACK_PTYP_MATERIAL||' '|| UPPER(OVERPACK_PTYP_TYPE) ptypeMat from EXP_DGD_OP where awb_no=#PARAM#
	</select>
	<update id="updateOpGrpDtls" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
		update EXP_DGD_APIO set OVERPACK_ID=#opId# where awb_no=#awbNo# and APIO_ID=#apioId#
	</update>
        <update id="updateAPIOGrpDtlsforOP" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
		update EXP_DGD set op_on=#opId# where awb_no=#awbNo# and APIO_ID=#apioId#
	</update>
	<delete id="deleteOpGrp" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
		delete from exp_dgd_op where overpack_id=#opId# and awb_no=#awbNo#
	</delete>
	<delete id="deleteApioGrp" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
		delete from exp_dgd_apio where APIO_ID=#apioId# and awb_no=#awbNo#
	</delete>
	<delete id="deleteUnidGrp" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
		delete from EXP_DGD where UN_ID=#unId# and awb_no=#awbNo# and un_tr_no=#unTrNo#
	</delete>
	<update id="updateExpDGDApioonDel" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
		update EXP_DGD set APIO_ID='' where awb_no=#awbNo# and APIO_ID=#apioId# 
	</update>
	<update id="updateExpDGDOponDel" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
		update EXP_DGD set OP_ON='' where awb_no=#awbNo# and OP_ON=#opId#
	</update>
	<update id="updateExpDGDApioOponDel" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
		update EXP_DGD_APIO set OVERPACK_ID='' where awb_no=#awbNo# and OVERPACK_ID=#opId#
	</update>
	<select id="fetchDGDListforUpdate"  parameterClass="cargo.cms.export.bo.DGRGoodsBO"  resultClass="cargo.cms.export.bo.DGRGoodsBO">
   		select un_id unId,psn psn,TECH_NM techNm,cl_dv cldv,sr1 sr1,sr2 sr2,rcat rcat,pins pins,decode(DPCS,null,(select APIO_PKG from exp_dgd_apio a,exp_dgd b where a.apio_id=b.apio_id and a.awb_no= b.awb_no and rownum=1),DPCS) dpcs,qty qty,qu qu,cao cao,APIO_ID apioId,OP_ON opId,to_char(awb_date,'DDMONYY') awbDate, 
		pgp pgp,opcs opcs,acc acc,PTYP_MATERIAL ptypeMat,PTYP_TYPE ptype,SPL_CODE1 splCode1,SPL_CODE2 splCode2,SPL_CODE3 splCode3,SPL_CODE4 splCode4,SPL_CODE5 splCode5,OP_ON opId,
		SPL_CODE6 splCode6,SPL_CODE7 splCode7,SPL_CODE8 splCode8,SPL_CODE9 splCode9,SHIPPER shprName,ex ex,DRILL_CODE drillCode,rev rev,si si,RADIO_ACTIVE radioActvty,ti ti,hgt hgt,action action,to_char(LM_DATE,'DDMONYY HH24:MI:SS') lmDate,nvl(qty,'0') || ',' ||PKG_PCS qtyPcs,ACTIVITY activity   
		from exp_dgd where un_tr_no=#unTrNo#
   	</select>
   	<update id="updateDGDDtls" parameterClass="cargo.cms.export.bo.DGRGoodsBO">
   		update exp_dgd set TR_TYPE = 'MTDGD', un_id=#unId#,psn=#psn#,TECH_NM=#techNm#,cl_dv=#cldv#,sr1=#sr1#,sr2=#sr2#,rcat=#rcat#,pins=#pins#,DPCS=#dpcs#,qty=#qty#,qu=#qu#,cao=#cao#,PKG_PCS=NVL(#pkgNos#,1),
		pgp=#pgp#,opcs=#opcs#,acc=#acc#,PTYP_MATERIAL=#ptypeMat#,PTYP_TYPE=#ptype#,SPL_CODE1=#splCode1#,SPL_CODE2=#splCode2#,SPL_CODE3=#splCode3#,SPL_CODE4=#splCode4#,SPL_CODE5=#splCode5#,
		SPL_CODE6=#splCode6#,SPL_CODE7=#splCode7#,SPL_CODE8=#splCode8#,SPL_CODE9=#splCode9#,SHIPPER=#shprName#,ex=#ex#,DRILL_CODE=#drillCode#,rev=#rev#,si=#si#,RADIO_ACTIVE=#radioActvty#,ti=#ti#,hgt=#hgt#,action=#action#,LM_DATE=sysdate,ACTIVITY=#activity# 
		where un_tr_no=#unTrNo# and to_char(LM_DATE,'DDMONYY HH24:MI:SS') = #lmDate#
	</update>
   	<select id="checkAwbExpExists"  parameterClass="java.lang.String"  resultClass="java.lang.Integer">
   		select COUNT(1) from awb where awb_no=#PARAM# and awb_type='E'
   	</select>
	<select id="countRCLVoid"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="java.lang.Integer"  >
		select count(RCL_NO) from EXP_RCL_HD 
		where status &lt;&gt; 'V' and (RCL_NO = #rclNum# or RCL_NO ='$rclNum$m')
	</select>
	<select id="countValidRCLNo"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="java.lang.Integer"  >
		select count(RCL_NO) from EXP_RCL_HD 
		where RCL_NO = #rclNum# or RCL_NO ='$rclNum$m'
	</select>
	<select id="void_validation"
		parameterClass="map"
		resultClass="java.lang.String">
		SELECT PKG_EXP_VAL.val_rcl_void (#rclNum#) FROM DUAL
	</select>
	<update id="void_header"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
	<![CDATA[
			UPDATE EXP_RCL_HD SET STATUS = 'V', VOID_USER_ID = #voidUserID# , VOID_DATE = SYSDATE, VOID_RMK=#voidRemark# , VOID_FROM = 'S',TR_TYPE_EVT='RCLVOID',CR_USER_ID = #voidUserID#  WHERE RCL_NO = #rclNum# ]]>
   	</update>

	<update id="void_detail"  parameterClass="cargo.cms.export.bo.IssueRCLBulkLocBO">
	<![CDATA[
			UPDATE EXP_RCL_DTL SET TR_STATUS='V', LM_USER_ID=#voidUserID#, LM_DATE=SYSDATE, VOID_PCS=#voidPc#, VOID_WT=#voidWt# WHERE RCL_NO = #rclNum#	 AND DOC_LINE_NO=#docLineNum# ]]>
   	</update>

	<update id="void_security_detail"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
	<![CDATA[
			UPDATE EXP_RCL_SEC_CHK_DTL SET TR_STATUS = 'V',  LM_USER_ID = #voidUserID#,  LM_DATE = SYSDATE  WHERE RCL_NO = #rclNum# ]]>
   	</update>
   	<select id="void_by_rcl_no"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
	<![CDATA[
		select rcl.*,
			( to_char(trk.sch_arr_date,'DDMONYY')   || ' ' ||   (ltrim(SUBSTR(TRIM(TO_CHAR(trk.sch_arr_time,'0000')),0,2) || ':'||   SUBSTR(TRIM(TO_CHAR(trk.sch_arr_time,'0000')),3,2),':'))  ) trkArrivalDate
			from (		
		SELECT A.RCL_NO as rclNum,A.ENDORSED_BY as endrosementBY ,A.REJECT_IND as rejectInd ,A.REJECT_REASON as rejReason, 
			CONCAT(CONCAT(SUBSTR(decode(A.ppk_type,'B',A.awb_no,'P',A.awb_no,'M',A.uld_key),0,3),'-'),SUBSTR(decode(A.ppk_type,'B',A.awb_no,'P',A.awb_no,'M',A.uld_key),4)) AS awbNumDisplay, 
			decode(A.ppk_type,'B',A.awb_no,'P',A.awb_no,'M',A.uld_key) as awbNum, to_char(A.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate,
			A.PPK_TYPE as pkgType, A.RCL_PCS as rclPcs, A.RCL_WT rclWt,A.RTN_PCS as rtnPcs, A.RTN_WT as rtnWt, B.code_desc as agentName, B.CODE as iataCode, 
			PRE_RCL_NO as preRCLNum, A.FLT_KEY as flightNum, TO_CHAR(A.FLT_DATE,'DDMONYY') as flightDate, A.CARR_CODE as carrCode, A.AWB_DEST as destination, 
			A.TRUCK_NO as truckNum, A.AWB_CONTENT as awbContent, A.SEC_CHECK as secCheck, A.THICK_IND as thickInd, A.RMK as remarks, 
			decode(UPPER(A.STATUS), 'V', 'Y','N') as voidInd, pkg_exp_val.get_rcl_car_ind(A.awb_no, A.awb_date, A.rcl_no, A.ppk_type) as carInd, 
			A.RTN_IND as cargoRetInd, (A.SPL_CODE1 || ' ' ||  A.SPL_CODE2 || ' ' ||  A.SPL_CODE3 || ' ' ||  A.SPL_CODE4 || ' ' ||  A.SPL_CODE5 || ' ' ||  A.SPL_CODE6 || ' ' ||  
						A.SPL_CODE7 || ' ' ||  A.SPL_CODE8) AS splCode1, A.STATUS as status,
						A.TRUCK_FLT_NO  as trkFlightKey,    
						to_char(A.TRUCK_FLT_DATE,'DDMONYY')    as trkFlightDate,       
						A.AWB_ORG    as awbOrig,    
						A.PCS    as manfPcs,     
						A.WT as manfWt 
		FROM EXP_RCL_HD A, cust_company B WHERE B.CODE(+) = A.cust_no and (A.RCL_NO = #rclNum# or A.RCL_NO ='$rclNum$m') and A.STATUS!='V'
				) rcl 
				left join itm_trk_flt trk on trk.truck_flt_type = 'A' and trk.truck_flt_no = rcl.trkFlightKey and trk.truck_flt_date = rcl.trkFlightDate
		]]>
   	</select>
   	<select id="break_Ppk_Exists_Check" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		<![CDATA[
		select count(1)
		from (select h.rcl_no
		from exp_rcl_hd h 
		join exp_rcl_brkdn d on h.rcl_no = d.rcl_no
		join exp_break_ppk_awb p on p.awb_no = d.awb_no 
		and p.awb_date = d.awb_date and p.uld_key = h.uld_key
		where h.rcl_no = #rclNum# and h.ppk_type = 'M'
		union all
		select h.rcl_no 
		from exp_rcl_hd h 
		join exp_rcl_dtl d on h.rcl_no = d.rcl_no
		join exp_break_ppk_awb p on p.awb_no = h.awb_no and p.awb_date = h.awb_date and p.uld_key = d.uld_key
		where h.rcl_no = #rclNum# and h.ppk_type = 'P')
		 ]]>
	</select>
	<select id="Bulk_Inventory"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="cargo.cms.export.bo.VoidRCLBO">
		<![CDATA[
		 select t.awb_no awbNo, t.awb_date awbDate, sum(locn_pcs) strgPcs, sum(locn_wt) strgWt
		 from awb_inventory t 
		 join exp_rcl_hd r on r.awb_no = t.awb_no and r.awb_date = t.awb_date 
		 where rcl_no = #rclNum#
		 and not exists (select null from exp_uld_awb where awb_no = t.awb_no and awb_date = t.awb_date and uld_key = nvl(t.uld_key, '**'))
		 group by t.awb_no, t.awb_date
		 ]]>
	</select>
	<select id="Void_RCL_List"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="cargo.cms.export.bo.VoidRCLBO">
		<![CDATA[	 
		 select t.seq_no seqNo, t.loc_code locCode, t.uld_key uldKey, t.lsp_no lspNo, 
		 t.LOCN_PCS locnPcs, t.locn_wt locnWt ,t.LOCN_PCS voidPcs, t.locn_wt voidWt , 'Y' disableVoidPcWt
		 from awb_inventory t 
		 join exp_rcl_hd r on r.awb_no = t.awb_no and r.awb_date = t.awb_date 
		 where rcl_no = #rclNum#
		 and not exists (select null from exp_uld_awb where awb_no = t.awb_no and awb_date = t.awb_date and uld_key = nvl(t.uld_key, '**'))
		 and not (t.flt_key is not null and t.flt_type='E')
		 ]]>
	</select>
        <!-- ##################### Added for Maintain Exp ULD Consignment List : Santosh Desai  : Start       ###############################################-->

	<select id="breakdownawbholder"  parameterClass="cargo.cms.export.bo.ExportULDBO"  resultClass="cargo.cms.export.bo.AWBBO">
	SELECT T1.RCL_NO, SUBSTR(T1.AWB_NO,0,3) awbNo1, SUBSTR(T1.AWB_NO,4) awbNo2, TO_CHAR(T1.AWB_DATE,'DDMONYY') awbDate, 
                     T1.ULD_KEY uldKey, T1.PCS pcs, DECODE(T1.WEIGHT,'0','',TRIM(to_char(WEIGHT,9999999.9))) wt,T1.PCS oldRclPcs, DECODE(T1.WEIGHT,'0','',TRIM(to_char(WEIGHT,9999999.9))) oldRclWt,
                     T1.DEST dest, T1.SPL_CODE1 splCode1, T1.SPL_CODE2 splCode2, 
                     T1.SPL_CODE3 splCode3, T1.SPL_CODE4 splCode4, T1.SPL_CODE5 splCode5, 
                     T1.SPL_CODE6 splCode6, T1.SPL_CODE7 splCode7, T1.SPL_CODE8 splCode8, 
                     T1.SPL_CODE9 splCode9, T1.CONTENT content,'N' as newRecord,
                     T1.SLAC AS slac, 
                     T1.TRM_IND as trmInd,
                     'RCL' as actionFrom,
                     TO_CHAR(T1.LM_DATE , 'DDMONYY HH24:MI:SS') 		       AS lastModDate,
                     T1.LM_USER_ID as lastModifiedBy,
		             'M' AS      ppkType
            from   exp_rcl_brkdn t1, awb t2
            where  t1.awb_no = t2.awb_no
            and    TRUNC(t1.awb_date) = TRUNC(t2.awb_date)                        
            and    t1.uld_key = #uldNo#
            and    t1.rcl_no = (select rcl_no 
                                from   (select rcl_no
                                        from   exp_rcl_hd 
                                        where  uld_key = #uldNo#
                                        and PPK_TYPE = 'M' 
                                        and rcl_no = #rclNo#
                                        and  void_user_id is null
                                        and rtn_ind = 'N'
                                        order by rcl_date desc) 
                                where   rownum = 1)
        order by t1.awb_no
	</select>
	
	<select id="breakdownawberclholder"  parameterClass="cargo.cms.export.bo.ExportULDBO"  resultClass="cargo.cms.export.bo.AWBBO">
	        SELECT T1.PRE_RCL_NO, SUBSTR(T1.AWB_NO,0,3) awbNo1, 
        SUBSTR(T1.AWB_NO,4) awbNo2, TO_CHAR(T1.AWB_DATE,'DDMONYY') awbDate,                    
                     T1.PCS pcs, 
                     DECODE(T1.WEIGHT,'0','',TRIM(to_char(WEIGHT,9999999.99))) wt,
                     T1.DEST dest,     
                     '' splCode1, '' splCode2, 
                     '' splCode3, '' splCode4, '' splCode5, 
                     '' splCode6, '' splCode7, '' splCode8, 
                     '' splCode9,
                     '' as newRecord, 
                     '' AS slac, 
                     '' as trmInd, 
                     'ERCL' as actionFrom,
                     TO_CHAR(T1.LM_DATE , 'DDMONYY HH24:MI:SS') 		       AS lastModDate,
                     T1.LM_USER_ID as lastModifiedBy,
		             'M' AS      ppkType
            from   EXP_PRE_RCL_BRKDN t1
            where           
            t1.PRE_RCL_NO = (select PRE_RCL_NO 
                                from   (select PRE_RCL_NO
                                        from   exp_rcl_hd 
                                        where  uld_key = #uldNo#
                                        and PPK_TYPE = 'M' 
                                        and rcl_no = #rclNo#
                                        and  void_user_id is null
                                        order by rcl_date desc) 
                                where   rownum = 1)
        order by t1.awb_no
	</select>
	
	<select id="breakdownawb"  parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.AWBBO">	
		SELECT   
			 CONCAT(CONCAT(SUBSTR(A.AWB_NO, 0, 3), '-'), SUBSTR(A.AWB_NO, 4)) awbNo1, 
			 C.ULD_KEY uldKey, 
			 A.AWB_NO awbNo, 
			 TO_CHAR(A.AWB_DATE, 'DDMONYY') awbDate, 
			 DEST dest,
	         C.PCS pcs, 
	         C.PCS oldpcs, 
	         'RCL' as actionFrom,
			 DECODE(C.NET_WT, '0', '', TO_CHAR(C.NET_WT,9999999.99)) wt, 
			(select    decode(spl_code1, null, '', spl_code1 || ',')
               || decode(spl_code2, null, '', spl_code2 || ',')
               || decode(spl_code3, null, '', spl_code3 || ',')
               || decode(spl_code4, null, '', spl_code4 || ',')
               || decode(spl_code5, null, '', spl_code5 || ',')
               || decode(spl_code6, null, '', spl_code6 || ',')
               || decode(spl_code7, null, '', spl_code7 || ',')
               || decode(spl_code8, null, '', spl_code8 || ',')
               || decode(spl_code9, null, '', spl_code9)
                  from   awb
                  where  awb_no = A.AWB_NO
                  and awb_date = A.AWB_DATE
                  and awb_type='E') splCode1,
			 A.CONTENT content,
	         DECODE(D.MANIFEST_YN, 'N', '', 'P') ppkType, 
			 C.RCL_NO rclNo,
			 C.DOC_LINE_NO docLineNo,
			 TO_CHAR(C.LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModDate,
			 C.LM_USER_ID AS lastModifiedBy 	
		FROM     
		 	 AWB A, EXP_RCL_HD B, EXP_RCL_DTL C, V_EXP_ULD D
		WHERE    
			 A.AWB_NO = B.AWB_NO
			 AND A.AWB_DATE = B.AWB_DATE
			 AND B.RCL_NO = C.RCL_NO
			 AND B.RCL_NO = D.RCL_NO
			 AND C.ULD_KEY = D.ULD_KEY			 
			 AND A.AWB_NO =  #awbNo#
			 AND A.AWB_CLOSED_YN = 'N'
			 AND B.PPK_TYPE = 'P'
			 AND D.PPK_TYPE = 'P'
			 ORDER BY C.ULD_KEY		
	</select>
	
	<select id="breakdownawbercl"  parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.AWBBO">
	SELECT   
			 CONCAT(CONCAT(SUBSTR(A.AWB_NO, 0, 3), '-'), SUBSTR(A.AWB_NO, 4)) awbNo1, 
			 C.ULD_KEY uldKey, 
			 A.AWB_NO awbNo, 
			 TO_CHAR(A.AWB_DATE, 'DDMONYY') awbDate, 
			 A.AWB_DEST dest,
       		 C.PCS pcs, 
       		 'ERCL' as actionFrom,
			 DECODE(C.NET_WT, '0', '', TO_CHAR(C.NET_WT,9999999.99)) wt, 
			 (select    decode(spl_code1, null, '', spl_code1 || ',')
               || decode(spl_code2, null, '', spl_code2 || ',')
               || decode(spl_code3, null, '', spl_code3 || ',')
               || decode(spl_code4, null, '', spl_code4 || ',')
               || decode(spl_code5, null, '', spl_code5 || ',')
               || decode(spl_code6, null, '', spl_code6 || ',')
               || decode(spl_code7, null, '', spl_code7 || ',')
               || decode(spl_code8, null, '', spl_code8 || ',')
               || decode(spl_code9, null, '', spl_code9)
                  from   awb
                  where  awb_no = A.AWB_NO
                  and awb_date = A.AWB_DATE
                  and awb_type='E') splCode1,
			 A.CONTENT content,
             DECODE(D.MANIFEST_YN, 'N', '', 'P') ppkType, 
			 C.RCL_NO rclNo,
			 C.DOC_LINE_NO docLineNo,
			 TO_CHAR(C.LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModDate,
			 C.LM_USER_ID AS lastModifiedBy 	
		     FROM     
		 	 EXP_PRE_RCL_HD A, EXP_RCL_HD B, EXP_RCL_DTL C, V_EXP_ULD D
             WHERE A.AWB_NO = B.AWB_NO
			 AND A.AWB_DATE = B.AWB_DATE
             AND A.PRE_RCL_NO = B.PRE_RCL_NO
			 AND B.RCL_NO = C.RCL_NO
			 AND B.RCL_NO = D.RCL_NO
			 AND C.ULD_KEY = D.ULD_KEY
			 AND A.AWB_NO =  #awbNo#			
			 AND B.PPK_TYPE = 'P'
			 AND D.PPK_TYPE = 'P'
			 AND A.PPK_TYPE = 'P'
			 ORDER BY C.ULD_KEY
			</select>

	<select id="specialcodecheck" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
		SELECT COUNT(1) 
		FROM MAST_SPL_HAND_CODE 
		WHERE CODE=UPPER(#code#)
	</select>

	<select id="duplicateawbnocheck" parameterClass="map" resultClass="java.lang.Integer" >
		SELECT COUNT(1)
		FROM   EXP_RCL_BRKDN 
		WHERE ULD_KEY=#uld#
		AND	AWB_NO=#awbNo# 	
		AND RCL_NO =#rclNo#
		
	</select>

	<select id="checkvalidcountrycode" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
		SELECT 	COUNT(1) 
		FROM MAST_ARPT
		WHERE CODE=UPPER(#country#)
	</select>
	
   	<update id="breakdownawbupdate"  parameterClass="cargo.cms.export.bo.AWBBO">	
	
				UPDATE 
						EXP_RCL_DTL
				SET 
						PCS    = #pcs#,
						LM_USER_ID = #lastModUserId#,
						LM_DATE	= sysdate 
				WHERE 
						RCL_NO= #rclNo#
				AND 	DOC_LINE_NO=#docLineNo#	
				
				<!-- 
				UPDATE AWB SET
		        RCL_PPK_PCS = RCL_PPK_PCS + (#pcs# - #oldpcs#),			
				RCL_PCS = RCL_PCS + (#pcs# - #oldpcs#),
				LM_DATE = sysdate,
				LM_USER_ID = #lastModUserId#				 
			    WHERE  AWB_NO = #awbNo#
			    AND    AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')  -->		
   	</update>  
   	
   	
	<update id="breakdownawbULDupdate"  parameterClass="cargo.cms.export.bo.AWBBO">
	<![CDATA[	
				UPDATE 
						EXP_RCL_BRKDN	
				SET 
						DEST      =  #dest#,
						PCS       = #pcs#,
						WEIGHT    = #wt#,
						SPL_CODE1 = #splCode1#,
						SPL_CODE2 = #splCode2#,
						SPL_CODE3 = #splCode3#,
						SPL_CODE4 = #splCode4#,
						SPL_CODE5 = #splCode5#,
						SPL_CODE6 = #splCode6#,
						SPL_CODE7 = #splCode7#,
						SPL_CODE8 = #splCode8#,
						SPL_CODE9 = #splCode9#,
						CONTENT     = #content#,
						SLAC 		= #slac#,
						LM_USER_ID = #crUserId#,
						LM_DATE	= sysdate,
						TR_TYPE_EVT = #trtypeEvt# 
				WHERE 
						AWB_NO= #awbNo# AND
						RCL_NO =#rclNo#
						
			]]>
   	</update>


	<delete id="breakdownawbdelete" parameterClass="cargo.cms.export.bo.AWBBO" >
	<![CDATA[
		DELETE FROM EXP_RCL_BRKDN WHERE  AWB_NO= #awbNo# AND RCL_NO = #rclNo# AND ULD_KEY=#uldKey#		
	]]>
	</delete>
	
	<delete id="awbdeleteexpdocrecd" parameterClass="cargo.cms.export.bo.AWBBO" >	
		DELETE FROM EXP_DOC_RECD WHERE  AWB_NO= #awbNo# AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')	
	</delete>

	<insert id="breakdownawbinsert" parameterClass="cargo.cms.export.bo.AWBBO" >
		<![CDATA[
		INSERT INTO
					EXP_RCL_BRKDN (
				   RCL_NO, AWB_NO, AWB_DATE, 
				   ULD_KEY, PCS, WEIGHT, 
				   DEST, SPL_CODE1, SPL_CODE2, 
				   SPL_CODE3, SPL_CODE4, SPL_CODE5, 
				   SPL_CODE6, SPL_CODE7, SPL_CODE8, 
				   CONTENT, TR_TYPE, TR_STATUS, 
				   CR_USER_ID, CR_DATE, LM_USER_ID, 
				   LM_DATE) 
		VALUES (#rclNo# ,#awbNo# ,to_date(#awbDate#, 'DDMONYY') ,#uldKey# ,#pcs# ,
				#wt# ,#dest# , #splCode1#,#splCode2# ,#splCode3# ,#splCode4# ,
				 #splCode5#,#splCode6# ,#splCode7# ,#splCode8# , #content#,
				 'A' ,'A' ,#crUserId#,sysdate,#crUserId#,sysdate)   					
		]]>
	</insert>

       <insert id="insertAwbMovement" parameterClass="cargo.cms.export.bo.AWBBO" >
	INSERT INTO AWB_MOV
          (AWB_NO, AWB_DATE, LOC_CODE, LOC_PCS, LOC_WT, STRG_DATE,
          RETRV_DATE, MOV_DATE, TR_TYPE, TR_STATUS, CR_USER_ID, 
          CR_DATE, LM_USER_ID, LM_DATE, SEQ_NO, EVENT_ID,          
		  PPK_IND,ULD_CARR,ULD_KEY,ULD_NO,ULD_TYPE)
        VALUES
          (#awbNo#, to_date(#awbDate#, 'DDMONYY') , 
          #dest#, #pcs#, #wt#, sysdate, sysdate, 
          sysdate, 'RC', 'N', #crUserId#, sysdate, #crUserId#, 
          sysdate, AWB_MOV_SEQ.NEXTVAL, 'MEULDC',
          #ppkType#,#uldCarr#,#uldKey#,#uldNo#,#uldType#)
	</insert>
	
	<select id="sql_pman_awb_validate" parameterClass="map" resultClass="java.lang.Integer" >
		select count(1) from exp_pmanifest_awb 
			where awb_no = #awbNo# 
			and awb_date = to_date(#awbDate#,'DDMONYY')			
	</select>
	<select id="sql_pman_tarmac_awb_validate" parameterClass="map" resultClass="java.lang.Integer" >
		select count(1) from exp_pman_tarmac_awb 
			where awb_no = #awbNo# 
			and awb_date = to_date(#awbDate#,'DDMONYY')			
	</select>
	<select id="sql_cir_awb_validate" parameterClass="map" resultClass="java.lang.Integer" >
	<![CDATA[
		select count(1) from imp_car_shp where awb_no = #awbNo# and awb_date = to_date(#awbDate#,'DDMONYY') and flt_key = #fltKey# and flt_date= #fltDate# and cir_proc_user is not null and cir_pcs > 0
		]]>
	</select>
	
	<select id="checkOutStanding" parameterClass="map" resultClass="java.lang.Integer" >
		select count(1) from BILL_CHARGE_DTL bil
			JOIN AWB awb ON awb.AWB_NO = UPPER(bil.AWB_NO) 
			AND awb.awb_date = UPPER (bil.awb_date)			
			where bil.awb_no = #awbNo# 
			and bil.awb_date = to_date(#awbDate#,'DDMONYY')			
			and bil.status='PENDING'
	</select>
	<select id="checkAWBhaseRCL" parameterClass="map" resultClass="java.lang.Integer" >
	<![CDATA[
		SELECT COUNT(1) FROM (
		SELECT COUNT(1) AS cnt FROM EXP_PRE_RCL_HD A WHERE A.AWB_NO=#awbNo# AND A.AWB_DATE=#awbDate# AND (A.STATUS!='EXPIRED' AND A.STATUS!='OUTSTANDING') AND A.AWB_NO IS NOT NULL
		UNION	 
		SELECT COUNT(1) AS cnt FROM EXP_PRE_RCL_HD A,EXP_PRE_RCL_BRKDN B WHERE 
	B.PRE_RCL_NO=A.PRE_RCL_NO AND B.AWB_NO=#awbNo# AND B.AWB_DATE=#awbDate# AND (A.STATUS!='EXPIRED' AND A.STATUS!='OUTSTANDING')) WHERE cnt>0
		]]>
	</select>
	

	<select id="sql_pman_uld_validate" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="java.lang.Integer" >
		SELECT COUNT(1) FROM 
			ULD_INVENTORY ULDINV
			JOIN EXP_PMANIFEST_ULD ULD ON ULD.FLT_KEY = ULDINV.FLT_KEY AND ULD.FLT_DATE = ULDINV.FLT_DATE AND ULD.ULD_BT_NO = ULDINV.ULD_KEY
			JOIN EXP_PMANIFEST_ULD_AWB ULDAWB ON ULDAWB.FLT_KEY = ULDINV.FLT_KEY AND ULDAWB.FLT_DATE = ULDINV.FLT_DATE AND ULDAWB.ULD_BT_NO = ULDINV.ULD_KEY
			WHERE ULD_KEY = #uldNo#
			AND TO_CHAR(uld.FLT_DATE,'DDMONYY')  >= (SELECT TO_CHAR(H.RCL_DATE,'DDMONYY')
		  	FROM EXP_RCL_HD H, EXP_RCL_DTL D
		  	WHERE
		  	H.ULD_KEY =UPPER(#uldNo#) 
		  	AND H.RCL_NO=D.RCL_NO
		  	AND H.RCL_NO=#rclNo#)	    
	</select>
	
	<select id="sql_pman_uld_validate_uld_inv" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="java.lang.Integer" >
		   	select count(1)
			from uld_inventory
			where uld_key = #uldNo#
			and flt_type = 'E'
			and flt_key is not null    
	</select>
	
	<select id="sql_get_flight_pman_uld" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="cargo.cms.export.bo.ExportULDBO" >
		    select 
		    #rclNo# rclNo,
		    FLT_KEY fltKey,
		    #uldNo# uldNo,
		    TO_CHAR(FLT_DATE,'DDMONYY') fltDepDate		    
		    from EXP_PMANIFEST_ULD 
			where ULD_BT_NO = #uldNo#    
			AND FLT_DATE  >= (SELECT TO_CHAR(H.RCL_DATE,'DDMONYY')
		      FROM EXP_RCL_HD H, EXP_RCL_DTL D
		      WHERE
		      H.ULD_KEY =UPPER(#uldNo#) 
		      AND H.RCL_NO=D.RCL_NO
		      AND H.RCL_NO=#rclNo#)
		      and rownum = 1			    
	</select>
	
	<select id="sql_man_uld_validate" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="java.lang.Integer" >
	SELECT COUNT(1) FROM ULD_INVENTORY ULDINV
    JOIN EXP_MANIFEST_HD HD ON HD.FLT_KEY = ULDINV.FLT_KEY AND HD.FLT_DATE = ULDINV.FLT_DATE
    JOIN EXP_MANIFEST_ULD ULD ON ULD.TR_NO = HD.TR_NO AND ULD.ULD_KEY=ULDINV.ULD_KEY
    JOIN EXP_MANIFEST_DTL dtl ON dtl.TR_NO = uld.TR_NO and dtl.UDOC_LINE_NO = uld.DOC_LINE_NO
    WHERE ULDINV.ULD_KEY=#uldNo#      
	</select>

<select id="houseDtlsExpBreakDown" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="cargo.cms.export.bo.AWBBO" >
 
	SELECT * FROM
							(SELECT 
                                H.HAWB_NO AS hawbNo ,
                                H.HAWB_ORG AS hawbOrg,
                                H.HAWB_DEST AS hawbDest,
                                H.HAWB_PCS AS fhlPcs,
                                H.HAWB_NET_WT AS fhlWt,
                                TO_CHAR(U.LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModDate,          
                                U.LM_USER_ID AS lastModifiedBy,                         
                                ABS(H.HAWB_PCS-(select sum(uld.PC) from EXP_RCL_ULD_MANF uld
                    join EXP_RCL_HD rcl on rcl.RCL_NO = uld.RCL_NO
                    where uld.AWB_NO = #houseAwbNo# and uld.HAWB_NO = H.HAWB_NO AND rcl.STATUS='S')) AS avlPcs,    
                                ABS(H.HAWB_NET_WT-(select sum(uld.WT) from EXP_RCL_ULD_MANF uld
                    join EXP_RCL_HD rcl on rcl.RCL_NO = uld.RCL_NO
                    where uld.AWB_NO = #houseAwbNo# and uld.HAWB_NO = H.HAWB_NO AND rcl.STATUS='S')) AS avlWt,                      
                                'RCL' AS actionFrom,
                A.AWB_PCS as awbPcs,
                A.AWB_WT as awbWt,
                                U.PC as loadPcs,
                                U.WT as loadWt                                
                FROM EDI_FHL A
                                JOIN EDI_FHL_HAWB H
                                ON A.TR_NO = H.TR_NO
                                JOIN EXP_RCL_ULD_MANF U
                                ON A.AWB_NO = U.AWB_NO AND H.HAWB_NO=U.HAWB_NO
                                where A.AWB_NO = #houseAwbNo#
                                AND U.ULD_KEY =#uldKey#        
                                AND U.RCL_NO=#rclNo#              
                                
                                union ALL
                                
                                SELECT 
                                H.HAWB_NO AS hawbNo ,
                                H.HAWB_ORG AS hawbOrg,
                                H.HAWB_DEST AS hawbDest,
                                H.HAWB_PCS AS fhlPcs,
                                H.HAWB_NET_WT AS fhlWt,       
    TO_CHAR(H.LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModDate,      
                                H.LM_USER_ID AS lastModifiedBy,
                                 ABS(H.HAWB_PCS-(select sum(uld.PC) from EXP_RCL_ULD_MANF uld
                    join EXP_RCL_HD rcl on rcl.RCL_NO = uld.RCL_NO
                    where uld.AWB_NO = #houseAwbNo# and uld.HAWB_NO = H.HAWB_NO AND rcl.STATUS='S')) AS avlPcs,
                                ABS(H.HAWB_NET_WT-(select sum(uld.WT) from EXP_RCL_ULD_MANF uld
                    join EXP_RCL_HD rcl on rcl.RCL_NO = uld.RCL_NO
                    where uld.AWB_NO = #houseAwbNo# and uld.HAWB_NO = H.HAWB_NO AND rcl.STATUS='S')) AS avlWt,
                                'FHL' AS actionFrom,
                A.AWB_PCS as awbPcs,
                A.AWB_WT as awbWt,
                                0 as loadPcs,
                                0 as loadWt
                                FROM EDI_FHL A
                                JOIN EDI_FHL_HAWB H
                                ON A.TR_NO = H.TR_NO                              
                                where A.AWB_NO = #houseAwbNo#
                                and H.HAWB_NO not in(
                                SELECT 
                                H.HAWB_NO
                                FROM EDI_FHL A
                                JOIN EDI_FHL_HAWB H
                                ON A.TR_NO = H.TR_NO
                                JOIN EXP_RCL_ULD_MANF U
                                ON A.AWB_NO = U.AWB_NO AND H.HAWB_NO=U.HAWB_NO
                                where A.AWB_NO = #houseAwbNo#
                                AND U.ULD_KEY =#uldKey#        
                                AND U.RCL_NO=#rclNo#)) order by hawbNo 
	</select>
	
	<select id="fhlHouseDtlsExpBreakDown" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="cargo.cms.export.bo.AWBBO" >
		SELECT 
		H.HAWB_NO AS hawbNo ,
		H.HAWB_ORG AS hawbOrg,
		H.HAWB_DEST AS hawbDest,
		H.HAWB_PCS AS fhlPcs,
		H.HAWB_NET_WT AS fhlWt,		
		H.HAWB_PCS AS avlPcs,
		H.HAWB_NET_WT AS avlWt,
		'FHL' AS actionFrom,
		A.AWB_PCS as awbPcs,
		A.AWB_WT as awbWt,
		'0' as loadPcs,
		'0' as loadWt
		FROM EDI_FHL A
		JOIN EDI_FHL_HAWB H
		ON A.TR_NO = H.TR_NO		
		where A.AWB_NO = #houseAwbNo#			
	</select>
	
	<select id="houseERCLDtlsExpBreakDown" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="cargo.cms.export.bo.AWBBO" >	
	    SELECT 
		H.HAWB_NO AS hawbNo ,
		H.HAWB_ORG AS hawbOrg,
		H.HAWB_DEST AS hawbDest,
		H.HAWB_PCS AS fhlPcs,
		H.HAWB_NET_WT AS fhlWt,
		TO_CHAR(U.LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModDate,	
		U.LM_USER_ID AS lastModifiedBy,
		ABS(H.HAWB_PCS-U.PC) AS avlPcs ,
		ABS(H.HAWB_NET_WT-U.WT) AS avlWt ,
		'ERCL' AS actionFrom,
		A.AWB_PCS as awbPcs,
		A.AWB_WT as awbWt,
		U.PC as loadPcs,
		U.WT as loadWt
		FROM EDI_FHL A
		JOIN EDI_FHL_HAWB H
		ON A.TR_NO = H.TR_NO
		JOIN EXP_PRE_RCL_ULD_MANF U
		ON A.AWB_NO = U.AWB_NO AND H.HAWB_NO=U.HAWB_NO
		where 
    	A.AWB_NO = #houseAwbNo#
		AND U.ULD_KEY =#uldKey#
		AND U.PRE_RCL_NO=#rclNo#
	</select>

	<insert id="insertHouseMnfstDtlsExpBreakDown" parameterClass="cargo.cms.export.bo.AWBBO">
		INSERT INTO EXP_RCL_ULD_MANF
          (RCL_NO,ULD_KEY,AWB_NO,HAWB_NO,PC,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
        VALUES
          (#rclNo#,#uldKey#,#houseAwbNo#,#hawbNo#,#newBUPcs#,#newBUWt#,#lastModUserId#,
          sysdate,#lastModUserId#,sysdate)          
	</insert>
	
	<update id="updateHouseMnfstDtlsExpBreakDown" parameterClass="cargo.cms.export.bo.AWBBO">
		UPDATE EXP_RCL_ULD_MANF
	   	SET PC = #newBUPcs#,
	   	WT = #newBUWt#,
	   	LM_DATE = SYSDATE,
	   	LM_USER_ID = #lastModUserId#
	   	WHERE AWB_NO = #houseAwbNo# AND
		HAWB_NO = #hawbNo# AND		
		RCL_NO=#rclNo# AND
		ULD_KEY=#uldKey#
	</update>
	
	<delete id="deleteHouseMnfstDtlsExpBreakDown" parameterClass="cargo.cms.export.bo.AWBBO">
		DELETE FROM EXP_RCL_ULD_MANF 
		WHERE  AWB_NO= #awbNo# 
		AND RCL_NO = #rclNo# 
		AND ULD_KEY=#uldKey#	
	</delete>
	
	<select id="checkFhlMsgForAwbExpBreakDown" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.Integer">
  		select count(1) from EDI_FHL where AWB_NO=#houseAwbNo#
	</select>
	<select id="verifyRecvDocForAwbExpBreakDown" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.Integer">
	  	select count(1) from EXP_DOC_RECD where AWB_NO=#houseAwbNo#
	</select>
	
	<select id="checkAWBBlacklisted" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT count(1)
		FROM awb_lock 
		WHERE awb_no = #PARAM#
			AND miss_yn = 'Y'
	</select>
	
	<select id="checkULDMixPrepack"  parameterClass="cargo.cms.export.bo.ExportULDBO"  resultClass="java.lang.Integer">
		select count(1)
        from   exp_rcl_hd 
        where  uld_key = #uldNo#
     	and PPK_TYPE = 'M' 
     	and RCL_NO = #rclNo#
     	and  void_user_id is null       						                    
	</select>
	
	<select id="checkULDISBuilduporNot"  parameterClass="cargo.cms.export.bo.ExportULDBO"  resultClass="java.lang.String">
		SELECT MANIFEST_YN FROM EXP_ULD_AWB WHERE ULD_KEY=#uldNo# AND RCL_NO=#rclNo# and manifest_yn = 'Y' and rownum=1      						                    
	</select>
	
	<select id="checkMIXULDisassignedornot"  parameterClass="cargo.cms.export.bo.ExportULDBO"  resultClass="java.lang.Integer">
	SELECT count(1) FROM ULD_INVENTORY U
		JOIN FLT_OPR F ON U.FLT_KEY = F.FLT_KEY AND U.FLT_DATE = F.SCH_DATE AND F.FLT_TYPE = decode(U.FLT_TYPE,'E','D','A')
    WHERE U.ULD_KEY=#uldNo# AND (U.FLT_TYPE = 'E' AND U.FLT_KEY IS NOT NULL) AND F.FLT_KEY IS NOT NULL
	</select>
	
	

<!-- #####################  Added for Maintain Exp ULD Consignment List : Santosh Desai  : End       ###############################################-->

<!-- Added by Manorama for Super Urgent Cargo::: Starts -->
<select id="getListOfTrNo" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO" resultClass="cargo.cms.export.bo.SuperUrgentResultBO">
SELECT tr_no AS trNo,
  uld_key     AS newUldNo,EST_TIME as estTime
   FROM exp_super_urgent
  WHERE STATUS = 'OPEN'
   and rcl_no is not null
</select>
<select id="getListOfULDToBeExp" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO" resultClass="cargo.cms.export.bo.SuperUrgentResultBO">
SELECT tr_no AS trNo,
  uld_key     AS newUldNo,EST_TIME as estTime
   FROM exp_super_urgent
  WHERE STATUS = 'OPEN'
AND to_char(sysdate,'DDMONYY HH24MI') > to_char(to_date( (select (to_char((to_date((select to_char(EST_TIME,'DDMONYY HH24MI') from exp_super_urgent where tr_no = #trNo#),'DDMONYY HH24MI')
 + (SELECT RULE_VALUE FROM CMSRULES where RULE_CODE = 'SUPER_UGNT_EXP_TIME')/24 ),'DDMONYY HH24MI'))  from dual),'DDMONYY HH24MI'),'DDMONYY HH24MI')
   and rcl_no is not null
</select>	
<update id="updateSuperStatusExp" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO">
  update exp_super_urgent set status = 'EXPIRED',LM_DATE = sysdate
  where tr_no = #trNo# and uld_key = #newUldNo# 
</update>

<!-- Added by Manorama for Super Urgent Cargo::: Ends -->
	

<!--  Added By Surendra Gollaplli Receive Document FInal START -->

   	
  <!-- ##################### Receive Document   : Start  #########################################-->	
  
  	<select id="sqlgetunitPrice" parameterClass="map"  resultClass="java.lang.String">
  		SELECT TO_CHAR(PKG_CALCULATE.GET_UNIT_PRICE(UPPER(#ITM_CODE#),UPPER(#ITM_CODE_SFX#),1)) as UNIT_PRICE FROM DUAL
  	</select>
  	 	
  	<parameterMap class="map" id="hawbChrgMap">
	<parameter property="P_AWB_NO" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
	<parameter property="P_AWB_DATE" jdbcType="DATE"  javaType="java.lang.String"	mode="IN"/>
  	<parameter property="P_AWB_TYPE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
  	<parameter property="P_MODE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
  	</parameterMap> 
 	<procedure id="sqlGetHawbCharg" parameterMap="hawbChrgMap" >
  		{call PKG_EXP_BILLING.GET_EXP_HAWB_CHRG(?,?,?,?)}
	 </procedure>
  	<select id="sqlgetItemCodeWithPrff" parameterClass="cargo.cms.export.bo.AWBBO"  resultClass="cargo.cms.export.bo.AWBBO">
  		SELECT itm_code AS itemCode, itm_code_sfx  itemSuff, ITM_DESC itemDesc, 
  		rev_ind revInd,NVL(CASH_IND,'N') cashInd,NVL(STD_IND,'N') stdInd,unit_price unitPrice,amt charges	FROM GT_SRF_CHARGES WHERE awb_no=#awbNo# and awb_date = #awbDate#
  	</select>
   	
  	<select id="chkAwbExist" parameterClass="cargo.cms.export.bo.AWBBO"  resultClass="java.lang.String">
  		SELECT COUNT(1) 
  		FROM BILL_CHARGE_DTL bil
  		JOIN AWB awb ON awb.AWB_NO = UPPER(bil.AWB_NO) 
		AND awb.awb_date = UPPER (bil.awb_date)		  
  		WHERE bil.awb_no = #awbNo# 
  		AND bil.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')       
  	</select>
  	
  	<delete id="deleteBillCharge" parameterClass="cargo.cms.export.bo.AWBBO">
		DELETE FROM BILL_CHARGE_DTL WHERE awb_no = #awbNo# AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	</delete>
	
	<select id="chkAwbMIx" parameterClass="cargo.cms.export.bo.AWBBO"  resultClass="java.lang.String">
  		select count(1) from exp_uld_awb where  awb_no = #awbNo# and awb_date = TO_DATE(#awbDate#,'DDMONYY') and ppk_type = 'M'
  	</select>
  	
  	<select id="getRclNumber" parameterClass="cargo.cms.export.bo.AWBBO"  resultClass="java.lang.String">
  		select rcl_no from exp_uld_awb where  awb_no = #awbNo# and awb_date = TO_DATE(#awbDate#,'DDMONYY') and ppk_type = 'M' and rownum = 1
  	</select>
  	
  	<select id="getRclNumberForULD" parameterClass="java.lang.String"  resultClass="java.lang.String">
  		select rcl_no from exp_uld_awb where uld_key= #uldNo#  and ppk_type = 'M' and rownum = 1
  	</select>
  	
  	<select id="chkUldMIx" parameterClass="java.lang.String"  resultClass="java.lang.String">
  		select count(1) from exp_uld_awb where uld_key  = #uld_key# and ppk_type = 'M'
  	</select>
  	
	<select id="getBillStatus" parameterClass="cargo.cms.export.bo.AWBBO"  resultClass="java.lang.String">	
		SELECT STATUS as billStatus FROM BILL_CHARGE_DTL WHERE awb_no = #awbNo# AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
  	</select>
	
  	<insert id="insertRecDocBillCharges" parameterClass="cargo.cms.export.bo.AWBBO" >
    	 INSERT INTO BILL_CHARGE_DTL ( TR_NO, AWB_NO, AWB_DATE,ULD_KEY,RCL_NO,
            ITM_CODE, ITM_CODE_SFX, STATUS, ITM_DESC, 
            STD_IND,REV_IND, CASH_IND, QTY, UNIT_PRICE, CHRG_AMT, 
            CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE,WAVR_IND,NET_AMT,WAVR_DONE,WAVR_AMT,WAVR_RMK,WAVR_DATE,WAVR_USER_ID,WAVR_FORM_NO,HAWB_DTL) 
            VALUES ( BILL_CHARGE_DTL_SEQ.nextval, #awbNo#, #awbDate#,#uldKey#,#rclNo#,
            #itemCode#, #itemSuff#, 'PENDING', #itemDesc#,
            #stdInd#,#revInd#,#cashInd#,#quantity#,#unitPrice#,decode(substr((NVL(#totCharges#,0)-NVL(#waverAmt#,0)),0,1),'-',0,(NVL(#totCharges#,0)-NVL(#waverAmt#,0))),        
            #crUserId#, sysdate,#crUserId#, sysdate,nvl(#waiveFlag#,'N'),decode(substr((NVL(#totCharges#,0)-NVL(#waverAmt#,0)),0,1),'-',0,(NVL(#totCharges#,0)-NVL(#waverAmt#,0))),
            NVL(#waverDone#,'N'),NVL(#waverAmt#,0),#waverRmk#,TO_DATE(#waiverDate#,'DDMONYY HH24:MI:SS'),#waiverUser#,#waverFormNumber#,#hawbNo#)   
 	</insert>
	 
	<select id="sqlWaiveAmtForRecDoc" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="cargo.cms.export.bo.AWBBO" >
	SELECT TR_NO trNo,			
		   WAVR_AMT waverAmt,
	       WAVR_RMK waverRmk,
	       WAVR_FORM_NO waverFormNumber,
	       CR_USER_ID waiverUser,
	       TO_CHAR(CR_DATE , 'DDMONYY HH24:MI:SS') waiverDate
	FROM BILL_WAIVE_CHARGE
	WHERE NVL(CHARGE_CREATED,'N') = 'N'
	<isNotEmpty property="awbNo">
				AND AWB_NO=UPPER(#awbNo#)
			</isNotEmpty>
			<isNotEmpty property="awbDate">
				AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			</isNotEmpty>
			<isNotEmpty property="itemCode">
				AND ITM_CODE=UPPER(#itemCode#)
			</isNotEmpty>
			<isNotEmpty property="itemSuff">
				AND NVL(ITM_CODE_SFX,'*')= UPPER(#itemSuff#)
	</isNotEmpty>
	</select>
	 
	<update id="updateBillChargeDtls"  parameterClass="cargo.cms.export.bo.AWBBO">
		UPDATE BILL_CHARGE_DTL
			SET
				QTY = #quantity#,
				CHRG_AMT = #totCharges#, 
				UNIT_PRICE = #unitPrice#,
				LM_USER_ID = #crUserId#,
				LM_DATE = sysdate,
				HAWB_DTL = #hawbNo# 
			WHERE
				  AWB_NO =#awbNo# AND AWB_DATE = #awbDate#	AND ITM_CODE = 'DCIEDC'	
	</update>   
	<select id="getHawbDtlToBeCharged" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
  		SELECT STRAGG(STRINGDELIM(HAWB_NO, ',')) from (SELECT HAWB_NO FROM EDI_FHL_HAWB WHERE TR_NO = (SELECT TR_NO FROM EDI_FHL WHERE AWB_NO = #awbNo# and awb_date=TO_DATE(#awbDate#,'DDMONYY')) AND CHARGE_AGENT = 'Y')
  	</select>
	<select id="checkTranshipmentType" parameterClass="cargo.cms.export.bo.AWBBO"  resultClass="java.lang.String">
  		select awb_type from AWB where AWB_NO = #awbNo# and AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')	
  	</select>
  	
	<select id="getHawbCountToBeCharged" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
  		select COUNT(1) from edi_fhl_hawb where tr_no = (select tr_no from edi_fhl where awb_no = #awbNo# and awb_date=TO_DATE(#awbDate#,'DDMONYY')) and charge_agent = 'Y'
  	</select>
  

	
	<select id="sqlrcvdocawbdetails" parameterClass="cargo.cms.export.bo.DocumentSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
		 SELECT concat(concat(SUBSTR(a.awb_no, 0, 3), '-'), SUBSTR(a.awb_no, 4)) AS awbNoDisplay          ,
				  a.awb_no                                                               AS awbNo                 ,
				  TO_CHAR(a.awb_date, 'ddMONYY')                                         AS awbDate               ,
				  aw.pcs                                                                 AS pcs                   ,
				  TO_CHAR(recd_date, 'ddMONYY hh24:mi')                                  AS prevDocRecvdDate      ,				  
				  TO_CHAR(recd_date, 'DDMONYY')             		                     AS recDate     	      ,
				  TO_CHAR(recd_date, 'HH24')                        			         AS recHr    			  ,
				  TO_CHAR(recd_date, 'MI')                          			         AS recMin    			  ,				  
				  rej_code                                                               AS rejectCode            ,
				  TO_CHAR(recd_date, 'ddMONYY hh24:mi')                                  AS docRecvdDate          ,
				  TO_CHAR(pkg_exp_val.get_hawb_recd_date(a.awb_no),'ddMONYY hh24:mi')    AS fhlRecvdDate          ,
				  no_hawb_recd							                                 AS noHawbProcessedDisplay,
				  no_hawb_recd 															 AS oldHawbRec,
				  recd_rmk                                                               AS prvRecvdRmk           ,
				  recd_status                                                            AS docRecvdStatus        ,
				  recd_status                                                            AS oldRecvdStatus        ,
				  rej_rmk                                                                AS prvRejectRmk          ,
				  awb_frz_yn                                                             AS awbFrzFlg             ,
				  awb_frz_yn                                                             AS oldAwbFrzFlg             ,
				  awb_frz_date                                                           AS awbFrzDate            ,
				  awb_unfrz_user                                                                                  ,
				  awb_unfrz_date                                                         AS awbUnfrzDate         ,
				  FWB_UNFRZ_DATE                                                       	 AS fwbUnfrzDate,
				  FWB_FRZ_YN                                                             AS fwbFrzYn            ,
				  FWB_FRZ_DATE                                                           AS fwbFrzDate          ,
				  agent_id                                                                                          ,
				  truck_no                                                                                          ,
				  wv_charge_yn                                                                                      ,
				  pkg_exp_val.get_hawb_source(a.awb_no) AS fhlRecvdFrom                                             ,
				  (SELECT COUNT(1) FROM V_EDI_FHL_HAWB WHERE awb_no = a.awb_no) noHawbProcessed						,
				  NO_HAWB_CHARGED AS chargesDisp,
				  a.agent_name as agentName,
           		  a.agent_id as agentId,
           		  DECODE((SELECT COUNT(1) FROM edi_fwb WHERE awb_no = a.awb_no), 0, 'N', 'Y') AS fwbRecwdInd,
				  (SELECT code_desc FROM mast_code_dtl   WHERE a.rej_code = mast_code_dtl.code AND mast_code_dtl.code_type = 'DOC_REJ_TYPE') AS docRejectDescription
				   FROM exp_doc_recd a, awb aw	where  a.awb_no = upper(#awbNo#) 
						and a.awb_date = to_date(#awbDate#,'DDMONYY')
						and a.awb_no=aw.awb_no and a.awb_date=aw.awb_date 
						and a.awb_closed_yn = 'N'
	</select>
	<select id="checkFWBCreatedOrNot" parameterClass="cargo.cms.export.bo.DocumentSearchBO"  resultClass="java.lang.Integer">
	SELECT count(1) FROM EDI_FWB WHERE AWB_NO = UPPER(#awbNo#) AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	</select>
	<select id="checkExpCarCreatedOrNot" parameterClass="cargo.cms.export.bo.DocumentSearchBO"  resultClass="java.lang.Integer">
	SELECT count(1) FROM EXP_CAR WHERE AWB_NO = UPPER(#awbNo#) AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')	
	</select>

	<select id="checkExpCarRecordExists" parameterClass="cargo.cms.export.bo.DocumentSearchBO"  resultClass="java.lang.Integer">
	SELECT count(1) FROM EXP_CAR WHERE AWB_NO = UPPER(#awbNo#) AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')  
	</select>

	<select id="getFwbInfoForAWBGLS" parameterClass="cargo.cms.imprt.bo.CarShpBO" resultClass="cargo.cms.awb.bo.AWBEnquiryBO">
	select carr_code as carrCode,pcs as loadedPcs,wt as loadedWt,content as content,CATALOG as catalog,ACCEPT_MODE as acceptMode  from awb where AWB_NO = UPPER(#awbNo#) AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	</select>
	<select id="getFwbInfoForAWBGLS1" parameterClass="cargo.cms.triggers.imprt.bo.CarShpBO" resultClass="cargo.cms.awb.bo.AWBEnquiryBO">
	select carr_code as carrCode,pcs as loadedPcs,wt as loadedWt,content as content,CATALOG as catalog,ACCEPT_MODE as acceptMode  from awb where AWB_NO = UPPER(#awbNo#) AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	</select>
	<select id="checkIfAutoSetSHC"  parameterClass="java.util.HashMap"  resultClass="java.lang.String">
		 select count(1) from exp_rcl_hd hd LEFT OUTER JOIN exp_rcl_brkdn brkdn
		 ON hd.rcl_no=brkdn.rcl_no where ((hd.awb_no=#awbNo# and hd.awb_date = to_date(#awbDate#,'DDMONYY')) OR (brkdn.awb_no=#awbNo# and brkdn.awb_date = to_date(#awbDate#,'DDMONYY')))
	  	 AND hd.status not in ('V','R') and hd.aside_accept='Y' 
	</select>
	<select id="checkSHCReq"  parameterClass="java.util.HashMap"  resultClass="java.lang.String">		 
  		select spl_code from MAST_CUST_SPL_HAND_CODE where (cust_no=#agentCode# or cust_no=(select code from cust_company where code_desc=#agentName#))
	</select>
	<select id="getFwbInfoForAWB1"  parameterClass="cargo.cms.triggers.imprt.bo.CarShpBO"  resultClass="cargo.cms.awb.bo.AWBEnquiryBO">
		 SELECT 
		   	FWB.AWB_NO AS awbNo, 
 			TO_CHAR(FWB.AWB_DATE,'DDMONYY') AS awbDate, 	    
     		UPPER(FWB.FLT_KEY1) AS fltKey,     		
			FWB.SHPR_NAME AS shprName, 
 			FWB.AGENT_NAME AS appntdAgent, 	    
     		  DECODE(A.AWB_NO,'',FWB.SPH_SPL_CODE1,A.SPL_CODE1)       AS splCode1,
			  DECODE(A.AWB_NO,'',FWB.SPH_SPL_CODE2,A.SPL_CODE2)       AS splCode2,
			  DECODE(A.AWB_NO,'',FWB.SPH_SPL_CODE3,A.SPL_CODE3)       AS splCode3,
			  DECODE(A.AWB_NO,'',FWB.SPH_SPL_CODE4,A.SPL_CODE4)       AS splCode4,
			  DECODE(A.AWB_NO,'',FWB.SPH_SPL_CODE5,A.SPL_CODE5)       AS splCode5,
			  DECODE(A.AWB_NO,'',FWB.SPH_SPL_CODE6,A.SPL_CODE6)       AS splCode6,
			  DECODE(A.AWB_NO,'',FWB.SPH_SPL_CODE7,A.SPL_CODE7)       AS splCode7,
			  DECODE(A.AWB_NO,'',FWB.SPH_SPL_CODE8,A.SPL_CODE8)       AS splCode8,
			  DECODE(A.AWB_NO,'',FWB.SPH_SPL_CODE9,A.SPL_CODE9)       AS splCode9,
      		FWB.ORG AS awbOrigin, 
		  	FWB.DES AS awbDest, 
      		FWB.CSGNE_NAME as consignee,
      		FWB.CSGNE_ADDR AS consigneAddr,
      		FWB.CSGNE_STATE_PROVINCE AS consigneAddr1,
      		FWB.CSGNE_ADDR2 as consigneAddr2,
      		FWB.SHPR_ADDR2 as shipperAddr2,
      		decode(FWB.CSGNE_PLACE,'','Hong Kong',FWB.CSGNE_PLACE) as consCity,
	    	decode(FWB.CSGNE_CTRY_CODE,'','HK',FWB.CSGNE_CTRY_CODE) as consCountry,
      		FWB.SHPR_NAME AS shipperName,
      		FWB.SHPR_ADDR AS shipperAddr,
      		decode(FWB.SHPR_PLACE,'','Hong Kong',FWB.SHPR_PLACE) AS shipperAddr1,
			FWB.SHPR_STATE_PROVINCE AS shipperAddr3,
      		decode(FWB.SHPR_CTRY_CODE,'','HK',FWB.SHPR_CTRY_CODE) as shprCountry,
	    	FWB.AGENT_NAME AS appiontedAgent,
      		FWB.AGENT_PLACE AS agentAddr,
            (SELECT RATE_GOODS_NATR FROM
                 (select EFCR.TR_NO, EFCR.RATE_GOODS_NATR from EDI_FWB_CHR_RATE efcr where (RATE_GOODS_DATA_I = 'C' OR RATE_GOODS_DATA_I='G') ORDER BY TR_NO, DOC_LINE_NO) ee WHERE EE.TR_NO=FWB.TR_NO AND ROWNUM=1) content,
            FWB.RA_NO raNumber  
     		FROM EDI_FWB FWB
     		LEFT JOIN AWB A ON A.AWB_NO =  FWB.AWB_NO AND A.AWB_DATE =  FWB.AWB_DATE
     		WHERE 
     		FWB.AWB_NO = UPPER(#awbNo#) AND
		  	FWB.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') AND tr_no = ( SELECT MAX(tr_no) FROM EDI_FWB WHERE AWB_NO = UPPER(#awbNo#) AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') )
	</select>
	
	<insert id="updateExpCarInfoWithFWB" parameterClass="cargo.cms.awb.bo.AWBEnquiryBO">
	INSERT INTO EXP_CAR(AWB_NO,AWB_DATE,AWB_PRFX,ACCEPT_MODE,HANDLER_CODE,CATALOG,CARR_CODE,ORIGIN,DEST,PCS,WT,CONTENT,SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE5,
                    SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9,SHPR_NAME,AGENT_CODE,AGENT_NAME,SHPR_ADDR,SHPR_STATE_PROVINCE,SHPR_PLACE,SHPR_CTRY_CODE,
                    CSGNE_NAME,CSGNE_ADDR,CSGNE_PLACE ,CSGNE_CTRY_CODE,LOCK_IND,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TR_TYPE,SEC_RC_CODE,SHPR_ADDR2,CSGNE_ADDR2)
            VALUES(#awbNo#,#awbDate#,substr(#awbNo#,0,3),#acceptMode#,'CPCT',#catalog#,#carrCode#,#awbOrigin#,#awbDest#,#loadedPcs#,#loadedWt#,#content#,#splCode1#,#splCode2#,#splCode3#,#splCode4#,#splCode5#,
                  #splCode6#,#splCode7#,#splCode8#,#splCode9#,#shprName#,#agentCode#,#appntdAgent#,#shipperAddr#,#shipperAddr3#,#shipperAddr1#,#shprCountry#,
                  #consignee#,#consigneAddr#,#consCity#,#consCountry#,'N','GLS',SYSDATE,'GLS',SYSDATE,'EXCAR',#raNumber#,#shipperAddr2#,#consigneAddr2#)
	</insert>

	<update id="modifyExpCarInfoWithFWB"  parameterClass="cargo.cms.awb.bo.AWBEnquiryBO">
	update EXP_CAR set
		ACCEPT_MODE=#acceptMode#,
		CATALOG=#catalog#,
		CARR_CODE=#carrCode#,
		ORIGIN=#awbOrigin#,
		DEST=#awbDest#,
		PCS=#loadedPcs#,
		WT=#loadedWt#,
		CONTENT=#content#,
		SPL_CODE1=#splCode1#,
		SPL_CODE2=#splCode2#,
		SPL_CODE3=#splCode3#,
		SPL_CODE4=#splCode4#,
		SPL_CODE5=#splCode5#,
		SPL_CODE6=#splCode6#,
		SPL_CODE7=#splCode7#,
		SPL_CODE8=#splCode8#,
		SPL_CODE9=#splCode9#,
		SHPR_NAME=#shprName#,
		AGENT_CODE=#agentCode#,
		AGENT_NAME=#appntdAgent#,
		SHPR_ADDR=#shipperAddr#,
		SHPR_STATE_PROVINCE=#shipperAddr3#,
		SHPR_PLACE=#shipperAddr1#,
		SHPR_CTRY_CODE=#shprCountry#,
		CSGNE_NAME=#consignee#,
		CSGNE_ADDR=#consigneAddr#,
		CSGNE_ADDR2=#consigneAddr2#,
		CSGNE_PLACE=#consCity#,
		CSGNE_CTRY_CODE=#consCountry#,
		LOCK_IND='N',
		LM_USER_ID='GLS',
		LM_DATE=SYSDATE,
		TR_TYPE='EXCAR',
		SEC_RC_CODE = NVL(SEC_RC_CODE, #raNumber#),
		SHPR_ADDR2 = #shipperAddr2#
		WHERE AWB_NO =#awbNo# AND AWB_DATE=#awbDate#
	</update>
	<update id="updateCarIndInAWB"  parameterClass="cargo.cms.export.bo.DocumentSearchBO">
	UPDATE AWB SET CAR_YN='Y' ,NON_PMAN_PCS=(PCS-PMAN_PCS),NON_PMAN_WT=(WT-PMAN_WT) WHERE awb_no=UPPER(#awbNo#) AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	</update>
	<update id="sqlrcvddocupdateawb"  parameterClass="cargo.cms.export.bo.AWBBO">
		UPDATE EXP_DOC_RECD
			SET
				WV_CHARGE_YN = nvl(#waiveFlag#,'N'),
				RECD_DATE = to_date(#docRecvdDate#,'DDMONYYhh24:mi'), 
			<isEqual  property="hawbRecvdChanged" compareValue="update">	
				NO_HAWB_RECD = nvl(#noHawbRecvd#,'0'),
				NO_HAWB_CHARGED = nvl(#charges#,'0'),
			</isEqual>	
				RECD_STATUS=#docRecvdStatus#,
				REJ_CODE=#rejectCode#,
				AWB_FRZ_YN=#awbFrzFlg#,
				AWB_FRZ_DATE = sysdate,
				REJ_RMK=#docRejectRmk#,
				RECD_RMK=#docRecvdRmk#,
				TRUCK_NO=#truckNo#,
				LM_USER_ID=#crUserId#,
				LM_DATE=sysdate,
				tr_type='RCDOC',
				GLS_YN = #glsYn#
			WHERE
				  AWB_NO =#awbNo# 
			  AND AWB_DATE = #awbDate#		
	</update>
	<select id="sqlrcvddoculddetails" parameterClass="cargo.cms.export.bo.DocumentSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
			SELECT b.uld_key                                                  AS uldKey          ,
			  concat(concat(SUBSTR(a.awb_no, 0, 3), '-'), SUBSTR(a.awb_no, 4)) AS awbNoDisplay    ,
			  a.awb_no                                                         AS awbNo           ,
			  TO_CHAR(b.awb_date, 'ddMONYY')                                   AS awbDate         ,
			  b.pcs                                                            AS pcs             ,
			  TO_CHAR(a.recd_date, 'ddMONYY hh24:mi')                          AS prevDocRecvdDate,
			  TO_CHAR(recd_date, 'DDMONYY')             		               AS recDate     	  ,
			  TO_CHAR(recd_date, 'HH24')                        			   AS recHr    	      ,
			  TO_CHAR(recd_date, 'MI')                          			   AS recMin    	  ,				  
			  a.rej_code                                                       AS rejectCode      ,
			  TO_CHAR(a.recd_date, 'ddMONYY hh24:mi')                          AS docRecvdDate    ,
			  DECODE(
			  (SELECT COUNT(1) FROM edi_fwb WHERE awb_no = a.awb_no
			  ), 0, 'N', 'Y') AS fwbRecwdInd,
			  TO_CHAR(
			  (SELECT fhl_lm_date
			     FROM V_EDI_FHL_HAWB
			    WHERE awb_no = a.awb_no
			  AND rownum     = 1
			  ),'ddMONYY hh24:mi') AS fhlRecvdDate,
			  (SELECT source FROM V_EDI_FHL_HAWB WHERE awb_no = a.awb_no AND rownum = 1
			  )              AS fhlRecvdFrom          ,
			  a.no_hawb_recd AS noHawbProcessedDisplay,
			  a.no_hawb_recd AS oldHawbRec,
			  TRIM(a.recd_rmk)     AS prvRecvdRmk           ,
			  a.recd_status  AS docRecvdStatus        ,
			  a.rej_rmk      AS prvRejectRmk          ,
			  a.awb_frz_yn   AS awbFrzFlg             ,
			  a.awb_frz_date AS awbFrzDate            ,
			  a.awb_unfrz_user                        ,
			  a.awb_unfrz_date                        ,
			  a.agent_id                              ,
			  a.truck_no AS truckNo                   ,
			  a.wv_charge_yn                          ,
			  b.rcl_no AS rclNo                       ,  
			  a.awb_frz_yn     AS oldAwbFrzFlg          ,
			  a.recd_status    AS oldRecvdStatus        , 
			  a.awb_unfrz_date AS awbUnfrzDate          ,
			  a.FWB_UNFRZ_DATE AS fwbUnfrzDate          ,
			  a.FWB_FRZ_YN     AS fwbFrzYn              ,
			  a.FWB_FRZ_DATE   AS fwbFrzDate            ,
			  (SELECT COUNT(1) FROM V_EDI_FHL_HAWB WHERE awb_no = a.awb_no
			  ) noHawbProcessed,
			  NO_HAWB_CHARGED AS chargesDisp,
			  (SELECT code_desc
			     FROM mast_code_dtl
			    WHERE a.rej_code          = mast_code_dtl.code
			  AND mast_code_dtl.code_type = 'DOC_REJ_TYPE'
			  ) AS docRejectDescription,
			   a.agent_name as agentName,
           	   a.agent_id as agentId
			   FROM exp_doc_recd a,
			  exp_uld_awb b
			  WHERE a.awb_no  = b.awb_no
			AND a.awb_date    = b.awb_date
		   	and    b.uld_key = #uldNo#
		   	and    b.manifest_yn = 'N' and    b.closed_yn = 'N'
	</select> 
	<update id="sqlrcvddocupdateuld"  parameterClass="cargo.cms.export.bo.AWBBO">
		UPDATE EXP_DOC_RECD
			SET
				WV_CHARGE_YN = nvl(#waiveFlag#,'N'),
				RECD_DATE = to_date(#docRecvdDate#,'DDMONYYhh24:mi'), 
				<isEqual  property="hawbRecvdChanged" compareValue="update">	
				  NO_HAWB_RECD = nvl(#noHawbRecvd#,'0'),
				  NO_HAWB_CHARGED = nvl(#charges#,'0'),
				</isEqual>		
				RECD_STATUS=#docRecvdStatus#,
				REJ_CODE=#rejectCode#,
				REJ_RMK=#docRejectRmk#,
				AWB_FRZ_YN=#awbFrzFlg#,	
				AWB_FRZ_DATE = sysdate,			
				RECD_RMK=#docRecvdRmk#,
				TRUCK_NO=#truckNo#,
				LM_USER_ID=#crUserId#,
				LM_DATE=sysdate,
				tr_type='RCDOC'
			WHERE
				AWB_NO =#awbNo#  
	</update>	
	<select id="sqluldfhlpopup" parameterClass="cargo.cms.export.bo.DocumentSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
		SELECT t1.HAWB_NO noHawbRecvd, t1.MANIFEST_DESC content, t1.HAWB_ORG org, t1.HAWB_DEST dest, t1.HAWB_PCS pcs, t1.HAWB_NET_WT wt FROM EDI_FHL_HAWB t1,
		EDI_FHL t2 where t1.TR_NO = t2.TR_NO and t2.AWB_NO = #awbNo#

	</select>
	
<!-- ##################### Receive Document   : End  ##############################################-->	


 	<select id="getExportCargoCarrCode" parameterClass="map" resultClass="java.lang.String">
	  select pkg_fsu.get_carr_code(#awbNo#,#awbDate#) from dual
	</select>
	<select id="checkFSUExists"  parameterClass="map" resultClass="java.lang.Integer">			
		select count(1) from AWB_SHP_STS 
		where 	AWB_NO = #awbNo# AND AWB_DATE =  TO_date(#awbDate#,'DDMONYY')
		AND COD_FSU_STS = #msgType# 
		<isEqual property="msgType" prepend="AND" compareValue="DIS">
		   COD_FSU_DIS = #disType# 
		</isEqual>	
		<isNotEmpty property="fltKey" prepend="AND">	
		   FLT_NO = #fltKey#
		   AND FLT_DATE = To_Date(#fltDate# , 'DDMONYY')
	    </isNotEmpty>
	</select>	
   	<select id="getSitaAddressForFSU" parameterClass="map" resultClass="cargo.cms.export.bo.SitaAddressBO">			
		<![CDATA[
		SELECT DISTINCT D.SITA_ADDR sitaAddress
		FROM CUST_AIRL_SITA_CIMP_MSG M
		JOIN CUST_AIRL_SITA_CIMP_DTL D ON M.TR_NO = D.TR_NO
		WHERE CARR_CODE = #carrCode# AND MSG_TYPE = #msgType#
		]]>
		<isNotEmpty property="fltKey">
		AND (FLT_KEY = nvl(#fltKey#, 'ZZZ99999') or FLT_KEY = 'ZZZ99999')
		</isNotEmpty>
	</select>
	
	<select id="getOriginAddressForFSU"  parameterClass="java.lang.String" resultClass="java.lang.String">			
		SELECT RULE_VALUE FROM CMSRULES where RULE_CODE = 'SITA_ORI_ADD'
	</select>	
	
	<insert id="insertAwbShpStsForFSU" parameterClass="map" >
		INSERT INTO AWB_SHP_STS(AWB_NO, AWB_DATE, DAT_FSU_CRE, COD_FSU_STS, COD_FSU_DIS, COD_FSU_SND, DES_FSU_DTS, 
		QTY_TOT_PCS, FLT_NO, FLT_DATE)
		values (#awbNo# , #awbDate# , sysdate , #msgType#, #disType# , #codeFsuSend# , #msg# , #qtyTotPcs#,
		#fltKey#,#fltDate#)
	</insert>
	<parameterMap id="fsuRCSMap" class="map" >	
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="message" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	
		
	<procedure id="pkg_fsu_rcs" parameterMap="fsuRCSMap" >
		{call PKG_FSU.FSU_RCS(?,?,?)}
	</procedure>
	
	
	<parameterMap id="fsuFOHMap" class="map" >	
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="rclNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="message" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	
		
	<procedure id="pkg_fsu_foh" parameterMap="fsuFOHMap" >
		{call PKG_FSU.FSU_FOH(?,?,?,?)}
	</procedure>
	
	
	
	<parameterMap id="fsuPREMap" class="map" >	
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="message" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	
	<procedure id="pkg_fsu_pre" parameterMap="fsuPREMap" >
		{call PKG_FSU.FSU_PRE(?,?,?,?,?)}
	</procedure>
	
	<!--
	<parameterMap id="fsuMANMap" class="map" >	
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="message" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	<procedure id="pkg_fsu_man" parameterMap="fsuMANMap" >
		{call PKG_FSU.FSU_MAN(?,?,?,?,?)}
	</procedure>
	
	<parameterMap id="fsuDEPMap" class="map" >	
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="message" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	
		<procedure id="pkg_fsu_dep" parameterMap="fsuDEPMap" >
		{call PKG_FSU.FSU_DEP(?,?,?,?,?)}
	</procedure>
	
	<parameterMap id="fsuDISCOffloadMap" class="map" >	
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="message" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
		<procedure id="pkg_fsu_disc_offload" parameterMap="fsuDISCOffloadMap" >
		{call PKG_FSU.FSU_DISC_OFLD(?,?,?,?,?)}
	</procedure>
   	-->
		
	



<!-- ##################### added by Surendra Gollapalli for Receive Document START ########################################-->

<select id="exp_uld_fetchAgentCodeDesc" parameterClass="map" resultClass="cargo.cms.export.bo.ExportULDBO">
		SELECT
			CODE_DESC as agentName,CODE as agentId
		FROM 
			CUST_COMPANY
		WHERE 
			AGENT_YN = 'Y'  AND
			CODE = #code#
			
	</select>
	<select id="exp_uld_fetchAgentCode" parameterClass="map" resultClass="cargo.cms.export.bo.ExportULDBO">
		SELECT
			CODE as agentId,CODE_DESC as agentName
		FROM  
			CUST_COMPANY
		WHERE 
			AGENT_YN = 'Y'  AND
			CODE_DESC = #codeDesc#
	</select>
	
<select id="checkForRCLTypeByHD"   parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.ExportULDBO">
   <![CDATA[   
	select 
	awb_no as awbNo,
    TO_CHAR(AWB_DATE, 'DDMONYY')  as awbDate,
	uld_key as uldNo,
	ppk_type as rclType,
	rcl_no as rclNo  
	from exp_rcl_hd
	where   rcl_no = upper(#rclnum#)
   ]]>
 </select>
<select id="sqlrclmixedPrepackdetailOne" parameterClass="cargo.cms.export.bo.DocumentSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
	select  b.rcl_no as rclNo,b.uld_key as uldKey, concat(concat(substr(a.awb_no, 0, 3), '-'), substr(a.awb_no, 4)) as awbNoDisplay,
                a.awb_no as awbNo, to_char(b.awb_date, 'ddMONYY') as awbDate, b.pcs as pcs, to_char(a.recd_date, 'ddMONYY hh24:mi') as prevDocRecvdDate, a.rej_code as rejectCode,
                to_char(a.recd_date, 'ddMONYY hh24:mi') as docRecvdDate, 
                decode((select count(1) from edi_fwb where awb_no = a.awb_no), 0, 'N', 'Y') as fwbRecwdInd,
                TO_CHAR((select fhl_lm_date from V_EDI_FHL_HAWB where awb_no = a.awb_no and rownum = 1),'ddMONYY hh24:mi') as fhlRecvdDate, 
                (select source from V_EDI_FHL_HAWB where awb_no = a.awb_no and rownum = 1) as fhlRecvdFrom,
                a.no_hawb_recd as noHawbProcessedDisplay, a.recd_rmk as docRecvdRmk, a.recd_status as docRecvdStatus,
                a.rej_rmk as docRejectRmk, a.awb_frz_yn as awbFrzFlg, a.awb_frz_date as awbFrzDate, a.awb_unfrz_user,
                a.awb_unfrz_date, a.agent_id, a.truck_no as truckNo, a.wv_charge_yn,b.rcl_no as rclNo, 
                (select count(1) from V_EDI_FHL_HAWB where awb_no = a.awb_no) noHawbProcessed,
                (select code_desc
        from   mast_code_dtl
        where  a.rej_code = mast_code_dtl.code
        and    mast_code_dtl.code_type = 'DOC_REJ_TYPE') as docRejectDescription
                from   exp_doc_recd a,
                   exp_uld_awb b
                where  a.awb_no = b.awb_no
                                   and    a.awb_date = b.awb_date
                                   and    b.uld_key = a.uld_key
     							   and    b.rcl_no =#rclNo#
                                   and    b.manifest_yn = 'N'
                                   and    b.closed_yn = 'N' and rownum =1

	</select> 
	
	<select id="sqlrclmixedPrepackdetailTwo" parameterClass="cargo.cms.export.bo.DocumentSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
	select  b.pre_rcl_no as rclNo,a.uld_key as uldKey, concat(concat(substr(a.awb_no, 0, 3), '-'), substr(a.awb_no, 4)) as awbNoDisplay,
                  a.awb_no as awbNo, to_char(b.awb_date, 'ddMONYY') as awbDate, b.pcs as pcs, to_char(a.recd_date, 'ddMONYY hh24:mi') as prevDocRecvdDate, a.rej_code as rejectCode,
                  to_char(a.recd_date, 'ddMONYY hh24:mi') as docRecvdDate, 
                  decode((select count(1) from edi_fwb where awb_no = a.awb_no), 0, 'N', 'Y') as fwbRecwdInd,
                  TO_CHAR((select fhl_lm_date from V_EDI_FHL_HAWB where awb_no = a.awb_no and rownum = 1),'ddMONYY hh24:mi') as fhlRecvdDate, 
                  (select source from V_EDI_FHL_HAWB where awb_no = a.awb_no and rownum = 1) as fhlRecvdFrom,
                  a.no_hawb_recd as noHawbProcessedDisplay, a.recd_rmk as docRecvdRmk, a.recd_status as docRecvdStatus,
                  a.rej_rmk as docRejectRmk, a.awb_frz_yn as awbFrzFlg, a.awb_frz_date as awbFrzDate, a.awb_unfrz_user,
                  a.awb_unfrz_date, a.agent_id, a.truck_no as truckNo, a.wv_charge_yn,b.pre_rcl_no as rclNo, 
                  (select count(1) from V_EDI_FHL_HAWB where awb_no = a.awb_no) noHawbProcessed,
                  (select code_desc
        from   mast_code_dtl
        where  a.rej_code = mast_code_dtl.code
        and    mast_code_dtl.code_type = 'DOC_REJ_TYPE') as docRejectDescription
  from   exp_doc_recd a,                   
         exp_pre_rcl_brkdn b
  where  a.awb_no = b.awb_no
                     and    a.awb_date = b.awb_date                            
      and    b.pre_rcl_no =#rclNo# and rownum =1

	</select> 
	
	<select id="sqlrclPrepackdetails" parameterClass="cargo.cms.export.bo.DocumentSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
		 SELECT concat(concat(SUBSTR(a.awb_no, 0, 3), '-'), SUBSTR(a.awb_no, 4)) AS awbNoDisplay          ,
				  a.awb_no                                                               AS awbNo                 ,
				  TO_CHAR(a.awb_date, 'ddMONYY')                                         AS awbDate               ,
				  aw.pcs                                                                 AS pcs                   ,
				  TO_CHAR(recd_date, 'ddMONYY hh24:mi')                                  AS prevDocRecvdDate      ,
				  rej_code                                                               AS rejectCode            ,
				  TO_CHAR(recd_date, 'ddMONYY hh24:mi')                                  AS docRecvdDate          ,
				  TO_CHAR(pkg_exp_val.get_hawb_recd_date(a.awb_no),'ddMONYY hh24:mi')    AS fhlRecvdDate          ,
				  no_hawb_recd                                                           AS noHawbProcessedDisplay,
				  no_hawb_recd 															 AS oldHawbRec,
				  recd_rmk                                                               AS prvRecvdRmk           ,
				  recd_status                                                            AS docRecvdStatus        ,
				  recd_status                                                            AS oldRecvdStatus        ,
				  rej_rmk                                                                AS prvRejectRmk          ,
				  awb_frz_yn                                                             AS awbFrzFlg             ,
				  awb_frz_yn                                                             AS oldAwbFrzFlg             ,
				  awb_frz_date                                                           AS awbFrzDate            ,
				  awb_unfrz_user                                                                                  ,
				  awb_unfrz_date                                                         AS awbUnfrzDate         ,
				  FWB_UNFRZ_DATE                                                       	 AS fwbUnfrzDate,
				  FWB_FRZ_YN                                                             AS fwbFrzYn            ,
				  FWB_FRZ_DATE                                                           AS fwbFrzDate          ,
				  agent_id                                                                                          ,
				  truck_no                                                                                          ,
				  wv_charge_yn                                                                                      ,
				  pkg_exp_val.get_hawb_source(a.awb_no) AS fhlRecvdFrom                                             ,
				  (SELECT COUNT(1) FROM V_EDI_FHL_HAWB WHERE awb_no = a.awb_no) noHawbProcessed						,
				  NO_HAWB_CHARGED AS chargesDisp,
				  DECODE((SELECT COUNT(1) FROM edi_fwb WHERE awb_no = a.awb_no), 0, 'N', 'Y') AS fwbRecwdInd,
				  a.agent_name as agentName,
           		  a.agent_id as agentId,
				  (SELECT code_desc FROM mast_code_dtl   WHERE a.rej_code = mast_code_dtl.code AND mast_code_dtl.code_type = 'DOC_REJ_TYPE') AS docRejectDescription,
          		  (SELECT STRAGG(STRINGDELIM(uld_key, ',')) AS ppkType	from (SELECT uld_key from exp_rcl_dtl WHERE rcl_no = #rclNo#)) uldKeyDisp
				   FROM exp_doc_recd a, awb aw	where  a.awb_no = upper(#awb#) 
						and a.awb_date = to_date(#awbDate#,'DDMONYY')
						and a.awb_no=aw.awb_no and a.awb_date=aw.awb_date 
						and    a.awb_closed_yn = 'N'
	</select> 



<!-- ##################### added by Surendra Gollapalli for Receive Document END ########################################-->



<!--  Added By Surendra Gollaplli Receive Document FInal END -->

	<!-- search RCL -->
	<!--  Changed for QR -->
	<select id="enquire_rcl" parameterClass="map" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
              SELECT A.RCL_DATE,
                  PPK_TYPE AS pkgType, 
                  A.RCL_NO as rclNum, 
                  A.AWB_NO as awbNum,
                  CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) as awbNumDisplay, 
                  A.AWB_DEST as destination, 
                  A.AWB_CONTENT as awbContent, 
                  A.RCL_PCS AS rclPcs,
                  A.RCL_WT AS rclWt,
                  RTN_PCS as rtnPcs, RTN_WT as rtnWt,
                  TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate, 
                  decode(UPPER(A.STATUS), 'V','Y','N') as voidInd,
                  pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) as carInd, 
                  A.RTN_IND as cargoRetInd,
				  A.REJECT_IND as cargoRejInd,
				  A.RCL_REJECT_REASON as rejectReasonRmk,
                  A.ULD_KEY as uldNum,
                  (SELECT B.CONTR_CODE FROM EXP_RCL_DTL B WHERE B.RCL_NO=A.RCL_NO AND A.ULD_KEY =B.ULD_KEY)  as contourCode,a.cr_date,
                  CASE WHEN (A.PPK_TYPE = 'B' OR A.PPK_TYPE = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=A.Rcl_No),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = A.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = A.Rcl_No And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = A.Rcl_No)),0,'Y','N')
                     END
                  END as secChkEntered , A.SEC_CHECK as secCheck, A.VOID_DATE as voidDate,
				  A.ASIDE_ACCEPT as asideAccept, A.CUST_NO as agentCode, 
				  (select code_desc from cust_company where code = A.CUST_NO) as agentName,
				  (select sum(sc_wt) from EXP_RCL_SEC_CHK_DTL where rcl_no = A.RCL_NO) as secChkWt,
				  (SELECT SC_RESULT FROM(SELECT SC_RESULT,RCL_NO FROM EXP_RCL_SEC_CHK_DTL ORDER BY CR_DATE DESC)WHERE RCL_NO = A.RCL_NO and ROWNUM = 1) as secResult,
				  
				  trim(TO_CHAR(NVL((select sum((LENGTH*WIDTH*HEIGHT*pcs)/1000000) from EXP_RCL_DMN where rcl_no = A.RCL_NO),0),'99999999999999990.00')) AS cbm,
 				  (select hawb_no from exp_rcl_hawb where rcl_no = A.RCL_NO and rownum = 1) as hawb,
				  
                  (select STRAGG(STRINGDELIM(T.spl, ','))  
                  from(
                  	(select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
			        union all
			        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
			        union all
			        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
			        union all
			        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
			        union all
			        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
			        union all
			        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
			        union all
			        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
			        union all
			        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
			        union all
			        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null)) t
			        where awb_no = a.awb_no and awb_date = a.awb_date ) shc,
			        NVL(A.TSA_RCL_IND,'NA') as tsaRclInd,
			        NVL(A.CARR_RF,'NA') as carrierRF,
			        nvl(SCREENED_IND,'N') AS screenedInd,
			        nvl(SCREENED_IND,'N') AS oldscreenedInd,
              		FLT_KEY AS fltKey,
              		to_char(FLT_DATE,'DDMONYY') AS fltDate
                  From EXP_RCL_HD A
                  WHERE ACCPT_MODE IN ('LCA','LDA','LOB')
                 <dynamic >
                  
                  <isNotEmpty prepend="AND" property="agentName"> 	
                       A.CUST_NO = (select code from cust_company where code_desc = #agentName#)
                  </isNotEmpty>
                  
			      <isNotEmpty prepend="AND" property="agentCode">
                        A.CUST_NO = #agentCode#
                  </isNotEmpty>
                  <isNotEmpty prepend="AND" property="AWBNUM">
                        A.AWB_NO = #AWBNUM# AND A.AWB_DATE=TO_DATE(#AWBDATE#,'DDMONYY') 
                  </isNotEmpty>
                  <isNotEmpty prepend="AND" property="RCLNUM">
                        A.RCL_NO = lower(#RCLNUM#)
                  </isNotEmpty>
                  <isNotEmpty prepend="AND" property="ULDNUM">
                        A.ULD_KEY = #ULDNUM#
                  </isNotEmpty>
                  <isNotEmpty prepend="AND" property="ULDTYPE">
                  	A.ULD_TYPE = #ULDTYPE#
                  </isNotEmpty>     
                  <isNotEmpty prepend="AND" property="STATUS">
                        A.STATUS = #STATUS# 
                        <!-- AND A.RCL_NO NOT IN (SELECT RCL_NO from BILL_CHARGE_DTL WHERE RCL_NO = A.RCL_NO) UAT Bug Fix:3557 -->
                  </isNotEmpty>                 
                  <isNotEmpty prepend="AND" property="VOID">
                        A.STATUS = #VOID#
                  </isNotEmpty>
                  
                  <isNotEmpty prepend="AND" property="PRT">
                        A.REPT_VER > #PRT#
                  </isNotEmpty>
                  
                  <isNotEmpty prepend="AND" property="RTN">
                        A.RTN_IND = #RTN#
                  </isNotEmpty>
                  
                  <isNotEmpty prepend="AND" property="CARRCODE">
                        A.CARR_CODE = #CARRCODE#
                  </isNotEmpty>
                  <isNotEmpty prepend="AND" property="UNPAID">
                        A.RCL_NO IN (SELECT RCL_NO FROM BILL_CHARGE_DTL WHERE STATUS ='PENDING' AND RCL_NO = A.RCL_NO)
                  </isNotEmpty>
                  <isNotEmpty prepend="AND" property="CARR">
                        pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) = #CARR#
                  </isNotEmpty>
                  <isNotEmpty prepend="AND" property="dest">
			A.AWB_DEST = #dest#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="screenedType">
			NVL(A.SCREENED_IND,'N') = #screenedType#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode1">
			(A.SPL_CODE1=#splCode1# OR A.SPL_CODE2=#splCode1# OR A.SPL_CODE3=#splCode1# OR
    		A.SPL_CODE4=#splCode1# OR A.SPL_CODE5=#splCode1# OR A.SPL_CODE6=#splCode1# OR
    		A.SPL_CODE7=#splCode1# OR A.SPL_CODE8=#splCode1# OR A.SPL_CODE9=#splCode1#)
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode2">
			(A.SPL_CODE1=#splCode2# OR A.SPL_CODE2=#splCode2# OR A.SPL_CODE3=#splCode2# OR
    		A.SPL_CODE4=#splCode2# OR A.SPL_CODE5=#splCode2# OR A.SPL_CODE6=#splCode2# OR
    		A.SPL_CODE7=#splCode2# OR A.SPL_CODE8=#splCode2# OR A.SPL_CODE9=#splCode2#)
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode3">
			(A.SPL_CODE1=#splCode3# OR A.SPL_CODE2=#splCode3# OR A.SPL_CODE3=#splCode3# OR
    		A.SPL_CODE4=#splCode3# OR A.SPL_CODE5=#splCode3# OR A.SPL_CODE6=#splCode3# OR
    		A.SPL_CODE7=#splCode3# OR A.SPL_CODE8=#splCode3# OR A.SPL_CODE9=#splCode3#)
			</isNotEmpty>
                  <isNotEmpty prepend="AND" property="FROMDATE">
                        <isNotEmpty property="TODATE">
                              A.RCL_DATE BETWEEN TO_DATE(#FROMDATE#||#schTimeHr#||#schTimeMin#,'DDMONYYHH24MI')		  
		                      AND TO_DATE(#TODATE#||#schTimeHrTo#||#schTimeMinTo#,'DDMONYYHH24MI')
                        </isNotEmpty>
                  </isNotEmpty>
                  <isNotEmpty prepend="AND" property="TRUCKNUM">
                       A.TRUCK_NO = #TRUCKNUM#
                  </isNotEmpty>
                  <isNotEmpty property="ACCPTOTHTERMINAL" >             
                        AND A.CARR_CODE in (select code from MAST_CARRIER where HANDLED_BY_TERMINAL='HACTL')
                  </isNotEmpty>
                  <isNotEmpty property="PKGTYPE" >             
                  <isEqual property="PKGTYPE" compareValue="PM">             
                        AND (A.PPK_TYPE = 'P' OR A.PPK_TYPE = 'M')
                  </isEqual>
				  <isNotEqual property="PKGTYPE" compareValue="PM">             
                        AND A.PPK_TYPE = #PKGTYPE#
                  </isNotEqual>
				  </isNotEmpty>
                  <isNotEmpty property="SECCHKENTERED">             
                        AND A.SEC_CHECK = #SECCHKENTERED# 
                  </isNotEmpty>
				  <isNotEmpty property="ASIDEACCEPT">
				        AND A.ASIDE_ACCEPT = #ASIDEACCEPT# 
				  </isNotEmpty>
                  <isEmpty prepend="AND" property="AWBNUM">
                  	<isNotEmpty property="LOGINCARRIER">
                  		((A.AWB_NO IS NULL AND 
                  		 (A.CARR_CODE = #LOGINCARRIER# OR A.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #LOGINCARRIER#) ) )
                  		 OR (SUBSTR(A.AWB_NO,1,3) IN (SELECT CODE FROM MAST_AWB_PREFIX WHERE CARR_CODE = #LOGINCARRIER#) 
                  		 OR SUBSTR(A.AWB_NO,1,3) IN (SELECT CODE FROM MAST_AWB_PREFIX WHERE	CARR_CODE IN(SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #LOGINCARRIER#))))
                  	</isNotEmpty>
                  </isEmpty>
                  
                  <isNotEmpty property="CARRIERRF">
					<isNotEqual property="CARRIERRF" compareValue="A">
						and NVL(A.CARR_RF,'NA')=#CARRIERRF#
					</isNotEqual>
				  </isNotEmpty>	
                  
                  <isNotEmpty property="TSARCL">
					<isNotEqual property="TSARCL" compareValue="A">
						and NVL(A.TSA_RCL_IND,'NA')=#TSARCL#
					</isNotEqual>
				  </isNotEmpty>	
				  
                  <isNotEmpty property="ULDNUM">                        
                        UNION 
                              SELECT A.RCL_DATE,
                                    A.PPK_TYPE AS pkgType, 
                                    A.RCL_NO as rclNum, 
                                    AWB_NO as awbNum,
                                    CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNumDisplay,  
                                    A.AWB_DEST as destination, 
                                    A.AWB_CONTENT as awbContent, 
                                    A.RCL_PCS AS rclPcs,
                                    A.RCL_WT AS rclWt, 
                                    A.RTN_PCS as rtnPcs, A.RTN_WT as rtnWt,
                                    TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate, 
                                    decode(UPPER(A.STATUS), 'V','Y','N') as voidInd,
                                    pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) as carInd, 
                                    A.RTN_IND as cargoRetInd,
									A.REJECT_IND as cargoRejInd,
									A.RCL_REJECT_REASON as rejectReasonRmk,
                                    A.ULD_KEY as uldNum,
                                    B.CONTR_CODE as contourCode,a.cr_date,                                    
                 	 				CASE WHEN (A.PPK_TYPE = 'B' OR A.PPK_TYPE = 'P')
                     					THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=A.Rcl_No),0,'N','Y')
                     				ELSE 
                    				 CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = A.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                      					 ELSE 
                        				 Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = A.Rcl_No And Sec_Check = 'Y' And
                         				(Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = A.Rcl_No)),0,'Y','N')
                    				 END
                 					END  as secChkEntered ,                                    
                                    A.SEC_CHECK as secCheck,
                                    A.VOID_DATE as voidDate,
									A.ASIDE_ACCEPT as asideAccept, A.CUST_NO as agentCode, 
				                   (select code_desc from cust_company where code = A.CUST_NO) as agentName,
				                   (select sum(sc_wt) from EXP_RCL_SEC_CHK_DTL where rcl_no = A.RCL_NO) as secChkWt,
								   (SELECT SC_RESULT FROM(SELECT SC_RESULT,RCL_NO FROM EXP_RCL_SEC_CHK_DTL ORDER BY CR_DATE DESC)WHERE RCL_NO = A.RCL_NO and ROWNUM = 1) as secResult,
								   
								    trim(TO_CHAR(NVL((select sum((LENGTH*WIDTH*HEIGHT*pcs)/1000000) from EXP_RCL_DMN where rcl_no = A.RCL_NO),0),'99999999999999990.00')) AS cbm,
 				  					(select hawb_no from exp_rcl_hawb where rcl_no = A.RCL_NO and rownum = 1) as hawb,
 				  
					                  (select STRAGG(STRINGDELIM(T.spl, ','))  
					                  from(
					                  	(select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
								        union all
								        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
								        union all
								        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
								        union all
								        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
								        union all
								        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
								        union all
								        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
								        union all
								        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
								        union all
								        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
								        union all
								        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null)) t
								        where awb_no = a.awb_no and awb_date = a.awb_date ) shc,
			        					NVL(A.TSA_RCL_IND,'NA') as tsaRclInd,
			        					NVL(A.CARR_RF,'NA') as carrierRF,
			        					nvl(SCREENED_IND,'N') AS screenedInd,
			        					nvl(SCREENED_IND,'N') AS oldscreenedInd,
              							FLT_KEY AS fltKey,
              							to_char(FLT_DATE,'DDMONYY') AS fltDate
                              FROM EXP_RCL_HD A, EXP_RCL_DTL B
                              WHERE B.ULD_KEY =  #ULDNUM# AND
                                    B.PPK_TYPE IN ('B','P') AND
                                    B.RCL_NO    = A.RCL_NO
                                     
                                     <isNotEmpty prepend="AND" property="agentName"> 	
                                          A.CUST_NO = (select code from cust_company where code_desc = #agentName#)
                                     </isNotEmpty>
                                     
									<isNotEmpty prepend="AND" property="agentCode">
                                          A.CUST_NO = #agentCode#
                                    </isNotEmpty>
                                    <isNotEmpty prepend="AND" property="AWBNUM">
                                          A.AWB_NO = #AWBNUM# AND A.AWB_DATE=TO_DATE(#AWBDATE#,'DDMONYY') 
                                    </isNotEmpty>
                                    <isNotEmpty prepend="AND" property="RCLNUM">
                                          (A.RCL_NO = #RCLNUM#
                                    </isNotEmpty>
                                    <isNotEmpty prepend="OR" property="RCLNUM">
                                          A.RCL_NO like #RCLNUM#||'%')
                                    </isNotEmpty>
                                    <isNotEmpty prepend="AND" property="CARRCODE">
                                          A.CARR_CODE = #CARRCODE#
                                    </isNotEmpty>
                                    <isNotEmpty prepend="AND" property="dest">
									A.AWB_DEST = #dest#
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="screenedType">
									NVL(A.SCREENED_IND,'N') = #screenedType#
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="splCode1">
									(A.SPL_CODE1=#splCode1# OR A.SPL_CODE2=#splCode1# OR A.SPL_CODE3=#splCode1# OR
						    		A.SPL_CODE4=#splCode1# OR A.SPL_CODE5=#splCode1# OR A.SPL_CODE6=#splCode1# OR
						    		A.SPL_CODE7=#splCode1# OR A.SPL_CODE8=#splCode1# OR A.SPL_CODE9=#splCode1#)
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="splCode2">
									(A.SPL_CODE1=#splCode2# OR A.SPL_CODE2=#splCode2# OR A.SPL_CODE3=#splCode2# OR
						    		A.SPL_CODE4=#splCode2# OR A.SPL_CODE5=#splCode2# OR A.SPL_CODE6=#splCode2# OR
						    		A.SPL_CODE7=#splCode2# OR A.SPL_CODE8=#splCode2# OR A.SPL_CODE9=#splCode2#)
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="splCode3">
									(A.SPL_CODE1=#splCode3# OR A.SPL_CODE2=#splCode3# OR A.SPL_CODE3=#splCode3# OR
						    		A.SPL_CODE4=#splCode3# OR A.SPL_CODE5=#splCode3# OR A.SPL_CODE6=#splCode3# OR
						    		A.SPL_CODE7=#splCode3# OR A.SPL_CODE8=#splCode3# OR A.SPL_CODE9=#splCode3#)
									</isNotEmpty>
                                    <isNotEmpty prepend="AND" property="CARR">
                                          pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) = #CARR#
                                    </isNotEmpty>
                                    <isNotEmpty prepend="AND" property="STATUS">
                                          A.STATUS = #STATUS#
                                    </isNotEmpty>     
                                    <isNotEmpty prepend="AND" property="VOID">
                                          A.STATUS = #VOID#
                                    </isNotEmpty>
                                    <isNotEmpty prepend="AND" property="PRT">
                                          A.REPT_VER > #PRT#
                                    </isNotEmpty>
                                    <isNotEmpty prepend="AND" property="RTN">
                                          A.RTN_IND = #RTN#
                                    </isNotEmpty>
                                    <isNotEmpty prepend="AND" property="UNPAID">
                                          A.RCL_NO IN (SELECT RCL_NO FROM BILL_CHARGE_DTL where status ='PENDING' AND RCL_NO = A.RCL_NO)
                                    </isNotEmpty>
                                    
                                    <isNotEmpty prepend="AND" property="FROMDATE">
                                    <isNotEmpty property="TODATE">
                                         A.RCL_DATE BETWEEN TO_DATE(#FROMDATE#||#schTimeHr#||#schTimeMin#,'DDMONYYHH24MI')		  
		                                 AND TO_DATE(#TODATE#||#schTimeHrTo#||#schTimeMinTo#,'DDMONYYHH24MI')
                                    </isNotEmpty>
                                    </isNotEmpty>
                                    
                                    <isNotEmpty prepend="AND" property="TRUCKNUM">
                                                A.TRUCK_NO = #TRUCKNUM#
                                    </isNotEmpty>
                                    <isNotEmpty property="ACCPTOTHTERMINAL">              
                                                AND A.CARR_CODE in (select code from MAST_CARRIER where HANDLED_BY_TERMINAL='HACTL')
                                    </isNotEmpty>
                                    <isNotEmpty property="PKGTYPE" >             
                                    <isEqual property="PKGTYPE" compareValue="PM">             
                                                AND (A.PPK_TYPE = 'P' OR A.PPK_TYPE = 'M')
                                    </isEqual>
				                    <isNotEqual property="PKGTYPE" compareValue="PM">             
                                                AND A.PPK_TYPE = #PKGTYPE#
                                    </isNotEqual>
				                    </isNotEmpty>
                  					<isNotEmpty property="SECCHKENTERED">             
                        				AND A.SEC_CHECK = #SECCHKENTERED# 
                  					</isNotEmpty>
									<isNotEmpty property="ASIDEACCEPT">
				                        AND A.ASIDE_ACCEPT = #ASIDEACCEPT# 
				                    </isNotEmpty>
				                    
				                      <isNotEmpty property="CARRIERRF">
										<isNotEqual property="CARRIERRF" compareValue="A">
											and NVL(A.CARR_RF,'NA')=#CARRIERRF#
										</isNotEqual>
									  </isNotEmpty>	
					                  
					                  <isNotEmpty property="TSARCL">
										<isNotEqual property="TSARCL" compareValue="A">
											and NVL(A.TSA_RCL_IND,'NA')=#TSARCL#
										</isNotEqual>
									  </isNotEmpty>	
                  </isNotEmpty>
                  <isNotEmpty property="ULDTYPE">                                            
                        UNION 
                        SELECT A.RCL_DATE,
                              A.PPK_TYPE AS pkgType, 
                              A.RCL_NO as rclNum, 
                              AWB_NO as awbNum,
                              CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNumDisplay,  
                              A.AWB_DEST as destination, 
                              A.AWB_CONTENT as awbContent, 
                              A.RCL_PCS AS rclPcs,
                              A.RCL_WT AS rclWt, 
                              A.RTN_PCS as rtnPcs, A.RTN_WT as rtnWt,
                              TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate, 
                              decode(UPPER(A.STATUS), 'V','Y','N') as voidInd,
                              pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) as carInd, 
                              A.RTN_IND as cargoRetInd,
							  A.REJECT_IND as cargoRejInd,
							  A.RCL_REJECT_REASON as rejectReasonRmk,
                              A.ULD_KEY as uldNum,
                              B.CONTR_CODE as contourCode,a.cr_date,
                              decode((select count(RCL_NO) from EXP_RCL_SEC_CHK_DTL where RCL_NO=A.RCL_NO),0,'N','Y') as secChkEntered,A.SEC_CHECK as secCheck
                              ,A.VOID_DATE as voidDate,
							  A.ASIDE_ACCEPT as asideAccept, A.CUST_NO as agentCode, 
				             (select code_desc from cust_company where code = A.CUST_NO) as agentName,
				             (select sum(sc_wt) from EXP_RCL_SEC_CHK_DTL where rcl_no = A.RCL_NO) as secChkWt,
							 (SELECT SC_RESULT FROM(SELECT SC_RESULT,RCL_NO FROM EXP_RCL_SEC_CHK_DTL ORDER BY CR_DATE DESC)WHERE RCL_NO = A.RCL_NO and ROWNUM = 1) as secResult,
							  trim(TO_CHAR(NVL((select sum((LENGTH*WIDTH*HEIGHT*pcs)/1000000) from EXP_RCL_DMN where rcl_no = A.RCL_NO),0),'99999999999999990.00')) AS cbm,
 				  			  (select hawb_no from exp_rcl_hawb where rcl_no = A.RCL_NO and rownum = 1) as hawb,
                              (select STRAGG(STRINGDELIM(T.spl, ','))  
			                  from(
			                  	(select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
						        union all
						        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
						        union all
						        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
						        union all
						        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
						        union all
						        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
						        union all
						        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
						        union all
						        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
						        union all
						        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
						        union all
						        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null)) t
						        where awb_no = a.awb_no and awb_date = a.awb_date ) shc,
			        			NVL(A.TSA_RCL_IND,'NA') as tsaRclInd,
			        			NVL(A.CARR_RF,'NA') as carrierRF,
			        			nvl(SCREENED_IND,'N') AS screenedInd,
			        			nvl(SCREENED_IND,'N') AS oldscreenedInd,
              					FLT_KEY AS fltKey,
              					to_char(FLT_DATE,'DDMONYY') AS fltDate
                        FROM EXP_RCL_HD A, EXP_RCL_DTL B
                        WHERE B.ULD_TYPE =  #ULDTYPE# AND
                              B.PPK_TYPE IN ('B','P') AND
                              B.RCL_NO    = A.RCL_NO
                              
                              <isNotEmpty prepend="AND" property="agentName"> 	
                                    A.CUST_NO = (select code from cust_company where code_desc = #agentName#)
                              </isNotEmpty>
                              
							  <isNotEmpty prepend="AND" property="agentCode">
                                    A.CUST_NO = #agentCode#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="ULDNUM">
                       	 			B.ULD_KEY = #ULDNUM#
                  				</isNotEmpty>
                              <isNotEmpty prepend="AND" property="AWBNUM">
                                    A.AWB_NO = #AWBNUM# AND A.AWB_DATE=TO_DATE(#AWBDATE#,'DDMONYY') 
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="RCLNUM">
                                    (A.RCL_NO = #RCLNUM#
                              </isNotEmpty>
                              <isNotEmpty prepend="OR" property="RCLNUM">
                                    A.RCL_NO like #RCLNUM#||'%')
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="CARRCODE">
                                    A.CARR_CODE = #CARRCODE#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="dest">
								A.AWB_DEST = #dest#
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="screenedType">
								NVL(A.SCREENED_IND,'N') = #screenedType#
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="splCode1">
								(A.SPL_CODE1=#splCode1# OR A.SPL_CODE2=#splCode1# OR A.SPL_CODE3=#splCode1# OR
					    		A.SPL_CODE4=#splCode1# OR A.SPL_CODE5=#splCode1# OR A.SPL_CODE6=#splCode1# OR
					    		A.SPL_CODE7=#splCode1# OR A.SPL_CODE8=#splCode1# OR A.SPL_CODE9=#splCode1#)
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="splCode2">
								(A.SPL_CODE1=#splCode2# OR A.SPL_CODE2=#splCode2# OR A.SPL_CODE3=#splCode2# OR
					    		A.SPL_CODE4=#splCode2# OR A.SPL_CODE5=#splCode2# OR A.SPL_CODE6=#splCode2# OR
					    		A.SPL_CODE7=#splCode2# OR A.SPL_CODE8=#splCode2# OR A.SPL_CODE9=#splCode2#)
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="splCode3">
								(A.SPL_CODE1=#splCode3# OR A.SPL_CODE2=#splCode3# OR A.SPL_CODE3=#splCode3# OR
					    		A.SPL_CODE4=#splCode3# OR A.SPL_CODE5=#splCode3# OR A.SPL_CODE6=#splCode3# OR
					    		A.SPL_CODE7=#splCode3# OR A.SPL_CODE8=#splCode3# OR A.SPL_CODE9=#splCode3#)
								</isNotEmpty>
                              <isNotEmpty prepend="AND" property="CARR">
                                    pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) = #CARR#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="STATUS">
                                    A.STATUS = #STATUS#
                              </isNotEmpty>     
                              <isNotEmpty prepend="AND" property="VOID">
                                    A.STATUS = #VOID#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="PRT">
                                    A.REPT_VER > #PRT#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="RTN">
                                    A.RTN_IND = #RTN#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="UNPAID">
                                    A.RCL_NO IN (select RCL_NO from BILL_CHARGE_DTL where status ='PENDING' AND RCL_NO = A.RCL_NO)
                              </isNotEmpty>
                             
                              <isNotEmpty prepend="AND" property="FROMDATE">
                              <isNotEmpty property="TODATE">
                              A.RCL_DATE BETWEEN TO_DATE(#FROMDATE#||#schTimeHr#||#schTimeMin#,'DDMONYYHH24MI')		  
		                      AND TO_DATE(#TODATE#||#schTimeHrTo#||#schTimeMinTo#,'DDMONYYHH24MI')
                              </isNotEmpty>
                              </isNotEmpty>
                              
                              <isNotEmpty prepend="AND" property="TRUCKNUM">
                                          A.TRUCK_NO = #TRUCKNUM#
                              </isNotEmpty>
                              <isNotEmpty property="ACCPTOTHTERMINAL">              
                                   AND A.CARR_CODE in (select code from MAST_CARRIER where HANDLED_BY_TERMINAL='HACTL')
                              </isNotEmpty>
                              <isNotEmpty property="PKGTYPE" >             
                              <isEqual property="PKGTYPE" compareValue="PM">             
                                   AND (A.PPK_TYPE = 'P' OR A.PPK_TYPE = 'M')
                              </isEqual>
				              <isNotEqual property="PKGTYPE" compareValue="PM">             
                                   AND A.PPK_TYPE = #PKGTYPE#
                              </isNotEqual>
				              </isNotEmpty>
                  			  <isNotEmpty property="SECCHKENTERED">             
                        			AND A.SEC_CHECK = #SECCHKENTERED# 
                  			  </isNotEmpty>
							  <isNotEmpty property="ASIDEACCEPT">
				                    AND A.ASIDE_ACCEPT = #ASIDEACCEPT# 
				              </isNotEmpty>
				              
				              	<isNotEmpty property="CARRIERRF">
									<isNotEqual property="CARRIERRF" compareValue="A">
										and NVL(A.CARR_RF,'NA')=#CARRIERRF#
									</isNotEqual>
								</isNotEmpty>	
					                  
					           	<isNotEmpty property="TSARCL">
									<isNotEqual property="TSARCL" compareValue="A">
										and NVL(A.TSA_RCL_IND,'NA')=#TSARCL#
									</isNotEqual>
								</isNotEmpty>	
                  </isNotEmpty>
                  <isNotEmpty  property="AWBNUM">
                  union  
                  SELECT  rcl_date, ppk_type AS pkgtype, t1.rcl_no AS rclnum,                  
                  t1.awb_no as awbnum,
                  substr(t1.awb_no, 1, 3) || '-' || SUBSTR (t1.awb_no, 4) AS awbnumdisplay,      
                  awb_dest AS destination, awb_content AS awbcontent,              
                   rcl_pcs AS rclpcs, rcl_wt  AS rclwt,RTN_PCS as rtnPcs, RTN_WT as rtnWt, 
                  TO_CHAR (rcl_date, 'DDMONYY HH24:MI')  AS rclissuedate,           
                   DECODE (UPPER (status), 'V', 'Y', 'N') AS voidind,            
                   pkg_exp_val.get_rcl_car_ind (t1.awb_no,  t1.awb_date, t1.rcl_no,t2.ppk_type) AS carind,
                  rtn_ind AS cargoretind,
				  REJECT_IND as cargoRejInd,
				  RCL_REJECT_REASON as rejectReasonRmk,
				  t2.uld_key AS uldnum,
                  (SELECT b.contr_code FROM exp_rcl_dtl b WHERE b.rcl_no = t2.rcl_no AND t2.uld_key = b.uld_key) AS contourCode,
                  t2.cr_date,                                   				 
                  case when (t2.PPK_TYPE = 'B' OR t2.PPK_TYPE = 'P')
                  Then Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=t2.Rcl_No),0,'N','Y')
                  else 
                  CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = t2.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                     ELSE
                  		Decode((Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = t2.Rcl_No And SEC_CHECK = 'Y' And
                  		(Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = t2.Rcl_No)),0,'Y','N')
                  END
                  end as secChkEntered , 
                  t2.SEC_CHECK as secCheck 
                  ,NULL as voidDate,
				  t2.ASIDE_ACCEPT as asideAccept, t2.CUST_NO as agentCode, 
				  (select code_desc from cust_company where code = t2.CUST_NO) as agentName,
				  (select sum(sc_wt) from EXP_RCL_SEC_CHK_DTL where rcl_no = t2.RCL_NO) as secChkWt,
				  (SELECT SC_RESULT FROM(SELECT SC_RESULT,RCL_NO FROM EXP_RCL_SEC_CHK_DTL ORDER BY CR_DATE DESC)WHERE RCL_NO = t2.RCL_NO and ROWNUM = 1) as secResult,
				  
				   trim(TO_CHAR(NVL((select sum((LENGTH*WIDTH*HEIGHT*pcs)/1000000) from EXP_RCL_DMN where rcl_no = t2.RCL_NO),0),'99999999999999990.00')) AS cbm,
 				  (select hawb_no from exp_rcl_hawb where rcl_no = t2.RCL_NO and rownum = 1) as hawb,
 				  
                  (select STRAGG(STRINGDELIM(T.spl, ','))  
                  from(
                  	(select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
			        union all
			        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
			        union all
			        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
			        union all
			        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
			        union all
			        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
			        union all
			        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
			        union all
			        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
			        union all
			        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
			        union all
			        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null)) t
			        where awb_no = t1.awb_no and awb_date = t1.awb_date ) shc,
			        NVL(t2.TSA_RCL_IND,'NA') as tsaRclInd,
			        NVL(t2.CARR_RF,'NA') as carrierRF,
			        nvl(SCREENED_IND,'N') AS screenedInd,
			        nvl(SCREENED_IND,'N') AS oldscreenedInd,
              		FLT_KEY AS fltKey,
              		to_char(FLT_DATE,'DDMONYY') AS fltDate
                  FROM exp_rcl_brkdn t1, exp_rcl_hd t2  
                  WHERE t1.awb_no =  #AWBNUM#  AND t1.AWB_DATE=TO_DATE(#AWBDATE#,'DDMONYY')    and t1.rcl_no = t2.rcl_no                            
                  <isNotEmpty prepend="AND" property="dest">
			t2.AWB_DEST = #dest#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="screenedType">
			NVL(t2.SCREENED_IND,'N') = #screenedType#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode1">
			(t2.SPL_CODE1=#splCode1# OR t2.SPL_CODE2=#splCode1# OR t2.SPL_CODE3=#splCode1# OR
    		t2.SPL_CODE4=#splCode1# OR t2.SPL_CODE5=#splCode1# OR t2.SPL_CODE6=#splCode1# OR
    		t2.SPL_CODE7=#splCode1# OR t2.SPL_CODE8=#splCode1# OR t2.SPL_CODE9=#splCode1#)
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode2">
			(t2.SPL_CODE1=#splCode2# OR t2.SPL_CODE2=#splCode2# OR t2.SPL_CODE3=#splCode2# OR
    		t2.SPL_CODE4=#splCode2# OR t2.SPL_CODE5=#splCode2# OR t2.SPL_CODE6=#splCode2# OR
    		t2.SPL_CODE7=#splCode2# OR t2.SPL_CODE8=#splCode2# OR t2.SPL_CODE9=#splCode2#)
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode3">
			(t2.SPL_CODE1=#splCode3# OR t2.SPL_CODE2=#splCode3# OR t2.SPL_CODE3=#splCode3# OR
    		t2.SPL_CODE4=#splCode3# OR t2.SPL_CODE5=#splCode3# OR t2.SPL_CODE6=#splCode3# OR
    		t2.SPL_CODE7=#splCode3# OR t2.SPL_CODE8=#splCode3# OR t2.SPL_CODE9=#splCode3#)
			</isNotEmpty>                           
                  <isNotEmpty property="SECCHKENTERED">             
                        AND t1.SEC_CHECK = #SECCHKENTERED# 
                  </isNotEmpty>
                  </isNotEmpty>
                  </dynamic>
                  ORDER BY 1 DESC, rclnum DESC                        
    </select>
    
   		<select id="rcl_by_uld"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		<![CDATA[
		SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, ULD_KEY as awbNum, AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, pkg_exp_val.get_rcl_car_ind(awb_no, awb_date, rcl_no, ppk_type) as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where ULD_KEY=#uldNum# order by RCL_DATE desc
		]]>
   		</select>
   		<!--  Changed for QR -->
   		<select id="rcl_by_awb"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		<![CDATA[
			SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, substr(awb_no,1,3)||'-'||substr(awb_no,4) as awbNum, AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd,
			 pkg_exp_val.get_rcl_car_ind(awb_no, awb_date, rcl_no, ppk_type) as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where AWB_NO=#awbNum# 
			 AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') order by RCL_DATE desc
			]]>
   		</select>
   		<select id="rcl_by_rcl_no"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		<![CDATA[
			select rcl.*,
			( to_char(trk.sch_arr_date,'DDMONYY')   || ' ' ||   (ltrim(SUBSTR(TRIM(TO_CHAR(trk.sch_arr_time,'0000')),0,2) || ':'||   SUBSTR(TRIM(TO_CHAR(trk.sch_arr_time,'0000')),3,2),':'))  ) trkArrivalDate
			from (			
			SELECT 
				A.RCL_NO as rclNum, 
				(select hawb_no from exp_rcl_hawb where rcl_no = A.RCL_NO AND rownum = 1) as hawb,
				decode(A.ppk_type,'B',A.awb_no,'P',A.awb_no,'M',A.uld_key) AS awbNum,
				decode(A.ppk_type,'B',CONCAT(CONCAT(SUBSTR(A.awb_no,0,3),'-'),SUBSTR(A.awb_no,4)),
				'P',CONCAT(CONCAT(SUBSTR(A.awb_no,0,3),'-'),SUBSTR(A.awb_no,4))
				,'M',A.uld_key) as awbNumDisplay,TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate,
				to_char(A.VOID_DATE,'DDMONYY HH24:MI') AS voidDate,A.PPK_TYPE as pkgType, A.RCL_PCS as rclPcs, 
				A.RCL_WT as rclWt,A.RTN_PCS as rtnPcs, A.RTN_WT as rtnWt, B.code_desc as agentName, B.CO_IATA_CODE as iataCode, A.PRE_RCL_NO as preRCLNum, 
				A.FLT_NO as flightNum, TO_CHAR(A.FLT_DATE,'DDMONYY') as flightDate, A.CARR_CODE as carrCode, A.AWB_DEST as awbDest, A.TRUCK_NO as truckNum, 
				A.AWB_CONTENT as awbContent, A.SEC_CHECK as secCheck, A.THICK_IND as thickInd, A.RMK as remarks, decode(UPPER(A.STATUS), 'V', 'Y','N') as voidInd,
				pkg_exp_val.get_rcl_car_ind(A.awb_no, A.awb_date, A.rcl_no, A.ppk_type) as carInd, A.RTN_IND as cargoRetInd, 
				A.SPL_CODE1 splCode1,A.SPL_CODE2 splCode2,A.SPL_CODE3 splCode3,A.SPL_CODE4 splCode4,A.SPL_CODE5 splCode5,A.SPL_CODE6 splCode6,A.SPL_CODE7 splCode7,A.SPL_CODE8 splCode8,A.SPL_CODE9 splCode9,
				decode(a.spl_code1, null, '', a.spl_code1 || decode(a.spl_code2, null, '', ','))
		               		|| decode(A.spl_code2, null, '', A.spl_code2 || decode(A.spl_code3, null, '', ','))
		               		|| decode(A.spl_code3, null, '', A.spl_code3 || decode(A.spl_code4, null, '', ','))
		              		|| decode(A.spl_code4, null, '', A.spl_code4 || decode(A.spl_code5, null, '', ','))
		               		|| decode(A.spl_code5, null, '', A.spl_code5 || decode(A.spl_code6, null, '', ','))
		              		|| decode(A.spl_code6, null, '', A.spl_code6 || decode(A.spl_code7, null, '', ','))
		               		|| decode(A.spl_code7, null, '', A.spl_code7 || decode(A.spl_code8, null, '', ','))
		               		|| decode(A.spl_code8, null, '', A.spl_code8 || decode(A.spl_code9, null, '', ','))
		               		|| decode(A.spl_code9, null, '', A.spl_code9) AS splCodes,
				DUT_COMMODITY as dutCommodity, A.QCP_IND as qcpInd, A.LM_USER_ID as lmUserID, ASIDE_ACCEPT as airsideAccept, A.VOID_RMK as voidRemark ,
				(select sum(LOCN_PCS) from awb_inventory where awb_no=A.awb_no and awb_date=A.awb_date) AS invPcs,
				(select sum(LOCN_WT) from awb_inventory where awb_no=A.awb_no and awb_date=A.awb_date)  AS invWt,A.CUST_NO AS agntCode,A.REJECT_IND AS reject,A.RCL_REJECT_REASON as rejectReasonRmk,A.DLV_BY AS dlvBy,A.DLV_BY_HKID AS HKID,
				A.ENDORSED_BY AS endorsedBy,A.REJECT_REASON AS rejectReason, A.uld_key as uldNum,A.TR_TYPE as trType,A.TR_STATUS as trStatus,A.FLT_KEY as flightKey,
				A.ACCPT_MODE as accptMode, A.SEC_RMK as secRemarks, A.STATUS as status ,				
				(select flt_key as impFltKey from cdt_inb_flt_dtls  where rcl_no = A.RCL_NO and rownum = 1) as impFlightKey, 
				(select to_char(flt_date,'DDMONYY') as impFltDate from cdt_inb_flt_dtls  where rcl_no = A.RCL_NO and rownum = 1) as impFlightDate ,
				(select max(trans_name) from image_store where TRANS_TYPE = 'RCL' AND trans_no=A.RCL_NO) as transactionId,				
				(SELECT TRANS_NAME  FROM IMAGE_STORE where TRANS_TYPE = 'ERCL' and TRANS_NO = A.PRE_RCL_NO and rownum =1) as erclTransactionId,
				 NVL(A.TSA_RCL_IND,'NA') as tsaRclInd,NVL(A.CARR_RF,'NA') as carrierRF,
				A.un_eli_num as unELINumber, A.un_elm_num as unELMNumber, A.UN_ELI_PCS as unELIPcs, A.UN_ELM_PCS as unELMPcs,
				A.TRUCK_FLT_NO  as trkFlightKey,    
				to_char(A.TRUCK_FLT_DATE,'DDMONYY')   as trkFlightDate,       
				A.AWB_ORG    as awbOrig,    
				A.PCS    as manfPcs,     
				A.WT as manfWt
				FROM EXP_RCL_HD A, cust_company B, EXP_PRE_RCL_HD C 
				WHERE B.CODE(+)=A.CUST_NO and C.PRE_RCL_NO(+)=A.PRE_RCL_NO AND (A.RCL_NO = #rclNum# or  A.VCL_NO =#rclNum# )
				
				) rcl 
				left join itm_trk_flt trk on trk.truck_flt_type = 'A' and trk.truck_flt_no = rcl.trkFlightKey and trk.truck_flt_date = rcl.trkFlightDate
			]]>
   		</select>
   		<select id="sqlFetchBookingDtlsForEnqRCL" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="java.util.HashMap">
   			SELECT FLT_KEY FLTKEY, TO_CHAR(FLT_DATE, 'DDMONYY') FLTDATE FROM EXP_RCL_HD WHERE (RCL_NO =#rclNum# OR VCL_NO   =#rclNum#)
   		</select>
   		<update id="updateSHCExpRCLHd" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
   		 		update exp_rcl_hd set				
				spl_code1 = #splCode1#,
				spl_code2 = #splCode2#,
				spl_code3 = #splCode3#,
				spl_code4 = #splCode4#,
				spl_code5 = #splCode5#,
				spl_code6 = #splCode6#,
				spl_code7 = #splCode7#,
				spl_code8 = #splCode8#,
				spl_code9 = #splCode9#, 
				lm_user_id = #userID#,
				lm_date = sysdate
				where rcl_no = #rclNum# 		
		  </update>
   		<select id="rcl_by_date"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		<![CDATA[
			SELECT 
				PPK_TYPE AS pkgType, 
				RCL_NO as rclNum, 
				substr(awb_no,1,3)||'-'||substr(awb_no,4) as awbNum, 
				AWB_DEST as destination, 
				AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, pkg_exp_val.get_rcl_car_ind(awb_no, awb_date, rcl_no, ppk_type) as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD  where PPK_TYPE in ('B', 'P') AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 
				UNION SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, ULD_KEY as awbNum , AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, CAR_IND as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE ='M' AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') +1
			]]>
   		</select>
   		<select id="rcl_by_all"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		<![CDATA[
			SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, substr(awb_no,1,3)||'-'||substr(awb_no,4) as awbNum, AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, pkg_exp_val.get_rcl_car_ind(awb_no, awb_date, rcl_no, ppk_type) as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE in ('B', 'P') AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 AND ULD_TYPE = #uldType# AND CARR_CODE = #carrCode# AND STATUS=#status# UNION SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, ULD_KEY as awbNum , AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, CAR_IND as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE ='M' AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 AND ULD_TYPE = #uldType# AND CARR_CODE = #carrCode# AND STATUS=#status#
			]]>
   		</select>
   		<select id="rcl_by_date_status"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		<![CDATA[
			SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, substr(awb_no,1,3)||'-'||substr(awb_no,4) as awbNum, AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, pkg_exp_val.get_rcl_car_ind(awb_no, awb_date, rcl_no, ppk_type) as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE in ('B', 'P') AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 AND STATUS=#status# UNION SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, ULD_KEY as awbNum , AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, CAR_IND as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE ='M' AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 AND STATUS=#status#
			]]>
   		</select>
   		<select id="rcl_by_date_carr"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		<![CDATA[
			SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, substr(awb_no,1,3)||'-'||substr(awb_no,4) as awbNum, AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, pkg_exp_val.get_rcl_car_ind(awb_no, awb_date, rcl_no, ppk_type) as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE in ('B', 'P') AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1  AND CARR_CODE = #carrCode# UNION SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, ULD_KEY as awbNum , AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, CAR_IND as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE ='M' AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 AND CARR_CODE = #carrCode#
			]]>
   		</select>
   		<select id="rcl_by_date_status_type"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		<![CDATA[
			SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, substr(awb_no,1,3)||'-'||substr(awb_no,4) as awbNum, AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, pkg_exp_val.get_rcl_car_ind(awb_no, awb_date, rcl_no, ppk_type) as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE in ('B', 'P') AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 AND ULD_TYPE = #uldType# AND STATUS=#status# UNION SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, ULD_KEY as awbNum , AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, CAR_IND as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE ='M' AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 AND ULD_TYPE = #uldType# AND STATUS=#status#
			]]>
   		</select>
   		<select id="rcl_by_date_carr_type"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		<![CDATA[
		SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, substr(awb_no,1,3)||'-'||substr(awb_no,4) as awbNum, AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, pkg_exp_val.get_rcl_car_ind(awb_no, awb_date, rcl_no, ppk_type) as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE in ('B', 'P') AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 AND ULD_TYPE = #uldType# AND CARR_CODE = #carrCode# UNION SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, ULD_KEY as awbNum , AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, CAR_IND as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE ='M' AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 AND ULD_TYPE = #uldType# AND CARR_CODE = #carrCode#
		]]>
   		</select>
   		<select id="rcl_by_date_type"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
	<![CDATA[
		SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, substr(awb_no,1,3)||'-'||substr(awb_no,4) as awbNum, AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, pkg_exp_val.get_rcl_car_ind(awb_no, awb_date, rcl_no, ppk_type) as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE in ('B', 'P') AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1  AND ULD_TYPE = #uldType# UNION SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, ULD_KEY as awbNum , AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, CAR_IND as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where PPK_TYPE ='M' AND RCL_DATE BETWEEN TO_DATE(#issueDateFr#, 'ddMONyy') AND TO_DATE(#issueDateTo#, 'ddMONyy') + 1 AND ULD_TYPE = #uldType#
		]]>
   	</select>
   	
   	<select id="rcl_by_carrier_code"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
	<![CDATA[
		SELECT PPK_TYPE AS pkgType, RCL_NO as rclNum, ULD_KEY as awbNum, AWB_DEST as destination, AWB_CONTENT as awbContent, RCL_PCS AS rclPcs, RCL_WT AS rclWt, RCL_DATE as rclIssueDate, decode(UPPER(STATUS), 'V', 'Y','N') as voidInd, pkg_exp_val.get_rcl_car_ind(awb_no, awb_date, rcl_no, ppk_type) as carInd, RTN_IND as cargoRetInd From EXP_RCL_HD where CARR_CODE = upper(#carrCode#) order by RCL_DATE desc
		]]>
   	</select>
   	<select id="Void_RCL_Blank_List"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="cargo.cms.export.bo.VoidRCLBO">
		<![CDATA[
		 select t.seq_no seqNo,t.loc_code locCode, t.uld_key uldKey, t.lsp_no lspNo, 
		 t.LOCN_PCS locnPcs, t.locn_wt locnWt , 'N' disableVoidPcWt
		 from awb_inventory t 
		 join exp_rcl_hd r on r.awb_no = t.awb_no and r.awb_date = t.awb_date 
		 where rcl_no =  #rclNum#
		 and not exists (select null from exp_uld_awb where awb_no = t.awb_no and awb_date = t.awb_date and uld_key = nvl(t.uld_key, '**')) 
		 and not (t.flt_key is not null and t.flt_type='E')
		 ]]>
	</select>
	<select id="rcl_break_down"  parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLBulkDim">
	<![CDATA[
		select substr(awb_no,1,3)||'-'||substr(awb_no,4) as awbNumDisp, awb_no as awbNum,DEST as destination, PCS as pieces, ltrim(to_char(WEIGHT,99999999999.9)) as netWeight, 
		(SPL_CODE1 || ' ' ||  SPL_CODE2 || ' ' || SPL_CODE3 || ' ' ||  SPL_CODE4 || ' ' ||  SPL_CODE5 || ' ' ||  SPL_CODE6 || ' ' ||  SPL_CODE7 || ' ' ||  SPL_CODE8 || ' ' ||  SPL_CODE9) as splCode,
		SPL_CODE1 AS splCode1,SPL_CODE2 AS splCode2,SPL_CODE3 AS splCode3,SPL_CODE4 AS splCode4,SPL_CODE5 AS splCode5,SPL_CODE6 AS splCode6,SPL_CODE7 AS splCode7,SPL_CODE8 AS splCode8,SPL_CODE9 AS splCode9, 
		CONTENT as awbContent,
		NVL(SEC_CHECK,'N') as secChk,NVL(carr_rf,'NA') as carrierRF		
		From EXP_RCL_BRKDN WHERE RCL_NO = #rclNum#
		]]>
   	</select>
   		<!-- search RCL -->


	 	<select id="FETCH_ERCL_LIST_AMEND"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO"  resultClass="cargo.cms.external.bo.AmendDlvSlotBO">
   		  SELECT 
          HD.PRE_RCL_NO AS erclNo,
          TO_CHAR(BOOKING.CR_DATE,'DDMONYY') AS createDate,
          decode(HD.PPK_TYPE,'M',NULL,HD.AWB_NO) AS awbNo,
          decode(HD.PPK_TYPE,'M',NULL,substr(HD.AWB_NO,0,3)) as awbNoPfx,
          decode(HD.PPK_TYPE,'M',NULL,substr(HD.AWB_NO,4,8)) as awbNoPfx,
          decode(HD.PPK_TYPE,'M',HD.ULD_KEY,NULL)  AS uldNo,
          BOOKING.BOOKING_NO AS bookingNo,
          TO_CHAR(BOOKING.BOOKING_DATE,'DDMONYY') AS bookingDate,
          LPAD(BOOKING.TIME_SLOT_FROM,4,0) AS timeSlotFrom,
          LPAD(BOOKING.TIME_SLOT_TO,4,0) AS timeSlotTo,
          upper(BOOKING.TRUCK) AS truckNo,
          TO_CHAR(BOOKING.LM_DATE,'DDMONYY HH24:MI:SS') AS lastModifiedDate,
          BOOKING.CUST_NO custNoForInternal
     	  FROM
          EXP_BOOKING BOOKING, EXP_BOOKING_DTL DTL,  EXP_PRE_RCL_HD HD , CUST_COMPANY CUST
    	  WHERE
          BOOKING.BOOKING_NO = DTL.BOOKING_NO AND HD.PRE_RCL_NO = DTL.ERCL_NO AND
          BOOKING.CUST_NO = CUST.CODE
          <isEqual property="userType" compareValue="E">
          	AND CUST.CODE = (SELECT MAX(CUST_NO) FROM SEC_USER WHERE CODE = UPPER(#userID#) AND CUST_NO IS NOT NULL)
		  </isEqual>
		  <isNotEqual property="userType" compareValue="E">
		  	<isNotEmpty property="agentName">
		  		AND CUST.CODE = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = UPPER(#agentName#) AND ACTIVE = 'Y')
		  	</isNotEmpty>
		  </isNotEqual>
          <isNotEmpty property="awbNo">
          and BOOKING.BOOKING_NO in (SELECT BOOKING.BOOKING_NO FROM
							          EXP_BOOKING BOOKING, EXP_BOOKING_DTL DTL,  EXP_PRE_RCL_HD HD , CUST_COMPANY CUST
							    	  WHERE BOOKING.BOOKING_NO = DTL.BOOKING_NO AND HD.PRE_RCL_NO = DTL.ERCL_NO 
							    	  AND BOOKING.CUST_NO = CUST.CODE and decode(HD.PPK_TYPE,'M',NULL,HD.AWB_NO) = #awbNo# )
          </isNotEmpty>
          <isEqual compareValue="creDate" property="dateStatus">
		  <isNotEmpty property="createDateFrom">
          <isNotEmpty property="createDateTo">
          AND BOOKING.CR_DATE BETWEEN TO_DATE(#createDateFrom#,'DDMONYY') AND TO_DATE(#createDateTo#,'DDMONYY')+1
          </isNotEmpty></isNotEmpty></isEqual>
          <isNotEmpty property="uldNo">
		  and BOOKING.BOOKING_NO in (SELECT BOOKING.BOOKING_NO FROM
					    EXP_BOOKING BOOKING, EXP_BOOKING_DTL DTL,  EXP_PRE_RCL_HD HD , EXP_PRE_RCL_DTL DTL , CUST_COMPANY CUST
					    WHERE BOOKING.BOOKING_NO = DTL.BOOKING_NO AND HD.PRE_RCL_NO = DTL.ERCL_NO
					    AND BOOKING.CUST_NO = CUST.CODE 
					     and (decode(HD.PPK_TYPE,'M',HD.ULD_KEY,null) = #uldNo# or (  HD.PRE_RCL_NO =  DTL.PRE_RCL_NO and DTL.ULD_KEY = #uldNo#)))
          </isNotEmpty>
          <isNotEmpty property="erclNo">
          and BOOKING.BOOKING_NO in (SELECT BOOKING.BOOKING_NO FROM
							          EXP_BOOKING BOOKING, EXP_BOOKING_DTL DTL,  EXP_PRE_RCL_HD HD , CUST_COMPANY CUST
							    	  WHERE BOOKING.BOOKING_NO = DTL.BOOKING_NO AND HD.PRE_RCL_NO = DTL.ERCL_NO 
							    	  AND BOOKING.CUST_NO = CUST.CODE and HD.PRE_RCL_NO = #erclNo# )
          </isNotEmpty>
          <isNotEmpty property="truckNo">
          AND BOOKING.TRUCK = #truckNo#
          </isNotEmpty>
          <isNotEmpty property="bookingNo">
          AND BOOKING.BOOKING_NO = #bookingNo#
          </isNotEmpty>
          <isEqual compareValue="bookDate" property="dateStatus">
          	<isNotEmpty property="timeSlotDateFrom">
          		<isNotEmpty property="timeSlotDateTo">
          			AND ((BOOKING.BOOKING_DATE BETWEEN TO_DATE(#timeSlotDateFrom#,'DDMONYY') AND TO_DATE(#timeSlotDateTo#,'DDMONYY'))
          		</isNotEmpty>
          	</isNotEmpty>
          	<isNotEmpty property="timeSlotFrom">
          		<isNotEmpty property="timeSlotTo">
          		<![CDATA[  
             		AND (BOOKING.TIME_SLOT_FROM >= DECODE(BOOKING.BOOKING_DATE,TO_DATE(#timeSlotDateFrom#,'DD-MON-YY'),#timeSlotFrom#,'0001'))
                	AND (BOOKING.TIME_SLOT_TO <= DECODE(BOOKING.BOOKING_DATE,TO_DATE(#timeSlotDateTo#,'DD-MON-YY'),#timeSlotTo#,'2400'))) 
          		]]>
          		</isNotEmpty>
          	</isNotEmpty>
         </isEqual>
         	ORDER BY BOOKING.BOOKING_NO
		</select>

<select id="FETCH_ERCL_LIST_AMEND_FOR_UPDATE"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO"  resultClass="cargo.cms.external.bo.AmendDlvSlotBO">
SELECT 
          HD.PRE_RCL_NO AS erclNo,
          TO_CHAR(BOOKING.CR_DATE,'DDMONYY') AS createDate,
          HD.AWB_NO AS awbNo,
          substr(HD.AWB_NO,0,3) as awbNoPfx,
          substr(HD.AWB_NO,4,8) as awbNoSfx,
          HD.ULD_KEY AS uldNo,
          'Y' AS checkStatus,
          BOOKING.BOOKING_NO AS bookingNo,
          TO_CHAR(BOOKING.BOOKING_DATE,'DDMONYY') AS bookingDate,
          HD.CARR_CODE AS carr,
          (decode(HD.spl_code1, null, '', decode(HD.spl_code2,'',HD.spl_code1,'/'))
               || decode(HD.spl_code2, null, '',decode(HD.spl_code3,'',HD.spl_code2,'/'))
               || decode(HD.spl_code3, null, '',HD.spl_code3)) AS shcCode,
           HD.TTL_PCS AS erclPc,
           HD.TTL_WT AS erclWt,
           (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE=(booking.cust_no)) AS agentName,
           HD.AWB_DEST AS destination,
           HD.spl_code1 AS shcCode1,
           HD.spl_code2 AS shcCode2,
           HD.spl_code3 AS shcCode3,
           (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE = HD.SPL_LOAD_REQ AND CODE_TYPE = 'SPL_LOAD_REQUIREMENT') AS specialLoadReq,
           TO_CHAR(BOOKING.LM_DATE,'DDMONYY HH24:MI:SS') AS lastModifiedDate1,
          ( select 
                   sum(TTL_PCS) 
              from
          EXP_BOOKING BOOKING, EXP_BOOKING_DTL DTL, EXP_PRE_RCL_HD HD,CUST_COMPANY CUST
          WHERE
           BOOKING.BOOKING_NO = DTL.BOOKING_NO AND 
          HD.PRE_RCL_NO = DTL.ERCL_NO AND BOOKING.CUST_NO = CUST.CODE
         <isEqual property="userType" compareValue="E">
          AND CUST.CODE = (SELECT MAX(CUST_NO) FROM SEC_USER WHERE CODE = UPPER(#userID#) AND CUST_NO IS NOT NULL)
		  </isEqual>
          AND BOOKING.BOOKING_NO = #bookingNo#) as totalPc,
           (select 
      sum(TTL_WT) 
      from
          EXP_BOOKING BOOKING, EXP_BOOKING_DTL DTL, EXP_PRE_RCL_HD HD,CUST_COMPANY CUST
          WHERE
          BOOKING.BOOKING_NO = DTL.BOOKING_NO AND 
          HD.PRE_RCL_NO = DTL.ERCL_NO AND BOOKING.CUST_NO = CUST.CODE
          <isEqual property="userType" compareValue="E">
           AND CUST.CODE = (SELECT MAX(CUST_NO) FROM SEC_USER WHERE CODE = UPPER(#userID#) AND CUST_NO IS NOT NULL)
		  </isEqual>
		  AND BOOKING.BOOKING_NO = #bookingNo#) as totalWt
      FROM
          EXP_BOOKING BOOKING, EXP_BOOKING_DTL DTL, EXP_PRE_RCL_HD HD,CUST_COMPANY CUST
      WHERE
          BOOKING.BOOKING_NO = DTL.BOOKING_NO AND HD.PRE_RCL_NO = DTL.ERCL_NO AND
          BOOKING.CUST_NO = CUST.CODE
          <isEqual property="userType" compareValue="E">
          AND CUST.CODE = (SELECT MAX(CUST_NO) FROM SEC_USER WHERE CODE = UPPER(#userID#) AND CUST_NO IS NOT NULL)
		  </isEqual>
	       <isNotEmpty property="bookingNo">
          AND BOOKING.BOOKING_NO = #bookingNo#
          </isNotEmpty> order by bookingNo
         </select>
         <select id="FETCH_AMEND_DATE_LIST"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="cargo.cms.external.bo.AmendDlvSlotBO" >
	<![CDATA[
	SELECT TO_CHAR(CDATE,'DDMONYY') AS cdate FROM(
      select (SELECT TO_DATE(SYSDATE,'dd-mon-yyyy') FROM DUAL) + rownum -1 as cdate
      from all_objects
      where rownum <= 
      (SELECT TO_DATE(SYSDATE+(select rule_value from cmsrules where rule_code='BOOK_DLV_SLOT_DATE'),'dd-mon-yyyy') FROM DUAL)-(SELECT TO_DATE(SYSDATE,'dd-mon-yyyy') FROM DUAL))
    ]]>
    </select>
    
    <select id="FETCH_AMEND_TODAY_TIMESLOT_LIST"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="cargo.cms.external.bo.AmendDlvSlotBO" >
<![CDATA[
SELECT 
            TIMESLOT_FROM AS timeSlotFrom,
            TIMESLOT_TO AS timeSlotTo
        FROM
            TIME_SLOT 
       WHERE TIMESLOT_FROM > (SELECT 
                                   TO_NUMBER(to_char(sysdate,'HH24')) + 
                                   (select rule_value from cmsrules where rule_code='BOOK_DLV_SLOT_CREATION') ||':'|| 
                                   TO_NUMBER(to_char(sysdate,'MI')) FROM DUAL)
             and TIMESLOT_FROM not in(select (substr(time_slot_from,0,2)||':'||substr(time_slot_from,3,2)) AS timeSlotFrom
                                          from
                                               exp_booking
                                          where
                                               booking_date = TO_DATE(#cdate#,'DDMONYY') AND TRUCK=#truckNo# AND CUST_NO=(SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)))                    
                                   order by timeSlotFrom 
                                   
  ]]>
</select>
<select id="FETCH_NOT_AMEND_TODAY_TIMESLOT_LIST"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="cargo.cms.external.bo.AmendDlvSlotBO" >
SELECT 
            TIMESLOT_FROM AS timeSlotFrom,
            TIMESLOT_TO AS timeSlotTo
        FROM
            TIME_SLOT 
       where
             TIMESLOT_FROM not in(select (substr(time_slot_from,0,2)||':'||substr(time_slot_from,3,2)) AS timeSlotFrom
                                          from
                                               exp_booking
                                          where
                                               booking_date = TO_DATE(#cdate#,'DDMONYY') AND TRUCK=#truckNo# AND CUST_NO=(SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#))) 
             order by timeSlotFrom 
</select>
    <select id="FETCH_AMEND_TODAY_DATE"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.String" >
SELECT TO_CHAR(SYSDATE,'DDMONYY') FROM DUAL
</select>
<select id="FETCH_NEW_ERCL_LIST_FOR_UPDATE"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO"  resultClass="cargo.cms.external.bo.AmendDlvSlotBO">
SELECT 
          HD.PRE_RCL_NO AS erclNo,
          HD.AWB_NO AS awbNo,
          substr(HD.AWB_NO,0,3) as awbNoPfx,
  		  substr(HD.AWB_NO,4,8) as awbNoSfx,
          HD.ULD_KEY AS uldNo,
          HD.CARR_CODE AS carr,
          (decode(HD.spl_code1, null, '', decode(HD.spl_code2,'',HD.spl_code1,'/'))
               || decode(HD.spl_code2, null, '',decode(HD.spl_code3,'',HD.spl_code2,'/'))
               || decode(HD.spl_code3, null, '',HD.spl_code3)) AS shcCode,
           HD.TTL_PCS AS erclPc,
           HD.TTL_WT AS erclWt,
           (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE=(HD.cust_no)) AS agentName,
           HD.AWB_DEST AS destination,
           HD.SPL_LOAD_REQ AS specialLoadReq
  FROM
         EXP_PRE_RCL_HD HD
    WHERE
        HD.VOID_DATE IS NULL AND 
        HD.VOID_USER_ID IS NULL AND 
        HD.TRUCKER_CUST_NO IS NULL AND
        HD.STATUS = 'SUBMITTED' AND
        (HD.CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)) OR HD.TRUCKER_CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#))) AND 
        HD.PRE_RCL_NO NOT IN (SELECT ERCL_NO FROM EXP_BOOKING_DTL)
        AND HD.PRE_RCL_NO NOT IN (select HD.PRE_RCL_NO FROM exp_pre_rcl_hd hd,exp_rcl_hd dtl where hd.pre_rcl_no = dtl.pre_rcl_no and hd.cust_no = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)))
         order by HD.PRE_RCL_NO ASC
</select>
<select id="FETCH_NEW_ERCL_LIST_FOR_UPDATE_INT"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO"  resultClass="cargo.cms.external.bo.AmendDlvSlotBO">
	SELECT 
	HD.PRE_RCL_NO AS erclNo,
	HD.AWB_NO AS awbNo,
	substr(HD.AWB_NO,0,3) as awbNoPfx,
	substr(HD.AWB_NO,4,8) as awbNoSfx,
	HD.ULD_KEY AS uldNo,
	HD.CARR_CODE AS carr,
	(decode(HD.spl_code1, null, '', decode(HD.spl_code2,'',HD.spl_code1,'/'))
	|| decode(HD.spl_code2, null, '',decode(HD.spl_code3,'',HD.spl_code2,'/'))
	|| decode(HD.spl_code3, null, '',HD.spl_code3)) AS shcCode,
	HD.TTL_PCS AS erclPc,
	HD.TTL_WT AS erclWt,
	(SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE=(HD.cust_no)) AS agentName,
	HD.AWB_DEST AS destination,
	HD.SPL_LOAD_REQ AS specialLoadReq
	FROM
	EXP_PRE_RCL_HD HD
	WHERE
	HD.VOID_DATE IS NULL AND 
	HD.VOID_USER_ID IS NULL AND 
	HD.TRUCKER_CUST_NO IS NULL AND
	HD.STATUS = 'SUBMITTED' AND
	(
	  HD.CUST_NO = #custNoForInternal# OR HD.TRUCKER_CUST_NO = #custNoForInternal#
	) AND 
	HD.PRE_RCL_NO NOT IN (SELECT ERCL_NO FROM EXP_BOOKING_DTL)
	AND HD.PRE_RCL_NO NOT IN (
	  	select HD.PRE_RCL_NO FROM exp_pre_rcl_hd hd,exp_rcl_hd dtl 
	  	where hd.pre_rcl_no = dtl.pre_rcl_no and hd.cust_no = #custNoForInternal#
	)
	ORDER BY HD.PRE_RCL_NO ASC
</select>
<select id="FETCH_AMEND_BOOKING_TIME_LIST" parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="cargo.cms.external.bo.AmendDlvSlotBO" >
SELECT 
      LPAD(TIME_SLOT_FROM,4,0) as timeSlotFrom
  FROM
       EXP_BOOKING
  WHERE
       CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)) AND BOOKING_DATE=#cdate#
       AND TRUCK = #truckNo#
</select>
<select id="NO_OF_BOOKINGS_AMEND_INEXP_PRE_RCL_HD" parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
	SELECT COUNT(1) FROM EXP_BOOKING WHERE CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)) AND BOOKING_DATE = #cdate#
</select>
<select id="NO_OF_BOOKINGS_AMEND_IN_CUST_COMPANY" parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
	SELECT CUST_COMPANY.NO_OF_BOOKING_PERDAY FROM CUST_COMPANY,SEC_USER  WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE =UPPER(#userID#)
	UNION
    SELECT CUST_COMPANY.NO_OF_BOOKING_PERDAY FROM CUST_COMPANY where code=#agentCode#
</select>
<select id="CHECK_AMEND_ERCL_BOOKING_OR_NOT"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
SELECT COUNT(1) FROM EXP_BOOKING_DTL WHERE ERCL_NO = #erclNo#
</select>
<select id="CHECK_AMEND_SHC_IS_VAL_OR_NOT"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE
WHERE SPL_TYPE='SPL_VAL'
AND (SPL_CODE = #shcCode1# or
SPL_CODE = #shcCode2# or
spl_CODE = #shcCode3#)
</select>
<select id="CHECK_EXP_BOOKING_EXISTS_OR_NOT"  parameterClass="java.lang.String" resultClass="java.lang.Integer" >
select COUNT(1) from TCS_DOCK_POOL_BOOKING where tr_no=#PARAM#
</select>
<delete id="DELETE_AMEND_DLV_SLOT_DATA_IN_EXP_BOOKING_DTL" parameterClass="cargo.cms.external.bo.AmendDlvSlotBO">
		DELETE FROM EXP_BOOKING_DTL WHERE BOOKING_NO = #bookingNo#
</delete>
<delete id="DELETE_AMEND_DLV_SLOT_DATA_IN_EXP_BOOKING" parameterClass="cargo.cms.external.bo.AmendDlvSlotBO">
		DELETE FROM EXP_BOOKING WHERE BOOKING_NO = #bookingNo#
</delete>
<select id="CHECK_CONCURRENCY"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
select COUNT(1) from exp_booking where booking_no = #bookingNo# and TO_CHAR(LM_DATE,'DDMONYY HH24:MI:SS')= #lastModifiedDate#
</select>
<select id="CHECK_CONCURRENCY_UPDATE"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
select COUNT(1) from exp_booking where booking_no = #bookingNo# and TO_CHAR(LM_DATE,'DDMONYY HH24:MI:SS')= #lastModifiedDate1#
</select>
<select id="sqlGetExpBkgCustomerNo" parameterClass="java.lang.String" resultClass="java.lang.String">
	SELECT CUST_NO FROM EXP_BOOKING WHERE BOOKING_NO = #PARAM#
</select>
<insert id="INSERT_AMEND_DATA_INTO_EXP_BOOKING" parameterClass="cargo.cms.external.bo.AmendDlvSlotBO">
	 INSERT INTO EXP_BOOKING(
      BOOKING_NO,
 	  CUST_NO,
	  BOOKING_DATE,
      TRUCK,
      CR_USER_ID,
      CR_DATE,
      LM_USER_ID,
      LM_DATE,
      TIME_SLOT_FROM,
      TIME_SLOT_TO, PURPOSE, DOCK_PURPOSE, EXP_DURATION, POOL_ID)
      VALUES(
      #bookingNo#,
      <isEmpty property="userType" >
      (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = UPPER(#userID#)),
      </isEmpty>
      <isNotEmpty property="userType">
       #custNoForInternal#,
      </isNotEmpty>
      #cdate#,
      #truckNo#,
      #userID#,
      sysdate,
      #userID#,
      sysdate,
      #timeSlotFrom#,
      #timeSlotTo#, #bkgPurpose#, #dockPurpose#, #expDuration#, #poolId#
      )
</insert>
<select id="FETCH_AMEND_CUST_NO"  parameterClass="java.lang.String" resultClass="java.lang.String" >
			SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #PARAM# AND ROWNUM=1
</select>
<select id="FETCH_NAME_AGENT"  parameterClass="java.lang.String" resultClass="java.lang.String" >
			SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = #PARAM# 
</select>
<select id="FETCH_AMEND_DOCLINE_NO"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.String" >
			select NVL(max(DOC_LINE_NO)+1,1) FROM EXP_BOOKING_DTL
</select>
	<insert id="INSERT_AMEND_DATA_INTO_EXP_BOOKING_DTL" parameterClass="cargo.cms.external.bo.AmendDlvSlotBO">
	 INSERT INTO EXP_BOOKING_DTL(
     BOOKING_NO,
     DOC_LINE_NO,
     ERCL_NO,
     CR_USER_ID,
     CR_DATE,
     LM_USER_ID,
     LM_DATE)
      VALUES(
      #bookingNo#,
      #docLineNo#,
      #erclNo#,
      #userID#,
      sysdate,
      #userID#,
      sysdate
      )
</insert>
<select id="FETCH_AMEND_DLV_TC_STATUS" parameterClass="map" resultClass="cargo.cms.external.bo.AmendDlvSlotBO">
	select TC_IND AS showTCStatus,TC_ID AS tcId from MAINTAIN_TC WHERE FUNCTION_CODE = #functionCode#
</select>
<select id="CHECK_AMEND_DIFF_BETWEEN_DATE"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT TO_CHAR(TO_DATE(#createDateTo#,'DDMONYY') - TO_DATE(#createDateFrom#,'DD-MON-YY')) DAYDIFF FROM DUAL
</select>

<select id="CHECK_ASSIGN_IS_MASTER_AGENT_OR_NOT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
		SELECT COUNT(CUST_NO) FROM EXP_PRE_RCL_HD WHERE ASSIGN_BY = #assignBy# AND PRE_RCL_NO = #erclNo#
</select>

<select id="FETCH_XCONFIGURABLE_HOURS_CMSRULES"  parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='BOOK_DLV_TIME_DIFF'
</select>

<select id="CHECK_AMEND_BOOKING_DIFF_BETWEEN_DATE"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.String" >
		   <![CDATA[
		select
       (case when (SELECT to_number(TO_DATE(#bkgDateTo#,'DDMONYY HH24:MI') - TO_DATE(#bkgDateFrom#,'DDMONYY HH24:MI')) as DAYDIFF FROM DUAL) < 0 
       then 'Y'
       else 'N'
       end)
       from 
       dual
       ]]>
</select>

<select id="CHECK_MASTER_AGENT_EXP_BOOKING"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
		select count(cust_no) from exp_booking where cust_no = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)) and booking_no = #bookingNo#
</select>
<select id="FETCH_MASTER_AGENT_IN_EXP_BOOKING"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.String" >
		SELECT CUST_COMPANY.CODE_DESC FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)
</select>
<select id="FETCH_NON_MASTER_AGENT_IN_EXP_BOOKING"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.String" >
		select (select code_desc from cust_company where code=cust_no) from exp_booking where booking_no = #bookingNo#
</select>

<select id="FETCH_AMEND_AGENT_DETAILS_IN_CUSTCOMPANY"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="cargo.cms.external.bo.AmendDlvSlotBO" >
	SELECT AGENT_YN AS agent_yn, TRUCKER_YN AS trucker_yn	 FROM	 CUST_COMPANY,SEC_USER  WHERE	CUST_COMPANY.CODE = SEC_USER.CUST_NO  AND SEC_USER.CODE = UPPER(#userID#)
	</select>
	<select id="CHECK_AMEND_ASSIGN_CREATE_OR_NOT"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(1) FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = #erclNo# AND TRUCKER_CUST_NO IS NOT NULL AND ASSIGN_DATE IS NOT NULL AND ASSIGN_BY IS NOT NULL
    </select>
    <select id="CHECK_CARGO_ACCEPTENCE_EXP_RCL_HD"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(RCL_NO) FROM EXP_RCL_HD WHERE PRE_RCL_NO = #erclNo#
    </select>
    <select id="CHECK_VALID_BOOKINGNO_NOT"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
			select count(BOOKING_NO) from exp_booking where cust_no = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE SEC_USER.CUST_NO = CUST_COMPANY.CODE AND SEC_USER.CODE = UPPER(#userID#)) and booking_no = #bookingNo#
    </select>
    <select id="CHECK_RCL_IS_BOOKING_EXP_RCL_HD"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
			select COUNT(1) from exp_booking_dtl where ERCL_NO=#erclNo#
    </select>
<select id="getUnladingPoint" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
 	SELECT COUNT(1) FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# and flt_type = 'D' AND 
	SCH_DATE =TO_DATE(#FLT_DATE#,'DDMONYY') AND LEG_ORD >= (SELECT MIN(LEG_ORD) FROM FLT_OPR_LEG WHERE 
	FLT_KEY = #FLT_KEY# AND SCH_DATE =  TO_DATE(#FLT_DATE#,'DDMONYY') AND BRD_POINT = 'HKG') and off_point=#UNLADING_POINT#
	ORDER BY OFF_POINT
</select>

<select id="CHECK_AGENE_NAME_IN_CUST_COMPANY"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(CODE) FROM CUST_COMPANY WHERE code_desc = #agentName#
</select>

<select id="CHECK_TRUCK_NO_NAME_IN_TRUCK_TRIP"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(TRUCK_NO) FROM TRUCK_TRIP WHERE TRUCK_NO = #truckNo#
</select>

<select id="CHECK_TRUCK_IPASS_IS_EXIST_OR_NOT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(1) FROM TCS_IPASS_MASTER WHERE TRUCK_NO = #truckNo#
</select>

<select id="validateExpBookingTruckNo" parameterClass="map" resultClass="java.lang.Integer">
 	<![CDATA[
 		SELECT COUNT(BOOKING_NO)
 		FROM (
			SELECT BOOKING_NO
			FROM EXP_BOOKING BKG
			WHERE
			TO_DATE(TO_CHAR(BOOKING_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(NVL(TIME_SLOT_FROM, 0), '0000')), 'DDMONYY HH24MI')
			BETWEEN
			TO_DATE(#timeSlotDate# || ' ' || #timeSlotFrom#, 'DDMONYY HH24:MI') - ((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'BOOKING_SLOT_HOURS') / 24)
			AND
			(TO_DATE(#timeSlotDate# || ' ' || #timeSlotTo#, 'DDMONYY HH24:MI') + ((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'BOOKING_SLOT_HOURS') / 24)) - (1/24/60)
			AND #truckNo# IN(TRUCK)
	]]>
    	<isNotEmpty property="bkgNo">
       	<![CDATA[ AND BOOKING_NO <> #bkgNo# ]]>
       </isNotEmpty> 	
	<![CDATA[
			UNION
			SELECT BOOKING_NO
			FROM IMP_BOOKING BKG
			WHERE
			TO_DATE(TO_CHAR(BKG_SLOT_DATE, 'DDMONYY') || ' ' || TRIM(TO_CHAR(NVL(BKG_SLOT_FROM, 0), '0000')), 'DDMONYY HH24MI')
			BETWEEN
			TO_DATE(#timeSlotDate# || ' ' || #timeSlotFrom#, 'DDMONYY HH24:MI') - ((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'BOOKING_SLOT_HOURS') / 24)
			AND
			(TO_DATE(#timeSlotDate# || ' ' || #timeSlotTo#, 'DDMONYY HH24:MI') + ((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'BOOKING_SLOT_HOURS') / 24)) - (1/24/60)
			AND #truckNo# IN(TRUCK1, TRUCK2, TRUCK3, TRUCK4, TRUCK5, TRUCK6) AND STATUS = 'ISSUED'
		)		
    ]]> 
</select> 

<select id="FETCH_XCONFIG_HOURS"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			select rule_value from cmsrules where rule_code='BOOK_DLV_SLOT_CREATION'
</select>

<select id="CHECK_AGENT_ASSIGN_CREATE_OR_NOT"  parameterClass="cargo.cms.external.bo.BookDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(1) FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = #erclNo# AND TRUCKER_CUST_NO IS NOT NULL AND ASSIGN_DATE IS NOT NULL AND ASSIGN_BY IS NOT NULL AND CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = UPPER(#userID#))
</select>

<select id="CHECK_ASSIGN_TRUCK_NO_NAME_IN_TRUCK_TRIP"  parameterClass="cargo.cms.external.bo.AmendDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(TRUCK_NO) FROM TRUCK_TRIP WHERE TRUCK_NO = #truckNo#
</select>
<select id="uldProfileExistsNot" parameterClass="cargo.cms.export.bo.SuperUrgentCgoBO" resultClass="java.lang.Integer">
	SELECT NVL(count(1), 0) as count
			 FROM ULD_GROUP_CARR
			  WHERE CARR_CODE=#carrCodeuld# AND ULD_TYPE=#uldGrpType#
</select>
<select id="uldProfileExistsNotNext" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO" resultClass="java.lang.Integer">
	SELECT NVL(count(1), 0) as count
			 FROM ULD_GROUP_CARR
			  WHERE CARR_CODE=#carrCodeuld# AND ULD_TYPE=#uldGrpType#
</select>

<select id="CHECK_VALID_ENQ_BOOKINGNO_NOT"  parameterClass="cargo.cms.external.bo.EnqDlvSlotBO" resultClass="java.lang.Integer" >
			select count(BOOKING_NO) from exp_booking where cust_no = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = UPPER(#userID#)) and booking_no = #bookingNo#
</select>

<select id="FETCH_CPCT_AGENT_NAME"  parameterClass="cargo.cms.external.bo.EnqDlvSlotBO" resultClass="java.lang.Integer" >
			SELECT COUNT(1) FROM CMSRULES WHERE RULE_CODE = 'CPCT_COMPANY' AND RULE_VALUE = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = #userID#)
</select>

<select id="FETCH_AGENT_NAME"  parameterClass="cargo.cms.external.bo.EnqDlvSlotBO" resultClass="java.lang.String" >
			SELECT CUST_COMPANY.CODE_DESC FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = #userID# 
			AND (CUST_COMPANY.AGENT_YN = 'Y' OR CUST_COMPANY.TRUCKER_YN='Y')
</select>

<select id="CHECK_ENQ_BOOKING_DIFF_BETWEEN_DATE"  parameterClass="cargo.cms.external.bo.EnqDlvSlotBO" resultClass="java.lang.String" >
	<![CDATA[
		select
       (case when (SELECT to_number(TO_DATE(#bkgDateTo#,'DDMONYY HH24:MI') - TO_DATE(#bkgDateFrom#,'DDMONYY HH24:MI')) as DAYDIFF FROM DUAL) < 0 
       then 'Y'
       else 'N'
       end)
       from 
       dual
       ]]>
</select>

<select id="CHECK_BOOK_BOOKING_DIFF_BETWEEN_DATE"  parameterClass="cargo.cms.external.bo.EnqDlvSlotBO" resultClass="java.lang.String" >
	<![CDATA[
		select
       (case when (SELECT to_number(TO_DATE(#bkgDateTo#,'DDMONYY HH24:MI') - TO_DATE(#bkgDateFrom#,'DDMONYY HH24:MI')) as DAYDIFF FROM DUAL) > 0 
       then 'Y'
       else 'N'
       end)
       from 
       dual
       ]]>
</select>

<select id="FETCH_ERCL_LIST_ENQ"  parameterClass="cargo.cms.external.bo.EnqDlvSlotBO" resultClass="cargo.cms.external.bo.EnqDlvSlotBO" >
	SELECT BOOKING_NO AS bookingNo,
           TO_CHAR(CR_DATE,'DDMONYY HH24:MI') AS createDate,
           TRUCK AS truckNo,
           TO_CHAR(BOOKING_DATE,'DDMONYY') AS bookingDate,
           LPAD(TIME_SLOT_FROM,4,0) AS timeSlotFrom,
           LPAD(TIME_SLOT_TO,4,0) AS timeSlotTo
     FROM 
           EXP_BOOKING
    WHERE 
    	  CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY WHERE CUST_COMPANY.CODE_DESC = UPPER(#agentName#))
          <isNotEmpty property="truckNo">
          AND TRUCK = #truckNo#
          </isNotEmpty>
          <isNotEmpty property="bookingNo">
          AND BOOKING_NO = #bookingNo#
          </isNotEmpty>
          <isNotEmpty property="timeSlotDateFrom">
          <isNotEmpty property="timeSlotDateTo">
          AND ((BOOKING_DATE BETWEEN TO_DATE(#timeSlotDateFrom#,'DDMONYY') AND TO_DATE(#timeSlotDateTo#,'DDMONYY'))
          </isNotEmpty></isNotEmpty>
          <isNotEmpty property="timeSlotFrom">
          <isNotEmpty property="timeSlotTo">
             	<![CDATA[  AND (TIME_SLOT_FROM >= DECODE(BOOKING_DATE,TO_DATE(#timeSlotDateFrom#,'DD-MON-YY'),#timeSlotFrom#,'0001'))
                           AND (TIME_SLOT_TO <= DECODE(BOOKING_DATE,TO_DATE(#timeSlotDateTo#,'DD-MON-YY'),#timeSlotTo#,'2400'))) ]]>
          </isNotEmpty></isNotEmpty>order by bookingNo
</select>
<select id="FETCH_WEBSERVICE_DETAIL_ERCL_LIST_ENQ"  parameterClass="cargo.cms.external.bo.EnqDlvSlotBO"  resultClass="cargo.cms.external.bo.EnqDlvSlotBO">
 SELECT 
          HD.PRE_RCL_NO AS erclNo,
          TO_CHAR(BOOKING.CR_DATE,'DDMONYY') AS createDate,
          BOOKING.TRUCK AS truckNo,
          HD.AWB_NO AS awbNo,
          substr(HD.AWB_NO,0,3) as awbNoPfx,
          substr(HD.AWB_NO,4,8) as awbNoSfx,
          HD.ULD_KEY AS uldNo,
          BOOKING.BOOKING_NO AS bookingNo,
          LPAD(TIME_SLOT_FROM,4,0)||':'||LPAD(TIME_SLOT_TO,4,0) AS timeSlotFrom,
          TO_CHAR(BOOKING.BOOKING_DATE,'DDMONYY') AS bookingDate,
          HD.CARR_CODE AS carr,
         (decode(HD.SPL_CODE1, null, '',HD.SPL_CODE1)) || (decode(HD.SPL_CODE2, null, '','/'||HD.SPL_CODE2))|| (decode(HD.SPL_CODE3, null, '','/'||HD.SPL_CODE3)) AS shcCode,
           HD.TTL_PCS AS erclPc,
           HD.TTL_WT AS erclWt,
           (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE=(HD.cust_no)) AS agentName,
           HD.AWB_DEST AS destination,
           HD.spl_code1 AS shcCode1,
           HD.spl_code2 AS shcCode2,
           HD.spl_code3 AS shcCode3,
           (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE = HD.SPL_LOAD_REQ AND CODE_TYPE = 'SPL_LOAD_REQUIREMENT') AS specialLoadReq,
          (select sum(TTL_PCS) from EXP_BOOKING BOOKING,
          EXP_BOOKING_DTL DTL,
          EXP_PRE_RCL_HD HD WHERE
          BOOKING.BOOKING_NO = DTL.BOOKING_NO AND
          HD.PRE_RCL_NO = DTL.ERCL_NO AND
          HD.cust_no = (select code from cust_company where code_desc =#agentName# and rownum=1)
          <isNotEmpty property="bookingNo"> 
          and BOOKING.BOOKING_NO = #bookingNo#
          </isNotEmpty>
          ) as totalPc,
           (select sum(TTL_WT) from EXP_BOOKING BOOKING,
          EXP_BOOKING_DTL DTL,
          EXP_PRE_RCL_HD HD WHERE
          BOOKING.BOOKING_NO = DTL.BOOKING_NO AND
          HD.PRE_RCL_NO = DTL.ERCL_NO AND
          HD.cust_no = (select code from cust_company where code_desc =#agentName# and rownum=1)
          <isNotEmpty property="bookingNo"> 
          and BOOKING.BOOKING_NO = #bookingNo#
          </isNotEmpty>
          ) as totalWt
      FROM
          EXP_BOOKING BOOKING,
          EXP_BOOKING_DTL DTL,
          EXP_PRE_RCL_HD HD
    WHERE
          BOOKING.BOOKING_NO = DTL.BOOKING_NO AND
          HD.PRE_RCL_NO = DTL.ERCL_NO AND
          HD.cust_no = (select code from cust_company where code_desc =#agentName# and rownum=1)
          <isNotEmpty property="truckNo">
          AND BOOKING.TRUCK = #truckNo#
          </isNotEmpty>
          <isNotEmpty property="bookingNo">
          AND BOOKING.BOOKING_NO = #bookingNo#
          </isNotEmpty>
          <isNotEmpty property="timeSlotDateFrom">
          <isNotEmpty property="timeSlotDateTo">
          AND (BOOKING.BOOKING_DATE BETWEEN TO_DATE(#timeSlotDateFrom#,'DDMONYY') AND TO_DATE(#timeSlotDateTo#,'DDMONYY'))
          </isNotEmpty></isNotEmpty>
          <isNotEmpty property="timeSlotFrom">
          <isNotEmpty property="timeSlotTo">
             	<![CDATA[  AND (BOOKING.TIME_SLOT_FROM >= DECODE(BOOKING.BOOKING_DATE,TO_DATE(#timeSlotDateFrom#,'DD-MON-YY'),#timeSlotFrom#,'0001'))
                           AND (BOOKING.TIME_SLOT_TO <= DECODE(BOOKING.BOOKING_DATE,TO_DATE(#timeSlotDateTo#,'DD-MON-YY'),#timeSlotTo#,'2400')) ]]>
          </isNotEmpty></isNotEmpty>order by bookingNo
</select>
<select id="FETCH_DETAIL_ERCL_LIST_ENQ"  parameterClass="cargo.cms.external.bo.EnqDlvSlotBO"  resultClass="cargo.cms.external.bo.EnqDlvSlotBO">
   	SELECT 
          HD.PRE_RCL_NO AS erclNo,
          TO_CHAR(BOOKING.CR_DATE,'DDMONYY') AS createDate,
          HD.AWB_NO AS awbNo,
          substr(HD.AWB_NO,0,3) as awbNoPfx,
          substr(HD.AWB_NO,4,8) as awbNoSfx,
          HD.ULD_KEY AS uldNo,
          BOOKING.BOOKING_NO AS bookingNo,
          TO_CHAR(BOOKING.BOOKING_DATE,'DDMONYY') AS bookingDate,
          HD.CARR_CODE AS carr,
          (decode(HD.spl_code1, null, '', decode(HD.spl_code2,'',HD.spl_code1,'/'))
               || decode(HD.spl_code2, null, '',decode(HD.spl_code3,'',HD.spl_code2,'/'))
               || decode(HD.spl_code3, null, '',HD.spl_code3)) AS shcCode,
           HD.TTL_PCS AS erclPc,
           HD.TTL_WT AS erclWt,
           (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE=(HD.cust_no)) AS agentName,
           HD.AWB_DEST AS destination,
           HD.spl_code1 AS shcCode1,
           HD.spl_code2 AS shcCode2,
           HD.spl_code3 AS shcCode3,
           (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE = HD.SPL_LOAD_REQ AND CODE_TYPE = 'SPL_LOAD_REQUIREMENT') AS specialLoadReq,
          (select sum(TTL_PCS) from EXP_BOOKING BOOKING,
          EXP_BOOKING_DTL DTL,
          EXP_PRE_RCL_HD HD WHERE
          BOOKING.BOOKING_NO = DTL.BOOKING_NO AND
          HD.PRE_RCL_NO = DTL.ERCL_NO AND
          BOOKING.CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = UPPER(#userID#)) 
          AND BOOKING.BOOKING_NO = #bookingNo#) as totalPc,
           (select sum(TTL_WT) from EXP_BOOKING BOOKING,
          EXP_BOOKING_DTL DTL,
          EXP_PRE_RCL_HD HD WHERE
          BOOKING.BOOKING_NO = DTL.BOOKING_NO AND
          HD.PRE_RCL_NO = DTL.ERCL_NO AND
          BOOKING.CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = UPPER(#userID#)) AND BOOKING.BOOKING_NO = #bookingNo#) as totalWt
      FROM
          EXP_BOOKING BOOKING,
          EXP_BOOKING_DTL DTL,
          EXP_PRE_RCL_HD HD
    WHERE
          BOOKING.BOOKING_NO = DTL.BOOKING_NO AND
          HD.PRE_RCL_NO = DTL.ERCL_NO AND
          BOOKING.CUST_NO = (SELECT CUST_COMPANY.CODE FROM CUST_COMPANY,SEC_USER WHERE CUST_COMPANY.CODE = SEC_USER.CUST_NO AND SEC_USER.CODE = UPPER(#userID#))
          <isNotEmpty property="bkgNo">
          AND BOOKING.BOOKING_NO = #bkgNo#
          </isNotEmpty> order by erclNo
   </select>
	 
	 <!--  added by Surendra GOllapalli Iteartion 3 for ReassignRCL START -->
<select id="getReassignRCLList" parameterClass="cargo.cms.export.bo.ReassignRCLBO" resultClass="cargo.cms.export.bo.ReassignRCLBO">		
	select a.truck_no as truckNo,
		a.truck_no as newTruckNo,
		a.truck_no as truckNoUpdate,
		a.rcl_no as rclNo,
		substr (a.awb_no, 1, 3) || '-' || substr (a.awb_no, 4) as awbNo,
		a.awb_no as awbNoDisplay,
		a.uld_key as uldNo,
		a.awb_dest as dest,
		a.awb_content as awbContent,
		a.rcl_pcs as rclPcs,
		a.rcl_wt as rclWt,
		to_char(a.rcl_date,'DDMONYY') as issueDate,
		TO_CHAR(a.lm_date , 'DDMMYY HH24:MI:SS')AS lastModDate,		
		a.lm_user_id as lastUserId
		from exp_rcl_hd a LEFT JOIN truck_trip b ON b.truck_no=a.truck_no
		where a.status = 'S' 
		and b.exit_ind='N'
		and NVL(b.closed,'N') = 'N'
		<isNotEmpty property="rclNo">
		and a.rcl_no=#rclNo#
		</isNotEmpty>
		<isNotEmpty property="truckNo">
			and a.truck_no=#truckNo#
		</isNotEmpty>	
			order by a.rcl_date desc 
	</select>
	
	<select id="checkValidRCLNumber" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) from exp_rcl_hd WHERE rcl_no = #dest#
	</select>
	<update id="sqlUpdateReassignRCLToCPCT"  parameterClass="cargo.cms.export.bo.ReassignRCLBO" >
		update exp_rcl_hd set truck_no = #newTruckNo#, 	LM_DATE=SYSDATE, LM_USER_ID = #userID# ,TRIP_ID=#tripId#
		where rcl_no = #rclNo# and to_char(LM_DATE, 'ddMMYY hh24:mi:ss') = #lastModDate#	
	</update>
  <select id="checkTruckIsInTerminal"   parameterClass="java.lang.String" resultClass="java.lang.Integer">
   <![CDATA[
    select count(1) from truck_trip where closed ='N' and truck_no = #dest# and EXIT_IND = 'N'
   ]]>
 </select> 
 <select id="checkTrcukTripIsClosed" parameterClass="java.lang.String" resultClass="java.lang.Integer">
       <![CDATA[
		select count(1) from truck_trip where closed ='Y' and truck_no = #dest#
	    ]]>	
	</select>
 	<select id="checkValidTruckNumber" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) from exp_rcl_hd WHERE truck_no = #dest#
	</select>	
	<select id="checkValidRCLNumberVoid" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) from exp_rcl_hd WHERE rcl_no = #dest# and void_date is null
	</select>
<!--  added by Surendra GOllapalli Iteartion 3 for ReassignRCL START -->
<!-- Added By Manorama for Enquire Return Cargo SRF:::: Starts -->
<!--  Added By Santosh Desai for Iteration 3a Maintain Security Check job order START -->
 
 <select id="getJobOrderList"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO" >
 	 	SELECT JO.JO_NO JONUMBER,
		  TO_CHAR(JO.CR_DATE,'DDMONYY HH24:MI') JOCREATEDT,
		  JO.AWB_NO AWBNO,
		  JO.CHARGE_TO chargeTo,
                  NVL(JO.BSB_IND,'N') as bsbInd,
		  SUBSTR(JO.AWB_NO,0,3) AS AWBPFX,
		  SUBSTR(JO.AWB_NO,4)   AS AWBSFX,
		  TO_CHAR(JO.AWB_DATE,'DDMONYY') AWBDATE,
		  AWB.AWB_TYPE AWBTYPE,
		  awb.catalog catalog,
		  AWB.ORIG ORIG,
		  AWB.DEST DEST,
		  AWB.CARR_CODE carrCode,
		  AWB.AGENT_NAME agentName,
		  AWB.AGENT_CODE agentCode,
		  PKG_EXP_VAL.GET_EXP_AWB_CC_CODE(AWB.AWB_NO) CC,
		  JO.JO_TYPE JOBORDERTYPE,
		  NVL(JO.PC,'') PC,
		  NVL(JO.WT,'') WT,
		  UPPER(JO.STATUS) SECJOSTATUS,
			  NVL((SELECT FLT_KEY FROM (SELECT FLT_KEY FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE
    		  UNION
    		  SELECT FLT_KEY FROM EXP_PMANIFEST_AWB PMAN  WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE)
    		  WHERE ROWNUM = 1),EFLT.FLT_KEY) FLTKEY,
			  NVL((SELECT FLT_DATE FROM (SELECT TO_CHAR(FLT_DATE,'DDMONYY') FLT_DATE FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE
      		  UNION
       		  SELECT TO_CHAR(FLT_DATE,'DDMONYY') FLT_DATE FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE)
              WHERE ROWNUM = 1),TO_CHAR(EFLT.FLT_DATE,'DDMONYY')) FLTDATE,
			  EFLT.ATD ATD,
		  NVL(PKG_COMMON.GET_FLT_ETA(EFLT.FLT_KEY,EFLT.FLT_DATE, 'D', 'DD'),PKG_COMMON.GET_FLT_STA(EFLT.FLT_KEY,EFLT.FLT_DATE, 'D', 'DD')) STD,
		 DECODE (AWB.AWB_TYPE,'E','',NVL((SELECT FLT_KEY  FROM FLT_OPR OPR  WHERE OPR.FLT_KEY = JO.FLT_KEY  AND OPR.SCH_DATE  = JO.FLT_DATE  AND OPR.FLT_TYPE  ='A'  ),'')) IMPFLTKEY,
		 DECODE (AWB.AWB_TYPE,'E','',NVL((SELECT TO_CHAR(SCH_DATE,'DDMONYY')  FROM FLT_OPR OPR  WHERE OPR.FLT_KEY = JO.FLT_KEY  AND OPR.SCH_DATE  = JO.FLT_DATE  AND OPR.FLT_TYPE  ='A'  ),'')) IMPFLTDATE,
		  IFLT.ATA ATA,
		  IFLT.ATADISP ataDisp,
      	  (CASE WHEN CARAWB.AWB_PCS &lt;&gt; CAR.MANIFEST_PCS THEN 'Y'  ELSE 'N' END ) PARTSHP,
      	  CASE
		    WHEN 'SMT' = AWB.SPL_CODE1
		    OR 'SMT'   = AWB.SPL_CODE2
		    OR 'SMT'   = AWB.SPL_CODE3
		    OR 'SMT'   = AWB.SPL_CODE4
		    OR 'SMT'   = AWB.SPL_CODE5
		    OR 'SMT'   = AWB.SPL_CODE6
		    OR 'SMT'   = AWB.SPL_CODE7
		    OR 'SMT'   = AWB.SPL_CODE8
		    OR 'SMT'   = AWB.SPL_CODE9
		    THEN 'Y'
		    ELSE 'N'
		  END SMT,
		  decode(AWB.spl_code1, null, '', AWB.spl_code1 || ',') ||
		     decode(AWB.spl_code2, null, '', AWB.spl_code2 || ',') || 
		     decode(AWB.spl_code3, null, '', AWB.spl_code3 || ',') ||
		     decode(AWB.spl_code4, null, '', AWB.spl_code4 || ',') ||
		     decode(AWB.spl_code5, null, '', AWB.spl_code5 || ',') ||
		     decode(AWB.spl_code6, null, '', AWB.spl_code6 || ',') || 
		     decode(AWB.spl_code7, null, '', AWB.spl_code7 || ',') || 
		     decode(AWB.spl_code8, null, '', AWB.spl_code8 || ',') || 
		     decode(AWB.spl_code9, null, '', AWB.spl_code9) SHC,
		  NVL(EFLT.FBL_PCS,'') FBLPCS,
		  NVL(EFLT.FBL_WT,'') FBLWT,
		  DECODE((SELECT TRIM(NVL(SUM(pmanPcs),'0')) from (SELECT pman_pcs AS pmanPcs  FROM EXP_PMANIFEST_AWB PMAN  WHERE PMAN.FLT_KEY = JO.FLT_KEY  AND PMAN.FLT_DATE  = JO.FLT_DATE  AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE
          UNION
          SELECT sum(pman.ppk_pcs+pman.bulk_pcs) FROM EXP_PMANIFEST_AWB PMAN  WHERE PMAN.FLT_KEY = JO.FLT_KEY  AND PMAN.FLT_DATE  = JO.FLT_DATE  AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE)),'0',NVL(EFLT.PMAN_PCS,''),(SELECT TRIM(NVL(SUM(pmanPcs),'0')) from (SELECT pman_pcs AS pmanPcs FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE  AND PMAN.AWB_NO = JO.AWB_NO  AND PMAN.AWB_DATE = JO.AWB_DATE
          UNION
          SELECT sum(pman.ppk_pcs+pman.bulk_pcs) FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE  AND PMAN.AWB_NO = JO.AWB_NO  AND PMAN.AWB_DATE = JO.AWB_DATE))) PMANPCS,
          DECODE((SELECT TRIM(TO_CHAR(NVL(SUM(pmanWt),0), '9999990D9'))  FROM (SELECT pman_wt as pmanWt  FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE
          UNION
          SELECT sum(pman.ppk_wt+pman.bulk_wt) as pmanWt FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE)),'0',NVL(EFLT.PMAN_WT,''),'0.0',NVL(EFLT.PMAN_WT,''),(SELECT TRIM(TO_CHAR(NVL(SUM(pmanWt),0), '9999990D9'))  FROM (SELECT PMAN_WT as pmanWt FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE
          UNION
          SELECT sum(pman.ppk_wt+pman.bulk_wt) as pmanWt FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE  AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE))) PMANWT,
			  NVL(CAR.MANIFEST_PCS,'') MANFPCS,
		  NVL(CAR.MANIFEST_WT,'') MANFWT,
		  NVL((SELECT NVL(SUM(LOCN_PCS),0) FROM AWB_INVENTORY AWBINV WHERE AWBINV.AWB_NO =AWB.AWB_NO AND AWBINV.AWB_DATE =AWB.AWB_DATE),'') INVPCS,
		  NVL((SELECT NVL(SUM(LOCN_WT),0) FROM AWB_INVENTORY AWBINV WHERE AWBINV.AWB_NO =AWB.AWB_NO AND AWBINV.AWB_DATE =AWB.AWB_DATE),'') INVWT,
		  NVL(AWB.PCS,'') TOTALAWBPCS,
		  NVL(AWB.WT,'') TOTALAWBWT,
		  '' scPassPcs,
			  '' scPassWt,
			  '' secCheck,
			  '' joResult,
			  'N' saved,
			  '' rmk,
			  '' refNo,
			  (CASE WHEN 
	        (NVL((SELECT NVL(SUM(ASSIGNED_PCS), 0) FROM EXP_PMANIFEST_ULD_AWB BLD WHERE BLD.AWB_NO = AWB.AWB_NO AND BLD.AWB_DATE = AWB.AWB_DATE), 0) 
	        + 
	        NVL((SELECT NVL((SUM(BULK_PCS) + SUM(PPK_PCS)), 0) FROM EXP_PMAN_TARMAC_AWB BLDTA WHERE BLDTA.AWB_NO = AWB.AWB_NO AND BLDTA.AWB_DATE = AWB.AWB_DATE), 0)) > 0 THEN 'Y' ELSE 'N' END ) AS shipmentBuldInd, 
			  TO_CHAR(JO.LM_DATE, 'DDMONYY HH24:MI:SS') joLMDt,
			  '' joDtlLMDt  
			FROM EXP_SEC_CHK_JO JO
			JOIN AWB AWB ON AWB.AWB_NO = JO.AWB_NO AND AWB.AWB_DATE = JO.AWB_DATE
			
			LEFT JOIN
			(
				SELECT * FROM (
		        SELECT 
		        EXP.AWB_NO, EXP.AWB_DATE, EXP.JO_NO,
		        OPR.FLT_NO, OPR.FLT_KEY, OPR.SCH_DATE FLT_DATE, OPR.CARR_CODE, OPR.FLT_TYPE,
		        DECODE(PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),NULL,NVL(PKG_COMMON.GET_FLT_ETA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),PKG_COMMON.GET_FLT_STA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD')),PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD') || '*') as ATD,
		        EXP.FBL_PCS, EXP.FBL_WT, EXP.PMAN_PCS, EXP.PMAN_WT,
		        DENSE_RANK() OVER (PARTITION BY EXP.AWB_NO, EXP.AWB_DATE ORDER BY DECODE(OPR.ACT_DATE,NULL,NVL(OPR.EST_DATE,OPR.SCH_DATE),OPR.ACT_DATE),DECODE(PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),NULL,NVL(PKG_COMMON.GET_FLT_ETA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),PKG_COMMON.GET_FLT_STA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD')),PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD')), OPR.TR_NO) RANK
			    FROM 
			      (   SELECT JO.JO_NO, JO.AWB_NO, JO.AWB_DATE, 
		            DECODE(PMAN.FLT_KEY,NULL,FBL.FLT_KEY,PMAN.FLT_KEY) FLT_KEY,
	        		DECODE(PMAN.FLT_DATE,NULL,FBL.FLT_DATE,PMAN.FLT_DATE) FLT_DATE,
		            FBL.FBL_PCS FBL_PCS, FBL.FBL_WT, PMAN.PMAN_PCS, PMAN.PMAN_WT
		            FROM EXP_SEC_CHK_JO JO
		            LEFT JOIN
				    (   SELECT AWB_NO, AWB_DATE, FLT_KEY, FLT_DATE, PMAN_PCS, PMAN_WT FROM
				        EXP_PMANIFEST_AWB
						<isNotEmpty prepend="WHERE" property="fltKey">
							FLT_KEY = #fltKey#
							<isNotEmpty prepend="AND" property="fltDate">
							FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
							</isNotEmpty>
						</isNotEmpty>
				        UNION
				        SELECT AWB_NO, AWB_DATE, FLT_KEY, FLT_DATE, BULK_PCS + PPK_PCS PMAN_PCS, BULK_WT + PPK_WT PMAN_WT FROM
				        EXP_PMAN_TARMAC_AWB
						<isNotEmpty prepend="WHERE" property="fltKey">
							FLT_KEY = #fltKey#
							<isNotEmpty prepend="AND" property="fltDate">
							FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
							</isNotEmpty>
						</isNotEmpty>
				    ) PMAN
		            ON PMAN.AWB_NO    = JO.AWB_NO
		            AND PMAN.AWB_DATE = JO.AWB_DATE
		            LEFT JOIN
			        (
			        SELECT * FROM
			          (
						 SELECT FBLSHP.AWB_NO,
						 FBLSHP.AWB_DATE,
						 FBLSHP.PCS FBL_PCS,
						 FBLSHP.NET_WT FBL_WT,
						 FBLHD.FLT_KEY,
						 FBLHD.FLT_DATE,
						 dense_rank() over (partition BY FBLSHP.awb_no, FBLSHP.awb_date ORDER BY DECODE(OPR.ACT_DATE,NULL,NVL(OPR.EST_DATE,OPR.SCH_DATE),OPR.ACT_DATE),DECODE(PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),NULL,NVL(PKG_COMMON.GET_FLT_ETA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),PKG_COMMON.GET_FLT_STA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD')),PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD')), OPR.TR_NO) rank
				         FROM edi_fbl fblhd
				         JOIN EDI_FBL_SHP FBLSHP
				         ON FBLHD.TR_NO   = FBLSHP.TR_NO
				         JOIN FLT_OPR OPR
				         ON OPR.FLT_KEY      = FBLHD.FLT_KEY
				         AND OPR.SCH_DATE    = FBLHD.FLT_DATE
				         WHERE fbl_status = 'P'
				         AND OPR.ACT_DATE IS NULL
				         AND OPR.ACT_TIME   IS NULL
						 <isNotEmpty prepend="AND" property="fltKey">
							OPR.FLT_KEY = #fltKey#
							<isNotEmpty prepend="AND" property="fltDate">
							OPR.SCH_DATE = TO_DATE(#fltDate#,'DDMONYY')
							</isNotEmpty>
						 </isNotEmpty>
			          )
			          WHERE RANK          = 1
			        ) 	FBL ON FBL.AWB_NO = JO.AWB_NO
			      		AND FBL.AWB_DATE      = JO.AWB_DATE
					WHERE JO.CR_DATE BETWEEN TO_DATE(#joCreateDtFrom#,'DDMONYY HH24MI') AND TO_DATE(#joCreateDtTo#||'59','DDMONYY HH24MISS')
					<isEqual compareValue="Y" property="printExcel" prepend="AND">
						jo.JO_NO IN (select jo from GT_TEMP_JOBORDER)
						
							
					</isEqual>
					<isNotEqual compareValue="Y" property="printExcel">
						<isNotEmpty prepend="AND" property="joNumber">
							jo.JO_NO = #joNumber#
						</isNotEmpty>
					</isNotEqual>
					<isNotEmpty prepend="AND" property="jobOrderType">
						jo.JO_TYPE = #jobOrderType#
					</isNotEmpty>
				  <isNotEmpty prepend="AND" property="joStatus">			
						<isEqual compareValue="Completed" property="joStatus">
							jo.STATUS = 'Completed'
						</isEqual>
						<isNotEqual compareValue="Completed" property="joStatus">			
							jo.STATUS !='Completed'
						</isNotEqual>				
					</isNotEmpty>
				  <isNotEmpty prepend="AND" property="awbNo">
						jo.AWB_NO = #awbNo#
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="secJoStatus">
					UPPER(jo.STATUS) = UPPER(#secJoStatus#)
					</isNotEmpty>
					<isNotEmpty property="bsbInd">			
						<isEqual compareValue="Y" property="bsbInd" prepend="AND">
							NVL(jo.BSB_IND,'N') = 'Y'
						</isEqual>
						<isEqual compareValue="N" property="bsbInd" prepend="AND">
							NVL(jo.BSB_IND,'N') = 'N'
						</isEqual>					
					</isNotEmpty>
				  ) EXP
			      LEFT JOIN FLT_OPR OPR ON OPR.FLT_KEY = EXP.FLT_KEY AND OPR.SCH_DATE = EXP.FLT_DATE AND OPR.FLT_TYPE = 'D' 
			      WHERE OPR.ACT_DATE IS NULL AND OPR.ACT_TIME IS NULL
				  <isNotEmpty prepend="AND" property="fltKey">
					OPR.FLT_KEY = #fltKey#
					<isNotEmpty prepend="AND" property="fltDate">
					OPR.SCH_DATE = TO_DATE(#fltDate#,'DDMONYY')
					</isNotEmpty>
				 </isNotEmpty>
					) 
			) EFLT ON EFLT.JO_NO = JO.JO_NO AND EFLT.AWB_NO = JO.AWB_NO AND EFLT.AWB_DATE = JO.AWB_DATE
			AND ((((SELECT COUNT(1) FROM FLT_OPR OPR WHERE OPR.FLT_KEY = JO.FLT_KEY AND OPR.SCH_DATE = JO.FLT_DATE AND OPR.FLT_TYPE='D') = 0) AND RANK = 1)
    		OR (((SELECT COUNT(1) FROM FLT_OPR OPR WHERE OPR.FLT_KEY = JO.FLT_KEY AND OPR.SCH_DATE = JO.FLT_DATE AND OPR.FLT_TYPE='D') != 0) AND RANK = 1))
			LEFT JOIN
			(
				SELECT * FROM (
		        SELECT 
		        IMP.AWB_NO, IMP.AWB_DATE, IMP.JO_NO,
		        OPR.FLT_NO, IMP.FLT_KEY, IMP.FLT_DATE FLT_DATE, OPR.CARR_CODE, OPR.FLT_TYPE,
		        DECODE(PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD'),NULL,NVL(PKG_COMMON.GET_FLT_ETA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD'),PKG_COMMON.GET_FLT_STA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD')),PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD') || '*') as ATA,
		        PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD') ATADISP,
				IRANK,
		        DENSE_RANK() OVER (PARTITION BY IMP.AWB_NO, IMP.AWB_DATE ORDER BY DECODE(OPR.ACT_DATE,NULL,NVL(OPR.EST_DATE,OPR.SCH_DATE),OPR.ACT_DATE),DECODE(PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD'),NULL,NVL(PKG_COMMON.GET_FLT_ETA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD'),PKG_COMMON.GET_FLT_STA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD')),PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD'))) RANK
			    FROM 
			    (   SELECT JO.JO_NO, JO.AWB_NO, JO.AWB_DATE, 
		            DECODE(DECODE(JO.FLT_KEY,'XA999',NULL,'XB999',NULL,JO.FLT_KEY),NULL,ATC.FLT_KEY,JO.FLT_KEY) FLT_KEY,
		            DECODE(DECODE(JO.FLT_KEY,'XA999',NULL,'XB999',NULL,JO.FLT_DATE),NULL,ATC.FLT_DATE,JO.FLT_DATE) FLT_DATE,
		            DENSE_RANK() OVER (PARTITION BY JO.AWB_NO, JO.AWB_DATE ORDER BY DECODE(DECODE(JO.FLT_KEY,'XA999',NULL,'XB999',NULL,JO.FLT_DATE),NULL,ATC.FLT_DATE,JO.FLT_DATE), ATC.RCL_NO) IRANK        
		            FROM EXP_SEC_CHK_JO JO
		            LEFT JOIN CDT_INB_FLT_DTLS ATC ON ATC.AWB_NO = JO.AWB_NO AND ATC.AWB_DATE = JO.AWB_DATE  AND ATC.RCL_NO NOT IN 
					(	SELECT RCL_NO FROM EXP_RCL_HD A WHERE A.RCL_NO = ATC.RCL_NO AND  A.STATUS = 'V'
						UNION ALL
						SELECT TRF_NO FROM TRF_ACCEPT_HD A WHERE A.TRF_NO = ATC.RCL_NO AND  A.STATUS = 'V')
					WHERE JO.CR_DATE BETWEEN TO_DATE(#joCreateDtFrom#,'DDMONYY HH24MI') AND TO_DATE(#joCreateDtTo#||'59','DDMONYY HH24MISS')
					<isEqual compareValue="Y" property="printExcel" prepend="AND" >
						jo.JO_NO IN (select jo from GT_TEMP_JOBORDER)
						
					</isEqual>
					
					<isNotEqual compareValue="Y" property="printExcel">
						<isNotEmpty prepend="AND" property="joNumber">
							jo.JO_NO = #joNumber#
						</isNotEmpty>
					</isNotEqual>
					<isNotEmpty prepend="AND" property="jobOrderType">
						jo.JO_TYPE = #jobOrderType#
					</isNotEmpty>
				  <isNotEmpty prepend="AND" property="joStatus">			
						<isEqual compareValue="Completed" property="joStatus">
							jo.STATUS = 'Completed'
						</isEqual>
						<isNotEqual compareValue="Completed" property="joStatus">			
							jo.STATUS !='Completed'
						</isNotEqual>				
					</isNotEmpty>
				  <isNotEmpty prepend="AND" property="awbNo">
						jo.AWB_NO = #awbNo#
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="secJoStatus">
					UPPER(jo.STATUS) = UPPER(#secJoStatus#)
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="impFltKey">
							DECODE(DECODE(JO.FLT_KEY,'XA999',NULL,'XB999',NULL,JO.FLT_KEY),NULL,ATC.FLT_KEY,JO.FLT_KEY) = #impFltKey#
							<isNotEmpty prepend="AND" property="impFltDate">
							DECODE(DECODE(JO.FLT_KEY,'XA999',NULL,'XB999',NULL,JO.FLT_DATE),NULL,ATC.FLT_DATE,JO.FLT_DATE) = TO_DATE(#impFltDate#,'DDMONYY')
							</isNotEmpty>
					</isNotEmpty>
				) IMP
			    LEFT JOIN FLT_OPR OPR ON OPR.FLT_KEY = IMP.FLT_KEY AND OPR.SCH_DATE = IMP.FLT_DATE AND OPR.FLT_TYPE = 'A' )
			    WHERE IRANK = 1
			) IFLT ON IFLT.JO_NO = JO.JO_NO AND IFLT.AWB_NO = JO.AWB_NO AND IFLT.AWB_DATE = JO.AWB_DATE
			LEFT JOIN IMP_CAR_SHP CAR ON CAR.AWB_NO = JO.AWB_NO AND CAR.AWB_DATE = JO.AWB_DATE AND CAR.FLT_KEY = IFLT.FLT_KEY AND CAR.FLT_DATE = IFLT.FLT_DATE
			LEFT JOIN IMP_CAR_AWB CARAWB ON CARAWB.AWB_NO = CAR.AWB_NO AND  CARAWB.AWB_DATE = CAR.AWB_DATE
			WHERE JO.CR_DATE BETWEEN TO_DATE(#joCreateDtFrom#,'DDMONYY HH24MI') AND TO_DATE(#joCreateDtTo#||'59','DDMONYY HH24MISS')
			<isEqual prepend="AND" compareValue="I" property="fltType">
				awb.awb_type &lt;&gt; 'E'
			</isEqual>
			<isEqual prepend="AND" compareValue="E" property="fltType">
				awb.awb_type &lt;&gt; 'I'
			</isEqual>
			<isEqual compareValue="Y" property="printExcel" prepend="AND" >
				jo.JO_NO IN (select jo from GT_TEMP_JOBORDER)
			</isEqual>
					
			<isNotEqual compareValue="Y" property="printExcel">
				<isNotEmpty prepend="AND" property="joNumber">
					jo.JO_NO = #joNumber#
				</isNotEmpty>
			</isNotEqual>
			
			<isEqual compareValue="E" property="fltType">
			<isNotEmpty property="bsbInd">			
				<isEqual compareValue="Y" property="bsbInd" prepend="AND">
					NVL(jo.BSB_IND,'N') = 'Y'
				</isEqual>
				<isEqual compareValue="N" property="bsbInd" prepend="AND">
					NVL(jo.BSB_IND,'N') = 'N'
				</isEqual>				
			</isNotEmpty>
			</isEqual>
			
			  <isNotEmpty prepend="AND" property="jobOrderType">
					jo.JO_TYPE = #jobOrderType#
				</isNotEmpty>
			  <isNotEmpty prepend="AND" property="joStatus">			
					<isEqual compareValue="Completed" property="joStatus">
						jo.STATUS = 'Completed'
					</isEqual>
					<isNotEqual compareValue="Completed" property="joStatus">			
						jo.STATUS !='Completed'
					</isNotEqual>				
				</isNotEmpty>
			  <isNotEmpty prepend="AND" property="awbNo">
					jo.AWB_NO = #awbNo#
				</isNotEmpty>
			 <isNotEmpty prepend="AND" property="fltKey">
					EFLT.FLT_KEY = #fltKey#
					<isNotEmpty prepend="AND" property="fltDate">
					EFLT.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
					</isNotEmpty>
			 </isNotEmpty>
			 <isNotEmpty prepend="AND" property="impFltKey">
					IFLT.FLT_KEY = #impFltKey#
					<isNotEmpty prepend="AND" property="impFltDate">
					IFLT.FLT_DATE = TO_DATE(#impFltDate#,'DDMONYY')
			 </isNotEmpty>
			 </isNotEmpty>
			 <isNotEmpty prepend="AND" property="secJoStatus">
					UPPER(jo.STATUS) = UPPER(#secJoStatus#)
			 </isNotEmpty>
			 <isNotEmpty prepend="AND" property="catalog">
					awb.catalog = #catalog#
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="uldKey">
					exists (SELECT NULL FROM AWB_INVENTORY INV WHERE INV.AWB_NO = JO.AWB_NO AND INV.AWB_DATE = JO.AWB_DATE AND (INV.ULD_KEY = #uldKey# OR INV.LSP_NO = #uldKey#))
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="locn">
					exists (SELECT NULL FROM AWB_INVENTORY INV WHERE INV.AWB_NO = JO.AWB_NO AND INV.AWB_DATE = JO.AWB_DATE AND INV.LOC_CODE = #locn# AND INV.ULD_KEY IS NULL AND INV.LSP_NO IS NULL)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="shc1">
					(
					#shc1# in (AWB.SPL_CODE1,AWB.SPL_CODE2,AWB.SPL_CODE3,AWB.SPL_CODE4,AWB.SPL_CODE5,AWB.SPL_CODE6,AWB.SPL_CODE7,AWB.SPL_CODE8,AWB.SPL_CODE9)
					<isNotEmpty prepend="OR" property="shc2">
					#shc2# in (AWB.SPL_CODE1,AWB.SPL_CODE2,AWB.SPL_CODE3,AWB.SPL_CODE4,AWB.SPL_CODE5,AWB.SPL_CODE6,AWB.SPL_CODE7,AWB.SPL_CODE8,AWB.SPL_CODE9)
					</isNotEmpty>
					<isNotEmpty prepend="OR" property="shc3">
						#shc3# in (AWB.SPL_CODE1,AWB.SPL_CODE2,AWB.SPL_CODE3,AWB.SPL_CODE4,AWB.SPL_CODE5,AWB.SPL_CODE6,AWB.SPL_CODE7,AWB.SPL_CODE8,AWB.SPL_CODE9)
					</isNotEmpty>	
					)
				</isNotEmpty>
				
				<isNotEmpty prepend="AND" property="dest1">
				(
				awb.dest in (
				#dest1#
				<isNotEmpty property="dest2">
				,#dest2#
				</isNotEmpty>
				<isNotEmpty property="dest3">
				,#dest3#
				</isNotEmpty>
				)
				)
				</isNotEmpty>
			 <isNotEmpty prepend="AND"  property="loginCarrier">
					   ( awb.CARR_CODE = #loginCarrier#   OR  awb.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP  WHERE GRP_CARR_CODE = #loginCarrier#))             
	         </isNotEmpty>
	         <isEqual compareValue="I" property="fltType">
				order by IFLT.FLT_DATE, IFLT.ATA, JO.JO_NO
			</isEqual>
			<isEqual compareValue="E" property="fltType">
				order by EFLT.FLT_DATE, EFLT.ATD, JO.JO_NO
			</isEqual>
 </select>
 
 
 <select id="getJobOrderDetailList"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO" >
	 	 	SELECT JO.JO_NO JONUMBER,
			  TO_CHAR(JO.CR_DATE,'DDMONYY HH24:MI') JOCREATEDT,
			  JO.AWB_NO AWBNO,
			  JO.CHARGE_TO chargeTo,
			  NVL(JO.BSB_IND,'N') as bsbInd,
			  SUBSTR(JO.AWB_NO,0,3) AS AWBPFX,
			  SUBSTR(JO.AWB_NO,4)   AS AWBSFX,
			  TO_CHAR(JO.AWB_DATE,'DDMONYY') AWBDATE,
			  AWB.AWB_TYPE AWBTYPE,
			  awb.catalog catalog,
			  AWB.ORIG ORIG,
			  AWB.DEST DEST,
			  AWB.CARR_CODE carrCode,
			  AWB.AGENT_NAME agentName,
			  AWB.AGENT_CODE agentCode,
			  PKG_EXP_VAL.GET_EXP_AWB_CC_CODE(AWB.AWB_NO) CC,
			  JO.JO_TYPE JOBORDERTYPE,
			  NVL(JO.PC,'') PC,
			  NVL(JO.WT,'') WT,
			  UPPER(JO.STATUS) SECJOSTATUS,
			  NVL((SELECT FLT_KEY FROM (SELECT FLT_KEY FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE
    		  UNION
    		  SELECT FLT_KEY FROM EXP_PMANIFEST_AWB PMAN  WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE)
    		  WHERE ROWNUM = 1),EFLT.FLT_KEY) FLTKEY,
			  NVL((SELECT FLT_DATE FROM (SELECT TO_CHAR(FLT_DATE,'DDMONYY') FLT_DATE FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE
      		  UNION
       		  SELECT TO_CHAR(FLT_DATE,'DDMONYY') FLT_DATE FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE)
              WHERE ROWNUM = 1),TO_CHAR(EFLT.FLT_DATE,'DDMONYY')) FLTDATE,
			  EFLT.ATD ATD,
			  NVL(PKG_COMMON.GET_FLT_ETA(EFLT.FLT_KEY,EFLT.FLT_DATE, 'D', 'DD'),PKG_COMMON.GET_FLT_STA(EFLT.FLT_KEY,EFLT.FLT_DATE, 'D', 'DD')) STD,
			  DECODE (AWB.AWB_TYPE,'E','',NVL((SELECT FLT_KEY  FROM FLT_OPR OPR  WHERE OPR.FLT_KEY = JO.FLT_KEY  AND OPR.SCH_DATE  = JO.FLT_DATE  AND OPR.FLT_TYPE  ='A'  ),'')) IMPFLTKEY,
			 DECODE (AWB.AWB_TYPE,'E','',NVL((SELECT TO_CHAR(SCH_DATE,'DDMONYY')  FROM FLT_OPR OPR  WHERE OPR.FLT_KEY = JO.FLT_KEY  AND OPR.SCH_DATE  = JO.FLT_DATE  AND OPR.FLT_TYPE  ='A'  ),'')) IMPFLTDATE,
		      IFLT.ATA ATA,
			  IFLT.ATADISP ataDisp,
	      	  (CASE WHEN CARAWB.AWB_PCS &lt;&gt; CAR.MANIFEST_PCS THEN 'Y'  ELSE 'N' END ) PARTSHP,
	      	  CASE
			    WHEN 'SMT' = AWB.SPL_CODE1
			    OR 'SMT'   = AWB.SPL_CODE2
			    OR 'SMT'   = AWB.SPL_CODE3
			    OR 'SMT'   = AWB.SPL_CODE4
			    OR 'SMT'   = AWB.SPL_CODE5
			    OR 'SMT'   = AWB.SPL_CODE6
			    OR 'SMT'   = AWB.SPL_CODE7
			    OR 'SMT'   = AWB.SPL_CODE8
			    OR 'SMT'   = AWB.SPL_CODE9
			    THEN 'Y'
			    ELSE 'N'
			  END SMT,
			  decode(AWB.spl_code1, null, '', AWB.spl_code1 || ',') ||
		     decode(AWB.spl_code2, null, '', AWB.spl_code2 || ',') || 
		     decode(AWB.spl_code3, null, '', AWB.spl_code3 || ',') ||
		     decode(AWB.spl_code4, null, '', AWB.spl_code4 || ',') ||
		     decode(AWB.spl_code5, null, '', AWB.spl_code5 || ',') ||
		     decode(AWB.spl_code6, null, '', AWB.spl_code6 || ',') || 
		     decode(AWB.spl_code7, null, '', AWB.spl_code7 || ',') || 
		     decode(AWB.spl_code8, null, '', AWB.spl_code8 || ',') || 
		     decode(AWB.spl_code9, null, '', AWB.spl_code9) SHC,
			  NVL(EFLT.FBL_PCS,'') FBLPCS,
			  NVL(EFLT.FBL_WT,'') FBLWT,
			  DECODE((SELECT TRIM(NVL(SUM(pmanPcs),'0')) from (SELECT pman_pcs AS pmanPcs  FROM EXP_PMANIFEST_AWB PMAN  WHERE PMAN.FLT_KEY = JO.FLT_KEY  AND PMAN.FLT_DATE  = JO.FLT_DATE  AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE
          UNION
          SELECT sum(pman.ppk_pcs+pman.bulk_pcs) FROM EXP_PMANIFEST_AWB PMAN  WHERE PMAN.FLT_KEY = JO.FLT_KEY  AND PMAN.FLT_DATE  = JO.FLT_DATE  AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE)),'0',NVL(EFLT.PMAN_PCS,''),(SELECT TRIM(NVL(SUM(pmanPcs),'0')) from (SELECT pman_pcs AS pmanPcs FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE  AND PMAN.AWB_NO = JO.AWB_NO  AND PMAN.AWB_DATE = JO.AWB_DATE
          UNION
          SELECT sum(pman.ppk_pcs+pman.bulk_pcs) FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE  AND PMAN.AWB_NO = JO.AWB_NO  AND PMAN.AWB_DATE = JO.AWB_DATE))) PMANPCS,
          DECODE((SELECT TRIM(TO_CHAR(NVL(SUM(pmanWt),0), '9999990D9'))  FROM (SELECT pman_wt as pmanWt  FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE
          UNION
          SELECT sum(pman.ppk_wt+pman.bulk_wt) as pmanWt FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE)),'0',NVL(EFLT.PMAN_WT,''),'0.0',NVL(EFLT.PMAN_WT,''),(SELECT TRIM(TO_CHAR(NVL(SUM(pmanWt),0), '9999990D9'))  FROM (SELECT PMAN_WT as pmanWt FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE
          UNION
          SELECT sum(pman.ppk_wt+pman.bulk_wt) as pmanWt FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY = JO.FLT_KEY AND PMAN.FLT_DATE  = JO.FLT_DATE  AND PMAN.AWB_NO = JO.AWB_NO AND PMAN.AWB_DATE = JO.AWB_DATE))) PMANWT,
			  NVL(CAR.MANIFEST_PCS,'') MANFPCS,
			  NVL(CAR.MANIFEST_WT,'') MANFWT,
			  NVL((SELECT NVL(SUM(LOCN_PCS),0) FROM AWB_INVENTORY AWBINV WHERE AWBINV.AWB_NO =AWB.AWB_NO AND AWBINV.AWB_DATE =AWB.AWB_DATE),'') INVPCS,
			  NVL((SELECT NVL(SUM(LOCN_WT),0) FROM AWB_INVENTORY AWBINV WHERE AWBINV.AWB_NO =AWB.AWB_NO AND AWBINV.AWB_DATE =AWB.AWB_DATE),'') INVWT,
			  NVL(AWB.PCS,'') TOTALAWBPCS,
			  NVL(AWB.WT,'') TOTALAWBWT,
			  NVL(JODTL.PC,'') scPassPcs,
			  NVL(JODTL.WT,'') scPassWt,
			  NVL((SELECT CODE FROM MAST_CODE_DTL WHERE CODE_TYPE = 'SC_METHOD' AND UPPER(CODE_DESC) = UPPER(JODTL.SEC_CHK) AND ROWNUM = 1),JODTL.SEC_CHK) secCheck,
			  JODTL.RESULT joResult,
			  DECODE(UPPER(JODTL.RESULT),'PASS','Y','N') saved,
			  JODTL.SC_RMK rmk,
			  JODTL.REF_NO refNo,
			  JODTL.DOC_LINE_NO docLineNo,
			  JODTL.SO_NO soNo,
			  (CASE WHEN 
	        (NVL((SELECT NVL(SUM(ASSIGNED_PCS), 0) FROM EXP_PMANIFEST_ULD_AWB BLD WHERE BLD.AWB_NO = AWB.AWB_NO AND BLD.AWB_DATE = AWB.AWB_DATE), 0) 
	        + 
	        NVL((SELECT NVL((SUM(BULK_PCS) + SUM(PPK_PCS)), 0) FROM EXP_PMAN_TARMAC_AWB BLDTA WHERE BLDTA.AWB_NO = AWB.AWB_NO AND BLDTA.AWB_DATE = AWB.AWB_DATE), 0)) > 0 THEN 'Y' ELSE 'N' END ) AS shipmentBuldInd, 
			  TO_CHAR(JO.LM_DATE, 'DDMONYY HH24:MI:SS') joLMDt,
			  TO_CHAR(JODTL.LM_DATE, 'DDMONYY HH24:MI:SS') joDtlLMDt  
			FROM EXP_SEC_CHK_JO JO
			JOIN AWB AWB ON AWB.AWB_NO = JO.AWB_NO AND AWB.AWB_DATE = JO.AWB_DATE
			LEFT JOIN EXP_SEC_CHK_JO_DTL JODTL ON JO.JO_NO = JODTL.JO_NO
			LEFT JOIN
			(
				SELECT * FROM (
		        SELECT 
		        EXP.AWB_NO, EXP.AWB_DATE, EXP.JO_NO,
		        OPR.FLT_NO, OPR.FLT_KEY, OPR.SCH_DATE FLT_DATE, OPR.CARR_CODE, OPR.FLT_TYPE,
		        DECODE(PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),NULL,NVL(PKG_COMMON.GET_FLT_ETA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),PKG_COMMON.GET_FLT_STA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD')),PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD') || '*') as ATD,
		        EXP.FBL_PCS, EXP.FBL_WT, EXP.PMAN_PCS, EXP.PMAN_WT,
		        DENSE_RANK() OVER (PARTITION BY EXP.AWB_NO, EXP.AWB_DATE ORDER BY DECODE(OPR.ACT_DATE,NULL,NVL(OPR.EST_DATE,OPR.SCH_DATE),OPR.ACT_DATE),DECODE(PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),NULL,NVL(PKG_COMMON.GET_FLT_ETA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),PKG_COMMON.GET_FLT_STA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD')),PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD')), OPR.TR_NO) RANK
			    FROM 
			      (   SELECT JO.JO_NO, JO.AWB_NO, JO.AWB_DATE, 
		            DECODE(PMAN.FLT_KEY,NULL,FBL.FLT_KEY,PMAN.FLT_KEY) FLT_KEY,
	        		DECODE(PMAN.FLT_DATE,NULL,FBL.FLT_DATE,PMAN.FLT_DATE) FLT_DATE,
		            FBL.FBL_PCS FBL_PCS, FBL.FBL_WT, PMAN.PMAN_PCS, PMAN.PMAN_WT
		            FROM EXP_SEC_CHK_JO JO
		            LEFT JOIN
				    (   SELECT AWB_NO, AWB_DATE, FLT_KEY, FLT_DATE, PMAN_PCS, PMAN_WT FROM
				        EXP_PMANIFEST_AWB
						<isNotEmpty prepend="WHERE" property="fltKey">
							FLT_KEY = #fltKey#
							<isNotEmpty prepend="AND" property="fltDate">
							FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
							</isNotEmpty>
						</isNotEmpty>
				        UNION
				        SELECT AWB_NO, AWB_DATE, FLT_KEY, FLT_DATE, BULK_PCS + PPK_PCS PMAN_PCS, BULK_WT + PPK_WT PMAN_WT FROM
				        EXP_PMAN_TARMAC_AWB
						<isNotEmpty prepend="WHERE" property="fltKey">
							FLT_KEY = #fltKey#
							<isNotEmpty prepend="AND" property="fltDate">
							FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
							</isNotEmpty>
						</isNotEmpty>
				    ) PMAN
		            ON PMAN.AWB_NO    = JO.AWB_NO
		            AND PMAN.AWB_DATE = JO.AWB_DATE
		            LEFT JOIN
			        (
			        SELECT * FROM
			          (
						 SELECT FBLSHP.AWB_NO,
						 FBLSHP.AWB_DATE,
						 FBLSHP.PCS FBL_PCS,
						 FBLSHP.NET_WT FBL_WT,
						 FBLHD.FLT_KEY,
						 FBLHD.FLT_DATE,
						 dense_rank() over (partition BY FBLSHP.awb_no, FBLSHP.awb_date ORDER BY DECODE(OPR.ACT_DATE,NULL,NVL(OPR.EST_DATE,OPR.SCH_DATE),OPR.ACT_DATE),DECODE(PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),NULL,NVL(PKG_COMMON.GET_FLT_ETA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD'),PKG_COMMON.GET_FLT_STA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD')),PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'D', 'DD')), OPR.TR_NO) rank
				         FROM edi_fbl fblhd
				         JOIN EDI_FBL_SHP FBLSHP
				         ON FBLHD.TR_NO   = FBLSHP.TR_NO
				         JOIN FLT_OPR OPR
				         ON OPR.FLT_KEY      = FBLHD.FLT_KEY
				         AND OPR.SCH_DATE    = FBLHD.FLT_DATE
				         WHERE fbl_status = 'P'
				         AND OPR.ACT_DATE IS NULL
				         AND OPR.ACT_TIME   IS NULL
						 <isNotEmpty prepend="AND" property="fltKey">
							OPR.FLT_KEY = #fltKey#
							<isNotEmpty prepend="AND" property="fltDate">
							OPR.SCH_DATE = TO_DATE(#fltDate#,'DDMONYY')
							</isNotEmpty>
						 </isNotEmpty>
			          )
			          WHERE RANK          = 1
			        ) 	FBL ON FBL.AWB_NO = JO.AWB_NO
			      		AND FBL.AWB_DATE      = JO.AWB_DATE
					WHERE JO.CR_DATE BETWEEN TO_DATE(#joCreateDtFrom#,'DDMONYY HH24MI') AND TO_DATE(#joCreateDtTo#||'59','DDMONYY HH24MISS')
					<isEqual compareValue="Y" property="printExcel" prepend="AND">
						jo.JO_NO IN (select jo from GT_TEMP_JOBORDER)
						
							
					</isEqual>
					<isNotEqual compareValue="Y" property="printExcel">
						<isNotEmpty prepend="AND" property="joNumber">
							jo.JO_NO = #joNumber#
						</isNotEmpty>
					</isNotEqual>
					<isNotEmpty prepend="AND" property="jobOrderType">
						jo.JO_TYPE = #jobOrderType#
					</isNotEmpty>
				  <isNotEmpty prepend="AND" property="joStatus">			
						<isEqual compareValue="Completed" property="joStatus">
							jo.STATUS = 'Completed'
						</isEqual>
						<isNotEqual compareValue="Completed" property="joStatus">			
							jo.STATUS !='Completed'
						</isNotEqual>				
					</isNotEmpty>
				  <isNotEmpty prepend="AND" property="awbNo">
						jo.AWB_NO = #awbNo#
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="secJoStatus">
					UPPER(jo.STATUS) = UPPER(#secJoStatus#)
					</isNotEmpty>
					<isNotEmpty property="bsbInd">			
						<isEqual compareValue="Y" property="bsbInd" prepend="AND">
							NVL(jo.BSB_IND,'N') = 'Y'
						</isEqual>
						<isEqual compareValue="N" property="bsbInd" prepend="AND">
							NVL(jo.BSB_IND,'N') = 'N'
						</isEqual>					
					</isNotEmpty>
				  ) EXP
			      LEFT JOIN FLT_OPR OPR ON OPR.FLT_KEY = EXP.FLT_KEY AND OPR.SCH_DATE = EXP.FLT_DATE AND OPR.FLT_TYPE = 'D' 
			      WHERE OPR.ACT_DATE IS NULL AND OPR.ACT_TIME IS NULL
				  <isNotEmpty prepend="AND" property="fltKey">
					OPR.FLT_KEY = #fltKey#
					<isNotEmpty prepend="AND" property="fltDate">
					OPR.SCH_DATE = TO_DATE(#fltDate#,'DDMONYY')
					</isNotEmpty>
				 </isNotEmpty>
					) 
			) EFLT ON EFLT.JO_NO = JO.JO_NO AND EFLT.AWB_NO = JO.AWB_NO AND EFLT.AWB_DATE = JO.AWB_DATE
			AND ((((SELECT COUNT(1) FROM FLT_OPR OPR WHERE OPR.FLT_KEY = JO.FLT_KEY AND OPR.SCH_DATE = JO.FLT_DATE AND OPR.FLT_TYPE='D') = 0) AND RANK = 1)
    		OR (((SELECT COUNT(1) FROM FLT_OPR OPR WHERE OPR.FLT_KEY = JO.FLT_KEY AND OPR.SCH_DATE = JO.FLT_DATE AND OPR.FLT_TYPE='D') != 0) AND RANK = 1))
			LEFT JOIN
			(
				SELECT * FROM (
		        SELECT 
		        IMP.AWB_NO, IMP.AWB_DATE, IMP.JO_NO,
		        OPR.FLT_NO, IMP.FLT_KEY, IMP.FLT_DATE FLT_DATE, OPR.CARR_CODE, OPR.FLT_TYPE,
		        DECODE(PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD'),NULL,NVL(PKG_COMMON.GET_FLT_ETA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD'),PKG_COMMON.GET_FLT_STA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD')),PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD') || '*') as ATA,
		        PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD') ATADISP,
				IRANK,
		        DENSE_RANK() OVER (PARTITION BY IMP.AWB_NO, IMP.AWB_DATE ORDER BY DECODE(OPR.ACT_DATE,NULL,NVL(OPR.EST_DATE,OPR.SCH_DATE),OPR.ACT_DATE),DECODE(PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD'),NULL,NVL(PKG_COMMON.GET_FLT_ETA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD'),PKG_COMMON.GET_FLT_STA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD')),PKG_COMMON.GET_FLT_ATA(OPR.FLT_KEY,OPR.SCH_DATE, 'A', 'DD'))) RANK
			    FROM 
			    (   SELECT JO.JO_NO, JO.AWB_NO, JO.AWB_DATE, 
		            DECODE(DECODE(JO.FLT_KEY,'XA999',NULL,'XB999',NULL,JO.FLT_KEY),NULL,ATC.FLT_KEY,JO.FLT_KEY) FLT_KEY,
		            DECODE(DECODE(JO.FLT_KEY,'XA999',NULL,'XB999',NULL,JO.FLT_DATE),NULL,ATC.FLT_DATE,JO.FLT_DATE) FLT_DATE,
		            DENSE_RANK() OVER (PARTITION BY JO.AWB_NO, JO.AWB_DATE ORDER BY DECODE(DECODE(JO.FLT_KEY,'XA999',NULL,'XB999',NULL,JO.FLT_DATE),NULL,ATC.FLT_DATE,JO.FLT_DATE), ATC.RCL_NO) IRANK        
		            FROM EXP_SEC_CHK_JO JO
		            LEFT JOIN CDT_INB_FLT_DTLS ATC ON ATC.AWB_NO = JO.AWB_NO AND ATC.AWB_DATE = JO.AWB_DATE  AND ATC.RCL_NO NOT IN 
					(	SELECT RCL_NO FROM EXP_RCL_HD A WHERE A.RCL_NO = ATC.RCL_NO AND  A.STATUS = 'V'
						UNION ALL
						SELECT TRF_NO FROM TRF_ACCEPT_HD A WHERE A.TRF_NO = ATC.RCL_NO AND  A.STATUS = 'V')
					WHERE JO.CR_DATE BETWEEN TO_DATE(#joCreateDtFrom#,'DDMONYY HH24MI') AND TO_DATE(#joCreateDtTo#||'59','DDMONYY HH24MISS')
					<isEqual compareValue="Y" property="printExcel" prepend="AND" >
						jo.JO_NO IN (select jo from GT_TEMP_JOBORDER)
						
					</isEqual>
					
					<isNotEqual compareValue="Y" property="printExcel">
						<isNotEmpty prepend="AND" property="joNumber">
							jo.JO_NO = #joNumber#
						</isNotEmpty>
					</isNotEqual>
					<isNotEmpty prepend="AND" property="jobOrderType">
						jo.JO_TYPE = #jobOrderType#
					</isNotEmpty>
				  <isNotEmpty prepend="AND" property="joStatus">			
						<isEqual compareValue="Completed" property="joStatus">
							jo.STATUS = 'Completed'
						</isEqual>
						<isNotEqual compareValue="Completed" property="joStatus">			
							jo.STATUS !='Completed'
						</isNotEqual>				
					</isNotEmpty>
				  <isNotEmpty prepend="AND" property="awbNo">
						jo.AWB_NO = #awbNo#
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="secJoStatus">
					UPPER(jo.STATUS) = UPPER(#secJoStatus#)
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="impFltKey">
							DECODE(DECODE(JO.FLT_KEY,'XA999',NULL,'XB999',NULL,JO.FLT_KEY),NULL,ATC.FLT_KEY,JO.FLT_KEY) = #impFltKey#
							<isNotEmpty prepend="AND" property="impFltDate">
							DECODE(DECODE(JO.FLT_KEY,'XA999',NULL,'XB999',NULL,JO.FLT_DATE),NULL,ATC.FLT_DATE,JO.FLT_DATE) = TO_DATE(#impFltDate#,'DDMONYY')
							</isNotEmpty>
					</isNotEmpty>
				) IMP
			    LEFT JOIN FLT_OPR OPR ON OPR.FLT_KEY = IMP.FLT_KEY AND OPR.SCH_DATE = IMP.FLT_DATE AND OPR.FLT_TYPE = 'A' )
			    WHERE IRANK = 1
			) IFLT ON IFLT.JO_NO = JO.JO_NO AND IFLT.AWB_NO = JO.AWB_NO AND IFLT.AWB_DATE = JO.AWB_DATE
			LEFT JOIN IMP_CAR_SHP CAR ON CAR.AWB_NO = JO.AWB_NO AND CAR.AWB_DATE = JO.AWB_DATE AND CAR.FLT_KEY = IFLT.FLT_KEY AND CAR.FLT_DATE = IFLT.FLT_DATE
			LEFT JOIN IMP_CAR_AWB CARAWB ON CARAWB.AWB_NO = CAR.AWB_NO AND  CARAWB.AWB_DATE = CAR.AWB_DATE
			WHERE JO.CR_DATE BETWEEN TO_DATE(#joCreateDtFrom#,'DDMONYY HH24MI') AND TO_DATE(#joCreateDtTo#||'59','DDMONYY HH24MISS')
			<isEqual prepend="AND" compareValue="I" property="fltType">
				awb.awb_type &lt;&gt; 'E'
			</isEqual>
			<isEqual prepend="AND" compareValue="E" property="fltType">
				awb.awb_type &lt;&gt; 'I'
			</isEqual>
			<isEqual compareValue="Y" property="printExcel" prepend="AND" >
				jo.JO_NO IN (select jo from GT_TEMP_JOBORDER)
			</isEqual>
					
			<isNotEqual compareValue="Y" property="printExcel">
				<isNotEmpty prepend="AND" property="joNumber">
					jo.JO_NO = #joNumber#
				</isNotEmpty>
			</isNotEqual>
			
			<isEqual compareValue="E" property="fltType">
			<isNotEmpty property="bsbInd">			
				<isEqual compareValue="Y" property="bsbInd" prepend="AND">
					NVL(jo.BSB_IND,'N') = 'Y'
				</isEqual>
				<isEqual compareValue="N" property="bsbInd" prepend="AND">
					NVL(jo.BSB_IND,'N') = 'N'
				</isEqual>				
			</isNotEmpty>
			</isEqual>
			
			  <isNotEmpty prepend="AND" property="jobOrderType">
					jo.JO_TYPE = #jobOrderType#
				</isNotEmpty>
			  <isNotEmpty prepend="AND" property="joStatus">			
					<isEqual compareValue="Completed" property="joStatus">
						jo.STATUS = 'Completed'
					</isEqual>
					<isNotEqual compareValue="Completed" property="joStatus">			
						jo.STATUS !='Completed'
					</isNotEqual>				
				</isNotEmpty>
			  <isNotEmpty prepend="AND" property="awbNo">
					jo.AWB_NO = #awbNo#
				</isNotEmpty>
			 <isNotEmpty prepend="AND" property="fltKey">
					EFLT.FLT_KEY = #fltKey#
					<isNotEmpty prepend="AND" property="fltDate">
					EFLT.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
					</isNotEmpty>
			 </isNotEmpty>
			 <isNotEmpty prepend="AND" property="impFltKey">
					IFLT.FLT_KEY = #impFltKey#
					<isNotEmpty prepend="AND" property="impFltDate">
					IFLT.FLT_DATE = TO_DATE(#impFltDate#,'DDMONYY')
			 </isNotEmpty>
			 </isNotEmpty>
			 <isNotEmpty prepend="AND" property="secJoStatus">
					UPPER(jo.STATUS) = UPPER(#secJoStatus#)
			 </isNotEmpty>
			 <isNotEmpty prepend="AND" property="catalog">
					awb.catalog = #catalog#
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="uldKey">
					exists (SELECT NULL FROM AWB_INVENTORY INV WHERE INV.AWB_NO = JO.AWB_NO AND INV.AWB_DATE = JO.AWB_DATE AND (INV.ULD_KEY = #uldKey# OR INV.LSP_NO = #uldKey#))
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="locn">
					exists (SELECT NULL FROM AWB_INVENTORY INV WHERE INV.AWB_NO = JO.AWB_NO AND INV.AWB_DATE = JO.AWB_DATE AND INV.LOC_CODE = #locn# AND INV.ULD_KEY IS NULL AND INV.LSP_NO IS NULL)
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="shc1">
					(
					#shc1# in (AWB.SPL_CODE1,AWB.SPL_CODE2,AWB.SPL_CODE3,AWB.SPL_CODE4,AWB.SPL_CODE5,AWB.SPL_CODE6,AWB.SPL_CODE7,AWB.SPL_CODE8,AWB.SPL_CODE9)
					<isNotEmpty prepend="OR" property="shc2">
					#shc2# in (AWB.SPL_CODE1,AWB.SPL_CODE2,AWB.SPL_CODE3,AWB.SPL_CODE4,AWB.SPL_CODE5,AWB.SPL_CODE6,AWB.SPL_CODE7,AWB.SPL_CODE8,AWB.SPL_CODE9)
					</isNotEmpty>
					<isNotEmpty prepend="OR" property="shc3">
						#shc3# in (AWB.SPL_CODE1,AWB.SPL_CODE2,AWB.SPL_CODE3,AWB.SPL_CODE4,AWB.SPL_CODE5,AWB.SPL_CODE6,AWB.SPL_CODE7,AWB.SPL_CODE8,AWB.SPL_CODE9)
					</isNotEmpty>	
					)
				</isNotEmpty>
				
				<isNotEmpty prepend="AND" property="dest1">
				(
				awb.dest in (
				#dest1#
				<isNotEmpty property="dest2">
				,#dest2#
				</isNotEmpty>
				<isNotEmpty property="dest3">
				,#dest3#
				</isNotEmpty>
				)
				)
				</isNotEmpty>
			 <isNotEmpty prepend="AND"  property="loginCarrier">
					   ( awb.CARR_CODE = #loginCarrier#   OR  awb.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP  WHERE GRP_CARR_CODE = #loginCarrier#))             
	         </isNotEmpty>
	         <isEqual compareValue="I" property="fltType">
				order by IFLT.FLT_DATE, IFLT.ATA, JO.JO_NO
			</isEqual>
			<isEqual compareValue="E" property="fltType">
				order by EFLT.FLT_DATE, EFLT.ATD, JO.JO_NO
			</isEqual>
 </select>
 
 <select id="createJoGGetAWBType"  parameterClass="java.lang.String" resultClass="java.lang.String" >
 	select awb_type from   awb where  awb_no = #awbNo#	and awb_closed_yn = 'N' and rownum = 1
 </select>
 
 <select id="getJobOrderStorageDetails"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO" >
 	SELECT AI.AWB_NO awbNo, TO_CHAR(AI.AWB_DATE,'DDMONYY') awbDate, 
	DECODE(AI.ULD_KEY,NULL,AI.LSP_NO,AI.ULD_KEY) uldKey, 
	AI.LOC_CODE locn, AI.LOCN_PCS pc, AI.LOCN_WT wt,
	(select code_desc from mast_code_dtl where code_type = 'ULD_STATE' and code = FUN_GET_ULD_STATE(AI.ULD_KEY) ) strgStatus,
	(case when (select count(1) from exp_sec_chk_jo where flt_key=AI.FLT_KEY and flt_date=AI.FLT_DATE and flt_key is not null and flt_date is not null and status != 'VOID') > 0 then 'Y' else 'N' end) as scDesntd
	FROM AWB_INVENTORY AI
	JOIN EXP_SEC_CHK_JO JO ON JO.AWB_NO = AI.AWB_NO AND JO.AWB_DATE = AI.AWB_DATE
	WHERE JO.JO_NO = #joNumber#
 </select>
 <select id="getJobOrderPrfmedInfo"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO" >
 	SELECT SEC_CHK AS secCheck,PC AS pc,WT AS wt,RESULT AS joResult FROM EXP_SEC_CHK_JO_DTL WHERE JO_NO=#joNumber#
 </select>
 
 <select id="getJobOrderFlightInfo"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO" >
 	SELECT JO.FLT_KEY as fltKey,TO_CHAR(JO.FLT_DATE,'DDMONYY') as fltDate,JO.ORIG as orig,A.FLT_TYPE as fltType FROM EXP_SEC_CHK_JO JO,FLT_OPR A WHERE JO.JO_NO=#joNumber# AND JO.FLT_KEY = A.FLT_KEY AND JO.FLT_DATE = A.SCH_DATE AND ROWNUM = 1
 </select>
 
 <select id="getJobOrderPCWTInfo"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO" >
 	SELECT SUM(PC) AS pc,SUM(WT) AS wt FROM EXP_SEC_CHK_JO WHERE JO_NO=#joNumber#
 </select>
 
 <update id="updateJobOrderInProgStatus" parameterClass="cargo.cms.export.bo.JobOrderBO">
		UPDATE EXP_SEC_CHK_JO JO SET
		   	STATUS = #joStatus#,
			LM_USER_ID=#lmUserId#,
			LM_DATE=SYSDATE,
			TR_TYPE = 'COMJO'		
		WHERE
			JO_NO = #joNumber#
</update>
<select id="exp_orig_validate"  parameterClass="map"  resultClass="java.lang.Integer">
		SELECT NVL(count(1),0) FROM FLT_OPR_LEG WHERE 
		<isEmpty property="fltKey">
			CARR_CODE = #carrierCode# AND FLT_NO = #flightNo# 
		</isEmpty>
		<isNotEmpty property="fltKey">
			FLT_KEY = #fltKey# 
		</isNotEmpty>
		<isNotEmpty property="orig">
		AND (BRD_POINT = #orig# OR OFF_POINT = #orig#)
		</isNotEmpty>
		AND SCH_DATE= TO_DATE( #flightDate#, 'DDMONYY') AND FLT_TYPE=NVL(#flightType#,'A')		
   	</select>
 <select id="secCheckGetTransitMailCount"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="java.lang.Integer" >
 	SELECT COUNT(1) FROM AWB WHERE AWB_NO = #awbNo# AND AWB_DATE = #awbDate# AND CATALOG = 'TM'
 </select>
 
 <select id="secCheckValidateCarPcsWt"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="java.lang.Integer" >
 	SELECT COUNT(1) FROM AWB A
 	<isEqual property="awbType" compareValue="I">
 	<![CDATA[
 		LEFT JOIN IMP_CAR_AWB C ON A.AWB_NO = C.AWB_NO AND A.AWB_DATE = C.AWB_DATE
 	 	WHERE A.AWB_NO = #awbNo# AND A.AWB_DATE = #awbDate#
		AND (NVL(C.AWB_PCS,0) < #pc# +
  NVL((SELECT SUM(PC)
  FROM EXP_SEC_CHK_JO J
  WHERE J.AWB_NO    = A.AWB_NO
  AND J.AWB_DATE    = A.AWB_DATE
  AND J.STATUS NOT IN 'VOID'
  AND J.JO_TYPE = 'SC'
  ),0) OR NVL(C.AWB_WT,0) < #wt# + NVL((SELECT SUM(WT)
  FROM EXP_SEC_CHK_JO J
  WHERE J.AWB_NO    = A.AWB_NO
  AND J.AWB_DATE    = A.AWB_DATE
  AND J.STATUS NOT IN 'VOID'
  AND J.JO_TYPE = 'SC'
  ),0))
	]]>
 	</isEqual> 		
 	<isNotEqual property="awbType" compareValue="I">
 	<![CDATA[
		LEFT JOIN EXP_CAR C ON A.AWB_NO = C.AWB_NO AND A.AWB_DATE = C.AWB_DATE
 	 	WHERE A.AWB_NO = #awbNo# AND A.AWB_DATE = #awbDate#
		AND (NVL(C.PCS,0) < #pc# +
  NVL((SELECT SUM(PC)
  FROM EXP_SEC_CHK_JO J
  WHERE J.AWB_NO    = A.AWB_NO
  AND J.AWB_DATE    = A.AWB_DATE
  AND J.STATUS NOT IN 'VOID'
  AND J.JO_TYPE = 'SC'
  ),0) OR NVL(C.WT,0) < #wt# + NVL((SELECT SUM(WT)
  FROM EXP_SEC_CHK_JO J
  WHERE J.AWB_NO    = A.AWB_NO
  AND J.AWB_DATE    = A.AWB_DATE
  AND J.STATUS NOT IN 'VOID'
  AND J.JO_TYPE = 'SC'
  ),0))		 	
	]]>
 	</isNotEqual> 	
 </select>
 
 <select id="isAWBExistsInFFM"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="java.lang.Integer" >
 	SELECT COUNT(1) FROM IMP_CAR_SHP WHERE AWB_NO = #awbNo# AND FLT_KEY = #fltKey# AND FLT_DATE = #fltDate#
 </select>
 
 	<parameterMap id="getAWBULDLSPLOCMap" class="map" >
		<parameter property="P_AWB_NO" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="P_AWB_DATE" jdbcType="DATE"	javaType="java.lang.String"	mode="IN"/>  
		<parameter property="P_FLT_KEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="P_FLT_DATE" jdbcType="DATE"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="P_ULD" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
		<parameter property="P_LSP" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="P_LOC" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="P_ULD_LIST" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>  
		<parameter property="P_LSP_LIST" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>    
		<parameter property="P_LOC_LIST" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>

	<procedure id="getAWBULDLSPLOC" parameterMap="getAWBULDLSPLOCMap" >
		{CALL GET_AWB_ULD_LPS_LOC(?,?,?,?,?,?,?,?,?,?)}
	</procedure>

	<select id="getAWBULDLSPAndLOC" parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO">
		SELECT 
	      STRAGG(STRINGDELIM(
	      CASE
	       WHEN ULD_KEY IS NOT NULL OR LSP_NO IS NOT NULL THEN
	       DECODE(ULD_KEY,NULL,LSP_NO,ULD_KEY)
	       ELSE NULL
	      END , ',')) uldKey,
	      STRAGG(STRINGDELIM(LOC_CODE, ',')) locn
	    FROM 
	      AWB_INVENTORY AWBI
	    WHERE 
	      AWBI.AWB_NO = #awbNo#
	      AND AWBI.AWB_DATE= TO_DATE(#awbDate#,'DDMONYY')
    </select>
	
	<select id="getAWBStorageLocations" parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="java.lang.String">
		select STRAGG(STRINGDELIM(storageLocation, ',')) from
		(
		select awb_no awbNo, awb_date awbDate, uld_key storageLocation from awb_inventory where lsp_no is null
		union
		select awb_no awbNo, awb_date awbDate, lsp_no storageLocation from awb_inventory where uld_key is null
		union
		select awb_no awbNo, awb_date awbDate, loc_code storageLocation from awb_inventory where uld_key is null and lsp_no is null
		) where awbNo = #awbNo# and awbDate = #awbDate#
	</select>
	
	<select id="getAWBULDLSPList" parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO">
		SELECT 
	      STRAGG(STRINGDELIM(DECODE(AWBI.ULD_KEY,NULL,AWBI.LSP_NO || '/' || AWBI.LOCN_PCS,ULD_KEY || '/' || AWBI.LOCN_PCS), ',')) uldKey,
	      count(1) totalRowCount
	    FROM 
	      AWB_INVENTORY AWBI
	      WHERE AWBI.AWB_NO = #awbNo# AND AWBI.AWB_DATE = #awbDate# AND (AWBI.ULD_KEY IS NOT NULL OR AWBI.LSP_NO IS NOT NULL)
	</select>

<select id="getJobOrderListCOUNT"  parameterClass="cargo.cms.export.bo.JobOrderBO"  resultClass="java.lang.Integer" >
	select 
	count(1)
	from EXP_SEC_CHK_JO jo
	LEFT JOIN EXP_CAR car ON car.AWB_NO = jo.AWB_NO AND car.AWB_DATE = jo.AWB_DATE
	JOIN AWB awb ON awb.awb_no = jo.awb_no and awb.awb_date = jo.awb_date
	where		
	     	<isEmpty property="fltDate">
				JO.CR_DATE BETWEEN TO_DATE(#joCrtDateFrom#, 'DDMONYY') AND TO_DATE(#joCrtDateTo#, 'DDMONYY')+1
			</isEmpty>
			<isNotEmpty property="fltDate">
				jo.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			</isNotEmpty>
			
		<isEqual compareValue="Y" property="printExcel" prepend="AND" >
			jo.JO_NO IN (select jo from GT_TEMP_JOBORDER)
		</isEqual>
		
		<isNotEqual compareValue="Y" property="printExcel">
			<isNotEmpty prepend="AND" property="joNumber">
				jo.JO_NO = #joNumber#
			</isNotEmpty>
		</isNotEqual>
			
			<isNotEmpty prepend="AND" property="jobOrderType">
				jo.JO_TYPE = #jobOrderType#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="joStatus">			
				<isEqual compareValue="Completed" property="joStatus">
					jo.STATUS = 'Completed'
				</isEqual>
				<isNotEqual compareValue="Completed" property="joStatus">			
					jo.STATUS !='Completed'
				</isNotEqual>				
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="awbNo">
				jo.AWB_NO = #awbNo#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="fltKey">
				jo.FLT_KEY = #fltKey#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="secJoStatus">
				UPPER(jo.STATUS) = UPPER(#secJoStatus#)
			</isNotEmpty>
			<isNotEmpty property="loginCarrier">
				   AND ( awb.CARR_CODE = #loginCarrier#   OR  awb.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP  WHERE GRP_CARR_CODE = #loginCarrier#))             
         	 </isNotEmpty>	
			and awb.catalog != 'EO'
</select>


<select id="getJobOrderLocation"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="java.lang.String" >
	SELECT STRAGG(STRINGDELIM(locnLspUld, ',')) AS locn
    from (SELECT distinct (LOC_CODE || decode(LSP_NO,null,decode(uld_key,null,'','/'),'/')|| NVL(lsp_no, uld_key)) locnLspUld from AWB_INVENTORY              
    where AWB_NO = #awbNo# AND
    AWB_DATE = TO_DATE( #awbDate#, 'DDMONYY')
    ORDER BY locnLspUld)
</select>



 <select id="getJobOrderSecCheckList"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO" >
	select 
	dtl.JO_NO joNumber,dtl.JO_TYPE jobOrderType,dtl.SEC_CHK secCheck,dtl.PC pc, dtl.WT wt, dtl.REF_NO refNo,
	dtl.RESULT joResult,dtl.SC_RMK rmk,	'N' newRecord,
	car.HLDG_PERIOD hldgHours, TO_CHAR(dtl.LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModDate,
	CHARGE_TO chargeTo 
	from EXP_SEC_CHK_JO_DTL dtl 
	JOIN EXP_SEC_CHK_JO jo ON  jo.JO_NO = dtl.JO_NO AND jo.JO_TYPE = dtl.JO_TYPE
	LEFT JOIN EXP_CAR car ON car.AWB_NO = jo.AWB_NO AND 	car.AWB_DATE = jo.AWB_DATE
	where dtl.JO_NO = #joNumber# 
	and dtl.JO_TYPE = #jobOrderType#	
</select>

 <select id="getJobOrderPcsBeforeSave"  parameterClass="java.lang.String" resultClass="java.lang.String" >
	SELECT SUM(PC) FROM exp_sec_chk_jo WHERE JO_NO=#PARAM#	
</select>

 <select id="getJobOrderDetailPcsBeforeSave"  parameterClass="java.lang.String" resultClass="java.lang.String" >
	SELECT SUM(PC) FROM exp_sec_chk_jo_dtl WHERE JO_NO= #PARAM#
 </select>

<insert id="insertJobOrderSecCheck" parameterClass="cargo.cms.export.bo.JobOrderBO">
	 INSERT INTO EXP_SEC_CHK_JO_DTL
		(JO_NO,JO_TYPE,SEC_CHK,PC,WT,REF_NO,RESULT,SC_RMK,
	  CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,DOC_LINE_NO,SO_NO)
		values
	(#joNumber#,#jobOrderType#,#secCheck#,#scPassPcs#,#scPassWt#,#refNo#,#joResult#,
	#rmk#,#lmUserId#,SYSDATE,#lmUserId#,SYSDATE,(SELECT NVL((MAX(DOC_LINE_NO)+1),1) FROM EXP_SEC_CHK_JO_DTL WHERE JO_NO = #joNumber#),#soNo#)
</insert>

<update id="updateJobOrderSecCheck" parameterClass="cargo.cms.export.bo.JobOrderBO">
		UPDATE EXP_SEC_CHK_JO_DTL SET
		    PC = #scPassPcs#,
		    WT = #scPassWt#,
		    REF_NO = #refNo#,
		    RESULT = #joResult#,
		    SC_RMK = #rmk#,
		    SO_NO = #soNo#,
			LM_USER_ID=#lmUserId#,
			LM_DATE=SYSDATE		
		WHERE 
			JO_NO = #joNumber# 
			and DOC_LINE_NO = #docLineNo#			
</update>

<select id="checkAWBNooldRemarksforjoborder" parameterClass="map" resultClass="java.lang.String" >
		SELECT AWB_RMK FROM AWB WHERE AWB_NO = #awbNo#  AND  AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	
		<select id="checkJobOrderoldRemarksforAWBWHRmk" parameterClass="map" resultClass="cargo.cms.export.bo.JobOrderBO" >
		SELECT JODTL.SC_RMK AS rmk FROM EXP_SEC_CHK_JO_DTL JODTL , EXP_SEC_CHK_JO JO 
		WHERE JO.JO_NO = JODTL.JO_NO AND JODTL.SC_RMK IS NOT NULL AND JO.JO_COMPL_DATE IS NOT NULL
		AND JO.STATUS = 'Completed' AND JO.AWB_NO=#awbNo# AND JO.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') ORDER BY JO.JO_COMPL_DATE,JO.JO_NO,JODTL.DOC_LINE_NO ASC
	</select>
	
	 <update id="updateAWBWHRMKfromSecCheck" parameterClass="map">	
		UPDATE awb
		SET AWB_RMK = #finalRmk#, 
			  LM_USER_ID = #userID#, 
			  LM_DATE = SYSDATE,
			  TR_TYPE = 'DUMMY' 			 
		WHERE UPPER(AWB_NO) = UPPER(#awbNo#)
		      AND  AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')	
		      
	</update>
	<update id="updateEXPCARWHRMKfromSecCheck" parameterClass="map">	
		UPDATE EXP_CAR
		SET wh_rmk = #finalRmk#,
			  LM_USER_ID = #userID#, 
			  LM_DATE = SYSDATE,
			  TR_TYPE = 'DUMMY' 			 
		WHERE UPPER(AWB_NO) = UPPER(#awbNo#)
		      AND  AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')	  
	</update>

	
	<update id="updateCARForImportWHRMKSecCheck" parameterClass="map">	
		UPDATE IMP_CAR_AWB
		SET WH_RMK = #finalRmk#,
			  LM_USER_ID = #userID#, 
			  LM_DATE = SYSDATE,
			  TR_TYPE = 'DUMMY' 			 
		WHERE UPPER(AWB_NO) = UPPER(#awbNo#)
		      AND  AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')	  
	</update>
	
<update id="updateJobOrderStatus" parameterClass="cargo.cms.export.bo.JobOrderBO">
		UPDATE EXP_SEC_CHK_JO JO SET
		   	STATUS = #joStatus#,
		   	CHK_PCS = #scPassPcs#, 
		   	CHK_WT = #scPassWt#,
			LM_USER_ID=#lmUserId#,
			LM_DATE=SYSDATE,
			<isEqual compareValue="Completed" property="joStatus">
			JO_COMPL_DATE=SYSDATE,
			</isEqual>
			TR_TYPE = 'COMJO'		
		WHERE
			JO_NO = #joNumber#
</update>

<select id="sqlQuerygetSeccheckDescription" parameterClass="java.lang.String" resultClass="java.lang.String">
SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE=#PARAM# AND GROUP_CODE='38' AND CODE_TYPE='SC_METHOD'
</select>

<select id="getAWBCarDestDetails_JO"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO" >
	SELECT DEST AS dest,
	CARR_CODE AS carrCode,
	AWB_TYPE AS awbType
	FROM AWB AWB
	WHERE AWB_NO =#awbNo#
	AND AWB_DATE = #awbDate#	
</select>


<select id="getTotalAWBPcsWt_PassSCPcsWt_SHCS"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="cargo.cms.export.bo.JobOrderBO" >
		select 
  			awb.PCS as totalAWBPcs,
  			awb.WT as totalAWBWt,
			sum(dtl.PC) as scPassPcs,
 		    sum(dtl.WT) as scPassWt,
 		    SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9 
		from EXP_SEC_CHK_JO jo 
		left join EXP_SEC_CHK_JO_DTL dtl on jo.JO_NO=dtl.JO_NO
		JOIN AWB awb ON awb.AWB_NO = jo.AWB_NO AND 	awb.AWB_DATE = jo.AWB_DATE
		where jo.awb_no=#awbNo# and jo.awb_date=#awbDate# and Upper(dtl.RESULT) = Upper('Pass')  and Upper(jo.status) = Upper('COMPLETED')
		 group by awb.PCS,awb.WT,SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9
</select>
<update id="updateSPCSHCCode_EXP_CAR" parameterClass="cargo.cms.export.bo.JobOrderBO">
		UPDATE EXP_CAR SET 
		<isEqual compareValue="SPL_CODE1" property="updateSHCCode">
		SPL_CODE1 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE2" property="updateSHCCode">
		SPL_CODE2 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE3" property="updateSHCCode">
		SPL_CODE3 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE4" property="updateSHCCode">
		SPL_CODE4 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE5" property="updateSHCCode">
		SPL_CODE5 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE6" property="updateSHCCode">
		SPL_CODE6 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE7" property="updateSHCCode">
		SPL_CODE7 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE8" property="updateSHCCode">
		SPL_CODE8 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE9" property="updateSHCCode">
		SPL_CODE9 = 'SPX'
		</isEqual>		
		 WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
</update>
<update id="updateSPCSHCCode_AWB" parameterClass="cargo.cms.export.bo.JobOrderBO">
		UPDATE AWB SET
		<isEqual compareValue="SPL_CODE1" property="updateSHCCode">
		SPL_CODE1 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE2" property="updateSHCCode">
		SPL_CODE2 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE3" property="updateSHCCode">
		SPL_CODE3 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE4" property="updateSHCCode">
		SPL_CODE4 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE5" property="updateSHCCode">
		SPL_CODE5 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE6" property="updateSHCCode">
		SPL_CODE6 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE7" property="updateSHCCode">
		SPL_CODE7 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE8" property="updateSHCCode">
		SPL_CODE8 = 'SPX'
		</isEqual>
		<isEqual compareValue="SPL_CODE9" property="updateSHCCode">
		SPL_CODE9 = 'SPX'
		</isEqual> 
		WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
</update>

<delete id="deleteJobOrderSecCheck" parameterClass="cargo.cms.export.bo.JobOrderBO">
		DELETE FROM EXP_SEC_CHK_JO_DTL 
		WHERE JO_NO = #joNumber# 
		AND JO_TYPE = #jobOrderType# 
		AND SEC_CHK=#secCheck#		 
		AND TO_CHAR(LM_DATE , 'DDMONYY HH24:MI:SS')=#lastModDate#
</delete>

	<select id="exp_flt_validate"  parameterClass="map"  resultClass="java.lang.Integer">
		SELECT NVL(count(1),0) FROM FLT_OPR WHERE 
		<isEmpty property="fltKey">
			CARR_CODE = #carrierCode# AND FLT_NO = #flightNo# 
		</isEmpty>
		<isNotEmpty property="fltKey">
			FLT_KEY = #fltKey# 
		</isNotEmpty>
			AND SCH_DATE= TO_DATE( #flightDate#, 'DDMONYY') AND FLT_TYPE=NVL(#flightType#,'D')
   	</select>
   	
   	<select id="checkSecCheckType"  parameterClass="cargo.cms.export.bo.JobOrderBO"  resultClass="java.lang.Integer">
		SELECT count(1) 
		FROM MAST_CODE_DTL 
		WHERE code_type='SC_METHOD'
		AND UPPER(CODE) = UPPER(#secCheck#)	
   	</select>
 
  <!--  Added By Santosh Desai for Iteration 3a Maintain Security Check job order End -->
  
  
    <!--  Added By Santosh Desai for Iteration 3a NOTOC Worksheet START -->
    
<select id="getNOTOCShipmentList"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
		select  			
		 awb1.AWB_NO awbNo,		
		substr( awb1.AWB_NO,0,3) as awbPfx,
		substr( awb1.AWB_NO,4) as awbSfx,
		TO_CHAR( awb1.AWB_DATE,'DDMONYY') awbDate,   
		TO_CHAR( awb1.FLT_DATE,'DDMONYY') fltDate,	 		
		 awb1.FLT_KEY	fltKey,
		 awb1.FLT_TYPE fltType,
		TO_CHAR( awb1.LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModDate,
		 awb1.PMAN_PCS pc,
		 awb1.PMAN_WT wt,	
		notoc.TR_NO as trNo,
		(SELECT SHP_TRF_TYPE FROM V_DDT_DTL where AWB_NO = awb1.AWB_NO AND AWB_DATE =  AWB_DATE  
         AND SHP_CNTG_FLT_KEY = AWB1.FLT_KEY AND SHP_CNTG_FLT_DATE = AWB1.FLT_DATE and rownum = 1) as transferMode,	 
		 #carrCode# as carrCode,			 
		(select STRAGG(STRINGDELIM(T.spl, ','))  from((select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
        union all
        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
        union all
        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
        union all
        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
        union all
        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
        union all
        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
        union all
        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
        union all
        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
        union all
        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null) )T
        join CUST_AIRL_SPL_CODE AIRL on T.SPL  = AIRL.SPL_CODE  
        where AIRL.CARR_CODE = #carrCode# and (AIRL.SPL_TYPE = 'SPL_DANG' OR AIRL.SPL_TYPE = 'SPL_NOTOC')
        and T.awb_no = awb1.AWB_NO and T.awb_date = awb1.AWB_DATE)	shc,t4.orig awbOrg,t4.dest awbDest                     
		FROM EXP_PMANIFEST_AWB awb1
	    JOIN FLT_OPR opr on  awb1.FLT_KEY = opr.FLT_KEY and  awb1.FLT_DATE = opr.SCH_DATE and opr.FLT_TYPE='D'
	    LEFT JOIN EXP_NOTOC_AWB notoc ON
	    notoc.FLT_DATE =  awb1.FLT_DATE
	    and notoc.FLT_KEY =  awb1.FLT_KEY
	    and notoc.AWB_NO =  awb1.AWB_NO
	    and notoc.AWB_DATE =  awb1.AWB_DATE  
	    JOIN awb t4  
     	on awb1.AWB_NO =  t4.AWB_NO
	    and awb1.AWB_DATE =  t4.AWB_DATE
	    WHERE awb1.FLT_KEY =#fltKey# AND awb1.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND  awb1.FLT_TYPE = 'E'
		<isNotEmpty property="unldgPt">
			AND  awb1.UNLDG_PT = #unldgPt#
		</isNotEmpty>
		UNION
		select  			
		 awb1.AWB_NO awbNo,		
		substr( awb1.AWB_NO,0,3) as awbPfx,
		substr( awb1.AWB_NO,4) as awbSfx,
		TO_CHAR( awb1.AWB_DATE,'DDMONYY') awbDate,   
		TO_CHAR( awb1.FLT_DATE,'DDMONYY') fltDate,	 		
		 awb1.FLT_KEY	fltKey,
		 'E' fltType,
		TO_CHAR( awb1.LM_DATE , 'DDMONYY HH24:MI:SS') AS lastModDate,
		 awb1.BULK_PCS pc,
		 awb1.BULK_WT wt,	
		notoc.TR_NO as trNo,
		(SELECT SHP_TRF_TYPE FROM V_DDT_DTL where AWB_NO = awb1.AWB_NO AND AWB_DATE =  AWB_DATE  
         AND SHP_CNTG_FLT_KEY = AWB1.FLT_KEY AND SHP_CNTG_FLT_DATE = AWB1.FLT_DATE and rownum = 1) as transferMode,	 
		 #carrCode# as carrCode,			 
		(select STRAGG(STRINGDELIM(T.spl, ','))  from((select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
        union all
        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
        union all
        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
        union all
        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
        union all
        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
        union all
        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
        union all
        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
        union all
        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
        union all
        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null) )T
        join CUST_AIRL_SPL_CODE AIRL on T.SPL  = AIRL.SPL_CODE  
        where AIRL.CARR_CODE = #carrCode# and (AIRL.SPL_TYPE = 'SPL_DANG' OR AIRL.SPL_TYPE = 'SPL_NOTOC')
        and T.awb_no = awb1.AWB_NO and T.awb_date = awb1.AWB_DATE)	shc,t4.orig awbOrg,t4.dest awbDest                     
		FROM exp_pman_tarmac_awb awb1
	    JOIN FLT_OPR opr on  awb1.FLT_KEY = opr.FLT_KEY and  awb1.FLT_DATE = opr.SCH_DATE and opr.FLT_TYPE='D'
	    LEFT JOIN EXP_NOTOC_AWB notoc ON
	    notoc.FLT_DATE =  awb1.FLT_DATE
	    and notoc.FLT_KEY =  awb1.FLT_KEY
	    and notoc.AWB_NO =  awb1.AWB_NO
	    and notoc.AWB_DATE =  awb1.AWB_DATE  
	    JOIN awb t4  
     	on awb1.AWB_NO =  t4.AWB_NO
	    and awb1.AWB_DATE =  t4.AWB_DATE
	    WHERE awb1.FLT_KEY =#fltKey# AND awb1.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY') 
	    AND NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_AWB WHERE FLT_KEY =#fltKey# AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND AWB_NO=awb1.awb_no AND AWB_DATE=awb1.awb_date AND UNLDG_PT=awb1.UNLDG_PT)
		<isNotEmpty property="unldgPt">
			AND  awb1.UNLDG_PT = #unldgPt#
		</isNotEmpty>
	  <!--  AND awb1.AWB_NO = (SELECT AWB_NO from EXP_DGD where AWB_NO = awb1.AWB_NO and to_char(AWB_DATE,'DDMONYY') = to_char( awb1.AWB_DATE,'DDMONYY') and rownum = 1)
	  AND to_char( awb1.AWB_DATE,'DDMONYY') = (SELECT to_char(AWB_DATE,'DDMONYY') from EXP_DGD where AWB_NO = awb1.AWB_NO and to_char(AWB_DATE,'DDMONYY') = to_char( awb1.AWB_DATE,'DDMONYY') and rownum = 1)-->
    </select>  
    
    <select id="getNOTOCSHCForCarr"  parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
    SELECT * FROM   
     (select 
		  SPL_CODE shc
		  FROM CUST_AIRL_SPL_CODE
		  where CARR_CODE = #carrCode#
		  and SPL_TYPE = 'SPL_DANG'
      UNION
      select 
		  SPL_CODE shc
		  FROM CUST_AIRL_SPL_CODE
		  where CARR_CODE = #carrCode#
		  and SPL_TYPE = 'SPL_NOTOC'      
      ) ORDER BY shc
      </select>
    
    
    <select id="getNOTOCSHCDANGForCarr"  parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
		  select 
		  SPL_CODE shc
		  FROM CUST_AIRL_SPL_CODE
		  where CARR_CODE = #carrCode#
		  and SPL_TYPE = 'SPL_DANG'
	</select>
  
  	<select id="getNOTOCSHCSPLForCarr"  parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
		  select 
		  SPL_CODE shc
		  FROM CUST_AIRL_SPL_CODE
		  where CARR_CODE = #carrCode#
		  and SPL_TYPE = 'SPL_NOTOC'
	</select>
	 
	 <select id="getNOTOCFlightInfo"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
		select  		
		TO_CHAR(opr.SCH_DATE,'DDMONYY') fltDate,
	    (ltrim(SUBSTR(TRIM(TO_CHAR(opr.SCH_TIME,'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(opr.SCH_TIME,'0000')),3,2),':')) std,
    	(ltrim(SUBSTR(TRIM(TO_CHAR(opr.EST_TIME,'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(opr.EST_TIME,'0000')),3,2),':')) etd,
		opr.CARR_CODE carrCode,
		opr.FLT_NO fltNo,	
		opr.FLT_KEY	fltKey,
		opr.FLT_TYPE fltType,
		opr.ACFT_REG_NO acrftReg,
		DECODE(evnt.BUILDUP_CDATE, NULL, 'N' ,  'Y') AS buCompl					
		FROM FLT_OPR opr 
   		JOIN FLT_OPR_EVENTS evnt ON evnt.FLT_KEY = opr.FLT_KEY AND 	evnt.SCH_DATE = opr.SCH_DATE AND evnt.FLT_TYPE = 'D'	
		WHERE 
		opr.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		AND opr.FLT_KEY = #fltKey#
		AND opr.FLT_TYPE = 'D'
		
		
		<!-- select  		
		TO_CHAR(awb.FLT_DATE,'DDMONYY') fltDate,
	    (ltrim(SUBSTR(TRIM(TO_CHAR(opr.SCH_TIME,'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(opr.SCH_TIME,'0000')),3,2),':')) std,
    	(ltrim(SUBSTR(TRIM(TO_CHAR(opr.EST_TIME,'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(opr.EST_TIME,'0000')),3,2),':')) etd,
		#carrCode# carrCode,
		#fltNo# fltNo,	
		awb.FLT_KEY	fltKey,
		awb.FLT_TYPE fltType,		
		awb.UNLDG_PT unldgPt,
		DECODE(evnt.BUILDUP_CDATE, NULL, 'N' ,  'Y') AS buCompl,
			(select    decode(spl_code1, null, '', spl_code1 || ',')
               || decode(spl_code2, null, '', spl_code2 || ',')
               || decode(spl_code3, null, '', spl_code3 || ',')
               || decode(spl_code4, null, '', spl_code4 || ',')
               || decode(spl_code5, null, '', spl_code5 || ',')
               || decode(spl_code6, null, '', spl_code6 || ',')
               || decode(spl_code7, null, '', spl_code7 || ',')
               || decode(spl_code8, null, '', spl_code8 || ',')
               || decode(spl_code9, null, '', spl_code9)
                  from   exp_car
                  where  awb_no = awb.AWB_NO
                  and awb_date = awb.AWB_DATE) shc			
		FROM EXP_PMANIFEST_AWB awb
   		JOIN FLT_OPR opr on awb.FLT_KEY = opr.FLT_KEY and awb.FLT_DATE = opr.SCH_DATE and opr.FLT_TYPE='D'
   		JOIN FLT_OPR_EVENTS evnt ON evnt.FLT_KEY = opr.FLT_KEY AND 	evnt.SCH_DATE = opr.SCH_DATE AND evnt.FLT_TYPE = 'D'	
		WHERE 
		awb.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		AND awb.FLT_KEY = #fltKey#
		AND awb.FLT_TYPE = 'D'
		AND awb.UNLDG_PT = #unldgPt#	-->		
	 </select>   
	 
	 
	 <select id="getNOTOCDGDULDList"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
		SELECT * 
		FROM (
			select  distinct
		   	notoc.TR_NO trNo,
		   	notoc.ULD_KEY uldNo,
		   	notoc.POSITION position,		   
		   	'N' newRecord,
		   	ddt.TRF_TYPE transferMode		   	 	
		    from 
		    EXP_NOTOC_AWB_ULD notoc   
		    join EXP_NOTOC_AWB awb
		    on awb.TR_NO = notoc.TR_NO
		    left join V_DDT_DTL ddt
		    on ddt.FLT_KEY = awb.FLT_KEY 
		    AND ddt.FLT_DATE = awb.FLT_DATE 
		    AND ddt.ULD_KEY = notoc.ULD_KEY	
		    and rownum=1	   
		    where
		    notoc.TR_NO = #trNo#			  
			
			UNION ALL		
		
	        select
	        '' trNo,
	        pman.ULD_BT_NO uldNo,
	        '' position,	       
	        'Y' newRecord,
	        ddt.TRF_TYPE transferMode	
		    from
		    EXP_PMANIFEST_ULD_AWB pman
		    left join V_DDT_DTL ddt
		    on ddt.FLT_KEY = pman.FLT_KEY 
		    AND ddt.FLT_DATE = pman.FLT_DATE 
		    AND ddt.ULD_KEY = pman.ULD_BT_NO
		    and rownum=1		
		    where
		    pman.FLT_KEY = #fltKey#
		    and pman.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		    <isNotEmpty property="unldgPt">
		    	and pman.UNLDG_PT = #unldgPt#
		    </isNotEmpty>
		    and pman.AWB_NO = #awbNo#
		    and pman.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		    and pman.ULD_BT_NO NOT IN(select distinct     
							      uld.ULD_KEY
							      from
							      EXP_NOTOC_AWB_ULD uld join
							      EXP_NOTOC_AWB awb on awb.TR_NO = uld.TR_NO
							      where
							      awb.FLT_KEY = #fltKey#
							      and awb.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
							      and awb.AWB_NO = #awbNo#
							      and awb.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			  					  )
			 UNION 		
		
	        select
	        '' trNo,
	        pman.ULD_BT_NO uldNo,
	        '' position,	       
	        'Y' newRecord,
	        ddt.TRF_TYPE transferMode	
		    from
		    EXP_PMAN_TARMAC_ULD_AWB pman
		    left join V_DDT_DTL ddt
		    on ddt.FLT_KEY = pman.FLT_KEY 
		    AND ddt.FLT_DATE = pman.FLT_DATE 
		    AND ddt.ULD_KEY = pman.ULD_BT_NO
		    and rownum=1		
		    where
		    pman.FLT_KEY = #fltKey#
		    and pman.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		    <isNotEmpty property="unldgPt">
		    	and pman.UNLDG_PT = #unldgPt#
		    </isNotEmpty>
		    and pman.AWB_NO = #awbNo#
		    and pman.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		    and pman.ULD_BT_NO NOT IN(select distinct     
							      uld.ULD_KEY
							      from
							      EXP_NOTOC_AWB_ULD uld join
							      EXP_NOTOC_AWB awb on awb.TR_NO = uld.TR_NO
							      where
							      awb.FLT_KEY = #fltKey#
							      and awb.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
							      and awb.AWB_NO = #awbNo#
							      and awb.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			  					  )
			 AND NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_ULD_AWB WHERE AWB_NO = #awbNo# AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			 AND ULD_BT_NO = pman.ULD_BT_NO AND FLT_KEY = #fltKey# and FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY'))
		   ) order by uldNo
	 </select>	 	 
	
	  <select id="getNOTOCSPLULDList"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
	  SELECT * 
		FROM (
			select  distinct
		   	TR_NO trNo,
		   	ULD_KEY uldNo,
		   	#awbDate# awbDate,
		   	#awbNo#	awbNo,
		   	#fltKey# fltKey,
		   	#fltDate#	fltDate,
		   	#unldgPt#   unldgPt,
		   	'N' newRecord	  		   	 	
		    from 
		    EXP_NOTOC_SPL      
		    where
		    TR_NO = #trNo#			  
			
			UNION ALL		
		
	        select
	        '' trNo,
	        ULD_BT_NO uldNo,
	        #awbDate# awbDate,
		   	#awbNo#	awbNo,
		   	#fltKey# fltKey,
		   	#fltDate#	fltDate,
		   	#unldgPt#   unldgPt,	       
	        'Y' newRecord	
		    from
		    EXP_PMANIFEST_ULD_AWB
		    where
		    FLT_KEY = #fltKey#
		    and FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		    <isNotEmpty property="unldgPt">
		    	and UNLDG_PT = #unldgPt#
		    </isNotEmpty>
		    and AWB_NO = #awbNo#
		    and AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		    and ULD_BT_NO NOT IN(select distinct     
							      spl.ULD_KEY
							      from
							      EXP_NOTOC_SPL spl join
							      EXP_NOTOC_AWB awb on awb.TR_NO = spl.TR_NO
							      where
							      awb.FLT_KEY = #fltKey#
							      and awb.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
							      and awb.AWB_NO = #awbNo#
							      and awb.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			  					  )
			 UNION 		
		
	        select
	        '' trNo,
	        ULD_BT_NO uldNo,
	        #awbDate# awbDate,
		   	#awbNo#	awbNo,
		   	#fltKey# fltKey,
		   	#fltDate#	fltDate,
		   	#unldgPt#   unldgPt,	       
	        'Y' newRecord	
		    from
		    EXP_PMAN_TARMAC_ULD_AWB pman
		     where
		    FLT_KEY = #fltKey#
		    and FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		    <isNotEmpty property="unldgPt">
		    	and UNLDG_PT = #unldgPt#
		    </isNotEmpty>
		    and AWB_NO = #awbNo#
		    and AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		    and ULD_BT_NO NOT IN(select distinct     
							      spl.ULD_KEY
							      from
							      EXP_NOTOC_SPL spl join
							      EXP_NOTOC_AWB awb on awb.TR_NO = spl.TR_NO
							      where
							      awb.FLT_KEY = #fltKey#
							      and awb.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
							      and awb.AWB_NO = #awbNo#
							      and awb.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			  					  )
			 AND NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_ULD_AWB WHERE AWB_NO = #awbNo# AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			 AND ULD_BT_NO = pman.ULD_BT_NO AND FLT_KEY = #fltKey# and FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY'))  					  
			 
		   )  order by uldNo
	 </select>	 
	 
	 
	<select id="getNOTOCSPLList"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
	 		select    
		   	SPL.TR_NO trNo,
		   	SPL.ULD_KEY uldNo,
		   	SPL.SPL_CODE shc,
		   	SPL.PC pc,
		   	DECODE(SPL.QU,'','KG',SPL.QU) unit,
		   	'N' newRecord,
		   	DECODE(SHC.WH_IND,'Y',SHC.WH_IND,'N') whInd  	
		    from 
		    EXP_NOTOC_SPL SPL
		    LEFT JOIN EXP_PMANIFEST_ULD_AWB_SHC SHC ON shc.SHC = SPL.SPL_CODE
		    AND SHC.TR_NO = SPL.TR_NO
		    LEFT JOIN EXP_PMANIFEST_ULD_AWB ULD ON SHC.TR_NO = ULD.TR_NO 
		    and ULD.AWB_NO =  #awbNo#
			and TO_CHAR(ULD.AWB_DATE,'DDMONYY') = TO_CHAR(#awbDate#,'DDMONYY')
			and ULD.FLT_KEY = #fltKey#
			and ULD.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
			<isNotEmpty property="unldgPt">
				and ULD.UNLDG_PT =#unldgPt#	
			</isNotEmpty>    
		    where
		    SPL.TR_NO = #trNo#
		    and SPL.ULD_KEY = #uldNo#
	</select>	 	 
	 
	 
	 <select id="getOPAPIOUNIDList"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
		select op.OVERPACK_ID overpack,
	    apio.APIO_ID apio,
	    dgd.UN_ID unid,
	    op.AWB_NO awbNo,
	    TO_CHAR(op.AWB_DATE,'DDMONYY') awbDate,	  
	    dgd.PKG_PCS pkg,  
	    dgd.QTY qty,   
	    DECODE(dgd.QU,'','KG',dgd.QU) unit, 	       
	    awb.SPL_CODE1 shc1,
	    awb.SPL_CODE2 shc2,
	    awb.SPL_CODE3 shc3,
	    awb.SPL_CODE4 shc4,
	    awb.SPL_CODE5 shc5,
	    awb.SPL_CODE6 shc6,
	    awb.SPL_CODE7 shc7,
	    awb.SPL_CODE8 shc8,
	    awb.SPL_CODE9 shc9, 	     
	    op.OVERPACK_PKG loadPkg,
	    dgd.UN_TR_NO unTrNo,
	    DECODE(un.WH_IND,'Y',un.WH_IND,'N') whInd
	    from EXP_DGD_OP op
	    join EXP_DGD_APIO apio on apio.OVERPACK_ID = op.OVERPACK_ID and apio.AWB_NO = op.AWB_NO 
	    and apio.AWB_DATE = op.AWB_DATE
	    join EXP_DGD dgd on dgd.APIO_ID = apio.APIO_ID and  dgd.OP_ON = op.OVERPACK_ID  and dgd.AWB_NO = apio.AWB_NO 
	    and TO_CHAR(dgd.AWB_DATE,'DDMONYY') = TO_CHAR(apio.AWB_DATE,'DDMONYY')
	    join AWB awb on awb.AWB_NO = apio.AWB_NO 
	    and TO_CHAR(awb.AWB_DATE,'DDMONYY') = TO_CHAR(apio.AWB_DATE,'DDMONYY') and awb.AWB_TYPE IN('E','T')
	    left join EXP_PMANIFEST_ULD_AWB uld on
      	uld.AWB_NO = op.AWB_NO 
	    and TO_CHAR(uld.AWB_DATE,'DDMONYY') = TO_CHAR(op.AWB_DATE,'DDMONYY')
	    and uld.FLT_KEY = #fltKey#
	    and uld.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
	    <isNotEmpty property="unldgPt">
	    	and uld.UNLDG_PT =#unldgPt#
	    </isNotEmpty>
		and uld.AWB_NO = op.AWB_NO
		and uld.AWB_DATE = op.AWB_DATE
	    left join EXP_PMANIFEST_ULD_AWB_UN un on
	    un.TR_NO = uld.TR_NO and un.OVERPACK_ID = op.OVERPACK_ID
	    and un.APIO_ID = apio.APIO_ID
	    and un.UN_TR_NO = dgd.UN_ID
	    where
	    op.AWB_NO = #awbNo#
	    and op.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')	    
	</select>	
    
    <select id="getOPUNIDList"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
       select op.OVERPACK_ID overpack,   
	    dgd.UN_ID unid,
	    op.AWB_NO awbNo,
	    TO_CHAR(op.AWB_DATE,'DDMONYY') awbDate,
	    dgd.PKG_PCS pkg,  
	    dgd.QTY qty,   
	    DECODE(dgd.QU,'','KG',dgd.QU) unit,  	   
	    awb.SPL_CODE1 shc1,
	    awb.SPL_CODE2 shc2,
	    awb.SPL_CODE3 shc3,
	    awb.SPL_CODE4 shc4,
	    awb.SPL_CODE5 shc5,
	    awb.SPL_CODE6 shc6,
	    awb.SPL_CODE7 shc7,
	    awb.SPL_CODE8 shc8,
	    awb.SPL_CODE9 shc9, 	      
	    op.OVERPACK_PKG loadPkg,
	    dgd.UN_TR_NO unTrNo,
	    DECODE(un.WH_IND,'Y',un.WH_IND,'N') whInd
	    from EXP_DGD_OP op   
	    join EXP_DGD dgd on dgd.OP_ON = op.OVERPACK_ID and  dgd.AWB_NO = op.AWB_NO 
	    and TO_CHAR(dgd.AWB_DATE,'DDMONYY') = TO_CHAR(op.AWB_DATE,'DDMONYY')
	    join AWB awb on awb.AWB_NO = dgd.AWB_NO 
	    and TO_CHAR(awb.AWB_DATE,'DDMONYY') = TO_CHAR(dgd.AWB_DATE,'DDMONYY') and awb.AWB_TYPE IN('E','T')
	    left join EXP_PMANIFEST_ULD_AWB uld on
        uld.AWB_NO = op.AWB_NO 
	    and TO_CHAR(uld.AWB_DATE,'DDMONYY') = TO_CHAR(op.AWB_DATE,'DDMONYY')
        and uld.FLT_KEY = #fltKey#
	    and uld.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
	    <isNotEmpty property="unldgPt">
	    	and uld.UNLDG_PT =#unldgPt#
	    </isNotEmpty>
		and uld.AWB_NO = op.AWB_NO
		and uld.AWB_DATE = op.AWB_DATE
	    left join EXP_PMANIFEST_ULD_AWB_UN un on
	    un.TR_NO = uld.TR_NO and un.OVERPACK_ID = op.OVERPACK_ID
	    and un.APIO_ID IS NULL
	    and un.UN_TR_NO = dgd.UN_ID
	    where
	    op.AWB_NO =  #awbNo#
	    and op.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	    and dgd.APIO_ID is null
	    ORDER BY op.OVERPACK_ID ASC
	</select>
	    
	<select id="getAPIOUNIDList"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >    
        select 
	    apio.APIO_ID apio,
	    dgd.UN_ID unid,
	    apio.AWB_NO awbNo,
	    TO_CHAR(apio.AWB_DATE,'DDMONYY') awbDate,	   
	    dgd.PKG_PCS pkg,  
	    dgd.QTY qty,   
	    DECODE(dgd.QU,'','KG',dgd.QU) unit,  		   
	    awb.SPL_CODE1 shc1,
	    awb.SPL_CODE2 shc2,
	    awb.SPL_CODE3 shc3,
	    awb.SPL_CODE4 shc4,
	    awb.SPL_CODE5 shc5,
	    awb.SPL_CODE6 shc6,
	    awb.SPL_CODE7 shc7,
	    awb.SPL_CODE8 shc8,
	    awb.SPL_CODE9 shc9, 	      
	    apio.APIO_PKG loadPkg,
	    dgd.UN_TR_NO unTrNo,
	    DECODE(un.WH_IND,'Y',un.WH_IND,'N') whInd
	    from EXP_DGD_APIO apio 
	    join EXP_DGD dgd on dgd.APIO_ID = apio.APIO_ID and dgd.AWB_NO = apio.AWB_NO 
	    and TO_CHAR(dgd.AWB_DATE,'DDMONYY') = TO_CHAR(apio.AWB_DATE,'DDMONYY')
	    join AWB awb on awb.AWB_NO = dgd.AWB_NO 
	    and TO_CHAR(awb.AWB_DATE,'DDMONYY') = TO_CHAR(dgd.AWB_DATE,'DDMONYY') and awb.AWB_TYPE IN('E','T')
	    left join EXP_PMANIFEST_ULD_AWB uld on
        uld.AWB_NO = apio.AWB_NO 
	    and TO_CHAR(uld.AWB_DATE,'DDMONYY') = TO_CHAR(apio.AWB_DATE,'DDMONYY')
        and uld.FLT_KEY = #fltKey#
	    and uld.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
	    <isNotEmpty property="unldgPt">
	    	and uld.UNLDG_PT =#unldgPt#
	    </isNotEmpty>
		and uld.AWB_NO = apio.AWB_NO
		and uld.AWB_DATE = apio.AWB_DATE
        left join EXP_PMANIFEST_ULD_AWB_UN un on
        un.TR_NO = uld.TR_NO 
        and un.OVERPACK_ID = dgd.UN_ID
        and un.APIO_ID = apio.APIO_ID
        <!-- and un.UN_TR_NO = dgd.UN_TR_NO -->
	    where
	    apio.AWB_NO =  #awbNo#
	    and apio.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	    and apio.OVERPACK_ID is null
	    ORDER BY apio.APIO_ID ASC
    </select>
    
    <select id="getUNIDList"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
	    select    
	    dgd.UN_ID unid,
	    dgd.AWB_NO awbNo,
	    TO_CHAR(dgd.AWB_DATE,'DDMONYY') awbDate,	   
	    dgd.PKG_PCS pkg,  
	    dgd.QTY qty,   
	    DECODE(dgd.QU,'','KG',dgd.QU) unit,   	    
	    awb.SPL_CODE1 shc1,
	    awb.SPL_CODE2 shc2,
	    awb.SPL_CODE3 shc3,
	    awb.SPL_CODE4 shc4,
	    awb.SPL_CODE5 shc5,
	    awb.SPL_CODE6 shc6,
	    awb.SPL_CODE7 shc7,
	    awb.SPL_CODE8 shc8,
	    awb.SPL_CODE9 shc9, 	       
	    dgd.PKG_PCS loadPkg,
	    dgd.UN_TR_NO unTrNo,
	    DECODE(un.WH_IND,'Y',un.WH_IND,'N') whInd      
	    from 
	    EXP_DGD dgd  
	    join AWB awb on awb.AWB_NO = dgd.AWB_NO 
	    and TO_CHAR(awb.AWB_DATE,'DDMONYY') = TO_CHAR(dgd.AWB_DATE,'DDMONYY') and awb.AWB_TYPE IN('E','T')    
	    left join EXP_PMANIFEST_ULD_AWB uld on
        uld.AWB_NO = dgd.AWB_NO 
	    and TO_CHAR(uld.AWB_DATE,'DDMONYY') = TO_CHAR(dgd.AWB_DATE,'DDMONYY')
        and uld.FLT_KEY = #fltKey#
	    and uld.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
	    <isNotEmpty property="unldgPt">
	    	and uld.UNLDG_PT =#unldgPt#
	    </isNotEmpty>
		and uld.AWB_NO = dgd.AWB_NO
		and uld.AWB_DATE = dgd.AWB_DATE
        left join EXP_PMANIFEST_ULD_AWB_UN un on
        un.TR_NO = uld.TR_NO 
        and un.OVERPACK_ID = dgd.UN_ID
        <!-- and un.APIO_ID IS NULL
        and un.UN_TR_NO = dgd.UN_TR_NO -->
	    where
	    dgd.AWB_NO =  #awbNo#
	    and TRUNC(dgd.AWB_DATE) = TO_DATE(#awbDate#,'DDMONYY')
	    and dgd.APIO_ID is null
	    and dgd.OP_ON is null
	</select>
	
	<select id="getOverpackCount"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.Integer">
		select count(1)
	    from EXP_DGD_OP op
	    join EXP_DGD_APIO apio on apio.OVERPACK_ID = op.OVERPACK_ID and apio.AWB_NO = op.AWB_NO 
	    and apio.AWB_DATE = op.AWB_DATE
	    join EXP_DGD dgd on dgd.APIO_ID = apio.APIO_ID and  dgd.OP_ON = op.OVERPACK_ID  and dgd.AWB_NO = apio.AWB_NO 
	    and TO_CHAR(dgd.AWB_DATE,'DDMONYY') = TO_CHAR(apio.AWB_DATE,'DDMONYY')
	    where
	    op.AWB_NO = #awbNo#
	    and op.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')	
	    and op.OVERPACK_ID = #overpack#
	</select>
	
	<select id="getOverpackPkgs"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.Integer">
		select decode(SUM(dgd.PKG_PCS),null,'0',SUM(dgd.PKG_PCS))
	    from EXP_DGD_OP op
	    join EXP_DGD_APIO apio on apio.OVERPACK_ID = op.OVERPACK_ID and apio.AWB_NO = op.AWB_NO 
	    and apio.AWB_DATE = op.AWB_DATE
	    join EXP_DGD dgd on dgd.APIO_ID = apio.APIO_ID and  dgd.OP_ON = op.OVERPACK_ID  and dgd.AWB_NO = apio.AWB_NO 
	    and TO_CHAR(dgd.AWB_DATE,'DDMONYY') = TO_CHAR(apio.AWB_DATE,'DDMONYY')
	    where
	    op.AWB_NO = #awbNo#
	    and op.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')	
	    and op.OVERPACK_ID = #overpack#
	</select>
	
	<select id="getOverpackApioCount"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.Integer">
		select count(1)
	    from EXP_DGD_OP op
	    join EXP_DGD_APIO apio on apio.OVERPACK_ID = op.OVERPACK_ID and apio.AWB_NO = op.AWB_NO 
	    and apio.AWB_DATE = op.AWB_DATE
	    join EXP_DGD dgd on dgd.APIO_ID = apio.APIO_ID and  dgd.OP_ON = op.OVERPACK_ID  and dgd.AWB_NO = apio.AWB_NO 
	    and TO_CHAR(dgd.AWB_DATE,'DDMONYY') = TO_CHAR(apio.AWB_DATE,'DDMONYY')
	    where
	    op.AWB_NO = #awbNo#
	    and op.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')	
	    and op.OVERPACK_ID = #overpack#
	    and apio.APIO_ID = #apio#    
	</select>
	
	<select id="getApioCount"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.Integer">    
       select count(1)
	    from EXP_DGD_APIO apio 
	    join EXP_DGD dgd on dgd.APIO_ID = apio.APIO_ID and dgd.AWB_NO = apio.AWB_NO 
	    and TO_CHAR(dgd.AWB_DATE,'DDMONYY') = TO_CHAR(apio.AWB_DATE,'DDMONYY')
	    where
	    apio.AWB_NO =  #awbNo#
	    and apio.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	    and apio.APIO_ID = #apio#    
	    and apio.OVERPACK_ID is null	    
    </select>
    
    <select id="getApioPkgs"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.Integer">    
       select decode(SUM(dgd.PKG_PCS),null,'0',SUM(dgd.PKG_PCS))
	    from EXP_DGD_APIO apio 
	    join EXP_DGD dgd on dgd.APIO_ID = apio.APIO_ID and dgd.AWB_NO = apio.AWB_NO 
	    and TO_CHAR(dgd.AWB_DATE,'DDMONYY') = TO_CHAR(apio.AWB_DATE,'DDMONYY')
	    where
	    apio.AWB_NO =  #awbNo#
	    and apio.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	    and apio.APIO_ID = #apio#    
	    and apio.OVERPACK_ID is null	    
    </select>
    
    <select id="getOverpackUnidCount"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.Integer">
		select count(1)
	    from EXP_DGD_OP op   
	    join EXP_DGD dgd on dgd.OP_ON = op.OVERPACK_ID and  dgd.AWB_NO = op.AWB_NO 
	    and TO_CHAR(dgd.AWB_DATE,'DDMONYY') = TO_CHAR(op.AWB_DATE,'DDMONYY')
	    where
	    op.AWB_NO =  #awbNo#
	    and op.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	    and dgd.APIO_ID is null
      	and op.OVERPACK_ID = #overpack#	   
	</select>
	
	<select id="getOverpackUnidPkgs"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.Integer">
	 select decode(SUM(dgd.PKG_PCS),null,'0',SUM(dgd.PKG_PCS))
	    from EXP_DGD_OP op   
	    join EXP_DGD dgd on dgd.OP_ON = op.OVERPACK_ID and  dgd.AWB_NO = op.AWB_NO 
	    and TO_CHAR(dgd.AWB_DATE,'DDMONYY') = TO_CHAR(op.AWB_DATE,'DDMONYY')
	    where
	    op.AWB_NO =  #awbNo#
	    and op.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	    and dgd.APIO_ID is null
      	and op.OVERPACK_ID = #overpack#
	</select>	
		
	<insert id="insertExpNOTOCAWB" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO">
		insert into EXP_NOTOC_AWB(TR_NO,FLT_KEY,FLT_DATE,AWB_NO,AWB_DATE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
		values (#trNo#,#fltKey#,TO_DATE(#fltDate#,'DDMONYY'),#awbNo#,TO_DATE(#awbDate#,'DDMONYY'),
		#lmUserId#,SYSDATE,#lmUserId#,SYSDATE)
	</insert>   
	
	<insert id="insertExpNOTOCAWBULD" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO">
		insert into EXP_NOTOC_AWB_ULD(TR_NO,ULD_KEY,LM_DATE,CR_USER_ID,CR_DATE,LM_USER_ID,POSITION)
		values (#trNo#,#uldNo#,SYSDATE,#lmUserId#,SYSDATE,#lmUserId#,#position#)
	</insert>
	
	<update id="updateExpNOTOCAWBULD" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO">
		update EXP_NOTOC_AWB_ULD
		set POSITION = #position#,
		LM_DATE = SYSDATE,
		LM_USER_ID =#lmUserId#
		where TR_NO = #trNo#
		and ULD_KEY = #uldNo#			
	</update>	
	
	<insert id="insertExpNOTOCUN" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO">
		insert into EXP_NOTOC_UN(LM_USER_ID,CR_DATE,DOC_LINE_NO,TR_NO,ULD_KEY,LM_DATE,
		LOAD_QTY,CR_USER_ID,APIO_ID,OVERPACK_ID,UN_TR_NO) 
		values (#lmUserId#,SYSDATE,#doclineNo#,#trNo#,#uldNo#,SYSDATE,
		#loadPkg#,#lmUserId#,#apio#,#overpack#,#unTrNo#)
	</insert>
	
	<select id="getDGDULDLoadPkg"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="cargo.cms.export.bo.NOTOCWorksheetBO" >
		  select 
		  DECODE(LOAD_QTY,'0','',LOAD_QTY) loadPkg,
		  DOC_LINE_NO doclineNo
		  FROM EXP_NOTOC_UN
		  where TR_NO = #trNo#
		  and ULD_KEY = #uldNo#
			<isNotEmpty property="isOPAPIOUNID">
			<isEqual compareValue="YES" property="isOPAPIOUNID">
				and OVERPACK_ID = #overpack#
				and APIO_ID = #apio#
				and UN_TR_NO = #unTrNo#
			</isEqual>
			</isNotEmpty>
			
			<isNotEmpty property="isOPUNID">
			<isEqual compareValue="YES" property="isOPUNID">
				and OVERPACK_ID = #overpack#
				and APIO_ID is null
				and UN_TR_NO = #unTrNo#
			</isEqual>
			</isNotEmpty>
			
			<isNotEmpty property="isAPIOUNID">
			<isEqual compareValue="YES" property="isAPIOUNID">
				and OVERPACK_ID is null
				and APIO_ID = #apio#
				and UN_TR_NO = #unTrNo#
			</isEqual>
			</isNotEmpty>
			
			<isNotEmpty property="isUNID">
			<isEqual compareValue="YES" property="isUNID">
				and OVERPACK_ID is null
				and APIO_ID is null
				and UN_TR_NO = #unTrNo#
			</isEqual>
			</isNotEmpty> 	  	  
	</select>
	
	
	<select id="sqlFetchNOTOCDGLoadPksDtls" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.String">
		SELECT 
			B.LOAD_QTY as loadPkg 
		FROM 
			EXP_PMANIFEST_ULD_AWB A, EXP_PMANIFEST_ULD_AWB_UN B 
		WHERE 
			B.TR_NO=A.TR_NO AND A.AWB_NO=#awbNo# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND A.FLT_KEY=#fltKey# AND 
			A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND A.ULD_BT_NO=#uldNo# 
			AND B.OVERPACK_ID=#unid#
			<isNotEmpty property="unldgPt">
				AND A.UNLDG_PT=#unldgPt# 
			</isNotEmpty>		
	</select>	
	
	<update id="updateExpNOTOCUN" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO">
		update EXP_NOTOC_UN
		set LOAD_QTY = #loadPkg#,
		LM_DATE = SYSDATE,
		LM_USER_ID =#lmUserId#
		where TR_NO = #trNo#
		and ULD_KEY = #uldNo#
		and DOC_LINE_NO = #doclineNo#		
	</update>	
	
	<select id = "checkNotocUnExists"  parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.Integer">
		select count(1) from EXP_NOTOC_UN 
		where TR_NO = #trNo#
		and ULD_KEY = #uldNo#
			<isNotEmpty property="overpack">
				AND OVERPACK_ID=#overpack# 
			</isNotEmpty>	
				<isNotEmpty property="apio">
				AND APIO_ID=#apio# 
			</isNotEmpty>	
				<isNotEmpty property="unTrNo">
				AND UN_TR_NO=#unTrNo# 
			</isNotEmpty>			 
	</select>	
		
	<insert id="insertExpNOTOCSPL" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO">
		insert into EXP_NOTOC_SPL(TR_NO,ULD_KEY,SPL_CODE,LM_DATE,CR_USER_ID,CR_DATE,LM_USER_ID,PC,QU)
		values (#trNo#,#uldNo#,#shc#,SYSDATE,#lmUserId#,SYSDATE,#lmUserId#,#pc#,#unit#)
	</insert>
	
	<update id="updateExpNOTOCSPL" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO">
		update EXP_NOTOC_SPL
		set PC = #pc#,
		QU = #unit#,
		LM_DATE = SYSDATE,
		LM_USER_ID =#lmUserId#
		where TR_NO = #trNo#
		and ULD_KEY = #uldNo#
		and SPL_CODE = #shc#		
	</update>	
	
	<delete id="deleteNOTOCSHCULD" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO">
		DELETE FROM  EXP_NOTOC_SPL		
		where TR_NO = #trNo#
		and ULD_KEY = #uldNo#				
	</delete>	
	
	<select id = "checkFlightManifested" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		select count(1) from flt_opr_events 
		where FINAL_MANF_DATE IS NOT NULL 
		AND FINAL_MANF_USER_ID IS NOT NULL 
		AND FINAL_MANF_IND = 'Y'
		AND FLT_TYPE = 'D'
		AND FLT_KEY = #fltKey# 
		AND SCH_DATE = TO_DATE(#fltDate#,'DDMONYY') 
	</select>	
	
	<select id="getNOTOCAWBSequence" resultClass="java.lang.Integer">
     	  select EXP_NOTOC_AWB_SEQ.NEXTVAL from dual	 	 
	</select>
	
	
	<select id="getNOTOCSHCWHInd" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.String">
		select 
		DECODE(shc.WH_IND,'Y',shc.WH_IND,'N') whInd
		from 
		EXP_PMANIFEST_ULD_AWB_SHC shc
		join EXP_PMANIFEST_ULD_AWB uld on
		shc.TR_NO = uld.TR_NO
		where
		shc.SHC = #shc#
		and uld.AWB_NO =  #awbNo#
		and uld.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		and uld.FLT_KEY = #fltKey#
		and uld.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		<isNotEmpty property="unldgPt">
			and uld.UNLDG_PT =#unldgPt#	 
		</isNotEmpty>   
	</select>	
	
	<select id="getMaxDocLineNumberExpNotocUn" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.Integer">
		select DECODE(max(DOC_LINE_NO),NULL,0,max(DOC_LINE_NO))
		from EXP_NOTOC_UN 
		WHERE TR_NO=#trNo# 
		AND ULD_KEY=#uldNo#
	</select>
	
	<select id="fetchWHIndForDGDtlsByAwb" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.String">
		SELECT 
			B.WH_IND AS whInd 
		FROM 
			EXP_PMANIFEST_ULD_AWB A, EXP_PMANIFEST_ULD_AWB_UN B 
		WHERE 
			B.TR_NO=A.TR_NO AND A.AWB_NO=#awbNo# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND A.FLT_KEY=#fltKey# AND 
			A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')
	</select>
    <!--  Added By Santosh Desai for Iteration 3a NOTOC Worksheet END -->
    
    
    
<!-- Added By Manorama for Enquire Return Cargo SRF:::: Starts -->
<select id="createcargoenquirelist" parameterClass="cargo.cms.export.bo.DocumentSearchBO" 
	resultClass="cargo.cms.export.bo.CargoStorageBO" >
select DISTINCT H.RTN_NO rtnNo,H.srf_no srfNo,H.AWB_NO as awbNo,to_char(H.awb_date,'DDMONYY HH24:MI') as awbDate,
(SELECT cc_code
     FROM v_cst_cc_code_ALL
    WHERE AWB_NO=H.AWB_NO AND AWB_DATE = H.AWB_DATE
    and rownum = 1
  )latestCC,A.content as cont,H.uld_key uldKey,
  (select sum(RCL_RTN_PC) from EXP_RTN_rcl where RTN_NO = H.RTN_NO) as retPc,to_char(T.CR_DATE,'DDMONYY HH24:MI') crDate,
  (select to_char(sum(RCL_RTN_WT),'99999999999.99') from EXP_RTN_rcl where RTN_NO = H.RTN_NO) as retWt
  from EXP_RTN_HD H LEFT JOIN EXP_RTN_DTL D ON D.RTN_NO = H.RTN_NO and D.awb_no = H.awb_no 
and D.awb_date = H.awb_date
left join EXP_RTN_RCL T on T.rtn_no = H.rtn_no 
left join EXP_RCL_HD R on T.rcl_no = R.rcl_no 
left join AWB A on A.awb_no = H.awb_no and 
A.awb_date = H.awb_date
where H.srf_no =#srfNo#
</select>
<select id="rclDetails" parameterClass="cargo.cms.export.bo.CargoStorageBO" 
	resultClass="cargo.cms.export.bo.CargoStorageBO" >
	select r.rcl_no rclNo,
		   h.rtn_no rtnNo,
		   r.RCL_RTN_PC retPcs,
		   to_char(r.RCL_RTN_WT,'99999999999.99')  retWt,
		   h1.PPK_TYPE pkgType,
		   to_char(h1.RCL_DATE,'DDMONYY HH24:MI') rclDate,
		   h1.RCL_PCS rclPc,
		   h1.RCL_WT rclWt,
		   pkg_exp_billing.get_return_storage_amt(h.rtn_no,r.rcl_no) storageAmt,
		   r.strg_amt savedStrgAmt,
		   pkg_exp_val.get_exp_awb_cc_code(h.awb_no) latestCC
from exp_rtn_hd h left join exp_rtn_rcl r on h.rtn_no = r.rtn_no
left join exp_rcl_hd h1 on r.rcl_no = h1.rcl_no
where h.rtn_no = #rtnNo#
</select>

<select id="storeDetails" parameterClass="cargo.cms.export.bo.CargoStorageBO" 
	resultClass="cargo.cms.export.bo.CargoStorageBO" >
	select CONCAT(CONCAT(SUBSTR(d.awb_no,0,3),'-'),SUBSTR(d.awb_no,4)) listAwbNo,d.awb_no lockAwbNo, TO_CHAR(d.awb_date, 'DDMONYY') lockAwbDate,d.loc_code locCode,d.ULD_KEY uldKey,d.LSP_NO lspNo,decode(d.PCS,null,'0',d.PCS) pc,decode(d.wt,null,'0.0',d.wt) wt
from exp_rtn_hd h left join exp_rtn_dtl d on h.rtn_no = d.rtn_no
where h.rtn_no =  #rtnNo#
</select>

<select id="allOtherDetails" parameterClass="cargo.cms.export.bo.DocumentSearchBO" 
	resultClass="cargo.cms.export.bo.CargoStorageBO" >
select SHIPPER_NAME shprName,AGENT_NAME agtName,decode(WAVR_CHARGE_YN,null,'N',WAVR_CHARGE_YN) waiveChrg,COLL_HKID recCode,COLL_NAME recName,IATA_CODE iataCode,
RMK rmk,TRUCK_NO truckNo
from exp_rtn_hd
where srf_no = #srfNo#
</select>
<select id="getSrfStatus" parameterClass="java.lang.String" 
	resultClass="java.lang.String" >
select status from imp_srf 
where srf_no = #srfNo#
</select>
<!-- Added By Manorama for Enquire Return Cargo SRF:::: Ends -->
<!-- Added by Manorama for Super Urgent Cargo:::Bug Fix -->
<select id="validFlights" parameterClass="cargo.cms.export.bo.SuperUrgentResultBO" resultClass="java.lang.Integer" >
select count(0) from flt_opr where FLT_KEY =#fltKey# AND FLT_TYPE='D' AND SCH_DATE = TO_DATE( #fltDate#, 'DDMONYY')
</select>

<!--  Added by Surendra Gollapalli Iteration 3 for Void RCL START -->
<select id="void_rcl_email_list" parameterClass="java.lang.String" 
			resultClass="cargo.cms.export.bo.CustContactBO">
		SELECT 
			C.EMAIL1 AS email1, 
			C.EMAIL2 AS email2, 
			C.EMAIL3 AS email3, 
			C.EMAIL4 AS email4, 
			C.EMAIL5 AS email5,
			C.FAX1 AS fax1, 
			C.FAX2 AS fax2, 
			C.FAX3 AS fax3, 
			C.FAX4 AS fax4, 
			C.FAX5 AS fax5	FROM EXP_RCL_HD  A JOIN CUST_CONTACT C ON 
			A.CUST_NO = C.CUST_NO AND C.CONTACT_TYPE = 'MRC'  WHERE A.RCL_NO = #PARAM#

	</select>
	<select id="getIssueRclHDDtl" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		select a.PPK_TYPE as pkgType,
		      a.RCL_NO as rclNum,
		      a.AWB_NO as awbNum,
		      TO_CHAR(a.AWB_DATE , 'DDMONYY') AS awbDate,      
		      a.ACCPT_MODE as accptMode ,
		      a.FLT_KEY as fltKey ,
		      TO_CHAR(a.FLT_DATE, 'DDMONYY') as fltDate ,
		      a.ULD_KEY as uldKey ,
		      a.RCL_PCS as rclPcs ,
		      a.RCL_WT as rclWt            
      from exp_rcl_hd a 
      where a.rcl_no = #rclNum#
	</select>
	<select id="getIssueRclHDDtlNewRecord" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		select 	a.RCL_NO as rclNum,			
			    a.VOID_USER_ID as voidUser,			 
				TO_CHAR( a.VOID_DATE , 'DDMONYY') AS voidDate,
				a.VOID_FROM as voidFrom ,
				 TO_CHAR( a.LM_DATE , 'DDMONYY') AS lmDate,
				a.void_rmk as rmk,
				a.PRE_RCL_NO as preRclNo ,			 
		        a.AWB_NO as awbNum,
		         TO_CHAR(a.AWB_DATE , 'DDMONYY') AS awbDate,      
		        a.ACCPT_MODE as accptMode,
		        a.FLT_KEY as fltKey,
		          TO_CHAR(a.FLT_DATE , 'DDMONYY') AS fltDate,
		        a.ULD_KEY as uldKey,
		        a.RCL_PCS as rclPcs,
		        a.RCL_WT as rclWt
             from exp_rcl_hd a 
             where a.rcl_no =#rclNum#
	</select>
	
	<select id="check_rcl_no_is_reject"   parameterClass="java.lang.String" resultClass="java.lang.Integer">
   <![CDATA[
    select count(1) from exp_rcl_hd where reject_ind ='N' and rcl_no = #rclNum#
   ]]>
 </select>
 	<select id="sqlFetchIsCarCreated" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="java.lang.Integer">
 		SELECT COUNT(1) FROM AWB WHERE CAR_YN='Y' AND AWB_NO=#awbNum# AND AWB_DATE=TO_DATE((SELECT NVL(pkg_common.get_awb_date(#awbNum#, 'E'), 
 			TRUNC(SYSDATE)) FROM DUAL), 'DDMONYY')
 	</select>
	<select id="check_uld_is_assigned_to_flight"   parameterClass="java.lang.String" resultClass="java.lang.Integer">
 	SELECT count(1) FROM ULD_INVENTORY U
		JOIN FLT_OPR F ON U.FLT_KEY = F.FLT_KEY AND U.FLT_DATE = F.SCH_DATE AND F.FLT_TYPE = decode(U.FLT_TYPE,'E','D','A')
    JOIN exp_rcl_dtl R ON R.RCL_NO=#rclNum#
		WHERE U.ULD_KEY=R.ULD_KEY AND (U.FLT_TYPE = 'E' AND U.FLT_KEY IS NOT NULL) AND F.FLT_KEY IS NOT NULL
 	</select>
<!--  Added by Surendra Gollapalli Iteration 3 for Void RCL END -->

<!-- Maintain Export CAR Start-->
 	<select id="exp_mcar_cataloglist"  parameterClass="java.lang.Object" resultClass="cargo.cms.imprt.bo.CatalogBO">
		SELECT CODE AS catalogCode,CODE_DESC AS catalogName FROM MAST_CODE_DTL 
		WHERE CODE_TYPE = 'CATALOG' AND CODE IN ('EG','EO','ES','EU','TI','TG','TR','TM') 
		order by CODE
	</select>
	<update id="update_imp_car_awb_exp_car" parameterClass="cargo.cms.export.bo.ExpCarBO">
		update IMP_CAR_AWB set CSGNE_NAME  = #consigneeName# ,
		LM_USER_ID  = #lastModUserId#, LM_DATE = SYSDATE,
		CSGNE_ADDR1 = #consAddrOne#,	
		CSGNE_ADDR2 = #consAddrTwo#,	
		CSGNE_ADDR3 = #consAddrThree#,	
		CSGNE_ADDR4 = #consAddrFour#,	
		CSGNE_PLACE = #consCity#,	
		CSGNE_PIN_CODE = #consPin#,	
		CSGNE_CTRY_CODE = #consCountry#,
		SHPR_ADD1 = #shprAddrOne#,
		SHPR_ADD2 = #shprAddrTwo#,
		SHPR_ADD3 = #shprAddrThree#,
		SHPR_ADD4 = #shprAddrFour#,
		SHPR_NAME = #shprName#, 
		SHPR_PLACE = #shprCity#,
		SHPR_CTRY_CODE =#shprCountry#,
		SHPR_PIN_CODE = #shprPin#,
		AIRLN_RMK = #airlRemark#,
		SPL_CODE1= #splCode1#,
		SPL_CODE2= #splCode2#,
		SPL_CODE3= #splCode3#,
		SPL_CODE4= #splCode4#,
		SPL_CODE5= #splCode5#,
		SPL_CODE6= #splCode6#,
		SPL_CODE7= #splCode7#,
		SPL_CODE8= #splCode8#,
		SPL_CODE9= #splCode9#,
		lock_ind = #awbLock#,
		AWB_ORIGIN= #origin#,
		AWB_DEST=#dest#,
		TR_TYPE = 'DUMMY' 
		Where AWB_NO = #awb# and AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	</update>

	<delete id="delete_awb_rmk_expcar" parameterClass="map">
		delete from awb_rmk where awb_no=#awb# AND RMK_TYPE='AWB_RMK'
	</delete>
	<select id="expireKCNo" parameterClass="map" resultClass="java.lang.Integer">
		<![CDATA[
			Select count(1) from cust_agent_KC 
			where cust_no = (select code from cust_company where code_desc = #agentName# ) and 
			KC_no = #kcNumber# and eff_date_to < sysdate
		]]>
	</select>
	<select id="sqlGetAgentCodeforExp" parameterClass="java.lang.String" resultClass="java.lang.String">
	 	select code_desc as agentName from CUST_COMPANY  
	 	WHERE active = 'Y' AND AGENT_YN = 'Y' AND BLACKLISTED='N' AND ROWNUM=1 
		AND	CODE=#PARAM#
	</select>
	<select id="sqlGetAgentNameforExp" parameterClass="java.lang.String" resultClass="java.lang.String">
	 	select code as agentCode from CUST_COMPANY  
	 	WHERE active = 'Y' AND AGENT_YN = 'Y' AND BLACKLISTED='N' AND ROWNUM=1 
		AND	CODE_DESC=#PARAM#
	</select>
	<select id="sqlGetACNoofAgntforExpCAR" parameterClass="java.lang.String" resultClass="java.lang.String">
	 	select AC_NO as acNo
    	from CUST_AGENT_AC ca, CUST_COMPANY  cc
	 	WHERE active = 'Y' AND AGENT_YN = 'Y' AND BLACKLISTED='N' AND ROWNUM=1 
		AND	CODE_DESC=#PARAM# and ca.cust_no = cc.code
	</select>
	
	<select id="chkAWBCloseForCAR"  parameterClass="cargo.cms.export.bo.CARSearchBO"  resultClass="java.lang.String">
		SELECT COUNT(1) FROM AWB WHERE AWB_NO = #awb#	AND awb_type in ('T','E') AND AWB_CLOSED_YN = 'Y'
	</select>
	
	<select id="getCARDetailsAWB"  parameterClass="cargo.cms.export.bo.CARSearchBO"  resultClass="cargo.cms.export.bo.ExpCarBO">
    	SELECT 
			a.CATALOG catalog,
			(SELECT 
		          (CASE WHEN decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		          (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = C.CARR_CODE AND (SPLCODE.SPL_CODE = c.SPL_CODE1 OR SPLCODE.SPL_CODE = c.SPL_CODE2 OR SPLCODE.SPL_CODE = c.SPL_CODE3 OR SPLCODE.SPL_CODE = c.SPL_CODE4 OR SPLCODE.SPL_CODE = c.SPL_CODE5 OR SPLCODE.SPL_CODE = c.SPL_CODE6 OR SPLCODE.SPL_CODE = c.SPL_CODE7 OR SPLCODE.SPL_CODE = c.SPL_CODE8 OR SPLCODE.SPL_CODE = c.SPL_CODE9)) > 0
		          THEN 'Q' ELSE decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		          ELSE decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		       FROM AWB C WHERE  C.AWB_NO=A.AWB_NO AND C.AWB_DATE=A.AWB_DATE) as cargoType,	
			c.SHPR_NAME shprName,
			c.SHPR_ADDR shprAddrOne,
			c.SHPR_PLACE shprCity,
			c.SHPR_CTRY_CODE shprCountry,
			c.SHPR_PIN_CODE shprPin,
			c.CSGNE_NAME consigneeName,
			c.CSGNE_ADDR consAddrOne,
			c.CSGNE_PLACE consCity,
			c.CSGNE_CTRY_CODE consCountry,
			c.CSGNE_PIN_CODE consPin,
			c.shpr_addr2 as shprAddrTwo,
			c.csgne_addr2 as consAddrTwo,			
			decode(a.agent_name,null,a.AGENT_CODE, (select code from cust_company where code_desc=a.agent_name)) agentCode,
			a.agent_name AS agentName,
			a.AWB_NO awb,
			TO_CHAR(a.AWB_DATE, 'DDMONYY') AS awbDate,
			a.awb_type as awbType,
			a.ORIG origin,
			a.DEST dest,
			nvl(c.PCS, (select pcs from exp_car where awb_no=#awb# and awb_date = to_date(#awbDate#,'DDMONYY') and catalog='TM')) pcs,
			nvl(c.WGT, (select wt from exp_car where awb_no=#awb# and awb_date = to_date(#awbDate#,'DDMONYY') and catalog='TM')) wt,
			(a.RCL_PCS-nvl(a.RTN_PCS,0)) rcvPcs,
			a.pman_pcs pmanPcs,
			a.pman_wt pmanWt,
			a.CONTENT content,
			(a.RCL_WT-nvl(a.RTN_WT,0)) rcvWt,
			a.car_yn carCreated,
			c.RA_NO raNo,
			c.agent_iata_addr as cassCode,
			Decode((select awb_frz_yn from exp_doc_recd where awb_no=#awb# and awb_date = to_date(#awbDate#,'DDMONYY')),null,'N',
			(select awb_frz_yn from exp_doc_recd where awb_no=#awb# and awb_date = to_date(#awbDate#,'DDMONYY'))) docRecdInd,
			a.SPL_CODE1 splCode1,
			a.SPL_CODE2 splCode2,
			a.SPL_CODE3 splCode3,
			a.SPL_CODE4 splCode4,
			a.SPL_CODE5 splCode5,
			a.SPL_CODE6 splCode6,
			a.SPL_CODE7 splCode7,
			a.SPL_CODE8 splCode8,
      		a.SPL_CODE9 splCode9,
			a.CARR_CODE carrCode,	
			a.CARR_CODE oldCarrierCode,			
			DECODE((select RMK from awb_rmk where awb_no=#awb# AND RMK_TYPE='AWB_RMK' and rownum =1),null,
			A.AIRLN_RMK, 
			(select RMK from awb_rmk where awb_no=#awb# AND RMK_TYPE='AWB_RMK' and rownum =1)) airlRemark,
			DECODE((select RMK from awb_rmk where awb_no=#awb# AND RMK_TYPE='AWB_RMK' and rownum =1),null,
			A.AIRLN_RMK, (select RMK from awb_rmk where awb_no=#awb# AND RMK_TYPE='AWB_RMK' and rownum =1)) oldAirlRemark,
			(select min_hold_hr from mast_carrier where code=a.CARR_CODE and rownum=1) hldgPeriod ,
			'' as vkcCode,
			a.AWB_RMK whRemark,
			decode(a.accept_mode, 
				'LCA', 'Local Export', 
				'LDM', 'Dummy',
				'LIT', 'Inter Terminal Local Transfer',
				'TIT', 'Inter Terminal Transhipment',
				'TTT', 'Tarmac Transfer', 
				'TIH', 'Online Transhipment',
				'LOB', 'OBC',
				'LDS', 'Direct Shipper',
				'TIL', 'Inhouse Transshipment',
				'TRN','Transhipment' ,
				'Tarmac Transfer','Tarmac Transfer',
				' ') AS acceptMode ,
				a.EXPCAR_YN intelliCheckInd ,
				(case when (select COUNT(1) from exp_rcl_hd where awb_no=a.AWB_NO and awb_date=a.AWB_DATE)=0 THEN
	         'NA'
	         when (select COUNT(1) from exp_rcl_hd where awb_no=a.AWB_NO and awb_date=a.AWB_DATE and SEC_CHECK='Y')>0 then
	         'Y'
	         else
	         'N' end
	     		 ) agentSecCheck,
	     		 c.PPD_TOTAL_WT_AMT ppAmt1,  c.PPD_VALUE_VC_AMT ppAmt2,c.PPD_TAXES_TX_AMT ppAmt3,c.PPD_TOTAL_OA_AMT ppAmt4,c.PPD_TOTAL_OC_AMT ppAmt5,
		     c.COL_TOTAL_WT_AMT ccAmt1, c.COL_VALUE_VC_AMT ccAmt2,c.COL_TAXES_TX_AMT ccAmt3,c.COL_TOTAL_OA_AMT ccAmt4,c.COL_TOTAL_OC_AMT ccAmt5,
		     a.EXP_AWB_LOCK as awbLock,
		     a.EXP_AWB_LOCK as oldAwbLock,
		     decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE1),0,'N','Y') as shcVal1, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE2),0,'N','Y') as shcVal2, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE3),0,'N','Y') as shcVal3, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE4),0,'N','Y') as shcVal4, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE5),0,'N','Y') as shcVal5, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE6),0,'N','Y') as shcVal6, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE7),0,'N','Y') as shcVal7, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE8),0,'N','Y') as shcVal8, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE9),0,'N','Y') as shcVal9,
		FUN_GET_AWB_UPLIFT_PRIORITY(A.AWB_NO,A.AWB_DATE) upliftPriority,
		FUN_GET_AWB_UPLIFT_PRIORITY(A.AWB_NO,A.AWB_DATE) oldUpliftPriority,
		a.TSA_PASS_IND as tsaPassDispInd,
		a.CARR_RA as carrRADispInd,
		(select nvl(CARR_RF_RA,'N') from MAST_CARRIER where code = a.carr_code) as rfRaCarrConfig,
		NVL(A.HAWB_IND,'N') AS hawbVerified
		FROM AWB a , v_edi_fwb c
		WHERE a.AWB_NO = c.AWB_NO(+)
		and a.AWB_DATE = c.AWB_DATE(+)		
		AND a.AWB_CLOSED_YN = 'N'		
		AND a.AWB_NO = #awb#
		AND trim(a.AWB_DATE) = to_date(#awbDate#,'DDMONYY')
   	</select>
   	
		
<select id="getCARDetailsEXP_CAR"  parameterClass="cargo.cms.export.bo.CARSearchBO"  resultClass="cargo.cms.export.bo.ExpCarBO">		
		SELECT 
			a.AWB_NO awb,
			TO_CHAR(a.AWB_DATE, 'DDMONYY') AS awbDate,
			b.awb_Type awbType,
			a.AWB_PRFX awb1, 
			a.HANDLER_CODE handlerCode,
			a.CATALOG catalog,
			a.CATALOG oldcatalog,			
			(SELECT 
		          (CASE WHEN decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		          (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = C.CARR_CODE AND (SPLCODE.SPL_CODE = c.SPL_CODE1 OR SPLCODE.SPL_CODE = c.SPL_CODE2 OR SPLCODE.SPL_CODE = c.SPL_CODE3 OR SPLCODE.SPL_CODE = c.SPL_CODE4 OR SPLCODE.SPL_CODE = c.SPL_CODE5 OR SPLCODE.SPL_CODE = c.SPL_CODE6 OR SPLCODE.SPL_CODE = c.SPL_CODE7 OR SPLCODE.SPL_CODE = c.SPL_CODE8 OR SPLCODE.SPL_CODE = c.SPL_CODE9)) > 0
		          THEN 'Q' ELSE decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		          ELSE decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		       FROM AWB C WHERE  C.AWB_NO=A.AWB_NO AND C.AWB_DATE=A.AWB_DATE) as cargoType,			
			NVL(b.CARR_CODE, a.CARR_CODE) carrCode,
			a.CARR_CODE oldCarrierCode,	
			a.TRNS_CARR_CODE trnsCarrCode,
			a.ORIGIN origin,
			a.DEST dest,
			a.PCS pcs,
			a.WT wt,
			a.PCS oldPcs,
			a.WT oldWt,
			(b.RCL_PCS-nvl(b.RTN_PCS,0)) rcvPcs,
			(b.RCL_WT-nvl(b.RTN_WT,0)) rcvWt,
			b.pman_pcs pmanPcs,
			b.pman_wt pmanWt,
			b.car_yn carCreated,
			Decode((select awb_frz_yn from exp_doc_recd where awb_no=#awb# and awb_date = to_date(#awbDate#,'DDMONYY')),null,'N',
			(select awb_frz_yn from exp_doc_recd where awb_no=#awb# and awb_date = to_date(#awbDate#,'DDMONYY'))) docRecdInd,
			a.CONTENT content,
			a.shpr_name AS shprName,
			a.agent_name AS agentName,
			decode(a.agent_name,null,a.AGENT_CODE, (select code from cust_company where code_desc=a.agent_name)) agentCode,
			a.AC_CODE acCode,
			a.DIRECT_SHIPPER directShipper,
			(select co_iata_code from cust_company c where a.agent_name = c.code_desc) AS iataCode,
			a.SPL_CODE1 splCode1,
			a.SPL_CODE2 splCode2,
			a.SPL_CODE3 splCode3,
			a.SPL_CODE4 splCode4,
			a.SPL_CODE5 splCode5,
			a.SPL_CODE6 splCode6,
			a.SPL_CODE7 splCode7,
			a.SPL_CODE8 splCode8,
      		a.SPL_CODE9 splCode9,
			b.AWB_RMK remarks,
			a.SECURITY_OPTION securityOption,
			a.EXEMPTION_CODE exemptionCode,
			a.SEC_RMK secRemarks,
			a.SEC_RC_CODE raNo,
			a.SEC_KC_CODE kcNo,
			a.CR_USER_ID crUserId,
			a.CR_DATE crDate,
			a.LM_USER_ID lastModUserId,
			a.LM_DATE lastModDate,
			decode(a.accept_mode, 
				'LCA', 'Local Export', 
				'LDM', 'Dummy',
				'LIT', 'Inter Terminal Local Transfer',
				'TIT', 'Inter Terminal Transhipment',
				'TTT', 'Tarmac Transfer', 
				'TIH', 'Online Transhipment',
				'LOB', 'OBC',
				'LDS', 'Direct Shipper',
				'TIL', 'Inhouse Transshipment',
				'TRN', 'Transhipment',
				' ') AS acceptMode,
        	a.SHPR_ADDR shprAddrOne,
			a.SHPR_ADDR2 shprAddrTwo,
			a.SHPR_ADDR3 shprAddrThree,
			a.SHPR_ADDR4 shprAddrFour,
			a.SHPR_PLACE shprCity,
			a.SHPR_CTRY_CODE shprCountry,
			a.SHPR_PIN_CODE shprPin,
			a.CSGNE_NAME consigneeName,
			a.CSGNE_ADDR consAddrOne,
			a.CSGNE_ADDR2 consAddrTwo,
			a.CSGNE_ADDR3 consAddrThree,
			a.CSGNE_ADDR4 consAddrFour,
			a.CSGNE_PLACE consCity,
			a.CSGNE_CTRY_CODE consCountry,
			a.CSGNE_PIN_CODE consPin,
			a.AGENT_CODE agentCode,
			b.EXP_AWB_LOCK awbLock,
			b.EXP_AWB_LOCK oldAwbLock,
			a.AIRL_RMK airlRemark,
			a.AIRL_RMK oldAirlRemark,
			a.WH_RMK whRemark,
			decode(a.HLDG_PERIOD,null,(select min_hold_hr from mast_carrier where code=a.CARR_CODE and rownum=1), a.HLDG_PERIOD) hldgPeriod ,
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE1),0,'N','Y') as shcVal1, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE2),0,'N','Y') as shcVal2, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE3),0,'N','Y') as shcVal3, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE4),0,'N','Y') as shcVal4, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE5),0,'N','Y') as shcVal5, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE6),0,'N','Y') as shcVal6, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE7),0,'N','Y') as shcVal7, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE8),0,'N','Y') as shcVal8, 
			decode((select COUNT(1) from CUST_AIRL_SPL_CODE where spl_type='SPL_VAL' and spl_code=A.SPL_CODE9),0,'N','Y') as shcVal9,
			(case when (select COUNT(1) from exp_rcl_hd where awb_no=a.AWB_NO and awb_date=a.AWB_DATE)=0 THEN
		         'NA'
		         when (select COUNT(1) from exp_rcl_hd where awb_no=a.AWB_NO and awb_date=a.AWB_DATE and SEC_CHECK='N' and status!='V')>0 then
		         'N'
		         else
		         'Y' end
		      ) agentSecCheck,
		     c.PPD_TOTAL_WT_AMT ppAmt1,  c.PPD_VALUE_VC_AMT ppAmt2,c.PPD_TAXES_TX_AMT ppAmt3,c.PPD_TOTAL_OA_AMT ppAmt4,c.PPD_TOTAL_OC_AMT ppAmt5,
		     c.COL_TOTAL_WT_AMT ccAmt1, c.COL_VALUE_VC_AMT ccAmt2,c.COL_TAXES_TX_AMT ccAmt3,c.COL_TOTAL_OA_AMT ccAmt4,c.COL_TOTAL_OC_AMT ccAmt5,
		     b.EXPCAR_YN intelliCheckInd,
		     a.SLAC slac,
		     a.SHPR_STATE_PROVINCE shipperState,
		     a.CSGNE_STATE_PROVINCE  consigneeState,
		     NVL(a.CASS_CODE, c.agent_iata_addr) cassCode,
		     FUN_GET_AWB_UPLIFT_PRIORITY(B.AWB_NO,B.AWB_DATE) upliftPriority,
		     FUN_GET_AWB_UPLIFT_PRIORITY(B.AWB_NO,B.AWB_DATE) oldUpliftPriority,
                     NVL(a.SPLIT_NOT_ALLOW,'N') as splitNotAllow,
		     NVL(a.SPLIT_NOT_ALLOW,'N') as oldsplitNotAllow,
		     a.DLS_REMARK as dlsRemarks,
		     b.TSA_PASS_IND as tsaPassDispInd,
		     b.CARR_RA as carrRADispInd,
		     (select nvl(CARR_RF_RA,'N') from MAST_CARRIER where code = b.carr_code) as rfRaCarrConfig,
		     a.vkc_code as vkcCode,
		     NVL(b.HAWB_IND,'N') AS hawbVerified,
                     nvl(a.CCA_YN,'N') as ccaId 
		FROM EXP_CAR a, AWB b
		left join v_edi_fwb c
    	on  b.AWB_NO = c.AWB_NO	and b.AWB_DATE = c.AWB_DATE and b.car_yn='N'
		WHERE a.AWB_NO = B.AWB_NO 
		AND TO_CHAR(a.AWB_DATE,'DDMONYY') = TO_CHAR(b.AWB_DATE,'DDMONYY')
		AND a.AWB_NO= #awb#
		AND a.AWB_DATE = to_date(#awbDate#,'DDMONYY') AND b.CAR_YN = 'Y' 
   	</select>
	<select id="get_car_cass_code" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.String">
		select agent_iata_addr from v_edi_fwb
    	where AWB_NO = #awb# and AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	
	<select id="getCARDetailsEXP_CAR_SLAC"  parameterClass="cargo.cms.export.bo.CARSearchBO"  resultClass="java.lang.String">
		SELECT EDI_FWB_DMN.RTD_SLAC as slac
		FROM EDI_FWB,EDI_FWB_DMN
		WHERE EDI_FWB_DMN.TR_NO=EDI_FWB.TR_NO
		AND EDI_FWB.TR_NO = (SELECT MAX(A.TR_NO) FROM EDI_FWB A WHERE A.AWB_NO = #awb#)
     	AND EDI_FWB_DMN.RTD_SLAC IS NOT NULL AND EDI_FWB_DMN.RTD_SLAC!=0 AND ROWNUM=1
	</select>
	
	<select id="checkAWBExistsEXP_CAR" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from exp_car where awb_no=#AWB# AND AWB_DATE =  to_date(#AWBDATE#,'DDMONYY')
	</select>
	
	<select id="checkAWBExistsEXP_CAR_SEC" parameterClass="map" resultClass="java.lang.String">
		SELECT to_char(COUNT(1)) 
		FROM exp_car_sec 
		WHERE awb_no=#AWB# 
		   AND AWB_DATE =  to_date(#AWBDATE#,'DDMONYY')
			AND DOC_LINE_NO = #lineNumber#
	</select>
	<select id="checkAWBExistsEXPCAR_AWBOwner" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) 
		FROM AWB_OWNER 
		WHERE awb_no=#awb# 
		   AND AWB_DATE =  to_date(#awbDate#,'DDMONYY')
			AND CARR_CODE = #carrCode# 
	</select>

<select id="checkAWBExistsinpman" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="java.lang.Integer">
	<![CDATA[
	SELECT COUNT(1) FROM (
	SELECT COUNT(1) AS cnt FROM EXP_PMANIFEST_AWB WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate#
	UNION ALL
	SELECT COUNT(1) AS cnt FROM EXP_PMAN_TARMAC_AWB WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate#) where cnt > 0
	]]>
	</select>
	<select id="checkDLSisFinalizedforcar" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="java.lang.Integer">
	<![CDATA[
	SELECT COUNT(1) FROM FLT_OPR_EVENTS WHERE DLS_FINAL_DATE IS NOT NULL AND FLT_KEY=#fltKey# AND SCH_DATE=TO_DATE(#fltDate#,'DDMONYY') AND FLT_TYPE='D'
	]]>
	</select>
	<select id="getTotalPmanPcWtforcar" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.ExpCarBO">
	<![CDATA[
	SELECT NVL(SUM(A.PMAN_PCS),0) AS pmanPcs,NVL(SUM(A.PMAN_WT),0) AS pmanWt FROM (
	SELECT NVL(SUM(PMAN_PCS),0) AS PMAN_PCS,NVL(SUM(PMAN_WT),0) AS PMAN_WT FROM EXP_PMANIFEST_AWB WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate#
	UNION ALL
	SELECT NVL(SUM(NVL(BULK_PCS,0)+NVL(PPK_PCS,0)),0) AS PMAN_PCS,NVL(SUM(NVL(BULK_WT,0)+NVL(PPK_WT,0)),0) AS PMAN_WT FROM EXP_PMAN_TARMAC_AWB WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate#) A
	]]>
	</select>
	<select id="checkAWBExistshavemulpmanflts" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.ExpCarBO">
	<![CDATA[
	SELECT DISTINCT FLT_KEY as fltKey,FLT_DATE as fltDate FROM (
	SELECT FLT_KEY AS FLT_KEY,TO_CHAR(FLT_DATE,'DDMONYY') AS FLT_DATE FROM EXP_PMANIFEST_AWB WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate#
	UNION ALL
	SELECT FLT_KEY AS FLT_KEY,TO_CHAR(FLT_DATE,'DDMONYY') AS FLT_DATE FROM EXP_PMAN_TARMAC_AWB WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate#) A
	]]>
	</select>
	<select id="getSpliNotAoowedInd" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
	SELECT NVL(SPLIT_NOT_ALLOW,'N') FROM EXP_CAR WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</select>
	
	<select id="checkanypmaninotherflight" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
	<![CDATA[
	SELECT COUNT(1) FROM (
	SELECT COUNT(1) AS cnt FROM EXP_PMANIFEST_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND (FLT_KEY != #fltKey# OR FLT_DATE !=#fltDate#)
	UNION ALL
	SELECT COUNT(1) AS cnt FROM EXP_PMAN_TARMAC_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND (FLT_KEY != #fltKey# OR FLT_DATE !=#fltDate#)) A WHERE A.cnt > 0
	]]>
	</select>
	<select id="getTotalPmanPcforcar" parameterClass="java.util.HashMap"  resultClass="java.util.HashMap">
	<![CDATA[
	SELECT NVL(SUM(A.PMAN_PCS)+nvl(#pmanPcs#,0),0) AS PMANPCS,NVL(SUM(A.PMAN_WT)+nvl(#pmanWt#,0),0) AS PMANWT FROM (
	SELECT NVL(SUM(NVL(BULK_PCS,0)+NVL(PPK_PCS,0)),0) AS PMAN_PCS,NVL(SUM(NVL(BULK_WT,0)+NVL(PPK_WT,0)),0) AS PMAN_WT FROM EXP_PMAN_TARMAC_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#) A
	]]>
	</select>
	<select id="getTotalbupPcforsplit" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
	<![CDATA[
	SELECT NVL(SUM(PMAN_PCS),0) AS pmanPcs FROM EXP_PMANIFEST_AWB WHERE FLT_KEY           =#fltKey# AND FLT_DATE            =#fltDate# AND AWB_NO              =#awbNo# AND AWB_DATE            =#awbDate# AND UNLDG_PT            =#unldgPt#
	]]>
	</select>

	<insert id="insertEXPCAR_AWBOwner" parameterClass="cargo.cms.export.bo.ExpCarBO">
		Insert into AWB_OWNER (AWB_NO,AWB_DATE,CARR_CODE,PCS,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,BU_PCS,OFFLOAD_PCS) 
		values (#awb#,to_date(#awbDate#,'DDMONYY'),#carrCode#,#pcs#,#wt#,#crUserId#,sysdate,#lastModUserId#,sysdate,null,null)
	</insert>
	<update id="updateEXPCAR_AWBOwner" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE AWB_OWNER SET PCS=(PCS-NVL(#oldPcs#,0)+#pcs#),WT=(WT-NVL(#oldWt#,0)+#wt#),LM_USER_ID=#lastModUserId#,LM_DATE=sysdate WHERE awb_no=#awb# 
		   AND AWB_DATE =  to_date(#awbDate#,'DDMONYY')
			AND CARR_CODE = #carrCode# 
	</update>
	<insert id="insertCARDetailsEXP_CAR" parameterClass="cargo.cms.export.bo.ExpCarBO">
		INSERT INTO EXP_CAR (
			AWB_NO,
			AWB_DATE,
			AWB_PRFX,
			HANDLER_CODE,
			CATALOG,
			CARR_CODE,
			TRNS_CARR_CODE,
			ORIGIN,
			DEST,
			PCS,
			WT,
			CONTENT,
			SHPR_NAME,
			AGENT_NAME,
			SPL_CODE1,
			SPL_CODE2,
			SPL_CODE3,
			SPL_CODE4,
			SPL_CODE5,
			SPL_CODE6,
			SPL_CODE7,
			SPL_CODE8,
			SPL_CODE9,
			RMK,
			SECURITY_OPTION,
			EXEMPTION_CODE,
			<!-- SEC_AGENT_NAME, -->
			SEC_RMK,
			SEC_RC_CODE,
			SEC_KC_CODE,
			ACCEPT_MODE,
			CR_USER_ID,
			CR_DATE,
			LM_USER_ID,
			LM_DATE,
			AIRL_RMK,
			DIRECT_SHIPPER,
			SLAC,
			SHPR_ADDR,
			SHPR_ADDR2,
			SHPR_ADDR3,
			SHPR_ADDR4,
			SHPR_CTRY_CODE,
			SHPR_PLACE ,
			SHPR_PIN_CODE,
			CSGNE_ADDR,
			CSGNE_ADDR2, 
			CSGNE_ADDR3,
			CSGNE_ADDR4,
			CSGNE_CTRY_CODE,
			CSGNE_NAME,
			CSGNE_PIN_CODE,
			CSGNE_PLACE,
			AGENt_CODE,
			AC_CODE,
			TR_TYPE,
			WH_RMK,
			SHPR_STATE_PROVINCE,CSGNE_STATE_PROVINCE,CASS_CODE,SPLIT_NOT_ALLOW,DLS_REMARK,LOCK_IND,vkc_code)
		VALUES (
			#awb#,
			to_date(#awbDate#,'DDMONYY'),
			#awb1#,
			#handlerCode#,
			#catalog#,
			#carrCode#,
			#trnsCarrCode#,
			#origin#,
			#dest#,
			#pcs#,
			#wt#,
			#content#,
			#shprName#,
			#agentName#,
			#splCode1#,
			#splCode2#,
			#splCode3#,
			#splCode4#,
			#splCode5#,
			#splCode6#,
			#splCode7#,
			#splCode8#,
			#splCode9#,
			#remarks#,
			#securityOption#,
			#exemptionCode#,
			<!-- #secAgentName#, -->
			#secRemarks#,
			#raNo#,
			#kcNo#,
			decode(#acceptMode#,
				'Local Export',                    'LCA',
				'Dummy',                           'LDM',
				'Inter Terminal Local Transfer',     'LIT',
				'Inter Terminal Transhipment',    'TIT',
				'Tarmac Transfer',                 'TTT',
				'Online Transhipment',            'TIH',
				'OBC',                             'LOB',
				'Direct Shipper',                  'LDS',
				'Inhouse Transshipment',		   'TIL',
				 'Transhipment' ,'TRN',
				' '),
			#crUserId#,
			sysdate,
			#lastModUserId#,
			sysdate,
			#airlRemark#,
			#directShipper#,
			#slac#,
			#shprAddrOne#,
			#shprAddrTwo#,
			#shprAddrThree#,
			#shprAddrFour#,
			#shprCountry#,
			#shprCity#,
			#shprPin#,
			#consAddrOne#,
			#consAddrTwo#, 
			#consAddrThree#,
			#consAddrFour#,
			#consCountry#,
			#consigneeName#,
			#consPin#,
			#consCity#,
			#agentCode#,
			#acCode#,
			'EXCAR',
			#whRemark#,#shipperState#,#consigneeState#,#cassCode#,#splitNotAllow#,#dlsRemarks#,#oldAwbLock#,#vkcCode#)
	</insert>
	
	<update id="updateCARDetailsEXP_CAR" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE EXP_CAR SET
			DIRECT_SHIPPER = #directShipper#,
			SLAC = #slac#,
			HANDLER_CODE=      #handlerCode#,
			CATALOG=           #catalog#,
			CARR_CODE=         #carrCode#,
			TRNS_CARR_CODE=    #trnsCarrCode#,
			ORIGIN=            #origin#,
			DEST=              #dest#,
			PCS=               #pcs#,
			WT=                #wt#,
			CONTENT=           #content#,
			SHPR_NAME=         #shprName#,
			AGENT_NAME=        #agentName#,
			SPL_CODE1=         #splCode1#,
			SPL_CODE2=         #splCode2#,
			SPL_CODE3=         #splCode3#,
			SPL_CODE4=         #splCode4#,
			SPL_CODE5=         #splCode5#,
			SPL_CODE6=         #splCode6#,
			SPL_CODE7=         #splCode7#,
			SPL_CODE8=         #splCode8#,
			SPL_CODE9=         #splCode9#,
			RMK=               #remarks#,
			SECURITY_OPTION=   #securityOption#,
			EXEMPTION_CODE=    #exemptionCode#,
			<!-- SEC_AGENT_NAME=    #secAgentName#, -->
			ACCEPT_MODE = decode(#acceptMode#,
				'Local Export',                    'LCA',
				'Dummy',                           'LDM',
				'Inter Terminal Local Transfer',     'LIT',
				'Inter Terminal Transhipment',    'TIT',
				'Tarmac Transfer',                 'TTT',
				'Online Transhipment',            'TIH',
				'OBC',                             'LOB',
				'Direct Shipper',                  'LDS',
				'Inhouse Transshipment',		   'TIL',
				'Transhipment' ,'TRN',
				' '),
			SEC_RMK=           #secRemarks#,
			SEC_RC_CODE=       #raNo#,
			SEC_KC_CODE=       #kcNo#,
			LM_USER_ID=        #lastModUserId#,
			LM_DATE=           sysdate,
			LOCK_IND = #awbLock#,
			AIRL_RMK = #airlRemark#,
			HLDG_PERIOD = #hldgPeriod#,
			SHPR_ADDR = #shprAddrOne#,
			SHPR_ADDR2 = #shprAddrTwo#,
			SHPR_ADDR3 = #shprAddrThree#,
			SHPR_ADDR4 = #shprAddrFour#,
			SHPR_CTRY_CODE = #shprCountry#,
			SHPR_PLACE = #shprCity#,
			SHPR_PIN_CODE = #shprPin#,
			CSGNE_ADDR = #consAddrOne#,
			CSGNE_ADDR2 = #consAddrTwo#, 
			CSGNE_ADDR3 = #consAddrThree#,
			CSGNE_ADDR4 = #consAddrFour#,
			CSGNE_CTRY_CODE = #consCountry#,
			CSGNE_NAME = #consigneeName#,
			CSGNE_PIN_CODE = #consPin#,
			CSGNE_PLACE = #consCity#,
			AGENt_CODe = #agentCode#,
			AC_CODE = #acCode#,
			TR_TYPE = 'EXCAR',
			SHPR_STATE_PROVINCE = #shipperState#,
			CSGNE_STATE_PROVINCE = #consigneeState#,
			CASS_CODE = #cassCode#,
                        SPLIT_NOT_ALLOW = #splitNotAllow#,
			DLS_REMARK = #dlsRemarks#  ,
			vkc_code = #vkcCode#
		WHERE AWB_NO = #awb#
		and awb_date = to_date(#awbDate#,'DDMONYY')
	</update>
	<update id="update_AWB_AWBLock" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE AWB SET
			EXP_AWB_LOCK = #awbLock#,
			LM_USER_ID   = #lastModUserId#,
			LM_DATE      = sysdate,
			HAWB_IND = #hawbVerified#
		WHERE AWB_NO = #awb#
		and awb_date = to_date(#awbDate#,'DDMONYY')
		and (awb_type = 'E' OR awb_type = 'T')
	</update>
	
	<insert id="insertCARDetailsEXP_CAR_SEC" parameterClass="cargo.cms.export.bo.ExpCarSecBO">
		INSERT INTO EXP_CAR_SEC(
			AWB_NO,
			AWB_DATE,
			DOC_LINE_NO,
			ITM_CODE,
			ITM_CODE_SFX,
			START_DATE,
			END_DATE,
			REL_DATE,
			PCS,
			WT,
			PAYABLE_BY,
			PAID_YN,
			RCL_NO,
			CR_USER_ID,
			CR_DATE,
			LM_USER_ID,
			LM_DATE)
		VALUES(
			#awbNo#,
			to_date(#awbDate#,'DDMONYY'),
			#cdocLineNo#,
			#itmCode#, 
			(select itm_code_sfx from bill_itm_master where upper(itm_desc) = upper(#itmDesc#)),
			TO_DATE(#startDate#, 'DDMONYY HH24:MI'),
			TO_DATE(#endDate#, 'DDMONYY'),
			TO_DATE(#relDate#, 'DDMONYY'), 
			#secpcs#,
			#secwt#,
			#payerC#,
			#paid#,
			#rclNo#,
			#crUserId#,
			sysdate,
			#lastModUserId#,
			sysdate)
	</insert>

	<select id="getCARRCLSecItems" parameterClass="map" resultClass="cargo.cms.export.bo.ExpCarSecBO">
		<![CDATA[
		select 
		  a.doc_line_no AS cdocLineNo,
		  (SELECT B.ITM_DESC FROM BILL_ITM_MASTER B WHERE B.ITM_CODE = a.sc_itm_code AND decode(a.sc_itm_sfx,'','a',a.sc_itm_sfx) =   decode(b.itm_code_sfx,'','a',b.itm_code_sfx)) AS itmDesc,
		  to_char(a.sc_start_date, 'DDMONYY HH24:MI') AS startDate,
		  to_char(a.sc_end_date, 'DDMONYY') AS endDate,
		  to_char(a.sc_rel_date, 'DDMONYY') AS relDate,
		  a.RCL_NO as rclNo,
		  a.sc_pcs AS secpcs,
		  a.sc_wt AS secwt,
		  a.sc_paid_by AS payerC,
		  DECODE((SELECT BC.STATUS FROM BILL_CHARGE_DTL BC WHERE BC.rcl_no=a.rcl_no AND BC.AWB_NO = B.AWB_NO AND BC.awb_date = b.awb_date 
			  AND BC.ITM_CODE = a.sc_itm_code),'PAID','Y','N') AS paid
		from exp_rcl_sec_chk_dtl a
		join exp_rcl_hd b on a.rcl_no = b.rcl_no
		where b.awb_no = #awbNo#
		and b.awb_date = to_date(#awbDate#,'DDMONYY')
		and b.status<>'V'
		]]>
	</select>

	<insert id="insertCARDetailsRevCharges" parameterClass="cargo.cms.export.bo.RateChargeBO">
		INSERT INTO EXP_AWB_REV_CHARGES (
			AWB_NO,		
			AWB_DATE,    
			ITM_CODE,    
			PREPAID_AMT, 
			COLLECT_AMT, 
			CR_USER_ID,	
			CR_DATE,		
			LM_USER_ID,	
			LM_DATE)
		VALUES (
			#awbNumber#,
			to_date(#awbDate#,'DDMONYY'),
            #chargeCode#,
            nvl(#prepaidAmount#, '0'),
            nvl(#collectAmount#, '0'),
            #userID#,
            sysdate,
            #userID#,
            sysdate)
	</insert>

	<update id="updateCARDetailsRevCharges" parameterClass="cargo.cms.export.bo.RateChargeBO">
		UPDATE EXP_AWB_REV_CHARGES SET 
			PREPAID_AMT 	=	nvl(#prepaidAmount#, '0'),
			COLLECT_AMT 	=	nvl(#collectAmount#, '0'),
			LM_USER_ID		=	#userID#,
			LM_DATE			=	sysdate
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE   	=	to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE   	=	#chargeCode#
	</update>
	
	<select id="getCARDetailsRevCharges" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			PREPAID_AMT AS	prepaidAmount,
			COLLECT_AMT AS	collectAmount
		FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE =  to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE != 'WTCHRG'
		AND ITM_CODE != 'VALCHRG'
		AND ITM_CODE != 'TAX'
		AND ITM_CODE != 'CHRGDUEAGT'
		AND ITM_CODE != 'CHRGDUECARR'
	</select>
	
	<delete id="deleteCARDetailsRevChargesEs" parameterClass="map">
		DELETE FROM EXP_AWB_NONREV_CHARGES
		WHERE AWB_NO	= #awbNumber#
		AND AWB_DATE	= (SELECT AWB_DATE FROM AWB WHERE AWB_NO = #awbNumber# and awb_closed_yn = 'N')
		AND ITM_CODE = #itemCode#
	</delete>	
	
	<delete id="deleteCARDetailsRevChargesESNotIn" parameterClass="map">
		DELETE FROM EXP_AWB_NONREV_CHARGES
		WHERE AWB_NO	= #awbNumber#
		AND AWB_DATE	= (SELECT AWB_DATE FROM AWB WHERE AWB_NO = #awbNumber# and (awb_type = 'E' or awb_type = 'T') and awb_closed_yn = 'N')
		AND ITM_CODE NOT IN('WTCHRG','VALCHRG','TAX','CHRGDUEAGT','CHRGDUECARR')		
		<isNotEmpty property="itemCode5">
		 AND ITM_CODE != #itemCode5#
		</isNotEmpty>
		<isNotEmpty  property="itemCode6">
		 AND ITM_CODE != #itemCode6#
		</isNotEmpty>
		<isNotEmpty property="itemCode7">
		 AND ITM_CODE != #itemCode7#
		</isNotEmpty>
		<isNotEmpty property="itemCode8">
		 AND ITM_CODE != #itemCode8#
		</isNotEmpty>
		<isNotEmpty property="itemCode9">
		 AND ITM_CODE != #itemCode9#
		</isNotEmpty>
		<isNotEmpty property="itemCode10">
		 AND ITM_CODE != #itemCode10#
		</isNotEmpty>
		<isNotEmpty property="itemCode11">
		 AND ITM_CODE != #itemCode11#
		</isNotEmpty>
			<isNotEmpty property="itemCode12">
		 AND ITM_CODE != #itemCode12#
		</isNotEmpty>
			<isNotEmpty property="itemCode13">
		 AND ITM_CODE != #itemCode13#
		</isNotEmpty>
	</delete>	
	
	<!-- NEW PART ADDED FOR DIRECT SHIPPER STARTS -->
	
	<select id="getCARDetailsRevChargesWeightChargeEs" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			CHRG_AMT    AS	esAmount,
			PAYMENT_MODE AS	esChargeMode,
			PAYMENT_AC_NO AS	esAccNo
		FROM EXP_AWB_NONREV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = 'WTCHRG'
	</select>
	
	<select id="getCARDetailsRevChargesValuationChargeEs" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			CHRG_AMT    AS	esAmount,
			PAYMENT_MODE AS	esChargeMode,
			PAYMENT_AC_NO AS	esAccNo
		FROM EXP_AWB_NONREV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = 'VALCHRG'
	</select>
	
	<select id="getCARDetailsRevChargesTaxChargeEs" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			CHRG_AMT    AS	esAmount,
			PAYMENT_MODE AS	esChargeMode,
			PAYMENT_AC_NO AS	esAccNo
		FROM EXP_AWB_NONREV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = 'TAX'
	</select>
	
	<select id="getCARDetailsRevChargesOtherChargesAgentEs" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			CHRG_AMT    AS	esAmount,
			PAYMENT_MODE AS	esChargeMode,
			PAYMENT_AC_NO AS	esAccNo
		FROM EXP_AWB_NONREV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = 'CHRGDUEAGT'
	</select>
	
	<select id="getCARDetailsRevChargesOtherChargesCarrierEs" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			CHRG_AMT    AS	esAmount,
			PAYMENT_MODE AS	esChargeMode,
			PAYMENT_AC_NO AS	esAccNo
		FROM EXP_AWB_NONREV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = 'CHRGDUECARR'
	</select>
	
	<select id="getCARDetailsRevChargesEs" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			CHRG_AMT    AS	esAmount,
			PAYMENT_MODE AS	esChargeMode,
			PAYMENT_AC_NO AS	esAccNo
		FROM EXP_AWB_NONREV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE != 'WTCHRG'
		AND ITM_CODE != 'VALCHRG'
		AND ITM_CODE != 'TAX'
		AND ITM_CODE != 'CHRGDUEAGT'
		AND ITM_CODE != 'CHRGDUECARR'
	</select>
	
	
	<delete id="deleteCARDetailsRevChargesifEs" parameterClass="map">
		DELETE FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	= #awbNumber#
		AND AWB_DATE	= to_date(#awbDate#,'DDMONYY')
		
	</delete>
	
	<delete id="deleteCARDetailsRevChargesifNotEs" parameterClass="map">
		DELETE FROM EXP_AWB_NONREV_CHARGES
		WHERE AWB_NO	= #awbNumber#
		AND AWB_DATE	= to_date(#awbDate#,'DDMONYY')
		
	</delete>
	
	<update id="updateCARDetailsRevChargesEs" parameterClass="cargo.cms.export.bo.RateChargeBO">
		UPDATE EXP_AWB_NONREV_CHARGES SET 
			CHRG_AMT 	    =	nvl(#esAmount#, '0'),
			PAYMENT_MODE 	=	#esChargeMode#,
			PAYMENT_AC_NO	=	#esAccNo#,
			LM_DATE			=	sysdate
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE   	=	to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE   	=	#chargeCode#
	</update>
	
	<insert id="insertCARDetailsRevChargesEs" parameterClass="cargo.cms.export.bo.RateChargeBO">
		INSERT INTO EXP_AWB_NONREV_CHARGES (
			AWB_NO,		
			AWB_DATE,    
			ITM_CODE,    
			CHRG_AMT, 
			PAYMENT_MODE,
			PAYMENT_AC_NO ,
			CR_USER_ID,	
			CR_DATE,		
			LM_USER_ID,	
			LM_DATE)
		VALUES (
			#awbNumber#,
			to_date(#awbDate#,'DDMONYY'),
            #chargeCode#,
            nvl(#esAmount#, '0'),
            #esChargeMode#,
			#esAccNo#,
            #userID#,
            sysdate,
            #userID#,
            sysdate)
	</insert>
	 	<insert id="insertRecDocBillChargesforES" parameterClass="cargo.cms.export.bo.RateChargeBO" >
  		INSERT INTO BILL_CHARGE_DTL ( TR_NO, AWB_NO, AWB_DATE,ULD_KEY,
             ITM_CODE, ITM_CODE_SFX, STATUS, ITM_DESC, 
            STD_IND,REV_IND, CASH_IND, QTY, UNIT_PRICE, CHRG_AMT, 
             CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE,WAVR_IND) 
             VALUES ( BILL_CHARGE_DTL_SEQ.nextval, #awbNumber#, #awbDate#,'',
            	 #chargeCode#, '', 'PENDING', #chargeCode#,
           		'N','N','N','1','1',nvl(#esAmount#, '0'),
            	#userID#, sysdate,#userID#, sysdate,'N')
		
	</insert>	
	<delete id="deleteBillChargeforES" parameterClass="map">
		DELETE FROM BILL_CHARGE_DTL WHERE awb_no = #awbNumber# AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') and (itm_code!='SECJCHEK' and itm_code!='SECRCHEK') 
		and itm_code = (select item_code from fwb_charge_map where fwb_charge_code=#chargeCode#)
	</delete>
	<!-- NEW PART ADDED FOR DIRECT SHIPPER ENDS -->

	<select id="getCARDetailsRevChargesWeightCharge" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			PREPAID_AMT AS	prepaidAmount,
			COLLECT_AMT AS	collectAmount
		FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = 'WTCHRG'
	</select>

	<select id="getCARDetailsRevChargesValuationCharge" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			PREPAID_AMT AS	prepaidAmount,
			COLLECT_AMT AS	collectAmount
		FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = 'VALCHRG'
	</select>

	<select id="getCARDetailsRevChargesTaxCharge" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			PREPAID_AMT AS	prepaidAmount,
			COLLECT_AMT AS	collectAmount
		FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = 'TAX'
	</select>

	<select id="getCARDetailsRevChargesOtherChargesAgent" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			PREPAID_AMT AS	prepaidAmount,
			COLLECT_AMT AS	collectAmount
		FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = 'CHRGDUEAGT'
	</select>

	<select id="getSIDDetailsForAWB" parameterClass="map" resultClass="cargo.cms.export.bo.SIDBO">
		SELECT 
			SID_NO AS referenceNumber,
			BRD_POINT_NAME AS departureAirportName,
			OFF_POINT AS finalAirportCode,
			PCS AS hiddenTotalPieces,
			WT AS hiddenTotalWeight,			
			'' AS finalFlightCarrier2,
			FLT_CARR1 AS leg1CarrierPrefix,
			'' AS finalFlightNumber2,
			'' AS finalFlightDate2,
			FLT_CARR2 AS finalFlightCarrier1,
			FLT_NO2 AS finalFlightNumber1,
			TO_CHAR(FLT_DATE2, 'DDMONYY') AS finalFlightDate1,
			ROUTE_AIRP_CODE AS leg2CarrierPrefix,
			ROUTE_CARR_CODE AS leg2AirportCode,
			ONW_AIRP_CODE AS leg3CarrierPrefix,
			ONW_CARR_CODE AS leg3AirportCode,
			SHPR_NAME AS  shipperName,
			SHPR_AC_NO AS shipperAccountNumber,
			SHPR_ADDR1 AS shipperAddress1,
			SHPR_ADDR2 AS shipperAddress2,
			SHPR_ADDR3 AS shipperAddress3,
			SHPR_ADDR4 AS shipperState,
			SHPR_PLACE AS shipperCityName,
			SHPR_CTRY_CODE shipperCountryCode,
			(SELECT CODE_DESC FROM Mast_Country  WHERE CODE = SHPR_CTRY_CODE)   AS shipperCountryName,
			SHPR_PIN_CODE AS shipperPostalCode,
			SHPR_CONT_N1 AS shipperContact,
			SHPR_TEL AS shipperTelephoneNumber,
			SHPR_FAX AS shipperFaxNumber,
			CSGNE_NAME AS consigneeName,
			CSGNE_AC_NO AS consigneeAccountNumber,
			CSGNE_ADDR1 AS consigneeAddress1,
			CSGNE_ADDR2 AS consigneeAddress2,
			CSGNE_ADDR3 AS consigneeAddress3,
			CSGNE_ADDR4 AS consigneeState,
			CSGNE_PLACE AS consigneeCityName,
			CSGNE_CTRY_CODE consigneeCountryCode,
			(SELECT CODE_DESC FROM Mast_Country  WHERE CODE = CSGNE_CTRY_CODE) AS consigneeCountryName,
			CSGNE_PIN_CODE AS consigneePostalCode,
			CSGNE_CONT_N1 AS consigneeContact,
			CSGNE_TEL AS consigneeTelephoneNumber,
			CSGNE_FAX AS consigneeFaxNumber,
			AGENT_AC_NO AS agentAccountNumber,
			AGENT_NAME AS agentName,
			AGENT_ICODE AS agentIataCode,
			AGENT_CASS_ADDR AS agentAddress1,
			AGENT_PLACE AS agentCityName,
			SPL_SVC_REQ1 AS handlingInformation1,
			SPL_SVC_REQ2 AS handlingInformation2,
			SPL_SVC_REQ3 AS handlingInformation3,
			OTHER_SVC_INFO1 AS handlingInformation4,
			OTHER_SVC_INFO2 AS handlingInformation5,
			DECLN_CURR_CODE AS currencyCodeCustoms,
			DECLN_CHRG_CODE AS declaredChargeCode,
			decode(DECLN_WT_VALN_PPCC_I,'P','P',null) AS picesWeightPP,
			decode(DECLN_WT_VALN_PPCC_I,'C','C',null) AS piecesWeightColl,
			decode(DECLN_OTHER_CHRG_PPCC_I,'P','P',null) AS piecesOtherPP,
			decode(DECLN_OTHER_CHRG_PPCC_I,'C','C',null) AS piecesOtherColl,
			decode(DECLN_WT_VALN_PPCC_I,'P',PPCC_WT_CHRG) as totalWeightChargePrepaid,
			decode(DECLN_WT_VALN_PPCC_I,'C',PPCC_WT_CHRG) as totalWeightCharge,
			<!-- 
			decode(DECLN_CHRG_CODE,'PP',PPCC_WT_CHRG,'PC',PPCC_WT_CHRG) as totalWeightChargePrepaid,
			decode(DECLN_CHRG_CODE,'CP',PPCC_WT_CHRG,'CC',PPCC_WT_CHRG) as totalWeightCharge,
			 -->
			DECLN_CARR AS declaredValueCarriage,
			DECLN_CTM AS declaredValueCustoms,
			DECLN_INSURCE AS insuranceAmount	,
			PPCC_VALN_CHRG AS valuationChargePrepaid,
			CC_VALN_CHRG AS valuationCharge,
			PPCC_TAXES AS taxChargePrepaid,
			CC_TAXES AS taxCharge,
			PPCC_OTHER_CHRG_DUE_AGENT AS agentChargePrepaid,
			CC_OTHER_CHRG_DUE_AGENT AS agentCharge,
			PPCC_OTHER_CHRG_DUE_CARR AS carrierChargePrepaid,
			CC_OTHER_CHRG_DUE_CARR AS carrierCharge,
			PPCC_PP_TOTAL_CHRG AS totalCollectCharge,
			PPCC_CC_TOTAL_CHRG AS totalCollectChargePrepaid,
			SHPR_CERTN AS shipperSignature,
			TO_CHAR(EXECN_DATE, 'DDMONYY') AS "date",
			EXECN_PLACE AS place,
			EXECN_SIGN AS carrierSignature,
			CC_CHRG_DESTN_CURR AS currencyCode,
			CC_DESTN_CHRG AS destinationCharges,
			CC_TOTAL_DESTN_CHRG AS currencyConversionCharges,
			SLAC AS slac
		FROM EXP_SID                                    
		WHERE AWB_NO = #awbNumber# 
		and AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>

	<select id="getCARDetailsRevChargesOtherChargesCarrier" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			PREPAID_AMT AS	prepaidAmount,
			COLLECT_AMT AS	collectAmount
		FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	=	#awbNumber#
		AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = 'CHRGDUECARR'
	</select>

	<delete id="deleteCARDetailsRevCharges" parameterClass="map">
		DELETE FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	= #awbNumber#
		AND AWB_DATE	=  to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE = #itemCode#
	</delete>

	<delete id="deleteCARDetailsRevChargesNotIn" parameterClass="map">
		DELETE FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	= #awbNumber#
		AND AWB_DATE	= to_date(#awbDate#,'DDMONYY')
		AND ITM_CODE NOT IN('WTCHRG','VALCHRG','TAX','CHRGDUEAGT','CHRGDUECARR')		
		<isNotEmpty property="itemCode5">
		 AND ITM_CODE != #itemCode5#
		</isNotEmpty>
		<isNotEmpty  property="itemCode6">
		 AND ITM_CODE != #itemCode6#
		</isNotEmpty>
		<isNotEmpty property="itemCode7">
		 AND ITM_CODE != #itemCode7#
		</isNotEmpty>
		<isNotEmpty property="itemCode8">
		 AND ITM_CODE != #itemCode8#
		</isNotEmpty>
		<isNotEmpty property="itemCode9">
		 AND ITM_CODE != #itemCode9#
		</isNotEmpty>
		<isNotEmpty property="itemCode10">
		 AND ITM_CODE != #itemCode10#
		</isNotEmpty>
		<isNotEmpty property="itemCode11">
		 AND ITM_CODE != #itemCode11#
		</isNotEmpty>
		<isNotEmpty property="itemCode12">
		 AND ITM_CODE != #itemCode12#
		</isNotEmpty>
		<isNotEmpty property="itemCode13">
		 AND ITM_CODE != #itemCode13#
		</isNotEmpty>
	</delete>
	
	<delete id="deleteCARDetailsAllRevCharges" parameterClass="map">
		DELETE FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	= #awbNumber#
		AND AWB_DATE	= to_date(#awbDate#,'DDMONYY')
	</delete>

	<update id="updateCARDetailsEXP_CAR_SEC" parameterClass="cargo.cms.export.bo.ExpCarSecBO">
		UPDATE EXP_CAR_SEC SET
			DOC_LINE_NO=  #cdocLineNo#,
			ITM_CODE=     #itmCode#,
			ITM_CODE_SFX= (select itm_code_sfx from bill_itm_master where upper(itm_desc) = upper(#itmDesc#)),
			START_DATE=   TO_DATE(#startDate#, 'DDMONYY HH24:MI'),
			END_DATE=     TO_DATE(#endDate#, 'DDMONYY'),
			REL_DATE=     TO_DATE(#relDate#, 'DDMONYY'),
			PCS=          #secpcs#,
			WT=           #secwt#,
			PAYABLE_BY=   #payerC#,
			PAID_YN=      #paid#,
			RCL_NO=       #rclNo#,
			LM_USER_ID=   #lastModUserId#,
			LM_DATE   =   sysdate
		WHERE AWB_NO = #awbNo#
			AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			AND DOC_LINE_NO = #cdocLineNo#
	</update>
	<select id="getAgentCode" parameterClass="map" resultClass="java.lang.String">
		SELECT code 
		FROM CUST_COMPANY 
		WHERE AGENT_YN = 'Y' 
			AND CODE_DESC = upper(#agentName#)
			AND rownum=1
	</select>
	
	
	<select id="getBuildupInstructionForAwb" parameterClass="java.lang.String" resultClass="java.lang.String">
		 Select A.Instruction From 
 			( select instruction From Edi_Elp_Allot_Awb  Where awb_no= #awbNo# AND instruction IS NOT NULL ORDER BY CR_DATE DESC ) A WHERE  ROWNUM = 1
	</select>

	<select id="checkCarrCodeExist" parameterClass="map" resultClass="java.lang.String">
		SELECT to_char(COUNT(1)) 
		FROM MAST_CARRIER 
		where code = upper(#carrCode#)
	</select>	


	<select id="isAWBPrepack" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from exp_rcl_hd
		where awb_no=#awbNumber#
		and ppk_type='P'
	</select>	
	<delete id="deleteItemFromEXP_CAR_SEC" parameterClass="cargo.cms.export.bo.ExpCarSecBO">
		DELETE 	  			 
		FROM exp_car_sec
		WHERE AWB_NO = #awbNo#
			and awb_date = to_date(#awbDate#,'DDMONYY')
			AND ITM_CODE = 
				(SELECT itm_code FROM bill_itm_master WHERE upper(itm_desc)=#itmDesc#)
			AND DOC_LINE_NO = #cdocLineNo#
	</delete>
	<delete id="deleteCARSecurityItems" parameterClass="map">
		delete from EXP_SEC_CHK_JO
		where awb_no = #awbNo#
		and awb_date = to_date(#awbDate#,'DDMONYY')
	</delete>
	<update id="updateCARRinAWB" parameterClass="map">
		update AWB set carr_code = NVL(#carrCode#,CARR_CODE)
		where awb_no = #awbNo#
		and awb_date = to_date(#awbDate#,'DDMONYY')
	</update>
	<update id="updateCAR" parameterClass="map">
		update AWB set CAR_YN=NVL(#carCreated#,CAR_YN) ,SHCLOCK_IND=NVL(#shcLockInd#,'N'),TR_TYPE=NVL(#trType#,TR_TYPE),
		SPL_CODE1 = #splCode1#,
		SPL_CODE2 = #splCode2#,	
		SPL_CODE3 = #splCode3#,	
		SPL_CODE4 = #splCode4#,
		SPL_CODE5 =  #splCode5#, 
		SPL_CODE6  = #splCode6#,
		SPL_CODE7 = #splCode7#,
		SPL_CODE8 = #splCode8#,	
		SPL_CODE9 = #splCode9#,
		LM_USER_ID = NVL(#lastModUserId#,'SYSTEM'),
		LM_DATE  = sysdate,
		awb_type= NVL(#awbType#,awb_type) ,
		CNSL_IND = 	NVL(#cnslInd#,CNSL_IND)
		<isEqual property="carCreated" compareValue="N">  
			,PCS=0,WT=0,NON_PMAN_PCS=0,NON_PMAN_WT=0 
		</isEqual>
		<isEqual property="catalog" compareValue="TA">  
			,DOC_ACC_YN='Y',DOCACC_USER=NVL(#lastModUserId#,'SYSTEM'), DOCACC_DATE=sysdate  
		</isEqual>
		where awb_no = #awbNo#
		and awb_date = to_date(#awbDate#,'DDMONYY')
	</update>
	<select id="doesKCNumberBelongToAgent" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from cust_company a
		where a.code_desc = #agentName#
		and code = (select b.cust_no from cust_agent_kc b where b.kc_no = #kcNumber# and rownum=1)
	</select>
	
	<select id="doesRANumberBelongToAgent" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from cust_company a
		where a.code_desc = #agentName#
		and code = (select b.cust_no from cust_agent_ra b where b.ra_no = #raNumber#)
	</select>
	<select id="isExportAWBPremanifested" parameterClass="map" resultClass="java.lang.String">
	  select to_char(COUNT(1)) from awb 
		WHERE AWB_NO= #awbNumber#
		AND awb_date = to_date(#awbDate#,'DDMONYY')		
		AND AWB_CLOSED_YN = 'N'
		and pman_pcs > 0
	</select>	
	<select id="getAgentDetailsForKCNo" parameterClass="map" resultClass="cargo.cms.export.bo.ExpCarBO">
		SELECT  upper(code_desc)as agentName, co_iata_code as iataCode FROM cust_company WHERE  code  = 
			(SELECT  a.cust_no
			FROM cust_agent_kc a
			WHERE  a.kc_no = #kcNo#
			AND sysdate BETWEEN eff_date_from AND eff_date_to)
		
	</select>
	<select id="getAgentDetailsForACNo" parameterClass="map" resultClass="cargo.cms.export.bo.ExpCarBO">
		SELECT  upper(code_desc)as agentName, co_iata_code as iataCode FROM cust_company WHERE  code  = 
			(SELECT  a.cust_no
			FROM cust_agent_ac a
			WHERE  a.ac_no = #acNo#
			AND sysdate BETWEEN eff_date_from AND eff_date_to)
		
	</select>
	<select id="getAgentDetailsForRANo" parameterClass="map" resultClass="cargo.cms.export.bo.ExpCarBO">
		SELECT  upper(code_desc)as agentName, co_iata_code as iataCode FROM cust_company WHERE  code  = 
			(SELECT  a.cust_no
			FROM cust_agent_ra a
			WHERE  a.ra_no = #raNo#
			AND sysdate BETWEEN ra_eff_date_from AND ra_eff_date_to)
	</select>
	<parameterMap id="valAwb" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="AWBNO" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	<procedure id="validateAwbBeforeCar" parameterMap="valAwb" >
		{? = call pkg_exp_val.val_payment_pending(?, ?)}
	</procedure>
	<select id="checkFSURCTExists" parameterClass="map" resultClass="java.lang.String">
		select count(1) from AWB_SHP_STS 
		where 	AWB_NO = #awbNo# AND AWB_DATE =  TO_date(#awbDate#,'DDMONYY')
		AND COD_FSU_STS = #msgType# 
	</select>
		<parameterMap id="fsuRCTMap" class="map" >	
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="message" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	
	<procedure id="pkg_fsu_rct" parameterMap="fsuRCTMap" >
		{call PKG_FSU.FSU_RCT_EXP(?,?,?)}
	</procedure>
	<select id="fetchLicenseListExp" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.ExpCarBO">
		SELECT LICENSE AS license FROM CST_LICENSE WHERE AWB_NO=#awb# AND (HAWB_NO='000000000000000000' OR HAWB_NO &gt; '0')
	</select>
	<select id="fetchPermitListExp" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.ExpCarBO">
		SELECT PERMIT AS permit FROM CST_PERMIT WHERE AWB_NO=#awb# AND (HAWB_NO='000000000000000000' OR HAWB_NO &gt; '0')	
	</select>
	<select id="fetchNonTSASecJO" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.ExpCarSecBO">
		SELECT JO_NO joOrderNo,AWB_NO awbNo,TO_CHAR(AWB_DATE,'DDMONYY') awbDate,JO_TYPE joOrderType,STATUS status,CHARGE_TO payerC,
		(case when (select COUNT(1) from EXP_SEC_CHK_JO_DTL  where JO_NO = exp_sec_chk_jo.jo_no AND RESULT='Fail')>0 
			then 'Fail'
			else case
			when (select COUNT(1) from EXP_SEC_CHK_JO_DTL where JO_NO = exp_sec_chk_jo.jo_no AND RESULT='Pass')>0 
			then 'Pass'
			else
			'' 
			end
		end) 
		result,PC secpcs,WT secwt  from EXP_SEC_CHK_JO where awb_no=#awb# and awb_date=#awbDate# and JO_TYPE not in ('TSA','SC')
	</select>
	<insert id="insertSecJOHdr" parameterClass="cargo.cms.export.bo.ExpCarSecBO">
		Insert into EXP_SEC_CHK_JO (JO_NO,AWB_NO,AWB_DATE,JO_TYPE,PC,WT,STATUS,CHARGE_TO,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,FLT_KEY,FLT_DATE) values 
		(lpad(EXP_SEC_CHK_JO_SEQ.nextVal,7,'0'),#awbNo#,to_date(#awbDate#,'DDMONYY'),#joOrderType#,#secpcs#,#secwt#,'InProgress',#payerC#,#crUserId#,sysdate,#crUserId#,sysdate,#fltKey#,to_date(#fltDate#,'DDMONYY'))
	</insert>
	<select id="fetchTSASecJO" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.ExpCarSecBO">
		SELECT JO_NO joOrderNo,AWB_NO awbNo,TO_CHAR(AWB_DATE,'DDMONYY') awbDate,JO_TYPE joOrderType,STATUS status,CHARGE_TO payerC,
		(case when (select COUNT(1) from EXP_SEC_CHK_JO_DTL  where JO_NO = exp_sec_chk_jo.jo_no AND RESULT='Fail')>0 
			then 'Fail'
			else case
			when (select COUNT(1) from EXP_SEC_CHK_JO_DTL where JO_NO = exp_sec_chk_jo.jo_no AND RESULT='Pass')>0 
			then 'Pass'
			else
			'' 
			end
		end)
		result,PC secpcs,WT secwt,flt_key fltKey,TO_CHAR(flt_Date,'DDMONYY') fltDate  from EXP_SEC_CHK_JO where awb_no=#awb# and awb_date=#awbDate# and JO_TYPE in ('TSA')
	</select>
	<select id="checkifDestisUS" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select COUNT(1) from mast_city where code in (select city_code from mast_arpt where code=#param# and ctry_code='US')
	</select>
	<delete id="deleteSecDtlCAR" parameterClass="java.lang.String">
		delete from EXP_SEC_CHK_JO	where JO_NO = #PARAM#
	</delete>
	<select id="fetchFlightTypeInfo" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="java.lang.Integer">
		select COUNT(1) from EXP_PMANIFEST_AWB A,flt_opr B where A.flt_key= b.flt_key and a.flt_date=b.sch_date and
		a.awb_no=#awb# and trim(a.awb_date)=to_date(#awbDate#,'DDMONYY') and b.flt_type='D' and b.cgo_acft_type!='FRE'
	</select>
	<!--	select oth_chrg_c1 eschargeCode, oth_chrg1 esAmount, oth_pc_i1 esChargeMode from edi_fwb_oth_charges where tr_no in 
		(select tr_no from edi_fwb where awb_no=#awb# and awb_date=to_date(#awbDate#,'DDMONYY')) -->
	
	<select id="fetchFWBOtherCharges" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.RateChargeBO">
	SELECT
		EDI_FWB_OTH_CHARGES.OTH_PC_I1 as esChargeMode,
		EDI_FWB_OTH_CHARGES.OTH_CHRG_C1 as eschargeCode, 
		EDI_FWB_OTH_CHARGES.OTH_CHRG_C1 as chargeCode, 
		EDI_FWB_OTH_CHARGES.OTH_CHRG1 as esAmount
    FROM  EDI_FWB,EDI_FWB_OTH_CHARGES
		WHERE EDI_FWB_OTH_CHARGES.TR_NO=EDI_FWB.TR_NO
		AND EDI_FWB.TR_NO = (SELECT MAX(A.TR_NO) FROM EDI_FWB A WHERE A.AWB_NO = #awb# and A.AWB_DATE = to_date(#awbDate#,'DDMONYY'))
		AND EDI_FWB_OTH_CHARGES.OTH_CHRG_C1 is not null
	UNION ALL
   SELECT 
		EDI_FWB_OTH_CHARGES.OTH_PC_I2 as esChargeMode,
		EDI_FWB_OTH_CHARGES.OTH_CHRG_C2 as eschargeCode,
		EDI_FWB_OTH_CHARGES.OTH_CHRG_C2 as chargeCode, 
		EDI_FWB_OTH_CHARGES.OTH_CHRG2 as esAmount
    FROM  EDI_FWB,EDI_FWB_OTH_CHARGES
		WHERE EDI_FWB_OTH_CHARGES.TR_NO=EDI_FWB.TR_NO
		AND EDI_FWB.TR_NO = (SELECT MAX(A.TR_NO) FROM EDI_FWB A WHERE A.AWB_NO = #awb# and A.AWB_DATE = to_date(#awbDate#,'DDMONYY'))
		AND EDI_FWB_OTH_CHARGES.OTH_CHRG_C2 is not null
	UNION ALL
   SELECT
    EDI_FWB_OTH_CHARGES.OTH_PC_I3 as esChargeMode,
		EDI_FWB_OTH_CHARGES.OTH_CHRG_C3 as eschargeCode,
		EDI_FWB_OTH_CHARGES.OTH_CHRG_C3 as chargeCode,
		EDI_FWB_OTH_CHARGES.OTH_CHRG3 as esAmount
		FROM  EDI_FWB,EDI_FWB_OTH_CHARGES
		WHERE EDI_FWB_OTH_CHARGES.TR_NO=EDI_FWB.TR_NO
		AND EDI_FWB.TR_NO = (SELECT MAX(A.TR_NO) FROM EDI_FWB A WHERE A.AWB_NO = #awb# and A.AWB_DATE = to_date(#awbDate#,'DDMONYY'))
		AND EDI_FWB_OTH_CHARGES.OTH_CHRG_C3 is not null
	</select>
	<select id="fetchChargesforAWB" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.RateChargeBO">
		select ITM_CODE chargeCode, PREPAID_AMT prepaidAmount, COLLECT_AMT collectAmount from EXP_AWB_REV_CHARGES where awb_no=#awb# 
		and trim(awb_date)=to_date(#awbDate#,'DDMONYY')
	</select>
	<select id="fetchExpCarPremanfInfo" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="java.lang.Integer">
		select COUNT(1) from EXP_PMANIFEST_AWB where awb_no=#awb# and trim(awb_date)=to_date(#awbDate#,'DDMONYY')
	</select>
	<update id="saveCARDetailsShprRecdDoc" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE EXP_DOC_RECD SET RECD_DATE =sysdate ,AWB_FRZ_YN='Y',AWB_FRZ_DATE = sysdate where awb_no=#awb# and trim(awb_date)=to_date(#awbDate#,'DDMONYY')
	</update>
	<select id="chkExpCarExsists" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="java.lang.Integer">
		select count(1) from exp_car exp, awb awb where exp.awb_no=awb.awb_no and exp.awb_date=awb.awb_date and exp.awb_no=#awb# and exp.awb_date =to_date(#awbDate#,'DDMONYY') and awb.car_yn='Y' 
	</select>
	<select id="fetchChargesforCAR" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.RateChargeBO">
		select ITM_CODE chargeCode,CHRG_AMT esAmount,'Y' as fromDBFlag,PAYMENT_MODE as esChargeMode,PAYMENT_AC_NO as esAccNo,'Y' as FromDBFlagEs,ITM_CODE eschargeCode from EXP_awb_nonrev_charges
		where awb_no=#awb# and trim(awb_date)=to_date(#awbDate#,'DDMONYY')
	</select>	
	<select id="fetchExpFltDest" parameterClass="cargo.cms.export.bo.ExpCarSecBO" resultClass="java.lang.String">
		SELECT DEST FROM FLT_OPR WHERE FLT_KEY=UPPER(#fltKey#) AND SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE = 'D'	
	</select>	
	
<!-- Maintain Export CAR End -->

<!-- ############################ DOC ACCEPTANCE LIST :: START :: ###################################### -->
	<select id="DOC_ACC_DT_SRH" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO"  resultClass="cargo.cms.export.bo.DocumentAcceptanceBO">
		 <![CDATA[
			  SELECT DISTINCT 
			  awb.awb_No AS awbNo,
			  to_char(awb.awb_Date,'DDMONYY')               AS awbDate,
			  DECODE (
			  (SELECT COUNT(1) FROM Exp_Rcl_Hd Eh WHERE Eh.Ppk_Type IN ('P','B')
			  AND Eh.Awb_No                                          = Awb.Awb_No
			  AND Eh.Awb_Date                                        = TO_CHAR(Awb.Awb_Date, 'DDMONYY')
			  AND Eh.Status                                         != 'V'
			  )             +
			  (SELECT COUNT(1)
			  FROM EXP_RCL_HD EH,
			    EXP_RCL_BRKDN BRK
			  WHERE Eh.Rcl_No  = Brk.Rcl_No
			  AND EH.PPK_TYPE  = 'M'
			  AND Brk.Awb_No   = awb.awb_no
			  AND Brk.Awb_Date = TO_CHAR(Awb.Awb_Date, 'DDMONYY')
			  AND Eh.Status   != 'V'
			  ) ,'0','N','Y') AS rclIssued,
			  awb.docacc_user AS docAccUserId,
			  awb.docacc_date AS docAccDate,
			  awb.orig        AS origin,
			  awb.car_yn      AS car,
			  awb.dest        AS dest,
			  awb.awb_type    AS awbType,
			  DECODE(awb.spl_code1, NULL, '', awb.spl_code1)
			  || DECODE(awb.spl_code2, NULL, '', ','
			  || awb.spl_code2)
			  || DECODE(awb.spl_code3, NULL, '', ','
			  || awb.spl_code3)
			  || DECODE(awb.spl_code4, NULL, '', ','
			  || awb.spl_code4)
			  || DECODE(awb.spl_code5, NULL, '', ','
			  ||awb.spl_code5)
			  || DECODE(awb.spl_code6, NULL, '', ','
			  || awb.spl_code6)
			  || DECODE(awb.spl_code7, NULL, '', ','
			  || awb.spl_code7)
			  || DECODE(awb.spl_code8, NULL, '', ','
			  || awb.spl_code8)
			  || DECODE(awb.spl_code9, NULL, '', ','
			  || awb.spl_code9) AS splCodes,
			  DECODE(awb.DOCACC_YN,'N','N','Y') AS intYesNo,
			  CASE
			    WHEN y.code is not null 
               		AND add_months(nvl(y.valid_date, to_date('01JAN01', 'DDMONYY')),
                         (select ctry.shipper_validity_yrs  from mast_city cty 
                           join mast_country ctry  on ctry.code = cty.ctry_code 
                           where cty.code=awb.dest)*12) >= awb.awb_date
               		AND PKG_COMMON.get_shipper_two_years_fhl(awb.awb_no,awb.awb_date) = 'Y'
			    THEN 'Y'
			    ELSE 'N'
			  END AS shpr2Yrs,
			  (SELECT DECODE (COUNT(fhl.awb_no),0,'N','Y')
			  FROM edi_fhl fhl
			  WHERE awb.awb_no=fhl.awb_no
			  AND awb.awb_date=fhl.awb_date
			  )AS fhl,
			  (SELECT DECODE(COUNT(fwb.awb_no),0,'N','Y')
			  FROM edi_fwb fwb
			  WHERE awb.awb_no=fwb.awb_no
			  AND awb.awb_date=fwb.awb_date
			  )AS fwb,
			  (SELECT DECODE(COUNT(fbl.awb_no),0,'N','Y')
			  FROM edi_fbl_shp fbl
			  JOIN edi_fbl ef
			  ON fbl.tr_no     =ef.tr_no
			  AND ef.fbl_status='P'
			  WHERE awb.awb_no =fbl.awb_no
			  AND awb.awb_date =fbl.awb_date
			  )AS fbl,
			  (SELECT DECODE(COUNT(recd.awb_no),0,'N','Y')
			  FROM exp_doc_recd recd
			  WHERE awb.awb_no=recd.awb_no
			  AND awb.awb_date=recd.awb_date
			  AND awb_frz_yn  ='Y'
			  )AS docRecv,
			  (SELECT DECODE(COUNT(pman.awb_no),0,'N','Y')
			  FROM (select pma.awb_no, pma.awb_date from exp_pmanifest_awb pma
			  		union
			  		select pta.awb_no, pta.awb_date from exp_pman_tarmac_awb pta) pman
			  WHERE awb.awb_no=pman.awb_no
			  AND awb.awb_date=pman.awb_date
			  )AS preMan,
			  (SELECT DECODE(COUNT(inv.awb_no),0,'N','Y')
			  FROM awb_inventory inv
			  WHERE awb.awb_no=inv.awb_no
			  AND awb.awb_date=inv.awb_date
			  )AS inv,
			 (SELECT DECODE(COUNT(bill.awb_no),0,'Y','N') FROM bill_charge_dtl bill WHERE awb.awb_no =bill.awb_no AND awb.awb_date = bill.awb_date AND bill.Status  ='PENDING'
					     AND bill.net_amt > 0) AS PYMNT,
					  ''  AS SECCHK,
					  pkg_exp_rpt.fun_get_sc(awb.awb_no, awb.awb_date,'TSA') AS TSASECCHK,
			awb.PCS as awbPcs,
       		awb.WT as awbWt,
       		awb.content as content
			FROM AWB awb
			LEFT JOIN EXP_CAR EC ON ec.awb_no = awb.awb_no and ec.awb_date = awb.awb_date
			LEFT JOIN cust_company y ON (y.code = ec.shipper_code or y.code_desc = ec.shpr_name)
			]]>
			WHERE trunc(awb.cr_date) BETWEEN TO_DATE(#frmDate#,'DDMONYY') and TO_DATE(#toDate#,'DDMONYY') and awb.awb_type IN ('E','T')
			<isNotEmpty property="loginCarrier">    
				      and  (awb.CARR_CODE = #loginCarrier# OR awb.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #loginCarrier#))    
			</isNotEmpty> 
			order by 1		
      </select>
	


	<select id="AWB_INT_CHK_DT_SRH" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO"
		resultClass="cargo.cms.export.bo.DocumentAcceptanceBO">
		select distinct CASE WHEN h.awb_no is null THEN
		b.awb_no
		ELSE h.awb_no END as
		awbNo,
		CASE WHEN h.awb_date is null THEN
		TO_CHAR(b.awb_date,'DDMONYY') ELSE
		TO_CHAR(h.awb_date,'DDMONYY') END as
		awbDate,
		h.rcl_no as rclNo,
		t.orig as origin, t.dest
		as dest,
		t.carr_code as carrCode,
		t.content as content,
		t.shipper_Name as shipperName,
		t.cnsl_ind as
		cnslInd,
		t.spl_code1 as splCode1,
		t.spl_code1 as splCode2,
		t.spl_code1 as
		splCode3,
		t.int_yn as intYesNo
		from EXP_RCL_HD h left JOIN exp_rcl_brkdn
		b on
		b.rcl_no = h.rcl_no and
		h.rcl_date between
		TO_DATE(#frmDate#,'DDMONYY') and TO_DATE(#toDate#,'DDMONYY') and
		h.ppk_type = 'M' left join AWB t
		on t.awb_no = CASE WHEN
		h.awb_no is
		null THEN b.awb_no ELSE h.awb_no
		END and t.awb_date = CASE
		WHEN
		h.awb_date is null THEN b.awb_date ELSE
		h.awb_date END
		where h.rcl_date
		between TO_DATE(#frmDate#,'DDMONYY') and
		TO_DATE(#toDate#,'DDMONYY')
	</select>

	<select id="AWB_INT_CHK_FLT_SRH" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO"
		resultClass="cargo.cms.export.bo.DocumentAcceptanceBO">
		select distinct h.awb_no as awbNo,
		TO_CHAR(h.awb_date,'DDMONYY') as awbDate,
		t.orig as origin, t.dest as
		dest,
		t.carr_code as carrCode,
		t.content as content,
		t.shipper_Name as
		shipperName,
		t.cnsl_ind as cnslInd,
		t.spl_code1 as splCode1,
		t.spl_code1
		as splCode2,
		t.spl_code1 as splCode3,
		t.int_yn as intYesNo
		from
		EXP_PMANIFEST_AWB h left JOIN AWB t on t.awb_no = h.awb_no
		and
		t.awb_date = h.awb_date
		where h.flt_date =
		TO_DATE(#flightDate#,'DDMONYY')
		and h.flt_key =
		concat(#flightCarr#,#flightNo#)
	</select>

	<select id="DOC_ACC_FLT_SRH" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO"	resultClass="cargo.cms.export.bo.DocumentAcceptanceBO">
		<![CDATA[
		  SELECT DECODE(awb.spl_code1, NULL, '', awb.spl_code1)
		  || DECODE(awb.spl_code2, NULL, '', ','
		  || awb.spl_code2)
		  || DECODE(awb.spl_code3, NULL, '', ','
		  || awb.spl_code3)
		  || DECODE(awb.spl_code4, NULL, '', ','
		  || awb.spl_code4)
		  || DECODE(awb.spl_code5, NULL, '', ','
		  ||awb.spl_code5)
		  || DECODE(awb.spl_code6, NULL, '', ','
		  || awb.spl_code6)
		  || DECODE(awb.spl_code7, NULL, '', ','
		  || awb.spl_code7)
		  || DECODE(awb.spl_code8, NULL, '', ','
		  || awb.spl_code8)
		  || DECODE(awb.spl_code9, NULL, '', ','
		  || awb.spl_code9) AS splCodes,
		  awb.awb_no           AS awbNo,
		  to_char(awb.awb_date,'DDMONYY')               AS awbDate,
		 DECODE (
		  (SELECT COUNT (*) FROM exp_rcl_hd r WHERE r.awb_no=awb.awb_no
		  AND r.awb_date                                    = awb.awb_date
		  AND r.Status!                                     = 'V'
		  )             +
		  (SELECT COUNT(1)
		  FROM EXP_RCL_HD EH,
		    EXP_RCL_BRKDN BRK
		  WHERE Eh.Rcl_No  = Brk.Rcl_No
		  AND EH.PPK_TYPE  = 'M'
		  AND Brk.Awb_No   = awb.awb_no
		  AND Brk.Awb_Date = TO_CHAR(Awb.Awb_Date, 'DDMONYY')
		  AND Eh.Status   != 'V'
		  ) ,'0','N','Y') AS rclIssued,
		  awb.docacc_user AS docAccUserId,
		  awb.docacc_date AS docAccDate,
		  awb.orig        AS origin,
		  awb.car_yn      AS car,
		  awb.dest        AS dest,
		  awb.awb_type    AS awbType,
		  (SELECT STRAGG(STRINGDELIM(SHC, ',')) AS SHCS
		  FROM
		    (SELECT DISTINCT awb_date,
		      awb_no,
		      PRIORITY,
		      SHC
		    FROM V_IMP_FLT_ULD_SHC
		    ORDER BY PRIORITY DESC
		    )
		  WHERE awb_no = awb.awb_no
		  AND awb_date = awb.awb_date
		  AND ROWNUM < 10
		  )                                                                                                                                                                                   AS splHandlingCode,
		  DECODE(awb.DOCACC_YN,'N','N','Y') AS intYesNo,
		  CASE
		  	 WHEN y.code is not null 
               		AND add_months(nvl(y.valid_date, to_date('01JAN01', 'DDMONYY')),
                         (select ctry.shipper_validity_yrs  from mast_city cty 
                           join mast_country ctry  on ctry.code = cty.ctry_code 
                           where cty.code=awb.dest)*12) >= awb.awb_date
               		AND PKG_COMMON.get_shipper_two_years_fhl(awb.awb_no,awb.awb_date) = 'Y'	    
		    THEN 'Y'
		    ELSE 'N'
		  END AS shpr2Yrs,
		  (SELECT DECODE (COUNT(fhl.awb_no),0,'N','Y') FROM edi_fhl fhl  WHERE awb.awb_no=fhl.awb_no AND awb.awb_date=fhl.awb_date)AS fhl,
		  (SELECT DECODE(COUNT(fwb.awb_no),0,'N','Y')  FROM edi_fwb fwb	  WHERE awb.awb_no=fwb.awb_no  AND awb.awb_date=fwb.awb_date)AS fwb,
		  (SELECT DECODE(COUNT(fbl.awb_no),0,'N','Y')  FROM edi_fbl_shp fbl  JOIN edi_fbl ef  ON fbl.tr_no     =ef.tr_no  AND ef.fbl_status='P'  WHERE awb.awb_no =fbl.awb_no
		 	 AND awb.awb_date =fbl.awb_date)AS fbl,
		  DECODE(awb.catalog,'TA','NA',(SELECT DECODE(COUNT(recd.awb_no),0,'N','Y') FROM exp_doc_recd recd WHERE awb.awb_no=recd.awb_no AND awb.awb_date=recd.awb_date AND awb_frz_yn  ='Y'))AS docRecv,
		  (SELECT DECODE(COUNT(pman.awb_no),0,'N','Y') FROM (select pma.awb_no, pma.awb_date from exp_pmanifest_awb pma 
		  													 union 
		  													 select pta.awb_no, pta.awb_date from exp_pman_tarmac_awb pta) pman 
		  											   WHERE awb.awb_no=pman.awb_no AND awb.awb_date=pman.awb_date)AS preMan,
		  (SELECT DECODE(COUNT(inv.awb_no),0,'N','Y')  FROM awb_inventory inv WHERE awb.awb_no=inv.awb_no AND awb.awb_date=inv.awb_date)AS inv,
		  (SELECT DECODE(COUNT(bill.awb_no),0,'Y','N') FROM bill_charge_dtl bill WHERE awb.awb_no =bill.awb_no AND awb.awb_date = bill.awb_date AND bill.Status  ='PENDING'
		     AND bill.net_amt > 0) AS PYMNT,
		  ''  AS SECCHK,
		  pkg_exp_rpt.fun_get_sc(awb.awb_no, awb.awb_date,'TSA') AS TSASECCHK,
		  awb.PCS as awbPcs,
	      awb.WT as awbWt,
	      awb.content as content
		FROM AWB awb 
		LEFT JOIN EXP_CAR EC ON ec.awb_no = awb.awb_no and ec.awb_date = awb.awb_date
		LEFT JOIN cust_company y ON (y.code = ec.shipper_code or y.code_desc = ec.shpr_name)
		WHERE (awb.awb_no,awb.awb_date) in(
		  SELECT PAWB.AWB_NO,PAWB.AWB_DATE FROM EXP_PMANIFEST_AWB PAWB WHERE PAWB.flt_date = TO_DATE(#flightDate#,'DDMONYY') AND  PAWB.flt_key   = concat(#flightCarr#,#flightNo#)
		   GROUP BY PAWB.AWB_NO,PAWB.AWB_DATE 
         UNION ALL
		  SELECT TAWB.AWB_NO,TAWB.AWB_DATE FROM exp_pman_tarmac_awb TAWB WHERE TAWB.flt_date = TO_DATE(#flightDate#,'DDMONYY') AND TAWB.flt_key   = concat(#flightCarr#,#flightNo#)
		  GROUP BY TAWB.AWB_NO,TAWB.AWB_DATE)
      	ORDER BY 2
      	]]>
	</select>


	<update id="DOC_ACC_SAVE" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO">
		update AWB b set
		b.docacc_user = #docAccUserId#, b.docacc_date =
		TO_DATE(#docAccDate#,'DDMONYY'),
		b.doc_acc_yn = #docAccInd#
		WHERE b.AWB_NO =#awbNo# and
		trunc(b.awb_date) = TO_DATE(#awbDate#,'DDMONYY')
	</update>
	
	<select id="isValidCarrierCode"  parameterClass="map" resultClass="java.lang.String">
		SELECT to_char(COUNT(1)) 
		FROM MAST_CARRIER 
		where code = upper(#CODE#)
   	</select>
<!-- ############################ DOC ACCEPTANCE LIST :: END :: ###################################### -->

<!-- ##################### create pre Manifest by AWB  : Starts (Santhosh k) ########################################-->
     
     <select id="isULDTypeProhAcft" parameterClass="map" resultClass="java.lang.Integer">
		select COUNT(1) from uld_type_proh_acft		   
	       where  uld_type = #ULD_TYPE#
           and    contr_code = #CONTR_CODE#
           and    (carr_code is null OR carr_code = #CARR_CODE#)
           and    acft_type = (select acft_type from  flt_opr_leg
                                     where  flt_key = #FLT_KEY#
                                     and    sch_date = TO_DATE(#FLT_DATE#, 'DDMONYY')
                                     and    flt_type = 'D'
                                     and    off_point = #DEST#)
	</select>
	<select id="chkTSMailForPPk" parameterClass="map" resultClass="java.lang.Integer">
		select count(1)
	    from  awb
	    where  catalog = 'TM'
	    and awb_no = #awb_no# 
	   AND AWB_CLOSED_YN='N'
	    
	</select>
	<select id="chkOBCMailForPPk" parameterClass="map" resultClass="java.lang.Integer">
		select count(1)
	    from  awb
	    where  ACCEPT_MODE = 'OBC'
	    and awb_no = #awb_no# 
	    AND AWB_TYPE='E' AND AWB_CLOSED_YN='N'
	    
	</select>
   
   	<select id="sqlpremanifestflightdetails" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT CARR_CODE as fltpfx,FLT_NO as fltsfx, 
		 	PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, 'D', 'DD') as fltEstTime ,
			to_char(EST_DATE,'DDMONYYYY') as fltEstDate,
			A.FLT_KEY as fltNo,TO_CHAR(A.SCH_DATE,'DDMONYY') as fltDate
			FROM FLT_OPR A  
			WHERE A.FLT_KEY=UPPER(#fltKey#) AND A.SCH_DATE = TO_DATE(#depDate#, 'DDMONYY')
			AND A.FLT_TYPE = 'D'
	</select>
	<select id="checkULDFlightAssignFltKey" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">
	SELECT flt_key as fltNo,TO_CHAR(flt_date,'DDMONYY') as fltDate FROM ULD_INVENTORY WHERE ULD_KEY=#PARAM#
	</select>
	<select id="checkULDFlightAssignValidation" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  resultClass="java.lang.Integer">
	select COUNT(*) from flt_opr_events where flt_key=#fltNo# and sch_date=#fltDate# and flt_type='D' and flt_cls_yn='N'
	</select>
	
	<select id="checkAWBAssignValidation" parameterClass="map"  resultClass="java.lang.Integer">
	select count(*) from awb where awb_no=#awbNo# and awb_date=#awbDate# and catalog = 'TG'
	</select>
	
	<select id="sqlpremanifestawbdetails" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
		SELECT DEST as dest 
		FROM AWB 
		WHERE AWB_NO =(#awb1#) AND AWB_TYPE='E' AND AWB_CLOSED_YN='N' 
	</select>

	<select id="getAWBDestForPPK" parameterClass="java.lang.String"  resultClass="java.lang.String">
		SELECT DEST as dest 
		FROM AWB 
		WHERE AWB_NO =#awbNo# AND (AWB_TYPE='E' OR AWB_TYPE='T') AND AWB_CLOSED_YN='N' 
	</select>
	<select id="getAWBDestForTarmac" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="java.lang.String">
	SELECT DEST FROM EXP_CAR WHERE AWB_NO=#awbNo# and awb_date=TO_DATE(#awbDate#, 'DDMONYY')
    </select>
	
	<select id="sqlpremanifestbulkcargodetails" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.BulkCargoBO">
		  SELECT  A.AWB_NO as awbNo,CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) as awbNoDisplay,
      		to_char(A.AWB_DATE,'DDMONYY') as awbDate,A.DEST as dest,A.PCS as awbPCs,
			TO_CHAR(A.WT,999999999.99) as awbWt,(A.NON_PMAN_PCS) as bulk_Non_PManifest_Pc, 
			TO_CHAR((A.NON_PMAN_WT),999999999.99) as bulk_Non_PManifest_Wt,
			TO_CHAR(A.NON_PMAN_WT,999999999.99) as ppk_Non_PManifest_Wt,
			A.NON_PMAN_PCS as ppk_Non_PManifest_Pc,A.CARR_CODE as awbCarr,A.AWB_TYPE as awbType,
			A.CATALOG as catalog,
			(SELECT 
			      (CASE WHEN decode(b.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
			      (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = B.CARR_CODE AND (SPLCODE.SPL_CODE = b.SPL_CODE1 OR SPLCODE.SPL_CODE = b.SPL_CODE2 OR SPLCODE.SPL_CODE = b.SPL_CODE3 OR SPLCODE.SPL_CODE = b.SPL_CODE4 OR SPLCODE.SPL_CODE = b.SPL_CODE5 OR SPLCODE.SPL_CODE = b.SPL_CODE6 OR SPLCODE.SPL_CODE = b.SPL_CODE7 OR SPLCODE.SPL_CODE = b.SPL_CODE8 OR SPLCODE.SPL_CODE = b.SPL_CODE9)) > 0
			      THEN 'Q' ELSE decode(b.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
			               ELSE decode(b.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
			FROM AWB  B WHERE  B.AWB_NO=A.AWB_NO AND B.AWB_DATE=A.AWB_DATE) as cargoType,
			A.PMAN_BULK_PCS as pmanPcs, FUN_GET_AWB_UPLIFT_PRIORITY(A.AWB_NO,A.AWB_DATE) upliftPriority,
			A.TSA_PASS_IND as tsaPassInd
			FROM AWB A
			WHERE  A.AWB_NO = #awbNo#
			AND (A.AWB_TYPE='E' OR A.AWB_TYPE='T' )AND A.AWB_CLOSED_YN = 'N'
			
	</select>
	
	<select id="checkOfflineportForPPK" parameterClass="map"  resultClass="java.lang.String">
		SELECT COUNT(1) FROM MAST_CARR_PORT WHERE PORT=#dest# AND CARR_CODE=(SELECT CARR_CODE FROM FLT_OPR WHERE FLT_KEY=#fltKey# AND SCH_DATE=#fltDate# AND FLT_TYPE='D' AND ROWNUM=1)
	</select>
	<select id="chkdestinFltRoute" parameterClass="map" resultClass="java.lang.Integer">	
		    SELECT COUNT(1)
	  FROM flt_opr t1,
	    flt_opr_leg t2
	  WHERE t1.tr_no   = t2.tr_no
	  AND t1.flt_key   = #fltKey#
	  AND t1.sch_date  = to_date(#fltDate#,'DDMONYY')
	  AND t1.flt_type  = 'D'
	  AND T2.OFF_POINT = #dest#
	</select>
	
	<select id="sqlFetchCustomCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select PKG_EXP_RPT.get_cc_code_awbType(#fltKey#,#fltDate#,#awbNo#,null) as customCode from dual
	</select>
	
	<select id="sqlFetchAwbInvPcsWt" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT SUM(LOCN_PCS) INV_PCS, SUM(LOCN_WT) INV_WT FROM AWB_INVENTORY WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	
	<select id="sqlFetchTransitManfPcWt" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT SUM(MANIFEST_PCS) INV_PCS, SUM(MANIFEST_WT) INV_WT FROM IMP_CAR_SHP WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>

	<select id="sqlpremanifestppkcargodetails" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.PrePackCargoBO">
		SELECT t1.uld_key as uldNo,t1.rcl_no as ppk_rcl_NO,
				t2.contr_code as ppk_Contr_Code,t2.PCS as ppk_Pcs,
				t2.net_wt as ppk_net_wt,t2.tare_wt as ppk_tar_wt,
				t2.GROSS_WT as ppk_gross_wt,
				t2.dest as dest, 
				FUN_GET_ULD_UPLIFT_PRIORITY(T3.FLT_KEY, TO_CHAR(T3.FLT_DATE, 'DDMONYY'), T3.ULD_KEY) upliftPriority
			FROM  exp_uld_awb t1, v_exp_uld_dtl t2 , uld_inventory t3   
			WHERE t1.rcl_no = t2.rcl_no
			 and t1.uld_key=t2.uld_key
			 and t1.uld_key=t3.uld_key
			 and t1.awb_no = #awbNo#
			 and t1.ppk_type = 'P'
			 and t1.manifest_yn = 'N'
			 and t1.closed_yn = 'N'
			 and nvl(t3.rebuild_yn, 'N') ='N' 
			  and nvl(t3.topup_yn, 'N') ='N' 
			  and (t3.ppk_ind='Y' or t3.mix_ppk_ind='Y')
             
	</select>	
	
	<select id="sqlgetstoragedetailsincrease" parameterClass="map" resultClass="cargo.cms.export.bo.PreManifestAWBBO" >
		select inv.seq_no as seqNo,
			inv.uld_key as uldKey, 
			inv.loc_code as whDestDisp,
			inv.loc_code as locn, 
			inv.lsp_no as lspNo, 
			inv.locn_pcs as locnPcs, 
			inv.locn_wt as locnWt,
			inv.awb_no as awbNo,
			awb.CATALOG catalog,
			substr(inv.awb_no, 1, 3)||'-'||substr(inv.awb_no, 4) as awbNoDisplay, 
			to_char(inv.awb_date,'DDMONYY') as awbDate
		from   awb_inventory inv
		JOIN AWB awb ON awb.AWB_NO = UPPER(inv.AWB_NO) 
		AND awb.awb_date = UPPER (inv.awb_date)		  
		where  inv.awb_no = #awbNo#
		and    inv.awb_date = #awbDate#
		AND NOT EXISTS (SELECT NULL FROM ULD_INVENTORY WHERE ULD_KEY = inv.ULD_KEY 
		AND (PPK_IND = 'Y' OR MIX_PPK_IND = 'Y') AND (REBUILD_YN = 'N' AND TOPUP_YN = 'N'))			
		AND not (inv.flt_type = 'E' and inv.FLT_KEY IS not NULL  )

	</select>	
	
	<select id="sqlGetHawbStorageDetailsIncrease" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO" >
		SELECT hinv.HAWB_NO hawbNo, hinv.STRG_PCS hawbStrgPcs, hinv.STRG_WT hawbStrgWt
	    FROM HAWB_INVENTORY hinv
		WHERE  hinv.SEQ_NO = #seqNo#
	</select>
	
	<parameterMap class="map" id="queryMap">
		<parameter property="RESULT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="OFLIGHTKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="OFLIGHTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="OLDGPT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FFLIGHTKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FFLIGHTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLDGPT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>	
	<procedure id="sqlvalidateamendflight" parameterMap="queryMap" >
		{? = call PKG_PMAN.VAL_AMEND_FLT_NO(?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap class="map" id="decreaseUldMap">
		<parameter property="RESULT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="UNLDGPT"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBNO"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="WHDEST"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="WHLOC"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="LSPNO"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="BTNO"        jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="PCS"         jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="WEIGHT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="USER"        jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>	
	<procedure id="sqldecreaseuldassignment" parameterMap="decreaseUldMap" >
		{? = call pkg_pman.amend_uld_assign_decrease(?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap class="map" id="increaseUldMap">
		<parameter property="RESULT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="UNLDGPT"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBNO"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="SEQLST"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="PCLST"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="WTLST"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="USER"        jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>	
	<procedure id="sqlincreaseuldassignment" parameterMap="increaseUldMap" >
		{? = call pkg_pman.amend_uld_assign_increase(?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap class="map" id="delteUldMap">
		<parameter property="RESULT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="UNLDGPT"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBNO"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="WHDEST"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="WHLOC"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="LSPNO"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="BTNO"        jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="PCS"         jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="WEIGHT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="USER"        jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>	
	<procedure id="sqldeleteuldassignment" parameterMap="delteUldMap" >
		{? = call pkg_pman.del_uld_assign(?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap class="map" id="updateMap">
		<parameter property="RESULT"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="OFLIGHTKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="OFLIGHTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="OLDGPT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FFLIGHTKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FFLIGHTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLDGPT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBLIST"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="PCLIST"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="WTLIST"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="USER"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>	
	<procedure id="sqlamendflightupdateawbdetails" parameterMap="updateMap" >
		{ ? = call pkg_pman.amend_flt_no(?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap class="map" id="notificationMap">
		<parameter property="RESULT"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLIGHTKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLIGHTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDLIST"    jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="WAREHOUSE"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="RHOID"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="USER"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="MOFSNO"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>	
	<procedure id="sqlsendnotification" parameterMap="notificationMap" >
		{ ? = call pkg_exp_uld.mofs_notify(?,?,?,?,?,?,?)  }
	</procedure>
	
	<select id="unassignAwbDeatilsForAmendFlt" parameterClass="cargo.cms.export.bo.AmendFlightBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO" >
		select 
			substr(t1.awb_no, 1, 3)||'-'||substr(t1.awb_no, 4) as awbNoDisplay, 
			t1.awb_no as awbNo, 
			to_char(t1.awb_date,'DDMONYY') as awbDate, 
			t2.pcs||'/'||replace(to_char(t2.wt, '999999990.9'), ' ', '') awbPcWt, 
			t2.pcs as awbPCs,
			REPLACE(TO_CHAR(t2.wt, '999999990.9'), ' ', '') awbWt                          , 
			t1.bulk_pcs||'/'||replace(to_char(t1.bulk_wt, '999999990.9'), ' ', '') pmanPcWt,	
			t1.bulk_pcs pmanPcs,
			replace(to_char(t1.bulk_wt, '999999990.9'), ' ', '') pmanWt,
			t1.unassigned_bulk_pcs as unassignedBlkPcs, 
			t1.unassigned_bulk_wt as unassignedBlkWt, 
			t1.unassigned_bulk_pcs as amendPcs, 
			t1.unassigned_bulk_wt as amendWt, 
			t1.group_no as groupno ,
			t1.BLDUP_INSTR bldupInst,
			t1.MAN_RMK manRmk,
			t2.DEST dest,
			pkg_exp_val.get_exp_awb_cc_code(#origFltKey#, #origFltDate#, t1.awb_no) as consCode,			
		(select    decode(spl_code1, null, '', spl_code1 || '/')
               || decode(spl_code2, null, '', spl_code2 || '/')
               || decode(spl_code3, null, '', spl_code3 || '/')
               || decode(spl_code4, null, '', spl_code4 || '/')
               || decode(spl_code5, null, '', spl_code5 || '/')
               || decode(spl_code6, null, '', spl_code6 || '/')
               || decode(spl_code7, null, '', spl_code7 || '/')
               || decode(spl_code8, null, '', spl_code8 || '/')
               || decode(spl_code9, null, '', spl_code9)
                  from   exp_car
                  where  awb_no = t2.AWB_NO
                  and awb_date = t2.AWB_DATE) splcode1, 
			trim(to_char(round(pkg_exp_val.get_volume(t2.awb_no, t2.pman_pcs), 2),'99990.00')) as volMc
		from   exp_pmanifest_awb t1, awb t2
		where  t1.awb_no = t2.awb_no
			and    TO_CHAR(t1.awb_date,'DDMONYY') =  TO_CHAR(t2.awb_date,'DDMONYY')			
			and    t1.flt_key = #origFltKey#
			and    t1.flt_date = to_date(#origFltDate#,'DDMONYY')
			and    t1.unldg_pt = #origPortOfCall#
			and    (t1.unassigned_bulk_pcs > 0)
	<dynamic prepend="ORDER BY ">
	            <isNotEmpty property="sortOrder.sortField">
	                $sortOrder.sortField$
	           </isNotEmpty>
	    </dynamic>
	</select>
	<select id="sqlamendflightawbdetailsCOUNT" parameterClass="cargo.cms.export.bo.AmendFlightBO"
		resultClass="java.lang.Integer">
		SELECT COUNT(1) AS totalRowCount FROM (
			select 
			substr(t1.awb_no, 1, 3)||'-'||substr(t1.awb_no, 4) as awbNoDisplay, 
			t1.awb_no as awbNo, 
			to_char(t1.awb_date,'DDMONYY') as awbDate, 
			t2.pcs||'/'||replace(to_char(t2.wt, '9999990.9'), ' ', '') awbPcWt, 
			t2.pcs as awbPCs,
			REPLACE(TO_CHAR(t2.wt, '9999990.9'), ' ', '') awbWt                          , 
			t1.bulk_pcs||'/'||replace(to_char(t1.bulk_wt, '9999990.9'), ' ', '') pmanPcWt,	
			t1.bulk_pcs pmanPcs,
			replace(to_char(t1.bulk_wt, '9999990.9'), ' ', '') pmanWt,
			t1.unassigned_bulk_pcs as unassignedBlkPcs, 
			t1.unassigned_bulk_wt as unassignedBlkWt, 
			t1.unassigned_bulk_pcs as amendPcs, 
			t1.unassigned_bulk_wt as amendWt, 
			t1.group_no as groupno ,
			t1.BLDUP_INSTR bldupInst,
			t1.MAN_RMK manRmk,
			t2.DEST dest,
			pkg_exp_val.get_exp_awb_cc_code(#origFltKey#, #origFltDate#, t1.awb_no) as consCode,			
		(select    decode(spl_code1, null, '', spl_code1 || '/')
               || decode(spl_code2, null, '', spl_code2 || '/')
               || decode(spl_code3, null, '', spl_code3 || '/')
               || decode(spl_code4, null, '', spl_code4 || '/')
               || decode(spl_code5, null, '', spl_code5 || '/')
               || decode(spl_code6, null, '', spl_code6 || '/')
               || decode(spl_code7, null, '', spl_code7 || '/')
               || decode(spl_code8, null, '', spl_code8 || '/')
               || decode(spl_code9, null, '', spl_code9)
                  from   exp_car
                  where  awb_no = t2.AWB_NO
                  and awb_date = t2.AWB_DATE) splcode1, 
			trim(to_char(round(pkg_exp_val.get_volume(t2.awb_no, t2.pman_pcs), 2),'99990.00')) as volMc
		from   exp_pmanifest_awb t1, awb t2
		where  t1.awb_no = t2.awb_no
			and    TO_CHAR(t1.awb_date,'DDMONYY') =  TO_CHAR(t2.awb_date,'DDMONYY')			
			and    t1.flt_key = #origFltKey#
			and    t1.flt_date = to_date(#origFltDate#,'DDMONYY')
			and    t1.unldg_pt = #origPortOfCall#
			and    (t1.unassigned_bulk_pcs > 0)
		)
		</select>
	
	<insert id="sqlpremanifestbulkawbinsert" parameterClass="cargo.cms.export.bo.BulkCargoBO" >	
		INSERT INTO EXP_PMANIFEST_AWB (
		   AWB_NO, AWB_DATE, FLT_KEY, 
		   FLT_DATE, UNLDG_PT, GROUP_NO, 
		   BLDUP_INSTR, MAN_RMK, BULK_PCS, 
		   BULK_WT, CR_USER_ID, CR_DATE, 
		   LM_USER_ID, LM_DATE,FLT_TYPE,PRIORITY,
		   UNASSIGNED_BULK_PCS,UNASSIGNED_BULK_WT,PMAN_PCS,PMAN_WT,TR_TYPE)
		   VALUES
		   (#awbNo#,to_date(#awbDate#,'DDMONYY'),#fltNo#,to_date(#fltDate#,'DDMONYY'),#bulk_UnldgPT#,#bulk_Grp_No#,#bulk_BuldpInstr#,
		   #bulk_ManfRem#,#bulk_Pc#,#bulk_Wt#,#crUserId#,sysdate,#lastModUserId#,sysdate,'E',#priority#,
		   #unAsgnbulk_Pc#,#unAsgnbulk_Wt#,#pmanPcs#,#pmanWt#,#trtype#)
	</insert>
	
	<update id="sqlpremanifestbulkawbupdate" parameterClass="cargo.cms.export.bo.BulkCargoBO" >	
		UPDATE EXP_PMANIFEST_AWB 
			SET
				BULK_PCS = #bulk_Pc#,
				BULK_WT = #bulk_Wt#,
				GROUP_NO = #bulk_Grp_No#, 
		   		BLDUP_INSTR = #bulk_BuldpInstr#,
		   		MAN_RMK = #bulk_ManfRem#,
		   		UNASSIGNED_BULK_PCS = #unAsgnbulk_Pc#,
		   		UNASSIGNED_BULK_WT = #unAsgnbulk_Wt#,
		   		PMAN_PCS = #pmanPcs#,
				PMAN_WT	= #pmanWt#,
		   		LM_USER_ID = #lastModUserId#,
		   		LM_DATE = sysdate,
		   		TR_TYPE = #trtype#
				WHERE
				FLT_KEY = 	#fltNo#
				AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
				AND AWB_NO =#awbNo#
				AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
				AND UNLDG_PT = #bulk_UnldgPT#
	</update>
	
	<select id="sqlpremanifestbulkawbexist" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="java.lang.Integer">	
		SELECT COUNT(1) FROM EXP_PMANIFEST_AWB
			WHERE
			
				FLT_KEY = 	#fltNo#
				AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
				AND AWB_NO =#awbNo#
				AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
				AND UNLDG_PT = #bulk_UnldgPT#
	</select>
	<select id="sqlpremanifestbulkoldrecord" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="java.util.HashMap">
		SELECT BULK_PCS ,BULK_WT,LM_USER_ID FROM EXP_PMANIFEST_AWB
			WHERE FLT_KEY = #fltNo#
				AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
				AND AWB_NO =#awbNo#
				AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
				AND UNLDG_PT = #bulk_UnldgPT#
	</select>
	
	<insert id="sqlpremanifestppkawbinsert" parameterClass="cargo.cms.export.bo.PrePackCargoBO" >	
		INSERT INTO EXP_PMANIFEST_ULD (
		   BLDUP_INSTR, CR_DATE, CR_USER_ID, 
		   FLT_DATE, FLT_KEY, GROUP_NO, 
		   LM_DATE, LM_USER_ID, MAN_RMK,
		   GROSS_WT,TARE_WT, 
		   PPK_TYPE, ULD_BT_NO, UNLDG_PT,CONTR_CODE,RCL_NO,FLT_TYPE,TRANSIT_FLG,HDLG_MODE) 
		VALUES (	
			#ppk_BuldpInstr#,sysdate,#crUserId#,#fltDate#,#fltNo#,		   
			#ppk_Grp_No#,sysdate,#lastModUserId#,#ppk_ManfRem#,
			#ppk_gross_wt#,#ppk_tar_wt#,'P',
			#uldNo#,#ppk_UnldgPT#,#ppk_Contr_Code#,#ppk_rcl_NO#,'E',
			(SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#uldNo#),
			(SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#uldNo#)
		)
	</insert>
	<!-- commented on 30 MAY 2011 as it is converted to java code -->	
	<!--  <parameterMap id="awb_event_ins_by_awb_map" class="map">
		<parameter property="RESULT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="RCLNO"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBNO"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="USER"        jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>	
	<procedure id="awbeventinsertbyawb" parameterMap="awb_event_ins_by_awb_map" >
		{? = call pkg_pman.awb_event_ins_by_awb(?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap id="awb_event_ins_by_uld_map" class="map">
		<parameter property="RESULT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>	
		<parameter property="RCLNO"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>	
		<parameter property="USER"        jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>	
	<procedure id="awbeventinsertbyuld" parameterMap="awb_event_ins_by_uld_map" >
		{? = call pkg_pman.awb_event_ins_by_uld(?,?,?,?,?)  }
	</procedure>-->
	
	<insert id="sqlpremanifestbulkconnfltinsert" parameterClass="cargo.cms.export.bo.ConntFlightBO" >	
		INSERT INTO EXP_PMANIFEST_AWB_CONN_FLT (
		   AWB_NO, AWB_DATE, CONN_FLT_SNO,FLT_KEY, 
		   FLT_DATE, FLT_NO,CARR_CODE, CONN_FLT_KEY,CONN_FLT_NO,CONN_FLT_CARR, CONN_FLT_DATE, 
		   UNLDG_PT, SECTOR, CR_USER_ID, 
		   CR_DATE, LM_USER_ID, LM_DATE) 
		VALUES ( #awbNo#,to_date(#awbDate#,'DDMONYY') ,#cnetg_Flt_SNO#,#fltNo# ,
			   to_date(#fltDate#,'DDMONYY') ,#fltsfx#,#fltpfx#,#cnetg_Flt_Key# ,#cnetg_Flt_No#,#cnetg_Flt_CarrCode#,
			   to_date(#cnetg_Flt_Date#,'DDMONYY') ,
			   #bulk_UnldgPT# ,#cnetg_Flt_Sector# ,#crUserId# ,
			    sysdate, #lastModUserId#,sysdate )	
	</insert>	
	
	<insert id="sqlpremanifestppkconnfltinsert" parameterClass="cargo.cms.export.bo.ConntFlightBO" >	
		INSERT INTO EXP_PMANIFEST_ULD_CONN_FLT (
		   CONN_FLT_SNO,FLT_KEY, FLT_DATE, CARR_CODE,FLT_NO,CONN_FLT_KEY,CONN_FLT_NO,CONN_FLT_CARR, 
		   CONN_FLT_DATE, ULD_BT_NO, SECTOR, 
		   CR_USER_ID, CR_DATE, LM_USER_ID, 
		   LM_DATE,UNLDG_PT) 
		VALUES (#cnetg_Flt_SNO#,#fltNo# ,to_date(#fltDate#,'DDMONYY') ,#fltpfx#,#fltsfx#,
				#cnetg_Flt_Key# ,#cnetg_Flt_No#,#cnetg_Flt_CarrCode#,
		   		to_date(#cnetg_Flt_Date#,'DDMONYY') ,#uldNo# ,#cnetg_Flt_Sector# ,
	   			#crUserId#,sysdate ,#lastModUserId# ,sysdate,#ppk_UnldgPT# )			    
	</insert>
	
	<select id="getConsigneeCity" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="cargo.cms.export.bo.BulkCargoBO">	
		SELECT CODE as code FROM EXP_CAR, 
        mast_city where  code_desc = csgne_place AND AWB_NO =#awbNo# AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>

	<select id="getConsigneeCode" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="cargo.cms.export.bo.BulkCargoBO">	
		SELECT csgne_place as code FROM EXP_CAR where AWB_NO =#awbNo# AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>

	<select id="getCatalogFor_OBC_TransitMail" parameterClass="map" resultClass="java.lang.String">	
		select catalog from awb where awb_no=#AWB_NO# and awb_date=#AWB_DATE#
	</select>
	<update id="UPDATE_GROUP_NO_EXP_PMAN_AWB" parameterClass="map" >	
		UPDATE EXP_PMANIFEST_AWB 
			SET
				GROUP_NO = #GROUP_NO#
			WHERE
				FLT_KEY = 	#FLT_KEY#
				AND FLT_DATE = to_date(#FLT_DATE#,'DDMONYY')
				AND AWB_NO =#AWB_NO#
				AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
				AND UNLDG_PT = #UNLDGPT#
	</update>
	<update id="UPDATE_MAN_REMARKS_EXP_PMAN_TARMAC_ULD" parameterClass="map" >	
		UPDATE EXP_PMAN_TARMAC_ULD 
			SET
				MAN_RMK = #MAN_REMARKS#
			WHERE
				FLT_KEY = 	#FLT_KEY#
				AND FLT_DATE = to_date(#FLT_DATE#,'DDMONYY')
				AND ULD_BT_NO =#ULD_BT_NO#
	</update>
	
	<update id="UPDATE_TRF_NO_EXP_PMAN_TARMAC_ULD" parameterClass="map" >	
		UPDATE EXP_PMAN_TARMAC_ULD_AWB 
			SET
				TRF_NO = #TRF_NO#
			WHERE
				FLT_KEY = 	#FLT_KEY#
				AND FLT_DATE = to_date(#FLT_DATE#,'DDMONYY')
				AND ULD_BT_NO = #ULD_BT_NO#
				AND AWB_NO = #AWB_NO#
				AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
	</update>
	
	<update id="UPDATE_MAN_REMARKS_EXP_PMAN_TARMAC_AWB" parameterClass="map" >	
		UPDATE EXP_PMAN_TARMAC_AWB 
			SET
				MAN_RMK = #MAN_REMARKS#
			WHERE
				FLT_KEY = 	#FLT_KEY#
				AND FLT_DATE = to_date(#FLT_DATE#,'DDMONYY')
				AND AWB_NO =#AWB_NO#
				AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
	</update>
	
	
	<update id="UPDATE_TRF_NO_EXP_PMAN_TARMAC_AWB" parameterClass="map" >	
		UPDATE EXP_PMAN_TARMAC_AWB 
			SET
				TRF_NO = #TRF_NO#
			WHERE
				FLT_KEY = 	#FLT_KEY#
				AND FLT_DATE = to_date(#FLT_DATE#,'DDMONYY')
				AND AWB_NO =#AWB_NO#
				AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
	</update>
	
	<select id="getPmanAwbSplCodes" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="java.util.ArrayList">	
		SELECT SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9
		FROM AWB AHERE AWB_NO = #awbNo# and AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	</select>
	
   	 	<select id="getPmanAwbEndorseSplCodes" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="cargo.cms.export.bo.BulkCargoBO">
   		SELECT CODE AS splCode
		FROM AWB A
		LEFT JOIN MAST_SPL_HAND_CODE M
		ON (M.CODE =A.SPL_CODE1	OR M.CODE =A.SPL_CODE2 OR M.CODE =A.SPL_CODE3 OR M.CODE =A.SPL_CODE4
		OR M.CODE =A.SPL_CODE5 	OR M.CODE =A.SPL_CODE6 OR M.CODE =A.SPL_CODE7 OR M.CODE =A.SPL_CODE8
		OR M.CODE =A.SPL_CODE9)	AND M.ENDR_PMAN = 'Y' WHERE A.AWB_NO =#awbNo# AND A.AWB_DATE =TO_DATE(#awbDate#,'DDMONYY')
   	</select>
   	<update id="saveEndorsement" parameterClass="cargo.cms.export.bo.BulkCargoBO" >	
		UPDATE EXP_PMANIFEST_AWB 
			SET
				ENDORSED_BY = #userName#,
				ENDORSED_DATE = sysdate,
				LM_USER_ID = #lastModUserId#,
		   		LM_DATE = sysdate
			WHERE
				FLT_KEY = 	#fltNo#
				AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
				AND AWB_NO =#awbNo#
				AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
				AND UNLDG_PT = #bulk_UnldgPT#
	</update>
        <select id="chkPmanCarCreated" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="java.lang.Integer">	
		select count(1) from   awb where  awb_no = #awbNo# and awb_date = #awbDate# and (awb_type = 'E' or awb_type = 'T') and car_yn = 'Y'
	</select>
	<select id="chkUnldgPtInUS" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="java.lang.Integer">	
		select count(1) from mast_city where ctry_code='US' and code = #bulk_UnldgPT#
	</select>
	<select id="chkUSShipperInfo" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="java.lang.Integer">	
		SELECT count(1) FROM EXP_CAR WHERE SHPR_NAME IS NOT NULL AND AWB_NO =#awbNo#
				AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	
	<select id="chkUldPremanifested" parameterClass="cargo.cms.export.bo.PrePackCargoBO" resultClass="java.lang.Integer">
   SELECT COUNT(1) FROM EXP_PMANIFEST_ULD WHERE FLT_KEY = #fltNo# AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
	AND ULD_BT_NO = #uldNo# and FLT_TYPE ='E'
 	</select>
 	
 	<select id="chkAwbExsits" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="java.lang.Integer">
   select count(1) from awb where awb_no=#awbNo# and AWB_DATE = to_date(#awbDate#,'DDMONYY') and awb_closed_yn='N'
 	</select>
 	
 	<insert  id="insertAwbDtls" parameterClass="cargo.cms.export.bo.BulkCargoBO" >
  		INSERT INTO AWB (AWB_NO,AWB_DATE,AWB_TYPE,PPK_TYPE,CARR_CODE,
  		ORIG,DEST,PCS,WT,PMAN_PCS,PMAN_WT,NON_PMAN_PCS,NON_PMAN_WT,
		PMAN_BULK_PCS,PMAN_BULK_WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TR_TYPE,CNSL_IND)VALUES
		(#awbNo#,#awbDate#,'E','B',#fltPfx#,
		'HKG',#bulk_UnldgPT#,'0','0',#bulk_Pc#,#bulk_Wt#,'0','0',
		#bulk_Pc#,#bulk_Wt#,#crUserId#,SYSDATE,#lastModUserId#,SYSDATE,#trtype#,#cnslInd#)
 	</insert>
 	
 	<select id="getAwbOwnerDtls" parameterClass="cargo.cms.export.bo.BulkCargoBO" resultClass="java.util.HashMap">
   select PCS,WT from awb_owner where awb_no = #awbNo# and awb_date = to_date(#awbDate#,'DDMONYY') 
   and carr_code = #fltPfx#
 	</select>
 	
 	<select id="chkPManCreatedForBulk" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	  select'Premanifest has already been created for ' || #AWB_NO# || ' Please Use Amend option. '
	from exp_pmanifest_awb where awb_no= #AWB_NO# and flt_key = #FLT_KEY#
	and flt_date = to_date(#FLT_DATE#,'DDMONYY') and bulk_pcs > 0
 	</select>
 	
 	<select id="chkOwnerShip" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	   select count(1) from dual where (select  FUN_GET_PARENT_CARR (#OWNER#) from dual) =
	    (select  FUN_GET_PARENT_CARR (#FLT_CARR#) from dual)
 	</select>

	<select id="checkVesselFlt" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	   SELECT COUNT(*) as vesselFlight FROM MAST_CARRIER where CODE = #FLT_CARR# and nvl(VESSEL_FLT_YN,'N') = 'Y'
 	</select>
 	
 	<select id="getOwnedPcs" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	  select sum(pcs) from awb_owner where awb_no = #AWB_NO# and awb_date = #AWB_DATE# and (select  FUN_GET_PARENT_CARR (carr_code) from dual) = 
	  (select  FUN_GET_PARENT_CARR (#FLT_CARR#) from dual)
 	</select>
	
 	
 	<select id="getOwnedPcsVsl" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	  select sum(pcs) from awb_owner where awb_no = #AWB_NO# and awb_date = #AWB_DATE# 
 	</select>
 	
 	<select id="getOwnedWtVsl" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	  select sum(wt) from awb_owner where awb_no = #AWB_NO# and awb_date = #AWB_DATE# 
 	</select>
 	
<select id="checkVesselFltSHC" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	   WITH SHC AS 
		( SELECT rule_value as configSHC FROM  CMSRULES where RULE_CODE = 'SHC_CODE_ADD_ACCS')
		SELECT COUNT(*) FROM AWB
		join SHC shc ON 1 = 1
		where AWB_NO = #AWB_NO# and awb_date = to_date(#AWB_DATe#,'DDMONYY')
		AND ( SPL_CODE1 = shc.configSHC OR  SPL_CODE2 = shc.configSHC OR
		SPL_CODE3 = shc.configSHC OR  SPL_CODE4 = shc.configSHC OR
		SPL_CODE5 = shc.configSHC OR  SPL_CODE6 = shc.configSHC OR
		SPL_CODE7 = shc.configSHC OR  SPL_CODE8 = shc.configSHC OR
		SPL_CODE9 = shc.configSHC)
 	</select>

<select id="fetchULDstfsCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	  	 SELECT code as stfsCode FROM (
			SELECT CC_CODE as code FROM V_CST_VSL_CC_CODE_AWB vcc
			join MAST_CONSTRAINT_CODE cc on CC.CODE = VCC.CC_CODE
			where flt_key = #fltKey# and FLT_DATE = #fltDate# and AWB_NO IN 
			(SELECT AWB_NO FROM EXP_PMANIFEST_ULD_AWB where  flt_key = #fltKey# and FLT_DATE = #fltDate# and ULD_BT_NO = #uldNo#)
			order by CC.PRIORITY desc) where rownum = 1
 	</select>

	<select id="checkForSFTCCCCodeContriant" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	   SELECT COUNT(*) as ccConstriant FROM V_CST_VSL_CC_CODE_AWB vcc
			join MAST_CONSTRAINT_CODE cc on CC.CODE = VCC.CC_CODE
			where flt_key = #fltNo# and FLT_DATE = #fltDate# and AWB_NO IN 
			(SELECT AWB_NO FROM EXP_PMANIFEST_ULD_AWB where  flt_key = #fltNo# and FLT_DATE = #fltDate# and ULD_BT_NO = #uldNo#)
			and nvl(CC.CONSTRAINT,'N') = 'Y'
 	</select>

<select id="checkForSFTCCCCodeNotExists" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	   SELECT  COUNT(1) FROM EXP_PMANIFEST_ULD_AWB where flt_key = #fltNo# and FLT_DATE = #fltDate# and ULD_BT_NO = #uldNo#
			AND AWB_NO NOT IN (SELECT AWB_NO FROM V_CST_VSL_CC_CODE_AWB where flt_key = #fltNo# and FLT_DATE = #fltDate#)		
 	</select>


<select id="checkForAirlineCCCodeContriant" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	   SELECT COUNT(*) as ccConstriant FROM V_CST_IMP_CC_CODE_AWB vcc
			join MAST_CONSTRAINT_CODE cc on CC.CODE = VCC.CC_CODE
			where  AWB_NO IN 
			(SELECT AWB_NO FROM EXP_PMANIFEST_ULD_AWB where  flt_key = #fltNo# and FLT_DATE = #fltDate# and ULD_BT_NO = #uldNo#)
			and nvl(CC.CONSTRAINT,'N') = 'Y'
 	</select>

<select id="checkForOwnerDifference" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	    WITH AWB_LIST AS 
			( SELECT AWB_NO , awb_date , ULD_BT_NO FROM EXP_PMANIFEST_ULD_AWB where  flt_key = #fltNo# and FLT_DATE = #fltDate# and ULD_BT_NO = #uldNo# )
		SELECT COUNT(*) as diffInOwner FROM AWB awb
		join AWB_LIST awbList ON awb.awb_no = awbList.awb_no and awb.awb_date = awbList.awb_date
    	where awb.carr_code != (select OWNER_ID from uld_inventory where uld_key = #uldNo#)
 	</select>
 	


 	<select id="getOwnedWt" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	  select sum(wt) from awb_owner where awb_no = #AWB_NO# and awb_date = #AWB_DATE# and (select  FUN_GET_PARENT_CARR (carr_code) from dual) = 
	  (select  FUN_GET_PARENT_CARR (#FLT_CARR#) from dual)
 	</select>
 	<select id="sqlcheckAwbownerPCWeight" parameterClass="map"  resultClass="java.lang.String">
		SELECT WT FROM AWB_OWNER WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND 
		CARR_CODE =(select  FUN_GET_PARENT_CARR (#FLT_CARR#) from dual)
	</select>
 	<select id="sqlfetchPmanPcsWeight" parameterClass="map"  resultClass="java.lang.Double">
		select NVL(sum(PMAN_WT),0) from exp_pmanifest_awb p
		join flt_opr f on f.flt_key = p.flt_key and f.sch_date = p.flt_date and f.flt_type = 'D' 
		where (select  FUN_GET_PARENT_CARR (f.carr_code) from dual) = (select  FUN_GET_PARENT_CARR (#FLT_CARR#) from dual)
		and p.awb_no=#AWB_NO# and p.awb_date=#AWB_DATE#
	</select>
 	
 	<select id="getExsistingPmanPcs" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	 select sum(PMAN_Pcs) from exp_pmanifest_awb p
	join flt_opr f on f.flt_key = p.flt_key and f.sch_date = p.flt_date and f.flt_type = 'D' 
	where (select  FUN_GET_PARENT_CARR (f.carr_code) from dual) =
	(select  FUN_GET_PARENT_CARR (#FLT_CARR#) from dual)
	and awb_no=#AWB_NO#  and awb_date = #AWB_DATE#
 	</select>
 	
 	<select id="getAwbOwner" parameterClass="java.lang.String" resultClass="java.lang.String">
   select carr_code from awb where awb_no = #awbNo# 
   and (AWB_TYPE='E' OR AWB_TYPE='T' )AND AWB_CLOSED_YN = 'N' and rownum=1
 	</select>
 	
 	<select id="chkAWBForImportType" parameterClass="java.lang.String" resultClass="java.lang.Integer">
   select count(1) from awb where awb_type='I' and awb_no=#awbNo# and awb_date = (SELECT NVL(pkg_common.get_awb_date(#awbNo#,'I'), TRUNC(SYSDATE)) FROM DUAL)
 	</select>
 	
 	<select id="chkFlightAssignForPMAN"  parameterClass="java.lang.String" resultClass="java.util.HashMap">	
			SELECT FLT_KEY,TO_CHAR(FLT_DATE,'DDMONYY') AS FLT_DATE,EMPTY_FLG,FLT_TYPE from ULD_INVENTORY WHERE ULD_KEY = UPPER(#uldKey#) 
	</select>
 	
 	<select id="getBuildupInstruction" parameterClass="java.util.HashMap" resultClass="java.lang.String">
    select allotawb.instruction 
	from edi_elp_allot allot ,edi_elp_msg elpmsg,edi_elp_port elpport,
	edi_elp_allot_awb allotawb  where 
  	allot.tr_no =elpmsg.tr_no and 
 	 allot.doc_line_no=allotawb.c_doc_line_no and 
 	 allotawb.awb_no=#AWB_NO#
    and allot.port_doc_line_no=elpport.DOC_LINE_NO    
    and elpmsg.tr_no=elpport.tr_no  and elpport.port=NVL(#UNLDG_PT#,elpport.port)
    and elpmsg.tr_no in (
                SELECT a.trNO FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  
                where elpmsg.flt_key=#FLT_KEY# and elpmsg.flt_date=TO_DATE(#FLT_DATE#, 'DDMONYY') and 
                elpmsg.TRF_IND='Y'  order by to_number(elpmsg.tr_no)  desc)a
                WHERE rownum =1)  and rownum=1
 	</select>
 	
 	<select id="getAwbDateForPMANAWB"  parameterClass="java.util.HashMap" resultClass="java.lang.String">	
			SELECT NVL(pkg_common.get_awb_date(#awbNo#,#awbType#), TRUNC(SYSDATE)) FROM DUAL 
	</select>
 
<!-- ##################### Create Pre Manifest   : End  ########################################-->
	<!-- Issue RCL HHT :: Anup :: Begins -->
    <parameterMap id="rcl_hht_validate_map" class="cargo.cms.export.bo.IssueRCLHeaderBO">
		<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>                  
		<parameter property="radPPKType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>              
		<parameter property="awbNum" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="dummyAWB" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>           
		<parameter property="uldNum" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  
		<parameter property="carrCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>              
		<parameter property="destination" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>                
		<parameter property="awbContent" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>             
		<parameter property="custNum" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
		<parameter property="agentName" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/> 
        <parameter property="qcpInd" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>          
		<parameter property="remarks" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>              
		<parameter property="preRCLNum" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/> 
		<parameter property="splCode1" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/> 
		<parameter property="splCode2" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/> 
		<parameter property="splCode3" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/> 		
		<parameter property="flightKey" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>                
		<parameter property="flightDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/> 
	    <parameter property="crUserID" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  	             
	</parameterMap>
	
	<procedure id="validate_rcl_awb_uld" parameterMap="rcl_hht_validate_map">
		{? = call pkg_exp_hht.val_rcl_awb_uld(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap id="validate_hht_rcl_hd_map" class="cargo.cms.export.bo.IssueRCLHeaderBO">
		<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>                  
		<parameter property="radPPKType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>              
		<parameter property="destination" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="awbContent" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>           
		<parameter property="splCode1" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  
		<parameter property="splCode2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
		<parameter property="splCode3" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>                
		<parameter property="splCode4" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="splCode5" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode6" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/> 
        <parameter property="splCode7" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>          
		<parameter property="splCode8" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
	    <parameter property="crUserID" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  	             
	</parameterMap>		
	
	<procedure id="validate_rcl_hd" parameterMap="validate_hht_rcl_hd_map" >
		{? = call pkg_exp_hht.val_rcl_hd(?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap id="validate_hht_rcl_loc_map" class="java.util.HashMap">
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>                  
		<parameter property="CARRCODE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>              
		<parameter property="PCSLIST" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="GROSSWTLIST" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>           
		<parameter property="NETWTLIST" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  
		<parameter property="TARWTLIST" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>              
		<parameter property="WHDESTLIST" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>                
		<parameter property="LOCCODELIST" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>             
		<parameter property="ULDKEYLIST" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="LSPNOLIST" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>   
		<parameter property="PPKTYPE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  
	</parameterMap>		
	
	<procedure id="validate_rcl_location" parameterMap="validate_hht_rcl_loc_map" >
		{? = call pkg_exp_hht.val_rcl_loc(?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap id="ins_hht_rcl_bulk_map" class="java.util.HashMap">
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbDest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbContent" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="carrCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="custNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="asideAccept" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="handCarry" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="qcpInd" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secCheck" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="dutCommodity" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="truckNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="rmk" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="preRclNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode1" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode3" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode4" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode5" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode6" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode7" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode8" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secRaNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secKcNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secIataCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secAgentName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secRmk" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="pcsList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="grossWtlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="netWtlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="tareWtlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="whDestlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="locCodelist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="uldKeylist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="lspNolist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="dmnLengthlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="dmnWidthlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="dmnHeightlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="dmnPcslist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scItmCodeList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scPcsList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scWtList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scPaid_byList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="userid" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="RCLNO" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
	</parameterMap>		
	
	<procedure id="ins_hht_rcl_bulk" parameterMap="ins_hht_rcl_bulk_map">
		{? = call pkg_exp_hht.ins_rcl_bulk(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap id="ins_hht_rcl_prepack_map" class="java.util.HashMap">
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbDest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbContent" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="carrCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="custNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="asideAccept" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="qcpInd" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secCheck" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="dutCommodity" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="truckNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="rmk" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="preRclNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode1" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode3" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode4" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode5" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode6" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode7" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode8" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secRaNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secKcNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secIataCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secAgentName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secRmk" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="pcsList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="grossWtlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="netWtlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="tareWtlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="whDestlist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="locCodelist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="uldKeylist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="contrCodeList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="lspNolist" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>		
		<parameter property="scItmCodeList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scPcsList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scWtList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scPaid_byList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="userid" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="RCLNO" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
	</parameterMap>
	
	<procedure id="ins_hht_rcl_prePack" parameterMap="ins_hht_rcl_prepack_map">
		{? = call pkg_exp_hht.ins_rcl_ppk(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap id="ins_hht_rcl_mixprepack_map" class="java.util.HashMap">
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>  
		<parameter property="uldNum" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbDest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbContent" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="carrCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="custNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="asideAccept" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="qcpInd" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secCheck" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="dutCommodity" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="truckNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="rmk" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="preRclNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode1" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode3" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode4" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode5" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode6" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode7" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="splCode8" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secRaNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secKcNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secIataCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secAgentName" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="secRmk" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="grossWt" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="netWt" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="tareWt" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="whDest" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="locCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="contourCode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scItmCodeList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scPcsList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scWtList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="scPaid_byList" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="userid" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="RCLNO" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
	</parameterMap>		
	
	<procedure id="ins_hht_rcl_mixPrePack" parameterMap="ins_hht_rcl_mixprepack_map">
		{? = call pkg_exp_hht.ins_rcl_mix(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>

<!-- ##################### Create ULD Assignment   : Start    ####################################-->
	
<!-- ULD is child Pallet, cannot be assigned to flight. -->

<select id="getDgType" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
    select distinct AWB_NO awbNo, to_char(AWB_DATE,'DDMONYY') awbDate , decode(OP_ON,null, decode(APIO_ID,null, UN_ID,APIO_ID),OP_ON) dgTypeId,
    decode(OP_ON,null, decode(APIO_ID,null, 'UN','APIO'),'OVERPACK') dgType
    from EXP_DGD 
    where AWB_NO = #awbNo# AND AWB_DATE = #awbDate#
</select> 

<select id="getOverpackValues" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">  
    select AWB_NO awbNo, to_char(AWB_DATE,'DDMONYY') awbDate , OVERPACK_ID overpackApioUnid,
    OVERPACK_ID overpackId, OVERPACK_PKG pkg,  OVERPACK_PKG pkgUnitQty 
    from EXP_DGD_OP where AWB_NO = #awbNo# AND AWB_DATE = #awbDate# and OVERPACK_ID = nvl(#overpackId#,OVERPACK_ID)
</select> 

<select id="getAPIOValues" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">  
    select AWB_NO awbNo, to_char(AWB_DATE,'DDMONYY') awbDate , APIO_ID apioUnid,
    APIO_ID apioId, APIO_PKG pkg, APIO_PKG pkgUnitQty, OVERPACK_ID overpackId
    from EXP_DGD_APIO where  AWB_NO = #awbNo# AND AWB_DATE = #awbDate# 
    <isNotEmpty property="overpackId" prepend="AND">
    	OVERPACK_ID = nvl(#overpackId#,OVERPACK_ID)
    </isNotEmpty>
    <isNotEmpty property="apioId" prepend="AND">
    	APIO_ID = nvl(#apioId#,APIO_ID)
    </isNotEmpty>
</select> 

<select id="getUNIDValues" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">  
    select AWB_NO awbNo, to_char(AWB_DATE,'DDMONYY') awbDate , UN_ID unid  ,  UN_ID overpackApioUnid,  
    PKG_PCS ||'/' || QTY ||'/' || QU pkgUnitQty, PKG_PCS pkg,  QTY qty,  QU unit from EXP_DGD 
    where AWB_NO = #awbNo# AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
     <isNotEmpty property="overpackId" prepend="AND">
    	OP_ON = nvl(#overpackId#,OP_ON)
    </isNotEmpty>
    <isNotEmpty property="apioId" prepend="AND">
    	APIO_ID = nvl(#apioId#,APIO_ID)
    </isNotEmpty>
     <isNotEmpty property="unid" prepend="AND">
    	UN_ID = nvl(#unid#,UN_ID)
    </isNotEmpty>
</select> 

	<select id="getDefaultAWBSplValues" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT 
		  CASE WHEN  (select count(1) from mast_spl_hand_code where NVL(dls_yn,'N') = 'Y' and code = SPL_CODE1) > 0 then SPL_CODE1 ELSE '' end shcOne,
		  CASE WHEN  (select count(1) from mast_spl_hand_code where NVL(dls_yn,'N') = 'Y' and code = SPL_CODE2) > 0 then SPL_CODE2 ELSE '' end shcTwo,
		  CASE WHEN  (select count(1) from mast_spl_hand_code where NVL(dls_yn,'N') = 'Y' and code = SPL_CODE3) > 0 then SPL_CODE3 ELSE '' end shcThree,
		  CASE WHEN  (select count(1) from mast_spl_hand_code where NVL(dls_yn,'N') = 'Y' and code = SPL_CODE4) > 0 then SPL_CODE4 ELSE '' end shcFour,
		  CASE WHEN  (select count(1) from mast_spl_hand_code where NVL(dls_yn,'N') = 'Y' and code = SPL_CODE5) > 0 then SPL_CODE5 ELSE '' end shcFive,
		  CASE WHEN  (select count(1) from mast_spl_hand_code where NVL(dls_yn,'N') = 'Y' and code = SPL_CODE6) > 0 then SPL_CODE6 ELSE '' end shcSix,
		  CASE WHEN  (select count(1) from mast_spl_hand_code where NVL(dls_yn,'N') = 'Y' and code = SPL_CODE7) > 0 then SPL_CODE7 ELSE '' end shcSeven,
		  CASE WHEN  (select count(1) from mast_spl_hand_code where NVL(dls_yn,'N') = 'Y' and code = SPL_CODE8) > 0 then SPL_CODE8 ELSE '' end shcEight,
		  CASE WHEN  (select count(1) from mast_spl_hand_code where NVL(dls_yn,'N') = 'Y' and code = SPL_CODE9) > 0 then SPL_CODE9 ELSE '' end shcNine,		 		 
		  (select DECODE(COUNT(1),'0','N','Y') from CUST_AIRL_SPL_CODE where spl_type ='SPL_DANG' and carr_code = a.carr_code and spl_code in
		  (a.Spl_Code1,a.Spl_Code2,a.Spl_Code3,a.Spl_Code4,a.Spl_Code5,a.Spl_Code6,a.Spl_Code7,a.Spl_Code8,a.Spl_Code9) ) as awbDgInd
		  FROM AWB a WHERE awb_no = #awbNo# AND awb_date = #awbDate#
	</select>
	
	<select id="getSplValues" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		select SPL_CODE1 shcOne, SPL_CODE2 shcTwo, SPL_CODE3 shcThree, SPL_CODE4 shcFour, SPL_CODE5 shcFive,
		SPL_CODE6 shcSix, SPL_CODE7 shcSeven, SPL_CODE8 shcEight, SPL_CODE9 shcNine
		from  AWB where awb_no = #awbNo# and  awb_date = #awbDate# and rownum = 1
	</select>
	
	<select id="validateSplValuesFromMast" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from MAST_SPL_HAND_CODE where code = #SHC#
	</select>
	
	<select id="validateSplValuesFromAWB" parameterClass="map" resultClass="java.lang.Integer">
		select count(1) 
		from  AWB where awb_no = #awbNo# and  awb_date = #awbDate# and 
               #shc# in (SPL_CODE1,SPL_CODE2 , SPL_CODE3 , SPL_CODE4 , SPL_CODE5 ,
		SPL_CODE6 , SPL_CODE7 , SPL_CODE8 , SPL_CODE9 )  
	
	</select>
	<select id="getTagInfoList" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		<![CDATA[
		select tab1.awb_no awbNo,  tab1.awb_date awbDate, tab2.TAG_NO tagNo, tab2.TAG_PCS pc, tab2.TAG_WT wt, tab2.DEST dest
		from  EXP_RCL_HD tab1 , EXP_RCL_OBC tab2 
		where tab1.STATUS<>'V' AND tab1.RCL_NO = tab2.RCL_NO and tab1.awb_no = #awbNo# and  tab1.awb_date = to_date(#awbDate#,'DDMONYY')
		]]>
	</select>
	
	<select id="getHAWBInfoList" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		select tab1.awb_no awbNo,  tab1.awb_date awbDate, tab2.HAWB_NO hawbNo, tab2.HAWB_PCS pc,  tab2.HAWB_NET_WT wt, tab2.HAWB_PCS hawbInvPc,  tab2.HAWB_NET_WT hawbInvWt, 'Y' fhlExist
		from edi_fhl tab1, edi_fhl_hawb tab2 
		where tab1.tr_no = tab2.tr_no and  tab1.awb_no = #awbNo# and  tab1.awb_date = #awbDate#
	</select>
	
		 <!-- Check for Inventory Pc/Wt equals BU Pc/Wt  -->
		<select id="getInvBuPcWt" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="java.lang.String">
		SELECT COUNT(inv.AWB_NO)
        FROM AWB_INVENTORY inv
        WHERE inv.AWB_NO = #awbNo# and  inv.AWB_DATE = #awbDate#
        AND NOT EXISTS(SELECT NULL FROM ULD_INVENTORY WHERE ULD_KEY = inv.ULD_KEY AND (PPK_IND = 'Y' OR MIX_PPK_IND = 'Y') AND (REBUILD_YN = 'N' AND TOPUP_YN = 'N')) 			
 		AND not (flt_type = 'E' and FLT_KEY IS not NULL  ) AND TRM_NO IS NULL
 		GROUP BY inv.AWB_NO, inv.AWB_DATE
 		HAVING SUM(inv.LOCN_PCS) = #assignedPcs# AND SUM(inv.LOCN_WT) = #assignedWt#
	</select>
	
	<!-- Get Tags From RESDIT for Mail As Cargo and NBK ULDs  -->
	<select id="getRESDITHAWBInfoList" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		 SELECT ra.awb_no awbNo,  ra.awb_date awbDate, rt.TAG_NO hawbNo, 1 pc,  rt.TAG_WT wt, rt.TAG_NO hawbNo, 1 hawbInvPc,  rt.TAG_WT hawbInvWt
		 FROM EDI_RESDIT_TAG_DTL rt
		 INNER JOIN EDI_RESDIT_AWB_DTL ra ON ra.TR_AWB_NO = rt.TR_AWB_NO
		 INNER JOIN EDI_RESDIT_HD rh ON rh.TR_NO = ra.TR_NO
		 WHERE ra.AWB_NO = #awbNo# and  ra.AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')
		 AND rt.CONTAINER_NO = #uldKey#
	</select>
	
	<select id="getHAWBInfoWhenInvEqualList" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT tab1.awb_no awbNo,  tab1.awb_date awbDate, tab2.HAWB_NO hawbNo, tab2.HAWB_PCS pc,  tab2.HAWB_NET_WT wt, tab2.HAWB_PCS hawbInvPc,  
	    tab2.HAWB_NET_WT hawbInvWt, 'Y' fhlExist
			FROM edi_fhl tab1, edi_fhl_hawb tab2 
			WHERE tab1.tr_no = tab2.tr_no AND  tab1.awb_no = #awbNo#
	    AND  tab1.awb_date = TO_DATE(#awbDate#, 'DDMONYY')
	    AND EXISTS 
	    (SELECT HAWB_NO 
	      FROM HAWB_INVENTORY hi
	      INNER JOIN AWB_INVENTORY ai ON ai.SEQ_NO = hi.SEQ_NO
	      WHERE ai.AWB_NO = #awbNo# AND ai.AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY') AND (ai.FLT_TYPE IS NULL OR ai.FLT_TYPE!='E') AND hi.HAWB_NO = tab2.HAWB_NO
	    )
	</select>
	
	<select id="checkFHLHAWB" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		select tab1.awb_no awbNo,  tab1.awb_date awbDate, tab2.HAWB_NO hawbNo, nvl(tab2.HAWB_PCS,0) pc,  nvl(tab2.HAWB_NET_WT,0) wt, 'Y' fhlExist
		from edi_fhl tab1, edi_fhl_hawb tab2 
		where tab1.tr_no = tab2.tr_no and  tab1.awb_no = #awbNo# and  tab1.awb_date = #awbDate# and tab2.HAWB_NO = #hawbNo#
	</select>
	
	<select id="isUldEicChildPallet" parameterClass="map" resultClass="java.lang.String">
		select eic_flg from uld_inventory
		where uld_key = #uldKey# and base_plt is not null
	</select>

	<select id="sql_check_pman_data" parameterClass="map" resultClass="java.lang.Integer">
		select count(1) from exp_pmanifest_uld_awb where
			flt_key = #FLTKEY# and
			flt_date = to_date(#FLTDATE#,'DDMONYY') and
			uld_bt_no =#ULDKEY#
	</select> 
	
	<parameterMap id="fltCarrCodeMap" class="map" >
		<parameter property="CARRCODE"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	<procedure id="get_flt_carr_code_createULDAssignment" parameterMap="fltCarrCodeMap" >
			{	? = call pkg_exp_val.get_flt_carr_code(?,?)		}
	</procedure>

	<select id="exportcheckdlsexistinventory" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT count(ULD_KEY) FROM  ULD_INVENTORY WHERE ULD_KEY=#uldKey#
	</select>

	<update id="updateUldPmanInv" parameterClass="map">
				UPDATE ULD_INVENTORY SET
				flt_key = #FLTKEY#,
				flt_date = #FLTDATE#,
				flt_key = 'E""',
				CFM_STATUS = 'CONFIRMED',
				LOC_CODE = #LOC_CODE#,
				owned_inv = 'Y',
				lm_user_id = #lastModUserId#,
				lm_date = sysdate,
				ENTRY_TIME = sysdate
				WHERE ULD_KEY = #ULD_KEY#
	</update>

	<insert id="insertUldPmanInv" parameterClass="map">
		insert into uld_inventory(uld_key, flt_type, flt_key, flt_date, loc_code, owned_inv, DAM_IND, owner_id, strg_date, agent_inv, cfm_status, lm_user_id, lm_date,ENTRY_TIME)
		values (#ULD_KEY#, 'E', #FLTKEY#, #FLTDATE#, #LOC_CODE#, 'Y', 'N', '---', sysdate, 'N', 'CONFIRMED', #lastModUserId#, sysdate ,sysdate)
	</insert>

	<insert id="insertUldPmanMov" parameterClass="map">
		insert into ULD_MOV(TR_TYPE, EVENT_ID, ULD_KEY, TR_NO, TR_DATE, DOC_LINE_NO, MOV_FROM, FLT_TYPE, FLT_KEY, FLT_DATE,cr_user_id, cr_date, lm_user_id, lm_date, seq_no, DAM_IND)
		values ('EF', 'EF', #ULD_KEY#, #ULD_KEY#, sysdate, 1, 'WSE1', 'E', #FLTKEY#, #FLTDATE#, #lastModUserId#, sysdate, #lastModUserId#, sysdate, uld_mov_seq.nextval, 'N')
	</insert>

	<select id="getUldEicYN" parameterClass="map" resultClass="java.lang.String">
		SELECT nvl(EIC_FLG,'N') eicflg FROM ULD_INVENTORY WHERE ULD_KEY = #ULD_KEY# 
	</select>
	
	<select id="getUldLocnCode" parameterClass="map" resultClass="java.lang.String">
		SELECT loc_code locCode FROM ULD_INVENTORY WHERE ULD_KEY = #ULD_KEY# 
	</select>
	
	
	<select id="getBupComplULD" parameterClass="map" resultClass="java.lang.String">
		select 'x' dummy
            from   awb_inventory
            where  uld_key = #ULD_KEY#
            and    flt_key is null
            and    rownum = 1
	</select>
	
	<parameterMap id="valRestrictedCCMap" class="map" >
		<parameter property="RET"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBNO" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="STATUS" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	<procedure id="Check_val_restricted_cc" parameterMap="valRestrictedCCMap" >
			{	? = call pkg_exp_val.val_restricted_cc(?,?,?,?)		}
	</procedure>
	
	<select id="getPmanShpType" parameterClass="map" resultClass="java.lang.Integer">
		select count(1)	from   exp_car 
		where awb_no = #AWBNO#	and awb_date = #AWBDATE# and accept_mode = 'LOB' and rownum = 1
	</select>
	
	<parameterMap id="uldAssignMap" class="map" >
		<parameter property="RESULT"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="UNLDGPT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDNO"   jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="BASEPLT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	<procedure id="sqluldassignmentvalidentry" parameterMap="uldAssignMap" >
		{? = call PKG_PMAN.val_uld_assign(?,?,?,?,?)  }
	</procedure>
		
	<select id="sqluldassignheaderdetails" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.CreateULDBO">
		SELECT CARR_CODE as fltPfx,FLT_NO as fltSfx, 
		PKG_COMMON.get_flt_eta(#fltNo#, TO_DATE(#fltDate#,'DDMONYY'), 'D', 'DD') AS etd,
		A.FLT_KEY as fltKey,TO_CHAR(A.SCH_DATE,'DDMONYY') as fltDate,
			to_char(EST_DATE,'DDMONYYYY') as fltEstDate ,
		 	pkg_exp_val.get_uld_assigned_wt(#fltNo#, #fltDate#, #uldNo#) as totalAssignWt,
		 	(SELECT B.NESTING_ID FROM EDI_RESDIT_AWB_DTL A 
                JOIN EDI_RESDIT_TAG_DTL B ON A.TR_AWB_NO = B.TR_AWB_NO 
                JOIN EDI_RESDIT_HD C ON C.TR_NO = A.TR_NO
                WHERE (C.flt_key,C.flt_date) 
                IN (SELECT IMP_FLT_KEY,IMP_FLT_DATE FROM uld_inventory where ULD_KEY = #uldNo# and HANDLING_MODE is not null and HANDLING_MODE='NBK' ) 
		        AND B.CONTAINER_NO = #uldNo# AND ROWNUM = 1
		    ) as nestedId, (SELECT DECODE(COUNT(1), 0, 'N', 'Y') as mailAsCargo 
        FROM MAST_CARRIER where code = A.CARR_CODE and NVL(MAIL_AS_CARGO,'X') = 'Y') as mailAsCargo
		 	FROM FLT_OPR A  
				WHERE A.FLT_KEY=UPPER(#fltNo#) 		
					AND A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
					AND A.FLT_TYPE = 'D'	
	</select>
	
	<select id="getNbkDetails" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.CreateULDBO">
	select handling_mode hdlgInd,loc_code as location from uld_inventory where uld_key=#PARAM#
	</select>

	<select id="sqluldassignuldtypedetails" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.CreateULDBO">
		select tare_weight as maxTareWt, 
      		(select MAX_WEIGHT from ULD_GROUP_CARR where  carr_code = #fltPfx# and  uld_type = #uldcode#) as maxWt,
			nvl(decode(empty_flg, 'Y', gross_weight, tare_weight),0.0) as grossWt,
			(select COUNT(1)  from uld_inventory where base_plt = #uldNo#
			and exists (select uld_key from uld_inventory b where base_pal_flg = 'Y' and uld_key = #uldNo#)) as isEIC,
			nvl(Transit_flg,'N') as transitYn,
      		handling_mode as hndlingMode
	  	from uld_inventory
		where  uld_key = #uldNo#
			
	</select>	
	<select id="getULDDetailsFromInv" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.CreateULDBO">
			   select u.tare_weight maxTareWt,
               nvl(decode(u.empty_flg, 'Y', u.gross_weight, u.tare_weight),0.0)  as grossWt,
               nvl(u.Transit_flg,'N') as transitYn,
               u.handling_mode as hndlingMode,
            	CASE
					WHEN u.contr_code IS NOT NULL
				    THEN u.contr_code
				    ELSE
				      CASE
				        WHEN cont_plt='C' AND (SELECT COUNT(1) FROM uld_type_contr WHERE uld_type=SUBSTR(TRIM(uld_key),1,3))=1
				        THEN
				        	(SELECT contr_code
				         	FROM uld_type_contr
				           	WHERE uld_type=SUBSTR(TRIM(uld_key),1,3))
				    	ELSE NULL
				   	END
				END AS contrcode,
               (select COUNT(1)  from uld_inventory where base_plt = #uldNo# 
                and exists (select uld_key from uld_inventory b where base_pal_flg = 'Y' and uld_key = #uldNo#)) as isEIC
               from uld_inventory u, mast_uld_type uldType where uld_key=#uldNo# and uldType.code=SUBSTR(TRIM(uld_key),1,3)
	</select>
	<select id="sqluldnonpremanfassignment" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
		SELECT 
			AWB_NO as awbNo, 
			CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,
			to_char(AWB_DATE,'DDMONYY') as awbDate, 
			cc_code as contrcode,
			pcs as rclPcs, 
			wt as rclWt, 
			catalog as catalog,
			cargoType as cargoType,
			spl_codes as splCode,
			DEST as dest
		FROM   V_EXP_NONPREMAN_ULD_ASSIGN
		WHERE	ULD_KEY =#uldNo#
	</select>	

	<select id="uldAssignmentCheckForMixOrPrepackRebuildTopup" parameterClass="java.lang.String" resultClass="java.lang.Integer">
			select count(1) from uld_inventory where uld_key = #uldBtNo# and  (MIX_PPK_IND='Y' OR ppk_ind = 'Y')  and (rebuild_yn = 'N' AND topup_yn = 'N')
	  </select>
	<select id="sqlchecktransituld" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_KEY = #uldKey# AND (HANDLING_MODE IN ('NBK','PPK') AND REBUILD_YN = 'N' AND TOPUP_YN = 'N')
	</select>  
	<select id="sqluldpremanfassignment" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">
	<!-- 	SELECT ROWNUM, CONCAT(CONCAT(SUBSTR(T1.AWB_NO,0,3),'-'),SUBSTR(T1.AWB_NO,4)) as awbNoDisplay ,T1.AWB_NO as awbNo, to_char(T1.AWB_DATE,'DDMONYY') as awbDate, 
	         T2.CATALOG as catalog, T2.DEST as dest,
			 PKG_PMAN.AWB_SPL_CODES(T1.AWB_NO, T1.AWB_DATE) as splcode, pkg_exp_val.get_exp_awb_cc_code(t1.flt_key, t1.flt_date, t1.awb_no) as cccode, 
	         UNLDG_PT as unLdgPt, GROUP_NO as groupno, BULK_PCS as preManfBulkPc, BULK_WT as preManfBulkWt, 
    	     (BULK_PCS-ASSIGNED_BULK_PCS) as unassignedPcs, (BULK_WT-ASSIGNED_BULK_WT) as unassignedWt, 
	         decode(PKG_PMAN.AWB_ULD_PCS_WT(T1.AWB_NO, T1.AWB_DATE, #uldNo#, 'PCS'),'0','') as assignedPcs,
	         PKG_PMAN.AWB_ULD_PCS_WT(T1.AWB_NO, T1.AWB_DATE, #uldNo#, 'PCS') oldStoredPc,
      	     decode(PKG_PMAN.AWB_ULD_PCS_WT(T1.AWB_NO, T1.AWB_DATE, #uldNo#, 'WT'),'0','') as assignedWt,
      	     PKG_PMAN.AWB_ULD_PCS_WT(T1.AWB_NO, T1.AWB_DATE, #uldNo#, 'WT') as oldStoredWt,
	         PKG_PMAN.AWB_ULD_IND(T1.AWB_NO, T1.AWB_DATE, #uldNo#) as storageInd,
    	     MAN_RMK as manfRmk, BLDUP_INSTR as buldpInstr,
    	     FLT_KEY as fltNo,TO_CHAR(FLT_DATE,'DDMONYY')  as fltDate,UNLDG_PT as unLdgPt
		FROM   EXP_PMANIFEST_AWB T1, AWB T2 
			WHERE  T1.AWB_NO = T2.AWB_NO
				AND    T1.AWB_DATE = T2.AWB_DATE
				AND    T2.AWB_TYPE='E'   
				AND    FLT_KEY = #fltNo#
				AND    FLT_DATE = #fltDate#
				AND    UNLDG_PT = #unldgPt#
				AND    BULK_PCS-ASSIGNED_BULK_PCS > 0
				AND    NOT EXISTS
					 (SELECT NULL
                   		FROM   EXP_PMANIFEST_ULD_AWB T3
		                   WHERE  FLT_KEY = #fltNo#
        		           AND    FLT_DATE = #fltDate#
                		   AND    T3.ULD_BT_NO = #uldNo#
		                   AND    UNLDG_PT = #unldgPt#
        		           AND    T3.AWB_NO = T1.AWB_NO
                		   AND    T3.AWB_DATE = T1.AWB_DATE
		              )
		              
		               -->
      WITH CARGO_TYPE AS (SELECT AWB_NO,AWB_DATE,
       					   (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
       					   (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
                            THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
                            ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as catalog	  
	            		  FROM AWB A)		               
		SELECT ROWNUM, T2.HOUSE_FLG as houseFlag,CONCAT(CONCAT(SUBSTR(T1.AWB_NO,0,3),'-'),SUBSTR(T1.AWB_NO,4)) as awbNoDisplay ,T1.AWB_NO as awbNo, to_char(T1.AWB_DATE,'DDMONYY') as awbDate, 
	         T2.CATALOG as catalog, 
	         (SELECT 
			        (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
			        (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
			        THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
			        ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
			  FROM AWB A WHERE  A.AWB_NO=T2.AWB_NO AND A.AWB_DATE=T2.AWB_DATE) as cargoType,
	         T2.DEST as dest,
			 pkg_exp_val.get_exp_awb_cc_code(t1.flt_key, t1.flt_date, t1.awb_no) as cccode, 
			 case when T2.awb_type='T' and T2.CATALOG !='TM' and (select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(t1.awb_no) from dual )) is null then 'Y' else 'N' end as transCCExists,			 
			 case when (select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(t1.awb_no) from dual )) ='Y' and T2.CATALOG !='TM'  then 'Y' else 'N' end  as ccAllowYn,  
	         UNLDG_PT as unLdgPt, GROUP_NO as groupno, BULK_PCS as preManfBulkPc, BULK_WT as preManfBulkWt, 
    	     UNASSIGNED_BULK_PCS as unassignedPcs, UNASSIGNED_BULK_WT as unassignedWt,     
    	     MAN_RMK as manfRmk, BLDUP_INSTR as buldpInstr,
    	     FLT_KEY as fltNo,TO_CHAR(FLT_DATE,'DDMONYY')  as fltDate,UNLDG_PT as unLdgPt
		FROM   EXP_PMANIFEST_AWB T1, AWB T2 
			WHERE  T1.AWB_NO = T2.AWB_NO
				AND    T1.AWB_DATE = T2.AWB_DATE				   
				AND    FLT_KEY = #fltNo#
				AND    FLT_DATE = #fltDate#
				AND    UNLDG_PT = #unldgPt#
				AND    UNASSIGNED_BULK_PCS > 0
				AND    NOT EXISTS
					 (SELECT NULL
                   		FROM   EXP_PMANIFEST_ULD_AWB T3
		                   WHERE  FLT_KEY = #fltNo#
        		           AND    FLT_DATE = #fltDate#
                		   AND    T3.ULD_BT_NO = #uldNo#
		                   AND    UNLDG_PT = #unldgPt#
        		           AND    T3.AWB_NO = T1.AWB_NO
                		   AND    T3.AWB_DATE = T1.AWB_DATE	)           
		<isNotEmpty property="transitFlag">
			<isEqual property="transitFlag" compareValue="Y">
				AND EXISTS (SELECT NULL FROM AWB_INVENTORY WHERE AWB_NO = T1.AWB_NO AND AWB_DATE = T1.AWB_DATE AND ULD_KEY = #uldNo#)
			</isEqual>
		</isNotEmpty>            			
		<isNotEmpty property="cargoTypeCheck">
			<isEqual property="cargoTypeCheck" compareValue="Y">
				AND (SELECT CATALOG FROM CARGO_TYPE WHERE CARGO_TYPE.AWB_NO=T1.AWB_NO AND CARGO_TYPE.AWB_DATE=T1.AWB_DATE AND ROWNUM=1) IN (#mailFlag#,#cargoFlag#,#courierFlag#)
			</isEqual>
		</isNotEmpty>		    				
	</select>		

	<select id="getAwbInvLocnPcs" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select nvl(sum( locn_pcs),'0' )
			from   awb_inventory
			where  awb_no = #AWB_NO#
			and    awb_date = TO_DATE(#AWB_DATE#, 'DDMONYY')
			and    uld_key = #ULD_KEY# AND not (flt_type = 'E' and FLT_KEY IS not NULL  )
	</select>

	<select id="getAwbInvLocnWt" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select nvl(sum( locn_wt),'0' )
			from   awb_inventory
			where  awb_no = #AWB_NO#
			and    awb_date = TO_DATE(#AWB_DATE#, 'DDMONYY')
			and    uld_key = #ULD_KEY# AND not (flt_type = 'E' and FLT_KEY IS not NULL  )
	</select>
	
	<select id="sqluldassignmentacessorydetails" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.AccessoryBO">
		SELECT ROWNUM, EQUIP_TYPE as equipType, EQUIP_TYPE as equipTypeDB, QTY as qty, FLT_CARR as fltCarr,FLT_NO as fltNo
			FROM   EXP_ULD_ACC
				WHERE  FLT_KEY =#fltNo#
				AND    FLT_DATE =#fltDate#
				AND    ULD_KEY =#uldNo#
				AND    ACTIVITY = 'BUILDUP'
	</select>
	
	<insert id="sqluldassignmentheaderinsert" parameterClass="cargo.cms.export.bo.CreateULDBO" >	
		INSERT INTO EXP_PMANIFEST_ULD (
			   FLT_KEY, FLT_DATE, UNLDG_PT, 
			   ULD_BT_NO,PPK_TYPE,CONTR_CODE,
			   TARE_WT,GROSS_WT,CR_USER_ID, 
			   CR_DATE, LM_USER_ID, LM_DATE,
			   BLDUP_COMPLETE,GROUP_NO,EMPTY_YN, 
			   EIC_YN, flt_type,BB_IND,FLT_USE,TRANSIT_FLG,HDLG_MODE)
		VALUES ( #fltKey#, #fltDate#,#unldg_pt# ,
			    #uldKey#,'B',#contrcode#,#tareWt#,
			    #grossWt#,#crUserId#,sysdate ,
			    #lastModUserId# ,sysdate,
			    #completedFlag#,'000',NVL(#emptyFlag#, 'N'),
				NVL(#eicFlag#, 'N'),'E','N','N',
				(SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey#),
				(SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey#))	    
	</insert>	

	<select id="sqlpmanifestuldawbdetails" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">	
		SELECT tr_No preManfTrNo,
			FLT_KEY as fltNo , FLT_DATE as fltDate, ULD_BT_NO as uldKey, 
			UNLDG_PT as unLdgPt, AWB_NO as awbNo, AWB_DATE as awbDate, 
			ASSIGNED_PCS as assignedPcs, ASSIGNED_WT as assignedWt
		FROM EXP_PMANIFEST_ULD_AWB
		WHERE
			FLT_KEY = #fltNo#
			AND FLT_DATE=#fltDate#
			AND ULD_BT_NO=#uldKey#
			AND AWB_NO=#awbNo#
			AND AWB_DATE=#awbDate#
			<!-- AND ROWNUM=1 -->
	</select>

	<insert id="sqlpmanifestuldawbdetailsinsert" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	
	INSERT INTO EXP_PMANIFEST_ULD_AWB ( tr_No,
		   FLT_KEY, FLT_DATE, ULD_BT_NO, 
		   UNLDG_PT, AWB_NO, AWB_DATE, 
		   ASSIGNED_PCS, ASSIGNED_WT, CR_USER_ID, 
		   CR_DATE, LM_USER_ID, LM_DATE) 
	VALUES 
		(#preManfTrNo#,#fltNo# ,#fltDate# , #uldKey#,
	    #unLdgPt#,#awbNo# ,#awbDate# ,
    	#assignedPcs#, TO_CHAR(#assignedWt#,'9999990D99'), #crUserId#,
	    sysdate,#lastModUserId# , sysdate)
	</insert>
	
	<update id="sqlpmanifestuldawbdetailsupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
		UPDATE EXP_PMANIFEST_ULD_AWB
		SET ASSIGNED_PCS = #assignedPcs#,
			ASSIGNED_WT = TO_CHAR(#assignedWt#,'9999990D99')
		WHERE tr_No = #preManfTrNo#
			<!-- FLT_KEY = #fltNo#
			AND FLT_DATE=#fltDate#
			AND ULD_BT_NO=#uldKey#
			AND UNLDG_PT=#unLdgPt#
			AND AWB_NO=#awbNo#
			AND AWB_DATE=#awbDate# -->
	</update>
	
	<select id="CHECK_VALID_TRUCK_NUM_IN_TRUCK_TRIP"  parameterClass="cargo.cms.export.bo.HHTExitCheckPostBO" resultClass="java.lang.Integer"  >
		select COUNT(1) from exp_rcl_hd hd,truck_trip trip where hd.trip_id = trip.trip_id and hd.truck_no = #truckNum# and trip.closed = 'N'
	</select>
	
	<select id="FETCH_EXIT_CHK_POST_RCL_LIST"  parameterClass="cargo.cms.export.bo.HHTExitCheckPostBO" resultClass="cargo.cms.export.bo.HHTExitCheckPostBO"  >
	select 
		       hd.PPK_TYPE AS rclType,
		       hd.AWB_NO AS awbNo,
		       DECODE(hd.AWB_NO,'','',CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4))) as awbNoDisplay,
		       hd.ULD_KEY AS uldNo,
		       hd.RCL_PCS AS pcs,
		       hd.RCL_WT AS wt,
           trip.trip_id AS tripId,
           hd.RCL_NO AS rclNo,
           to_char(HD.RCL_DATE,'DDMONYY hh:mm') AS rclDate
      from 
               exp_rcl_hd hd,
               truck_trip trip
      where    hd.trip_id = trip.trip_id and 
               hd.truck_no = #truckNum# and 
               trip.closed = 'N' order by hd.rcl_date desc
	</select>
	<update id="CHANGE_TRUCK_ID_VALUE" parameterClass="cargo.cms.export.bo.HHTExitCheckPostBO">
		UPDATE TRUCK_TRIP
		SET EXIT_IND = 'Y', LM_DATE = SYSDATE, LM_USER_ID = #userID#, CLOSE_USER_ID = #userID#, CLOSE_TIME = SYSDATE 
		WHERE TRIP_ID = #tripId#
    </update>
	<update id="sqluldassignmentheaderupdate" parameterClass="cargo.cms.export.bo.CreateULDBO"  >
		UPDATE EXP_PMANIFEST_ULD
			SET CONTR_CODE = #contrcode#,
				TARE_WT = #tareWt#,
				GROSS_WT = #grossWt#,
				eic_yn = #eicFlag#,
				EMPTY_YN = #emptyFlag#,
				bldup_complete = #completedFlag#,
				LM_USER_ID = #lastModUserId#,
				LM_DATE= sysdate
			WHERE
				ULD_BT_NO= #uldKey#
				AND FLT_KEY=#fltKey#
				AND	FLT_DATE=#fltDate#
	</update>
	
	<select id="FETCH_BUILDUP_START_JOBORDER_LIST"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="cargo.cms.export.bo.BupStartBO"  >
		SELECT JO.JO_NO AS jobNo,
       GB.ULD_KEY AS uldKey,
       GB.ULD_TYPE AS uldType,
       GB.CNTR_CODE AS country,
       JO.STATUS AS status
  FROM
       EXP_BU_JO JO,
       EXP_BU_GP_ULD_TYPE GB,
       EXP_BU_GP GBDTL
 WHERE
      JO.GP_NO = GB.GP_NO AND
      GB.GP_NO = GBDTL.GP_NO AND
      JO.FLT_KEY=#fltNo# AND
      JO.FLT_DATE=#fltDate# AND
      JO.CONFIRMED_YN = 'Y'
    <isNotEmpty property="buZone">
		    and  GB.BU_ZONE = #buZone#
	</isNotEmpty>
	<isNotEmpty property="searchUnldgPoint">
			and GBDTL.UNLDG_PT = #searchUnldgPoint#
	</isNotEmpty>
	</select>
	
	<select id="FETCH_BUILDUP_START_WITH_JOBORDER_LIST"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="cargo.cms.export.bo.BupStartBO"  >
	SELECT JO.JO_NO AS jobNo,
       GB.ULD_KEY AS uldKey,
       GB.ULD_TYPE AS uldType,
       GB.CNTR_CODE AS country,
       GB.ALLOT_TYPE AS allotType,
       GB.STATUS AS status,
       GP.UNLDG_PT AS unldgPoint,
       JO.RMK AS joRmk,
       GB.DOC_LINE_NO AS docLineNo,
       JO.GP_NO as gpNo
  FROM
       EXP_BU_JO JO,
       EXP_BU_GP GP,
       EXP_BU_GP_ULD_TYPE GB
 WHERE
      JO.GP_NO = GB.GP_NO AND
      JO.GP_NO = GP.GP_NO AND
      JO.FLT_KEY=#fltNo# AND
      JO.FLT_DATE=#fltDate# AND
      JO.JO_NO = #checkStatus# AND
      JO.CONFIRMED_YN = 'Y'
      <isNotEmpty property="buZone">
		and  GB.BU_ZONE = #buZone#
	  </isNotEmpty>
	  <isNotEmpty property="searchUnldgPoint">
		and GP.UNLDG_PT = #searchUnldgPoint#
	  </isNotEmpty>
   </select>
    <select id="CHECK_ULD_LOCATION_IN_ULD_INVENTORY"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
          select COUNT(1) from mast_wh_loc where code= #jobLocation#
	</select>
	<select id="checkUldAllreadyExistorNot"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    	select COUNT(1) from uld_inventory where loc_code=#jobLocation# and (uld_key != #jobUldKey# and BASE_PLT != #jobUldKey#)
	</select>
	
	<select id="CHECK_ULD_IN_ULD_INVENTORY"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    select COUNT(1) from uld_inventory where uld_key=#jobUldKey# and owned_inv='Y'
	</select>
	<select id="CHECK_ULD_TYPE_IN_ULD_TYPE_CARR"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    SELECT NVL(count(1), 0) as count
			 FROM ULD_GROUP_CARR
			  WHERE ULD_TYPE=#uldType#
	</select>
	<select id="CHECK_ULD_ASSIGNED_OTHER_CARR"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.util.HashMap">
    SELECT FLT_KEY,TO_CHAR(FLT_DATE,'DDMONYY') AS FLT_DATE,EMPTY_FLG,FLT_TYPE from ULD_INVENTORY WHERE ULD_KEY = UPPER(#jobUldKey#) 
	</select>
	<select id="CHECK_ULD_BUILDUP_STATUS"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    select COUNT(1) from exp_pmanifest_uld where flt_key=#fltNo# and flt_date=#fltDate# and uld_bt_no=#jobUldKey# and bldup_complete = 'Y' and bldup_complete_user_id IS not null and BLDUP_COMPLETE_DATE IS not null
	</select>
	<select id="CHECK_ULD_IS_REBUILD_TOPUP"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    select COUNT(1) from uld_inventory where uld_key=#woUldKey# and (rebuild_yn='Y' or topup_yn='Y')
	</select>
	<select id="CHECK_ULD_IS_PPK_MIXPPK"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
     SELECT COUNT(1) FROM ULD_INVENTORY WHERE (PPK_IND='Y' OR MIX_PPK_IND='Y') AND ULD_KEY = #woUldKey#
	</select>
	
	<select id="CHECK_FLIGHT_BUILDUP_STATUS"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    SELECT COUNT(1) FROM FLT_OPR_EVENTS WHERE FLT_KEY=#fltNo# AND TO_CHAR(SCH_DATE,'DDMONYY')=#fltDate# AND BUILDUP_CDATE IS NOT NULL AND BUILDUP_CUSER IS NOT NULL
	</select>
	<select id="CHECK_ULD_CARR_OF_THE_FLIGHT"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    SELECT COUNT(1) FROM DUAL WHERE (SELECT CARR_CODE FROM FLT_OPR_EVENTS WHERE FLT_KEY=#fltNo# AND TO_CHAR(SCH_DATE,'DDMONYY')=#fltDate# AND FLT_TYPE='D') = (SELECT OWNER_ID FROM ULD_INVENTORY WHERE ULD_KEY=#jobUldKey#)
	</select>
	<select id="FETCH_ULD_CARR_FOR_BUILDUP_START" parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.String">
		SELECT OWNER_ID FROM ULD_INVENTORY WHERE ULD_KEY=#jobUldKey#
	</select>
	<select id="FETCH_FLIGHT_CARR_FOR_BUILDUP_START" parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.String">
		SELECT CARR_CODE FROM FLT_OPR_EVENTS WHERE FLT_KEY=#fltNo# AND TO_CHAR(SCH_DATE,'DDMONYY')=#fltDate# AND FLT_TYPE='D'
	</select>
	<select id="CHECK_BUILD_START_ULD_CARR_OF_THE_FLIGHT"  parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
    	select count(1) from dual where (select  FUN_GET_PARENT_CARR (#uldCarr#) from dual) = (select  FUN_GET_PARENT_CARR (#fltCarr#) from dual)
	</select>
	<select id="CHECK_VALID_FLIGHT_ENTRY"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    SELECT count(FLT_KEY)	FROM FLT_OPR A  WHERE A.FLT_KEY=UPPER(#fltNo#) AND A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND A.FLT_TYPE = 'D'
	</select>
	<select id="CHECK_VALID_UNLDGPT_ENTRY"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    SELECT count(FLT_KEY)	FROM FLT_OPR_LEG A  WHERE A.FLT_KEY=UPPER(#fltNo#) AND A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND A.FLT_TYPE = 'D' AND OFF_POINT=#woUnldgPt#
	</select>
	<select id="checkJobnoinExpBuJo"  parameterClass="map" resultClass="java.lang.Integer">
    select COUNT(1) from exp_bu_jo where jo_no=#jobNo#
	</select>
	<select id="checkBuZoneStatus"  parameterClass="map" resultClass="java.lang.Integer">
    select COUNT(1) from mast_wh_group where wh_area=#buZone#
	</select>
	
	<select id="CHECK_VALID_UNLDGPT_SHIPMENT"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    select COUNT(1) from EXP_BU_GP GB,EXP_BU_GP_ULD_TYPE GBDTL WHERE GB.GP_NO = GBDTL.GP_NO AND GBDTL.ULD_KEY=#woUldKey# AND GB.FLT_KEY=#fltNo# AND TO_CHAR(GB.FLT_DATE,'DDMONYY')=#fltDate# AND GB.UNLDG_PT=#woUnldgPt#
	</select>
   <update id="UPDATE_BUILDUP_START_STATUS" parameterClass="cargo.cms.export.bo.BupStartBO"  >
		UPDATE
		       EXP_PMANIFEST_ULD
		   SET
		       BLDUP_START = 'Y',
		       BLDUP_LOCN=#jobLocation#,
		       BLDUP_START_DATE=SYSDATE,
		       BLDUP_START_USER_ID=#userID#,
		       JO_NO = #withJobNo#,
		       GP_NO = #gpNo#,
		       TR_TYPE_EVT = #trtypeEvt# 
		 where FLT_KEY=#fltNo# and
		       FLT_DATE=#fltDate# and
		       ULD_BT_NO = #jobUldKey# and
		       UNLDG_PT = #unldgPoint#			
	</update>
	<update id="UPDATE_BUILDUP_START_WITH_OUT_STATUS" parameterClass="cargo.cms.export.bo.BupStartBO"  >
		UPDATE
		       EXP_PMANIFEST_ULD
		   SET
		       BLDUP_START = 'Y',
		       BLDUP_LOCN=#woLocation#,
		       BLDUP_START_DATE=SYSDATE,
		       BLDUP_START_USER_ID=#userID#,
		       TR_TYPE_EVT = #trtypeEvt# 
		 where FLT_KEY=#fltNo# and
		       FLT_DATE=#fltDate# and
		       ULD_BT_NO = #woUldKey# and
		       UNLDG_PT = #woUnldgPt#				
	</update>
	<select id="checkuldinexppmanifestuld"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    select COUNT(1) from exp_pmanifest_uld where flt_key=#fltNo# and flt_date=#fltDate# and uld_bt_no=#jobUldKey# and unldg_pt=#unldgPoint#
	</select>
	<insert id="insertbuildupstartstatus" parameterClass="cargo.cms.export.bo.BupStartBO" >		
	INSERT INTO EXP_PMANIFEST_ULD(FLT_KEY,FLT_DATE,ULD_BT_NO,FLT_TYPE,SHP_TYPE,PPK_TYPE,UNLDG_PT,
                                  GROUP_NO,TARE_WT,GROSS_WT,STATUS,BLDUP_COMPLETE,EMPTY_YN,EIC_YN,
                                  CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,BB_IND,FLT_USE,BLDUP_START,BLDUP_LOCN,BLDUP_START_DATE,BLDUP_START_USER_ID,JO_NO,CONTR_CODE,GP_NO,TR_TYPE_EVT,TRANSIT_FLG,HDLG_MODE) VALUES(
                                  #fltNo#,#fltDate#,#jobUldKey#,'E','LOCAL',(SELECT CASE WHEN PPK_IND = 'N' AND MIX_PPK_IND = 'N' THEN 'B'
                                  ELSE CASE WHEN PPK_IND = 'Y' AND MIX_PPK_IND = 'N' THEN 'P' 
                                  ELSE CASE WHEN PPK_IND = 'N' AND MIX_PPK_IND = 'Y' THEN 'M'
                                  ELSE NULL END END END FROM ULD_INVENTORY WHERE ULD_KEY=#jobUldKey#),
                                  #unldgPoint#,'0',#tareWt#,0,'OPEN','N','N','N',#userID#,SYSDATE,#userID#,SYSDATE,
                                  'N','N','Y',#jobLocation#,SYSDATE,#userID#,#withJobNo#,null,#gpNo#,#trtypeEvt#,
                                  (SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#jobUldKey#),
								(SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#jobUldKey#))
	</insert>
	<select id="checkuldinexppmanifestuldwojob"  parameterClass="cargo.cms.export.bo.BupStartBO" resultClass="java.lang.Integer">
    select COUNT(1) from exp_pmanifest_uld where flt_key=#fltNo# and flt_date=#fltDate# and uld_bt_no=#woUldKey#
	</select>
	<insert id="insertbuildupstartstatuseojob" parameterClass="cargo.cms.export.bo.BupStartBO" >		
	INSERT INTO EXP_PMANIFEST_ULD(FLT_KEY,FLT_DATE,ULD_BT_NO,FLT_TYPE,SHP_TYPE,PPK_TYPE,UNLDG_PT,
                                  GROUP_NO,TARE_WT,GROSS_WT,STATUS,BLDUP_COMPLETE,EMPTY_YN,EIC_YN,
                                  CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,BB_IND,FLT_USE,BLDUP_START,BLDUP_LOCN,BLDUP_START_DATE,BLDUP_START_USER_ID,CONTR_CODE,TR_TYPE_EVT,TRANSIT_FLG,HDLG_MODE) VALUES(
                                  #fltNo#,#fltDate#,#woUldKey#,'E','LOCAL',(SELECT CASE WHEN PPK_IND = 'N' AND MIX_PPK_IND = 'N' THEN 'B'
                                  ELSE CASE WHEN PPK_IND = 'Y' AND MIX_PPK_IND = 'N' THEN 'P' 
                                  ELSE CASE WHEN PPK_IND = 'N' AND MIX_PPK_IND = 'Y' THEN 'M'
                                  ELSE NULL END END END FROM ULD_INVENTORY WHERE ULD_KEY=#woUldKey#),
                                  #woUnldgPt#,'0',0,0,'OPEN','N','N','N',#userID#,SYSDATE,#userID#,SYSDATE,
                                  'N','N','Y',#woLocation#,SYSDATE,#userID#,null,#trtypeEvt#,
                                  (SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#woUldKey#),
								(SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#woUldKey#))
	</insert>
	<update id="UPDATE_BUILDUP_STATUS_ULD_TYPE" parameterClass="cargo.cms.export.bo.BupStartBO"  >
		UPDATE EXP_BU_GP_ULD_TYPE SET STATUS='Started',BU_ZONE=NVL((select wh_area from mast_wh_group where WH_GROUP = (select wh_group from mast_wh_loc where code=#jobLocation#)),BU_ZONE) where gp_no =( select gp_no from exp_bu_jo where jo_no=#withJobNo#) and uld_key=#jobUldKey# and DOC_LINE_NO=#docLineNo#
	</update>
	<update id="updateBuildupStatusinJO" parameterClass="cargo.cms.export.bo.BupStartBO"  >
		update exp_bu_jo set TR_TYPE = 'BLDJO' , status='Started' where jo_no=#withJobNo# and status !='Force Complete'
	</update>
	<update id="updateBuildupstatusInUlsinventory" parameterClass="cargo.cms.export.bo.BupStartBO"  >
		update uld_inventory set loc_code=#jobLocation#, lm_user_id = #userID#, lm_date = sysdate where uld_key=#jobUldKey# 
	</update>
	
	<update id="UPDATE_BUILDUP_START_STATUS_WITH_ULDTYPE" parameterClass="cargo.cms.export.bo.BupStartBO"  >
		UPDATE EXP_BU_GP_ULD_TYPE SET STATUS='Started',ULD_TYPE='',BU_ZONE=NVL((select wh_area from mast_wh_group where WH_GROUP = (select wh_group from mast_wh_loc where code=#jobLocation#)),BU_ZONE),ULD_KEY=#jobUldKey# where gp_no =( select gp_no from exp_bu_jo where jo_no=#withJobNo#) and uld_type=#uldType# and DOC_LINE_NO=#docLineNo#
	</update>
	
	<update id="updateURFStatusInULDInventory" parameterClass="cargo.cms.export.bo.BupStartBO"  >
		update uld_inventory set flt_key=#fltNo#,flt_date=#fltDate#,flt_type='E',TR_TYPE =#trtypeEvt# where uld_key=#woUldKey#  
	</update>
	<select id="checkUldexistornotinexpfltuld" parameterClass="cargo.cms.export.bo.BupStartBO"  resultClass="java.lang.Integer">
	select COUNT(1) from exp_flt_uld where uld_key=#woUldKey#
	</select>
	<select id="CHECK_ULD_ALREADY_ASSIGNED_OTHER_PORT" parameterClass="cargo.cms.export.bo.BupStartBO"  resultClass="java.lang.Integer">
		select COUNT(1) from exp_flt_uld where flt_key =#fltNo# and flt_date=#fltDate# and uld_key = #woUldKey# and unldg_pt != #woUnldgPt#
	</select>
	
	<select id="fetchURFDetailsInBupStart" parameterClass="cargo.cms.export.bo.BupStartBO"  resultClass="cargo.cms.export.bo.BupStartBO">
	  select contr_code as contrCode,
      gross_weight as grossWt, 
      tare_weight as tareWt,
      (gross_weight- tare_weight) as netWt,
      decode(ppk_ind,'Y','Y',decode(mix_ppk_ind,'Y','Y','N')) as ppkInd,
      (select decode((select count(1) from exp_pmanifest_awb where flt_key = #fltNo# and flt_date=#fltDate# and rownum =1),'1','Y','N') from dual) as pmanInd,
      empty_flg as emptyInd,
      rebuild_yn as buildInd,
      OFLD_FLG as offldInd,
      bb_ind as bbInd, 
      uld_type as uldType,
      SPL_CODE1 as splCode1,
      SPL_CODE2 AS splcode2,
      spl_code3 as splCode3,
      loc_code as locCode,
      (select off_point from flt_opr_leg where flt_key=#fltNo# and flt_date=#fltDate# and rownum=1) as unldgPt
      from
      uld_inventory
      where uld_key=#woUldKey#
	</select>
	
	
	
	<insert id="sqluldassignmentaccessoryinsert" parameterClass="cargo.cms.export.bo.AccessoryBO" >		
		INSERT INTO EXP_ULD_ACC (
		   FLT_KEY, FLT_DATE, ULD_KEY, 
		   ACTIVITY, EQUIP_TYPE, FLT_TYPE, 
		   FLT_CARR, FLT_NO, QTY, 
		   ULD_CARR, ULD_NO, ULD_TYPE,
		   CONTR_CODE, CR_USER_ID, CR_DATE, 
		   LM_USER_ID, LM_DATE) 
		VALUES (#fltKey# , #fltDate#, #uldKey#,
    			'BUILDUP',#equipType#, #fltType# ,
			    #fltCarr#, #fltNo#,#qty# ,
			   (SELECT ULD_CARR FROM ULD_INVENTORY U WHERE U.ULD_KEY = #uldKey#),
			   (SELECT ULD_NO FROM ULD_INVENTORY U WHERE U.ULD_KEY = #uldKey#),
			   (SELECT ULD_TYPE FROM ULD_INVENTORY U WHERE U.ULD_KEY = #uldKey#),
			    #contourCode#,#crUserId#,sysdate ,
		    	#lastModUserId#,sysdate )
	</insert>	

	<delete id="sqluldassignmentaccessorydelete" parameterClass="cargo.cms.export.bo.AccessoryBO" >		
		DELETE FROM EXP_ULD_ACC
			WHERE
			FLT_KEY=#fltKey#
			AND FLT_DATE=#fltDate#
			AND ULD_KEY=#uldKey#
			AND ACTIVITY='BUILDUP'
			AND EQUIP_TYPE=#equipType#
				
	</delete>
	
	<update id="sqluldpremanfassignmentupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  >
		UPDATE 	EXP_PMANIFEST_AWB
			SET ASSIGNED_BULK_PCS = ASSIGNED_BULK_PCS + #assignedPcs#,
			    ASSIGNED_BULK_WT = ASSIGNED_BULK_WT + #assignedWt#,			    
				UNASSIGNED_BULK_PCS = UNASSIGNED_BULK_PCS - #assignedPcs#,
				UNASSIGNED_BULK_WT = UNASSIGNED_BULK_WT - #assignedWt#
			WHERE
			    FLT_KEY =#fltNo# 
			    AND FLT_DATE = #fltDate#
	            AND UNLDG_PT = #unLdgPt#
			    AND AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#						
			
	</update>
	
	<update id="sqlawbpremanassignmentupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  >
		UPDATE 	AWB
			SET BLDUP_BULK_PCS = nvl(BLDUP_BULK_PCS,0)+#assignedPcs#,
			    BLDUP_BULK_WT = nvl(BLDUP_BULK_WT,0)+#assignedWt# 
			WHERE
			     AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#						
	</update>
	<!--  added By Surendra Gollapalli on 5th JAN 2012 START -->
	<update id="updateAWBWareHouseRemarks" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  >
		UPDATE AWB
			SET AWB_RMK = #whRmk#, LM_USER_ID = NVL(#crUserId#,LM_USER_ID), LM_DATE = SYSDATE
			WHERE
			     AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#						
	</update>
	<select id="checkAWBRmkIsNotNull" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="java.lang.String">
			select AWB_RMK from AWB where AWB_NO = #awbNo# AND AWB_DATE=#awbDate#	
	  </select>
	  <select id="checkAWBRmkIsNotNullByAWB" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.String">
			select AWB_RMK from AWB where AWB_NO = #awbNo# AND AWB_DATE=#awbDate#	
	  </select>
	  
          <select id="getBULKULDSHC" parameterClass="java.lang.String" resultClass="java.lang.String">
			SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = #uldKey#	
	  </select>

 <update id="updateULDAWBSHCWHRmk" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  >
	  		UPDATE AWB
			SET AWB_RMK = #whRmk#, LM_USER_ID = NVL(#lastModUserId#,LM_USER_ID), LM_DATE = SYSDATE
			WHERE
			     AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#	
	 </update> 

	  <update id="updateULDAWBSHCWHRmkCAR" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  >
		UPDATE IMP_CAR_AWB 
			SET WH_RMK = #whRmk# , LM_USER_ID = NVL(#lastModUserId#,LM_USER_ID), LM_DATE = SYSDATE
			WHERE
			     AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#						
	</update> 

<update id="updateULDAWBSHCWHRmkExpCAR" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  >
		UPDATE EXP_CAR 
			SET WH_RMK = #whRmk# , LM_USER_ID = NVL(#lastModUserId#,LM_USER_ID), LM_DATE = SYSDATE
			WHERE
			     AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#						
          </update>
	  	
	  	
	  	<update id="updateAWBWareHouseRemarksByAWB" parameterClass="cargo.cms.export.bo.AWBBO"  >
		UPDATE AWB
			SET AWB_RMK = #whRmk# , LM_USER_ID = NVL(#crUserId#,LM_USER_ID), LM_DATE = SYSDATE
			WHERE
			     AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#						
	</update>
	
	<update id="updateAWBWareHouseRemarksCARAWB" parameterClass="cargo.cms.export.bo.AWBBO"  >
		UPDATE IMP_CAR_AWB 
			SET WH_RMK = #whRmk# , LM_USER_ID = NVL(#crUserId#,LM_USER_ID), LM_DATE = SYSDATE
			WHERE
			     AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#						
	</update>
	
	<update id="updateAWBWareHouseRemarksExpCARAWB" parameterClass="cargo.cms.export.bo.AWBBO"  >
		UPDATE EXP_CAR 
			SET WH_RMK = #whRmk# , LM_USER_ID = NVL(#crUserId#,LM_USER_ID), LM_DATE = SYSDATE
			WHERE
			     AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#						
	</update>
	
	<!--  added By Surendra Gollapalli on 5th JAN 2012 END -->

	
		<select id="sqlawbstoragequeryid" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  resultClass="cargo.cms.export.bo.StorageBO">
	SELECT (SELECT ca.HOUSE_FLG FROM AWB ca WHERE ca.AWB_NO = a.AWB_NO AND ca.AWB_DATE = a.AWB_DATE) as houseFlag,
				A.CATALOG as catalog, AWB_NO as awbNo , CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,
				to_char(AWB_DATE,'DDMONYY') as awbDate,LOC_CODE as whDest,SEQ_NO as seqNo,
				LSP_NO as lspno,LOCN_PCS as strgPcs,LOCN_WT as strgWt,CARR_CODE as carrCode,
				ULD_KEY as uldKey,
				(select handling_mode from uld_inventory where uld_key = A.ULD_KEY) handlingMode
		 FROM AWB_INVENTORY A
 			WHERE AWB_NO = #awbNo#
 			AND AWB_DATE=to_date(#awbDate#,'DDMONYY')
 			AND NOT EXISTS(SELECT NULL FROM ULD_INVENTORY WHERE ULD_KEY = A.ULD_KEY AND (PPK_IND = 'Y' OR MIX_PPK_IND = 'Y') AND (REBUILD_YN = 'N' AND TOPUP_YN = 'N')) 			
 			AND not (flt_type = 'E' and FLT_KEY IS not NULL  ) AND TRM_NO IS NULL AND SRF_NO IS NULL
 			<isEqual property="hadlgInd" compareValue="NBK">
 				AND A.ULD_KEY = #uldKey#
 			</isEqual>
	</select>	

	<insert id="sqluldassignmentstorageinsert" parameterClass="cargo.cms.export.bo.StorageBO"  >
		INSERT INTO AWB_INVENTORY
			(AWB_NO,AWB_DATE,CARR_CODE,LOCN_PCS,LOCN_WT,STRG_DATE,
			PPK_IND,LSP_NO,LOC_CODE,
			CR_USER_ID, CR_DATE, 
		   LM_USER_ID, LM_DATE,SEQ_NO)
		   VALUES
		   (#awbNo#,#awbDate#,
		   #carrCode#,#retrvPc#,
		   #retrvWt#,sysdate,'B',#lspno#,nvl(#loc#,'WSE1'),
			#crUserId#,sysdate,#lastModUserId#,sysdate,AWB_INV_SEQ.NEXTVAL)
	</insert>

	<update id="sqluldassignmentstorageupdate" parameterClass="cargo.cms.export.bo.StorageBO"  >
		UPDATE AWB_INVENTORY
			SET LOCN_PCS=  LOCN_PCS - #retrvPc#,
			    LOCN_WT = LOCN_WT - #retrvWt#
		WHERE
			SEQ_NO = #seqNo#	
	</update>
	
	<select id="sqlgetSeqAssignmentStorage"  parameterClass="cargo.cms.export.bo.StorageBO" resultClass="java.lang.String"  >
		select SEQ_NO from awb_inventory 
	        where  AWB_NO = #awbNo#
	        and    awb_date = #awbDate#
	        and   loc_code = #loc#
	        and    uld_key = #uldKey#
	        and    lsp_no is null
	        and    flt_key = #fltKey#
	        and    flt_date = #fltDate#
	</select>
	
	<update id="sqlupdateSeqAssignmentStorage" parameterClass="cargo.cms.export.bo.StorageBO"  >
		update awb_inventory set
			locn_pcs = locn_pcs + #retrvPc#,
			locn_wt = locn_wt + #retrvWt#
		where AWB_NO = #awbNo#
		and	awb_date = #awbDate#
		and	loc_code = #loc#
		and	uld_key = #uldKey#
		and	lsp_no is null
		and	flt_key = #fltKey#
		and	flt_date = #fltDate#
		and	SEQ_NO = #seqNo#	
	</update>

	<select id="sqlvalidatecoutourcode"  parameterClass="map" resultClass="java.lang.Integer"  >
		select count(CONTR_CODE) from ULD_TYPE_CONTR  WHERE ULD_TYPE like UPPER(#ULDKEY#) and CONTR_CODE = #CODE#
	</select>
	
	<select id="sqlvalidatePremanifestPresent"  parameterClass="map" resultClass="java.lang.Integer"  >
	   SELECT COUNT(1) FROM EXP_PMANIFEST_ULD
			WHERE ULD_BT_NO= #ULD_KEY#
			AND FLT_DATE=#FLTDATE# 
			AND FLT_KEY =#FLTKEY#
	</select>
	
	<delete id="sqlDeletePremanifestPresent"  parameterClass="map">
	   DELETE FROM EXP_PMANIFEST_ULD WHERE ULD_BT_NO= #ULD_KEY# AND FLT_DATE=#FLTDATE# AND FLT_KEY =#FLTKEY# AND FLT_TYPE = 'E'
	</delete>
	
<!-- Amend ULD -->
	  <select id="amenduld_searchbyuld_header"
    	parameterClass="map"
    	resultClass="cargo.cms.export.bo.CreateULDBO">

		select a.flt_key as fltKey,
			   to_char(a.flt_date, 'DDMONYY') as fltDate,
			   a.uld_bt_no as uldKey,
			   PKG_COMMON.GET_FLT_ETA(b.flt_key, b.sch_date, 'D', 'DD') as etd,
			   a.contr_code as contrcode,
			   a.contr_code as newContrcode, 
			   a.unldg_pt as unldg_pt,			
			   a.bldup_complete as completedFlag, 
			   (select tare_weight from uld_inventory where uld_key = #uldNo#)  as tareWt, 
			   a.gross_wt as grossWt, 
			   a.eic_yn as eicFlag,
			   pkg_exp_val.get_uld_assigned_wt(a.flt_key, a.flt_date, a.uld_bt_no) as totalAssignWt, 
			   a.ppk_type as ppkType, b.carr_code as carrCode 
		from   exp_pmanifest_uld a, flt_opr b
		where  a.flt_key = #fltKey#
		and    a.flt_date = to_date(#fltDate#, 'DDMONYY')
		and    a.uld_bt_no = #uldNo#
		and    b.flt_key = a.flt_key
		and    b.sch_date = a.flt_date
		and    b.flt_type = 'D'
		
    </select>
    
    <select id="amenduld_searchbyuld_details"
    	parameterClass="map"
    	resultClass="cargo.cms.export.bo.PreManifestAWBBO">
    	
		select rownum, t3.HOUSE_FLG as houseFlag,
			substr(t3.awb_no, 1, 3)||'-'||substr(t3.awb_no, 4) as awbNoDisplay, 
			t3.awb_no as awbNo, to_char(t3.awb_date, 'DDMONYY') as awbDate,
			t3.catalog as catalog, 
			(SELECT 
		          (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		          (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
		          THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		          ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		       FROM AWB A WHERE  A.AWB_NO=T3.AWB_NO AND A.AWB_DATE=T3.AWB_DATE) as cargoType,
			t3.dest as dest, 
			pkg_exp_val.get_exp_awb_cc_code(t1.flt_key, t1.flt_date, t1.awb_no) as cccode, 
			t1.unldg_pt as unldgPt,
			t2.pman_pcs as preManfBulkPc, 
			t2.pman_wt as preManfBulkWt,
			t2.unassigned_bulk_pcs as unassignedPcs,
			t2.unassigned_bulk_wt as unassignedWt,
			t1.assigned_pcs as assignedPcs,
			t1.assigned_wt as assignedWt, 
			t1.assigned_pcs oldstoredPc,
			t1.assigned_wt as oldstoredWt,			
			t1.flt_key as fltNo,
			to_char(t1.flt_date, 'DDMONYY') as fltDate,
			t1.unldg_pt as unLdgPt,
			t3.awb_rmk as whRmk,
			DECODE( (SELECT COUNT(1) FROM exp_pmanifest_uld_awb_shc where tr_no=t1.tr_no),0,'N','Y') AS shcInd,
      		DECODE( (SELECT COUNT(1) FROM exp_pmanifest_uld_awb_un where tr_no=t1.tr_no),0,'N','Y') AS dgInd,
  			DECODE( (select COUNT(1) from exp_pmanifest_uld_awb_tag where tr_no=t1.tr_no),0,'N','Y') AS tagInd,
  			DECODE(  (select COUNT(1) from exp_pmanifest_uld_awb_hawb where tr_no=t1.tr_no),0,'N','Y') AS hawbInd 
		from   exp_pmanifest_uld_awb t1, exp_pmanifest_awb t2, awb t3
		where  t1.flt_key = t2.flt_key
		and    t1.flt_date = t2.flt_date
		and    t1.unldg_pt = t2.unldg_pt
		and    t1.awb_no = t2.awb_no
		and    t1.awb_date = t2.awb_date
		and    t2.awb_no = t3.awb_no
		and    t2.awb_date = t3.awb_date		
		and    t1.flt_key = #fltKey#
		and    t1.flt_date = to_date(#fltDate#, 'DDMONYY')
		and    t1.uld_bt_no = #uldNo#
    	
    </select>
    
    <select id="amenduld_searchbyuld_accessorydetails"
    	parameterClass="map"
    	resultClass="cargo.cms.export.bo.AccessoryBO">
    	SELECT ROWNUM, EQUIP_TYPE as equipType, EQUIP_TYPE as equipTypeDB, QTY as qty
			FROM   EXP_ULD_ACC
				WHERE  FLT_KEY =#fltKey#
				AND    FLT_DATE =#fltDate#
				AND    ULD_KEY =#uldNo#
				AND    ACTIVITY = 'BUILDUP'
	</select>	
		
	<select id="amenduld_searchbyawb_header"
    	parameterClass="map"
    	resultClass="cargo.cms.export.bo.CreateULDBO">
    	SELECT 
    		T2.HOUSE_FLG as houseFlag,
    		T3.FLT_KEY as fltKey, 
    		to_char(T3.SCH_DATE,'DDMONYY') as fltDate,
    		PKG_COMMON.GET_FLT_ETA(T3.FLT_KEY, T3.SCH_DATE, 'D', 'DD') as etd ,
  	  		CONCAT(CONCAT(SUBSTR(T2.AWB_NO,0,3),'-'),SUBSTR(T2.AWB_NO,4)) as awbNoDisplay,
  	  		T2.CATALOG as catalog,
  	  		(SELECT 
		          (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		          (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
		          THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		          ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		       FROM AWB A WHERE  A.AWB_NO=T2.AWB_NO AND A.AWB_DATE=T2.AWB_DATE) as cargoType,
  	  		to_char(T2.AWB_DATE,'DDMONYY') as awbDate, 
  	  		T2.PPK_TYPE as ppkType, T3.CARR_CODE as carrCode, 
  	  		(SELECT CC_CODE FROM V_CST_EXP_CC_CODE WHERE FLT_KEY=T3.FLT_KEY AND FLT_DATE=T3.SCH_DATE AND AWB_NO=T2.AWB_NO) as cc 
		FROM 
			  awb T2,
			  FLT_OPR T3 ,
			   EXP_PMANIFEST_AWB T4 	 
		WHERE 
			  T3.FLT_KEY = #fltKey#
			  AND T3.SCH_DATE = to_date(#fltDate#,'DDMONYY')			   
			  AND T2.AWB_NO = #awbNo#	
			  AND T2.AWB_NO = T4.AWB_NO
			  AND T2.AWB_DATE = T4.AWB_DATE
			  AND T3.FLT_KEY = T4.FLT_KEY
			  AND T3.SCH_DATE = T4.FLT_DATE			  
			  and T3.FLT_TYPE = 'D'			  
    </select>
    
    <select id="amenduld_searchbyawb_header1"
    	parameterClass="map"
    	resultClass="cargo.cms.export.bo.CreateULDBO">
    SELECT    		 
	  SUM(BULK_PCS) as preManfPc,
	  SUM(BULK_WT) as preManfWt,
	  SUM((BULK_PCS-ASSIGNED_BULK_PCS)) as unassignedPc,
	  SUM((BULK_WT-ASSIGNED_BULK_WT)) as unassignedWt,
	  SUM(ASSIGNED_BULK_PCS) as assignedPc,
	  SUM(ASSIGNED_BULK_WT) as assignedWt
	FROM 
	  EXP_PMANIFEST_AWB  	 
	WHERE 
	  FLT_KEY = #fltKey#
	  AND FLT_DATE = to_date(#fltDate#,'DDMONYY')	   
	  AND AWB_NO = #awbNo#
    </select>
	
	<select id="amenduld_searchbyawb_details"
    	parameterClass="map"
    	resultClass="cargo.cms.export.bo.AWBBO">
    	select 
    		   D.HOUSE_FLG as houseFlag,
			   A.ULD_BT_NO as uldKey,
			   C.CONTR_CODE as contrcode,
			   C.CONTR_CODE as newContrcode,
			   A.UNLDG_PT as unldgpt,
			   A.ASSIGNED_PCS as oldStoredPc,
			   A.ASSIGNED_WT as oldStoredWt,
			   to_char(A.AWB_DATE,'DDMONYY') as awbDate,
			   A.AWB_NO as awbNo,
			   D.CATALOG catalog,
			   (SELECT 
		          (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		          (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
		          THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		          ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		       FROM AWB A WHERE  A.AWB_NO=D.AWB_NO AND A.AWB_DATE=D.AWB_DATE) as cargoType,
			   C.bldup_complete as bldUpComplYN,
      			substr(A.awb_no, 1, 3)||'-'||substr(A.awb_no, 4) as awbNoDisplay,
      			 D.awb_rmk as whRmk,
			   DECODE( (SELECT COUNT(1) FROM exp_pmanifest_uld_awb_shc where tr_no=A.tr_no),0,'N','Y') AS shcInd,
      			DECODE( (SELECT COUNT(1) FROM exp_pmanifest_uld_awb_un where tr_no=A.tr_no),0,'N','Y') AS dgInd,
  				DECODE( (select COUNT(1) from exp_pmanifest_uld_awb_tag where tr_no=A.tr_no),0,'N','Y') AS tagInd,
  				DECODE(  (select COUNT(1) from exp_pmanifest_uld_awb_hawb where tr_no=A.tr_no),0,'N','Y') AS hawbInd,
  				C.ppk_type as ppkType,
  				decode(NVL(C.hdlg_mode,'N'),'NBK','Y','N') AS nbkInd
  		from exp_pmanifest_uld_awb A, exp_pmanifest_uld C,AWB D
		where
			 A.FLT_KEY=#fltKey#
			 AND trunc(A.FLT_DATE)=to_date(#fltDate#,'DDMONYY')
			 AND A.AWB_NO = #awbNo#
			 AND C.FLT_KEY = A.FLT_KEY
			 and C.FLT_DATE = A.FLT_DATE
			 and C.ULD_BT_NO = A.ULD_BT_NO
			 and A.AWB_NO=D.AWB_NO
			 AND D.AWB_CLOSED_YN = 'N'
		order by A.ULD_BT_NO
    </select>
    
    <update id="amenduld_searchbyawb_assignmentupdate1"
    	parameterClass="map">
    	UPDATE
    		exp_pmanifest_uld_awb
    	SET
    		ASSIGNED_PCS = #newPcs#,
    		ASSIGNED_WT = TO_CHAR(#newWt#,'9999990D99')
    	WHERE
    		 FLT_KEY=#fltKey#
			 AND trunc(FLT_DATE)=to_date(#fltDate#,'DDMONYY')
			 AND AWB_NO = #awbNo#
			 AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			 AND ULD_BT_NO = #uldKey#
    </update>
    
    <update id="amenduld_searchbyawb_assignmentupdate2"
    	parameterClass="map">
    	UPDATE
    		exp_pmanifest_uld
    	SET
    		CONTR_CODE = #newContrcode#
    	WHERE
			 FLT_KEY = #fltKey#
			 AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
			 AND ULD_BT_NO = #uldKey#
    </update>
    
    <delete id="amenduld_searchbyawb_assignmentdelete"
    	parameterClass="map">
    	DELETE FROM
    		exp_pmanifest_uld_awb
    	WHERE
    		 FLT_KEY=#fltKey#
			 AND trunc(FLT_DATE)=to_date(#fltDate#,'DDMONYY')
			 AND AWB_NO = #awbNo#
			 AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			 AND ULD_BT_NO = #uldKey#
    </delete>
    
    <select id="amenduld_searchbyuld_getstorage" parameterClass="cargo.cms.export.bo.StorageBO"  resultClass="cargo.cms.export.bo.StorageBO" >
		select SEQ_NO as seqNo,LOCN_PCS as locnPcs,LOCN_WT as locnWt from AWB_INVENTORY
			where 
			    FLT_KEY = #fltKey#
			    and FLT_DATE = to_date(#fltDate#,'DDMONYY')
			    and ULD_KEY  = #uldKey#
				and AWB_NO   = #awbNo#
				and AWB_DATE  = to_date(#awbDate#,'DDMONYY')
				and AWB_TYPE  = 'E'
				and WH_DEST = #whDest#
				and CARR_CODE = #carrCode#
			<isNotEmpty prepend="AND" property="loc">
				LOC_CODE = #loc#
			</isNotEmpty>
				
				
	</select>

	
	<update id="amenduld_searchbyuld_storageupdate" parameterClass="cargo.cms.export.bo.StorageBO"  >
		UPDATE AWB_INVENTORY
			SET LOCN_PCS= #retrvPc#,
			    LOCN_WT = #retrvWt#
		WHERE
			SEQ_NO = #seqNo#	
	</update>
    
	<update id="amenduld_searchbyuld_restoreupdate" parameterClass="map"  >
		UPDATE AWB_INVENTORY
			SET LOCN_PCS= #retrvPc#,
			    LOCN_WT = #retrvWt#
		WHERE
			SEQ_NO = #seqNo#	
	</update>

    <select id="amenduld_searchbyuld_getwhdestdetails" resultClass="cargo.cms.export.bo.StorageBO" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  >
		select SEQ_NO as seqNo,LOCN_PCS as locnPcs,LOCN_WT as locnWt from AWB_INVENTORY
		WHERE
			AWB_NO = #awbNo#	
			and AWB_DATE = #awbDate#
			and FLT_KEY is null
			and WH_DEST = #whDest#
			<isNotEmpty prepend="AND" property="locn">
				LOC_CODE = #locn#
			</isNotEmpty>
			
	</select>
	<!-- Amend ULD -->
	
	<select id="sqlgetpmanifestuldawbHAWBdetails" resultClass="java.lang.Integer" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        select count(1) from EXP_PMANIFEST_ULD_AWB_HAWB WHERE tr_No = #preManfTrNo# and HAWB_NO = #hawbNo#
	</select>
	
	<update id="sqlgetpmanifestuldawbHAWBdetailsupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        update EXP_PMANIFEST_ULD_AWB_HAWB
	        set
	        PC = NVL(PC,0)+NVL(#pc#,0),
	        WT = NVL(WT,0)+NVL(#wt#,0),
	        LM_USER_ID = #lastModUserId#,
	        LM_DATE = sysdate	        
	         WHERE tr_No = #preManfTrNo# and HAWB_NO = #hawbNo#
	</update>		
	
	<delete id="sqlpmanifestuldawbHAWBdetailsdelete" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        delete EXP_PMANIFEST_ULD_AWB_HAWB WHERE tr_No = #preManfTrNo# 
	</delete>
	
	<insert id="sqlpmanifestuldawbHAWBdetailsinsert" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	      Insert into EXP_PMANIFEST_ULD_AWB_HAWB (TR_NO,HAWB_NO,PC,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
	      values (#preManfTrNo#,#hawbNo#,#pc#,#wt#,#crUserId#,sysdate,#lastModUserId# , sysdate)
	</insert>
	
	<select id="sqlgetpmanifestuldawbSHCdetails" resultClass="java.lang.Integer" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        select count(1) from EXP_PMANIFEST_ULD_AWB_SHC WHERE tr_No = #preManfTrNo# and SHC = #shcCode#
	</select>	
	
	<update id="sqlgetpmanifestuldawbSHCdetailsupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        update EXP_PMANIFEST_ULD_AWB_SHC
	        set	        
	        LM_USER_ID = #lastModUserId#,
	        LM_DATE = sysdate	        
	        WHERE tr_No = #preManfTrNo# and SHC = #shcCode#
	</update>
	
	<delete id="sqlpmanifestuldawbSHCdetailsdelete" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        delete EXP_PMANIFEST_ULD_AWB_SHC WHERE tr_No = #preManfTrNo# 
	</delete>
	
	<insert id="sqlpmanifestuldawbSHCdetailsinsert" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	      Insert into EXP_PMANIFEST_ULD_AWB_SHC (TR_NO, SHC, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, WH_IND) 
	      values (#preManfTrNo#, #shcCode#, #crUserId#, sysdate, #lastModUserId#, sysdate, #whInd#)
	</insert>
	
        <!-- CR Bulid -up SHC Update change -->
		<select id="sqlgetpmanifestuldawbSplitSHCdetails" resultClass="java.lang.Integer" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        select count(1) from EXP_PMANIFEST_ULD_AWB_SHC WHERE tr_No = #preManfTrNo# AND DOC_LINE_NO = #docLine#
		</select>

 <select id="getTRNumberForSHCdetails" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="java.lang.String">
			SELECT tr_no AS trNumber
					FROM EXP_PMANIFEST_ULD_AWB
					WHERE FLT_KEY  = #fltNo#
					AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
					AND ULD_BT_NO = #uldKey#
					AND UNLDG_PT = #unLdgPt#
					AND AWB_NO   = #awbNo#
					AND AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')
		</select>

		<select id="getUnldgptForNoncoloadCheck" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT UNLDG_PT FROM EXP_PMANIFEST_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldKey# and rownum=1
		</select>
		

	
<select id="getTRNumberForSHCdetailsAWB" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.String">
			SELECT tr_no AS trNumber
					FROM EXP_PMANIFEST_ULD_AWB
					WHERE FLT_KEY  = #fltKey#
					AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
					AND ULD_BT_NO = #uldKey#
					AND UNLDG_PT = #unldgpt#
					AND AWB_NO   = #awbNo#
					AND AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')
		</select>

	<update id="sqlgetpmanifestuldawbSHCSplitdetailsupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
		        update EXP_PMANIFEST_ULD_AWB_SHC
		        set	        
		            SHC  = #shcOne#,
		            SHC2 = #shcTwo#,
		            SHC3 = #shcThree#,
		            SHC4 = #shcFour#,
		            SHC5 = #shcFive#,
		            SHC6 = #shcSix#,
		            SHC7 = #shcSeven#,
		            SHC8 = #shcEight#,
		            SHC9 = #shcNine#,
            		PCS = #pc#,
            		REMARKS = #shcRemarks#,
            		LM_USER_ID = #lastModUserId#,
		        	LM_DATE = sysdate	        
		        WHERE tr_No = #preManfTrNo# and DOC_LINE_NO = #docLine#
		</update>
		
	<insert id="sqlpmanifestuldawbSHCSplitdetailsinsert" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
		      Insert into EXP_PMANIFEST_ULD_AWB_SHC (TR_NO,DOC_LINE_NO,SHC,SHC2, SHC3, SHC4, SHC5, SHC6, SHC7, SHC8, SHC9, WH_IND,  CR_USER_ID, CR_DATE, LM_USER_ID,LM_DATE,
          			  PCS,REMARKS,BULK_ULD_YN) 
		      values (#preManfTrNo#,EXP_PMAN_ULD_AWB_SHC_DOC_SEQ.NEXTVAL,#shcOne#,#shcTwo#,#shcThree#,#shcFour#,#shcFive#,#shcSix#,#shcSeven#,#shcEight#,#shcNine#,
         			 #whInd#,#crUserId#,sysdate,#lastModUserId#,sysdate, NVL(#pc#,(select assigned_pcs from exp_pmanifest_uld_awb where tr_no = #preManfTrNo# )),#shcRemarks#,#blukULDYn#)
	</insert>

	<delete id="sqlpmanifestuldawbSHCSplitdetailsdelete" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        delete EXP_PMANIFEST_ULD_AWB_SHC WHERE tr_No = #preManfTrNo# and DOC_LINE_NO = #docLine#
	    </delete>
		
	<!--  END  CR Bulid -up SHC Update change -->

	<select id="sqlgetpmanifestuldawbTAGdetails" resultClass="java.lang.Integer" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        select count(1) from EXP_PMANIFEST_ULD_AWB_TAG WHERE tr_No = #preManfTrNo# and TAG_NO = #tagNo#
	</select>	
	
	<update id="sqlgetpmanifestuldawbTAGdetailsupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        update EXP_PMANIFEST_ULD_AWB_TAG
	        set	 
	        PC =  PC + NVL(#pc#, 0),
	        WT =  WT + NVL(#wt#, 0),       
	        LM_USER_ID = #lastModUserId#,
	        LM_DATE = sysdate	        
	        WHERE tr_No = #preManfTrNo# and TAG_NO = #tagNo#
	</update>
	
	<delete id="sqlpmanifestuldawbTAGdetailsdelete" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        delete EXP_PMANIFEST_ULD_AWB_TAG WHERE tr_No = #preManfTrNo# 
	</delete>
	
	<insert id="sqlpmanifestuldawbTAGdetailsinsert" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	      Insert into EXP_PMANIFEST_ULD_AWB_TAG (TR_NO,TAG_NO,PC,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
	      values (#preManfTrNo#,#tagNo#,#pc#,#wt#,#crUserId#,sysdate,#lastModUserId# , sysdate)
	</insert>
	
	<select id="sqlgetpmanifestuldawbDGdetailsMaxTrNo" resultClass="java.lang.Integer" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	       select nvl(max(DOC_LINE_NO),1) from EXP_PMANIFEST_ULD_AWB_UN WHERE tr_No = #preManfTrNo# 
	</select>
	
	<select id="sqlgetpmanifestuldawbDGdetails" resultClass="java.lang.Integer" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        select count(1) from EXP_PMANIFEST_ULD_AWB_UN WHERE tr_No = #preManfTrNo# and DOC_LINE_NO = #docLineNo#
	</select>
	
	<update id="sqlgetpmanifestuldawbDGdetailsupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        update EXP_PMANIFEST_ULD_AWB_UN
	        set	 
	        LOAD_QTY = NVL(#loadPkg#, 0),
	        LM_USER_ID = #lastModUserId#,
	        LM_DATE = sysdate	        
	        WHERE tr_No = #preManfTrNo# and DOC_LINE_NO = #docLineNo#
	</update>
	
	<delete id="sqlpmanifestuldawbDGdetailsdelete" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	        delete EXP_PMANIFEST_ULD_AWB_UN WHERE tr_No = #preManfTrNo# 
	</delete>
	
	<insert id="sqlpmanifestuldawbDGdetailsinsert" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >	
	      Insert into EXP_PMANIFEST_ULD_AWB_UN (TR_NO,DOC_LINE_NO,OVERPACK_ID,APIO_ID,UN_TR_NO,LOAD_QTY,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,WH_IND) 
	      values (#preManfTrNo#, #docLineNo#, #overpackApioUnid#, #apioUnid#, #unid#, NVL(#loadPkg#, 0), #crUserId#, sysdate, #lastModUserId#, sysdate, #whInd#)
	</insert>
	
	<parameterMap class="map" id="createUldAssignmentMap">
		<parameter property="RESULT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="UNLDGPT"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="CONTRCODE"   jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="GROSSWT"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="TAREWT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="BUILDUPIND"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="EICIND"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="EMPTYIND"    jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="SEQLST"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="PCLST"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="WTLST"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBLST"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="USER"        jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>	
	<procedure id="sqlcreateuldassignment" parameterMap="createUldAssignmentMap" >
		{? = call pkg_pman.create_uld_assign(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	<update id="updateTareWeightInUldInventory" parameterClass="java.util.HashMap">
		UPDATE ULD_INVENTORY SET TARE_WEIGHT=#tareWt# WHERE ULD_KEY=#uldKey#
	</update>
	<select id="fetchUldInAwbInvByAwbNo" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT ULD_KEY as uldKey FROM AWB_INVENTORY WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	<select id="uldExistsInAwbInventory" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM AWB_INVENTORY WHERE ULD_KEY=#uldKey#
	</select>
	<update id="updateEmptyFlgInUldInvForUldAssgmnt" parameterClass="java.lang.String">
		UPDATE ULD_INVENTORY SET EMPTY_FLG='Y' WHERE ULD_KEY=#uldKey#
	</update>
	<select id="fetchUldSuffixHandledByCpct" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_CARRIER WHERE CODE=#uldCarrier# AND OWNED_CARR='Y'
	</select>
	<!-- ##################### Create ULD Assignment   :End    #####################################-->
	
	<!-- Entry Added By Mithun KK Starts Here -->
	
	<!-- Doc Acceptance Indicator for the functinin in CommBusApp -->
	
	<select id="sqlGetAWBDetailsForDocAcceptance" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" >
	<![CDATA[
		  SELECT DECODE (
		  (SELECT COUNT(1) FROM Exp_Rcl_Hd Eh WHERE Eh.Ppk_Type IN ('P','B')
		  AND Eh.Awb_No                                          = Awb.Awb_No
		  AND Eh.Awb_Date                                        = TO_CHAR(Awb.Awb_Date, 'DDMONYY')
		  AND Eh.Status                                         != 'V'
		  )             +
		  (SELECT COUNT(1)
		  FROM EXP_RCL_HD EH,
		    EXP_RCL_BRKDN BRK
		  WHERE Eh.Rcl_No  = Brk.Rcl_No
		  AND EH.PPK_TYPE  = 'M'
		  AND Brk.Awb_No   = awb.awb_no
		  AND Brk.Awb_Date = TO_CHAR(Awb.Awb_Date, 'DDMONYY')
		  AND Eh.Status   != 'V'
		  ) ,'0','N','Y') AS RCLISSUED,
  		  awb.car_yn    AS CARYN,
  		 DECODE(awb.DOCACC_YN,'N','N','Y')  AS INTCHK,
 		 CASE
		     WHEN y.code is not null 
               		AND add_months(nvl(y.valid_date, to_date('01JAN01', 'DDMONYY')),
                         (select ctry.shipper_validity_yrs  from mast_city cty 
                           join mast_country ctry  on ctry.code = cty.ctry_code 
                           where cty.code=awb.dest)*12) >= awb.awb_date               		
               		AND PKG_COMMON.get_shipper_two_years_fhl(awb.awb_no,awb.awb_date) = 'Y'
			    THEN 'Y'
			    ELSE 'N'
		 END AS SHPR2YRS,		
  		(SELECT DECODE (COUNT(fhl.awb_no),0,'N','Y')  FROM edi_fhl fhl  WHERE awb.awb_no=fhl.awb_no  AND awb.awb_date=fhl.awb_date  )AS FHL,
  		(SELECT DECODE(COUNT(fwb.awb_no),0,'N','Y')   FROM edi_fwb fwb  WHERE awb.awb_no=fwb.awb_no  AND awb.awb_date=fwb.awb_date  )AS FWB,
 		(SELECT DECODE(COUNT(fbl.awb_no),0,'N','Y')   FROM edi_fbl_shp fbl  JOIN edi_fbl ef  ON fbl.tr_no = ef.tr_no  AND ef.fbl_status='P'
  			WHERE awb.awb_no =fbl.awb_no
  			AND awb.awb_date =fbl.awb_date
  		 )AS FBL,
  		(SELECT DECODE(COUNT(recd.awb_no),0,'N','Y')  FROM exp_doc_recd recd  WHERE awb.awb_no=recd.awb_no  AND awb.awb_date=recd.awb_date  AND awb_frz_yn  ='Y')AS DOCRECV,
 		(SELECT DECODE(COUNT(pman.awb_no),0,'N','Y')  FROM exp_pmanifest_awb pman  WHERE awb.awb_no=pman.awb_no  AND awb.awb_date=pman.awb_date  )AS PREMAN,
  		(SELECT DECODE(COUNT(inv.awb_no),0,'N','Y')   FROM awb_inventory inv  WHERE awb.awb_no=inv.awb_no  AND awb.awb_date=inv.awb_date)AS INV,
  		(SELECT DECODE(COUNT(bill.awb_no),0,'Y','N')  FROM bill_charge_dtl bill  WHERE awb.awb_no =bill.awb_no  AND awb.awb_date = bill.awb_date  AND bill.Status  ='PENDING'
 		 AND bill.net_amt > 0  AND STD_IND      = 'Y')   AS PYMNT,
		 ''  AS SECCHK,
		 pkg_exp_rpt.fun_get_sc(awb.awb_no, awb.awb_date,'TSA') AS TSASECCHK
	 		FROM AWB awb
	 		LEFT JOIN EXP_CAR ec ON ec.awb_no = awb.awb_no and ec.awb_date = awb.awb_date
			LEFT JOIN cust_company y ON (y.code = ec.shipper_code or y.code_desc = ec.shpr_name)
			WHERE awb.awb_no = #AWBNO#
			AND awb.awb_date =  TO_DATE(#AWBDATE#,'DDMONYY')  
	  ]]>
	</select>	
	
	<select id="getAwbDocAccHandeldManually" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		select doc_acc_yn from awb where awb_no = #AWBNO# AND AWB_DATE = to_date(#AWBDATE#,'DDMONYY')  AND docacc_user IS NOT NULL AND docacc_date IS NOT NULL
	</select>
	
	<select id="getTTShipmentCount" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		select count(1) from awb where awb_no = #AWB_NO# AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY') and awb_type = 'T'
	</select>
	
	<select id="getAwbTypeDC" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		select AWB_TYPE from awb where awb_no = #AWBNO# AND AWB_DATE = to_date(#AWBDATE#,'DDMONYY')
	</select>
	
	<select id="chkConstraintCodeForImpDC" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		select 'Y' from CST_RECV where AWB_NO = #AWBNO# and CONST_CODE  = 'RP' and rownum = 1
	</select>
	
	<select id="chkConstraintCodeForExpDC" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		select 'Y' from CST_RECV where AWB_NO = #AWBNO# and CONST_CODE  = 'LD' and rownum = 1
	</select>
	
	<select id="chkConstraintCodeForTransitDC" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		select 'Y' from CST_RECV where AWB_NO = #AWBNO# and CONST_CODE  = 'TD' and rownum = 1
	</select>
	
	<select id="chkDCDetailsExistsForAwb" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		select 'Y' from CST_DC_DTL where awb_no = #AWBNO# AND AWB_DATE = to_date(#AWBDATE#,'DDMONYY') and rownum = 1
	</select>

	<select id="fetchPmanListForExportUld" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
		SELECT AWB_NO as awbNo, to_char(AWB_DATE,'DDMONYY') as awbDate FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY = #FLTKEY# AND FLT_DATE = TO_DATE(#FLTDATE#,'DDMONYY') AND ULD_BT_NO = #ULDKEY#
		UNION
		SELECT AWB_NO as awbNo, to_char(AWB_DATE,'DDMONYY') as awbDate  FROM EXP_PMAN_TARMAC_ULD_AWB WHERE FLT_KEY = #FLTKEY# AND FLT_DATE = TO_DATE(#FLTDATE#,'DDMONYY') AND ULD_BT_NO = #ULDKEY#
	</select>	
	
	<select id="fetchPmanListForExportFlt" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
		SELECT AWB_NO as awbNo, to_char(AWB_DATE,'DDMONYY') as awbDate FROM EXP_PMANIFEST_AWB WHERE FLT_KEY = #FLTKEY# AND FLT_DATE = TO_DATE(#FLTDATE#,'DDMONYY') 
		UNION
		SELECT AWB_NO as awbNo, to_char(AWB_DATE,'DDMONYY') as awbDate FROM EXP_PMAN_TARMAC_AWB WHERE FLT_KEY = #FLTKEY# AND FLT_DATE = TO_DATE(#FLTDATE#,'DDMONYY') 
	</select>
	
	<select id="fetchImpCarListForFlt" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
		SELECT AWB_NO as awbNo, to_char(AWB_DATE,'DDMONYY') as awbDate FROM IMP_CAR_SHP  WHERE FLT_KEY = #FLTKEY# AND FLT_DATE = TO_DATE(#FLTDATE#,'DDMONYY')
	</select>
	
	
   <!-- ##################### Export Cargo lying list    : Start       ###############################################-->
   	
<parameterMap id="exportLyingListMap" class="map" >
		<parameter property="RESULT" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="CARRCODE" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="DEST" 			jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="DEST1" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="DEST2" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="SPLCODE" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="SPLCODE2" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="SPLCODE3" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="REGION1" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="REGION2" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="REGION3" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="CONTRCODE" 	jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AGENTCODE" 	jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="SHPRCODE" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="CATALOGCODE" 	jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>		
		<parameter property="COUNTRYCODE" 	jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="NOOFDAYS" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="CARRGROUP" 	jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="PPKTYPE" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="CGOTYPE" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ACASFLAG" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="VIEW" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="RCSTYPE" 		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		
		</parameterMap>
	<procedure id="exportlyingsearch" parameterMap="exportLyingListMap" >
		{? = call PKG_EXP_RPT.RPT_LYING_LIST(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>

	<select id="exportlyinglist" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
			SELECT 
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate, 
				GT.ORIG orig, GT.DEST dest,
				(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn, 
				GT.LSP_INFO lspNo, 
				GT.ULD_INFO uldKey,
				GT.ULD_KEY  uldKeyHidden,  
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt, 
				GT.FBL_YN fbl, 
				GT.PMAN_YN pmfst, 
				GT.OFFLOAD_YN ofId,
				GT.SC_YN sc, 
				GT.SC_HOLD_YN h,				
				FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd,				
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE 'N' END) carInd,
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE '01JAN98 00:01' END) dummyCarInd, 
				GT.TRANS_SHIP_CODE trnshp,
				NVL(CAR.LOCK_IND,GT.LOCKED_YN) cl, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        		 GT.IMP_FLT_KEY as impFltKey,
        		 GT.UNLDG_PT AS bookingDest
   			FROM
				GT_EXP_LYING_LIST GT  
				JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
				LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE				
				WHERE 1 = 1
				<isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="view">                       
        				<isEqual property="view" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0						        					
        				</isEqual>        				
                 </isNotEmpty>  
                 <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
                  </isNotEmpty>
			<dynamic prepend="ORDER BY ">
					GT.AWB_NO                                    
            </dynamic>
	</select>
	<select id="exportlyingListUpstream" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
			SELECT 
				DISTINCT CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate, 
				GT.ORIG orig, GT.DEST dest,
				(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn, 
				GT.LSP_INFO lspNo, 
				GT.ULD_INFO uldKey,
				GT.ULD_KEY  uldKeyHidden,  
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt, 
				GT.FBL_YN fbl, 
				GT.PMAN_YN pmfst, 
				GT.OFFLOAD_YN ofId,
				GT.SC_YN sc, 
				GT.SC_HOLD_YN h,
				FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd,				
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE 'N' END) carInd,
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE '01JAN98 00:01' END) dummyCarInd, 
				GT.TRANS_SHIP_CODE trnshp,
				NVL(CAR.LOCK_IND,GT.LOCKED_YN) cl, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        		 GT.IMP_FLT_KEY as impFltKey,
        		 GT.UNLDG_PT AS bookingDest
   			FROM
				GT_EXP_LYING_LIST GT  
				JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
				LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE				
        		LEFT JOIN EXP_UPSTREAM_CHK_RESULT CHKRLT ON CHKRLT.AWB_NO = awb.AWB_NO AND CHKRLT.AWB_DATE = awb.AWB_DATE
				WHERE 1 = 1 AND GT.AWB_DATE > TO_DATE('31DEC19','DDMONYY')
				<isNotEmpty property="unLadingPort">       
        		AND (CHKRLT.PORT = #unLadingPort# OR CHKRLT.CTRY_CODE IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#unLadingPort#))
        		</isNotEmpty> 
        		<isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
        		<isNotEmpty property="upstreamChecked">
        		<isNotEqual property="upstreamChecked" compareValue="All">
        		AND CHKRLT.UPSTREAM_CHECKED = #upstreamChecked#
        		</isNotEqual>
        		</isNotEmpty>
				
				<isNotEmpty prepend="AND" property="view">                       
        				<isEqual property="view" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0						        					
        				</isEqual>        				
                 </isNotEmpty>  
                 <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
                  </isNotEmpty>		
			<dynamic prepend="ORDER BY ">
					GT.AWB_NO                                    
            </dynamic>
	</select>
	<select id="getExportLyingListULDUpstream" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
			SELECT * FROM ( SELECT DISTINCT
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate,
				GT.ULD_KEY ULD_KEY,
				(CASE WHEN (SELECT COUNT(1) FROM EXP_CAR WHERE AWB_NO=GT.AWB_NO AND AWB_DATE=to_char(GT.AWB_DATE,'DDMONYY') AND NVL(SPLIT_NOT_ALLOW,'N')='Y') > 0 THEN 
  				 CASE WHEN instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('PPK'),'**') ) > 0 THEN 'Y' ELSE 
  				 CASE WHEN  instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('MIX'),'**') ) > 0 THEN 'Y' ELSE 'N' END END 
  				ELSE 'N' END) as splitNotAllow, 
				GT.ORIG orig, GT.DEST dest,
				(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn,
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt,				
				GT.PMAN_YN pmfst,
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE 'N' END) carInd,
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE '01JAN98 00:01' END) dummyCarInd, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        uldinfo.uld_key as vUldKey,
        uldinfo.contr_code as vContrCode,
        uldinfo.uld_pcs as vuld_pcs,
        uldinfo.uld_wt as vuld_wt,
        FUN_GET_ULD_DOC_IND(uldinfo.uld_key) as vULDDocInd,
        (select WT from awb WHERE AWB_NO = GT.AWB_NO AND AWB_DATE = GT.AWB_DATE) awbWt,
        (select SUM(locn_wt) from awb_inventory where uld_key = uldinfo.uld_key) totULDWt,
        FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd,
        GT.IMP_FLT_KEY as impFltKey,
        GT.UNLDG_PT AS bookingDest
   		FROM
		GT_EXP_LYING_LIST GT  
		LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
		JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
        JOIN (
          SELECT uld.uld_key ,uld.contr_code, inv.awb_no, inv.awb_date , inv.uld_pcs, inv.uld_wt
          FROM ULD_INVENTORY uld
              JOIN
                (SELECT awb_no, awb_date,uld_key, SUM(locn_pcs) uld_pcs, SUM(locn_wt) uld_wt
                  FROM awb_inventory i
                  where not (nvl(LENGTH(flt_key),0) &gt; 0 AND UPPER(flt_type) = 'E')
                  AND uld_key is not null
                  GROUP BY awb_no, awb_date,uld_key) inv on inv.uld_key = uld.uld_key AND (uld.handling_mode IN ('NBK','PPK') OR NVL(mix_ppk_ind,'N') = 'Y' OR NVL(ppk_ind,'N') = 'Y') 
        ) uldinfo ON uldinfo.awb_no = GT.AWB_NO AND uldinfo.AWB_DATE = GT.AWB_DATE        
        LEFT JOIN EXP_UPSTREAM_CHK_RESULT CHKRLT ON CHKRLT.AWB_NO = GT.AWB_NO AND CHKRLT.AWB_DATE = GT.AWB_DATE         
        WHERE 1 = 1 AND GT.AWB_DATE > TO_DATE('31DEC19','DDMONYY')
        		<isNotEmpty property="unLadingPort">       
        		AND (CHKRLT.PORT = #unLadingPort# OR CHKRLT.CTRY_CODE IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#unLadingPort#))
        		</isNotEmpty> 
        		<isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
        		<isNotEmpty property="upstreamChecked">
        		<isNotEqual property="upstreamChecked" compareValue="All">
        		AND CHKRLT.UPSTREAM_CHECKED = #upstreamChecked#
        		</isNotEqual>
        		</isNotEmpty>
		
         <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
          </isNotEmpty>      ) A                              
		  <dynamic prepend="ORDER BY ">
                 A.ULD_KEY           
          </dynamic>				
	</select>
	
			
<select id="getExportLyingListULD" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
			SELECT 
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate,
				(CASE WHEN (SELECT COUNT(1) FROM EXP_CAR WHERE AWB_NO=GT.AWB_NO AND AWB_DATE=to_char(GT.AWB_DATE,'DDMONYY') AND NVL(SPLIT_NOT_ALLOW,'N')='Y') > 0 THEN 
  				 CASE WHEN instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('PPK'),'**') ) > 0 THEN 'Y' ELSE 
  				 CASE WHEN  instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('MIX'),'**') ) > 0 THEN 'Y' ELSE 'N' END END 
  				ELSE 'N' END) as splitNotAllow, 
				GT.ORIG orig, GT.DEST dest,
				(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn,
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt,				
				GT.PMAN_YN pmfst,
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE 'N' END) carInd,
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE '01JAN98 00:01' END) dummyCarInd, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        uldinfo.uld_key as vUldKey,
        uldinfo.contr_code as vContrCode,
        uldinfo.uld_pcs as vuld_pcs,
        uldinfo.uld_wt as vuld_wt,
        FUN_GET_ULD_DOC_IND(uldinfo.uld_key) as vULDDocInd,
        (select WT from awb WHERE AWB_NO = GT.AWB_NO AND AWB_DATE = GT.AWB_DATE) awbWt,
        (select SUM(locn_wt) from awb_inventory where uld_key = uldinfo.uld_key) totULDWt,
        FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd,
        GT.IMP_FLT_KEY as impFltKey,
        GT.UNLDG_PT AS bookingDest
   		FROM
		GT_EXP_LYING_LIST GT  
		LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
		JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
        JOIN (
          SELECT uld.uld_key ,uld.contr_code, inv.awb_no, inv.awb_date , inv.uld_pcs, inv.uld_wt
          FROM ULD_INVENTORY uld
              JOIN
                (SELECT awb_no, awb_date,uld_key, SUM(locn_pcs) uld_pcs, SUM(locn_wt) uld_wt
                  FROM awb_inventory i
                  where not (nvl(LENGTH(flt_key),0) &gt; 0 AND UPPER(flt_type) = 'E')
                  AND uld_key is not null
                  GROUP BY awb_no, awb_date,uld_key) inv on inv.uld_key = uld.uld_key AND (uld.handling_mode IN ('NBK','PPK') OR NVL(mix_ppk_ind,'N') = 'Y' OR NVL(ppk_ind,'N') = 'Y') 
        ) uldinfo ON uldinfo.awb_no = GT.AWB_NO AND uldinfo.AWB_DATE = GT.AWB_DATE        
        WHERE 1 = 1
        <isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
		</isNotEmpty>
         <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
          </isNotEmpty>                                    
		  <dynamic prepend="ORDER BY ">
                 GT.ULD_KEY           
          </dynamic>				
	</select>

	<select id="getExportLyingListULDUpstreamCOUNT" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
			SELECT COUNT(1) AS totalRowCount FROM 
	 		 (SELECT DISTINCT 
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate,
				(CASE WHEN (SELECT COUNT(1) FROM EXP_CAR WHERE AWB_NO=GT.AWB_NO AND AWB_DATE=to_char(GT.AWB_DATE,'DDMONYY') AND NVL(SPLIT_NOT_ALLOW,'N')='Y') > 0 THEN 
  				 CASE WHEN instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('PPK'),'**') ) > 0 THEN 'Y' ELSE 
  				 CASE WHEN  instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('MIX'),'**') ) > 0 THEN 'Y' ELSE 'N' END END 
  				ELSE 'N' END) as splitNotAllow, 
				GT.ORIG orig, GT.DEST dest,
				(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn,
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt,				
				GT.PMAN_YN pmfst,
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE 'N' END) carInd,
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE '01JAN98 00:01' END) dummyCarInd, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        uldinfo.uld_key as vUldKey,
        uldinfo.contr_code as vContrCode,
        uldinfo.uld_pcs as vuld_pcs,
        uldinfo.uld_wt as vuld_wt,
        FUN_GET_ULD_DOC_IND(uldinfo.uld_key) as vULDDocInd,
        (select WT from awb WHERE AWB_NO = GT.AWB_NO AND AWB_DATE = GT.AWB_DATE) awbWt,
        (select SUM(locn_wt) from awb_inventory where uld_key = uldinfo.uld_key) totULDWt,
        FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd,
        GT.IMP_FLT_KEY as impFltKey,
        GT.UNLDG_PT AS bookingDest
   		FROM
		GT_EXP_LYING_LIST GT  
		LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
		JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
        JOIN (
          SELECT uld.uld_key ,uld.contr_code, inv.awb_no, inv.awb_date , inv.uld_pcs, inv.uld_wt
          FROM ULD_INVENTORY uld
              JOIN
                (SELECT awb_no, awb_date,uld_key, SUM(locn_pcs) uld_pcs, SUM(locn_wt) uld_wt
                  FROM awb_inventory i
                  where not (nvl(LENGTH(flt_key),0) &gt; 0 AND UPPER(flt_type) = 'E')
                  AND uld_key is not null
                  GROUP BY awb_no, awb_date,uld_key) inv on inv.uld_key = uld.uld_key AND (uld.handling_mode IN ('NBK','PPK') OR NVL(mix_ppk_ind,'N') = 'Y' OR NVL(ppk_ind,'N') = 'Y') 
        ) uldinfo ON uldinfo.awb_no = GT.AWB_NO AND uldinfo.AWB_DATE = GT.AWB_DATE        
        LEFT JOIN EXP_UPSTREAM_CHK_RESULT CHKRLT ON CHKRLT.AWB_NO = GT.AWB_NO AND CHKRLT.AWB_DATE = GT.AWB_DATE         
        WHERE 1 = 1 AND GT.AWB_DATE > TO_DATE('31DEC19','DDMONYY')
        		<isNotEmpty property="unLadingPort">       
        		AND (CHKRLT.PORT = #unLadingPort# OR CHKRLT.CTRY_CODE IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#unLadingPort#))
        		</isNotEmpty> 
        		<isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
        		<isNotEmpty property="upstreamChecked">
        		<isNotEqual property="upstreamChecked" compareValue="All">
        		AND CHKRLT.UPSTREAM_CHECKED = #upstreamChecked#
        		</isNotEqual>
        		</isNotEmpty>
		
         <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
          </isNotEmpty>)
	</select>
	
	
<select id="getExportLyingListULDCOUNT" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
		SELECT COUNT(1) AS totalRowCount FROM 
	 		 (SELECT 
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate, 
				GT.ORIG orig, GT.DEST dest,
				(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn, 
				GT.LSP_INFO lspNo, 
				GT.ULD_INFO uldKey,
				GT.ULD_KEY  uldKeyHidden,  
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt, 
				GT.FBL_YN fbl, 
				GT.PMAN_YN pmfst, 
				GT.OFFLOAD_YN ofId,
				GT.SC_YN sc, 
				GT.SC_HOLD_YN h,				
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE 'N' END) carInd,
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE '01JAN98 00:01' END) dummyCarInd, 
				GT.TRANS_SHIP_CODE trnshp,
				NVL(CAR.LOCK_IND,GT.LOCKED_YN) cl, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        uldinfo.uld_key as vUldKey,
        uldinfo.contr_code as vContrCode,
        uldinfo.uld_pcs as vuld_pcs,
        uldinfo.uld_wt as vuld_wt,
        FUN_GET_ULD_DOC_IND(uldinfo.uld_key) as vULDDocInd,
        GT.IMP_FLT_KEY as impFltKey,
        GT.UNLDG_PT AS bookingDest
   			FROM
				GT_EXP_LYING_LIST GT  
				LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
        JOIN (
          SELECT uld.uld_key ,uld.contr_code, inv.awb_no, inv.awb_date , inv.uld_pcs, inv.uld_wt
          FROM ULD_INVENTORY uld
              JOIN
                (SELECT awb_no, awb_date,uld_key, SUM(locn_pcs) uld_pcs, SUM(locn_wt) uld_wt
                  FROM awb_inventory i
                  where not (nvl(LENGTH(flt_key),0) &gt; 0 AND UPPER(flt_type) = 'E')
                  AND uld_key is not null
                  GROUP BY awb_no, awb_date,uld_key) inv on inv.uld_key = uld.uld_key AND (uld.handling_mode IN ('NBK','PPK') OR NVL(mix_ppk_ind,'N') = 'Y' OR NVL(ppk_ind,'N') = 'Y') 
        ) uldinfo ON uldinfo.awb_no = GT.AWB_NO AND uldinfo.AWB_DATE = GT.AWB_DATE        
        WHERE 1 = 1   
        <isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
                  <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
                  </isNotEmpty>                    
			)
	</select>
	
	<select id="exportlyingListUpstreamCOUNT" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
		SELECT COUNT(1) AS totalRowCount FROM 
		  (
			SELECT DISTINCT
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate, 
				GT.ORIG orig, GT.DEST dest,
				(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn, 
				GT.LSP_INFO lspNo, 
				GT.ULD_INFO uldKey,
				GT.ULD_KEY  uldKeyHidden,  
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt, 
				GT.FBL_YN fbl, 
				GT.PMAN_YN pmfst, 
				GT.OFFLOAD_YN ofId,
				GT.SC_YN sc, 
				GT.SC_HOLD_YN h,
				FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd,		
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE 'N' END) carInd,
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE '01JAN98 00:01' END) dummyCarInd, 
				GT.TRANS_SHIP_CODE trnshp,
				NVL(CAR.LOCK_IND,GT.LOCKED_YN) cl, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        		 GT.IMP_FLT_KEY as impFltKey,
        		 GT.UNLDG_PT AS bookingDest
   			FROM
				GT_EXP_LYING_LIST GT  
				JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
				LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE				
        		LEFT JOIN EXP_UPSTREAM_CHK_RESULT CHKRLT ON CHKRLT.AWB_NO = GT.AWB_NO AND CHKRLT.AWB_DATE = GT.AWB_DATE
				WHERE 1 = 1 AND GT.AWB_DATE > TO_DATE('31DEC19','DDMONYY')
				<isNotEmpty property="unLadingPort">       
        		AND (CHKRLT.PORT = #unLadingPort# OR CHKRLT.CTRY_CODE IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#unLadingPort#))
        		</isNotEmpty> 
        		<isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
        		<isNotEmpty property="upstreamChecked">
        		<isNotEqual property="upstreamChecked" compareValue="All">
        		AND CHKRLT.UPSTREAM_CHECKED = #upstreamChecked#
        		</isNotEqual>
        		</isNotEmpty>
				
				<isNotEmpty prepend="AND" property="view">                       
        				<isEqual property="view" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0						        					
        				</isEqual>        				
                 </isNotEmpty>  
                 <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
                  </isNotEmpty>		
			)
	</select>
	
		
<select id="exportlyinglistCOUNT"  parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="java.lang.Integer">
	   SELECT COUNT(1) AS totalRowCount FROM 
		  (SELECT 
					CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
					GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate, 
					GT.ORIG orig, GT.DEST dest,
					(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        	SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        	SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        	CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        	)) AND ROWNUM=1) region,
					 GT.CC_CODE customCode, 
					FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
					FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
					GT.CONTENT content, 
					GT.SPL_CODE splCode,
					GT.RCL_WT rclWt,
					GT.RCL_PCS rclPc,
					GT.INV_WT strgWt, 
					GT.INV_PCS strgPc,
					GT.LOCN_INFO whLocn, 
					GT.LSP_INFO lspNo, 
					GT.ULD_INFO uldKey,
					GT.ULD_KEY  uldKeyHidden,  
					GT.NON_PMAN_PCS nonPmfstPc, 
					GT.NON_PMAN_WT nonPmfstWt, 
					GT.FBL_YN fbl, 
					GT.PMAN_YN pmfst, 
					GT.OFFLOAD_YN ofId,
					GT.SC_YN sc, 
					GT.SC_HOLD_YN h,				
					DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
					   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
					(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE '' END) carInd, 
					GT.TRANS_SHIP_CODE trnshp,
					NVL(CAR.LOCK_IND,GT.LOCKED_YN) cl, 
					DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
					(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
	      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
	      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
	      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
	      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
					(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
					CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
					 ELSE '' END as bookingFlight,
					CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
	        		 ELSE '' END as etd,
        		 	GT.IMP_FLT_KEY as impFltKey,
        			GT.UNLDG_PT AS bookingDest
	   			FROM
					GT_EXP_LYING_LIST GT  
					LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
					WHERE 1 = 1
					<isNotEmpty prepend="AND" property="fltKey">
				   	GT.FLT_KEY = #fltKey#
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="view">                       
	        				<isEqual property="view" compareValue="B">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0						        					
	        				</isEqual>        				
	                 </isNotEmpty>  
	                 <isNotEmpty prepend="AND" property="ppkType">                       
	        				<isEqual property="ppkType" compareValue="B">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="P">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="M">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="TP">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="TN">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
	        				</isEqual>        				
	                  </isNotEmpty>
	             )			
	</select>
	
	<select id="exportlyinglistallcount" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
	SELECT
				COUNT(AWB_NO) totAWBNo,
				SUM(NON_PMAN_PCS)totPc,
				SUM(NON_PMAN_WT)totWt   
	FROM 	
				GT_EXP_LYING_LIST GT
				WHERE 1 = 1
					<isNotEmpty prepend="AND" property="fltKey">
				   	GT.FLT_KEY = #fltKey#
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="view">                       
	        				<isEqual property="view" compareValue="B">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0						        					
	        				</isEqual>        				
	                 </isNotEmpty>  
	                 <isNotEmpty prepend="AND" property="ppkType">                       
	        				<isEqual property="ppkType" compareValue="B">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="P">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="M">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="TP">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="TN">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
	        				</isEqual>        				
	                  </isNotEmpty>				
				 				
	</select>
	<select id="exportlyinglistallcountUpstream" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
	SELECT COUNT(awbNo) totAWBNo,
				SUM(nonPmfstPc)totPc,
				SUM(nonPmfstWt)totWt  FROM 
		  (
			SELECT DISTINCT
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate, 
				GT.ORIG orig, GT.DEST dest,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn, 
				GT.LSP_INFO lspNo, 
				GT.ULD_INFO uldKey,
				GT.ULD_KEY  uldKeyHidden,  
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt, 
				GT.FBL_YN fbl, 
				GT.PMAN_YN pmfst, 
				GT.OFFLOAD_YN ofId,
				GT.SC_YN sc, 
				GT.SC_HOLD_YN h,
				FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd,				
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE 'N' END) carInd,
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE '01JAN98 00:01' END) dummyCarInd, 
				GT.TRANS_SHIP_CODE trnshp,
				NVL(CAR.LOCK_IND,GT.LOCKED_YN) cl, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        		 GT.IMP_FLT_KEY as impFltKey,
        		 GT.UNLDG_PT AS bookingDest
   			FROM
				GT_EXP_LYING_LIST GT  
				JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
				LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE				
        		LEFT JOIN EXP_UPSTREAM_CHK_RESULT CHKRLT ON CHKRLT.AWB_NO = GT.AWB_NO AND CHKRLT.AWB_DATE = GT.AWB_DATE
				WHERE 1 = 1 AND GT.AWB_DATE > TO_DATE('31DEC19','DDMONYY')
				<isNotEmpty property="unLadingPort">       
        		AND (CHKRLT.PORT = #unLadingPort# OR CHKRLT.CTRY_CODE IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#unLadingPort#))
        		</isNotEmpty> 
         	<isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
					<isNotEmpty prepend="AND" property="fltKey">
				   	GT.FLT_KEY = #fltKey#
					</isNotEmpty>
        		<isNotEmpty property="upstreamChecked">
        		<isNotEqual property="upstreamChecked" compareValue="All">
        		AND CHKRLT.UPSTREAM_CHECKED = #upstreamChecked#
        		</isNotEqual>
        		</isNotEmpty>
				
				<isNotEmpty prepend="AND" property="view">                       
        				<isEqual property="view" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0						        					
        				</isEqual>        				
                 </isNotEmpty>  
                 <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
                  </isNotEmpty>		
			)		 				
	</select>
	
	<select id="exportlyinglistallcountULDUpstream" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
		SELECT COUNT(awbNo) totAWBNo,
				SUM(nonPmfstPc)totPc,
				SUM(nonPmfstWt)totWt  FROM 
	 		 (SELECT DISTINCT 
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate,
				(CASE WHEN (SELECT COUNT(1) FROM EXP_CAR WHERE AWB_NO=GT.AWB_NO AND AWB_DATE=to_char(GT.AWB_DATE,'DDMONYY') AND NVL(SPLIT_NOT_ALLOW,'N')='Y') > 0 THEN 
  				 CASE WHEN instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('PPK'),'**') ) > 0 THEN 'Y' ELSE 
  				 CASE WHEN  instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('MIX'),'**') ) > 0 THEN 'Y' ELSE 'N' END END 
  				ELSE 'N' END) as splitNotAllow, 
				GT.ORIG orig, GT.DEST dest,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn,
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt,				
				GT.PMAN_YN pmfst,
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE 'N' END) carInd,
				(CASE WHEN GT.CAR_YN = 'Y' THEN (SELECT TO_CHAR(CR_DATE,'DDMONYY HH24:MI') from EXP_CAR CAR WHERE CAR.AWB_NO=GT.AWB_NO AND CAR.AWB_DATE=GT.AWB_DATE) ELSE '01JAN98 00:01' END) dummyCarInd, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        uldinfo.uld_key as vUldKey,
        uldinfo.contr_code as vContrCode,
        uldinfo.uld_pcs as vuld_pcs,
        uldinfo.uld_wt as vuld_wt,
        FUN_GET_ULD_DOC_IND(uldinfo.uld_key) as vULDDocInd,
        (select WT from awb WHERE AWB_NO = GT.AWB_NO AND AWB_DATE = GT.AWB_DATE) awbWt,
        (select SUM(locn_wt) from awb_inventory where uld_key = uldinfo.uld_key) totULDWt,
        FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd,
        GT.IMP_FLT_KEY as impFltKey,
        GT.UNLDG_PT AS bookingDest
   		FROM
		GT_EXP_LYING_LIST GT  
		LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
		JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
        JOIN (
          SELECT uld.uld_key ,uld.contr_code, inv.awb_no, inv.awb_date , inv.uld_pcs, inv.uld_wt
          FROM ULD_INVENTORY uld
              JOIN
                (SELECT awb_no, awb_date,uld_key, SUM(locn_pcs) uld_pcs, SUM(locn_wt) uld_wt
                  FROM awb_inventory i
                  where not (nvl(LENGTH(flt_key),0) &gt; 0 AND UPPER(flt_type) = 'E')
                  AND uld_key is not null
                  GROUP BY awb_no, awb_date,uld_key) inv on inv.uld_key = uld.uld_key AND (uld.handling_mode IN ('NBK','PPK') OR NVL(mix_ppk_ind,'N') = 'Y' OR NVL(ppk_ind,'N') = 'Y') 
        ) uldinfo ON uldinfo.awb_no = GT.AWB_NO AND uldinfo.AWB_DATE = GT.AWB_DATE        
        LEFT JOIN EXP_UPSTREAM_CHK_RESULT CHKRLT ON CHKRLT.AWB_NO = GT.AWB_NO AND CHKRLT.AWB_DATE = GT.AWB_DATE         
        WHERE 1 = 1 AND GT.AWB_DATE > TO_DATE('31DEC19','DDMONYY')
        		<isNotEmpty property="unLadingPort">       
        		AND (CHKRLT.PORT = #unLadingPort# OR CHKRLT.CTRY_CODE IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#unLadingPort#))
        		</isNotEmpty> 
        		<isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
        		<isNotEmpty property="upstreamChecked">
        		<isNotEqual property="upstreamChecked" compareValue="All">
        		AND CHKRLT.UPSTREAM_CHECKED = #upstreamChecked#
        		</isNotEqual>
        		</isNotEmpty>
		
         <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
          </isNotEmpty>
          )			 				
	</select>
	
	<select id="exportlyinglistallcountULD" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO" >
			SELECT
				COUNT(GT.AWB_NO) totAWBNo,
				SUM(GT.NON_PMAN_PCS)totPc,
				SUM(GT.NON_PMAN_WT)totWt   
			FROM 	
				GT_EXP_LYING_LIST GT	
				LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
		        JOIN (
		          SELECT uld.uld_key ,uld.contr_code, inv.awb_no, inv.awb_date , inv.uld_pcs, inv.uld_wt
		          FROM ULD_INVENTORY uld
		              JOIN
		                (SELECT awb_no, awb_date,uld_key, SUM(locn_pcs) uld_pcs, SUM(locn_wt) uld_wt
		                  FROM awb_inventory i
		                  where not (nvl(LENGTH(flt_key),0) &gt; 0 AND UPPER(flt_type) = 'E')
		                  AND uld_key is not null
		                  GROUP BY awb_no, awb_date,uld_key) inv on inv.uld_key = uld.uld_key AND (uld.handling_mode IN ('NBK','PPK') OR NVL(mix_ppk_ind,'N') = 'Y' OR NVL(ppk_ind,'N') = 'Y') 
		        ) uldinfo ON uldinfo.awb_no = GT.AWB_NO AND uldinfo.AWB_DATE = GT.AWB_DATE        
		        WHERE 1 = 1  
		        <isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
		                  <isNotEmpty prepend="AND" property="ppkType">                       
		        				<isEqual property="ppkType" compareValue="B">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="P">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="M">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="TP">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="TN">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
		        				</isEqual>        				
		                  </isNotEmpty>  
				 				
	</select>
	
	<select id="validateDestForLyingList" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT 'X' FROM MAST_ARPT WHERE CODE = #DEST#
	</select>
	
	<select id="validateSplCodeForLyingList" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT 'X' FROM MAST_SPL_HAND_CODE WHERE CODE = #SPL_CODE#
	</select>
	
	<select id="validateContrCodeForLyingList" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT DISTINCT 'X' FROM ULD_TYPE_CONTR WHERE CONTR_CODE = #CONTR_CODE#
	</select>
	
	<select id="validateAgentForLyingList" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT DISTINCT 'X'  FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND AGENT_YN = 'Y' AND BLACKLISTED='N' AND CODE_DESC = #AGENT_NAME#
	</select>
	
	<select id="validateShipperForLyingList" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT DISTINCT 'X'  FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND CONS_YN = 'Y' AND BLACKLISTED='N' AND CODE_DESC = #SHIPR_NAME#
	</select>
	
	<select id="sqlFetchCargoLyingSummaryDtls" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO">
		SELECT 
			DEST dest, SUM(NON_PMAN_PCS) totPc, SUM(NON_PMAN_WT) totWt, COUNT(AWB_NO) totAWBNo 
		FROM GT_EXP_LYING_LIST GT
		WHERE 1 = 1
					<isNotEmpty prepend="AND" property="view">                       
	        				<isEqual property="view" compareValue="B">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0						        					
	        				</isEqual>        				
	                 </isNotEmpty>  
	                <isNotEmpty prepend="AND" property="fltKey">
				   	GT.FLT_KEY = #fltKey#
					</isNotEmpty>
	                 <isNotEmpty prepend="AND" property="ppkType">                       
	        				<isEqual property="ppkType" compareValue="B">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="P">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="M">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="TP">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="TN">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
	        				</isEqual>        				
	                  </isNotEmpty>		
		GROUP BY DEST
	</select>
	<select id="sqlFetchCargoLyingSummaryRegionDtls" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO">
		SELECT region region,COUNT(awbNo) totAWBNo,
				SUM(nonPmfstPc) AS totPc,
				SUM(nonPmfstWt) AS totWt  FROM 
		  (
		SELECT 
		(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
      GT.NON_PMAN_PCS nonPmfstPc, GT.NON_PMAN_WT nonPmfstWt, GT.AWB_NO awbNo 
		FROM GT_EXP_LYING_LIST GT
		WHERE 1 = 1
					<isNotEmpty prepend="AND" property="view">                       
	        				<isEqual property="view" compareValue="B">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0						        					
	        				</isEqual>        				
	                 </isNotEmpty>  
	                   <isNotEmpty prepend="AND" property="fltKey">
				   	   GT.FLT_KEY = #fltKey#
					   </isNotEmpty> 
	                 <isNotEmpty prepend="AND" property="ppkType">                       
	        				<isEqual property="ppkType" compareValue="B">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="P">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="M">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="TP">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
	        				</isEqual> 
	        				<isEqual property="ppkType" compareValue="TN">
	        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
	        				</isEqual>        				
	                  </isNotEmpty>		
		) WHERE region IS NOT NULL group by region
	</select>
	<select id="sqlFetchCargoLyingSummaryDtlsUpstream" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO">
		SELECT dest dest,COUNT(awbNo) totAWBNo,
				SUM(nonPmfstPc)totPc,
				SUM(nonPmfstWt)totWt  FROM 
		  (
			SELECT DISTINCT
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate, 
				GT.ORIG orig, GT.DEST dest,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn, 
				GT.LSP_INFO lspNo, 
				GT.ULD_INFO uldKey,
				GT.ULD_KEY  uldKeyHidden,  
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt, 
				GT.FBL_YN fbl, 
				GT.PMAN_YN pmfst, 
				GT.OFFLOAD_YN ofId,
				GT.SC_YN sc, 
				GT.SC_HOLD_YN h,
				FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd,				
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				GT.CAR_YN carInd, 
				GT.TRANS_SHIP_CODE trnshp,
				NVL(CAR.LOCK_IND,GT.LOCKED_YN) cl, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd
   			FROM
				GT_EXP_LYING_LIST GT  
				JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
				LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE				
        		LEFT JOIN EXP_UPSTREAM_CHK_RESULT CHKRLT ON CHKRLT.AWB_NO = GT.AWB_NO AND CHKRLT.AWB_DATE = GT.AWB_DATE
				WHERE 1 = 1 AND GT.AWB_DATE > TO_DATE('31DEC19','DDMONYY')
				<isNotEmpty property="unLadingPort">       
        		AND (CHKRLT.PORT = #unLadingPort# OR CHKRLT.CTRY_CODE IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#unLadingPort#))
        		</isNotEmpty> 
        		<isNotEmpty prepend="AND" property="fltKey">
				GT.FLT_KEY = #fltKey#
				</isNotEmpty>
        		<isNotEmpty property="upstreamChecked">
        		<isNotEqual property="upstreamChecked" compareValue="All">
        		AND CHKRLT.UPSTREAM_CHECKED = #upstreamChecked#
        		</isNotEqual>
        		</isNotEmpty>
				
				<isNotEmpty prepend="AND" property="view">                       
        				<isEqual property="view" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0						        					
        				</isEqual>        				
                 </isNotEmpty>  
                 <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
                  </isNotEmpty>		
			)		group by dest
	</select>
	<select id="sqlFetchCargoLyingSummaryDtlsULDUpstream" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO">
		SELECT dest dest,COUNT(awbNo) totAWBNo,
				SUM(nonPmfstPc)totPc,
				SUM(nonPmfstWt)totWt  FROM 
	 		 (SELECT DISTINCT 
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate,
				(CASE WHEN (SELECT COUNT(1) FROM EXP_CAR WHERE AWB_NO=GT.AWB_NO AND AWB_DATE=to_char(GT.AWB_DATE,'DDMONYY') AND NVL(SPLIT_NOT_ALLOW,'N')='Y') > 0 THEN 
  				 CASE WHEN instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('PPK'),'**') ) > 0 THEN 'Y' ELSE 
  				 CASE WHEN  instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('MIX'),'**') ) > 0 THEN 'Y' ELSE 'N' END END 
  				ELSE 'N' END) as splitNotAllow, 
				GT.ORIG orig, GT.DEST dest,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn,
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt,				
				GT.PMAN_YN pmfst,
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				GT.CAR_YN carInd, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        uldinfo.uld_key as vUldKey,
        uldinfo.contr_code as vContrCode,
        uldinfo.uld_pcs as vuld_pcs,
        uldinfo.uld_wt as vuld_wt,
        FUN_GET_ULD_DOC_IND(uldinfo.uld_key) as vULDDocInd,
        (select WT from awb WHERE AWB_NO = GT.AWB_NO AND AWB_DATE = GT.AWB_DATE) awbWt,
        (select SUM(locn_wt) from awb_inventory where uld_key = uldinfo.uld_key) totULDWt,
         FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd
   		FROM
		GT_EXP_LYING_LIST GT  
		LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
		JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
        JOIN (
          SELECT uld.uld_key ,uld.contr_code, inv.awb_no, inv.awb_date , inv.uld_pcs, inv.uld_wt
          FROM ULD_INVENTORY uld
              JOIN
                (SELECT awb_no, awb_date,uld_key, SUM(locn_pcs) uld_pcs, SUM(locn_wt) uld_wt
                  FROM awb_inventory i
                  where not (nvl(LENGTH(flt_key),0) &gt; 0 AND UPPER(flt_type) = 'E')
                  AND uld_key is not null
                  GROUP BY awb_no, awb_date,uld_key) inv on inv.uld_key = uld.uld_key AND (uld.handling_mode IN ('NBK','PPK') OR NVL(mix_ppk_ind,'N') = 'Y' OR NVL(ppk_ind,'N') = 'Y') 
        ) uldinfo ON uldinfo.awb_no = GT.AWB_NO AND uldinfo.AWB_DATE = GT.AWB_DATE        
        LEFT JOIN EXP_UPSTREAM_CHK_RESULT CHKRLT ON CHKRLT.AWB_NO = GT.AWB_NO AND CHKRLT.AWB_DATE = GT.AWB_DATE         
        WHERE 1 = 1 AND GT.AWB_DATE > TO_DATE('31DEC19','DDMONYY')
        		<isNotEmpty property="unLadingPort">       
        		AND (CHKRLT.PORT = #unLadingPort# OR CHKRLT.CTRY_CODE IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#unLadingPort#))
        		</isNotEmpty> 
        		<isNotEmpty property="upstreamChecked">
        		<isNotEqual property="upstreamChecked" compareValue="All">
        		AND CHKRLT.UPSTREAM_CHECKED = #upstreamChecked#
        		</isNotEqual>
        		</isNotEmpty>
		  <isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
         <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
          </isNotEmpty>
          ) group by dest
	</select>
	<select id="sqlFetchCargoLyingSummaryRegionDtlsULDUpstream" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO">
		SELECT region region,COUNT(awbNo) totAWBNo,
				SUM(nonPmfstPc)totPc,
				SUM(nonPmfstWt)totWt  FROM 
	 		 (SELECT DISTINCT 
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate,
				(CASE WHEN (SELECT COUNT(1) FROM EXP_CAR WHERE AWB_NO=GT.AWB_NO AND AWB_DATE=to_char(GT.AWB_DATE,'DDMONYY') AND NVL(SPLIT_NOT_ALLOW,'N')='Y') > 0 THEN 
  				 CASE WHEN instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('PPK'),'**') ) > 0 THEN 'Y' ELSE 
  				 CASE WHEN  instr(nvl(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,TO_CHAR(GT.AWB_DATE,'DDMONYY')),'*'), nvl(UPPER('MIX'),'**') ) > 0 THEN 'Y' ELSE 'N' END END 
  				ELSE 'N' END) as splitNotAllow, 
				GT.ORIG orig, GT.DEST dest,
        		(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn,
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt,				
				GT.PMAN_YN pmfst,
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				GT.CAR_YN carInd, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd,
        uldinfo.uld_key as vUldKey,
        uldinfo.contr_code as vContrCode,
        uldinfo.uld_pcs as vuld_pcs,
        uldinfo.uld_wt as vuld_wt,
        FUN_GET_ULD_DOC_IND(uldinfo.uld_key) as vULDDocInd,
        (select WT from awb WHERE AWB_NO = GT.AWB_NO AND AWB_DATE = GT.AWB_DATE) awbWt,
        (select SUM(locn_wt) from awb_inventory where uld_key = uldinfo.uld_key) totULDWt,
         FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd
   		FROM
		GT_EXP_LYING_LIST GT  
		LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
		JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
        JOIN (
          SELECT uld.uld_key ,uld.contr_code, inv.awb_no, inv.awb_date , inv.uld_pcs, inv.uld_wt
          FROM ULD_INVENTORY uld
              JOIN
                (SELECT awb_no, awb_date,uld_key, SUM(locn_pcs) uld_pcs, SUM(locn_wt) uld_wt
                  FROM awb_inventory i
                  where not (nvl(LENGTH(flt_key),0) &gt; 0 AND UPPER(flt_type) = 'E')
                  AND uld_key is not null
                  GROUP BY awb_no, awb_date,uld_key) inv on inv.uld_key = uld.uld_key AND (uld.handling_mode IN ('NBK','PPK') OR NVL(mix_ppk_ind,'N') = 'Y' OR NVL(ppk_ind,'N') = 'Y') 
        ) uldinfo ON uldinfo.awb_no = GT.AWB_NO AND uldinfo.AWB_DATE = GT.AWB_DATE        
        LEFT JOIN EXP_UPSTREAM_CHK_RESULT CHKRLT ON CHKRLT.AWB_NO = GT.AWB_NO AND CHKRLT.AWB_DATE = GT.AWB_DATE         
        WHERE 1 = 1 AND GT.AWB_DATE > TO_DATE('31DEC19','DDMONYY')
        		<isNotEmpty property="unLadingPort">       
        		AND (CHKRLT.PORT = #unLadingPort# OR CHKRLT.CTRY_CODE IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#unLadingPort#))
        		</isNotEmpty> 
        		<isNotEmpty property="upstreamChecked">
        		<isNotEqual property="upstreamChecked" compareValue="All">
        		AND CHKRLT.UPSTREAM_CHECKED = #upstreamChecked#
        		</isNotEqual>
        		</isNotEmpty>
		  <isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
         <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
          </isNotEmpty>
          ) WHERE region IS NOT NULL group by region
	</select>
	<select id="sqlFetchCargoLyingSummaryRegionDtlsUpstream" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO">
		SELECT region region,COUNT(awbNo) totAWBNo,
				SUM(nonPmfstPc)totPc,
				SUM(nonPmfstWt)totWt  FROM 
		  (
			SELECT DISTINCT
				CONCAT(CONCAT(SUBSTR(GT.AWB_NO,0,3),'-'),SUBSTR(GT.AWB_NO,4))awbNo1,
				GT.AWB_NO awbNo, to_char(GT.AWB_DATE,'DDMONYY') awbDate, 
				GT.ORIG orig, GT.DEST dest,
        	    (SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
				awb.TSA_PASS_IND tsaPass,
				GT.CC_CODE customCode, 
				FUN_GET_AWB_DOC_IND(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as docInd,
				FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')) as pkgType,
				GT.CONTENT content, 
				GT.SPL_CODE splCode,
				GT.RCL_WT rclWt,
				GT.RCL_PCS rclPc,
				GT.INV_WT strgWt, 
				GT.INV_PCS strgPc,
				GT.LOCN_INFO whLocn, 
				GT.LSP_INFO lspNo, 
				GT.ULD_INFO uldKey,
				GT.ULD_KEY  uldKeyHidden,  
				GT.NON_PMAN_PCS nonPmfstPc, 
				GT.NON_PMAN_WT nonPmfstWt, 
				GT.FBL_YN fbl, 
				GT.PMAN_YN pmfst, 
				GT.OFFLOAD_YN ofId,
				GT.SC_YN sc, 
				GT.SC_HOLD_YN h,
				FUN_GET_RCSTYPE(GT.AWB_NO, to_char(GT.AWB_DATE,'DDMONYY'),'') ACASInd,			
				DECODE((select count(1) from awb A,EXP_PMANIFEST_AWB B 
				   where B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.CAR_YN = 'Y' AND A.pcs > B.pman_pcs AND A.AWB_NO = GT.AWB_NO AND A.AWB_DATE= GT.AWB_DATE),0,'N','Y') prtShpInd,				
				GT.CAR_YN carInd, 
				GT.TRANS_SHIP_CODE trnshp,
				NVL(CAR.LOCK_IND,GT.LOCKED_YN) cl, 
				DECODE(NVL(GT.BD_DATE, GT.RCL_DATE), NULL, NULL, TO_CHAR(NVL(GT.BD_DATE, GT.RCL_DATE), 'DDMONYY HH24:MI')) brkDwnTime,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,
      			(DECODE((select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1),NULL,
      			(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),(select rmk from awb_rmk where awb_no=GT.awb_no and rownum=1))),
      			DECODE((select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),NULL,(select AIRLN_RMK from awb where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),
      			(select AIRL_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1)))) AS airlRmk,
				(DECODE((select count(1) from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1),0,(select AWB_RMK from awb where awb_no=GT.awb_no and awb_date=GT.awb_date and rownum=1),(select WH_RMK from EXP_CAR where awb_no = GT.awb_no and awb_date=GT.awb_date and rownum=1))) AS whRmk,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN (GT.FLT_KEY || '/' || to_char(GT.FLT_DATE,'DDMONYY') )
				 ELSE '' END as bookingFlight,
				CASE WHEN GT.FLT_KEY IS NOT NULL THEN DECODE( PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , null , PKG_COMMON.get_flt_sta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') , PKG_COMMON.get_flt_eta(GT.FLT_KEY, GT.FLT_DATE, 'D', 'DD') ) 
        		 ELSE '' END as etd
   			FROM
				GT_EXP_LYING_LIST GT  
				JOIN AWB awb ON GT.AWB_NO = awb.AWB_NO AND GT.AWB_DATE = awb.AWB_DATE
				LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE				
        		LEFT JOIN EXP_UPSTREAM_CHK_RESULT CHKRLT ON CHKRLT.AWB_NO = GT.AWB_NO AND CHKRLT.AWB_DATE = GT.AWB_DATE
				WHERE 1 = 1 AND GT.AWB_DATE > TO_DATE('31DEC19','DDMONYY')
				<isNotEmpty property="unLadingPort">       
        		AND (CHKRLT.PORT = #unLadingPort# OR CHKRLT.CTRY_CODE IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#unLadingPort#))
        		</isNotEmpty> 
        		<isNotEmpty property="upstreamChecked">
        		<isNotEqual property="upstreamChecked" compareValue="All">
        		AND CHKRLT.UPSTREAM_CHECKED = #upstreamChecked#
        		</isNotEqual>
        		</isNotEmpty>
				  <isNotEmpty prepend="AND" property="fltKey">
				   GT.FLT_KEY = #fltKey#
				</isNotEmpty>
				<isNotEmpty prepend="AND" property="view">                       
        				<isEqual property="view" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0						        					
        				</isEqual>        				
                 </isNotEmpty>  
                 <isNotEmpty prepend="AND" property="ppkType">                       
        				<isEqual property="ppkType" compareValue="B">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="P">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="M">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TP">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
        				</isEqual> 
        				<isEqual property="ppkType" compareValue="TN">
        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
        				</isEqual>        				
                  </isNotEmpty>		
			) WHERE region IS NOT NULL group by region
	</select>
	<select id="sqlFetchCargoLyingSummaryDtlsULD" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO">
		SELECT 
			GT.DEST dest, SUM(GT.NON_PMAN_PCS) totPc, SUM(GT.NON_PMAN_WT) totWt, COUNT(GT.AWB_NO) totAWBNo 
		FROM GT_EXP_LYING_LIST GT
			LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
		        JOIN (
		          SELECT uld.uld_key ,uld.contr_code, inv.awb_no, inv.awb_date , inv.uld_pcs, inv.uld_wt
		          FROM ULD_INVENTORY uld
		              JOIN
		                (SELECT awb_no, awb_date,uld_key, SUM(locn_pcs) uld_pcs, SUM(locn_wt) uld_wt
		                  FROM awb_inventory i
		                  where not (nvl(LENGTH(flt_key),0) &gt; 0 AND UPPER(flt_type) = 'E')
		                  AND uld_key is not null
		                  GROUP BY awb_no, awb_date,uld_key) inv on inv.uld_key = uld.uld_key AND (uld.handling_mode IN ('NBK','PPK') OR NVL(mix_ppk_ind,'N') = 'Y' OR NVL(ppk_ind,'N') = 'Y') 
		        ) uldinfo ON uldinfo.awb_no = GT.AWB_NO AND uldinfo.AWB_DATE = GT.AWB_DATE        
		        WHERE 1 = 1  
		                  <isNotEmpty prepend="AND" property="ppkType">                       
		        				<isEqual property="ppkType" compareValue="B">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="P">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="M">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="TP">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="TN">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
		        				</isEqual>        				
		                  </isNotEmpty>  
		                    <isNotEmpty prepend="AND" property="fltKey">
				   			GT.FLT_KEY = #fltKey#
							</isNotEmpty>
			 GROUP BY GT.DEST
         	</select>
		<select id="sqlFetchCargoLyingSummaryRegionDtlsULD" parameterClass="cargo.cms.export.bo.CargoLyingSearchBO" resultClass="cargo.cms.export.bo.CargoInventoryBO">
		SELECT region region,COUNT(awbNo) totAWBNo,
				SUM(nonPmfstPc) AS totPc,
				SUM(nonPmfstWt) AS totWt  FROM 
		  ( SELECT
		(SELECT CODE_DESC FROM MAST_REGION WHERE CODE IN (
		        SELECT REG_CODE FROM MAST_COUNTRY WHERE CODE IN (
		        SELECT city.ctry_code FROM MAST_CITY CITY,MAST_ARPT ARPT WHERE 
		        CITY.CODE = ARPT.CITY_CODE AND ARPT.CODE = GT.DEST
		        )) AND ROWNUM=1) region,
         GT.NON_PMAN_PCS nonPmfstPc, GT.NON_PMAN_WT nonPmfstWt, GT.AWB_NO awbNo 
		FROM GT_EXP_LYING_LIST GT
			LEFT JOIN EXP_CAR CAR ON GT.AWB_NO = CAR.AWB_NO AND GT.AWB_DATE = CAR.AWB_DATE
		        JOIN (
		          SELECT uld.uld_key ,uld.contr_code, inv.awb_no, inv.awb_date , inv.uld_pcs, inv.uld_wt
		          FROM ULD_INVENTORY uld
		              JOIN
		                (SELECT awb_no, awb_date,uld_key, SUM(locn_pcs) uld_pcs, SUM(locn_wt) uld_wt
		                  FROM awb_inventory i
		                  where not (nvl(LENGTH(flt_key),0) &gt; 0 AND UPPER(flt_type) = 'E')
		                  AND uld_key is not null
		                  GROUP BY awb_no, awb_date,uld_key) inv on inv.uld_key = uld.uld_key AND (uld.handling_mode IN ('NBK','PPK') OR NVL(mix_ppk_ind,'N') = 'Y' OR NVL(ppk_ind,'N') = 'Y') 
		        ) uldinfo ON uldinfo.awb_no = GT.AWB_NO AND uldinfo.AWB_DATE = GT.AWB_DATE        
		        WHERE 1 = 1 
<isNotEmpty prepend="AND" property="fltKey">
				   		  GT.FLT_KEY = #fltKey#
						  </isNotEmpty> 
		                  <isNotEmpty prepend="AND" property="ppkType">                       
		        				<isEqual property="ppkType" compareValue="B">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'BULK') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="P">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'PPK') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="M">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'MIX') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="TP">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TPK') &gt; 0
		        				</isEqual> 
		        				<isEqual property="ppkType" compareValue="TN">
		        					instr(FUN_GET_AWB_PKG_TYPE(GT.AWB_NO,to_char(GT.AWB_DATE,'DDMONYY')),'TNB') &gt; 0
		        				</isEqual>        				
		                  </isNotEmpty>  
			 ) WHERE region IS NOT NULL group by region
	</select>
	
	<!-- ##################### Export Cargo lying list    : End      ###############################################-->
	
	<!-- ##################### PreManifest : Start     ###############################################-->

<select id="sqlEDMPFltHeaderDetails" parameterClass="cargo.cms.export.bo.ExpFlightBO"  resultClass="cargo.cms.export.bo.ExpFlightBO">
SELECT CARR_CODE AS fltPfx,TO_CHAR(SCH_DATE,'YYYY-MM-DD') AS fltDate,FLT_NO AS fltNo FROM FLT_OPR WHERE FLT_KEY=#fltNo# AND SCH_DATE=#fltDate# AND FLT_TYPE='D'
</select>

	<select id="sqlQueryFltDetails" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.ExpFlightBO">
					
	SELECT T1.FLT_KEY as fltNo,to_char(T1.SCH_DATE,'DDMONYY')
	as fltDate,
	 PKG_COMMON.get_flt_eta(T1.FLT_KEY, TO_DATE(#depDate#, 'DDMONYY'), 'D', 'DD') AS etd,
	 PKG_EXP_RPT.FLT_PORTS(#fltNo# ,#depDate#) 
	as portOfCall,T1.ACFT_REG_NO as acftRegn,T1.ACFT_TYPE 
	as acftType,
	SUBSTR(TRIM(TO_CHAR(NVL(T1.SCH_TIME,0),'0000')),0,2)|| ':'||  
	 SUBSTR(TRIM(TO_CHAR(NVL(T1.SCH_TIME,0),'0000')),3,4)
	as std,
	PKG_COMMON.get_flt_ata(T1.FLT_KEY, TO_DATE(#depDate#, 'DDMONYY'), 'D', 'DD') AS ata,	
    <!-- decode(T1.act_time, '', null, substr(lpad(T1.act_time, 4, 0), 1, 2)||
    ':'||substr(T1.act_time, -2))
	 as ata , -->
	T2.FLT_CLS_YN as fltCls  
      FROM FLT_OPR T1,FLT_OPR_EVENTS T2 
       WHERE T1.FLT_KEY=#fltNo#  
			 AND TRUNC(T1.SCH_DATE) = TO_DATE(#depDate#, 'DDMONYY')
			 AND T1.TR_NO = T2.TR_NO
			 AND T1.FLT_TYPE='D'
			 AND rownum=1
	
	</select>

	   <parameterMap id="preManifestListMap" class="map" >
           <parameter property="RESULT" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
		   <parameter property="fltNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		   <parameter property="depDate" jdbcType="VARCHAR" javaType="java.lang.String"	mode="IN"/>
		   <parameter property="splCode" jdbcType="VARCHAR" javaType="java.lang.String"	mode="IN"/>
		   <parameter property="outstandingShipment" jdbcType="VARCHAR" javaType="java.lang.String"	mode="IN"/>
		   <parameter property="tarmacShipment" jdbcType="VARCHAR" javaType="java.lang.String"	mode="IN"/>
		   <parameter property="allShipment" jdbcType="VARCHAR" javaType="java.lang.String"	mode="IN"/>
		   <parameter property="splCode2" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		   <parameter property="splCode3" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		   <parameter property="splCode4" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		   <parameter property="splCode5" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		   <parameter property="splCode6" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		   <parameter property="uniqueId" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		</parameterMap>
		 <procedure id="premanifestflightsearchlist" parameterMap="preManifestListMap" >

		     {? = call PKG_EXP_RPT.rpt_Preman_list(?,?,?,?,?,?,?,?,?,?,?,?)  }

	     </procedure>

<select id="sqlfetchedmpheaderseq" parameterClass="java.lang.String" resultClass="java.lang.String">
	     SELECT TRIM(EXP_EDMP_HD_SEQ.NEXTVAL) FROM DUAL
	     </select>
	     <select id="checkForEDMPvalidFlight"  parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	   	 <![CDATA[
	    	SELECT COUNT(1) FROM flt_opr a where a.flt_key=#fltKey# AND A.SCH_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE='D'
	   	 ]]>
	 	</select>
<select id="sqlfetchCountedmpheader" parameterClass="cargo.cms.export.bo.ExpFlightBO" resultClass="java.lang.String">
		SELECT TR_NO FROM EXP_EDMP_HD
		WHERE FLT_KEY=#fltNo# AND FLT_DATE=#fltDate# AND AWB_NO=#awbNo1# AND AWB_DATE=#awbDate#		
		</select>
 <insert id="insertedmpheader" parameterClass="cargo.cms.export.bo.ExpFlightBO">
	     INSERT INTO EXP_EDMP_HD(TR_NO,FLT_KEY,FLT_DATE,AWB_NO,AWB_DATE,EDMP_CODE,EDMP_PC,EDMP_WT,EDMP_RMK,EDMP_FLT_KEY,EDMP_FLT_DATE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
  		 VALUES (#trNo#,#fltNo#,#fltDate#,#awbNo1#,#awbDate#,#edmpCode#,#edmpPcs#,#edmpWt#,#edmpResn#,#edmpFltKey#,#edmpFltDate#,#userID#,SYSDATE,#userID#,SYSDATE)
	     </insert>	  
 <select id="sqlfetchCountedmpdetail" parameterClass="cargo.cms.export.bo.ExpFlightBO" resultClass="java.lang.String">
		SELECT TR_NO FROM EXP_EDMP_DTL WHERE TR_NO	=	#trNo#	and	ULD_KEY = #uldNo#		
		</select>  
	<select id="sqlfetchCountedmpdetailwithoutuld" parameterClass="cargo.cms.export.bo.ExpFlightBO" resultClass="java.lang.String">
		SELECT TR_NO FROM EXP_EDMP_DTL WHERE TR_NO	=	#trNo#		
		</select>
	<select id="checkeExistEDMpCode" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT MSG_EDMP_CODE FROM EXP_EDMP_HD WHERE TR_NO	=	#trNo#		
		</select>
<delete id="sqlDeleteedmpheader" parameterClass="cargo.cms.export.bo.ExpFlightBO">
		DELETE FROM EXP_EDMP_HD WHERE TR_NO	=	#trNo#
		</delete>
<delete id="sqlDeleteedmpDetail" parameterClass="cargo.cms.export.bo.ExpFlightBO">
		DELETE FROM EXP_EDMP_DTL WHERE TR_NO	=	#trNo# and ULD_KEY = #uldNo#
		</delete>
<insert id="inserdatatotedmpdetail" parameterClass="cargo.cms.export.bo.ExpFlightBO">
			INSERT INTO EXP_EDMP_DTL(TR_NO,ULD_KEY,EDMP_CODE,EDMP_PC,EDMP_WT,EDMP_RMK,EDMP_FLT_KEY,EDMP_FLT_DATE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
  			VALUES (#trNo#,#uldNo#,#edmpCode#,#edmpPcs#,#edmpWt#,#edmpResn#,#edmpFltKey#,#edmpFltDate#,#userID#,SYSDATE,#userID#,SYSDATE)
	     </insert>
 <update id="sqlUpdateedmpheader" parameterClass="cargo.cms.export.bo.ExpFlightBO">
			UPDATE EXP_EDMP_HD 
				SET 
				EDMP_CODE		=	#edmpCode#,
				EDMP_PC		=	#edmpPcs#,
				EDMP_WT		=	#edmpWt#,
				EDMP_RMK = #edmpResn#,
				EDMP_FLT_KEY = #edmpFltKey#,
				EDMP_FLT_DATE = #edmpFltDate#,
				LM_USER_ID	=	#userID#,
				LM_DATE		=	SYSDATE
				WHERE
				TR_NO	=	#trNo#				
		</update>
	<update id="sqlUpdateedmpcodeintoheader" parameterClass="java.util.HashMap">
			UPDATE EXP_EDMP_HD 
				SET 
				MSG_EDMP_CODE		=	#edmpCode#
				WHERE
				TR_NO	=	#trNo#				
	</update>
  <update id="sqlUpdateedmpdetail" parameterClass="cargo.cms.export.bo.ExpFlightBO">
			UPDATE EXP_EDMP_DTL 
				SET 
				EDMP_CODE		=	#edmpCode#,
				EDMP_PC		=	#edmpPcs#,
				EDMP_WT		=	#edmpWt#,
				EDMP_RMK = #edmpResn#,
				EDMP_FLT_KEY = #edmpFltKey#,
				EDMP_FLT_DATE = #edmpFltDate#,
				LM_USER_ID	=	#userID#,
				LM_DATE		=	SYSDATE
				WHERE
				TR_NO	=	#trNo#	and
				ULD_KEY = #uldNo#							
		</update>


	<select id="checkedmphdExist" parameterClass="cargo.cms.export.bo.ExpFlightBO"  resultClass="java.lang.Integer">
		<![CDATA[
				 SELECT COUNT(1) FROM EXP_EDMP_HD WHERE FLT_KEY=#fltNo# AND FLT_DATE=#fltDate# AND AWB_NO=#awbNo1# AND AWB_DATE=#awbDate#
		 ]]>
		</select>
	<select id="checkedmpdtlExist" parameterClass="cargo.cms.export.bo.ExpFlightBO"  resultClass="java.lang.Integer">
		<![CDATA[
				 SELECT COUNT(1) FROM EXP_EDMP_HD HD, EXP_EDMP_DTL DTL WHERE DTL.TR_NO = HD.TR_NO  HD.FLT_KEY=#fltNo# AND HD.FLT_DATE=#fltDate# AND HD.AWB_NO=#awbNo1# AND HD.AWB_DATE=#awbDate# AND DTL.ULD_KEY=#uldNo#
		 ]]>
		</select>
<select id="premanifestEdmplist" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="cargo.cms.export.bo.ExpFlightBO" >
	    SELECT * FROM (		
		SELECT  1 dispOrd,'FBL' as type,CONCAT(CONCAT(SUBSTR(t1.awb_no,0,3),'-'),SUBSTR(t1.awb_no,4)) awbNo, 
		t1.AWB_NO awbNo1,
		TO_CHAR(t1.AWB_DATE,'DDMONYY') as awbDate, 
		pkg_exp_val.get_exp_awb_cc_code(#fltNo#, #fltDate#, t1.awb_no) AS cccode,
		t1.ORG orig, 
		t1.DEST dest,
		upper(t1.MAN_DESC) content,
    	(SELECT STRAGG(STRINGDELIM(shp_trf_type, ',')) FROM (SELECT distinct V.shp_trf_type from V_DDT_DTL v WHERE 
        v.SHP_CNTG_FLT_KEY= #fltNo# and v.SHP_CNTG_FLT_DATE=#fltDate# 
        and v.awb_no=t1.awb_no and v.awb_date=t1.AWB_DATE)) AS transferType,
        (decode(nvl(t7.spl_code1,t1.spl_code1),NULL,'',nvl(t7.spl_code1,t1.spl_code1))
        ||decode(nvl(t7.spl_code2,t1.spl_code2),NULL,'',','||nvl(t7.spl_code2,t1.spl_code2))
        ||decode(nvl(t7.spl_code3,t1.spl_code3),NULL,'',','||nvl(t7.spl_code3,t1.spl_code3))
        ||decode(nvl(t7.spl_code4,t1.spl_code4),NULL,'',', '||nvl(t7.spl_code4,t1.spl_code4))
        ||decode(nvl(t7.spl_code5,t1.spl_code5),NULL,'',','||nvl(t7.spl_code5,t1.spl_code5))
        ||decode(nvl(t7.spl_code6,t1.spl_code6),NULL,'',','||nvl(t7.spl_code6,t1.spl_code6))
        ||decode(nvl(t7.spl_code7,t1.spl_code7),NULL,'',', '||nvl(t7.spl_code7,t1.spl_code7))
        ||decode(nvl(t7.spl_code8,t1.spl_code8),NULL,'',','||nvl(t7.spl_code8,t1.spl_code8))
        ||decode(nvl(t7.spl_code9,t1.spl_code9),NULL,'',','||nvl(t7.spl_code9,t1.spl_code9))) splcode,
        nvl((select pcs from awb where awb_no=t1.awb_no and awb_date=t1.awb_date),0) awbPCs,
        nvl((select wt from awb where awb_no=t1.awb_no and awb_date=t1.awb_date),0) edmwt,  
        0 manfPC,
        0 edmpmanWt,
        t1.PCS fblPcs, 
        t1.NET_WT fblWt, 
        0 buPcs,
        0 edmbuWt,
    0 rmngPcs,
    0 rmngWt,
    0 offldPcs,
    0 offldWt,
    edmp.EDMP_CODE AS edmpCode,
    edmp.EDMP_PC AS edmpPcs,
    edmp.EDMP_WT AS edmpWt,
    edmp.EDMP_CODE as oldEdmpCode,
    edmp.EDMP_PC as oldEdmpPcs,
    edmp.EDMP_WT as oldEdmpWt,
    edmp.EDMP_RMK as edmpResn,
    edmp.EDMP_FLT_KEY as edmpFltKey,
    to_char(edmp.edmp_flt_date,'DDMONYY') as edmpFltDate,
    edmp.EDMP_RMK as oldEdmpResn,
    edmp.EDMP_FLT_KEY as oldEdmpFltKey,
    to_char(edmp.edmp_flt_date,'DDMONYY') as oldEdmpFltDate,
    (SELECT A1.AWB_TYPE FROM AWB A1 WHERE A1.AWB_NO = t1.AWB_NO AND A1.AWB_DATE = t1.AWB_DATE) docAccptStatus
     	FROM  edi_fbl_shp t1
	    join edi_fbl t2 on t2.tr_no = t1.tr_no
      LEFT JOIN awb t7 on t7.awb_no=t1.awb_no and t7.awb_date=t1.awb_date
      left join EXP_EDMP_HD edmp on edmp.flt_key = #fltNo# and edmp.flt_date=#fltDate# and edmp.awb_no=t1.awb_no and edmp.awb_date=t1.awb_date
      where t2.flt_key=#fltNo# and t2.flt_date=#fltDate# and t2.fbl_status='P' AND t1.AWB_NO IS NOT NULL
      AND NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.AWB_NO=t1.awb_no AND PMAN.AWB_DATE=t1.awb_date and PMAN.flt_key=t2.flt_key and PMAN.flt_date=t2.flt_date)
      AND NOT EXISTS (SELECT NULL FROM EXP_PMAN_TARMAC_AWB PMAN WHERE PMAN.AWB_NO=t1.awb_no AND PMAN.AWB_DATE=t1.awb_date and PMAN.flt_key=t2.flt_key and PMAN.flt_date=t2.flt_date)
      AND NOT EXISTS (SELECT NULL FROM EXP_offload_uld_AWB offload WHERE offload.AWB_NO=t1.awb_no AND offload.AWB_DATE=t1.awb_date and offload.flt_key=t2.flt_key and offload.flt_date=t2.flt_date)
      UNION     
      SELECT 2 dispOrd,'PMAN' as type,CONCAT(CONCAT(SUBSTR(t1.AWB_NO,0,3),'-'),SUBSTR(t1.AWB_NO,4)) awbNo,
		t1.AWB_NO awbNo1, 
    TO_CHAR(t1.AWB_DATE,'DDMONYY') awbDate,
    t1.CC_CODE cccode,
    t1.ORIGIN orig,
    t1.DEST dest,
	  upper(t2.CONTENT) content,
    (SELECT STRAGG(STRINGDELIM(shp_trf_type, ',')) FROM (SELECT distinct V.shp_trf_type from V_DDT_DTL v WHERE 
        v.SHP_CNTG_FLT_KEY= #fltNo# and v.SHP_CNTG_FLT_DATE=#fltDate# 
        and v.awb_no=t1.awb_no and v.awb_date=t1.AWB_DATE)) AS transferType,
    t1.SPL_CODE splcode,
		t1.AWB_PCS awbPCs,
    t1.AWB_WT edmwt,
    t1.PMAN_PCS manfPC,
    t1.PMAN_WT edmpmanWt,
    t1.FBL_PCS fblPcs,
    t1.FBL_WT fblWt, 
    t1.BLDUP_PCS buPcs,
    t1.BLDUP_WT edmbuWt,
    t1.RMNG_PCS rmngPcs,
    t1.RMNG_WT rmngWt,
    t1.OFFLD_PCS offldPcs,
    t1.OFFLD_WT offldWt,
    edmp.EDMP_CODE AS edmpCode,
    edmp.EDMP_PC AS edmpPcs,
    edmp.EDMP_WT AS edmpWt,
    edmp.EDMP_CODE as oldEdmpCode,
    edmp.EDMP_PC as oldEdmpPcs,
    edmp.EDMP_WT as oldEdmpWt,
    edmp.EDMP_RMK as edmpResn,
    edmp.EDMP_FLT_KEY as edmpFltKey,
    to_char(edmp.edmp_flt_date,'DDMONYY') as edmpFltDate,
    edmp.EDMP_RMK as oldEdmpResn,
    edmp.EDMP_FLT_KEY as oldEdmpFltKey,
    to_char(edmp.edmp_flt_date,'DDMONYY') as oldEdmpFltDate,
    (SELECT A1.AWB_TYPE FROM AWB A1 WHERE A1.AWB_NO = t1.AWB_NO AND A1.AWB_DATE = t1.AWB_DATE) docAccptStatus
	FROM 
       	gt_exp_pmanifest_list t1
        join flt_opr_leg t3
        on t3.flt_key = t1.flt_key
        and t3.sch_Date = t1.flt_date and t3.FLT_TYPE = 'D'
        and t1.unldg_pt = t3.off_point
        join awb t2 on t1.AWB_NO = t2.AWB_NO and TO_CHAR(t1.AWB_DATE,'DDMONYY') = TO_CHAR(t2.AWB_DATE,'DDMONYY') 
        left join EXP_EDMP_HD edmp on edmp.flt_key = #fltNo# and edmp.flt_date=#fltDate# and edmp.awb_no=t1.awb_no and edmp.awb_date=t1.awb_date
        WHERE 
        t1.flt_key = #fltNo#
        and t1.flt_date = to_date(#fltDate#,'DDMONYY')
        and (NVL(t1.BLDUP_PCS,0) = 0 and NVL(t1.OFFLD_PCS,0) = 0)
    union
        SELECT 3 dispOrd,'BUP' as type,CONCAT(CONCAT(SUBSTR(t1.AWB_NO,0,3),'-'),SUBSTR(t1.AWB_NO,4)) awbNo,
		t1.AWB_NO awbNo1, 
    	TO_CHAR(t1.AWB_DATE,'DDMONYY') awbDate,
    	t1.CC_CODE cccode,
    	t1.ORIGIN orig,
    	t1.DEST dest,
	  	upper(t2.CONTENT) content,
    	(SELECT STRAGG(STRINGDELIM(shp_trf_type, ',')) FROM (SELECT distinct V.shp_trf_type from V_DDT_DTL v WHERE 
        v.SHP_CNTG_FLT_KEY= #fltNo# and v.SHP_CNTG_FLT_DATE=#fltDate# 
        and v.awb_no=t1.awb_no and v.awb_date=t1.AWB_DATE)) AS transferType,
    	t1.SPL_CODE splcode,
		t1.AWB_PCS awbPCs,
    	t1.AWB_WT edmwt,
    	t1.PMAN_PCS manfPC,
    	t1.PMAN_WT edmpmanWt,
		t1.FBL_PCS fblPcs,
    	t1.FBL_WT fblWt, 
    	t1.BLDUP_PCS buPcs,
    	t1.BLDUP_WT edmbuWt,
    	t1.RMNG_PCS rmngPcs,
    	t1.RMNG_WT rmngWt,
     	t1.OFFLD_PCS offldPcs,
    	t1.OFFLD_WT offldWt,
      edmp.EDMP_CODE AS edmpCode,
    edmp.EDMP_PC AS edmpPcs,
    edmp.EDMP_WT AS edmpWt,
    edmp.EDMP_CODE as oldEdmpCode,
    edmp.EDMP_PC as oldEdmpPcs,
    edmp.EDMP_WT as oldEdmpWt,
    edmp.EDMP_RMK as edmpResn,
    edmp.EDMP_FLT_KEY as edmpFltKey,
    to_char(edmp.edmp_flt_date,'DDMONYY') as edmpFltDate,
    edmp.EDMP_RMK as oldEdmpResn,
    edmp.EDMP_FLT_KEY as oldEdmpFltKey,
    to_char(edmp.edmp_flt_date,'DDMONYY') as oldEdmpFltDate,
    	(SELECT A1.AWB_TYPE FROM AWB A1 WHERE A1.AWB_NO = t1.AWB_NO AND A1.AWB_DATE = t1.AWB_DATE) docAccptStatus
		FROM 
       	gt_exp_pmanifest_list t1
        join flt_opr_leg t3
        on t3.flt_key = t1.flt_key
        and t3.sch_Date = t1.flt_date and t3.FLT_TYPE = 'D'
        and t1.unldg_pt = t3.off_point
        join awb t2 on t1.AWB_NO = t2.AWB_NO and TO_CHAR(t1.AWB_DATE,'DDMONYY') = TO_CHAR(t2.AWB_DATE,'DDMONYY') 
        left join EXP_EDMP_HD edmp on edmp.flt_key = #fltNo# and edmp.flt_date=#fltDate# and edmp.awb_no= t2.AWB_NO and edmp.awb_date=t1.AWB_DATE
     	WHERE 
        t1.flt_key = #fltNo#
        and t1.flt_date = to_date(#fltDate#,'DDMONYY')
        and (NVL(t1.BLDUP_PCS,0) > 0 and  NVL(t1.PMAN_PCS,0) > 0 AND NVL(t1.OFFLD_PCS,0) = 0)
        UNION
        SELECT 4 dispOrd,'PARTIALOFFLD' as type,CONCAT(CONCAT(SUBSTR(t1.AWB_NO,0,3),'-'),SUBSTR(t1.AWB_NO,4)) awbNo,
		t1.AWB_NO awbNo1, 
    TO_CHAR(t1.AWB_DATE,'DDMONYY') awbDate,
    t1.CC_CODE cccode,
    t1.ORIGIN orig,
    t1.DEST dest,
	  upper(t2.CONTENT) content,
    (SELECT STRAGG(STRINGDELIM(shp_trf_type, ',')) FROM (SELECT distinct V.shp_trf_type from V_DDT_DTL v WHERE 
        v.SHP_CNTG_FLT_KEY= #fltNo# and v.SHP_CNTG_FLT_DATE=#fltDate# 
        and v.awb_no=t1.awb_no and v.awb_date=t1.AWB_DATE)) AS transferType,
    t1.SPL_CODE splcode,
		t1.AWB_PCS awbPCs,
    t1.AWB_WT edmwt,
    t1.PMAN_PCS manfPC,
    t1.PMAN_WT edmpmanWt,
		t1.FBL_PCS fblPcs,
    t1.FBL_WT fblWt, 
    t1.BLDUP_PCS buPcs,
    t1.BLDUP_WT edmbuWt,
    t1.RMNG_PCS rmngPcs,
    t1.RMNG_WT rmngWt,
     t1.OFFLD_PCS offldPcs,
    t1.OFFLD_WT offldWt,
    edmp.EDMP_CODE AS edmpCode,
    edmp.EDMP_PC AS edmpPcs,
    edmp.EDMP_WT AS edmpWt,
    edmp.EDMP_CODE as oldEdmpCode,
    edmp.EDMP_PC as oldEdmpPcs,
    edmp.EDMP_WT as oldEdmpWt,
    edmp.EDMP_RMK as edmpResn,
    edmp.EDMP_FLT_KEY as edmpFltKey,
    to_char(edmp.edmp_flt_date,'DDMONYY') as edmpFltDate,
    edmp.EDMP_RMK as oldEdmpResn,
    edmp.EDMP_FLT_KEY as oldEdmpFltKey,
    to_char(edmp.edmp_flt_date,'DDMONYY') as oldEdmpFltDate,
    (SELECT A1.AWB_TYPE FROM AWB A1 WHERE A1.AWB_NO = t1.AWB_NO AND A1.AWB_DATE = t1.AWB_DATE) docAccptStatus
		FROM 
       	gt_exp_pmanifest_list t1
        join flt_opr_leg t3
        on t3.flt_key = t1.flt_key
        and t3.sch_Date = t1.flt_date and t3.FLT_TYPE = 'D'
        and t1.unldg_pt = t3.off_point
        join awb t2
        on t1.AWB_NO = t2.AWB_NO 
        and TO_CHAR(t1.AWB_DATE,'DDMONYY') = TO_CHAR(t2.AWB_DATE,'DDMONYY') 
        left join EXP_EDMP_HD edmp on edmp.flt_key = #fltNo# and edmp.flt_date=#fltDate# and edmp.awb_no=t1.awb_no and edmp.awb_date=t1.awb_date
     	WHERE 
        t1.flt_key = #fltNo#
        and t1.flt_date = to_date(#fltDate#,'DDMONYY')
        and (NVL(t1.BLDUP_PCS,0) > 0 and  NVL(t1.PMAN_PCS,0) > 0 AND NVL(t1.OFFLD_PCS,0) > 0)
        UNION
        SELECT  5 dispOrd,'OFFLOAD' as type,CONCAT(CONCAT(SUBSTR(t1.awb_no,0,3),'-'),SUBSTR(t1.awb_no,4)) awbNo, 
t1.AWB_NO awbNo1,
TO_CHAR(t1.AWB_DATE,'DDMONYY') as awbDate, 
pkg_exp_val.get_exp_awb_cc_code(#fltNo#, #fltDate#, t1.awb_no) AS cccode,
t7.ORIG orig, 
t7.DEST dest,
upper(t7.content) content,
    (SELECT STRAGG(STRINGDELIM(shp_trf_type, ',')) FROM (SELECT distinct V.shp_trf_type from V_DDT_DTL v WHERE 
        v.SHP_CNTG_FLT_KEY= #fltNo# and v.SHP_CNTG_FLT_DATE=#fltDate# 
        and v.awb_no=t1.awb_no and v.awb_date=t1.AWB_DATE)) AS transferType,
        (decode(t7.spl_code1,NULL,'',t7.spl_code1)
        ||decode(t7.spl_code2,NULL,'',','||t7.spl_code2)
        ||decode(t7.spl_code3,NULL,'',','||t7.spl_code3)
        ||decode(t7.spl_code4,NULL,'',','||t7.spl_code4)
        ||decode(t7.spl_code5,NULL,'',','||t7.spl_code5)
        ||decode(t7.spl_code6,NULL,'',','||t7.spl_code6)
        ||decode(t7.spl_code7,NULL,'',','||t7.spl_code7)
        ||decode(t7.spl_code8,NULL,'',','||t7.spl_code8)
        ||decode(t7.spl_code9,NULL,'',','||t7.spl_code9)) splcode,
        nvl(t7.PCS,0) awbPCs,
        nvl(t7.WT,0) edmwt,  
        0 manfPC,
        0 edmpmanWt,
        fbl.pcs fblPcs, 
        fbl.net_wt fblWt, 
        0 buPcs,
        0 edmbuWt,
    0 rmngPcs,
    0 rmngWt,
    t1.offload_pcs offldPcs,
    t1.offload_wt offldWt,
    edmp.EDMP_CODE AS edmpCode,
    edmp.EDMP_PC AS edmpPcs,
    edmp.EDMP_WT AS edmpWt,
    edmp.EDMP_CODE as oldEdmpCode,
    edmp.EDMP_PC as oldEdmpPcs,
    edmp.EDMP_WT as oldEdmpWt,
    edmp.EDMP_RMK as edmpResn,
    edmp.EDMP_FLT_KEY as edmpFltKey,
    to_char(edmp.edmp_flt_date,'DDMONYY') as edmpFltDate,
    edmp.EDMP_RMK as oldEdmpResn,
    edmp.EDMP_FLT_KEY as oldEdmpFltKey,
    to_char(edmp.edmp_flt_date,'DDMONYY') as oldEdmpFltDate,
    (SELECT A1.AWB_TYPE FROM AWB A1 WHERE A1.AWB_NO = t1.AWB_NO AND A1.AWB_DATE = t1.AWB_DATE) docAccptStatus
     	FROM  (SELECT OFFLOAD.FLT_KEY,OFFLOAD.FLT_DATE,OFFLOAD.AWB_NO,OFFLOAD.AWB_DATE,SUM(OFFLOAD_PCS) OFFLOAD_PCS,SUM(OFFLOAD_WT) OFFLOAD_WT FROM EXP_OFFLOAD_ULD_AWB OFFLOAD WHERE 
      OFFLOAD.FLT_KEY=#fltNo# AND OFFLOAD.FLT_DATE=#fltDate# AND offload.offload_pcs IS NOT NULL
      AND OFFLOAD.CONFIRMED_DATE IS NOT NULL AND NVL(OFFLOAD.CONFIRMED_YN,'N') = 'Y'
      GROUP BY OFFLOAD.FLT_KEY,OFFLOAD.FLT_DATE,OFFLOAD.AWB_NO,OFFLOAD.AWB_DATE) t1
	    JOIN awb t7 on t7.awb_no=t1.awb_no and t7.awb_date=t1.awb_date    
      left join EXP_EDMP_HD edmp on edmp.flt_key = #fltNo# and edmp.flt_date=#fltDate# and edmp.awb_no=t1.awb_no and edmp.awb_date=t1.awb_date
      left join (SELECT t1.awb_no,t1.awb_date,t1.pcs,t1.net_wt FROM edi_fbl_shp t1
      join edi_fbl t2 on t2.tr_no = t1.tr_no WHERE T2.FLT_KEY=#fltNo# AND T2.FLT_DATE=#fltDate#) fbl on fbl.awb_no = t1.awb_no and fbl.awb_date=t1.awb_date

      where t1.flt_key=#fltNo# and t1.flt_date=#fltDate#
      AND NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.AWB_NO=t1.awb_no AND PMAN.AWB_DATE=t1.awb_date and PMAN.flt_key=t1.flt_key and PMAN.flt_date=t1.flt_date)
      AND EXISTS (SELECT NULL FROM EXP_offload_uld_AWB offload WHERE offload.AWB_NO=t1.awb_no AND offload.AWB_DATE=t1.awb_date and offload.flt_key=t1.flt_key and offload.flt_date=t1.flt_date)
      ) WHERE 1=1 
      <isEqual property="notIncludeFBL" compareValue="Y">
      <![CDATA[
      AND (fblPcs is null or fblPcs = 0)
      ]]>
      </isEqual>
       <isEqual property="withFBL" compareValue="Y">
      <![CDATA[
      AND fblPcs > 0
      ]]>
      </isEqual>      
      ORDER BY dispOrd  
    </select>
<select id="premanifestEdmpULDlist" parameterClass="cargo.cms.export.bo.ExpFlightBO" resultClass="cargo.cms.export.bo.ExpFlightBO" >
    SELECT * 
		FROM (
			SELECT
	        PMAN.ULD_BT_NO uldNo,
          PMAN.ASSIGNED_PCS as buPcs,
          PMAN.ASSIGNED_WT as edmbuWt,
          0 as offldPcs,
          0 as offldWt,
          edmp.EDMP_CODE AS edmpCode,
          edmp.EDMP_PC AS edmpPcs,
          edmp.EDMP_WT AS edmpWt,
          edmp.EDMP_CODE as oldEdmpCode,
          edmp.EDMP_PC as oldEdmpPcs,
          edmp.EDMP_WT as oldEdmpWt,
          edmp.EDMP_RMK as edmpResn,
          edmp.EDMP_FLT_KEY as edmpFltKey,
          to_char(edmp.edmp_flt_date,'DDMONYY') as edmpFltDate
	    FROM
		  EXP_PMANIFEST_ULD_AWB PMAN
      LEFT JOIN (SELECT DTL.ULD_KEY,DTL.EDMP_CODE,DTL.EDMP_PC,DTL.EDMP_WT,DTL.EDMP_RMK,DTL.EDMP_FLT_KEY,DTL.EDMP_FLT_DATE FROM EXP_EDMP_HD HD,
       EXP_EDMP_DTL DTL WHERE DTL.TR_NO = HD.TR_NO AND HD.FLT_KEY=#fltNo# AND HD.FLT_DATE=#fltDate#
       AND HD.AWB_NO=#awbNo1# AND HD.AWB_DATE=#awbDate#) edmp ON edmp.uld_key = PMAN.ULD_BT_NO
		  WHERE
		    PMAN.FLT_KEY = #fltNo#
		    and PMAN.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		    and PMAN.AWB_NO = #awbNo1#
		    and PMAN.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
      UNION 
      SELECT
	        PMAN.ULD_BT_NO uldNo,
          PMAN.ASSIGNED_PCS as buPcs,
          PMAN.ASSIGNED_WT as edmbuWt,
          0 as offldPcs,
          0 as offldWt,
          edmp.EDMP_CODE AS edmpCode,
          edmp.EDMP_PC AS edmpPcs,
          edmp.EDMP_WT AS edmpWt,
          edmp.EDMP_CODE as oldEdmpCode,
          edmp.EDMP_PC as oldEdmpPcs,
          edmp.EDMP_WT as oldEdmpWt,
          edmp.EDMP_RMK as edmpResn,
          edmp.EDMP_FLT_KEY as edmpFltKey,
          to_char(edmp.edmp_flt_date,'DDMONYY') as edmpFltDate
		  FROM
		  EXP_PMAN_TARMAC_ULD_AWB PMAN
      LEFT JOIN (SELECT DTL.ULD_KEY,DTL.EDMP_CODE,DTL.EDMP_PC,DTL.EDMP_WT,DTL.EDMP_RMK,DTL.EDMP_FLT_KEY,DTL.EDMP_FLT_DATE FROM EXP_EDMP_HD HD,
       EXP_EDMP_DTL DTL WHERE DTL.TR_NO = HD.TR_NO AND HD.FLT_KEY=#fltNo# AND HD.FLT_DATE=#fltDate#
       AND HD.AWB_NO=#awbNo1# AND HD.AWB_DATE=#awbDate#) edmp ON edmp.uld_key = PMAN.ULD_BT_NO
		  WHERE
		    PMAN.FLT_KEY = #fltNo#
		    and PMAN.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		    and PMAN.AWB_NO = #awbNo1#
		    and PMAN.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		    AND NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_ULD_AWB ULDAWB WHERE ULDAWB.AWB_NO = #awbNo1# AND ULDAWB.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			  AND ULDAWB.ULD_BT_NO = PMAN.ULD_BT_NO AND FLT_KEY = #fltNo# and FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY'))
        UNION
        SELECT
	        'BULK' uldNo,
          nvl(PMAN.bulk_pcs,0) as buPcs,
          nvl(PMAN.bulk_wt,0) as edmbuWt,
          0 as offldPcs,
          0 as offldWt,
          edmp.EDMP_CODE AS edmpCode,
          edmp.EDMP_PC AS edmpPcs,
          edmp.EDMP_WT AS edmpWt,
          edmp.EDMP_CODE as oldEdmpCode,
          edmp.EDMP_PC as oldEdmpPcs,
          edmp.EDMP_WT as oldEdmpWt,
          edmp.EDMP_RMK as edmpResn,
          edmp.EDMP_FLT_KEY as edmpFltKey,
          to_char(edmp.edmp_flt_date,'DDMONYY') as edmpFltDate
		  FROM
		  EXP_PMAN_TARMAC_AWB PMAN
      LEFT JOIN (SELECT DTL.ULD_KEY,DTL.EDMP_CODE,DTL.EDMP_PC,DTL.EDMP_WT,DTL.EDMP_RMK,DTL.EDMP_FLT_KEY,DTL.EDMP_FLT_DATE FROM EXP_EDMP_HD HD,
       EXP_EDMP_DTL DTL WHERE DTL.TR_NO = HD.TR_NO AND HD.FLT_KEY=#fltNo# AND HD.FLT_DATE=#fltDate#
       AND HD.AWB_NO=#awbNo1# AND HD.AWB_DATE=#awbDate#) edmp ON edmp.uld_key = 'BULK'
		  WHERE
		    PMAN.FLT_KEY = #fltNo#
		    and PMAN.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		    and PMAN.AWB_NO = #awbNo1#
		    and PMAN.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		    AND NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.AWB_NO=#awbNo1# AND PMAN.AWB_DATE=#awbDate# and PMAN.flt_key=#fltNo# and PMAN.flt_date=#fltDate#)
        AND ('TT' IN (SELECT distinct V.shp_trf_type from V_DDT_DTL v WHERE 
        v.SHP_CNTG_FLT_KEY= #fltNo# and v.SHP_CNTG_FLT_DATE=#fltDate#
        and v.awb_no=#awbNo1# and v.awb_date=#awbDate#))
        UNION
        SELECT
	        OFFLOAD.ULD_BT_NO uldNo,
          0 as buPcs,
          0 as edmbuWt,
          OFFLOAD.OFFLOAD_PCS as offldPcs,
          OFFLOAD.OFFLOAD_WT as offldWt,
          edmp.EDMP_CODE AS edmpCode,
          edmp.EDMP_PC AS edmpPcs,
          edmp.EDMP_WT AS edmpWt,
          edmp.EDMP_CODE as oldEdmpCode,
          edmp.EDMP_PC as oldEdmpPcs,
          edmp.EDMP_WT as oldEdmpWt,
          edmp.EDMP_RMK as edmpResn,
          edmp.EDMP_FLT_KEY as edmpFltKey,
          to_char(edmp.edmp_flt_date,'DDMONYY') as edmpFltDate
	    FROM
		  EXP_OFFLOAD_ULD_AWB OFFLOAD
       LEFT JOIN (SELECT DTL.ULD_KEY,DTL.EDMP_CODE,DTL.EDMP_PC,DTL.EDMP_WT,DTL.EDMP_RMK,DTL.EDMP_FLT_KEY,DTL.EDMP_FLT_DATE FROM EXP_EDMP_HD HD,
       EXP_EDMP_DTL DTL WHERE DTL.TR_NO = HD.TR_NO AND HD.FLT_KEY=#fltNo# AND HD.FLT_DATE=#fltDate#
       AND HD.AWB_NO=#awbNo1# AND HD.AWB_DATE=#awbDate#) edmp ON edmp.uld_key = OFFLOAD.ULD_BT_NO
		  WHERE
		    OFFLOAD.FLT_KEY = #fltNo#
		    and OFFLOAD.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		    and OFFLOAD.AWB_NO = #awbNo1#
		    and OFFLOAD.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		   ) order by uldNo
    </select>
	  
	<select id="premanifestAwblist" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="cargo.cms.export.bo.ExpFlightBO" >
		SELECT   CONCAT(CONCAT(SUBSTR(t1.AWB_NO,0,3),'-'),SUBSTR(t1.AWB_NO,4)) awbNo,
		
		t1.AWB_NO awbNo1, TO_CHAR(t1.AWB_DATE,'DDMONYY') awbDate, t1.ORIGIN orig,t1.DEST dest,
	    upper(t2.CONTENT) content,t1.SPL_CODE splcode,
		t1.AWB_PCS awbPCs,t1.AWB_WT wt,t1.PMAN_PCS manfPC,t1.PMAN_WT pmanWt,
		t1.CC_CODE cccode,
			(SELECT DISTINCT cc_code FROM V_CST_VSL_CC_CODE_AWB  where flt_key= t1.flt_key and flt_date= t1.flt_date and awb_no = t1.awb_no AND NVL(hawb_no, '000000000000000000') = '000000000000000000' and rownum = 1) stfsCode,
			t1.LOCN_INFO whDest,
		to_char(t1.PMAN_DATE,'DDMONYY HH24:MI') lastModDate,t1.unldg_pt unLdgPt,
       	NVL(t1.BLDUP_INSTR, (SELECT A1.AWB_RMK FROM AWB A1 WHERE A1.AWB_NO = t1.AWB_NO AND A1.AWB_DATE = t1.AWB_DATE))  remarks,
       	t1.FBL_PCS fblPcs, t1.FBL_WT fblWt, t1.RMNG_PCS rmngPcs,t1.reason reason,
       	t1.RMNG_WT rmngWt, t1.BLDUP_PCS buPcs, t1.BLDUP_WT buWt, DECODE(t2.LPPS_YN,'N','N','Y') intStatus, t2.accept_mode acceptMode,
        (SELECT A1.AWB_TYPE FROM AWB A1 WHERE A1.AWB_NO = t1.AWB_NO AND A1.AWB_DATE = t1.AWB_DATE) docAccptStatus,
        ( SELECT DECODE(COUNT(0), 0, 'N','Y')
			FROM exp_pmanifest_uld_awb_shc a
			JOIN exp_pmanifest_uld_awb b
			ON a.tr_no       = b.tr_no
			WHERE b.awb_no   = t1.AWB_NO
			AND b.AWB_DATE   = t1.AWB_DATE
			AND b.flt_key	 = t3.flt_key
			AND b.flt_date   = t3.sch_Date
			AND NVL(a.BULK_ULD_YN,'N') = 'Y'
			) 		shcSplitYN,
       	t1.tr_type trfType,
       	t1.shp_type shpType,
       	(
		  SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE = 'EXP_EPOUCH_STATUS' AND CODE = NVL(pouch.AWB_UPLIFT_STATUS, (
		    SELECT DECODE(AWB_PRINT_ORIGIN, 'Y', 'NOTUPLIFTED', 'NOTREQUIRED') 
		    FROM MAST_CITY
		    WHERE CODE = t2.DEST
		  ))
		) awbUpliftStatus, (
		  SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE = 'EXP_EPOUCH_STATUS' AND CODE = NVL(pouch.POUCH_UPLIFT_STATUS, (
		  	SELECT
		    CASE 
		    	WHEN 'EAW' IN(t2.SPL_CODE1, t2.SPL_CODE2, t2.SPL_CODE3, t2.SPL_CODE4, t2.SPL_CODE5, t2.SPL_CODE6, t2.SPL_CODE7, t2.SPL_CODE8, t2.SPL_CODE9) THEN 'NOTREQUIRED'
		    	ELSE 'NOTUPLIFTED'
		    END
			FROM DUAL
		  ))
		) pouchUplistStatus,
		FUN_GET_AWB_UPLIFT_PRIORITY(t2.AWB_NO,t2.AWB_DATE) upliftPriority
		FROM 
       	gt_exp_pmanifest_list t1
        join flt_opr_leg t3
        on t3.flt_key = t1.flt_key
        and t3.sch_Date = t1.flt_date and t3.FLT_TYPE = 'D'
        <!-- AND instr(t1.UNLOAD_INFO, t3.off_point)>0-->
        and t1.unldg_pt = t3.off_point
        join awb t2
        on t1.AWB_NO = t2.AWB_NO 
        and TO_CHAR(t1.AWB_DATE,'DDMONYY') = TO_CHAR(t2.AWB_DATE,'DDMONYY') 
        left join awb_pouch pouch on pouch.awb_no = t1.awb_no and pouch.awb_date = t1.awb_date
     	WHERE 
        t1.flt_key = #fltNo#
        and t1.flt_date = to_date(#fltDate#,'DDMONYY')
        <isNotEmpty property="unLdgPt">
        	and t1.unldg_pt = #unLdgPt#
        </isNotEmpty>
        <isEqual property="sortingBy" compareValue="By AWB">
        	order by to_number(SUBSTR(t1.AWB_NO,0,3)) ASC,SUBSTR(t1.AWB_NO,4) ASC, t1.AWB_NO ASC
        </isEqual>
        <isEqual property="sortingBy" compareValue="UnLdg Pt, BU Status">
        	order by t3.leg_ord, t1.BLDUP_PCS
        </isEqual>
        <isNotEqual property="sortingBy" compareValue="By AWB">
        <isNotEqual property="sortingBy" compareValue="UnLdg Pt, BU Status">
        	<isEqual property="sortingBy" compareValue="Shipment Flow">
        		order by t2.awb_type,t2.catalog
        	</isEqual>
        	<isNotEqual property="sortingBy" compareValue="Shipment Flow">
        		order by t1.PMAN_DATE
        	</isNotEqual>
        </isNotEqual>
        </isNotEqual>
    </select>

    <select id="getUldkeys_LPMAN" parameterClass="map" resultClass="cargo.cms.export.bo.ExpFlightBO">
    		SELECT STRAGG(STRINGDELIM(ULDKEY,',')) uldNo,decode(count(ULDKEY),'1','Y','N') uldHiperLink FROM
			(
			SELECT ULD_KEY ULDKEY FROM AWB_INVENTORY AI WHERE AI.AWB_NO = #AWB_NO# and AI.AWB_DATE =#AWB_DATE#
			UNION
			SELECT ULD_BT_NO ULDKEY FROM EXP_PMANIFEST_ULD_AWB AI WHERE AI.AWB_NO = #AWB_NO# and AI.AWB_DATE =#AWB_DATE# 
					and AI.flt_key=#FLT_KEY# and AI.flt_Date=#FLT_DATE#
					<isNotEmpty property="UNLDG_PT">
			        	and AI.unldg_pt = #UNLDG_PT#
			        </isNotEmpty>
			UNION
			SELECT ULD_BT_NO ULDKEY FROM EXP_PMAN_TARMAC_ULD_AWB AI WHERE AI.AWB_NO = #AWB_NO# and AI.AWB_DATE =#AWB_DATE# 
					and AI.flt_key=#FLT_KEY# and AI.flt_Date=#FLT_DATE#
					<isNotEmpty property="UNLDG_PT">
			        	and AI.unldg_pt = #UNLDG_PT#
			        </isNotEmpty>
			)
   	</select>
    <select id="getUnloadingPtList_LPMAN" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="cargo.cms.export.bo.ExpFlightBO">
    		select off_point as unLdgPt from flt_opr_seg where tr_no in (
					select tr_no from flt_opr where flt_key = #fltNo#  and 
					sch_date=to_date(#fltDate#,'dd-mon-yy') and flt_type = 'D')
			and brd_point='HKG' 
    </select>
   	
<select id="inboundFlightList" parameterClass="cargo.cms.export.bo.ExpFlightBO" resultClass="cargo.cms.export.bo.ExpFlightBO" >
   SELECT t1.flt_key inbFltKey,t1.awb_no awbNo,f1.flt_type as inbFltType,
  to_char(t1.flt_date,'DDMONYY')||' '||LPAD(f1.sch_time, 4, '0') schTime
FROM v_ddt_dtl t1 join flt_opr f1 on t1.FLT_KEY = f1.flt_key
and t1.flt_date = f1.sch_date
WHERE t1.AWB_NO=#awbNo1# AND t1.SHP_CNTG_FLT_KEY  = #fltKey# AND t1.SHP_CNTG_FLT_DATE = to_date(#fltDate#,'DDMONYY')
UNION
SELECT A.flt_key inbFltKey,A.awb_no awbNo,B.flt_type as inbFltType,
to_char(A.flt_date,'DDMONYY')||' '||LPAD(B.sch_time, 4, '0') schTime
FROM IMP_CAR_SHP A,
FLT_OPR B
WHERE 
B.FLT_KEY = A.FLT_KEY AND
B.SCH_DATE = A.FLT_DATE AND
A.AWB_NO=#awbNo1# 
AND NOT EXISTS (SELECT NULL
FROM v_ddt_dtl t1 join flt_opr f1 on t1.FLT_KEY = f1.flt_key
and t1.flt_date = f1.sch_date
WHERE t1.AWB_NO=#awbNo1# AND t1.SHP_CNTG_FLT_KEY  = #fltKey# AND t1.SHP_CNTG_FLT_DATE = to_date(#fltDate#,'DDMONYY')
) order by schTime asc
</select>

    
    <select id="sqlExpPmanChkFblAwb" parameterClass="java.util.HashMap" resultClass="java.lang.String">
    	SELECT 'X' FROM EDI_FBL_SHP 
	    WHERE TR_NO IN (SELECT TR_NO FROM EDI_FBL WHERE FLT_KEY = #FLT_KEY# AND FLT_DATE = #FLT_DATE# AND FLT_TYPE = 'D')
	    AND AWB_NO = #AWB_NO# AND 
	    AWB_DATE = #AWB_DATE# AND
	    EXISTS (SELECT NULL FROM AWB WHERE AWB_NO = #AWB_NO# AND AWB_DATE = #AWB_DATE# AND AWB_TYPE='E' OR AWB_TYPE='T')    
    </select>


	<select id="preManifestAwbCountList" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="cargo.cms.export.bo.ExpFlightBO" >
		SELECT
			COUNT(AWB_NO) totalAwb,
			SUM(PMAN_PCS)totalManfpc,
			SUM(pman_wt) totalpmanWt,
			SUM(AWB_PCS)totalAwbPc , 
			SUM(awb_wt) wt 
	   	FROM 	
			gt_exp_pmanifest_list	
			<isNotEmpty property="unLdgPt">
        	where unldg_pt = #unLdgPt#
        </isNotEmpty>
	</select>
		<select id="nonPreManifestFblAwbList" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="cargo.cms.export.bo.ExpFlightBO" >
	 SELECT  UPPER(lgt.LIGHT_SIGNAL) as lightColor,TO_CHAR(t1.AWB_DATE,'DDMONYY') as awbDate, CONCAT(CONCAT(SUBSTR(t1.awb_no,0,3),'-'),SUBSTR(t1.awb_no,4)) awbNo, t1.ORG orig, t1.DEST dest,
        upper(t1.MAN_DESC) content,
        (decode(nvl(t7.spl_code1,t1.spl_code1),NULL,'',nvl(t7.spl_code1,t1.spl_code1))
        ||decode(nvl(t7.spl_code2,t1.spl_code2),NULL,'','/'||nvl(t7.spl_code2,t1.spl_code2))
        ||decode(nvl(t7.spl_code3,t1.spl_code3),NULL,'','/'||nvl(t7.spl_code3,t1.spl_code3))
        ||decode(nvl(t7.spl_code4,t1.spl_code4),NULL,'','/'||nvl(t7.spl_code4,t1.spl_code4))
        ||decode(nvl(t7.spl_code5,t1.spl_code5),NULL,'','/'||nvl(t7.spl_code5,t1.spl_code5))
        ||decode(nvl(t7.spl_code6,t1.spl_code6),NULL,'','/'||nvl(t7.spl_code6,t1.spl_code6))
        ||decode(nvl(t7.spl_code7,t1.spl_code7),NULL,'','/'||nvl(t7.spl_code7,t1.spl_code7))
        ||decode(nvl(t7.spl_code8,t1.spl_code8),NULL,'','/'||nvl(t7.spl_code8,t1.spl_code8))
        ||decode(nvl(t7.spl_code9,t1.spl_code9),NULL,'','/'||nvl(t7.spl_code9,t1.spl_code9))) splcode,
        FUN_GET_AWB_UPLIFT_PRIORITY(t7.AWB_NO,t7.AWB_DATE) upliftPriority,
        t1.PCS fblPcs, t1.NET_WT fblWt, 
        nvl((select pcs from awb where awb_no=t1.awb_no and awb_date=t1.awb_date),0) awbPCs,
        nvl((select wt from awb where awb_no=t1.awb_no and awb_date=t1.awb_date),0) wt,      
        t1.rmk fblreason, t1.EDMP_CODE edmpCode, t3.pmanPcs manfPC, t3.pmanWt pmanWt, t4.invPcs invPcs, t4.invWt invWt, 
        CASE WHEN (((NVL(t4.invPcs,0) + NVL(t5.chk_out_pcs,0))-NVL(t3.pmanPcs,0)) > 0) THEN ((NVL(t4.invPcs,0) + NVL(t5.chk_out_pcs,0))-NVL(t3.pmanPcs,0)) ELSE NULL END AS rmngPcs,
  		CASE WHEN (((NVL(t4.invWt,0) + + NVL(t5.chk_out_wt,0)) -NVL(t3.pmanWt,0)) > 0) THEN ((NVL(t4.invWt,0) + + NVL(t5.chk_out_wt,0)) -NVL(t3.pmanWt,0)) ELSE NULL END AS rmngWt 
		FROM  edi_fbl_shp t1
	    join edi_fbl t2 on t2.tr_no = t1.tr_no 
	    LEFT OUTER JOIN EXP_AWB_LIGHT_SIGNAL_DTL lgt ON t1.AWB_NO = lgt.AWB_NO 
		AND t1.AWB_DATE = lgt.AWB_DATE AND t1.UNLDG_PT = lgt.UNLDG_PT AND lgt.FLT_KEY = t2.FLT_KEY
		AND lgt.FLT_DATE = t2.FLT_DATE
		LEFT OUTER JOIN EXP_AWB_LIGHT_SIGNAL_HD lhd ON lhd.FLT_KEY = lgt.FLT_KEY 
		AND lhd.FLT_DATE = lgt.FLT_DATE AND lhd.UNLDG_PT = lgt.UNLDG_PT
        left join (select sum(pman_pcs) pmanPcs, sum(pman_wt) pmanWt, awb_no, awb_date from awb GROUP BY awb_no, awb_date) t3 
          on t3.awb_no=t1.awb_no and t3.awb_date=t1.awb_date
        left join (SELECT SUM(LOCN_PCS) invPcs, SUM(LOCN_WT) invWt, AWB_NO, AWB_DATE FROM AWB_INVENTORY GROUP BY AWB_NO, AWB_DATE ) t4
          on t4.AWB_NO = t1.AWB_NO and TO_CHAR(t4.AWB_DATE,'DDMONYY') = TO_CHAR(t1.AWB_DATE,'DDMONYY')
        LEFT JOIN (SELECT SUM(assigned_pcs) chk_out_pcs,SUM(assigned_wt) chk_out_wt,AWB_NO,	AWB_DATE
  					FROM exp_pmanifest_uld_awb a
  					join exp_chkout_dtl u on a.uld_bt_no = u.uld_key and a.flt_key = u.flt_key and a.flt_date = u.flt_date and  u.chk_flg = 'Y'
  					GROUP BY AWB_NO, AWB_DATE, u.chk_flg
  		) t5 ON t5.AWB_NO = t1.AWB_NO AND TO_CHAR(t5.AWB_DATE,'DDMONYY')       = TO_CHAR(t1.AWB_DATE,'DDMONYY')
      LEFT JOIN (select sum(pman_pcs) pmanPcs,sum(pman_wt) pmanWt,flt_key,flt_date,awb_no,awb_date from
                (select pman_pcs,pman_wt,awb_no,flt_key,flt_date,awb_date from exp_pmanifest_awb
                 union 
                 select (nvl(bulk_pcs,0)+nvl(ppk_pcs,0)),(nvl(bulk_wt,0)+nvl(ppk_wt,0)),awb_no,flt_key,flt_date,awb_date from exp_pman_tarmac_awb)
                 group by flt_key,flt_date,awb_no,awb_date) t6 ON t6.awb_no=t1.awb_no and t6.awb_date=t1.awb_date and t6.flt_key=t2.flt_key and t6.flt_date=t2.flt_date
       LEFT JOIN awb t7 on t7.awb_no=t1.awb_no and t7.awb_date=t1.awb_date
        where t2.flt_key= #fltNo# and t2.flt_date=to_date(#depDate#,'DDMONYY')  and t2.fbl_status='P'         
        and ((((NVL(t4.invPcs,0) + NVL(t5.chk_out_pcs,0))-NVL(t6.pmanPcs,0)) > 0) OR ((NVL(t1.PCS,0) - nvl(t6.pmanPcs,0)) > 0))	
        <isNotEmpty property="unLdgPt">
        	and t2.unldg_pt = #unLdgPt#
        </isNotEmpty>
      <isNotEmpty property="splCode">
      	and #splCode# in (t1.spl_code1,t1.spl_code2,t1.spl_code3,t1.spl_code4,t1.spl_code5,t1.spl_code6,t1.spl_code7,t1.spl_code8,t7.spl_code1,t7.spl_code2,t7.spl_code3,t7.spl_code4,t7.spl_code5,t7.spl_code6,t7.spl_code7,t7.spl_code8,t7.spl_code9)
      </isNotEmpty>
      <isNotEmpty property="splCode2">
      	and #splCode2# in (t1.spl_code1,t1.spl_code2,t1.spl_code3,t1.spl_code4,t1.spl_code5,t1.spl_code6,t1.spl_code7,t1.spl_code8,t7.spl_code1,t7.spl_code2,t7.spl_code3,t7.spl_code4,t7.spl_code5,t7.spl_code6,t7.spl_code7,t7.spl_code8,t7.spl_code9)
      </isNotEmpty>
      <isNotEmpty property="splCode3">
      	and #splCode3# in (t1.spl_code1,t1.spl_code2,t1.spl_code3,t1.spl_code4,t1.spl_code5,t1.spl_code6,t1.spl_code7,t1.spl_code8,t7.spl_code1,t7.spl_code2,t7.spl_code3,t7.spl_code4,t7.spl_code5,t7.spl_code6,t7.spl_code7,t7.spl_code8,t7.spl_code9)
      </isNotEmpty>
      <isNotEmpty property="splCode4">
      	and #splCode4# in (t1.spl_code1,t1.spl_code2,t1.spl_code3,t1.spl_code4,t1.spl_code5,t1.spl_code6,t1.spl_code7,t1.spl_code8,t7.spl_code1,t7.spl_code2,t7.spl_code3,t7.spl_code4,t7.spl_code5,t7.spl_code6,t7.spl_code7,t7.spl_code8,t7.spl_code9)
      </isNotEmpty>
      <isNotEmpty property="splCode5">
      	and #splCode5# in (t1.spl_code1,t1.spl_code2,t1.spl_code3,t1.spl_code4,t1.spl_code5,t1.spl_code6,t1.spl_code7,t1.spl_code8,t7.spl_code1,t7.spl_code2,t7.spl_code3,t7.spl_code4,t7.spl_code5,t7.spl_code6,t7.spl_code7,t7.spl_code8,t7.spl_code9)
      </isNotEmpty>
      <isNotEmpty property="splCode6">
      	and #splCode6# in (t1.spl_code1,t1.spl_code2,t1.spl_code3,t1.spl_code4,t1.spl_code5,t1.spl_code6,t1.spl_code7,t1.spl_code8,t7.spl_code1,t7.spl_code2,t7.spl_code3,t7.spl_code4,t7.spl_code5,t7.spl_code6,t7.spl_code7,t7.spl_code8,t7.spl_code9)
      </isNotEmpty>
       order by dest, t1.tr_no, T1.DOC_LINE_NO
	</select>
	<select id="getPreManifestFltSummaryUlds_LPMAN" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="cargo.cms.export.bo.ExpFlightBO" >
		 select decode(a.uldNo,'BT TARMAC',1,2) roworder, a.* from (
		 SELECT
	     A.ULD_BT_NO AS uldNo,
	     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1',
		     (SELECT code_desc from mast_code_dtl 
		         			where code = (select ULD_STATE from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1) and code_type='ULD_STATE' AND ROWNUM=1),
		     (SELECT code_desc from mast_code_dtl 
		         			where code = FUN_GET_ULD_STATE(A.ULD_BT_NO) and code_type='ULD_STATE' and rownum=1)) as uldStatus,
	     A.CONTR_CODE AS contour,
	     (select sum(ASSIGNED_PCS) from EXP_PMANIFEST_ULD_AWB ua where ua.ULD_BT_NO=A.ULD_BT_NO and ua.FLT_KEY =A.FLT_KEY and ua.FLT_DATE=A.FLT_DATE ) as totalUldBuPc,
	     (select sum(ASSIGNED_WT) from EXP_PMANIFEST_ULD_AWB ua where ua.ULD_BT_NO=A.ULD_BT_NO and ua.FLT_KEY =A.FLT_KEY and ua.FLT_DATE=A.FLT_DATE ) as totalUldBuWt 	
		  FROM
		      EXP_PMANIFEST_ULD A
		      LEFT JOIN ULD_INVENTORY B on A.FLT_KEY =B.FLT_KEY and A.FLT_DATE=B.FLT_DATE and A.ULD_BT_NO = B.ULD_KEY
		WHERE 
		      A.FLT_KEY = #fltNo# AND
		      A.FLT_DATE =#fltDate#
	 UNION
	     SELECT
	     A.ULD_BT_NO AS uldNo,
	     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1',
		     (SELECT code_desc from mast_code_dtl 
		         			where code = (select ULD_STATE from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1) and code_type='ULD_STATE' AND ROWNUM=1),
		     (SELECT code_desc from mast_code_dtl 
		         			where code = FUN_GET_ULD_STATE(A.ULD_BT_NO) and code_type='ULD_STATE' and rownum=1)) as uldStatus,
	      A.CONTR_CODE AS contour,
	     (SELECT SUM(ASSIGNED_PCS) FROM EXP_PMAN_TARMAC_ULD_AWB UA WHERE UA.ULD_BT_NO=A.ULD_BT_NO AND UA.FLT_KEY =A.FLT_KEY AND UA.FLT_DATE=A.FLT_DATE ) AS totalUldBuPc,
	     (select sum(ASSIGNED_WT) from EXP_PMAN_TARMAC_ULD_AWB ua where ua.ULD_BT_NO=A.ULD_BT_NO and ua.FLT_KEY =A.FLT_KEY and ua.FLT_DATE=A.FLT_DATE ) as totalUldBuWt
		FROM
	      EXP_PMAN_TARMAC_ULD A
	      LEFT JOIN ULD_INVENTORY B on A.FLT_KEY =B.FLT_KEY and A.FLT_DATE=B.FLT_DATE and A.ULD_BT_NO = B.ULD_KEY
		WHERE 
		      A.FLT_KEY = #fltNo# AND
		      A.FLT_DATE =#fltDate#
	 UNION
	     SELECT
	     'BT TARMAC' AS uldNo,
	     '',
	     '',
	     0,
	     0
		FROM
	      EXP_PMAN_TARMAC_AWB A
		WHERE 
		      A.FLT_KEY = #fltNo# AND
		      A.FLT_DATE =#fltDate# AND
          	  A.BULK_PCS>0
          GROUP BY A.FLT_KEY, A.FLT_DATE
		)  a order by roworder,a.uldNo
	</select>
	<select id="getPreManifestFltSummaryAWBs_LPMAN" parameterClass="cargo.cms.export.bo.ExpFlightBO" resultClass="cargo.cms.export.bo.ExpFlightBO" >
		SELECT 
    		substr(B.AWB_NO,0,3)||'-'||substr(B.AWB_NO,4,8) AS awbNo,
            to_char(B.AWB_DATE,'DDMONYY') AS awbDate,
            A.ULD_BT_NO AS uldNo,
            B.ASSIGNED_PCS AS awbBuPc,
            B.ASSIGNED_WT AS awbBuWt,
            C.awb_type as awbFlow
           FROM
            EXP_PMANIFEST_ULD A
            JOIN EXP_PMANIFEST_ULD_AWB B on B.ULD_BT_NO = A.ULD_BT_NO AND B.FLT_KEY = A.FLT_KEY AND B.FLT_DATE = A.FLT_DATE 
            JOIN EXP_PMANIFEST_AWB P on P.FLT_KEY=A.FLT_KEY AND P.FLT_DATE=A.FLT_DATE AND P.AWB_NO = B.AWB_NO AND P.UNLDG_PT = B.UNLDG_PT
            LEFT JOIN AWB C ON  C.AWB_NO = B.AWB_NO AND C.AWB_DATE = B.AWB_DATE
          WHERE 
             A.FLT_KEY = #fltNo# AND
             A.FLT_DATE = #fltDate# AND
             A.ULD_BT_NO = #uldNo#
	UNION
		SELECT 
            substr(B.AWB_NO,0,3)||'-'||substr(B.AWB_NO,4,8) AS awbNo,
            to_char(B.AWB_DATE,'DDMONYY') AS awbDate,
            A.ULD_BT_NO AS uldNo,
            B.ASSIGNED_PCS AS awbBuPc,
            B.ASSIGNED_WT AS awbBuWt,
            C.awb_type as awbFlow
            FROM
            EXP_PMAN_TARMAC_ULD A
            JOIN EXP_PMAN_TARMAC_ULD_AWB B on B.ULD_BT_NO = A.ULD_BT_NO AND B.FLT_KEY = A.FLT_KEY AND B.FLT_DATE = A.FLT_DATE 
            JOIN EXP_PMAN_TARMAC_AWB P on P.FLT_KEY=A.FLT_KEY AND P.FLT_DATE=A.FLT_DATE AND P.AWB_NO = B.AWB_NO AND P.UNLDG_PT = B.UNLDG_PT
            LEFT JOIN AWB C ON  C.AWB_NO = B.AWB_NO AND C.AWB_DATE = B.AWB_DATE
          WHERE 
             A.FLT_KEY = #fltNo# AND
             A.FLT_DATE = #fltDate# AND
             A.ULD_BT_NO = #uldNo#
	</select>
	<select id="getPreManifestFltSummaryBTTarmacAWBs_LPMAN" parameterClass="cargo.cms.export.bo.ExpFlightBO" resultClass="cargo.cms.export.bo.ExpFlightBO" >
		SELECT 
            substr(A.AWB_NO,0,3)||'-'||substr(A.AWB_NO,4,8) AS awbNo,
            TO_CHAR(A.AWB_DATE,'DDMONYY') AS awbDate,
            'BT TARMAC' AS uldNo,
            A.ASSIGNED_BULK_PCS AS awbBuPc,
            A.ASSIGNED_BULK_WT AS awbBuWt,
            C.awb_type as awbFlow
            FROM
            EXP_PMAN_TARMAC_AWB A
            LEFT JOIN AWB C ON  C.AWB_NO = A.AWB_NO AND C.AWB_DATE = A.AWB_DATE
          WHERE 
             A.FLT_KEY = #fltNo# AND
             A.FLT_DATE = #fltDate# AND
             A.BULK_PCS>0
	</select>
	<update id="sqlupdatepmannotupliftreason" parameterClass="cargo.cms.export.bo.ExpFlightBO" >			
	 	UPDATE exp_pmanifest_awb 
	    	SET PMAN_RMKS = #reason# 
     	WHERE 
	    	flt_key = #fltNo#
     	AND 
	    	flt_date = #fltDate#
    	AND 
	    		awb_no = #awbNo#
	    
	</update>
	<!-- AND 
	    		awb_date = #awbDate# -->
	
	<update id="sqlupdatepmantarmacnotupliftreason" parameterClass="cargo.cms.export.bo.ExpFlightBO" >			
	 	UPDATE exp_pman_tarmac_awb 
	    	SET MAN_RMK = #reason# 
     	WHERE 
	    	flt_key = #fltNo#
     	AND 
	    	flt_date = #fltDate#
    	AND 
	    		awb_no = #awbNo#
	    
	</update>
	<!-- AND 
	    		awb_date = #awbDate# -->
	 
	<update id="sqlupdatenonpmanreason" parameterClass="cargo.cms.export.bo.ExpFlightBO" >			
		UPDATE edi_fbl_shp
	    	SET rmk = #fblreason#, EDMP_CODE=#edmpCode#, TR_TYPE = 'LPPMAN', LM_USER_ID = #userID#
        WHERE
	    	awb_no = #awbNo#
        AND
	    	tr_no IN (SELECT tr_no
	        			FROM edi_fbl 
                    	WHERE 
	                    	flt_key = #fltNo#
                        AND
	                    	flt_date = #fltDate#
					)
	</update>
	
	<select id="validateEdmpCode" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_CODE_DTL WHERE CODE_TYPE='EDMP_CODE_LIST' AND CODE=#edmpCode#
	</select>
	
	<select id="sqlFetchFlightAcftType" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT CGO_ACFT_TYPE FROM FLT_OPR WHERE FLT_KEY=#flightKey# AND SCH_DATE=TO_DATE(#flightDate#, 'DDMONYY') AND FLT_TYPE='D'
	</select>
	
	<parameterMap id="getPMANBUMap" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
		<parameter property="P_AWBNO" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_AWBDATE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_PAXFRE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_PCS" jdbcType="NUMBER" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_FLTKEY" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_FLTDATE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_ACTION" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
	</parameterMap>	
	<procedure id="fetchPmanBUAllowedStatus" parameterMap="getPMANBUMap" >
		{ ? = call FUN_GET_SEC_CHK_STATUS(?, ?, ?, ?, ?, ?, ?)  }
	</procedure>
	
	<!-- ##################### PreManifest : End       ###############################################-->
	
	<!-- ##################### Create PreManifest(Tarmar) : Start       ###############################################-->
	
	<update id="sqlExpCreatePmanTarmacUldInvUpd" parameterClass="java.util.HashMap">
		update uld_inventory set final_weight = 'Y' where uld_key = #ULD_KEY#
	</update>
	
	<select id="sqlGetAwbDateForTarmac"  parameterClass="java.lang.String" resultClass="java.lang.String">
		select TO_CHAR(awb_date, 'DDMONYY') AWB_DATE from awb where awb_no = #AWB_NO# and awb_closed_yn = 'N'
	</select>
	
	<select id ="sqltarmacfindfltentry" parameterClass ="cargo.cms.export.bo.PreManifestSearchBO" resultClass = "cargo.cms.export.bo.PreManifestAWBBO">
		SELECT 
			A.CARR_CODE carr, A.FLT_KEY fltKey, to_char(A.EST_DATE,'DDMONYY') as fltEstDate, A.DEST dest, 
      		PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, 'D', 'DD') as fltEstTime			       
		FROM 
			FLT_OPR A 
		WHERE 
			A.FLT_KEY=UPPER(#fltKey#) 
		AND A.FLT_TYPE = 'D' 
		AND A.SCH_DATE = TO_DATE(#depDate#, 'DDMONYY')
	</select>
	
	<select id="findConditionByEmbargoRules" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
		SELECT MSG as MESSAGE, ACT_TYPE as ACT_TYPE, SPL_CODE1 as SPL_CODE1, SPL_CODE2 as SPL_CODE2, SPL_CODE3 as SPL_CODE3,ENDRSE_IND as ENDRSE_IND FROM 
				MAST_OPT_MSG WHERE SECTION=#SECTION# AND CARR_CODE=#CARR_CODE#
		  AND (
		  (LDG_PT IS NULL AND LDG_CTRY IS NULL AND ORIG IS NULL
		  AND ((DEST=#DEST# AND DEST IS NOT NULL) OR (COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL)))
		  OR ((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)))))
		  AND ((PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P','NBK','B',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)) OR  PKG_TYPE IS NULL)
		  AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'E'))  
		  OR (ORIG IS NULL AND ((DEST=#DEST# AND DEST IS NOT NULL) OR (COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL)))
		  OR ((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)))))
		    AND (PKG_TYPE IS NULL OR (PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P','NBK','B',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)))
			  AND ((LDG_PT IS NOT NULL AND LDG_PT IN (SELECT LDG_POINT FROM IMP_CAR_SHP SHP WHERE SHP.AWB_NO = #AWB_NO# AND SHP.AWB_DATE = #AWB_DATE#) AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T'))
				  OR (LDG_CTRY IS NOT NULL AND LDG_CTRY IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (select city_code from mast_arpt where code IN (SELECT LDG_POINT FROM IMP_CAR_SHP WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#))) AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T'))))
		  OR ((LDG_PT IS NULL AND LDG_CTRY IS NULL  AND ORIG IS NULL 
			   AND ((DEST=#DEST# AND DEST IS NOT NULL) OR (COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL)))
		  OR ((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)))))
		     AND (PKG_TYPE IS NULL OR (PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P','NBK','B',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)))
			   AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T')))
      OR ((ORIG IS NOT NULL AND ORIG=(SELECT ORIG FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#) 
      AND  ((DEST=#DEST# AND DEST IS NOT NULL) OR DEST IS NULL) 
      AND ((COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL))) OR COU_CODE IS NULL)
		  AND (((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)) OR FLT_FST_PORT IS NULL)
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))))
		    AND (PKG_TYPE IS NULL OR (PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P','NBK','B',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)))
			  AND (((LDG_PT IS NOT NULL AND LDG_PT IN (SELECT LDG_POINT FROM IMP_CAR_SHP SHP WHERE SHP.AWB_NO = #AWB_NO# AND SHP.AWB_DATE = #AWB_DATE#) AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T')) OR LDG_PT IS NULL)
				  AND ((LDG_CTRY IS NOT NULL AND LDG_CTRY IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (select city_code from mast_arpt where code IN (SELECT LDG_POINT FROM IMP_CAR_SHP WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#))) AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T')) OR LDG_CTRY IS NULL
          ))
         ))) 
		  AND sysdate BETWEEN eff_date AND ( case when EFF_DATE_TO is not null then  (EFF_DATE_TO + 1)  else (sysdate + 1)  end) 
				AND SUSPEND_IND='N' and nvl(not_allow_split_carr,'N') = 'N' and nvl(NOT_ALLOW_PART_SHIP,'N') = 'N' and ((CGO_ACFT_TYPE is not null and CGO_ACFT_TYPE IN (select cgo_acft_type  from flt_opr where flt_key =#FLT_KEY# and sch_date =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE='D')) or (CGO_ACFT_TYPE is null))
				ORDER BY ACT_TYPE DESC
		]]>
	</select>
	

	<select id="findConditionByEmbargoRulesWithSHC" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
			SELECT MSG as MESSAGE, ACT_TYPE as ACT_TYPE, SPL_CODE1 as SPL_CODE1, SPL_CODE2 as SPL_CODE2, SPL_CODE3 as SPL_CODE3,ENDRSE_IND as ENDRSE_IND FROM 
			MAST_OPT_MSG WHERE SECTION=#SECTION# AND CARR_CODE=#CARR_CODE# 
			AND ((LDG_PT IS NULL AND LDG_CTRY IS NULL AND ORIG IS NULL 
      AND ((DEST=#DEST# AND DEST IS NOT NULL) OR (COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL)))
		  OR ((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)))))
		  AND ((PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P','NBK','B',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)) OR  PKG_TYPE IS NULL)
      AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'E'))
      OR (ORIG IS NULL  AND ((DEST=#DEST# AND DEST IS NOT NULL) OR (COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL)))
		  OR ((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)))))
		  AND ((PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P','NBK','B',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)) OR  PKG_TYPE IS NULL)
      AND ((LDG_PT IS NOT NULL AND LDG_PT IN (SELECT LDG_POINT FROM IMP_CAR_SHP SHP WHERE SHP.AWB_NO = #AWB_NO# AND SHP.AWB_DATE = #AWB_DATE#) AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T'))
      OR (LDG_CTRY IS NOT NULL AND LDG_CTRY IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (select city_code from mast_arpt where code IN (SELECT LDG_POINT FROM IMP_CAR_SHP WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#)))
      AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T'))))
      OR ((LDG_PT IS NULL AND LDG_CTRY IS NULL AND ORIG IS NULL 
      		  AND ((DEST=#DEST# AND DEST IS NOT NULL) OR (ORIG=(SELECT ORIG FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#) AND ORIG     IS NOT NULL) OR (COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL)))
		  OR ((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)))))
		  AND ((PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P','NBK','B',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)) OR  PKG_TYPE IS NULL)
      AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T')))
      OR ((ORIG IS NOT NULL AND ORIG=(SELECT ORIG FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#) 
      AND  ((DEST=#DEST# AND DEST IS NOT NULL) OR DEST IS NULL) 
      AND ((COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL))) OR COU_CODE IS NULL)
		  AND (((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)) OR FLT_FST_PORT IS NULL)
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))))
		    AND (PKG_TYPE IS NULL OR (PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P','NBK','B',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)))
			  AND (((LDG_PT IS NOT NULL AND LDG_PT IN (SELECT LDG_POINT FROM IMP_CAR_SHP SHP WHERE SHP.AWB_NO = #AWB_NO# AND SHP.AWB_DATE = #AWB_DATE#) AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T')) OR LDG_PT IS NULL)
				  AND ((LDG_CTRY IS NOT NULL AND LDG_CTRY IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (select city_code from mast_arpt where code IN (SELECT LDG_POINT FROM IMP_CAR_SHP WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#))) AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T')) OR LDG_CTRY IS NULL
          )))))
			AND sysdate BETWEEN eff_date AND ( case when EFF_DATE_TO is not null then  (EFF_DATE_TO + 1)  else (sysdate + 1)  end) 
			AND SUSPEND_IND='N' and nvl(not_allow_split_carr,'N') = 'N'  and nvl(NOT_ALLOW_PART_SHIP,'N') = 'N' and (
     		(CGO_ACFT_TYPE is not null and CGO_ACFT_TYPE IN (select cgo_acft_type  from flt_opr where flt_key = #FLT_KEY# and sch_date =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE='D'))
                 and ((SPL_CODE1 is null and SPL_CODE2 is null and SPL_CODE3 is null) or
                ( instr(#SHC#, SPL_CODE1) > 0 or instr(#SHC#, SPL_CODE2) > 0 or instr(#SHC#, SPL_CODE3) > 0))
     		or (CGO_ACFT_TYPE is null)) 
			ORDER BY ACT_TYPE DESC 
		]]>
	</select>

	<select id="findConditionByULDEmbargoRules" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
			SELECT MSG as MESSAGE, ACT_TYPE as ACT_TYPE, SPL_CODE1 as SPL_CODE1, SPL_CODE2 as SPL_CODE2, SPL_CODE3 as SPL_CODE3 FROM 
			MAST_OPT_MSG WHERE SECTION=#SECTION# AND CARR_CODE=#CARR_CODE# AND (DEST=#DEST# OR COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST#))) AND 
			sysdate BETWEEN eff_date AND ( case when EFF_DATE_TO is not null then  (EFF_DATE_TO + 1)  else (sysdate + 1)  end) 
			AND SUSPEND_IND='N' and nvl(not_allow_split_carr,'N') = 'N' and (
     		(CGO_ACFT_TYPE is not null and CGO_ACFT_TYPE IN (select cgo_acft_type  from flt_opr where flt_key = #FLT_KEY# and sch_date =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE='D'))
     		or (CGO_ACFT_TYPE is null))  
			ORDER BY ACT_TYPE DESC
		]]>
	</select>
	
	<select id="findSplitConditionByEmbargoRules" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
			SELECT MSG as MESSAGE, ACT_TYPE as ACT_TYPE, SPL_CODE1 as SPL_CODE1, SPL_CODE2 as SPL_CODE2, SPL_CODE3 as SPL_CODE3,ENDRSE_IND as ENDRSE_IND,NOT_SPLI_COMB_CARR AS NOT_SPLI_COMB_CARR FROM 
			MAST_OPT_MSG WHERE SECTION=#SECTION# 
			AND ((LDG_PT IS NULL AND LDG_CTRY IS NULL AND ORIG IS NULL 
					  AND ((DEST=#DEST# AND DEST IS NOT NULL) OR (COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL)))
		  OR ((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)))))
		  AND ((PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)) OR  PKG_TYPE IS NULL)
      AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'E'))
      OR (ORIG IS NULL AND ((DEST=#DEST# AND DEST IS NOT NULL) OR (ORIG=(SELECT ORIG FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#) AND ORIG     IS NOT NULL) OR (COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL)))
		  OR ((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)))))
		  AND ((PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)) OR  PKG_TYPE IS NULL)
      AND ((LDG_PT IS NOT NULL AND LDG_PT IN (SELECT LDG_POINT FROM IMP_CAR_SHP SHP WHERE SHP.AWB_NO = #AWB_NO# AND SHP.AWB_DATE = #AWB_DATE#) AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T'))
      OR (LDG_CTRY IS NOT NULL AND LDG_CTRY IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (select city_code from mast_arpt where code IN (SELECT LDG_POINT FROM IMP_CAR_SHP WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#)))
      AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T'))))
      OR ((LDG_PT IS NULL AND LDG_CTRY IS NULL AND ORIG IS NULL 
      		  AND ((DEST=#DEST# AND DEST IS NOT NULL) OR (ORIG=(SELECT ORIG FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#) AND ORIG     IS NOT NULL) OR (COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL)))
		  OR ((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)))))
		  AND ((PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)) OR  PKG_TYPE IS NULL)
      AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T')))
      OR ((ORIG IS NOT NULL AND ORIG=(SELECT ORIG FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#) 
      AND  ((DEST=#DEST# AND DEST IS NOT NULL) OR DEST IS NULL) 
      AND ((COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL))) OR COU_CODE IS NULL)
		  AND (((FLT_FST_PORT    IS NOT NULL AND FLT_FST_PORT IN  (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1)) OR FLT_FST_PORT IS NULL)
		  OR (FLT_FST_CTRY    IS NOT NULL AND FLT_FST_CTRY IN  (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE  =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE  ='D' AND LEG_ORD=1))))
		    AND (PKG_TYPE IS NULL OR (PKG_TYPE IS NOT NULL AND PKG_TYPE IN (SELECT DECODE(ULD.HANDLING_MODE,'PPK','P','NBK','B',DECODE(ULD.PPK_IND,'Y','P',DECODE(ULD.MIX_PPK_IND,'Y','M',AWB.PPK_IND)))  FROM AWB_INVENTORY AWB LEFT JOIN ULD_INVENTORY ULD ON ULD.ULD_KEY = AWB.ULD_KEY WHERE AWB.AWB_NO = #AWB_NO# AND AWB.AWB_DATE = #AWB_DATE#)))
			  AND (((LDG_PT IS NOT NULL AND LDG_PT IN (SELECT LDG_POINT FROM IMP_CAR_SHP SHP WHERE SHP.AWB_NO = #AWB_NO# AND SHP.AWB_DATE = #AWB_DATE#) AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T')) OR LDG_PT IS NULL)
				  AND ((LDG_CTRY IS NOT NULL AND LDG_CTRY IN (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE IN (select city_code from mast_arpt where code IN (SELECT LDG_POINT FROM IMP_CAR_SHP WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#))) AND EXISTS (SELECT NULL FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND AWB_TYPE = 'T')) OR LDG_CTRY IS NULL
          )))))
      AND	sysdate BETWEEN eff_date AND ( case when EFF_DATE_TO is not null then  (EFF_DATE_TO + 1)  else (sysdate + 1)  end) 
			AND SUSPEND_IND='N' and not_allow_split_carr = 'Y' and (
      		(CGO_ACFT_TYPE is not null and CGO_ACFT_TYPE IN (select cgo_acft_type  from flt_opr where flt_key = #FLT_KEY# and sch_date =TO_dATE(#FLT_DATE#,'DDMONYY') AND FLT_TYPE='D'))
      		or (CGO_ACFT_TYPE is null))  
			ORDER BY ACT_TYPE DESC
		]]>
	</select>



<select id="findPartShipConditionByEmbargoRules" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		<![CDATA[
		  SELECT MSG as MESSAGE, ACT_TYPE as ACT_TYPE, SPL_CODE1 as SPL_CODE1, SPL_CODE2 as SPL_CODE2, SPL_CODE3 as SPL_CODE3,ENDRSE_IND as ENDRSE_IND,
			NOT_ALLOW_PART_SHIP AS NOT_ALLOW_PART_SHIP FROM 
			MAST_OPT_MSG WHERE SECTION=#SECTION#  AND carr_code = #CARR_CODE#
		 	AND ( (DEST=#DEST# AND DEST IS NOT NULL) OR  
		 		  (COU_CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=(select city_code from mast_arpt where code=#DEST# AND COU_CODE IS NOT NULL))) )
	      AND sysdate BETWEEN eff_date AND ( case when EFF_DATE_TO is not null then  (EFF_DATE_TO + 1)  else (sysdate + 1)  end) 
		  AND SUSPEND_IND='N' and NOT_ALLOW_PART_SHIP = 'Y'  ORDER BY ACT_TYPE DESC
		]]>
	</select>




	<select id="checkPartPremanConditionByEmbargoRule" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">		
		<![CDATA[
			SELECT COUNT(1) FROM AWB WHERE AWB_NO=#AWBNO# AND AWB_DATE=#AWBDATE# AND PCS != #PMAN_PCS#
		]]>
	</select>

	<select id="checkPremanSplitConditionByEmbargoRule" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select COUNT(1) from exp_pmanifest_awb a , flt_opr b where b.flt_key = a.flt_key and b.sch_date = a.flt_date and b.flt_type='D'
		and a.awb_no=#AWBNO# AND a.awb_date=#AWBDATE# and instr(#COMBI_CARR#,B.CARR_CODE) > 0 AND instr(#COMBI_CARR#,#CARR_CODE#) > 0 AND B.CARR_CODE != #CARR_CODE# AND A.UNLDG_PT = #DEST# 
	</select>
	<select id="checkTarmacPremanSplitConditionByEmbargoRule" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select COUNT(1) from exp_pman_tarmac_awb a , flt_opr b where b.flt_key = a.flt_key and b.sch_date = a.flt_date and b.flt_type='D'
		and a.awb_no=#AWBNO# AND a.awb_date=#AWBDATE# and instr(#COMBI_CARR#,B.CARR_CODE) > 0 AND instr(#COMBI_CARR#,#CARR_CODE#) > 0 AND B.CARR_CODE != #CARR_CODE# AND A.UNLDG_PT = #DEST# 
	</select>
	<select id="checkOffloadPremanSplitConditionByEmbargoRule" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select COUNT(1) from exp_offload_uld_awb a , flt_opr b where b.flt_key = a.flt_key and b.sch_date = a.flt_date and b.flt_type='D'
		and a.awb_no=#AWBNO# AND a.awb_date=#AWBDATE# and instr(#COMBI_CARR#,B.CARR_CODE) > 0 AND instr(#COMBI_CARR#,#CARR_CODE#) > 0 AND B.CARR_CODE != #CARR_CODE# AND A.UNLDG_PT = #DEST#
	</select>
	<select id="checkPouchPremanSplitConditionByEmbargoRule" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	select COUNT(1) from awb_pouch a , flt_opr b where b.flt_key = a.flt_key and b.sch_date = a.flt_date and b.flt_type='D'
	and a.awb_no=#AWBNO# AND a.awb_date=#AWBDATE# and instr(#COMBI_CARR#,B.CARR_CODE) > 0 AND instr(#COMBI_CARR#,#CARR_CODE#) > 0
	and ((a.awb_uplift_time is not null and a.awb_uplift_user_id is not null) or 
    (a.pouch_uplift_time is not null and a.pouch_uplift_user_id is not null)) AND B.CARR_CODE != #CARR_CODE#
	</select>
	
	<select id="expSplCodesTarmacAwb" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT DISTINCT(SPL_CODE) SPL_CODE FROM (
	        SELECT SPL_CODE1 SPL_CODE FROM EXP_CAR WHERE AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY') AND ACCEPT_MODE='TTT'
	        UNION
	        SELECT SPL_CODE2 SPL_CODE FROM EXP_CAR WHERE AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY') AND ACCEPT_MODE='TTT'
	        UNION
	        SELECT SPL_CODE3 SPL_CODE FROM EXP_CAR WHERE AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY') AND ACCEPT_MODE='TTT'
	        UNION
	        SELECT SPL_CODE4 SPL_CODE FROM EXP_CAR WHERE AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY') AND ACCEPT_MODE='TTT'
	        UNION
	        SELECT SPL_CODE5 SPL_CODE FROM EXP_CAR WHERE AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY') AND ACCEPT_MODE='TTT'
	        UNION
	        SELECT SPL_CODE6 SPL_CODE FROM EXP_CAR WHERE AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY') AND ACCEPT_MODE='TTT'
	        UNION
	        SELECT SPL_CODE7 SPL_CODE FROM EXP_CAR WHERE AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY') AND ACCEPT_MODE='TTT'
	        UNION
	        SELECT SPL_CODE8 SPL_CODE FROM EXP_CAR WHERE AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY') AND ACCEPT_MODE='TTT'
	        UNION
	        SELECT SPL_CODE9 SPL_CODE FROM EXP_CAR WHERE AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY') AND ACCEPT_MODE='TTT'
		)
	</select>
	
	<select id="sqlCheckUldExistsForTarmac" parameterClass="java.lang.String" resultClass="java.util.HashMap">
		SELECT COUNT(1) COUNT FROM ULD_INVENTORY WHERE ULD_KEY=UPPER(#ULD_KEY#)
	</select>
	
	<insert id="sqlExpTarmacInsertUld" parameterClass="java.util.HashMap">
		INSERT INTO ULD_INVENTORY(ULD_KEY, ULD_TYPE, ULD_NO, LM_DATE, LM_USER_ID, STRG_DATE, OWNER_ID, ULD_CARR, LOC_CODE, OWNED_INV,
	    FLT_DATE,FLT_KEY,FLT_NO,FLT_TYPE, BASE_PLT , CARR_CODE, GROSS_WEIGHT, EMPTY_FLG, CFM_STATUS,TARE_WEIGHT,TRANSIT_TYPE,TRANSIT_FLG,X_RAY_RES,X_RAY_REQ
	    <isEqual property="OWNED_INV" compareValue="Y">		
		 ,ENTRY_TIME
		</isEqual>
	    )
	    VALUES(#ULD_KEY#, #ULD_TYPE#, #ULD_NO#, sysdate, #LM_USER_ID#, sysdate, #OWNER_ID#, #ULD_CARR#, #LOC_CODE#, #OWNED_INV#,
	    #FLT_DATE#,#FLT_KEY#,#FLT_NO#,#FLT_TYPE#, #BASE_PLT#, #CARR_CODE#, #GROSS_WT#, #EMPTY_FLG#, #CFM_STATUS#,#TARE_WT#,'TA','Y',null,null
	    <isEqual property="OWNED_INV" compareValue="Y">		
		 ,sysdate
		</isEqual>
	    )
	</insert>
	
	<update id="sqlExpTarmacUpdateUld" parameterClass="java.util.HashMap" >
		UPDATE  ULD_INVENTORY 
		SET FLT_DATE = #FLT_DATE# ,FLT_KEY = #FLT_KEY# ,FLT_NO = #FLT_NO#,FLT_TYPE = #FLT_TYPE#,GROSS_WEIGHT = #GROSS_WT#,TARE_WEIGHT = #TARE_WT#, LM_DATE= sysdate, LM_USER_ID= #LM_USER_ID#
		WHERE ULD_KEY=#ULD_KEY# 	
	</update>
	
	<select id="checkRecordExistsOrNotInExpPmanTarmUldAwb" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	select COUNT(1) from exp_pman_tarmac_uld_awb where flt_key=#FLT_KEY# and flt_date=#FLT_DATE# and uld_bt_no=#ULD_KEY# and awb_no=#AWB_NO# and awb_date=#AWB_DATE#
	</select>
	<select id="checkRecordExistsOrNotInExpPmanTarmUld" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	select COUNT(1) from exp_pman_tarmac_uld_awb where flt_key=#FLT_KEY# and flt_date=#FLT_DATE# and uld_bt_no=#ULD_KEY#
	</select>
	<!-- ##################### Create PreManifest(Tarmar) : End       ###############################################-->
	
	<!-- ##################### Amend Delete Premanifest(TARMAC) : Start (SATHYA) ########################################-->
	
	<select id="checkTarmacUldAssigned" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(T2.FLT_CLS_YN,'N') FROM ULD_INVENTORY T1
	    JOIN FLT_OPR_EVENTS T2 ON
	    T1.FLT_KEY = T2.FLT_KEY AND
	    TO_CHAR(T1.FLT_DATE,'DDMONYY') = TO_CHAR(T2.SCH_DATE,'DDMONYY')
	    WHERE T2.FLT_KEY = #FLT_KEY#
	    AND T1.LOC_CODE IS NOT NULL 
	    AND T1.OWNED_INV = 'Y'
	    AND TO_CHAR(T2.SCH_DATE,'DDMONYY') = #FLT_DATE#
	    AND T2.FLT_TYPE = 'D'
	    AND T1.ULD_KEY = #ULD_KEY#
	</select>
	
	<update id="sqlExoUpdTarmacUldGrossWt" parameterClass="java.util.HashMap">
		UPDATE EXP_PMAN_TARMAC_ULD SET GROSS_WT = GROSS_WT - NVL(#ASSIGNED_WT#,0)
		WHERE FLT_KEY=#FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#,'DDMONYY') AND ULD_BT_NO = #ULD_BT_NO# 
	</update>	
	
		<select id ="sqltarmacamenddeletesearchawbbulk" parameterClass ="cargo.cms.export.bo.PreManifestSearchBO" resultClass = "cargo.cms.export.bo.PreManifestAWBBO">
		<![CDATA[
		SELECT CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay, AWB_NO as awbNo, FLT_KEY as fltKey, to_char(AWB_DATE, 'DDMONYY') awbDate1, 
		BULK_PCS assignedBulkPcs, BULK_WT assignedBulkWt, UNLDG_PT bulkUnLdgPt, GROUP_NO bulkgroupno, FLT_DATE as fltDate, PPK_PCS nonPreManfPPKPc, MAN_RMK manfRmk,
		BULK_PCS oldAssignBulkPcs, BULK_WT oldAssignBulkWt, UNLDG_PT oldBulkUnldgPt,
		(select flt_key as impFltKey from cdt_inb_flt_dtls  where rcl_no = A.TRF_NO and rownum = 1) as impFlightKey, 
		(select to_char(flt_date,'DDMONYY') as impFltDate from cdt_inb_flt_dtls  where rcl_no = A.TRF_NO and rownum = 1) as impFlightDate,
		trf_no as trfNumber 
		from EXP_PMAN_TARMAC_AWB A
		WHERE AWB_NO = #awbNo# and FLT_KEY=#fltKey# and FLT_DATE=TO_DATE(#depDate#,'DDMONYY') and BULK_PCS > 0
		]]>
	</select>

	<select id ="getManifetRemarks_Tarmac_AWB" parameterClass ="cargo.cms.export.bo.PreManifestSearchBO" resultClass = "java.lang.String">
		SELECT MAN_RMK
		from EXP_PMAN_TARMAC_AWB WHERE AWB_NO = #awbNo# and FLT_KEY=#fltKey# and FLT_DATE=TO_DATE(#depDate#,'DDMONYY')
	</select>
	
       <select id ="sqltarmacamenddeletesearchawbdtl" parameterClass ="cargo.cms.export.bo.PreManifestSearchBO" resultClass = "cargo.cms.export.bo.PreManifestAWBBO">	
		SELECT to_char(t1.AWB_DATE, 'DDMONYY') awbDate,  t1.ULD_BT_NO uldKey, t1.ASSIGNED_PCS assignedPCs, t1.ASSIGNED_WT assignedWt, t1.UNLDG_PT unLdgPt, t1.GROUP_NO groupno, 
		(SELECT GROSS_WT FROM exp_pman_tarmac_uld WHERE ULD_BT_NO=t1.ULD_BT_NO AND flt_key = t1.FLT_KEY and to_char(flt_date,'DDMONYY') = to_char(t1.flt_date,'DDMONYY') ) grossWt, 
    	(SELECT MAN_RMK FROM exp_pman_tarmac_uld WHERE ULD_BT_NO=t1.ULD_BT_NO AND flt_key = t1.FLT_KEY and to_char(flt_date,'DDMONYY') = to_char(t1.flt_date,'DDMONYY') ) manRmk,
    	'Y' AS oldFlag,
    	(select flt_key as impFltKey from cdt_inb_flt_dtls  where rcl_no = t1.trf_no and rownum = 1) as impFlightKey, 
		(select to_char(flt_date,'DDMONYY') as impFltDate from cdt_inb_flt_dtls  where rcl_no = t1.trf_no and rownum = 1) as impFlightDate,
		t1.trf_no as trfNumber,
		t1.ASSIGNED_PCS oldAssignedPcs, t1.ASSIGNED_WT oldAssignedWt
    	from EXP_PMAN_TARMAC_ULD_AWB t1 
		WHERE t1.AWB_NO = #awbNo# and t1.FLT_KEY = #fltKey# and t1.FLT_DATE=TO_DATE(#depDate#,'DDMONYY')
		and t1.ULD_BT_NO in (SELECT ULD_BT_NO  FROM EXP_PMAN_TARMAC_ULD WHERE FLT_KEY = #fltKey# AND FLT_DATE=TO_DATE(#depDate#,'DDMONYY'))	
	</select>
	
	<insert id="sqltarmacpmanuldmov" parameterClass ="java.util.HashMap">
		insert into uld_mov(tr_type, tr_no, tr_date, doc_line_no, uld_key, flt_type, flt_key, flt_date, rmk,cr_user_id, cr_date, lm_user_id, lm_date, iss_recv, uld_status, seq_no, event_id)
      	values('PT','31',sysdate,1,#ULD_KEY#,'E',#FLT_KEY#,#FLT_DATE#,#MAN_RMK#,#USER_ID#,sysdate, #USER_ID#,sysdate,'I','CONFIRMED',uld_mov_seq.nextval,'CPT')
	</insert>
	
	<insert id="sqltarmacpmanamduldmov" parameterClass ="java.util.HashMap">
		insert into uld_mov(tr_type, tr_no, tr_date, doc_line_no, uld_key, flt_type, flt_key, flt_date, rmk,cr_user_id, cr_date, lm_user_id, lm_date, iss_recv, uld_status, seq_no, event_id)
      	values('AP','32',sysdate,1,#ULD_KEY#,'E',#FLT_KEY#,#FLT_DATE#,#MAN_RMK#,#USER_ID#,sysdate, #USER_ID#,sysdate,'I','CONFIRMED',uld_mov_seq.nextval,'ADT')
	</insert>
	
	<select id ="sqltarmacamenddeletesearchawbhdr" parameterClass ="cargo.cms.export.bo.PreManifestSearchBO" resultClass = "cargo.cms.export.bo.PreManifestAWBBO">
		SELECT CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay, AWB_NO as awbNo, DEST dest, PCS totalAwbPc, WT awbWt, 
		ACCEPT_MODE FROM  EXP_CAR  WHERE AWB_NO =#awbNo#
	</select>
	<delete id="sqldeletetarmacawbdetails" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >
		DELETE FROM EXP_PMAN_TARMAC_ULD_AWB 
		WHERE
				FLT_KEY=#fltKey# AND FLT_DATE =#fltEstDate# AND
				AWB_NO = #awbNo# and AWB_DATE = #awbDate# AND
				UNLDG_PT=#unLdgPt# and ULD_BT_NO = #uldKey#
	</delete>
	<delete id="sqldeletetarmacawbbulkdtl" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >
		DELETE FROM EXP_PMAN_TARMAC_AWB 
		WHERE
				FLT_KEY=#fltKey# AND FLT_DATE =#fltEstDate# AND
				AWB_NO = #awbNo# and AWB_DATE = #awbDate1# AND
				UNLDG_PT=#bulkUnLdgPt#
	</delete>
	<update id="sqltarmacupdateawbbulkdetails11" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >
		UPDATE  EXP_PMAN_TARMAC_AWB 
		SET BULK_PCS = BULK_PCS + #assignedBulkPcs#,
		BULK_WT = BULK_WT + #assignedBulkWt#,
		GROUP_NO= #bulkgroupno#,
		UNLDG_PT=#bulkUnLdgPt#,
		MAN_RMK=#manfRmk#,
		ASSIGNED_BULK_PCS= ASSIGNED_BULK_PCS + #assignedBulkPcs#,
		ASSIGNED_BULK_WT= ASSIGNED_BULK_WT + #assignedBulkWt#
		WHERE
		FLT_KEY=#fltKey# AND FLT_DATE =#fltEstDate# AND
		AWB_NO = #awbNo# and AWB_DATE = #awbDate1# 		
	</update>
	<update id="sqltarmacupdateawbbulkdetails" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >
		UPDATE  EXP_PMAN_TARMAC_AWB 
		SET BULK_PCS = #assignedBulkPcs#,
		BULK_WT = #assignedBulkWt#,
		GROUP_NO= #bulkgroupno#,
		UNLDG_PT=#bulkUnLdgPt#,
		MAN_RMK=#manfRmk#,
		ASSIGNED_BULK_PCS= #assignedBulkPcs#,
		ASSIGNED_BULK_WT= #assignedBulkWt#
		WHERE
		FLT_KEY=#fltKey# AND FLT_DATE =#fltEstDate# AND
		AWB_NO = #awbNo# and AWB_DATE = #awbDate1# 		
	</update>
	<insert id="sqlTarmacExpUldInsFltUld" parameterClass="java.util.HashMap">
		insert into exp_flt_uld(flt_key, flt_date, uld_key, unldg_pt, contr_code, gross_wt, 
			tare_wt, net_wt, source, cr_user_id, cr_date, lm_user_id, lm_date, flt_type,MAN_PCS,MAN_WT)
		values (#FLT_KEY#, TO_DATE(#FLT_DATE#,'DDMONYY'), #ULD_KEY#, #UNLDG_PT#, #CONTR_CODE#, NVL(#GROSS_WT#,0), 
			NVL(#TARE_WT#,0), NVL(#GROSS_WT#,0) - NVL(#TARE_WT#,0), 'TARMAC', #USER_ID#, sysdate, #USER_ID#, sysdate, 'E',#PCS#,#WT#)
	</insert>
	<select id="FetchExistingExpPmanTarmacAwb" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"
	 resultClass="java.util.HashMap">
	 select FLT_KEY,TO_CHAR(FLT_DATE,'DDMONYY') FLT_DATE, UNLDG_PT, AWB_NO, TO_CHAR(AWB_DATE,'DDMONYY') AWB_DATE,
      		GROUP_NO, BLDUP_INSTR, MAN_RMK, BULK_PCS,BULK_WT,PPK_PCS,PPK_WT,ASSIGNED_BULK_PCS,ASSIGNED_BULK_WT 
 		from EXP_PMAN_TARMAC_AWB WHERE
			FLT_KEY=#fltKey# AND FLT_DATE =#fltEstDate# AND
			AWB_NO = #awbNo# and AWB_DATE = #awbDate1# 
	 </select>
	 
	 <select id="FetchExistingExpPmanTarmacAwbUld" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"
	 resultClass="java.util.HashMap">
	 select FLT_KEY,TO_CHAR(FLT_DATE,'DDMONYY') FLT_DATE, UNLDG_PT, AWB_NO, TO_CHAR(AWB_DATE,'DDMONYY') AWB_DATE,
      		GROUP_NO, ASSIGNED_PCS PPK_PCS,ASSIGNED_WT PPK_WT
 		from EXP_PMAN_TARMAC_ULD_AWB WHERE
			FLT_KEY=#fltKey# AND FLT_DATE =TO_DATE(#fltEstDate#,'DDMONYY') AND
			AWB_NO = #awbNo# and AWB_DATE = TO_DATE(#awbDate1#,'DDMONYY') and ULD_BT_NO= #uldKey#
	 </select>
	
	<update id="sqltarmacupdateawbdetails" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >
		UPDATE  EXP_PMAN_TARMAC_ULD_AWB
		SET ULD_BT_NO = #uldKey#,
		ASSIGNED_PCS = #assignedPcs#,
		ASSIGNED_WT=#assignedWt#,
		UNLDG_PT=#unLdgPt#,
		GROUP_NO=#groupno#,
		TR_TYPE = #trType#
		WHERE
		FLT_KEY=#fltKey# AND FLT_DATE = #fltEstDate#
		AND AWB_NO = #awbNo# AND ULD_BT_NO = #uldKey#
		AND AWB_DATE = #awbDate#
	</update>
	<update id="sqltarmacupdateulddetails" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >
		UPDATE EXP_PMAN_TARMAC_ULD_AWB 
			   SET ASSIGNED_PCS = #assignedPcs#,
			   ASSIGNED_WT = #assignedWt#,
			   GROUP_NO = #groupno#,
			   UNLDG_PT = #unLdgPt#,
			   TR_TYPE = #trType#
			   WHERE ULD_BT_NO = #uldNo# and FLT_KEY = #fltKey# 
			   and AWB_NO = #awbNo# and AWB_DATE = #awbDate# and FLT_DATE =#fltEstDate#
	</update>
	<delete id="sqldeletetarmaculddetails" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >
		DELETE FROM EXP_PMAN_TARMAC_ULD_AWB 
		WHERE
				FLT_KEY=#fltKey# AND FLT_DATE =#fltEstDate# AND
				AWB_NO = #awbNo# and AWB_DATE = #awbDate# AND
				UNLDG_PT=#unLdgPt# and ULD_BT_NO = #uldNo#
	</delete>

		<select id="sqltarmacamenddeletesearchuld1" parameterClass ="cargo.cms.export.bo.PreManifestSearchBO" resultClass = "cargo.cms.export.bo.PreManifestAWBBO">
		SELECT ULD_BT_NO uldNo, GROUP_NO bulkgroupno, UNLDG_PT unLdgPt, GROSS_WT grossWt, MAN_RMK manfRmk
		FROM EXP_PMAN_TARMAC_ULD A WHERE ULD_BT_NO = #uldNo# AND FLT_KEY = #fltKey# AND FLT_DATE=TO_DATE(#depDate#,'DDMONYY')
	</select>

	<select id ="sqltarmacamenddeletesearchuld2" parameterClass ="cargo.cms.export.bo.PreManifestSearchBO" resultClass = "cargo.cms.export.bo.PreManifestAWBBO">
	SELECT AWB_NO awbNo, AWB_NO awbNo1, to_char(AWB_DATE, 'DDMONYY') awbDate, ASSIGNED_PCS assignedPcs, UNLDG_PT unLdgPt, ASSIGNED_WT assignedWt, GROUP_NO groupno,'Y' as oldFlag,
	(select flt_key as impFltKey from cdt_inb_flt_dtls  where rcl_no = TRF_NO and rownum = 1) as impFlightKey, 
	(select to_char(flt_date,'DDMONYY') as impFltDate from cdt_inb_flt_dtls  where rcl_no = TRF_NO and rownum = 1) as impFlightDate,	
	trf_no as trfNumber,
	ASSIGNED_PCS oldAssignedPcs, ASSIGNED_WT oldAssignedWt
	 FROM EXP_PMAN_TARMAC_ULD_AWB WHERE ULD_BT_NO = #uldNo# 
      AND FLT_KEY = #fltKey# AND FLT_DATE=TO_DATE(#depDate#,'DDMONYY') AND ULD_BT_NO = (
        SELECT ULD_BT_NO FROM EXP_PMAN_TARMAC_ULD WHERE ULD_BT_NO = #uldNo# 
      AND FLT_KEY = #fltKey# AND FLT_DATE=TO_DATE(#depDate#,'DDMONYY'))
	</select>
	
	<update id="sqlexporttarmacamnddeluldupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >
		UPDATE EXP_PMAN_TARMAC_ULD
			   SET 
			   GROSS_WT = #grossWt#,
			   UNLDG_PT = #unLdgPt#,
			   TR_TYPE  = #trtype#
			   <isNotEmpty property="groupno">
				,GROUP_NO = #groupno#
			   </isNotEmpty>
			   WHERE ULD_BT_NO = #uldNo# and FLT_KEY = #fltKey# 
			   and FLT_DATE =#fltEstDate#
			   
	</update>
	<update id="updateTarmacFltUldDetails" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >
	update exp_flt_uld set gross_wt=#grossWt# where uld_key=#uldNo# and flt_key=#fltKey#  and flt_date=#fltEstDate#
	</update>
	<update id="exportTarmacUpdUldinv" parameterClass="java.lang.String" >
	update uld_inventory set FLT_DATE=null,FLT_KEY=null,FLT_TYPE=null,LOC_CODE=null,OWNED_INV='N',TRANSIT_TYPE=null,CFM_STATUS='REMOVED',gross_weight=0 WHERE ULD_KEY=#PARAM#
	</update>
	<select id="getexistpmanpcwtforoffload"  parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	SELECT A.PCS unassPcs,A.WT unassWt, (
	SELECT NVL(SUM(PMAN_PCS),0) FROM(
	SELECT NVL(SUM(PMAN_PCS),0) PMAN_PCS
  	FROM EXP_PMANIFEST_AWB
  	WHERE AWB_NO  =A.awb_no
  	AND AWB_DATE  = A.awb_date
  	UNION ALL
  	SELECT NVL(SUM(BULK_PCS+PPK_PCS),0) PMAN_PCS
  	FROM EXP_PMAN_TARMAC_AWB
  	WHERE AWB_NO  =A.awb_no
  	AND AWB_DATE  = A.awb_date)
 	) AS pmanPcs,
  	(
	SELECT NVL(SUM(PMAN_WT),0) FROM(
	SELECT NVL(SUM(PMAN_WT),0) PMAN_WT
  	FROM EXP_PMANIFEST_AWB
  	WHERE AWB_NO  =A.awb_no
  	AND AWB_DATE  = A.awb_date
  	UNION ALL
  	SELECT NVL(SUM(BULK_WT+PPK_WT),0) PMAN_WT
  	FROM EXP_PMAN_TARMAC_AWB
  	WHERE AWB_NO  =A.awb_no
  	AND AWB_DATE  = A.awb_date)
 	) AS pmanWt FROM AWB A WHERE AWB_NO =#awbNo# AND AWB_DATE=#awbDate#
	</select>
	
	<select id="getTARMACFltUldDetails"  parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	Select 
	 Pman_Yn As pmanInd,
	 Eic_Yn As eicInd,
	 Buildup_Yn As buildupInd,
	 Checkout_Yn As checkoutInd,
	 Break_Bulk_Yn As breakbulkInd,
	 Del_Yn As delInd,
	 Ins_From_Ind As insfromInd,
	 Flt_Use As fltuseInd,
	 Bb_Ind As bbInd,
	 Qt_Ind As qtInd,
	 finalize_ind as finalizeInd
     from exp_flt_uld where flt_key=#fltKey# and flt_date=#fltEstDate# and uld_key=#uldNo#
	</select>
	<update id="updateTarmacUldFltDetails" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" >
	update exp_flt_uld set
	 Pman_Yn = #pmanInd#,
	 Eic_Yn = #eicInd#,
	 Buildup_Yn = #buildupInd#,
	 Checkout_Yn = #checkoutInd#,
	 Break_Bulk_Yn = #breakbulkInd#,
	 Del_Yn = #delInd#,
	 Ins_From_Ind = #insfromInd#,
	 Flt_Use = #fltuseInd#,
	 Bb_Ind = #bbInd#,
	 Qt_Ind = #qtInd#,
	 finalize_ind = #finalizeInd#
 where flt_key=#fltKey# and flt_date=#fltDate# and uld_key=#uldKey#
	</update>
	<update id="updateTarmacUldFltBBFlgDetails" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" >
	update exp_flt_uld set
	 Bb_Ind = #bbInd#
	where flt_key=#fltKey# and flt_date=#fltDate# and uld_key=#uldKey#
	</update>
	

	<!-- ##################### Amend Delete Premanifest(TARMAC) : Ends (SATHYA) ########################################-->
	
	<!-- ##################### Un-CheckOut ULD(HHT): Starts ########################################-->
	
	<select id="getCheckedOutULDsList" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.ULDCheckOutListBO">
		select 
		  a.uld_key AS uldKey,
		  a.contr_code AS contourCode,
		  b.loc_code AS location,
		  to_char(a.chkout_date, 'DDMONYY') || ' ' ||decode(a.chkout_time, null, '', SUBSTR(lpad(a.chkout_time,4,0), 1, 2)|| ':'||  SUBSTR(lpad(a.chkout_time,4,0), 3))  as checkOutTime,
		  a.CHKOUT_RMK AS remarks,
		  b.dam_rmk AS damageRemarks,
		  a.EIC_IND AS eicStatus,
		  a.EMPTY_IND AS emptyStatus,
		  decode(b.cfm_status, 'DAMAGE', 'Y') AS damageStatus,
		  b.target as targetLocation,
		  a.chk_flg checkOutStatus,
		  b.transit_type as transferType
		from exp_chkout_dtl a
        left join uld_inventory b
        on
		a.uld_key = b.uld_key
		where 
		<isNotEmpty property="FLAG">
     			a.chk_flg = #FLAG# and 
    	</isNotEmpty>
		a.flt_key = #flightKey#
		and a.flt_date = TO_DATE(#flightDate#,'DDMONYY')
		<isNotEmpty property="uldKey">
		and a.uld_key = #uldKey#
		</isNotEmpty>
		order By a.uld_key				
	</select>
	<select id="getAWBListforMileStoneCheckout" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.ULDCheckOutListBO">
	SELECT AWB_NO AS awbNo,TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate,LOCN_PCS AS locnPc,LOCN_WT AS locnWt,A.LOC_CODE AS locCode FROM awb_inventory_chkout A WHERE A.FLT_KEY=#flightKey# AND A.FLT_DATE=TO_DATE(#flightDate#,'DDMONYY') AND A.ULD_KEY=#uldKey#
	</select>
	<select id="getHOFormnoforremove" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	SELECT A.HO_FORM_NO FROM EXP_CHKOUT_DTL A WHERE A.FLT_KEY=#flightKey# AND A.FLT_DATE=TO_DATE(#flightDate#,'DDMONYY') AND A.ULD_KEY=#uldKey#
	</select>
	<select id="getHoDtlsforEvent" parameterClass="cargo.cms.export.bo.RampExportBO" resultClass="cargo.cms.export.bo.RampExportBO">
		SELECT HO_FORM_NO AS hoFormNo,send_handover_user as hoSendUser,TO_CHAR(send_handover_date,'DD-MON-YY') AS hoSendDate,print_handover_user as hoPrintUser,TO_CHAR(print_handover_date,'DD-MON-YY') AS hoPrintDate,ho_status as hoStatus FROM exp_uld_hover_dtl where ho_form_no=#hoFormNo# and uld_key=#uldNo# AND ROWNUM=1
		</select>
		<insert id="createUldEventOnHOForm" parameterClass="java.util.HashMap">
		Insert into his_uld_evnt (ULD_KEY,COD_TRA_SEQ_NUM,COD_HIS_TYP,COD_FUNC,MODULE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
		values (#ULD_KEY#,#COD_TRA_SEQ_NUM#,'E','RMHOF','W',#USER#,SYSDATE,null,null)
		</insert>

		<insert id="createUldEventDtlsOnHOForm" parameterClass="java.util.HashMap">
		Insert into his_uld_evnt_dtl (ULD_KEY,COD_TRA_SEQ_NUM,COD_SEQ_NUM,COD_ACT,COD_HIS_SEQ_NUM,DES_HIS_DTS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
			values (#ULD_KEY#,#COD_TRA_SEQ_NUM#,SQ_ULD_HIS.NEXTVAL,'U',1023,#DESC#,#USER#,SYSDATE,null,null)
		</insert>
		<update id="UpdateOBHandoverDate" parameterClass="java.util.HashMap">
	UPDATE EXP_CHKOUT_DTL SET OB_HANDOVER_DATE='' WHERE FLT_KEY=#flightKey# AND FLT_DATE=#flightDate# AND ULD_KEY=#uldKey#
	</update>
	<select id="getRclAWBListforMileStone" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.CargoStorageBO">
			SELECT T1.RCL_NO,
			  	T1.awb_no awbNo,
			  TO_CHAR(T1.AWB_DATE,'DDMONYY') awbDate,
			  T1.ULD_KEY AS uldKey,
			  T1.PCS pc,
			  DECODE(T1.WEIGHT,'0','',TRIM(TO_CHAR(WEIGHT,9999999999.9))) wt,
			  T3.LOC_CODE AS locCode
			FROM exp_rcl_brkdn t1,
			  awb t2,
			  ULD_INVENTORY T3
			WHERE t1.awb_no        = t2.awb_no
			AND TRUNC(t1.awb_date) = TRUNC(t2.awb_date)
			AND T3.ULD_KEY         = T1.ULD_KEY
			AND t1.rcl_no          = #PARAM#
			UNION ALL
			SELECT T1.RCL_NO,
			  T1.awb_no awbNo,
			  TO_CHAR(T1.AWB_DATE,'DDMONYY') awbDate,
			  T4.ULD_KEY AS uldKey,
			  T4.PCS pc,
			  DECODE(T4.NET_WT,'0','',TRIM(TO_CHAR(NET_WT,9999999999.9))) wt,
			  T3.LOC_CODE AS locCode
			FROM EXP_RCL_HD t1,EXP_RCL_DTL T4,
			  awb t2,
			  ULD_INVENTORY T3
			WHERE t1.awb_no        = t2.awb_no
			AND TRUNC(t1.awb_date) = TRUNC(t2.awb_date)
			AND T3.ULD_KEY         = T4.ULD_KEY
			AND T4.RCL_NO = T1.RCL_NO
			AND t1.rcl_no          = #PARAM#			
	</select>
	
	<select id="inventoryAssignedToFlight" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select count(*) from uld_inventory a where a.flt_key = #flightKey# and a.flt_date = TO_DATE(#flightDate#,'DDMONYY')	and a.uld_key = #uldKey#				
	</select>
	
	<select id="getExportFlightETDAndStd" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
		DECODE(PKG_COMMON.get_flt_eta(#FLT_KEY#, TO_DATE(#FLT_DATE#,'DDMONYY'), 'D', 'DD'), NULL,
    	SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),3,4),
		PKG_COMMON.get_flt_eta(#FLT_KEY#, TO_DATE(#FLT_DATE#,'DDMONYY'), 'D', 'DD')) AS ETD,
    	SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),3,4) AS STD
		FROM FLT_OPR
		WHERE FLT_TYPE = 'D'
			AND FLT_KEY = #FLT_KEY#
			AND SCH_DATE = TO_DATE(#FLT_DATE#,'DDMONYY')
	</select>
	
	<select id="getExportFlightNoAndCarrier" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
		CARR_CODE, FLT_NO
		FROM FLT_OPR
		WHERE FLT_TYPE = 'D'
			AND FLT_KEY = #FLT_KEY#
			AND SCH_DATE = TO_DATE(#FLT_DATE#,'DDMONYY')
	</select>
	
	<update id="unCheckOutULD" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		update 
	      	exp_chkout_dtl   
		set     
			chkout_date = null, chkout_user = null, chkout_time = null,chkout_locn = null, chk_flg = 'N', ready_ind = 'N', loc_code = #location#,
			chkout_rmk = #remarks#, lm_user_id = #currentUserID#, lm_date = sysdate, IU_FROM_IND = #scrMode#,TR_TYPE=#trtype#
		where 
			uld_key = #uldKey# and flt_key = #flightKey# and flt_date = to_date(#flightDate#, 'DDMONYY')    
	</update>
	
	<update id="unCheckOutULDReadyStatus" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		update exp_pmanifest_uld
	    set ready_disp='N',TR_TYPE_EVT = #trtypeEvt#,
	    READY_DISP_DATE = NULL,READY_DISP_TIME = NULL
	    where uld_bt_no=#uldKey# 
	    and flt_key = #flightKey# 
	    and flt_date = to_date(#flightDate#, 'DDMONYY')
	</update>
	<update id="unCheckOutULDReadyStatusIF" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		update exp_pman_tarmac_uld
	    set ready_disp='N',
	    READY_DISP_DATE = NULL,READY_DISP_TIME = NULL
	    where uld_bt_no=#uldKey# 
	    and flt_key = #flightKey# 
	    and flt_date = to_date(#flightDate#, 'DDMONYY')
	</update>
		
	<update id="checkOutULD_update_ULD_INVENTORY" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		update 
	    	uld_inventory 
		set
			loc_code = #location#,
			owned_inv = #ownedInv#,
			cfm_status = #cfmStatus#,
			TR_TYPE = #trtype#,
			ULDENTRY_MSG_RCVD_YN = 'N'			
			<isNotEmpty property="targetLocation">
				,target = #targetLocation#
			</isNotEmpty>
		where 
			uld_key = #uldKey# and flt_key = #flightKey# and flt_date = to_date(#flightDate#, 'DDMONYY')
	</update>
	
	<insert id="unCheckOutULDMov" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		insert 
			into uld_mov(tr_type, tr_no, tr_date, doc_line_no, uld_key, flt_type, flt_key, flt_date, rmk,cr_user_id, cr_date, lm_user_id, lm_date, iss_recv, uld_status, seq_no, event_id)
      	values('UC','63',sysdate,1,#uldKey#,'E',#flightKey#,to_date(#flightDate#, 'DDMONYY'),#remarks#,#currentUserID#,sysdate, #currentUserID#,sysdate,'I','CONFIRMED',uld_mov_seq.nextval,#codeId#)
	</insert>
	
	<select id="getWarehouseLocationCode" parameterClass="map" resultClass="java.lang.String">
		select code from mast_wh_loc
            where code = upper(#codeDescription#)
          AND ROWNUM=1
	</select>
	
	<!-- ##################### Un-CheckOut ULD(HHT): Ends ########################################-->
	
	<!-- ##################### Verify Transfer Group For Tow(HHT): Starts ########################################-->
	
	<select id="sqlExpHhtTowDetails" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		select nvl(count(t1.uld_key),0) as ULD_COUNT, t2.flt_key as FLT_KEY, to_char(t2.flt_date, 'DDMONYY') as FLT_DATE 
		from tow_order_out_dtl t1, tow_order_out t2  
		where t1.to_no = t2.to_no and t2.to_no=#TO_NO#
		group by t2.flt_key, t2.flt_date
	</select>
	
	<select id="sqlExpHhtTfrGrpUldCount" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		 select nvl(count(t1.uld_key),0) as ULD_COUNT 
            from uld_inventory t1
            where t1.loc_code in (select code from mast_wh_loc where wh_group = #TRF_GRP#)
	</select>
	
	<select id="sqlExpHhtMatchingUldCount" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select nvl(count(t1.uld_key),0) as ULD_COUNT from tow_order_out_dtl t1
             join tow_order_out t2 on  t1.to_no = t2.to_no
             join uld_inventory t3 on t1.uld_key = t3.uld_key 
             where t2.to_no=#TO_NO#
             and t3.loc_code in (select code from mast_wh_loc where wh_group = #TRF_GRP#)
	</select>
	
	<select id="sqlExpHhtValTrfGrp"  parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_WH_GROUP WHERE WH_GROUP=UPPER(#CODE#)
	</select>
	
	<!-- ##################### Verify Transfer Group For Tow(HHT): Ends ########################################-->
	
	<!-- ##################### Export Ramp - Auto Generate Tow Order : Starts ########################################-->
	<!-- Changed for QR -->
	<select id="sqlExpRampChkUldChkOut" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(CHK_FLG,'N') FROM EXP_CHKOUT_DTL WHERE FLT_KEY = #FLT_KEY# 
    	AND FLT_DATE = #FLT_DATE#  AND ULD_KEY = #ULD_KEY# 
	</select>
	
	<select id="sqlExpRampGenerateTowOrderNo" resultClass="java.lang.String">
		SELECT TRIM(TO_CHAR(TOW_ORDER_OUT_SEQ.NEXTVAL,'00000000')) FROM DUAL
	</select>
	
	<!-- Changed for QR -->
	<select id="sqlExpRampGetFlightDetailsForTow" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
        FLT_KEY, TO_CHAR(SCH_DATE,'DD Mon') FLT_DATE, CHKOUT_AREA, DEST,
        PKG_COMMON.get_flt_eta(#FLT_KEY#, TO_DATE(#FLT_DATE#,'DDMONYY'), 'D', 'DD') AS ETD,
        SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),3,4) AS STD,
        TO_CHAR(SYSDATE+TO_NUMBER((SELECT NVL(RULE_VALUE,0) FROM CMSRULES WHERE RULE_CODE='ESTIMATED_TIME_FOR_TOW' AND SNO='1' AND VIEW_IND = 'Y'))/24,'DDMONYY HH24MI') AS EST_TOW,
        ACFT_PRK_BAY ACFT_BAY,
        ACFT_REG_NO ACFT_REG,
        CGO_ACFT_TYPE ACFT_TYPE,
        CARR_CODE CARR_CODE
      FROM 
        FLT_OPR
      WHERE 
        FLT_KEY=#FLT_KEY#
      AND 
        SCH_DATE=TO_DATE(#FLT_DATE#,'DDMONYY')
      AND
      	FLT_TYPE='D'
     <!--  AND 
        TR_NO=( SELECT 
                  TR_NO 
                FROM 
                  FLT_OPR_EVENTS 
                WHERE 
                  FLT_KEY=#FLT_KEY#  
                AND 
                  SCH_DATE=TO_DATE(#FLT_DATE#,'DDMONYY') 
                AND 
                  FLT_TYPE='D'
              ) -->
	</select>
	
	<select id="sqlGetChkOutAreaFromMastChkOut" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT CHKOUT_AREA FROM MAST_AUTO_CHKOUT WHERE CARR_CODE=#CARR_CODE# AND ACFT_TYPE=#ACFT_TYPE#
	</select>
	 
	<select id="sqlExpRampGetUldSplCodesForTow" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		<![CDATA[
			  SELECT STRAGG(STRINGDELIM(CODE,',')) FROM
                    (SELECT DISTINCT CODE, ULD_BT_NO FROM(
                      SELECT MAST_SPL_HAND_CODE.CODE,
                      EXP_PMANIFEST_ULD_AWB.ULD_BT_NO
                      FROM AWB, EXP_PMANIFEST_ULD_AWB, MAST_SPL_HAND_CODE, uld_inventory
                      WHERE AWB.AWB_NO             = EXP_PMANIFEST_ULD_AWB.AWB_NO
                      AND AWB.AWB_DATE             = EXP_PMANIFEST_ULD_AWB.AWB_DATE
                      and uld_inventory.uld_key = EXP_PMANIFEST_ULD_AWB.ULD_BT_NO 
                      and uld_inventory.flt_key = EXP_PMANIFEST_ULD_AWB.flt_key and uld_inventory.flt_date = EXP_PMANIFEST_ULD_AWB.flt_date and uld_inventory.flt_type = 'E'
                      AND (MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE1 OR MAST_SPL_HAND_CODE.CODE   = AWB.SPL_CODE2 OR MAST_SPL_HAND_CODE.CODE   = AWB.SPL_CODE3 OR MAST_SPL_HAND_CODE.CODE   = AWB.SPL_CODE4 OR MAST_SPL_HAND_CODE.CODE   = AWB.SPL_CODE5 OR MAST_SPL_HAND_CODE.CODE   = AWB.SPL_CODE6 OR MAST_SPL_HAND_CODE.CODE   = AWB.SPL_CODE7 OR MAST_SPL_HAND_CODE.CODE   = AWB.SPL_CODE8 OR MAST_SPL_HAND_CODE.CODE   = AWB.SPL_CODE9)
                      and uld_inventory.uld_key = #ULD_KEY#
                      ORDER BY PRIORITY
                      )
                    ) WHERE ROWNUM < 4
		]]>		
	</select>
	
	<insert id="sqlExpRampInsTOOut" parameterClass="cargo.cms.export.bo.OBTowOrderBO" >
		INSERT INTO TOW_ORDER_OUT(TO_NO,TYPE,RHO_ID,VER_NO,FLT_KEY,FLT_DATE,URF_NO,
        DEST_CODE,EST_TIME,HO_AREA,STATUS,NOTF_SEND_DATE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE, FLT_TYPE,TR_TYPE,SOURCE,HO_AREA2)
        VALUES(#towOrderNo#,#towType#,#rhoId#,#verNo#,#fltKey#,TO_DATE(#fltDate#,'DDMONYY'),#urfNo#,
        #destCode#,TO_DATE(#estTrfTime#,'DDMONYY HH24MI'),NVL(#hoArea#, (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='SUPER_UGNT_HO_AREA')),
        #status#,SYSDATE,#userId#, SYSDATE,#userId#, SYSDATE, #fltType#, DECODE(#userId#,'MHCS','TMULD','TOULD'),#source#,#hoArea2#)        
	</insert>
	
	<insert id="sqlExpRampInsTOOutDtl" parameterClass="cargo.cms.export.bo.OBTowOrderBO" >
		INSERT INTO TOW_ORDER_OUT_DTL(TO_NO,ULD_KEY,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE, TR_TYPE)
        VALUES(#towOrderNo#,#uldKey#,#userId#,SYSDATE,#userId#, SYSDATE, DECODE(#userId#,'MHCS','TMULD','TOULD'))
	</insert>
	
	<select id="sqlExpRampGetRhoContactDetails" parameterClass="map" resultClass="cargo.cms.export.bo.RhoEmailFaxBO">
		SELECT 
		EMAIL1 AS emailAddress1, EMAIL2 AS emailAddress2, EMAIL3 AS emailAddress3, 
    	EMAIL4 AS emailAddress4, EMAIL5 AS emailAddress5,
		FAX1 AS faxNumber1, FAX2 AS faxNumber2, FAX3 AS faxNumber3 
		FROM CUST_COMPANY WHERE CODE = (select rho_id from flt_opr where flt_key = #FLT_KEY# and sch_date = TO_DATE(#FLT_DATE#,'DDMONYY') and flt_type = 'D' )	
	</select>
	
	<select id="sqlGetTowOrderOutMailFax" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.RhoEmailFaxBO">
		SELECT EMAIL1 AS emailAddress1 ,EMAIL2 AS emailAddress2 , 
		EMAIL3 AS emailAddress3 , EMAIL4 AS emailAddress4 , 
		EMAIL5 AS emailAddress5 , 
		FAX1 AS faxNumber1 ,FAX2 AS faxNumber2 ,
		FAX3 AS faxNumber3
		FROM CUST_COMPANY WHERE CODE = (SELECT MAX(RHO_ID) FROM TOW_ORDER_OUT WHERE TO_NO = #PARAM#)
	</select>
	
	
	<!-- #####################  Export Ramp - Auto Generate Tow Order : Ends  ########################################-->
	
	<!-- ##################### ULD Checkout/Unckeckout & Tow Order: Starts ########################################-->
	
	<select id="sqlExpRampChkFltCnclStatus" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT UPPER(STATUS) FROM FLT_OPR WHERE FLT_KEY = #FLT_KEY# AND TO_CHAR(SCH_DATE,'DDMONYY') = #FLT_DATE# AND FLT_TYPE = 'D'
	</select>
	
	<insert id="checkOutULDMov" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		insert 
			into uld_mov(tr_type, tr_no, tr_date, doc_line_no, uld_key, flt_type, flt_key, flt_date, rmk,cr_user_id, cr_date, lm_user_id, lm_date, iss_recv, uld_status, seq_no, event_id)
      	values('CH','67',sysdate,1,#uldKey#,'E',#flightKey#,to_date(#flightDate#, 'DDMONYY'),#remarks#,#currentUserID#,sysdate, #currentUserID#,sysdate,'I','CONFIRMED',uld_mov_seq.nextval,#codeId#)
	</insert>
	
	<insert id="autoTowUldMov" parameterClass="cargo.cms.export.bo.OBTowOrderBO">
		insert 
			into uld_mov(tr_type, tr_no, tr_date, doc_line_no, uld_key, flt_type, flt_key, flt_date, rmk,cr_user_id, cr_date, lm_user_id, lm_date, iss_recv, uld_status, seq_no, event_id)
      	values('TO','68',sysdate,1,#uldKey#,'E',#fltKey#,to_date(#fltDate#, 'DDMONYY'),'Auto ULD Tow Order','SYSTEM',sysdate, 'SYSTEM',sysdate,'I','CONFIRMED',uld_mov_seq.nextval,'ATO')
	</insert>
	
	<insert id="manualTowUldMov" parameterClass="cargo.cms.export.bo.OBTowOrderBO">
		insert 
			into uld_mov(tr_type, tr_no, tr_date, doc_line_no, uld_key, flt_type, flt_key, flt_date, rmk,cr_user_id, cr_date, lm_user_id, lm_date, iss_recv, uld_status, seq_no, event_id)
      	values('TO','68',sysdate,1,#uldKey#,'E',#fltKey#,to_date(#fltDate#, 'DDMONYY'),'Manual ULD Tow Order',#userId#,sysdate, #userId#,sysdate,'I','CONFIRMED',uld_mov_seq.nextval,'MTO')
	</insert>
	
	<select id="getULDCheckOutHeader" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.ULDCheckOutBO">
		SELECT 
			CARR_CODE as flightPrefix,
			FLT_NO as flightSuffix, 
			A.flt_key as flightNumber,
			SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),0,2)|| ':'||  SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),3,4)  as flightTime,
			to_char(SCH_DATE,'DDMONYY') as flightDate,
			SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),0,2)|| ':'||  SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),3,4)  as std,
			PKG_COMMON.get_flt_eta(UPPER(#fltNo#), TO_DATE(#fltDate#, 'DDMONYY'), 'D', 'DD') AS etd,
			(SELECT b.osi_rmk from exp_chkout_hd b where b.flt_key = a.flt_key and b.flt_date = a.sch_date) AS flightRemarks ,
			A.acft_prk_bay as arcftParkBay,
			decode(A.cgo_acft_type,'FRE','Y','N') as isFreighter
		FROM FLT_OPR A  
		WHERE A.FLT_KEY=#fltNo# 		
			AND A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
			AND A.FLT_TYPE = 'D'
	</select>	
	
	<select id="getTowOrderUldListHeader" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.OBTowOrderBO">
		SELECT 
			CARR_CODE as carrCode,
			A.flt_key as fltKey,
			to_char(SCH_DATE,'DDMONYY') as fltDate,
			SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),0,2)|| ':'||  SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),3,4)  as std,
			PKG_COMMON.get_flt_eta(UPPER(A.FLT_KEY), TO_CHAR(A.SCH_DATE ,'DDMONYY'), 'D', 'DD') AS etd,
			A.acft_prk_bay as parkingBay,
			TO_CHAR((SYSDATE+TO_NUMBER((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='TOW_ORDER_HANDOVER_TIME' AND SNO='1' AND VIEW_IND = 'Y'))/1440),'DDMONYY HH24:MI')
			estTrfTime,
      		DECODE(CHKOUT_AREA,'STG','S','A') checkOutMode
		FROM FLT_OPR A  
		WHERE A.FLT_KEY=UPPER(#fltNo#) 		
			AND TO_CHAR(A.SCH_DATE ,'DDMONYY')= #fltDate#
			AND A.FLT_TYPE = 'D'
	</select>
	
<select id="getTowOrderUldListmobile" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.OBTowOrderBO">
		<![CDATA[
		   SELECT uldKey, contourCode, eicStatus, buCompInd, emptyStatus, readyForDispatch, location, checkOutTime,
	       splCode, checkOutStatus, checkOutLocn, towOrderNo,finalWtDiff,exitTime,print FROM (
	       SELECT uldKey, contourCode, eicStatus, buCompInd, emptyStatus, readyForDispatch, location, checkOutTime,
	       splCode, checkOutStatus, checkOutLocn, towOrderNo,finalWtDiff,exitTime,print FROM (
	       SELECT T1.ULD_KEY uldKey, T2.CONTR_CODE contourCode, T1.EIC_IND eicStatus,    NVL(T3.BLDUP_COMPLETE,'Y') buCompInd,         
	       t2.EMPTY_FLG emptyStatus,
         case when T3.ULD_BT_NO is null then  case when T2.TRANSIT_TYPE='IF' then NVL(T31.READY_DISP,'N') else 'Y' end else  NVL(T3.READY_DISP,'N') end as readyForDispatch,
          T2.LOC_CODE location,           
	       DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) checkOutTime,               
	       (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM < 10)  splCode,
	       T1.CHK_FLG checkOutStatus, T1.CHKOUT_LOCN checkOutLocn,
	       (SELECT TO_NO FROM TOW_ORDER_OUT_DTL WHERE ULD_KEY = T1.ULD_KEY AND TO_NO IN 
	       (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY=T1.FLT_KEY AND TO_CHAR(FLT_DATE,'DDMONYY')=TO_CHAR(T1.FLT_DATE,'DDMONYY') AND STATUS NOT IN ('VOID'))) towOrderNo,
	       (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff,
         NVL(T3.MHCS_EXIT_TIME,'01JAN98') exitTime,
         NVL(FLTULD.UIT_PRINT,'N') AS print
	       FROM EXP_CHKOUT_DTL T1        
	       JOIN ULD_INVENTORY T2 ON T1.ULD_KEY = T2.ULD_KEY and t1.flt_key=t2.flt_key and t1.flt_date=t2.flt_date           
	       left JOIN EXP_PMANIFEST_ULD T3 ON T1.ULD_KEY = T3.ULD_BT_NO AND T1.FLT_KEY=T3.FLT_KEY AND T1.FLT_DATE=T3.FLT_DATE
           left JOIN EXP_PMAN_TARMAC_ULD T31 ON T1.ULD_KEY = T31.ULD_BT_NO AND T1.FLT_KEY=T31.FLT_KEY AND T1.FLT_DATE=T31.FLT_DATE 
         left JOIN EXP_FLT_ULD FLTULD ON T1.ULD_KEY = FLTULD.ULD_KEY AND T1.FLT_KEY=FLTULD.FLT_KEY AND T1.FLT_DATE=FLTULD.FLT_DATE 
	       WHERE 
	       T1.FLT_KEY = #fltNo# AND 
	       TO_CHAR(T1.FLT_DATE,'DDMONYY')=#fltDate# AND 
	       T1.ULD_KEY NOT IN (SELECT ULD_KEY FROM TOW_ORDER_OUT_DTL WHERE TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY=T1.FLT_KEY AND TO_CHAR(FLT_DATE,'DDMONYY')=TO_CHAR(T1.FLT_DATE,'DDMONYY') AND STATUS NOT IN ('VOID')))
	       AND NVL(T2.HANDLING_MODE,'N')!='DT' 
	       ORDER BY T1.CHK_FLG,T1.LOC_CODE 
	       )
	       
	       UNION
	       
	       SELECT uldKey, contourCode, eicStatus, buCompInd, emptyStatus, readyForDispatch, location, checkOutTime,
	       splCode, checkOutStatus, checkOutLocn, towOrderNo,finalWtDiff,exitTime,print FROM (
	       SELECT T1.ULD_KEY uldKey, T2.CONTR_CODE contourCode, T1.EIC_IND eicStatus,    NVL(T3.BLDUP_COMPLETE,'Y') buCompInd,         
	       t2.EMPTY_FLG emptyStatus,  case when T3.ULD_BT_NO is null then  case when T2.TRANSIT_TYPE='IF' then NVL(T31.READY_DISP,'N') else 'Y' end else  NVL(T3.READY_DISP,'N') end as readyForDispatch, T2.LOC_CODE location,           
	       DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) checkOutTime,               
	       (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM < 10)  splCode,
	       T1.CHK_FLG checkOutStatus, T1.CHKOUT_LOCN checkOutLocn,
	       (SELECT TO_NO FROM TOW_ORDER_OUT_DTL WHERE ULD_KEY = T1.ULD_KEY AND TO_NO IN 
	       (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY=T1.FLT_KEY AND TO_CHAR(FLT_DATE,'DDMONYY')=TO_CHAR(T1.FLT_DATE,'DDMONYY') AND STATUS NOT IN ('VOID','FORCE COMPLETE'))) towOrderNo,
	       (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff ,
         NVL(T3.MHCS_EXIT_TIME,'01JAN98') exitTime,
         NVL(FLTULD.UIT_PRINT,'N') AS print
	       FROM EXP_CHKOUT_DTL T1        
	       JOIN ULD_INVENTORY T2 ON T1.ULD_KEY = T2.ULD_KEY and t1.flt_key=t2.flt_key and t1.flt_date=t2.flt_date            
	       left JOIN EXP_PMANIFEST_ULD T3 ON T1.ULD_KEY = T3.ULD_BT_NO AND T1.FLT_KEY=T3.FLT_KEY AND T1.FLT_DATE=T3.FLT_DATE
           left JOIN EXP_PMAN_TARMAC_ULD T31 ON T1.ULD_KEY = T31.ULD_BT_NO AND T1.FLT_KEY=T31.FLT_KEY AND T1.FLT_DATE=T31.FLT_DATE
         left JOIN EXP_FLT_ULD FLTULD ON T1.ULD_KEY = FLTULD.ULD_KEY AND T1.FLT_KEY=FLTULD.FLT_KEY AND T1.FLT_DATE=FLTULD.FLT_DATE 
	       WHERE 
	       T1.FLT_KEY = #fltNo# AND 
	       TO_CHAR(T1.FLT_DATE,'DDMONYY')=#fltDate# AND 
	       T1.ULD_KEY IN (SELECT ULD_KEY FROM TOW_ORDER_OUT_DTL WHERE T1.CHK_FLG='N' AND TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY=T1.FLT_KEY AND TO_CHAR(FLT_DATE,'DDMONYY')=TO_CHAR(T1.FLT_DATE,'DDMONYY') AND STATUS IN ('FORCE COMPLETE')))
	       AND (SELECT COUNT(1) FROM TOW_ORDER_OUT_DTL WHERE ULD_KEY = T1.ULD_KEY AND TO_NO IN 
	       (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY=T1.FLT_KEY AND TO_CHAR(FLT_DATE,'DDMONYY')=TO_CHAR(T1.FLT_DATE,'DDMONYY') AND STATUS IN ('ISSUED','COMPLETE'))) = 0
	       AND NVL(T2.HANDLING_MODE,'N')!='DT' 
	       ORDER BY T1.CHK_FLG,T1.LOC_CODE
	       )
	       )
	       ORDER BY exitTime desc,checkOutStatus, checkOutTime, checkOutLocn, location
	       	]]>
	</select>
	
	<select id="getTowOrderUldList" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.OBTowOrderBO">
		<![CDATA[
		    SELECT uldKey, contourCode, eicStatus, buCompInd, emptyStatus, readyForDispatch, location, checkOutTime,
	       splCode, checkOutStatus, checkOutLocn, towOrderNo,finalWtDiff FROM (
	       SELECT uldKey, contourCode, eicStatus, buCompInd, emptyStatus, readyForDispatch, location, checkOutTime,
	       splCode, checkOutStatus, checkOutLocn, towOrderNo,finalWtDiff FROM (
	       SELECT T1.ULD_KEY uldKey, T2.CONTR_CODE contourCode, T1.EIC_IND eicStatus,    NVL(T3.BLDUP_COMPLETE,'Y') buCompInd,         
	       t2.EMPTY_FLG emptyStatus,
         case when T3.ULD_BT_NO is null then  case when T2.TRANSIT_TYPE='IF' then NVL(T31.READY_DISP,'N') else 'Y' end else  NVL(T3.READY_DISP,'N') end as readyForDispatch,
          T2.LOC_CODE location,           
	       DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) checkOutTime,               
	       (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM < 10)  splCode,
	       T1.CHK_FLG checkOutStatus, T1.CHKOUT_LOCN checkOutLocn,
	       (SELECT TO_NO FROM TOW_ORDER_OUT_DTL WHERE ULD_KEY = T1.ULD_KEY AND TO_NO IN 
	       (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY=T1.FLT_KEY AND TO_CHAR(FLT_DATE,'DDMONYY')=TO_CHAR(T1.FLT_DATE,'DDMONYY') AND STATUS NOT IN ('VOID'))) towOrderNo,
	       (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff  
	       FROM EXP_CHKOUT_DTL T1        
	       JOIN ULD_INVENTORY T2 ON T1.ULD_KEY = T2.ULD_KEY and t1.flt_key=t2.flt_key and t1.flt_date=t2.flt_date           
	       left JOIN EXP_PMANIFEST_ULD T3 ON T1.ULD_KEY = T3.ULD_BT_NO AND T1.FLT_KEY=T3.FLT_KEY AND T1.FLT_DATE=T3.FLT_DATE
           left JOIN EXP_PMAN_TARMAC_ULD T31 ON T1.ULD_KEY = T31.ULD_BT_NO AND T1.FLT_KEY=T31.FLT_KEY AND T1.FLT_DATE=T31.FLT_DATE 
	       WHERE 
	       T1.FLT_KEY = #fltNo# AND 
	       TO_CHAR(T1.FLT_DATE,'DDMONYY')=#fltDate# AND 
	       T1.ULD_KEY NOT IN (SELECT ULD_KEY FROM TOW_ORDER_OUT_DTL WHERE TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY=T1.FLT_KEY AND TO_CHAR(FLT_DATE,'DDMONYY')=TO_CHAR(T1.FLT_DATE,'DDMONYY') AND STATUS NOT IN ('VOID')))
	       AND NVL(T2.HANDLING_MODE,'N')!='DT' 
	       ORDER BY T1.CHK_FLG,T1.LOC_CODE 
	       )
	       
	       UNION
	       
	       SELECT uldKey, contourCode, eicStatus, buCompInd, emptyStatus, readyForDispatch, location, checkOutTime,
	       splCode, checkOutStatus, checkOutLocn, towOrderNo,finalWtDiff FROM (
	       SELECT T1.ULD_KEY uldKey, T2.CONTR_CODE contourCode, T1.EIC_IND eicStatus,    NVL(T3.BLDUP_COMPLETE,'Y') buCompInd,         
	       t2.EMPTY_FLG emptyStatus,  case when T3.ULD_BT_NO is null then  case when T2.TRANSIT_TYPE='IF' then NVL(T31.READY_DISP,'N') else 'Y' end else  NVL(T3.READY_DISP,'N') end as readyForDispatch, T2.LOC_CODE location,           
	       DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) checkOutTime,               
	       (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM < 10)  splCode,
	       T1.CHK_FLG checkOutStatus, T1.CHKOUT_LOCN checkOutLocn,
	       (SELECT TO_NO FROM TOW_ORDER_OUT_DTL WHERE ULD_KEY = T1.ULD_KEY AND TO_NO IN 
	       (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY=T1.FLT_KEY AND TO_CHAR(FLT_DATE,'DDMONYY')=TO_CHAR(T1.FLT_DATE,'DDMONYY') AND STATUS NOT IN ('VOID','FORCE COMPLETE'))) towOrderNo,
	       (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff  
	       FROM EXP_CHKOUT_DTL T1        
	       JOIN ULD_INVENTORY T2 ON T1.ULD_KEY = T2.ULD_KEY and t1.flt_key=t2.flt_key and t1.flt_date=t2.flt_date            
	       left JOIN EXP_PMANIFEST_ULD T3 ON T1.ULD_KEY = T3.ULD_BT_NO AND T1.FLT_KEY=T3.FLT_KEY AND T1.FLT_DATE=T3.FLT_DATE
           left JOIN EXP_PMAN_TARMAC_ULD T31 ON T1.ULD_KEY = T31.ULD_BT_NO AND T1.FLT_KEY=T31.FLT_KEY AND T1.FLT_DATE=T31.FLT_DATE
	       WHERE 
	       T1.FLT_KEY = #fltNo# AND 
	       TO_CHAR(T1.FLT_DATE,'DDMONYY')=#fltDate# AND 
	       T1.ULD_KEY IN (SELECT ULD_KEY FROM TOW_ORDER_OUT_DTL WHERE T1.CHK_FLG='N' AND TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY=T1.FLT_KEY AND TO_CHAR(FLT_DATE,'DDMONYY')=TO_CHAR(T1.FLT_DATE,'DDMONYY') AND STATUS IN ('FORCE COMPLETE')))
	       AND (SELECT COUNT(1) FROM TOW_ORDER_OUT_DTL WHERE ULD_KEY = T1.ULD_KEY AND TO_NO IN 
	       (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY=T1.FLT_KEY AND TO_CHAR(FLT_DATE,'DDMONYY')=TO_CHAR(T1.FLT_DATE,'DDMONYY') AND STATUS IN ('ISSUED','COMPLETE'))) = 0
	       AND NVL(T2.HANDLING_MODE,'N')!='DT' 
	       ORDER BY T1.CHK_FLG,T1.LOC_CODE
	       )
	       )
	       ORDER BY checkOutStatus, checkOutTime, checkOutLocn, location
		]]>
	</select>
	
	<select id="getTowOrderUldList_count" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT count(*) FROM 
		tow_order_out_dtl dtl
		join tow_order_out tow on tow.to_no=dtl.to_no
		where uld_key=#ULD_KEY#
		and flt_key=#FLT_KEY# and flt_date = #FLT_DATE#
		and STATUS in ('ISSUED','COMPLETE')
	</select>
	
   	<select id="validateUldExistsInTow" parameterClass="cargo.cms.export.bo.OBTowOrderBO" resultClass="java.lang.String" >
	 	SELECT 'X' FROM TOW_ORDER_OUT_DTL WHERE TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT WHERE FLT_KEY =#fltKey# AND FLT_DATE=#fltDate# AND STATUS NOT IN ('VOID','FORCE COMPLETE'))
       AND ULD_KEY = #uldKey# AND ROWNUM = 1
	</select>
	
	<select id="getRhoId" parameterClass="map" resultClass="cargo.cms.afw.bo.MasterBO">	
		SELECT CODE_DESC AS codeDesc, CODE AS codeId FROM cust_company WHERE 
			code = (select rho_id from flt_opr where flt_key = #FLT_KEY# and sch_date = TO_DATE(#FLT_DATE#,'DDMONYY') and flt_type = 'D')		
	</select>
	
<select id="getULDCheckOutList" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.ULDCheckOutListBO">
		<![CDATA[
		   SELECT (SELECT TO_CHAR(U.MHCS_EXIT_TIME ,'DDMONYY HH24:MI') FROM EXP_PMANIFEST_ULD  U WHERE U.FLT_KEY      =T1.flt_key
  AND U.FLT_DATE     =T1.flt_date
  AND U.ULD_BT_NO=T1.ULD_KEY   )AS exitTime,
           T1.ho_form_no  AS hoForm,
           to_char(T1.OB_HANDOVER_DATE  ,'DDMONYY HH24:MI')   as hoTime,
		   T1.ULD_KEY uldKey, T2.CONTR_CODE contourCode, T2.EIC_FLG eicStatus, 
		   decode(T4.ULD_BT_NO, null,NVL(T3.BLDUP_COMPLETE,'N'), 'Y') buCompInd,         
	       t2.EMPTY_FLG emptyStatus, 
	       case when T3.ULD_BT_NO is null then  case when T2.TRANSIT_TYPE='IF' then NVL(T4.READY_DISP,'N') else 'Y' end else  NVL(T3.READY_DISP,'N') end as readyForDispatch, 
	       T2.LOC_CODE location, 
	       (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM < 10)  splCodes,
	       DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) checkOutTime,                
	       T1.CHK_FLG checkOutStatus, T1.CHKOUT_LOCN checkOutLocn,
	       (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T1.flt_key and t4.flt_date=T1.flt_date and t5.uld_key=T1.ULD_KEY) as towOrderNo,
                    T2.transit_Type as transferType,
           (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff         
	       FROM EXP_CHKOUT_DTL T1        
	       JOIN ULD_INVENTORY T2 ON T1.ULD_KEY = T2.ULD_KEY  AND 
	       		T1.FLT_KEY=T2.FLT_KEY AND T1.FLT_DATE=T2.FLT_DATE 
	       LEFT JOIN EXP_PMANIFEST_ULD T3 ON T1.ULD_KEY = T3.ULD_BT_NO AND 
	       		T1.FLT_KEY=T3.FLT_KEY AND T1.FLT_DATE=T3.FLT_DATE
	       LEFT JOIN EXP_PMAN_TARMAC_ULD T4 ON T1.ULD_KEY = T4.ULD_BT_NO AND 
	       		T1.FLT_KEY=T4.FLT_KEY AND T1.FLT_DATE=T4.FLT_DATE
	       WHERE 
		   T1.FLT_KEY = #fltNo#		    
	       AND TO_CHAR(T1.FLT_DATE,'DDMONYY')=#fltDate#
	       AND NVL(T2.HANDLING_MODE,'N')!='DT'
   	       AND ( NOT (NVL(T2.TRANSIT_TYPE,'*') = 'TT' or (NVL(T2.TRANSIT_TYPE,'*') = 'IF' and T2.LOC_CODE is null)) OR  T1.CHK_FLG = 'Y' )
	       ORDER BY T1.CHK_FLG, T1.CHKOUT_DATE, T1.CHKOUT_TIME, T1.CHKOUT_LOCN, T2.LOC_CODE
	   	]]> 
	</select>
	
	<select id="checkFlightFreighter" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from flt_opr 
		where flt_key = #flightKey#
			and sch_date = #flightDate#  
			and cgo_acft_type = 'FRE'
	</select>
	
	<select id="isAnyAWBNotReleasedInULD" parameterClass="map" resultClass="map">
		SELECT T1.SEC_CHK, T2.AWB_NO, T2.AWB_DATE, T4.HLDG_PERIOD, 
        DECODE(SIGN(T4.CR_DATE-T4.AWB_DATE),-1,T4.AWB_DATE,T4.CR_DATE) HLDG_DATE FROM
        EXP_SEC_CHK_JO_DTL T1 LEFT JOIN
        EXP_SEC_CHK_JO T2 ON
        T1.JO_NO = T2.JO_NO
        LEFT JOIN 
        EXP_ULD_AWB T3 ON
        T2.AWB_NO = T3.AWB_NO AND
        T2.AWB_DATE = T3.AWB_DATE
        LEFT JOIN 
        EXP_CAR T4
        ON  
        T2.AWB_NO = T4.AWB_NO AND
        T2.AWB_DATE = T4.AWB_DATE
        WHERE 
        (T1.SEC_CHK = 'Holding' OR T1.SEC_CHK = 'Hldg Period') AND
        T4.HLDG_PERIOD IS NOT NULL AND
        T3.ULD_KEY = #ULD_KEY# AND        
        T2.FLT_KEY = #FLT_KEY# AND
        T2.FLT_DATE = TO_DATE(#FLT_DATE#,'DDMONYY')	
	</select>
	
	<select id="checkIfULDInCheckOutTable" parameterClass="map" resultClass="java.util.HashMap">
		select CHKOUT.FLT_KEY,TO_CHAR(CHKOUT.FLT_DATE,'DDMONYY') FLT_DATE,CHKOUT.ULD_KEY,CHKOUT.CARR_CODE,CHKOUT.CONTR_CODE,CHKOUT.EIC_IND,CHKOUT.EMPTY_IND,CHKOUT.NOTIFY_LOG,CHKOUT.CHKOUT_USER,TO_CHAR(CHKOUT.CHKOUT_DATE,'DDMONYY') CHKOUT_DATE,CHKOUT.CHKOUT_TIME,CHKOUT.CHKOUT_RMK,
		CHKOUT.LOC_CODE,CHKOUT.LOAD_POSITION,CHKOUT.RAMP_DATE,EXPHOVER.RAMP_USER,CHKOUT.RAMP_RMK,EXPHOVER.RAMP_RECV_USER,CHKOUT.CHK_FLG,CHKOUT.STATUS,CHKOUT.CR_USER_ID,CHKOUT.CR_DATE,CHKOUT.LM_USER_ID,CHKOUT.LM_DATE,CHKOUT.RAMP_TIME,
		CHKOUT.IU_FROM_IND,EXPHOVER.PRINT_HANDOVER_DATE,CHKOUT.PRINT_ULD_TAG_DATE,CHKOUT.READY_IND_USER_ID,CHKOUT.READY_IND_DATE,CHKOUT.READY_IND,CHKOUT.LOD_WAR,CHKOUT.SEQ_NUM,CHKOUT.ML_IND,CHKOUT.HO_FORM_NO,CHKOUT.CHKOUT_LOCN,
		(SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY = CHKOUT.ULD_KEY) LOCATION, (SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY = CHKOUT.ULD_KEY) HANDLING_MODE
		from exp_chkout_dtl CHKOUT
    	LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = CHKOUT.HO_FORM_NO AND EXPHOVER.ULD_KEY = CHKOUT.ULD_KEY
		where CHKOUT.flt_key = #flightKey#
			and CHKOUT.FLT_DATE = #flightDate#
			and CHKOUT.uld_key = #uldKey#   
	</select>
	
	<select id="checkAwbInventoryTabCount" parameterClass="map" resultClass="java.lang.String">		
		select count(1) from awb_inventory where uld_key = #uldKey#
      		and  not ( nvl(flt_key,'*') = #flightKey# and nvl(flt_Date,'01JAN00') = to_date(#flightDate#,'DDMONYY'))   
	</select>
	
	<update id="sqlUpdateULDInTowOutChkOut" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		<![CDATA[
			UPDATE TOW_ORDER_OUT_DTL 
			SET REMOVE_DATE = SYSDATE, REMOVE_USER_ID = #currentUserID#, 
			LM_DATE = SYSDATE, LM_USER_ID = #currentUserID#
			WHERE
			ULD_KEY = #uldKey# AND 
			TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT WHERE STATUS = 'ISSUED' AND FLT_KEY=#flightKey# AND FLT_DATE = TO_DATE(#flightDate#,'DDMONYY'))
		]]>
	</update>
	
	<update id="sqlUpdateULDInTowOutUnchkOut" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		<![CDATA[
			UPDATE TOW_ORDER_OUT_DTL 
			SET REMOVE_DATE = null, REMOVE_USER_ID = null, 
			LM_DATE = SYSDATE, LM_USER_ID = #currentUserID#
			WHERE
			ULD_KEY = #uldKey# AND 
			TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT WHERE STATUS = 'ISSUED' AND FLT_KEY=#flightKey# AND FLT_DATE = TO_DATE(#flightDate#,'DDMONYY'))
		]]>
	</update>
	<update id="checkOutULDUpdate" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		update exp_chkout_dtl
		set 
			chkout_date = to_char(sysdate,'DDMONYY'),
			chkout_user = #currentUserID#,
			chk_flg = 'Y',
			chkout_time = to_char(sysdate, 'HH24MI'),
			chkout_rmk = #remarks#,
			LOC_CODE = #location#,
			chkout_locn = #location#,
			IU_FROM_IND = #scrMode#, 
			TR_TYPE=#trtype#,
			LM_USER_ID = #currentUserID#,
			LM_DATE = sysdate
		where 
			uld_key = #uldKey# and 
			flt_key = #flightKey# and 
			flt_date = to_date(#flightDate#, 'DDMONYY')
	</update>
	
	<select id="isCheckOutHeaderInTable" parameterClass="map" resultClass="java.lang.String">
		select nvl(COUNT(1),0) from exp_chkout_hd
		where flt_key = #flightKey#
			and flt_date = #flightDate#
	</select>  
	<!-- Changed for QR -->
	<update id="saveCheckOutHeaderUpdate" parameterClass="cargo.cms.export.bo.ULDCheckOutBO">
		update exp_chkout_hd set
			OSI_RMK    =   #flightRemarks#,
			LM_USER_ID =   #currentUserID#,
			LM_DATE    =   sysdate
		where
			FLT_KEY	   =   #flightNumber# and
			FLT_DATE   =   #flightDate#
			FLT_TYPE = 'E'
	</update>
	
	<insert id="saveCheckOutHeaderInsert" parameterClass="cargo.cms.export.bo.ULDCheckOutBO">
		insert into exp_chkout_hd(
			FLT_KEY,FLT_DATE,FLT_TYPE,CARR_CODE,OSI_RMK,CR_USER_ID,CR_DATE,
			LM_USER_ID,LM_DATE)
		values(#flightNumber#,#flightDate#,'E',#flightPrefix#,#flightRemarks#,#currentUserID#,sysdate,
		#currentUserID#,sysdate)
	</insert>
	
	<insert id="checkOutULDInsert" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		insert into exp_chkout_dtl(
			FLT_KEY,FLT_DATE,CARR_CODE,ULD_KEY,CONTR_CODE,EIC_IND,EMPTY_IND,CHKOUT_USER,
			CHKOUT_DATE,CHKOUT_TIME,CHKOUT_RMK,LOC_CODE,CHK_FLG,CR_USER_ID,CR_DATE,
			LM_USER_ID,LM_DATE,IU_FROM_IND, CHKOUT_LOCN)
		values (#flightKey#,#flightDate#,#flightPrefix#,#uldKey#,#contourCode#,'N','N',#currentUserID#,
			sysdate,to_char(sysdate, 'HH24MI'),#remarks#,#location#,'Y',#currentUserID#,sysdate,
			#currentUserID#,sysdate,#scrMode#, (SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY = #uldKey#))
	</insert>
	<!-- Changed for QR -->
	<update id="sqlUpdateMhcsIndicator" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
			UPDATE exp_chkout_dtl SET FROM_MHCS = 'Y' where	flt_key = #flightKey# and	flt_date = to_date(#flightDate#, 'DDMONYY') and uld_key = #uldKey# 
	</update>
	
	<select id="holdingPeriodUldAwbs" parameterClass="java.util.HashMap" resultClass="java.util.HashMap"> 
		<![CDATA[
		SELECT T1.AWB_NO AWB_NO, T1.ULD_BT_NO ULD_KEY, T2.HLDG_PERIOD HLDG_PERIOD FROM
        EXP_PMANIFEST_ULD_AWB T1
        LEFT JOIN EXP_CAR T2 ON
        T1.AWB_NO = T2.AWB_NO AND
        T1.AWB_DATE = T2.AWB_DATE
        WHERE 
        T2.HLDG_PERIOD  IS NOT NULL AND T2.HLDG_PERIOD <> 0  AND
        T1.ULD_BT_NO = #ULD_KEY# AND        
        T1.FLT_KEY = #FLT_KEY# AND
        TO_CHAR(T1.FLT_DATE,'DDMONYY') = #FLT_DATE#
        ]]>
	</select>
	
	<select id="checkHoldingPeriodUldAwb" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
	
		  SELECT COUNT(1) FROM EXP_RCL_HD hd
          JOIN AWB awb ON hd.awb_no = awb.awb_no
          and hd.awb_date = awb.awb_date
          where awb.awb_type in ('E','T')
          and awb.awb_no = #AWB_NO# 
          and (hd.rcl_date + TO_NUMBER(#HLDG_PERIOD#)/60/24) > SYSDATE
	
	<!-- 
		 SELECT 'X' FROM DUAL
        WHERE 
          (SELECT RCL_DATE + 
            TO_NUMBER(#HLDG_PERIOD#)/60/24 
          FROM EXP_RCL_HD WHERE AWB_NO=#AWB_NO# AND TO_CHAR(AWB_DATE,'DDMONYY')=(SELECT TO_CHAR(AWB_DATE,'DDMONYY') FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_TYPE IN ('E','T'))) > SYSDATE
         -->
	</select>
	
	<select id="checkForUldLocationInMhs" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT 'X' FROM DUAL WHERE (SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY=#ULD_KEY#) IN 
		(SELECT DISTINCT LOC.CODE FROM MAST_WH_AREA AREA JOIN MAST_WH_GROUP GRP ON AREA.WH_AREA=GRP.WH_AREA 
		JOIN MAST_WH_LOC LOC ON GRP.WH_GROUP = LOC.WH_GROUP  
		WHERE GRP.WH_TYPE='MHS')
	</select>
	
	<select id="getSqlRampAwbListForUld" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	  select substr(eua.awb_no, 1, 3) || '-' || substr(eua.awb_no, 4) as AWB_NO, 
	  decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') as CATALOG
	  from
	  exp_pmanifest_uld_awb  eua
 	  left join awb a on  a.awb_no = eua.awb_no and a.awb_date = eua.awb_date
 	  where eua.uld_bt_no = #ULD_KEY# and eua.flt_key = #FLT_KEY# and eua.flt_date = #FLT_DATE#
 	  union all
 	  select substr(eua.awb_no, 1, 3) || '-' || substr(eua.awb_no, 4) as AWB_NO, 
	  decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') as CATALOG
	  from
	  EXP_PMAN_TARMAC_ULD_AWB  eua
 	  left join awb a on  a.awb_no = eua.awb_no and a.awb_date = eua.awb_date
 	  where eua.uld_bt_no = #ULD_KEY# and eua.flt_key = #FLT_KEY# and eua.flt_date = #FLT_DATE#
	</select>
	
	
	<!-- ##################### ULD Checkout/Unckeckout & Tow Order: Ends ########################################-->
	
	<!-- ##################### Export Ramp - Ramp Monitoring : Starts ########################################-->
	
	<select id="checkRampMonitoringAccess" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT RHO_YN FROM CUST_COMPANY WHERE CODE = (SELECT CUST_NO FROM SEC_USER WHERE CODE= UPPER(#USER_ID#))		
	</select>
	
	<select id="checkForRhoUser" parameterClass="java.lang.String" resultClass="java.lang.String" >
		SELECT distinct b.code AS rhoId 
		FROM CUST_COMPANY b,TOW_ORDER_OUT a WHERE b.code=a.rho_id
		and b.code_desc = #userId# and rownum=1
	</select>
	<select id="sqlExpRampGetFlightList" parameterClass="cargo.cms.export.bo.RampSearchBO" resultClass="cargo.cms.export.bo.RampMonitoringBO">
	
		SELECT T1.FLT_KEY fltKey, TO_CHAR(T1.SCH_DATE,'DDMONYY') fltDate, T1.ACFT_TYPE acftType, T1.ACFT_PRK_BAY parkingBay,
    	DECODE(PKG_COMMON.get_flt_eta(T1.FLT_KEY, T1.SCH_DATE, 'D', 'DD'), NULL,
    	DECODE(T1.SCH_TIME, NULL,NULL,SUBSTR(TRIM(TO_CHAR(NVL(T1.SCH_TIME,0),'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(NVL(T1.SCH_TIME,0),'0000')),3,4)),
		PKG_COMMON.get_flt_eta(T1.FLT_KEY, T1.SCH_DATE, 'D', 'DD'))AS etd,
		DECODE(T1.SCH_TIME, NULL,NULL,SUBSTR(TRIM(TO_CHAR(NVL(T1.SCH_TIME,0),'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(NVL(T1.SCH_TIME,0),'0000')),3,4)) AS std,
		DECODE(T2.BUILDUP_CUSER, NULL,'N', DECODE(T2.BUILDUP_CDATE, NULL,'N', DECODE(T2.BUILDUP_CTIME, NULL, 'N','Y'))) buCompInd,
		DECODE(T1.CHKOUT_AREA,'STG','S','A') AS checkOutMode,
		(select decode(count(1),0,'N','Y') from EXP_CHKOUT_DTL where flt_key=T1.FLT_KEY and flt_date=T1.SCH_DATE and reason is not null) checkOutDiscInd 
		FROM FLT_OPR T1
		LEFT JOIN FLT_OPR_EVENTS T2 ON
		T1.TR_NO = T2.TR_NO AND
		T1.FLT_KEY = T2.FLT_KEY AND
		T1.SCH_DATE = T2.SCH_DATE AND
		T1.FLT_TYPE = T2.FLT_TYPE
		WHERE
		<isNotEmpty property="fltKey">  
		T1.FLT_KEY = #fltKey# AND
		</isNotEmpty>
		<isNotEmpty property="carrCode">  
		T1.CARR_CODE = #carrCode# AND
		</isNotEmpty>
		<isNotEmpty property="acftType">  
		T1.CGO_ACFT_TYPE=#acftType# AND
		</isNotEmpty>
		<![CDATA[
		T2.FLT_CLS_YN = 'N' AND
		T1.FLT_TYPE = 'D' AND 
    	((T1.EST_DATE IS NOT NULL AND T1.EST_TIME IS NOT NULL AND 
		TO_DATE(TO_CHAR(T1.EST_DATE,'DDMONYY')||' '||TO_CHAR(T1.EST_TIME,'0000'),'DDMONYY HH24MI') BETWEEN TO_DATE(#uptoDateTime#,'DDMONYY HH24MI')-2 AND TO_DATE(#uptoDateTime#,'DDMONYY HH24MI'))
		OR
		(TO_DATE(TO_CHAR(T1.SCH_DATE,'DDMONYY')||' '||TO_CHAR(T1.SCH_TIME,'0000'),'DDMONYY HH24MI') BETWEEN TO_DATE(#uptoDateTime#,'DDMONYY HH24MI')-2 AND TO_DATE(#uptoDateTime#,'DDMONYY HH24MI')))
		ORDER BY NVL(T1.EST_DATE,T1.SCH_DATE) desc,  NVL(etd,std) desc
		]]>
	</select>
	
	<select id="checkUptoTimeExeeds" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT 'X' FROM DUAL
    	WHERE ((TO_DATE(#uptoDateTime#,'DDMONYY HH24MI') - SYSDATE)*24) > 12
    
	</select>
	
	<select id="sqlExpRampChkUldReadyDisp" parameterClass="java.util.HashMap" resultClass="java.lang.String"> 
		SELECT NVL(READY_WH,'N') FROM EXP_PMANIFEST_ULD WHERE 
		ULD_BT_NO = #ULD_KEY# 
		AND FLT_KEY = #FLT_KEY# 
		AND FLT_DATE = #FLT_DATE#		
	</select>
	
	<select id="sqlExpRampChkUldReadyWhInd" parameterClass="java.util.HashMap" resultClass="java.lang.String"> 
		SELECT NVL(ready_wh,'N') FROM EXP_PMANIFEST_ULD WHERE 
		ULD_BT_NO = #ULD_KEY# 
		AND FLT_KEY = #FLT_KEY# 
		AND FLT_DATE = #FLT_DATE#		
	</select>	
	
	
	<select id="sqlExpRampGetUrfList" parameterClass="cargo.cms.export.bo.RampSearchBO" resultClass="cargo.cms.export.bo.RampMonitoringBO">
		<![CDATA[
		SELECT T1.EIR_NO urfNo, TO_CHAR(T1.EST_TIME,'DDMONYY HH24:MI') estDateTime, T1.PURPOSE purpose FROM ULD_ISS_HD T1 
		WHERE 
		T1.EST_TIME BETWEEN TO_DATE(#from#,'DDMONYY HH24MI') AND TO_DATE(#to#,'DDMONYY HH24MI')
		AND (SELECT COUNT(ULD_KEY) FROM ULD_REL_DTL WHERE EIR_NO = T1.EIR_NO) >0
		and not (t1.purpose = 'Agt' and nvl(t1.airside_rel, 'N') = 'N')
		]]>
		<isNotEmpty property="carrCode">
		AND T1.CARR_CODE = #carrCode#
		</isNotEmpty>
		<isNotEmpty property="loginCarrier">
        AND (T1.CARR_CODE = #loginCarrier# 
        OR T1.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE= #loginCarrier#))
        </isNotEmpty>
		<isNotEmpty property="loginAsRho">
		AND EXISTS (SELECT NULL FROM ULD_REL_DTL REL,EXP_ULD_HOVER_DTL EXPHOVER WHERE EXPHOVER.HO_FORM_NO = REL.HO_FORM_NO AND EXPHOVER.ULD_KEY = REL.ULD_KEY AND REL.EIR_NO=T1.EIR_NO AND EXPHOVER.RAMP_USER = #loginAsRho# AND ROWNUM=1)
		</isNotEmpty>
		order by T1.EST_TIME desc
	</select>
	
<select id="sqlExpRampGetTowList" parameterClass="cargo.cms.export.bo.RampSearchBO" resultClass="cargo.cms.export.bo.RampMonitoringBO">
		<![CDATA[
		SELECT 
        (CASE WHEN (SELECT COUNT(1) FROM 
      TOW_ORDER_OUT OUTHD, 
      TOW_ORDER_OUT_DTL OUTDTL, 
      EXP_ULD_HOVER_DTL HODTL
      WHERE 
      OUTDTL.TO_NO = OUTHD.TO_NO
      AND HODTL.FLT_KEY = OUTHD.FLT_KEY
      AND HODTL.FLT_DATE = OUTHD.FLT_DATE
      AND HODTL.ULD_KEY = OUTDTL.ULD_KEY
      AND HODTL.COOL_DOLLY_ID IS NOT NULL
      AND OUTHD.TO_NO = T1.TO_NO) > 0 THEN T1.TO_NO||'*' ELSE T1.TO_NO END) AS towOrderNo, 
      T1.DEST_CODE dest FROM TOW_ORDER_OUT T1
		left join flt_opr fo on fo.flt_key = T1.flt_key and fo.sch_date = T1.flt_DATE
		WHERE T1.EST_TIME BETWEEN TO_DATE(#from#, 'DDMONYY HH24MI') AND TO_DATE(#to#, 'DDMONYY HH24MI') 
		AND T1.TYPE = 'Adhoc' AND T1.STATUS NOT IN ('VOID')
		]]>
		<isNotEmpty property="loginCarrier">
           <![CDATA[    
               AND (fo.CARR_CODE = #loginCarrier#
                OR fo.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE= #loginCarrier#))
            ]]>
        </isNotEmpty>
        <isEmpty property="loginCarrier">
		<isNotEmpty prepend="AND" property="loginCustCode">
		    fo.RHO_ID = #loginCustCode#
		</isNotEmpty>
		</isEmpty>
	</select>
	
	<select id="sqlExpRampGetFlightDetails" parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="cargo.cms.export.bo.RampMonitoringBO">
	
		SELECT T1.FLT_KEY fltKey, T1.CARR_CODE carrCode, T1.FLT_NO fltNo, TO_CHAR(T1.SCH_DATE,'DDMONYY') fltDate, T1.ACFT_TYPE acftType, T1.ACFT_PRK_BAY parkingBay,
		DECODE(PKG_COMMON.get_flt_eta(#fltKey#, TO_DATE(#fltDate#,'DDMONYY'), 'D', 'DD'), null,
    	DECODE(T1.SCH_TIME, NULL,NULL,SUBSTR(TRIM(TO_CHAR(NVL(T1.SCH_TIME,0),'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(NVL(T1.SCH_TIME,0),'0000')),3,4)),
		PKG_COMMON.get_flt_eta(#fltKey#, TO_DATE(#fltDate#,'DDMONYY'), 'D', 'DD')) AS etd,
		DECODE(T1.SCH_TIME, NULL,NULL,SUBSTR(TRIM(TO_CHAR(NVL(T1.SCH_TIME,0),'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(NVL(T1.SCH_TIME,0),'0000')),3,4)) AS std,
		DECODE(T2.BUILDUP_CUSER, NULL,'N', DECODE(T2.BUILDUP_CDATE, NULL,'N', DECODE(T2.BUILDUP_CTIME, NULL, 'N','Y'))) buCompInd,
		DECODE(T1.CHKOUT_AREA,'STG','S','A') AS checkOutMode,
		   (SELECT DECODE(COUNT(1), 0, NULL, COUNT(1))
    FROM EXP_CHKOUT_DTL CHK
    WHERE T1.FLT_KEY  = CHK.FLT_KEY
    AND T1.SCH_DATE   = CHK.FLT_DATE
   
    AND CHK.HO_FORM_NO  IS NULL
    ) AS hoCount
		FROM FLT_OPR T1
		LEFT JOIN FLT_OPR_EVENTS T2 ON
		T1.TR_NO = T2.TR_NO AND
		T1.FLT_KEY = T2.FLT_KEY AND
		T1.SCH_DATE = T2.SCH_DATE AND
		T1.FLT_TYPE = T2.FLT_TYPE
		WHERE
		T1.FLT_KEY = #fltKey# AND
		TO_CHAR(T1.SCH_DATE,'DDMONYY') = #fltDate# AND
		T1.FLT_TYPE = 'D'
		
	</select>
	<select id="sqlExpRampGetUrfDetails" parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="cargo.cms.export.bo.RampMonitoringBO">
		
		SELECT T1.EIR_NO urfNo, TO_CHAR(T1.EST_TIME,'DDMONYY HH24:MI') estDateTime, T1.PURPOSE purpose FROM ULD_ISS_HD T1 
		WHERE 
		T1.EIR_NO = #urfNo#
		
	</select>
	
	
	<select id="getRampAssignedUldSumForFlight"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT 
    	FROM EXP_FLT_ULD T1
    	LEFT JOIN EXP_CHKOUT_DTL T4 ON  T4.FLT_KEY = T1.FLT_KEY AND T4.FLT_DATE = T1.FLT_DATE AND T4.ULD_KEY = T1.ULD_KEY
		WHERE 
		T1.FLT_KEY = #fltKey# AND 
		TO_CHAR(T1.FLT_DATE,'DDMONYY') = #fltDate# 
		AND NVL(T1.HANDLING_MODE,'N')!='DT'
    	AND ( NOT (NVL(T1.TRANSIT_TYPE,'*') = 'TT' or (NVL(T1.TRANSIT_TYPE,'*') = 'IF' and T1.LOC_CODE is null)) OR  NVL(T4.CHK_FLG,'N') = 'Y')
    	AND T1.SOURCE not in ('DLS-L','DLS-E')
		GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampUldAllotByUldType"  parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT ALLOT.ULD_ALLOT
		FROM ULD_GROUP_TYPE GRP JOIN MAST_ULD_ALLOT_GROUP ALLOT ON GRP.ULD_GROUP=ALLOT.ULD_GROUP 
		WHERE GRP.ULD_TYPE=#uldType#
	</select>
	
	<select id="getRampToBeTowedSumForFlight"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT 
    	FROM EXP_FLT_ULD T1
		LEFT JOIN EXP_CHKOUT_DTL T3 ON T3.FLT_KEY = T1.FLT_KEY AND T3.FLT_DATE = T1.FLT_DATE AND T3.ULD_KEY = T1.ULD_KEY
		WHERE 		
		T1.FLT_KEY = #fltKey# AND 
		TO_CHAR(T1.FLT_DATE,'DDMONYY') = #fltDate# AND 
		EXISTS (select null from tow_order_out t3,tow_order_out_dtl t4
                                where t3.to_no=t4.to_no and not(status='VOID' or(status ='FORCE COMPLETE' and remove_date is null))
                                 and uld_key=t1.uld_key and flt_key=t1.flt_key and flt_date=t1.flt_date)
		AND NVL(T1.HANDLING_MODE,'N')!='DT'
    	AND ( NOT (NVL(T1.TRANSIT_TYPE,'*') = 'TT' or (NVL(T1.TRANSIT_TYPE,'*') = 'IF' and NVL(T3.CHK_FLG,'N') = 'Y')) )
    	AND T1.SOURCE not in ('DLS-L','DLS-E')
		GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampWithOutUldSumForFlight"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT 
    	FROM EXP_FLT_ULD T1
		WHERE 		
		T1.FLT_KEY = #fltKey# AND 
		TO_CHAR(T1.FLT_DATE,'DDMONYY') = #fltDate# AND NOT EXISTS (select null from tow_order_out t3,tow_order_out_dtl t4
                                where t3.to_no=t4.to_no and not(status='VOID' or(status ='FORCE COMPLETE' and remove_date is null))
                                 and uld_key=t1.uld_key and flt_key=t1.flt_key and flt_date=t1.flt_date)
		AND NVL(T1.HANDLING_MODE,'N')!='DT'
    	AND ( NOT (NVL(T1.TRANSIT_TYPE,'*') = 'TT' or (NVL(T1.TRANSIT_TYPE,'*') = 'IF' and T1.LOC_CODE is null)) )
    	AND T1.SOURCE not in ('DLS-L','DLS-E')
		GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampCheckOutUldSumForFlight"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM EXP_CHKOUT_DTL T1
		JOIN EXP_FLT_ULD T2 ON T1.ULD_KEY = T2.ULD_KEY AND  T1.FLT_KEY = T2.FLT_KEY AND T1.FLT_DATE = T2.FLT_DATE
		WHERE T1.FLT_KEY = #fltKey# AND
		TO_CHAR(T1.FLT_DATE,'DDMONYY') = #fltDate# AND
		T1.CHK_FLG = 'Y' AND T1.CHKOUT_DATE IS NOT NULL AND T1.CHKOUT_TIME IS NOT NULL
		AND NVL(T2.HANDLING_MODE,'N')!='DT'
		GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampNotCheckOutUldSumForFlight"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM EXP_CHKOUT_DTL T1
		JOIN EXP_FLT_ULD T2 ON T1.ULD_KEY = T2.ULD_KEY AND  T1.FLT_KEY = T2.FLT_KEY AND T1.FLT_DATE = T2.FLT_DATE
		WHERE T1.FLT_KEY = #fltKey# AND
		TO_CHAR(T1.FLT_DATE,'DDMONYY') = #fltDate# AND
		(T1.CHK_FLG IS NULL OR CHK_FLG = 'N') AND T1.CHKOUT_DATE IS NULL AND T1.CHKOUT_TIME IS NULL
		AND NVL(T2.HANDLING_MODE,'N')!='DT'
		GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampAssignedUldSumForUrf"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM ULD_REL_DTL T1
		LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = T1.HO_FORM_NO AND EXPHOVER.ULD_KEY = T1.ULD_KEY
		WHERE
		T1.EIR_NO = #urfNo#
		AND T1.ULD_KEY IS NOT NULL
		<isNotEmpty property="loginAsRho">
		AND EXPHOVER.RAMP_USER=#loginAsRho# and EXPHOVER.RAMP_USER is not null 
		</isNotEmpty>
		GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampFlightTowIssued"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.lang.String">
			SELECT DECODE(COUNT(TO_NO),0,NULL,COUNT(TO_NO)) FROM TOW_ORDER_OUT WHERE STATUS='ISSUED' AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
	</select>
	<select id="getRampFlightTowCompleted"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.lang.String">
	SELECT DECODE(COUNT(TO_NO),0,NULL,COUNT(TO_NO)) FROM TOW_ORDER_OUT WHERE STATUS in ('COMPLETE','FORCE COMPLETE') AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
	</select>
	
	<select id="getRampURFTowIssued"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.lang.String">
	  select DECODE(COUNT(TO_NO),0,NULL,COUNT(TO_NO)) from TOW_ORDER_OUT where  to_no in 
		(select to_no from TOW_ORDER_OUT_DTL where uld_key in (SELECT uld_key FROM ULD_REL_DTL T1 WHERE	T1.EIR_NO = #urfNo#	AND T1.ULD_KEY IS NOT NULL) group by to_no)
		 and STATUS='ISSUED'  
	</select>
	
	<select id="getRampURFTowCompleted"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.lang.String">
		select DECODE(COUNT(TO_NO),0,NULL,COUNT(TO_NO)) from TOW_ORDER_OUT where  to_no in 
		(select to_no from TOW_ORDER_OUT_DTL where uld_key in (SELECT uld_key FROM ULD_REL_DTL T1 WHERE	T1.EIR_NO = #urfNo#	AND T1.ULD_KEY IS NOT NULL) group by to_no)
		 and STATUS in ('COMPLETE','FORCE COMPLETE')		
	</select>
	
	<select id="getRampToBeTowedSumForUrf"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM ULD_REL_DTL T1
		LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = T1.HO_FORM_NO AND EXPHOVER.ULD_KEY = T1.ULD_KEY
		WHERE 
		T1.EIR_NO = #urfNo# AND 
		T1.ULD_KEY IS NOT NULL AND
		T1.ULD_KEY IN (SELECT ULD_KEY FROM TOW_ORDER_OUT_DTL WHERE TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT WHERE URF_NO = T1.EIR_NO))
		<isNotEmpty property="loginAsRho">
		AND EXPHOVER.RAMP_USER=#loginAsRho# and EXPHOVER.RAMP_USER is not null 
		</isNotEmpty>		
		GROUP BY T1.ULD_KEY
	</select>
	
	<select id="getRampWithOutUldSumForUrf"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM ULD_REL_DTL T1
		LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = T1.HO_FORM_NO AND EXPHOVER.ULD_KEY = T1.ULD_KEY
		WHERE 
		T1.EIR_NO = #urfNo# AND 
		T1.ULD_KEY IS NOT NULL AND	NOT EXISTS 
    	(SELECT NULL FROM TOW_ORDER_OUT_DTL DTL,TOW_ORDER_OUT HD WHERE DTL.TO_NO = HD.TO_NO AND DTL.CR_DATE&gt;T1.CR_DATE AND HD.STATUS NOT IN ('VOID') AND DTL.ULD_KEY=T1.ULD_KEY)
    	<isNotEmpty property="loginAsRho">
		AND EXPHOVER.RAMP_USER=#loginAsRho# and EXPHOVER.RAMP_USER is not null 
		</isNotEmpty>
		GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampCheckOutUldSumForUrf"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM ULD_REL_DTL T1
		LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = T1.HO_FORM_NO AND EXPHOVER.ULD_KEY = T1.ULD_KEY
		WHERE 
		T1.EIR_NO = #urfNo# AND 
		T1.ULD_KEY IS NOT NULL AND
		EXISTS (SELECT 1 FROM ULD_INVENTORY WHERE OWNED_INV='N' AND ULD_KEY=T1.ULD_KEY)
		<isNotEmpty property="loginAsRho">
		AND EXPHOVER.RAMP_USER=#loginAsRho# and EXPHOVER.RAMP_USER is not null 
		</isNotEmpty>
		GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampNotCheckOutUldSumForUrf"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM ULD_REL_DTL T1
		LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = T1.HO_FORM_NO AND EXPHOVER.ULD_KEY = T1.ULD_KEY
		WHERE 
		T1.EIR_NO = #urfNo# AND 
		T1.ULD_KEY IS NOT NULL AND
		EXISTS (SELECT 1 FROM ULD_INVENTORY WHERE OWNED_INV='Y' AND ULD_KEY=T1.ULD_KEY)
		<isNotEmpty property="loginAsRho">
		AND EXPHOVER.RAMP_USER=#loginAsRho# and EXPHOVER.RAMP_USER is not null 
		</isNotEmpty>
		GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampToBeTowedSumForTow"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM TOW_ORDER_OUT_DTL T1 
		WHERE T1.TO_NO = #towOrderNo#
		GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampCheckOutUldSumForTow"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM TOW_ORDER_OUT_DTL T1 WHERE T1.TO_NO = #towOrderNo# AND T1.ULD_KEY IS NOT NULL 
		AND	REMOVE_DATE IS NOT NULL	GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
	
	<select id="getRampNotCheckOutUldSumForTow"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(T1.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM TOW_ORDER_OUT_DTL T1 WHERE T1.TO_NO = #towOrderNo# AND T1.ULD_KEY IS NOT NULL 
		AND	REMOVE_DATE IS NULL	GROUP BY SUBSTR(T1.ULD_KEY,1,3)
	</select>
		
	<select id="sqlExpRampGetFlightUldList"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="cargo.cms.export.bo.RampMonitoringBO">
	  <![CDATA[
		SELECT CASE 
           WHEN NVL(IN_REJECT,'N') = 'Rejected' AND CHK_FLG = 'N' THEN 1
           WHEN IN_MHS = '0' AND ON_RAMP = '0' AND IN_SR = '0' AND IN_IC = '0' AND VALID_LOC = 'Y' AND CHK_FLG = 'N' THEN 2
           WHEN IN_MHS = '1' AND VALID_LOC = 'Y' AND CHK_FLG = 'N' THEN 3
           WHEN IN_IC = '1' AND VALID_LOC = 'Y' AND CHK_FLG = 'N' THEN 4
           WHEN IN_SR = '1' AND VALID_LOC = 'Y' AND CHK_FLG = 'N' THEN 5
           WHEN ON_RAMP = '1' AND VALID_LOC = 'Y' AND CHK_FLG = 'N' THEN 6
           when CHK_FLG = 'Y' THEN 6
           ELSE 7
      END  orderState,A.* FROM (SELECT ULDFLT.ULD_KEY uldKey, (
		  SELECT CODE_DESC_SPL
		  FROM MAST_CODE_DTL
		  WHERE CODE_TYPE = 'ULD_STATE' 
		  AND CODE = DECODE(CHK.CHK_FLG, 'Y', ULD_STATE, FUN_GET_ULD_STATE(ULDFLT.ULD_KEY))
		) status, (
		  SELECT DECODE(COUNT(1), 0, '0', '1')
		  FROM MAST_WH_LOC WH
		  JOIN MAST_WH_GROUP GRP
		  ON WH.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'MHS'
		  WHERE WH.CODE = ULDFLT.LOC_CODE AND NVL(CHK.CHK_FLG, 'N') = 'N' AND ULDFLT.LOC_CODE IS NOT NULL
		) IN_MHS, (
		  SELECT DECODE(COUNT(1), 0, '0', '1')
		  FROM MAST_WH_LOC WH
		  WHERE WH.CODE = ULDFLT.LOC_CODE AND WH.LOC_SIDE = 'RAMP' 
		  AND NVL(CHK.CHK_FLG, 'N') = 'N' AND ULDFLT.LOC_CODE IS NOT NULL
		) ON_RAMP,
    ( SELECT DECODE(COUNT(1), 0, '0', '1')
			FROM MAST_WH_LOC WH
			JOIN MAST_WH_GROUP GRP
			ON WH.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'SR'
			WHERE WH.CODE = ULDFLT.LOC_CODE
     ) IN_SR,
     ( SELECT DECODE(COUNT(1), 0, '0', '1')
			   FROM MAST_WH_LOC WH
			   JOIN MAST_WH_GROUP GRP
			   ON WH.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'IA'
			   WHERE WH.CODE = ULDFLT.LOC_CODE
			 ) IN_IC,
       (SELECT HO_STATUS FROM EXP_ULD_HOVER_REJ_DTL HOVERDTL WHERE HOVERDTL.FLT_KEY=ULDFLT.FLT_KEY AND HOVERDTL.FLT_DATE=ULDFLT.FLT_DATE AND HOVERDTL.ULD_KEY=ULDFLT.ULD_KEY) AS IN_REJECT,
CASE
		  WHEN PMAN.ULD_BT_NO IS NOT NULL THEN NVL(PMAN.READY_DISP, 'N')
		  ELSE DECODE(ULDFLT.OFLD_FLG, 'Y', 'N', 'Y')
		END AS readyForDisp,
		CASE
		  WHEN PMAN.ULD_BT_NO IS NOT NULL THEN NVL(PMAN.READY_WH, 'N')
		  ELSE DECODE(ULDFLT.OFLD_FLG, 'Y', 'N', 'Y')
		END AS readyWh,
    DECODE(ULDFLT.LOC_CODE, NULL, 'N', 'Y') VALID_LOC,
    NVL(CHK.CHK_FLG, 'N') CHK_FLG,
    CASE
		  WHEN PMAN.ULD_BT_NO IS NOT NULL THEN NVL(PMAN.BLDUP_COMPLETE, 'N')
		  ELSE 'Y'
		END AS buCompInd, (
		  SELECT STRAGG(STRINGDELIM(CODE, ','))
		  FROM V_EXP_ULD_SHC
		  WHERE ULD_KEY = ULDFLT.ULD_KEY AND ROWNUM < 10
		) splCodes,
		ULDFLT.EIC_FLG eicInd, ULDFLT.EMPTY_FLG emptyInd, ULDFLT.LOC_CODE location,
		TO_EXP.TO_NO  AS towOrderNo, CHK.FROM_MHCS AS mhcsCheckOutInd,
		DECODE(CHK.CHKOUT_TIME, NULL, '', SUBSTR(lpad(CHK.CHKOUT_TIME, 4, 0), 1, 2)
		  || ':' || SUBSTR(lpad(CHK.CHKOUT_TIME,4,0), 3)) AS checkOutTime,
		DECODE(EXPHOVER.PRINT_HANDOVER_DATE,NULL,'N', 'Y') AS hoInd,
		TO_EXP.HO_AREA hoArea,
		NVL((
		    SELECT ERR_DESC FROM ERR_MSG WHERE ERR_CODE = CHK.REASON AND ROWNUM = 1
		  ), CHK.REASON
		) AS reason,
		TO_CHAR(CHK.MHCS_CHKOUT_TIME,'HH24:MI') AS mhsCheckOutTime, ULDFLT.CONTR_CODE AS contourCode,
		(case when ULDFLT.FINAL_WEIGHT ='Y' and ULDFLT.FIRST_WT != ULDFLT.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff,
		 (SELECT DECODE(COUNT(1), 0, NULL, COUNT(1))
    FROM EXP_CHKOUT_DTL CHK
    WHERE ULDFLT.FLT_KEY = CHK.FLT_KEY
    AND ULDFLT.FLT_DATE  = CHK.FLT_DATE
    AND ULDFLT.ULD_KEY = CHK.ULD_KEY
    AND CHK.HO_FORM_NO IS  NULL
    ) AS hoCount,
    (CASE WHEN (SELECT COUNT(1) FROM EXP_ULD_HOVER_REJ_DTL REJDTL WHERE REJDTL.FLT_KEY=ULDFLT.FLT_KEY AND REJDTL.FLT_DATE=ULDFLT.FLT_DATE AND REJDTL.ULD_KEY = ULDFLT.ULD_KEY) >0 THEN 'Rejected' ELSE  EXPHOVER.HO_STATUS END) AS hoStatus,
    DECODE(ULDFLT.FINAL_WEIGHT,'Y','Y','N') as finalWeight,
         (CASE WHEN ((DECODE(ULDFLT.PPK_IND,'Y','Y',DECODE(ULDFLT.MIX_PPK_IND,'Y','Y','N')) = 'N') AND
          NVL(PMAN.bldup_complete,'N') = 'N') THEN 'N' ELSE 'Y' END) as buComplete,
    UIT_PRINT as printed  
		FROM EXP_FLT_ULD ULDFLT
		LEFT JOIN EXP_PMANIFEST_ULD PMAN ON PMAN.FLT_KEY = ULDFLT.FLT_KEY AND PMAN.FLT_DATE = ULDFLT.FLT_DATE AND PMAN.ULD_BT_NO = ULDFLT.ULD_KEY		
		LEFT JOIN EXP_CHKOUT_DTL CHK ON CHK.FLT_KEY = ULDFLT.FLT_KEY AND CHK.FLT_DATE = ULDFLT.FLT_DATE AND CHK.ULD_KEY  = ULDFLT.ULD_KEY
    LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER  ON EXPHOVER.HO_FORM_NO = CHK.HO_FORM_NO AND EXPHOVER.ULD_KEY = CHK.ULD_KEY
		LEFT JOIN (
		  SELECT TO_OUT.FLT_KEY, TO_OUT.FLT_DATE,
		  TO_OUT_DTL.ULD_KEY, LPAD(MAX(TO_NUMBER(TO_OUT.TO_NO)), 8, 0) TO_NO
		  FROM TOW_ORDER_OUT TO_OUT,
		  TOW_ORDER_OUT_DTL TO_OUT_DTL
		  WHERE (
		    STATUS IN ('ISSUED','COMPLETE','START') OR (STATUS = 'FORCE COMPLETE' AND TO_OUT_DTL.remove_date IS NOT NULL)
		  )
		  AND TO_OUT.TO_NO = TO_OUT_DTL.TO_NO
		  GROUP BY TO_OUT.FLT_KEY, TO_OUT.FLT_DATE, TO_OUT_DTL.ULD_KEY
		) TO_ULD
		ON TO_ULD.FLT_KEY = ULDFLT.FLT_KEY AND TO_ULD.FLT_DATE = ULDFLT.FLT_DATE AND TO_ULD.ULD_KEY = ULDFLT.ULD_KEY
		LEFT JOIN TOW_ORDER_OUT TO_EXP
		ON TO_EXP.TO_NO = TO_ULD.TO_NO
		WHERE ULDFLT.FLT_KEY = #fltKey# AND TO_CHAR(ULDFLT.FLT_DATE, 'DDMONYY') = #fltDate#
		AND NVL(ULDFLT.HANDLING_MODE,'N') != 'DT' AND (
		  NOT (
		    NVL(ULDFLT.TRANSIT_TYPE, '*') = 'TT'
		    OR (NVL(ULDFLT.TRANSIT_TYPE, '*') = 'IF' AND ULDFLT.LOC_CODE IS NULL)
		  )
		  OR CHK.CHK_FLG = 'Y'
		)
		AND ULDFLT.SOURCE NOT IN ('DLS-L','DLS-E')
    	) A
		ORDER BY orderState,HOAREA,LOCATION 
	  ]]>
	 </select>
	
	<select id="sqlExpRampGetUrfUldList"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="cargo.cms.export.bo.RampMonitoringBO">
		SELECT T5.ULD_KEY uldKey,(
    SELECT to_char(T3.REMOVE_DATE,'DDMONYY HH24:MI') 
    FROM tow_order_out_dtl T3
    JOIN ULD_REL_DTL T1 ON T1.ULD_KEY IS NOT NULL
    JOIN tow_order_out T2 ON T2.TO_NO=T3.TO_NO AND T2.URF_NO=T1.EIR_NO AND T3.ULD_KEY=T1.ULD_KEY
    WHERE T3.ULD_KEY=T5.ULD_KEY AND T1.EIR_NO = T5.EIR_NO and EXISTS (SELECT 1 FROM ULD_INVENTORY WHERE OWNED_INV='N' AND ULD_KEY=T1.ULD_KEY)) checkOutTime
    FROM ULD_REL_DTL T5
    WHERE T5.EIR_NO=#urfNo# and T5.ULD_KEY IS NOT NULL
	</select>
		
	<select id="sqlExpRampGetTowUldList"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="cargo.cms.export.bo.RampMonitoringBO">
		SELECT T1.ULD_KEY uldKey, decode(T1.REMOVE_DATE, null, '', TO_CHAR(T1.REMOVE_DATE,'HH24:MI')) checkOutTime
		FROM TOW_ORDER_OUT_DTL T1 
		WHERE T1.TO_NO = #towOrderNo#				
	</select>
	
	<!-- #####################  Export Ramp - Ramp Monitoring : Ends  ########################################-->
	
	<!-- #####################  Export Ramp - Notify Tow Order : Starts  ########################################-->
	
	<select id="sqlgettoworderFlightDetails" parameterClass="cargo.cms.export.bo.EnquiryTowOrderTODetailsBO"  resultClass="cargo.cms.export.bo.OBTowOrderBO">
		SELECT FLT_KEY as fltKey,TO_CHAR(FLT_DATE,'DDMONYY') as fltDate,TO_CHAR(EST_TIME,'DDMONYY') as estimatedDate,TO_CHAR(EST_TIME,'HH24') as estimatedHour,
		TO_CHAR(EST_TIME,'MI') as estimatedMinute,ho_area as hoArea,ho_area2 as hoArea2 
		FROM tow_order_out  where to_no=#toNo#
	</select>
	
	<select id="sqlRampUnNotifiedTows" resultClass="cargo.cms.export.bo.OBTowOrderBO">
		<![CDATA[
			SELECT
		    T1.TO_NO towOrderNo, T1.TYPE towType, T1.RHO_ID rhoId, T1.VER_NO verNo, T1.FLT_KEY fltKey, TO_CHAR(T1.FLT_DATE,'DDMONYY') fltDate,
		    T1.URF_NO urfNo, T1.DEST_CODE destCode, T1.EST_TIME estimatedDate, T1.HO_AREA hoArea, T1.STATUS status, T1.NOTF_SEND_DATE notificationDate,
		    T1.REM_1_DATE firstReminder, T1.REM_2_DATE secondReminder, T1.VOID_USER_ID voidUserId, T1.VOID_DATE voidDate, T1.CR_USER_ID issueUser, 
		    T1.CR_DATE issueDate, T1.LM_USER_ID alterUser, T1.LM_DATE alterDate, T1.FLT_TYPE fltType, T1.REMARKS remarks,
		    (SELECT COUNT(ULD_KEY) FROM TOW_ORDER_OUT_DTL WHERE TO_NO = T1.TO_NO)toUldCount
		    FROM TOW_ORDER_OUT T1
		    WHERE T1.STATUS = 'ISSUED'
		    AND T1.REM_1_DATE IS NULL 
		    AND (CR_DATE + (NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'EXP_TOW_REMIND_1'), 30) / 1440)) <= SYSDATE
	    ]]>
	</select>
	<select id="getHoZoneDetailsforGenTO" parameterClass="cargo.cms.export.bo.OBTowOrderBO" resultClass="cargo.cms.export.bo.OBTowOrderBO">
	SELECT t.hoZone as hoZone, T.allotment AS allotment from (SELECT  HO_ZONE as hoZone, ALLOTMENT AS allotment, 99999 as ACFT_TYPE,PRIORITY FROM MAST_EXP_ULD_HO_ZONE 
	WHERE ACFT_TYPE IN (SELECT CGO_ACFT_TYPE FROM FLT_OPR WHERE FLT_KEY=#fltKey# AND SCH_DATE=#fltDate# AND FLT_TYPE='D') 
	UNION ALL
	SELECT  HO_ZONE as hoZone, ALLOTMENT as allotment, null ACFT_TYPE,PRIORITY  FROM MAST_EXP_ULD_HO_ZONE WHERE 
	((ACFT_TYPE IS NULL) OR (ACFT_TYPE IS NOT NULL AND ACFT_TYPE NOT IN (SELECT CGO_ACFT_TYPE FROM FLT_OPR WHERE FLT_KEY=#fltKey# AND SCH_DATE=#fltDate# AND FLT_TYPE='D'))))T
	ORDER BY T.ACFT_TYPE,T.PRIORITY DESC
	</select>
	<select id="getULDCountforEnqTO" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT COUNT(DTL.ULD_KEY) FROM TOW_ORDER_OUT HD, TOW_ORDER_OUT_DTL DTL
	WHERE DTL.TO_NO = HD.TO_NO AND HD.TO_NO=#toNo# GROUP BY DTL.to_no
	</select>
	<select id="getAvailAllotmentsforNewHOZone" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT ALLOTMENT FROM MAST_EXP_ULD_HO_ZONE WHERE HO_ZONE=#hoZone#
	</select>
	<select id="getHOZONEforEnqTO" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT HD.HO_ZONE FROM TOW_ORDER_OUT HD WHERE HD.TO_NO=#toNo#
	</select>
	<update id="decreaseAllotmentsinMaster" parameterClass="java.util.HashMap">
		UPDATE MAST_EXP_ULD_HO_ZONE SET ALLOTMENT = ALLOTMENT - #allotment# WHERE HO_ZONE = #hoZone#
	</update>
	<update id="increaseAllotmentsinMaster" parameterClass="java.util.HashMap">
		UPDATE MAST_EXP_ULD_HO_ZONE SET ALLOTMENT = ALLOTMENT + #allotment# WHERE HO_ZONE = #hoZone#
	</update>
	<update id="updateHoZoneIntotheTowOrder" parameterClass="java.util.HashMap">
		UPDATE TOW_ORDER_OUT SET HO_ZONE=#hoZone# WHERE TO_NO=#towOrderNum#
	</update>
	<update id="updateShiftDetailsIntotheTowOrder" parameterClass="java.util.HashMap">
		UPDATE TOW_ORDER_OUT SET shift_time=#shiftTime#,shift_user=#shiftUser#,manual_assign='Y',MAN_ASSIGN_DATE=SYSDATE WHERE TO_NO=#towNumber#
	</update>
	<select id="sqlRampOnceNotifiedTows" resultClass="cargo.cms.export.bo.OBTowOrderBO">
		<![CDATA[
			SELECT
		    T1.TO_NO towOrderNo, T1.TYPE towType, T1.RHO_ID rhoId, T1.VER_NO verNo, T1.FLT_KEY fltKey, TO_CHAR(T1.FLT_DATE,'DDMONYY') fltDate,
		    T1.URF_NO urfNo, T1.DEST_CODE destCode, T1.EST_TIME estimatedDate, T1.HO_AREA hoArea, T1.STATUS status, T1.NOTF_SEND_DATE notificationDate,
		    T1.REM_1_DATE firstReminder, T1.REM_2_DATE secondReminder, T1.VOID_USER_ID voidUserId, T1.VOID_DATE voidDate, T1.CR_USER_ID issueUser, 
		    T1.CR_DATE issueDate, T1.LM_USER_ID alterUser, T1.LM_DATE alterDate, T1.FLT_TYPE fltType, T1.REMARKS remarks,
		    (SELECT COUNT(ULD_KEY) FROM TOW_ORDER_OUT_DTL WHERE TO_NO = T1.TO_NO)toUldCount
		    FROM TOW_ORDER_OUT T1
		    WHERE T1.STATUS = 'ISSUED'
		    AND T1.REM_1_DATE IS NOT NULL 
		    AND T1.REM_2_DATE IS NULL 
		    AND (CR_DATE + (NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'EXP_TOW_REMIND_2'), 45) / 1440)) <= SYSDATE
	    ]]>
	</select>
	
	<select id="getTowOrderOutUldList" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT ULD_KEY FROM TOW_ORDER_OUT_DTL WHERE TO_NO = #PARAM#
	</select>	
	
	<update id="sqlRampSetOnceNotifiedTows" parameterClass="cargo.cms.export.bo.OBTowOrderBO">
		UPDATE TOW_ORDER_OUT SET REM_1_DATE = SYSDATE, LM_USER_ID = 'SYSTEM',LM_DATE = SYSDATE
    	WHERE TO_NO = #towOrderNo#
	</update>
	
	<update id="sqlRampSetTwiceNotifiedTows" parameterClass="cargo.cms.export.bo.OBTowOrderBO">
		UPDATE TOW_ORDER_OUT SET REM_2_DATE = SYSDATE, LM_USER_ID = 'SYSTEM',LM_DATE = SYSDATE
    	WHERE TO_NO = #towOrderNo#
	</update>
	
	<select id="sqlExpRampGetRhoContactDetailsById" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.RhoEmailFaxBO">
		SELECT 
		EMAIL1 AS emailAddress1, EMAIL2 AS emailAddress2, EMAIL3 AS emailAddress3, 
    	EMAIL4 AS emailAddress4, EMAIL5 AS emailAddress5,
		FAX1 AS faxNumber1, FAX2 AS faxNumber2, FAX3 AS faxNumber3 
		FROM CUST_COMPANY WHERE CODE = #RHO_ID#	
	</select>
		
	<!-- #####################  Export Ramp - Notify Tow Order : Ends  ########################################-->
	<!-- Entry Added By Mithun KK Ends Here -->

	<!-- Enquire RCL -->
	<select id="security_header"  parameterClass="map"  resultClass="cargo.cms.export.bo.SecurityCheckBO" >
		SELECT 
		   SEC_AGENT_NAME as secAgentName,(select code from cust_company where code_desc =SEC_AGENT_NAME) secAgentNum,
		   SEC_RA_NO AS raNumber,
		   SEC_KC_NO AS kcNumber, 
		   SEC_RMK AS secRemarks,
		   WAVR_IND AS waveChrg
	   FROM EXP_RCL_HD WHERE RCL_NO=#RCLNO# 
	</select>
	<!-- Changed for QR -->
	<select id="getTotalPcWt"  parameterClass="map"  resultClass="cargo.cms.export.bo.SecurityCheckBO" >
		SELECT sum(SC_PCS) as secPieces,sum(SC_WT) as secWeight
	   FROM EXP_RCL_SEC_CHK_DTL WHERE RCL_NO=#RCLNO# and ((awb_no = #AWBNO# AND awb_date= TO_DATE(#AWBDATE#,'DDMONYY') )  or awb_no is null)
	</select>
	<select id="getTotalPcWtForAWB"  parameterClass="map"  resultClass="cargo.cms.export.bo.SecurityCheckBO" >
		SELECT sum(SC_PCS) as oldSecPcs,sum(SC_WT) as oldSecWt
	    FROM EXP_RCL_SEC_CHK_DTL WHERE RCL_NO=#RCLNO# 
	    <isNotEmpty property="AWBNO">
			and (awb_no != #AWBNO#  OR AWB_NO IS NULL)
		</isNotEmpty>
	    and not exists 
	    (select null from exp_rcl_hd where RCL_NO=#RCLNO# and ppk_type = 'M')
	</select>
	<select id="security_list"  parameterClass="map"  resultClass="cargo.cms.export.bo.SecurityCheckBO" >
		SELECT
			(SELECT B.ITM_DESC FROM BILL_ITM_MASTER B
				WHERE B.ITM_CODE=A.SC_ITM_CODE
				and decode(B.ITM_CODE_SFX, '', 'a', B.ITM_CODE_SFX) = decode(A.SC_ITM_SFX, '', 'a', A.SC_ITM_SFX)) 
		   AS secItemDesc,
		   A.SC_PCS AS secPieces,
		   A.SC_WT AS secWeight, 
		   A.SC_PAID_BY AS chargeTo,
		   TO_CHAR(A.SC_START_DATE,'DDMONYY HH24:MI') AS startDate,
		   TO_CHAR( A.SC_END_DATE,'DDMONYY HH24:MI') AS holdingDate,A.DOC_LINE_NO as docLineNum, 
		   A.SC_RESULT AS secResult 
		FROM 
			EXP_RCL_SEC_CHK_DTL A 
		WHERE 
			RCL_NO=#RCLNO# 
			<isNotEmpty property="AWBNO">
				and ((AWB_NO=#AWBNO# AND awb_date = TO_DATE(#AWBDATE#,'DDMONYY')) OR AWB_NO IS NULL)
			</isNotEmpty>
	</select>

	<select id="validRANumber"    	parameterClass="cargo.cms.export.bo.SecurityCheckBO"   	resultClass="java.lang.Integer">
    	SELECT count(1) from CUST_AGENT_RA where RA_NO=#raNumber# 
    	<isNotEmpty property="secAgentNum">
			and CUST_NO=#secAgentNum#
	</isNotEmpty>
	</select>
	<select id="validKCNumber" parameterClass="cargo.cms.export.bo.SecurityCheckBO"   	resultClass="java.lang.Integer">
	SELECT count(1) from CUST_AGENT_KC where KC_NO=#kcNumber#
	<isNotEmpty property="secAgentNum">
			and CUST_NO=#secAgentNum#
	</isNotEmpty>
	</select>
	<select id="agentDetSecChk" parameterClass="cargo.cms.export.bo.SecurityCheckBO" resultClass="cargo.cms.export.bo.SecurityCheckBO">
		 SELECT 
		 	A.CODE AS secAgentNum, A.CODE_DESC AS secAgentName,  B.RA_NO AS raNumber, 
		 	C.KC_NO AS kcNumber 
		 	FROM CUST_COMPANY A
      left outer join CUST_AGENT_RA B on B.cust_no=A.code and sysdate between B.RA_EFF_DATE_FROM and B.RA_EFF_DATE_TO
      left outer join CUST_AGENT_KC C on c.CUST_NO =A.code and sysdate between C.EFF_DATE_FROM and C.EFF_DATE_TO  AND C.CARR_CODE = #carrCode#    
		 WHERE 1=1
		 <isNotEmpty property="secAgentNum">
		 and A.CODE=#secAgentNum#
		 </isNotEmpty>
		 <isNotEmpty property="secAgentName">
		 and A.CODE_DESC=#secAgentName#
		 </isNotEmpty> 
		 <isNotEmpty property="raNumber">
		 and B.RA_NO=#raNumber#
		 </isNotEmpty>
		 <isNotEmpty property="kcNumber">
		 and C.KC_NO=#kcNumber# and C.CARR_CODE=#carrCode#
		 </isNotEmpty>
     </select>
     <select id="itemCode" parameterClass="java.lang.String" resultClass="java.lang.String">
      	select ITM_CODE FROM BILL_ITM_MASTER where ITM_DESC=#param#
     </select>
     <update id="updSecChk" parameterClass="cargo.cms.export.bo.SecurityCheckBO">
      UPDATE 
      	EXP_RCL_SEC_CHK_DTL 
      SET 
      	SC_ITM_CODE=#secItemCode#, SC_PCS=#secPieces#, SC_WT=#secWeight#, SC_PAID_BY=#chargeTo#, SC_RESULT=#secResult#, LM_USER_ID=#lmUserID#, LM_DATE=SYSDATE 
      WHERE 
      	RCL_NO=#rclNum# AND DOC_LINE_NO=#docLineNum# AND AWB_NO=#awbNum#
     </update>
     
     <update id="updExpRclAgnt" parameterClass="cargo.cms.export.bo.SecurityCheckBO">
      update EXP_RCL_HD set SEC_AGENT_NAME=#secAgentName#,SEC_AGENT_NO=#secAgentNum#,SEC_KC_NO=#kcNumber#,SEC_RA_NO=#raNumber# ,SEC_RMK=#secRemarks# ,
      LM_USER_ID=#lmUserID#,STATUS = nvl(#rclStatus#,STATUS),LM_DATE =sysdate where RCL_NO=#rclNum#      
     </update>
     
     <select id="chkThecountofSecurityChk" parameterClass="java.lang.String" resultClass="java.lang.String">
      	Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = #rclNumber# And SEC_CHECK = 'Y' And
			(awb_no,awb_date) NOT IN (select distinct awb_no,awb_date from Exp_Rcl_Sec_Chk_Dtl where rcl_no = #rclNumber#)
     </select>
     
     <select id="getPpkTypeForTheRcl" parameterClass="java.lang.String" resultClass="java.lang.String">
      select ppk_type FROM EXP_RCL_HD where RCL_NO= #rclNumber#
     </select>
     
     
     <select id="obcRcl" parameterClass="java.lang.String" resultClass="java.lang.Integer">
      select count(1) FROM EXP_RCL_OBC where RCL_NO=#param#
     </select>
     <select id="fetchObcRclList" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.MaintainOutboundOBCItemBO">
      select distinct OBC.TAG_NO AS tagNo,OBC.TAG_PCS AS pc,OBC.TAG_WT AS wt,DTL.LSP_NO AS lspNo
		from EXP_RCL_OBC OBC
		JOIN EXP_RCL_DTL DTL ON OBC.RCL_NO=DTL.RCL_NO AND OBC.TAG_PCS=DTL.PCS AND OBC.TAG_WT=DTL.NET_WT WHERE DTL.RCL_NO=#PARAM#
     </select>
     <update id="rclVoidHd_EnqRcl"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">	
		UPDATE EXP_RCL_HD SET STATUS = 'V', VOID_USER_ID = #voidUserID# , VOID_DATE = SYSDATE, VOID_FROM = 'S'  WHERE RCL_NO = #rclNum# 
   	</update>
	<update id="rclVoidDtl_EnqRcl"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		UPDATE EXP_RCL_DTL SET TR_STATUS='V', LM_USER_ID=#voidUserID#, LM_DATE=SYSDATE WHERE RCL_NO = #rclNum#
   	</update>
	<update id="rclVoidSecDtl_EnqRcl"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		UPDATE EXP_RCL_SEC_CHK_DTL SET TR_STATUS = 'V',  LM_USER_ID = #voidUserID#,  LM_DATE = SYSDATE  WHERE RCL_NO = #rclNum# 
   	</update> 
   	<select id="fetchPrepackULDInvList" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.PrepackULDListBO">
	
		SELECT u.uld_key as uldKey,u.loc_code as loc,
		Decode(u.gross_weight,'0','0.0',u.gross_weight) as grossWt,
		Decode((u.gross_weight-u.tare_weight),'0','0.0',(u.gross_weight-u.tare_weight)) as netWt,

		(SELECT code_desc from cust_company where code = (select cust_no from (select cust_no,b.uld_key
        from exp_rcl_hd a,exp_uld_awb b
        where a.rcl_no=b.rcl_no order by b.rcl_date desc) where uld_key = u.uld_key and rownum=1)) as agentName,
		
		gt.uld_group as uldGroup,

		u.contr_code as contourCode,
		(SELECT code_desc
  		FROM mast_code_dtl
  		WHERE code_type = 'ULD_STATE'
  		AND code        = FUN_GET_ULD_STATE(u.uld_key)
 		) uldState,
		
		(select awb_dest from (SELECT ed.rcl_no,eh.awb_dest awb_dest,ed.uld_key uld_key
 		 FROM exp_rcl_hd eh
  		JOIN exp_rcl_dtl ed
 		ON ed.rcl_no = eh.rcl_no
  		and ed.uld_key is not null
  		ORDER BY eh.rcl_no DESC)
  		where
  		uld_key      =u.uld_key
  		AND (u.mix_ppk_ind = 'Y'
  		OR u.ppk_ind       ='Y')
  		and  rownum=1
		) as dest,
        DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat
        
		from uld_inventory U, 
		uld_group_type gt,
        mast_uld_allot_group uag,
        mast_uld_allot ua,
        mast_uld_group ug
		
		WHERE u.empty_flg='N' and u.loc_code is not null and u.owned_inv = 'Y' AND (u.mix_ppk_ind = 'Y' or u.ppk_ind='Y' or u.handling_mode = 'PPK')

        and (nvl(u.handling_mode,'*') not in 'NBK')
        
        and gt.uld_group   = uag.uld_group
		AND uag.uld_allot    = ua.uld_allot
		AND ug.uld_group     = uag.uld_group
		AND gt.uld_type      = SUBSTR(U.ULD_TYPE, 0, 3)
        <isNotEmpty property="grpCarr">
            AND   (U.owner_id = #grpCarr# 
            OR U.owner_id IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE     = #grpCarr#))                                          
       </isNotEmpty>
        <isNotEmpty property="carr">
            and U.owner_id = #carr#                              
       </isNotEmpty>
       <isNotEmpty property="loginCarrier">
            AND (U.owner_id = #loginCarrier#
            OR U.owner_id IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE= #loginCarrier#))
      </isNotEmpty>
       <isNotEmpty property="opStatus">
        <isEqual property="opStatus" compareValue="ONSITE">
         and u.flt_key is null and u.flt_date is null and u.ofld_flg = 'N' and nvl(uld_flow, '*') != 'I'                            
       </isEqual>
        </isNotEmpty>
      <isNotEmpty property="opStatus">
       <isEqual property="opStatus" compareValue="IMPORT">
         and (u.flt_type = 'I' or (u.flt_key is null and u.handling_mode = 'PPK' and nvl(u.transit_flg, 'N') = 'N' and nvl(uld_flow, '*') != 'E' ))             
       </isEqual>
      </isNotEmpty>
      <isNotEmpty property="opStatus">
       <isEqual property="opStatus" compareValue="OFFLOAD">
         and u.ofld_flg = 'Y'                   
       </isEqual>
      </isNotEmpty>
       <isNotEmpty property="uldDest">
	     and (select awb_dest from (SELECT ed.rcl_no,eh.awb_dest awb_dest,ed.uld_key uld_key
 		 FROM exp_rcl_hd eh
  		JOIN exp_rcl_dtl ed
 		ON ed.rcl_no = eh.rcl_no
  		and ed.uld_key is not null
  		ORDER BY eh.rcl_no DESC)
  		where
  		uld_key      =u.uld_key
  		AND (u.mix_ppk_ind = 'Y'
  		OR u.ppk_ind       ='Y')
  		and  rownum=1
		) = #uldDest#                           
       </isNotEmpty>
	</select>
   	<!-- Updated for fixing 12425. Sanket 31JUL14 -->
   	<select id="fetchPPKWtVarAlertList" parameterClass="map" resultClass="cargo.cms.export.bo.PPKWtVarAlertListBO">
                SELECT * FROM
                (
                SELECT T1.RCL_NO AS rclNum, TO_CHAR(T2.RCL_DATE,'YYYY-MM-DD HH24:MI:SS') AS rclIssueTime, T4.CODE_DESC AS agentName, T1.ULD_KEY AS uldNum, 
                T3.LOC_CODE AS currentLoc, T3.FIRST_WT AS firstWt, T3.SECOND_WT AS secondWt, T3.THIRD_WT AS thirdWt, T3.GROSS_WEIGHT AS finalWt, 
                (T3.GROSS_WEIGHT - T3.FIRST_WT) AS discrepancy, T3.MIX_PPK_IND AS mixPPKInd, T3.PPK_IND AS ppkInd, T1.VAR_STATUS AS status,
				DENSE_RANK() OVER (PARTITION BY T1.ULD_KEY ORDER BY T2.RCL_DATE DESC) RANK 
				FROM EXP_RCL_DTL T1
				JOIN EXP_RCL_HD T2 ON T2.RCL_NO = T1.RCL_NO  
				JOIN ULD_INVENTORY T3 ON  T3.ULD_KEY = T1.ULD_KEY 
				JOIN CUST_COMPANY T4 ON T4.CODE = T2.CUST_NO
				WHERE T3.FINAL_WEIGHT = 'Y'
				AND T1.cr_date >= T3.ENTRY_TIME AND  (T3.MIX_PPK_IND = 'Y' or T3.PPK_IND = 'Y')

				<isNotEmpty prepend="AND" property="fromDate">
                        <isNotEmpty property="toDate">
                              T2.RCL_DATE BETWEEN TO_DATE(#fromDate#||#issueTimeHr#||#issueTimeMin#,'DDMONYYHH24MI')		  
		                      AND TO_DATE(#toDate#||#issueTimeHrTo#||#issueTimeMinTo#,'DDMONYYHH24MI')
                        </isNotEmpty>
                  </isNotEmpty>
				  
				  <isNotEmpty property="wtDiscrepancy" >             
                  <isEqual property="wtDiscrepancy" compareValue="Y">             
                        AND T3.GROSS_WEIGHT != T3.FIRST_WT
                  </isEqual>
				  <isEqual property="wtDiscrepancy" compareValue="N">             
                        AND T3.GROSS_WEIGHT = T3.FIRST_WT
                  </isEqual>
				  </isNotEmpty>
				  
				  <isNotEmpty property="status" >             
                  <isEqual property="status" compareValue="New">             
                        AND (T1.VAR_STATUS = 'NEW' OR T1.VAR_STATUS IS NULL)
                  </isEqual>
				  <isEqual property="status" compareValue="ACK">             
                        AND T1.VAR_STATUS = 'ACK'
                  </isEqual>
				  </isNotEmpty>
				  
				  <isNotEmpty property="pkgType" >             
                  <isEqual property="pkgType" compareValue="PM">             
                        AND (T2.PPK_TYPE = 'P' OR T2.PPK_TYPE = 'M')
                  </isEqual>
				  <isNotEqual property="pkgType" compareValue="PM">             
                        AND T2.PPK_TYPE = #pkgType#
                  </isNotEqual>
				  </isNotEmpty>
				  
				  )
				WHERE RANK = 1	ORDER BY rclIssueTime
   	</select>
   	
   	<!-- Updated for fix 12474. Sanket 16AUG14 -->
   	<update id="updateVarStatus" parameterClass="map">
   	UPDATE EXP_RCL_DTL SET VAR_STATUS = #varStatus# WHERE RCL_NO = #rclNum# AND ULD_KEY = #uldNum#
	</update>

	<update id="updateUldWhRmk" parameterClass="map">
    UPDATE ULD_INVENTORY SET GEN_RMK = #whRmk# WHERE ULD_KEY = #uldNum#
	</update>
   	
	<update id="updateScreebInd" parameterClass="map">
    UPDATE EXP_RCL_HD SET SCREENED_IND = #screenInd# WHERE RCL_NO=#rclNum#
	</update>
   	
   	<!--  Changed for QR -->
   	<select id="enquire_rcl_val" parameterClass="map" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT A.RCL_DATE,
		A.REJECT_IND as cargoRejInd,
		A.RCL_REJECT_REASON as rejectReasonRmk,
			PPK_TYPE AS pkgType, 
			A.RCL_NO as rclNum, 
			A.AWB_NO as awbNum,
			CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) as awbNumDisplay, 
			A.AWB_DEST as destination, 
			A.AWB_CONTENT as 	awbContent, 
			A.RCL_PCS AS rclPcs,
			A.RCL_WT AS rclWt,
			RTN_PCS as rtnPcs, RTN_WT as rtnWt,
			TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate, 
			decode(UPPER(A.STATUS), 'V','Y','N') as voidInd,
			pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) as carInd, 
			A.RTN_IND as cargoRetInd,
			A.ULD_KEY as uldNum,
			(SELECT B.CONTR_CODE FROM EXP_RCL_DTL B WHERE B.RCL_NO=A.RCL_NO AND A.ULD_KEY =B.ULD_KEY)  as contourCode,a.cr_date,
			decode((select count(RCL_NO) from EXP_RCL_SEC_CHK_DTL where RCL_NO=A.RCL_NO),0,'N','Y') as secChkEntered,A.SEC_CHECK as secCheck
			,A.VOID_DATE as voidDate,
			A.ASIDE_ACCEPT as asideAccept, A.CUST_NO as agentCode, 
				  (select code_desc from cust_company where code = A.CUST_NO) as agentName,
				  (select sum(sc_wt) from EXP_RCL_SEC_CHK_DTL where rcl_no = A.RCL_NO) as secChkWt,
				  (SELECT SC_RESULT FROM(SELECT SC_RESULT,RCL_NO FROM EXP_RCL_SEC_CHK_DTL ORDER BY CR_DATE DESC)WHERE RCL_NO = A.RCL_NO and ROWNUM = 1) as secResult,
				  
				  trim(TO_CHAR(NVL((select sum((LENGTH*WIDTH*HEIGHT*pcs)/1000000) from EXP_RCL_DMN where rcl_no = A.RCL_NO),0),'99999999999999990.00')) AS cbm,
 				  (select hawb_no from exp_rcl_hawb where rcl_no = A.RCL_NO and rownum = 1) as hawb,
 				  
			(select STRAGG(STRINGDELIM(T.spl, ','))  
                  from(
                  	(select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
			        union all
			        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
			        union all
			        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
			        union all
			        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
			        union all
			        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
			        union all
			        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
			        union all
			        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
			        union all
			        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
			        union all
			        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null)) t
			        where awb_no = a.awb_no and awb_date = a.awb_date ) shc,
			        NVL(A.TSA_RCL_IND,'NA') as tsaRclInd,
			        NVL(A.CARR_RF,'NA') as carrierRF,
			        nvl(SCREENED_IND,'N') AS screenedInd,
			        nvl(SCREENED_IND,'N') AS oldscreenedInd,
              		FLT_KEY AS fltKey,
              		to_char(FLT_DATE,'DDMONYY') AS fltDate
			From EXP_RCL_HD A WHERE ACCPT_MODE IN ('LCA','LDA','LOB')
			and nvl(A.spl_code1,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code2,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code3,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code4,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code5,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code6,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code7,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code8,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code9,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
		<dynamic >
		
                  <isNotEmpty prepend="AND" property="agentName"> 	
                       A.CUST_NO = (select code from cust_company where code_desc = #agentName#)
                  </isNotEmpty>
                  
			      <isNotEmpty prepend="AND" property="agentCode">
                        A.CUST_NO = #agentCode#
                  </isNotEmpty>
			<isNotEmpty prepend="AND" property="AWBNUM">
				A.AWB_NO = #AWBNUM# AND A.AWB_DATE=TO_DATE(#AWBDATE#,'DDMONYY') 
			</isNotEmpty>	
			<isNotEmpty prepend="AND" property="ULDNUM">
                  A.ULD_KEY = #ULDNUM#
            </isNotEmpty>		
			<isNotEmpty prepend="AND" property="ULDTYPE">
				A.ULD_TYPE = #ULDTYPE#
			</isNotEmpty>			
			<isNotEmpty prepend="AND" property="RCLNUM">
				A.RCL_NO = lower(#RCLNUM#)
			</isNotEmpty>	
			<isNotEmpty prepend="AND" property="STATUS">
                A.STATUS = #STATUS#
            </isNotEmpty> 
			<isNotEmpty prepend="AND" property="VOID">
				A.STATUS = #VOID#
			</isNotEmpty>			
			<isNotEmpty prepend="AND" property="PRT">
				A.REPT_VER > #PRT#
			</isNotEmpty>			
			<isNotEmpty prepend="AND" property="RTN">
				A.RTN_IND = #RTN#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="UNPAID">
				A.RCL_NO in (select RCL_NO from BILL_CHARGE_DTL where status ='PENDING')
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="CARRCODE">
				 A.CARR_CODE = #CARRCODE#
			</isNotEmpty>			
			<isNotEmpty prepend="AND" property="CARR">
				pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) = #CARR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="dest">
			A.AWB_DEST = #dest#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="screenedType">
			NVL(A.SCREENED_IND,'N') = #screenedType#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode1">
			(A.SPL_CODE1=#splCode1# OR A.SPL_CODE2=#splCode1# OR A.SPL_CODE3=#splCode1# OR
    		A.SPL_CODE4=#splCode1# OR A.SPL_CODE5=#splCode1# OR A.SPL_CODE6=#splCode1# OR
    		A.SPL_CODE7=#splCode1# OR A.SPL_CODE8=#splCode1# OR A.SPL_CODE9=#splCode1#)
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode2">
			(A.SPL_CODE1=#splCode2# OR A.SPL_CODE2=#splCode2# OR A.SPL_CODE3=#splCode2# OR
    		A.SPL_CODE4=#splCode2# OR A.SPL_CODE5=#splCode2# OR A.SPL_CODE6=#splCode2# OR
    		A.SPL_CODE7=#splCode2# OR A.SPL_CODE8=#splCode2# OR A.SPL_CODE9=#splCode2#)
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode3">
			(A.SPL_CODE1=#splCode3# OR A.SPL_CODE2=#splCode3# OR A.SPL_CODE3=#splCode3# OR
    		A.SPL_CODE4=#splCode3# OR A.SPL_CODE5=#splCode3# OR A.SPL_CODE6=#splCode3# OR
    		A.SPL_CODE7=#splCode3# OR A.SPL_CODE8=#splCode3# OR A.SPL_CODE9=#splCode3#)
			</isNotEmpty>
			<isNotEmpty property="CARRIERRF">
				<isNotEqual property="CARRIERRF" compareValue="A">
					and NVL(A.CARR_RF,'NA')=#CARRIERRF#
				</isNotEqual>
			 </isNotEmpty>	
                  
             <isNotEmpty property="TSARCL">
				<isNotEqual property="TSARCL" compareValue="A">
					and NVL(A.TSA_RCL_IND,'NA')=#TSARCL#
				</isNotEqual>
			 </isNotEmpty>	
				  
			<isNotEmpty prepend="AND" property="FROMDATE">
                        <isNotEmpty property="TODATE">
                              A.RCL_DATE BETWEEN TO_DATE(#FROMDATE#||#schTimeHr#||#schTimeMin#,'DDMONYYHH24MI')		  
		                      AND TO_DATE(#TODATE#||#schTimeHrTo#||#schTimeMinTo#,'DDMONYYHH24MI')
                        </isNotEmpty>
                  </isNotEmpty>
			
			<isNotEmpty prepend="AND" property="TRUCKNUM">
				A.TRUCK_NO = #TRUCKNUM#
			</isNotEmpty>
			<isNotEmpty property="ACCPTOTHTERMINAL" >			
			  AND A.CARR_CODE in (select code from MAST_CARRIER where HANDLED_BY_TERMINAL='HACTL')
			</isNotEmpty>
			
             <isNotEmpty property="PKGTYPE" >             
                  <isEqual property="PKGTYPE" compareValue="PM">             
                        AND (A.PPK_TYPE = 'P' OR A.PPK_TYPE = 'M')
                  </isEqual>
				  <isNotEqual property="PKGTYPE" compareValue="PM">             
                        AND A.PPK_TYPE = #PKGTYPE#
                  </isNotEqual>
				  </isNotEmpty>

		   <isNotEmpty property="SECCHKENTERED">             
            	AND ((CASE WHEN (A.PPK_TYPE = 'B' OR A.PPK_TYPE = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=A.Rcl_No),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = A.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = A.Rcl_No And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = A.Rcl_No)),0,'Y','N')
                     END
                     END) = #SECCHKENTERED#) 
            </isNotEmpty>
            <isEmpty property="SECCHKENTERED">
                AND ((CASE WHEN (A.PPK_TYPE = 'B' OR A.PPK_TYPE = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=A.Rcl_No),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = A.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = A.Rcl_No And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = A.Rcl_No)),0,'Y','N')
                     END
                     END) in ('N','Y'))
            </isEmpty>
			
			<isNotEmpty property="ASIDEACCEPT">
				        AND A.ASIDE_ACCEPT = #ASIDEACCEPT# 
		    </isNotEmpty>
				  
			<isEmpty prepend="AND" property="AWBNUM">
            	<isNotEmpty property="LOGINCARRIER">
                	(
						( A.AWB_NO IS NULL  AND  (A.CARR_CODE = #LOGINCARRIER# OR A.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #LOGINCARRIER#) ) )
						  OR ( SUBSTR(A.AWB_NO,1,3) IN  (SELECT CODE FROM MAST_AWB_PREFIX WHERE CARR_CODE = #LOGINCARRIER#) )
						  OR ( SUBSTR(A.AWB_NO,1,3) IN  (SELECT CODE FROM MAST_AWB_PREFIX WHERE	CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #LOGINCARRIER#) ) )
					)                	
                </isNotEmpty>
            </isEmpty>
			<isNotEmpty property="ULDNUM">				
				UNION 
					SELECT A.RCL_DATE,
					A.REJECT_IND as cargoRejInd,
					A.RCL_REJECT_REASON as rejectReasonRmk,
						A.PPK_TYPE AS pkgType, 
						A.RCL_NO as rclNum, 
						AWB_NO as awbNum,
						CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNumDisplay,  
						A.AWB_DEST as destination, 
						A.AWB_CONTENT as 	awbContent, 
						A.RCL_PCS AS rclPcs,
						A.RCL_WT AS rclWt, 
						A.RTN_PCS as rtnPcs, A.RTN_WT as rtnWt,
						TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate, 
						decode(UPPER(A.STATUS), 'V','Y','N') as voidInd,
						pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) as carInd, 
						A.RTN_IND as cargoRetInd,
						A.ULD_KEY as uldNum,
						B.CONTR_CODE as contourCode,a.cr_date,
						decode((select count(RCL_NO) from EXP_RCL_SEC_CHK_DTL where RCL_NO=A.RCL_NO),0,'N','Y') as secChkEntered,A.SEC_CHECK as secCheck
						,A.VOID_DATE as voidDate,
						A.ASIDE_ACCEPT as asideAccept, A.CUST_NO as agentCode, 
				       (select code_desc from cust_company where code = A.CUST_NO) as agentName,
				       (select sum(sc_wt) from EXP_RCL_SEC_CHK_DTL where rcl_no = A.RCL_NO) as secChkWt,
					   (SELECT SC_RESULT FROM(SELECT SC_RESULT,RCL_NO FROM EXP_RCL_SEC_CHK_DTL ORDER BY CR_DATE DESC)WHERE RCL_NO = A.RCL_NO and ROWNUM = 1) as secResult,
					   
					   trim(TO_CHAR(NVL((select sum((LENGTH*WIDTH*HEIGHT*pcs)/1000000) from EXP_RCL_DMN where rcl_no = A.RCL_NO),0),'99999999999999990.00')) AS cbm,
 				       (select hawb_no from exp_rcl_hawb where rcl_no = A.RCL_NO and rownum = 1) as hawb,
 				  
						(select STRAGG(STRINGDELIM(T.spl, ','))  
                  from(
                  	(select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
			        union all
			        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
			        union all
			        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
			        union all
			        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
			        union all
			        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
			        union all
			        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
			        union all
			        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
			        union all
			        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
			        union all
			        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null)) t
			        where awb_no = a.awb_no and awb_date = a.awb_date ) shc,
			        NVL(A.TSA_RCL_IND,'NA') as tsaRclInd,
			        NVL(A.CARR_RF,'NA') as carrierRF,
			        nvl(SCREENED_IND,'N') AS screenedInd,
			        nvl(SCREENED_IND,'N') AS oldscreenedInd,
              		FLT_KEY AS fltKey,
              		to_char(FLT_DATE,'DDMONYY') AS fltDate
					FROM EXP_RCL_HD A, EXP_RCL_DTL B
					WHERE B.ULD_KEY =  #ULDNUM# AND
						B.PPK_TYPE 	IN ('B','P') AND
						B.RCL_NO	= A.RCL_NO AND
						 nvl(A.spl_code1,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code2,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code3,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code4,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code5,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code6,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code7,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code8,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(A.spl_code9,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=A.carr_code and SPL_TYPE='SPL_VAL')
			                      
                                     <isNotEmpty prepend="AND" property="agentName"> 	
                                          A.CUST_NO = (select code from cust_company where code_desc = #agentName#)
                                     </isNotEmpty>
                                     
									<isNotEmpty prepend="AND" property="agentCode">
                                          A.CUST_NO = #agentCode#
                                    </isNotEmpty>
						<isNotEmpty prepend="AND" property="AWBNUM">
										A.AWB_NO = #AWBNUM# AND A.AWB_DATE=TO_DATE(#AWBDATE#,'DDMONYY') 
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="RCLNUM">
										A.RCL_NO = #RCLNUM#
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="CARRCODE">
										 A.CARR_CODE = #CARRCODE#
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="CARR">
										pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) = #CARR#
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="dest">
									A.AWB_DEST = #dest#
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="screenedType">
									NVL(A.SCREENED_IND,'N') = #screenedType#
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="splCode1">
									(A.SPL_CODE1=#splCode1# OR A.SPL_CODE2=#splCode1# OR A.SPL_CODE3=#splCode1# OR
						    		A.SPL_CODE4=#splCode1# OR A.SPL_CODE5=#splCode1# OR A.SPL_CODE6=#splCode1# OR
						    		A.SPL_CODE7=#splCode1# OR A.SPL_CODE8=#splCode1# OR A.SPL_CODE9=#splCode1#)
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="splCode2">
									(A.SPL_CODE1=#splCode2# OR A.SPL_CODE2=#splCode2# OR A.SPL_CODE3=#splCode2# OR
						    		A.SPL_CODE4=#splCode2# OR A.SPL_CODE5=#splCode2# OR A.SPL_CODE6=#splCode2# OR
						    		A.SPL_CODE7=#splCode2# OR A.SPL_CODE8=#splCode2# OR A.SPL_CODE9=#splCode2#)
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="splCode3">
									(A.SPL_CODE1=#splCode3# OR A.SPL_CODE2=#splCode3# OR A.SPL_CODE3=#splCode3# OR
						    		A.SPL_CODE4=#splCode3# OR A.SPL_CODE5=#splCode3# OR A.SPL_CODE6=#splCode3# OR
						    		A.SPL_CODE7=#splCode3# OR A.SPL_CODE8=#splCode3# OR A.SPL_CODE9=#splCode3#)
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="STATUS">
                                        A.STATUS = #STATUS#
                                    </isNotEmpty> 
									<isNotEmpty prepend="AND" property="VOID">
										A.STATUS = #VOID#
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="PRT">
										A.REPT_VER > #PRT#
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="RTN">
										A.RTN_IND = #RTN#
									</isNotEmpty>
									<isNotEmpty prepend="AND" property="UNPAID">
										A.RCL_NO in (select RCL_NO from BILL_CHARGE_DTL where status ='PENDING')
									</isNotEmpty>
									
									<isNotEmpty prepend="AND" property="FROMDATE">
                                    <isNotEmpty property="TODATE">
                              A.RCL_DATE BETWEEN TO_DATE(#FROMDATE#||#schTimeHr#||#schTimeMin#,'DDMONYYHH24MI')		  
		                      AND TO_DATE(#TODATE#||#schTimeHrTo#||#schTimeMinTo#,'DDMONYYHH24MI')
                                    </isNotEmpty>
                                    </isNotEmpty>
							
									<isNotEmpty prepend="AND" property="TRUCKNUM">
										A.TRUCK_NO = #TRUCKNUM#
									</isNotEmpty>
									<isNotEmpty property="ACCPTOTHTERMINAL" >			
			  							AND A.CARR_CODE in (select code from MAST_CARRIER where HANDLED_BY_TERMINAL='HACTL')
									</isNotEmpty>
									
									<isNotEmpty property="PKGTYPE" >   
									<isEqual property="PKGTYPE" compareValue="PM">             
                                                AND (A.PPK_TYPE = 'P' OR A.PPK_TYPE = 'M')
                                    </isEqual>
				                    <isNotEqual property="PKGTYPE" compareValue="PM">             
                                                AND A.PPK_TYPE = #PKGTYPE#
                                    </isNotEqual>
				                    </isNotEmpty>
									
									<isNotEmpty property="ASIDEACCEPT">
				                        AND A.ASIDE_ACCEPT = #ASIDEACCEPT# 
				                    </isNotEmpty>
									
									<isNotEmpty property="CARRIERRF">
										<isNotEqual property="CARRIERRF" compareValue="A">
											and NVL(A.CARR_RF,'NA')=#CARRIERRF#
										</isNotEqual>
									 </isNotEmpty>	
						                  
						             <isNotEmpty property="TSARCL">
										<isNotEqual property="TSARCL" compareValue="A">
											and NVL(A.TSA_RCL_IND,'NA')=#TSARCL#
										</isNotEqual>
									 </isNotEmpty>
			 
									<isNotEmpty property="SECCHKENTERED">             
            	AND ((CASE WHEN (A.PPK_TYPE = 'B' OR A.PPK_TYPE = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=A.Rcl_No),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = A.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = A.Rcl_No And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = A.Rcl_No)),0,'Y','N')
                     END
                     END) = #SECCHKENTERED#) 
            </isNotEmpty>
            <isEmpty property="SECCHKENTERED">
                 AND ((CASE WHEN (A.PPK_TYPE = 'B' OR A.PPK_TYPE = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=A.Rcl_No),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = A.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = A.Rcl_No And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = A.Rcl_No)),0,'Y','N')
                     END
                     END) in ('N','Y'))
            </isEmpty>
			</isNotEmpty>
			<isNotEmpty property="ULDTYPE">                                            
                        UNION 
                        SELECT A.RCL_DATE,
						A.REJECT_IND as cargoRejInd,
						A.RCL_REJECT_REASON as rejectReasonRmk,
                              A.PPK_TYPE AS pkgType, 
                              A.RCL_NO as rclNum, 
                              AWB_NO as awbNum,
                              CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNumDisplay,  
                              A.AWB_DEST as destination, 
                              A.AWB_CONTENT as awbContent, 
                              A.RCL_PCS AS rclPcs,
                              A.RCL_WT AS rclWt, 
                              A.RTN_PCS as rtnPcs, A.RTN_WT as rtnWt,
                              TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate, 
                              decode(UPPER(A.STATUS), 'V','Y','N') as voidInd,
                              pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) as carInd, 
                              A.RTN_IND as cargoRetInd,
                              A.ULD_KEY as uldNum,
                              B.CONTR_CODE as contourCode,a.cr_date,
                              decode((select count(RCL_NO) from EXP_RCL_SEC_CHK_DTL where RCL_NO=A.RCL_NO),0,'N','Y') as secChkEntered,A.SEC_CHECK as secCheck
                              ,A.VOID_DATE as voidDate,
							  A.ASIDE_ACCEPT as asideAccept, A.CUST_NO as agentCode, 
				             (select code_desc from cust_company where code = A.CUST_NO) as agentName,
				             (select sum(sc_wt) from EXP_RCL_SEC_CHK_DTL where rcl_no = A.RCL_NO) as secChkWt,
							 (SELECT SC_RESULT FROM(SELECT SC_RESULT,RCL_NO FROM EXP_RCL_SEC_CHK_DTL ORDER BY CR_DATE DESC)WHERE RCL_NO = A.RCL_NO and ROWNUM = 1) as secResult,
							 
							 trim(TO_CHAR(NVL((select sum((LENGTH*WIDTH*HEIGHT*pcs)/1000000) from EXP_RCL_DMN where rcl_no = A.RCL_NO),0),'99999999999999990.00')) AS cbm,
 							  (select hawb_no from exp_rcl_hawb where rcl_no = A.RCL_NO and rownum = 1) as hawb,
 				  
                              (select STRAGG(STRINGDELIM(T.spl, ','))  
                  from(
                  	(select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
			        union all
			        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
			        union all
			        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
			        union all
			        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
			        union all
			        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
			        union all
			        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
			        union all
			        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
			        union all
			        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
			        union all
			        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null)) t
			        where awb_no = a.awb_no and awb_date = a.awb_date ) shc,
			        NVL(A.TSA_RCL_IND,'NA') as tsaRclInd,
			        NVL(A.CARR_RF,'NA') as carrierRF,
			        nvl(SCREENED_IND,'N') AS screenedInd,
			        nvl(SCREENED_IND,'N') AS oldscreenedInd,
              		FLT_KEY AS fltKey,
              		to_char(FLT_DATE,'DDMONYY') AS fltDate
                        FROM EXP_RCL_HD A, EXP_RCL_DTL B
                        WHERE B.ULD_TYPE =  #ULDTYPE# AND
                              B.PPK_TYPE IN ('B','P') AND
                              B.RCL_NO    = A.RCL_NO
							  
                              <isNotEmpty prepend="AND" property="agentName"> 	
                                    A.CUST_NO = (select code from cust_company where code_desc = #agentName#)
                              </isNotEmpty>
                              
							  <isNotEmpty prepend="AND" property="agentCode">
                                    A.CUST_NO = #agentCode#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="ULDNUM">
                       	 			B.ULD_KEY = #ULDNUM#
                  				</isNotEmpty>
                              <isNotEmpty prepend="AND" property="AWBNUM">
                                    A.AWB_NO = #AWBNUM# AND A.AWB_DATE=TO_DATE(#AWBDATE#,'DDMONYY') 
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="RCLNUM">
                                    (A.RCL_NO = #RCLNUM#
                              </isNotEmpty>
                              <isNotEmpty prepend="OR" property="RCLNUM">
                                    A.RCL_NO like #RCLNUM#||'%')
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="CARRCODE">
                                    A.CARR_CODE = #CARRCODE#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="dest">
								A.AWB_DEST = #dest#
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="screenedType">
								NVL(A.SCREENED_IND,'N') = #screenedType#
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="splCode1">
								(A.SPL_CODE1=#splCode1# OR A.SPL_CODE2=#splCode1# OR A.SPL_CODE3=#splCode1# OR
					    		A.SPL_CODE4=#splCode1# OR A.SPL_CODE5=#splCode1# OR A.SPL_CODE6=#splCode1# OR
					    		A.SPL_CODE7=#splCode1# OR A.SPL_CODE8=#splCode1# OR A.SPL_CODE9=#splCode1#)
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="splCode2">
								(A.SPL_CODE1=#splCode2# OR A.SPL_CODE2=#splCode2# OR A.SPL_CODE3=#splCode2# OR
					    		A.SPL_CODE4=#splCode2# OR A.SPL_CODE5=#splCode2# OR A.SPL_CODE6=#splCode2# OR
					    		A.SPL_CODE7=#splCode2# OR A.SPL_CODE8=#splCode2# OR A.SPL_CODE9=#splCode2#)
								</isNotEmpty>
								<isNotEmpty prepend="AND" property="splCode3">
								(A.SPL_CODE1=#splCode3# OR A.SPL_CODE2=#splCode3# OR A.SPL_CODE3=#splCode3# OR
					    		A.SPL_CODE4=#splCode3# OR A.SPL_CODE5=#splCode3# OR A.SPL_CODE6=#splCode3# OR
					    		A.SPL_CODE7=#splCode3# OR A.SPL_CODE8=#splCode3# OR A.SPL_CODE9=#splCode3#)
								</isNotEmpty>
                              <isNotEmpty prepend="AND" property="CARR">
                                    pkg_exp_val.get_rcl_car_ind(a.awb_no, a.awb_date, a.rcl_no, a.ppk_type) = #CARR#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="STATUS">
                                    A.STATUS = #STATUS#
                              </isNotEmpty>     
                              <isNotEmpty prepend="AND" property="VOID">
                                    A.STATUS = #VOID#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="PRT">
                                    A.REPT_VER > #PRT#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="RTN">
                                    A.RTN_IND = #RTN#
                              </isNotEmpty>
                              <isNotEmpty prepend="AND" property="UNPAID">
                                    A.RCL_NO IN (select RCL_NO from BILL_CHARGE_DTL where status ='PENDING' AND RCL_NO = A.RCL_NO)
                              </isNotEmpty>
                             
							  <isNotEmpty prepend="AND" property="FROMDATE">
                              <isNotEmpty property="TODATE">
                              A.RCL_DATE BETWEEN TO_DATE(#FROMDATE#||#schTimeHr#||#schTimeMin#,'DDMONYYHH24MI')		  
		                      AND TO_DATE(#TODATE#||#schTimeHrTo#||#schTimeMinTo#,'DDMONYYHH24MI')
                              </isNotEmpty>
                              </isNotEmpty>
							  
                              <isNotEmpty prepend="AND" property="TRUCKNUM">
                                          A.TRUCK_NO = #TRUCKNUM#
                              </isNotEmpty>
                              <isNotEmpty property="ACCPTOTHTERMINAL">              
                                   AND A.CARR_CODE in (select code from MAST_CARRIER where HANDLED_BY_TERMINAL='HACTL')
                              </isNotEmpty>
                             
							 <isNotEmpty property="PKGTYPE" >             
                              <isEqual property="PKGTYPE" compareValue="PM">             
                                   AND (A.PPK_TYPE = 'P' OR A.PPK_TYPE = 'M')
                              </isEqual>
				              <isNotEqual property="PKGTYPE" compareValue="PM">             
                                   AND A.PPK_TYPE = #PKGTYPE#
                              </isNotEqual>
				              </isNotEmpty>
							  
							  <isNotEmpty property="ASIDEACCEPT">
				                    AND A.ASIDE_ACCEPT = #ASIDEACCEPT# 
				              </isNotEmpty>
				              
							<isNotEmpty property="CARRIERRF">
								<isNotEqual property="CARRIERRF" compareValue="A">
									and NVL(A.CARR_RF,'NA')=#CARRIERRF#
								</isNotEqual>
							</isNotEmpty>	
						                  
						    <isNotEmpty property="TSARCL">
								<isNotEqual property="TSARCL" compareValue="A">
									and NVL(A.TSA_RCL_IND,'NA')=#TSARCL#
								</isNotEqual>
							</isNotEmpty>
									 
							 <isNotEmpty property="SECCHKENTERED">             
            					AND ((CASE WHEN (A.PPK_TYPE = 'B' OR A.PPK_TYPE = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=A.Rcl_No),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = A.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = A.Rcl_No And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = A.Rcl_No)),0,'Y','N')
                     END
                     END) = #SECCHKENTERED#) 
            				</isNotEmpty>
            				<isEmpty property="SECCHKENTERED">
                			 AND ((CASE WHEN (A.PPK_TYPE = 'B' OR A.PPK_TYPE = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=A.Rcl_No),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = A.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = A.Rcl_No And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = A.Rcl_No)),0,'Y','N')
                     END
                     END) in ('N','Y'))
            				</isEmpty>
            </isNotEmpty>
			<isNotEmpty  property="AWBNUM">
			<isEmpty property="RCLNUM">
			union  SELECT  rcl_date,  REJECT_IND as cargoRejInd,t2.RCL_REJECT_REASON as rejectReasonRmk, t2.ppk_type AS pkgtype, t1.rcl_no AS rclnum,			
			 t1.awb_no as awbnum,
			substr(t1.awb_no, 1, 3) || '-' || SUBSTR (t1.awb_no, 4) AS awbnumdisplay,      
			awb_dest AS destination, awb_content AS awbcontent,              
			 rcl_pcs AS rclpcs, rcl_wt  AS rclwt,RTN_PCS as rtnPcs, RTN_WT as rtnWt, 
			TO_CHAR (rcl_date, 'DDMONYY HH24:MI')  AS rclissuedate,           
			 DECODE (UPPER (status), 'V', 'Y', 'N') AS voidind,            
			 pkg_exp_val.get_rcl_car_ind (t1.awb_no,  t1.awb_date, t1.rcl_no,t2.ppk_type) AS carind,
			 rtn_ind AS cargoretind, t2.uld_key AS uldnum,
			(SELECT b.contr_code FROM exp_rcl_dtl b WHERE b.rcl_no = t2.rcl_no AND t2.uld_key = b.uld_key) AS contourcode,
			t2.cr_date,decode((select count(RCL_NO) from EXP_RCL_SEC_CHK_DTL where RCL_NO=t2.RCL_NO),0,'N','Y') as secChkEntered,t2.SEC_CHECK as secCheck 
			,NULL as voidDate,
			t2.ASIDE_ACCEPT as asideAccept, t2.CUST_NO as agentCode, 
			(select code_desc from cust_company where code = t2.CUST_NO) as agentName,
			(select sum(sc_wt) from EXP_RCL_SEC_CHK_DTL where rcl_no = t2.RCL_NO) as secChkWt,
			(SELECT SC_RESULT FROM(SELECT SC_RESULT,RCL_NO FROM EXP_RCL_SEC_CHK_DTL ORDER BY CR_DATE DESC)WHERE RCL_NO = t2.RCL_NO and ROWNUM = 1) as secResult,
			
			trim(TO_CHAR(NVL((select sum((LENGTH*WIDTH*HEIGHT*pcs)/1000000) from EXP_RCL_DMN where rcl_no = t2.RCL_NO),0),'99999999999999990.00')) AS cbm,
 			(select hawb_no from exp_rcl_hawb where rcl_no = t2.RCL_NO and rownum = 1) as hawb,
 				  
			(select STRAGG(STRINGDELIM(T.spl, ','))  
                  from(
                  	(select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
			        union all
			        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
			        union all
			        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
			        union all
			        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
			        union all
			        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
			        union all
			        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
			        union all
			        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
			        union all
			        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
			        union all
			        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null)) t
			        where awb_no = t1.awb_no and awb_date = t1.awb_date ) shc,
			        NVL(t2.TSA_RCL_IND,'NA') as tsaRclInd,
			        NVL(t2.CARR_RF,'NA') as carrierRF,
			        nvl(SCREENED_IND,'N') AS screenedInd,
			        nvl(SCREENED_IND,'N') AS oldscreenedInd,
              		FLT_KEY AS fltKey,
              		to_char(FLT_DATE,'DDMONYY') AS fltDate
			FROM exp_rcl_brkdn t1, exp_rcl_hd t2  
			WHERE t1.awb_no =  #AWBNUM#   AND t1.AWB_DATE=TO_DATE(#AWBDATE#,'DDMONYY')  and t1.rcl_no = t2.rcl_no   AND
			 nvl(t2.spl_code1,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=t2.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(t2.spl_code2,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=t2.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(t2.spl_code3,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=t2.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(t2.spl_code4,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=t2.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(t2.spl_code5,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=t2.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(t2.spl_code6,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=t2.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(t2.spl_code7,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=t2.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(t2.spl_code8,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=t2.carr_code and SPL_TYPE='SPL_VAL')
			and nvl(t2.spl_code9,' ') not in (select spl_code from  CUST_AIRL_SPL_CODE where carr_code=t2.carr_code and SPL_TYPE='SPL_VAL')
			<isNotEmpty prepend="AND" property="STATUS">
            t2.STATUS = #STATUS#
            </isNotEmpty> 
            <isNotEmpty prepend="AND" property="dest">
			t2.AWB_DEST = #dest#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="screenedType">
			NVL(t2.SCREENED_IND,'N') = #screenedType#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode1">
			(t2.SPL_CODE1=#splCode1# OR t2.SPL_CODE2=#splCode1# OR t2.SPL_CODE3=#splCode1# OR
    		t2.SPL_CODE4=#splCode1# OR t2.SPL_CODE5=#splCode1# OR t2.SPL_CODE6=#splCode1# OR
    		t2.SPL_CODE7=#splCode1# OR t2.SPL_CODE8=#splCode1# OR t2.SPL_CODE9=#splCode1#)
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode2">
			(t2.SPL_CODE1=#splCode2# OR t2.SPL_CODE2=#splCode2# OR t2.SPL_CODE3=#splCode2# OR
    		t2.SPL_CODE4=#splCode2# OR t2.SPL_CODE5=#splCode2# OR t2.SPL_CODE6=#splCode2# OR
    		t2.SPL_CODE7=#splCode2# OR t2.SPL_CODE8=#splCode2# OR t2.SPL_CODE9=#splCode2#)
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="splCode3">
			(t2.SPL_CODE1=#splCode3# OR t2.SPL_CODE2=#splCode3# OR t2.SPL_CODE3=#splCode3# OR
    		t2.SPL_CODE4=#splCode3# OR t2.SPL_CODE5=#splCode3# OR t2.SPL_CODE6=#splCode3# OR
    		t2.SPL_CODE7=#splCode3# OR t2.SPL_CODE8=#splCode3# OR t2.SPL_CODE9=#splCode3#)
			</isNotEmpty> 
            <isNotEmpty property="SECCHKENTERED">             
            	AND ((CASE WHEN (t2.ppk_type = 'B' OR t2.ppk_type = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=t2.Rcl_No),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = t2.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = t2.Rcl_No And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = t2.Rcl_No)),0,'Y','N')
                     END
                     END) = #SECCHKENTERED#) 
            </isNotEmpty>
            <isEmpty property="SECCHKENTERED">
                 AND ((CASE WHEN (t2.ppk_type = 'B' OR t2.ppk_type = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=t2.rcl_no),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = t2.rcl_no And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = t2.rcl_no And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = t2.rcl_no)),0,'Y','N')
                     END
                     END) in ('N','Y'))
            </isEmpty>
			</isEmpty>					
			</isNotEmpty>
			
			</dynamic>
					ORDER BY 1 DESC, rclnum DESC 
		
   		</select>
   	
   	
   		<select id="getInvPcWtEnqRCLMix" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
   		select sum(pc) as invPcs,sum(wt) as invWt from (select sum(LOCN_PCS) as pc,sum(LOCN_WT) as wt,brk.awb_no from exp_rcl_hd hd join exp_rcl_brkdn brk on hd.rcl_no=brk.rcl_no
        left outer join awb_inventory ivt on ivt.awb_no=brk.awb_no and ivt.awb_date=brk.awb_date
        where hd.rcl_no=#param# group by  brk.awb_no) 
   		</select>
   		<select id="getInvPcWtEnqRCL" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
   		select sum(pc) as invPcs,sum(wt) as invWt from (select sum(LOCN_PCS) as pc,sum(LOCN_WT) as wt,hd.awb_no from exp_rcl_hd hd 
        left outer join awb_inventory ivt on ivt.awb_no=hd.awb_no and ivt.awb_date=hd.awb_date
        where hd.rcl_no=#param# group by  hd.awb_no) 
   		</select>
   		<update id="updateAWBSecChkInEnquireRCL" parameterClass="java.util.HashMap">
   			UPDATE AWB SET AGENT_CODE=#agtCode#, AGENT_NAME=#agtName# WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
   		</update>
   		<update id="updateExpCarSecChkInEnquireRCL" parameterClass="java.util.HashMap">
   			UPDATE EXP_CAR SET SEC_AGENT_CODE=#agtCode#, SEC_AGENT_NAME=#agtName# WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
   		</update>
   		<select id="sqlFetchUnitPriceForItemCodeRCL" parameterClass="java.util.HashMap" resultClass="java.lang.String">
   			<![CDATA[
   				SELECT unitPrice FROM (SELECT UNIT_PRICE AS unitPrice FROM BILL_ITM_RATE WHERE SYSDATE > EFF_DATE AND ITM_CODE=#itemCode# ORDER BY TR_NO DESC) WHERE ROWNUM=1
   			]]>
   		</select>
   		<select id="sqlFetchTrNoBillChrgDtl" parameterClass="java.util.HashMap" resultClass="java.lang.String">
   			SELECT TR_NO AS trNo FROM BILL_CHARGE_DTL WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND RCL_NO=#rclNo# AND ITM_CODE=#itemCode#
   		</select>
   		<insert id="insertBillChargeDtlForRCL" parameterClass="java.util.HashMap">
   			INSERT INTO BILL_CHARGE_DTL 
  				(TR_NO, AWB_NO, AWB_DATE, RCL_NO, ITM_CODE, STATUS, ITM_DESC, QTY, UNIT_PRICE, CHRG_AMT, CR_USER_ID, 
  				CR_DATE, LM_USER_ID, LM_DATE, NET_AMT, STD_IND, CASH_IND, WAVR_IND) 
			VALUES 
  				(BILL_CHARGE_DTL_SEQ.NEXTVAL, #awbNo#, #awbDate#, #rclNo#, #itemCode#, 'PENDING', #itemDesc#, #quantity#, 
  				#unitPrice#, #chrgeAmt#, #userId#, SYSDATE, #userId#, SYSDATE, #netAmt#, 'N', 'N', 'N')
   		</insert>
   		<update id="updateBillChargeDtlForRCL" parameterClass="java.util.HashMap">
   			UPDATE 
   				BILL_CHARGE_DTL 
   			SET 
   				QTY=NVL(QTY, 0)+NVL(#quantity#, 0), CHRG_AMT=NVL(CHRG_AMT, 0)+NVL(#chrgeAmt#, 0), NET_AMT=NVL(NET_AMT, 0)+NVL(#netAmt#, 0), 
   				LM_USER_ID=#userId#, LM_DATE=SYSDATE 
   			WHERE 
   				TR_NO=#trNo#
   		</update>
   		<select id="fetchSecuityChkDtls" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.SecurityCheckBO">
   			SELECT 
   				SC_ITM_CODE AS secItemCode, SC_PCS AS secPieces, SC_WT AS secWeight, SC_PAID_BY AS chargeTo, DOC_LINE_NO as docLineNum, 
   				B.ITM_DESC AS secItemDesc, A.SC_RESULT AS secResult 
   			FROM 
   				EXP_RCL_SEC_CHK_DTL A, BILL_ITM_MASTER B 
   			WHERE 
   				B.ITM_CODE=A.SC_ITM_CODE AND RCL_NO=#rclNo#
   		</select>
   		<select id="fetchSecuityChkAgentDtls" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.SecurityCheckBO">
   			SELECT 
   				SEC_AGENT_NO AS secAgentNum, SEC_AGENT_NAME AS secAgentName, SEC_KC_NO AS kcNumber, SEC_RA_NO AS raNumber, 
   				SEC_RMK AS secRemarks 
   			FROM 
   				EXP_RCL_HD 
   			WHERE 
   				RCL_NO=#rclNo#
   		</select>
	<!-- Enquire RCL -->
	
	<!-- Added by Manorama for Maintain Cargo Manifest remark:::Starts -->
		<select id="sqlmaintaincargormkawb" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">	
	SELECT CONCAT(CONCAT(SUBSTR(T2.AWB_NO,0,3),'-'),SUBSTR(T2.AWB_NO,4)) as awbNoDisplay,T2.FLT_TYPE as fltType, 
			AWB_NO as awbNo,to_char(AWB_DATE,'DDMONYY') as awbDate ,
			UNLDG_PT as unLdgPt,MAN_RMK as manfRmk,
			T1.FLT_KEY as fltKey,to_char(T1.SCH_DATE,'DDMONYY') as fltDate, 
			PKG_COMMON.get_flt_eta(#fltNo#, #fltDate#	, 'D')   as etd,
			to_char(T1.EST_DATE,'DDMONYY') as fltEstDate,
			 T1.RMK as flightRmk,
			T1.TR_NO as trNo
	FROM FLT_OPR T1 , EXP_PMANIFEST_AWB T2
	WHERE 
 	    T1.FLT_KEY=T2.FLT_KEY
	    AND T1.SCH_DATE = T2.FLT_DATE
  	    AND T1.FLT_TYPE='D' 
	    AND T2.FLT_KEY=#fltNo#
	    AND T2.FLT_DATE=#fltDate#	
	</select>
	
		<select id="sqlmaintaincargormkawbtarmac" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">	
	SELECT CONCAT(CONCAT(SUBSTR(T2.AWB_NO,0,3),'-'),SUBSTR(T2.AWB_NO,4)) as awbNoDisplay,
		   AWB_NO as awbNo,to_char(AWB_DATE,'DDMONYY') as awbDate ,
		   UNLDG_PT as unLdgPt,MAN_RMK as manfRmk,
		   T1.FLT_KEY as fltKey,to_char(T1.SCH_DATE,'DDMONYY') as fltDate, 
		   PKG_COMMON.get_flt_eta(#fltNo#, #fltDate#	, 'D')   as etd,
		  T1.RMK as flightRmk,
		   T1.TR_NO as trNo,to_char(T1.EST_DATE,'DDMONYY') as fltEstDate
	FROM FLT_OPR T1 , EXP_PMAN_TARMAC_AWB T2
	WHERE 
 	    T1.FLT_KEY=T2.FLT_KEY
	    AND T1.SCH_DATE = T2.FLT_DATE
  	    AND T1.FLT_TYPE='D' 
	    AND T2.FLT_KEY=#fltNo#
	    AND T2.FLT_DATE=#fltDate#	
	</select>
	
	<select id="sqlmaintaincargormkuld" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">	
	SELECT T1.FLT_KEY as fltKey, to_char(T1.SCH_DATE,'DDMONYY') as fltDate,T2.FLT_TYPE as fltType,
			PKG_COMMON.get_flt_eta(T2.FLT_KEY, T2.FLT_DATE,T1.FLT_TYPE)  as etd, 
			T2.MAN_RMK  as manfRmk,
			UNLDG_PT as unLdgPt,CONTR_CODE as cccode , T1.RMK as flightRmk,
			 T2.ULD_BT_NO as uldKey,
			 T1.TR_NO as trNo,to_char(T1.EST_DATE,'DDMONYY') as fltEstDate
	FROM FLt_OPR T1 ,exp_pmanifest_uld T2
	WHERE 
		T1.FLT_KEY =T2.FLT_KEY 
		AND T1.SCH_DATE = T2.FLT_DATE
		AND T1.FLT_TYPE='D' 
		AND T2.FLT_KEY = #fltNo#
		AND T2.FLT_DATE = #fltDate#
	</select>
	
		<select id="sqlmaintaincargormkuldtarmac" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">	
	SELECT T1.FLT_KEY as fltKey, to_char(T1.SCH_DATE,'DDMONYY') as fltDate,
			PKG_COMMON.get_flt_eta(T2.FLT_KEY, T2.FLT_DATE,T1.FLT_TYPE)  as etd, 
			T2.MAN_RMK  as manfRmk,
			UNLDG_PT as unLdgPt,CONTR_CODE as cccode , T1.RMK as flightRmk,
			T2.ULD_BT_NO as uldKey,
			T1.TR_NO as trNo,to_char(T1.EST_DATE,'DDMONYY') as fltEstDate
		FROM FLt_OPR T1 ,EXP_PMAN_TARMAC_ULD T2
		WHERE 
			T1.FLT_KEY =T2.FLT_KEY 
			AND T1.SCH_DATE = T2.FLT_DATE
			AND T1.FLT_TYPE='D'  
			AND T2.FLT_KEY = #fltNo#
			AND T2.FLT_DATE = #fltDate#
	</select>
	
	<update id="sqlmaintaincargomanfrmkawbupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >			
	 UPDATE EXP_PMANIFEST_AWB
		SET MAN_RMK= #manfRmk#
		WHERE 
			AWB_NO = #awbNo#
			AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			AND FLT_KEY = #fltKey#
			AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
			AND UNLDG_PT=#unLdgPt#
			AND FLT_TYPE = #fltType#
	</update>
	
	<update id="sqlmaintaincargomanfrmkawbtarmacupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >			
		 UPDATE EXP_PMAN_TARMAC_AWB
			SET MAN_RMK= #manfRmk#
				WHERE AWB_NO = #awbNo#
					AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
					AND FLT_KEY = #fltKey#
					AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
					AND UNLDG_PT=#unLdgPt#
	</update>
	
	<update id="sqlmaintaincargomanfrmkuldupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >				
	
	UPDATE EXP_PMANIFEST_ULD
		SET MAN_RMK= #manfRmk#
			WHERE FLT_KEY = #fltKey#
				AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldKey#
			AND FLT_TYPE = #fltType#
		
	</update>
	
	<update id="sqlmaintaincargomanfrmkuldtarmacupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >				
	
		UPDATE EXP_PMAN_TARMAC_ULD
			SET MAN_RMK= #manfRmk#
				WHERE FLT_KEY = #fltKey#
					AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
				AND ULD_BT_NO = #uldKey#

		
	</update>
	
	<update id="sqlmaintaincargomanfrmkfltupdate" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" >				
		UPDATE FLT_OPR
			SET RMK= #flightRmk#
				WHERE TR_NO=#trNo#

	</update>
	<select id="isFlightClosed" parameterClass="map"  resultClass="java.lang.Integer">
	 select count(0)
       			from flt_opr_events 
       			where flt_key=#flightNumber#
       			and sch_date=TO_DATE(#flightDate#,'DDMONYY')  
       			and flt_type='D'
            and SHP_CLOSE_YN='Y'
	</select>
		<!-- Added by Manorama for Maintain Cargo Manifest remark:::Ends -->
	<select id="premanifest_fbl_get_items"
      parameterClass="cargo.cms.export.bo.PreManifestSearchBO"
      resultClass="cargo.cms.export.bo.PreManifestFBLDetailsBO">        
              
		select distinct countOfUnladpt, consigneePlace,origin, unldgpt,
			FUN_GET_AWB_DOC_IND(awbNo,awbDate) as documentIndicator,
		    awbNo,substr(awbNo,1,3)||'-'||substr(awbNo,4) As awbNoDisplay, 
		    carYN, dest, pcs, wt, fblPcs, fblWt, invPcs, invWt,concatUldKey,splCode, splCode1, splCode2, 
		    content, trNo, fblLineNo, preManPcs, 
		    nvl((select distinct decode(pmanawb.awb_no,null,'N','Y') from exp_pmanifest_awb pmanAwb 
		                      where pmanawb.awb_no= Awbno
		                  and pmanawb.awb_date= to_date(awbDts,'DDMONYY')
		                  and pmanawb.flt_key=#fltKey#
		                  and to_char(pmanawb.flt_date, 'DDMONYY')=to_date(#fltDate#,'DDMONYY')
		          UNION
		          select distinct decode(pmanawb.awb_no,null,'N','Y') from exp_pman_tarmac_awb pmanAwb 
		                      where pmanawb.awb_no= Awbno
		                  and pmanawb.awb_date= to_date(awbDts,'DDMONYY')
		                  and pmanawb.flt_key=#fltKey#
		                  and to_char(pmanawb.flt_date, 'DDMONYY')=to_date(#fltDate#,'DDMONYY') and not exists 
		                  (select null from exp_pmanifest_awb pmanAwb 
		                      where pmanawb.awb_no= Awbno
		                  and pmanawb.awb_date= to_date(awbDts,'DDMONYY')
		                  and pmanawb.flt_key=#fltKey#
		                  and to_char(pmanawb.flt_date, 'DDMONYY')=to_date(#fltDate#,'DDMONYY'))),'N')  as fullPremanifest, 
		    awbDate, accpts, lockedYn, blockYn, endrPman,lightColor,tsaPassInd
		 from (SELECT
		        (select count(distinct shp.UNLDG_PT) from edi_fbl_shp shp where shp.tr_no = t3.tr_no) countOfUnladpt,     
		        ec.CSGNE_PLACE as consigneePlace,
		        t2.org as origin,    
		        t2.unldg_pt as unldgpt,
		        t2.awb_no as awbNo,   
		        nvl(t1.CAR_YN, 'N') as carYN,
		        decode(t1.dest, null, t2.DEST, t1.dest) as dest,
		        t2.pcs as pcs,
		        t2.NET_WT as wt,	
		        t2.pcs as fblPcs,
		        t2.NET_WT as fblWt,		        
		        (select sum (LOCN_PCS) from awb_inventory where awb_inventory.awb_no = t2.awb_No and awb_inventory.awb_date = t2.awb_date) as invPcs,
            	(select sum (LOCN_WT) from awb_inventory where awb_inventory.awb_no = t2.awb_No and awb_inventory.awb_date = t2.awb_date) as invWt,
            	(SELECT STRAGG(STRINGDELIM(ULD_KEY, ',')) FROM AWB_INVENTORY WHERE AWB_DATE=t2.awb_date AND AWB_NO=t2.awb_No AND ULD_KEY is not null) AS concatUldKey,
		        decode(ec.awb_no, null, decode(t1.awb_no, null,( t2.spl_code1 ||
      NVL2( t2.spl_code2, ',' || t2.spl_code2  , null ) ||
      NVL2( t2.spl_code3, ',' || t2.spl_code3 , null ) || 
       NVL2( t2.spl_code4, ',' || t2.spl_code4 , null ) ||
       NVL2( t2.spl_code5, ',' || t2.spl_code5  , null ) ||
     NVL2( t2.spl_code6, ',' || t2.spl_code6 , null ) || 
          NVL2( t2.spl_code7, ',' || t2.spl_code7 , null )||
           NVL2( t2.spl_code8, ',' || t2.spl_code8 , null )||
            NVL2( t2.spl_code9, ',' || t2.spl_code9 , null )
  ), 
		                                                  RTRIM(LTRIM
  ( t1.spl_code1 ||
      NVL2( t1.spl_code2, ',' || t1.spl_code2  , null ) ||
      NVL2( t1.spl_code3, ',' || t1.spl_code3 , null ) || 
       NVL2( t1.spl_code4, ',' || t1.spl_code4 , null ) ||
       NVL2( t1.spl_code5, ',' || t1.spl_code5  , null ) ||
     NVL2( t1.spl_code6, ',' || t1.spl_code6 , null ) || 
          NVL2( t1.spl_code7, ',' || t1.spl_code7 , null )||
           NVL2( t1.spl_code8, ',' || t1.spl_code8 , null )||
            NVL2( t1.spl_code9, ',' || t1.spl_code9 , null )
       
      ,
    ','
  ))),
		                                                  RTRIM(LTRIM
  ( ec.spl_code1 ||
      NVL2( ec.spl_code2, ',' || ec.spl_code2  , null ) ||
      NVL2( ec.spl_code3, ',' || ec.spl_code3 , null ) || 
       NVL2( ec.spl_code4, ',' || ec.spl_code4 , null ) ||
       NVL2( ec.spl_code5, ',' || ec.spl_code5  , null ) ||
     NVL2( ec.spl_code6, ',' || ec.spl_code6 , null ) || 
          NVL2( ec.spl_code7, ',' || ec.spl_code7 , null )||
           NVL2( ec.spl_code8, ',' || ec.spl_code8 , null )||
            NVL2( ec.spl_code9, ',' || ec.spl_code9 , null )
       
      ,
    ','
  )))
		                                                  as splCode,
		      t2.SPL_CODE1 as splCode1, t2.SPL_CODE2 as splCode2,
		        decode(ec.awb_no, null, decode(t1.awb_no, null,t2.man_Desc, t1.content), ec.CONTENT) as content,
		        t2.TR_NO as trNo,t2.DOC_LINE_NO as fblLineNo ,
		        t1.PMAN_PCS as preManPcs,
		        to_char(t2.awb_date,'DDMONYY') as awbDate,
		        to_char(t1.awb_date,'DDMONYY') as awbDts,
		        (Select Count(1) As Rclpcs From Exp_Rcl_Hd Rcl Where Rcl.Awb_No =T2.Awb_No And Rcl.Awb_Date=T2.Awb_Date)+
		        (SELECT count(1) AS rclPcs FROM exp_rcl_BRKDN rcl Where Rcl.Awb_No =t2.Awb_No And Rcl.Awb_Date=t2.Awb_Date) accpts, 
		            t1.EXP_AWB_LOCK as lockedYn, 
		            case when t4.miss_yn is not null and t4.miss_yn='Y' then 'Y' else 'N' end as blockYn,
		              case when mshc.endr_pman is not null and mshc.endr_pman ='Y' then 'Y' else 'N' end as endrPman, UPPER(lgt.LIGHT_SIGNAL) as lightColor,
		              t1.TSA_PASS_IND as tsaPassInd
			    FROM         
			      edi_fbl_shp t2
			      LEFT OUTER JOIN EXP_AWB_LIGHT_SIGNAL_DTL lgt ON t2.AWB_NO = lgt.AWB_NO 
				  AND t2.AWB_DATE = lgt.AWB_DATE AND t2.UNLDG_PT = lgt.UNLDG_PT AND lgt.FLT_KEY = #fltKey# 
				  AND to_char(lgt.FLT_DATE,'DDMONYY') = to_date(#fltDate#,'DDMONYY')
				  LEFT OUTER JOIN EXP_AWB_LIGHT_SIGNAL_HD lhd ON lhd.FLT_KEY = lgt.FLT_KEY 
				  AND lhd.FLT_DATE = lgt.FLT_DATE AND lhd.UNLDG_PT = lgt.UNLDG_PT
			      LEFT OUTER JOIN awb t1 ON t1.awb_no = t2.awb_no and t1.awb_date = t2.awb_date and t1.awb_closed_yn='N' 
			      left join exp_car ec   on ec.awb_no        = t2.awb_no    AND ec.awb_date        = t2.awb_date
			      LEFT JOIN mast_spl_hand_code mshc
			              on (mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,t2.spl_code1, t1.spl_code1), ec.spl_code1) 
			                    or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,t2.spl_code2, t1.spl_code2), ec.spl_code2)
			                    or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code3), ec.spl_code3)
			                    or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code4), ec.spl_code4)
			                    or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code5), ec.spl_code5)
			                    or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code6), ec.spl_code6)
			                    or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code7), ec.spl_code7)
			                    or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code8), ec.spl_code8))
			              and mshc.endr_pman='Y'
			      LEFT OUTER JOIN awb_lock t4
			                  ON t4.awb_no        = t2.awb_no 
			                  AND t4.awb_date        = t2.awb_date,
			      edi_fbl t3
			    WHERE
			      T2.Tr_No = T3.Tr_No
			      And T3.Flt_Key = #fltKey#
			      and to_char(t3.flt_date,'DDMONYY') =   to_date(#fltDate#,'DDMONYY') and t2.NIL_IND='N'
			      and t3.FBL_STATUS = 'P'
              <isNotEmpty property="port">
                        AND t2.UNLDG_PT = #port# 
              </isNotEmpty> order by t2.awb_no asc) order by fullPremanifest,awbNo
    </select>

	<select id="premanifest_fbl_get_items_count" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="java.lang.String">
		SELECT count(t2.awb_no)
	    FROM edi_fbl_shp t2
	      LEFT OUTER JOIN awb t1 ON t1.awb_no = t2.awb_no and t1.awb_date = t2.awb_date and t1.awb_closed_yn='N'
	      left join exp_car ec   on ec.awb_no        = t2.awb_no    AND ec.awb_date        = t2.awb_date
	      LEFT JOIN mast_spl_hand_code mshc
	      		on (mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,t2.spl_code1, t1.spl_code1), ec.spl_code1)
	      			or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,t2.spl_code2, t1.spl_code2), ec.spl_code2)
	      			or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code3), ec.spl_code3)
	      			or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code4), ec.spl_code4)
	      			or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code5), ec.spl_code5)
	      			or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code6), ec.spl_code6)
	      			or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code7), ec.spl_code7)
	      			or mshc.code=decode(ec.awb_no, null, decode(t1.awb_no,null,null, t1.spl_code8), ec.spl_code8))
	      		and mshc.endr_pman='Y'
	      LEFT OUTER JOIN awb_lock t4
	      		ON t4.awb_no        = t2.awb_no
	      		AND t4.awb_date        = t2.awb_date,
	      edi_fbl t3
	    WHERE
	      T2.Tr_No = T3.Tr_No
	      And T3.Flt_Key = #fltKey#
	      and to_char(t3.flt_date,'DDMONYY') =   to_date(#fltDate#,'DDMONYY') and t2.NIL_IND='N'
	      and t3.FBL_STATUS = 'P'
	      <isNotEmpty property="port">
	      	AND t2.UNLDG_PT = #port#
	      </isNotEmpty>
	</select>
  <select id="premanifest_fbl_get_header"
    	parameterClass="cargo.cms.export.bo.PreManifestSearchBO"
    	resultClass="cargo.cms.export.bo.PreManifestFBLDetailsBO">
	SELECT A.flt_key as fltKey,
		  to_char(A.sch_date, 'DDMONYY') as fltDate,
		  PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, 'D', 'DD') as etd,
      	  substr(lpad(A.est_time, 4, '0'), 1, 2)||':'||substr(A.est_time, -2) as etdTime,
      	  (SELECT OFFLINE_PORT FROM MAST_CARRIER B WHERE B.CODE=A.CARR_CODE) as conStat, 
      	  B.LIGHT_SIGNAL as lightSystem, B.AUTO_PMAN as autoPman
		  from FLT_OPR A, FLT_OPR_EVENTS B
		  WHERE
		  	 A.TR_NO = B.TR_NO AND
			 A.flt_key = #fltKey#
			 AND A.sch_date = TO_DATE(#fltDate#, 'DDMONYY')
			 AND A.flt_type = 'D'
    </select>
    <select id="premanifest_fbl_get_header_for_truck_flt"
    	parameterClass="cargo.cms.export.bo.PreManifestSearchBO"
    	resultClass="cargo.cms.export.bo.PreManifestFBLDetailsBO">
    	select
		  truck_flt_no as fltKey,
		  to_char(truck_flt_date, 'DDMONYY') as fltDate,
		  to_char(truck_flt_date,'DDMONYY') as etd,
  		  substr(lpad(sch_time, 4, '0'), 1, 2)||':'||substr(sch_time, -2) as etdTime
		from itm_trk_flt
		where
			 truck_flt_no = #fltKey#
			 and truck_flt_date = TO_DATE(#fltDate#, 'DDMONYY')
    </select>
    <select id="validfligtwithdateandtype" parameterClass="map"
		resultClass="java.lang.String">
		SELECT count(1) FROM FLT_OPR WHERE
		CARR_CODE = UPPER(#carrCode#) AND
		SCH_DATE = TO_DATE(#fltDate#,'DDMONYY') AND
		FLT_TYPE = UPPER(#fltType#) AND FLT_NO = UPPER(#fltNo#)
	</select>
	
     <select id="flightManifestFinalised" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="java.lang.String">
       select COUNT(1) from flt_opr_events  where flt_type='D' and flt_key=#fltKey#
       and sch_date=to_date(#fltDate#,'ddmonyy') and FINAL_MANF_IND='Y'
		 
     </select>
     
     <select id="flightClosed" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="java.lang.String">
       select COUNT(1) from flt_opr_events a where flt_type='D' and flt_key=#fltKey#
       and a.sch_date=to_date(#fltDate#,'ddmonyy') and a.FLT_CLS_YN='Y'
     </select>
	<select id="premanifest_fbl_get_rcl_details" parameterClass="map" resultClass="cargo.cms.export.bo.PreManifestFBLDetailsBO">
	  <![CDATA[
    	select rcl.RCL_NO as rclNo, rcl.RCL_PCS as rclPcs ,rcl.RCL_WT as rclWt, 'BULK' as uld,
    	rcl.PPK_TYPE as rclType, pmanAwb.FLT_KEY as fltKey, to_char(pmanAwb.FLT_DATE,'DDMONYY') as fltDate   
		from exp_rcl_hd rcl,edi_fbl_shp fblshp  
		LEFT OUTER JOIN exp_pmanifest_awb pmanAwb ON pmanAwb.awb_no=fblshp.awb_no and pmanAwb.awb_date=fblshp.awb_date	and pmanawb.bulk_pcs > 0 and pmanawb.bulk_wt > 0	 
		where 
		fblshp.awb_no=rcl.awb_no  and fblshp.awb_date=rcl.awb_date and fblshp.awb_no=#awbNo# and rcl.PPK_TYPE = 'B' and rcl.status <> 'V'		
		UNION 
		select rcl.RCL_NO as rclNo, rcl.PCS as rclPcs,rcl.WT as rclWt, rcl.uld_key as uld ,
		rcl.PPK_TYPE as rclType,pmanuld.FLT_KEY as fltKey, to_char(pmanuld.FLT_DATE,'DDMONYY') as fltDate   
		from exp_uld_awb rcl
		inner join edi_fbl_shp fblshp on fblshp.awb_no=rcl.awb_no  and fblshp.awb_date=rcl.awb_date		
    	LEFT OUTER JOIN exp_pmanifest_uld_awb pmanuld ON pmanuld.awb_date= rcl.awb_date and pmanuld.awb_no = rcl.awb_no and pmanuld.Uld_Bt_No = rcl.Uld_Key
		where 
		fblshp.awb_no=rcl.awb_no  and fblshp.awb_date=rcl.awb_date and fblshp.awb_no=#awbNo#
		and rcl.rcl_no in (select rcl_no from exp_rcl_hd where status <> 'V')		
	  ]]> 
    </select>
    <select id="premanifest_fbl_get_rcl_pman_details" parameterClass="cargo.cms.export.bo.PreManifestFBLDetailsBO" resultClass="cargo.cms.export.bo.PreManifestFBLDetailsBO">
    	select Nvl(SUM(Pman_Pcs),0) Pmanpcs, Nvl(SUM(Pman_Wt),0) Pmanwt  from exp_pmanifest_awb 
				where  awb_no= #awbNo#	and awb_date=to_date(#awbDate#,'DDMONYY') and UNLDG_PT=#unldgpt# and FLT_TYPE='E'
    </select>
    <insert id="sqlpremanifestfblinsert" parameterClass="cargo.cms.export.bo.PreManifestFBLDetailsBO" >
    insert into exp_pman_fbl (FLT_KEY, 
	FLT_DATE, 
	UNLDG_PT, 
	AWB_NO, 
	PCS, 
	WT, 
	SPL_CODE1, 
	SPL_CODE2, 
	REMARKS, 
	FBL_TR_NO, 
	FBL_LINE_NO, 
	CR_USER_ID, 
	CR_DATE, 
	LM_USER_ID, 
	LM_DATE, 
	FLT_TYPE,GRP_NO,BLD_INST,PRIORITY,AWB_DATE,TR_TYPE)
	values(#fltKey#,#fltDate#,#unldgpt#,#awbNo#,#pcs#,#wt#,#splCode1#,#splCode2#,#manfRmk#,
	#trNo#,#fblLineNo#,#crUserId#,sysdate,#lmUserId#,sysdate,'D',#grpNo#,#bldupInstr#,
	#priority#,TO_DATE(#awbDate#,'ddmonyy'),'PMFBL')
   	 </insert>
   	 
   	 <select id="checkLadingPoints" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="java.lang.String">
	
    		select COUNT(1) from flt_opr_seg where tr_no in (
					select tr_no from flt_opr where flt_key = #fltKey#  and 
					sch_date=to_date(#fltDate#,'dd-mon-yy') and flt_type = 'D')
			and brd_point='HKG' 			
			and off_point=#port#
   	</select> 
   	   <select id="ladingPoints" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="cargo.cms.export.bo.PreManifestFBLDetailsBO">
	
    		select off_point as port from flt_opr_seg where tr_no in (
					select tr_no from flt_opr where flt_key = #fltKey#  and 
					sch_date=to_date(#fltDate#,'dd-mon-yy') and flt_type = 'D')
			and brd_point='HKG' 
   	</select> 
   	
	
	<select id="checkPreManFBL" parameterClass="cargo.cms.export.bo.PreManifestFBLDetailsBO" resultClass="java.lang.String">
	
    		            select count(1) from exp_pman_fbl where FLT_KEY=#fltKey# and FLT_DATE=to_date(#fltDate#,'dd-mon-yy') and AWB_NO=#awbNo#
            and FLT_TYPE='D'
  </select>   	
	<insert id="insAwb" parameterClass="java.util.HashMap">
   	insert into AWB (AWB_NO, AWB_DATE, AWB_TYPE, PPK_TYPE, PCS, WT, 
				 	 PMAN_BULK_PCS, PMAN_BULK_WT, SPL_CODE1, SPL_CODE2, PMAN_PCS, PMAN_WT,
				 	 CARR_CODE, CATALOG, ORIG, DEST, NON_PMAN_PCS, NON_PMAN_WT,
				 	 CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE,TR_TYPE,CNSL_IND)
		  values(#AWB_NO#, #AWB_DATE#, #AWB_TYPE#, #PPK_TYPE#, nvl(null, 0), nvl(null, 0),
		  		 nvl(#PCS#, 0), nvl(#WT#, 0), #SPL_CODE1#, #SPL_CODE2#, nvl(#PMAN_PCS#, 0), nvl(#PMAN_WT#, 0),
		  		 #CARR_CODE#, 'EG', #ORIG#, #DEST#, nvl(#NON_PMAN_PCS#, 0), nvl(#NON_PMAN_WT#, 0),
		  		 #USER_ID#, sysdate, #USER_ID#, sysdate,#TR_TYPE#,#FHL_CNSL_YN#)
   	</insert>
	<select id="chkInsUpdAwb" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	      select ppk_type, AWB_CLOSED_YN, ACCEPT_MODE, CAR_YN, 
	               NVL(PMAN_BULK_PCS, 0) PMAN_BULK_PCS, NVL(PMAN_BULK_WT, 0) PMAN_BULK_WT, 
	               NVL(PMAN_PPK_PCS, 0) PMAN_PPK_PCS, NVL(PMAN_PPK_WT, 0) PMAN_PPK_WT, 
	               NVL(PMAN_MIX_PCS, 0) PMAN_MIX_PCS, NVL(PMAN_MIX_WT, 0) PMAN_MIX_WT,
	               NVL(RCL_BULK_PCS, 0) RCL_BULK_PCS, NVL(RCL_BULK_WT, 0) RCL_BULK_WT, 
	               NVL(RCL_PPK_PCS, 0) RCL_PPK_PCS, NVL(RCL_PPK_WT, 0) RCL_PPK_WT, 
	               NVL(RCL_MIX_PCS, 0) RCL_MIX_PCS, NVL(RCL_MIX_WT, 0) RCL_MIX_WT,
	               NVL(pcs, 0) AWB_PCS,
	               NVL(wt, 0) AWB_WT,
	               SPL_CODE1 as SPL_CODE1,
	               SPL_CODE2 as SPL_CODE2,
	               SPL_CODE3 as SPL_CODE3,
	               SPL_CODE4 as SPL_CODE4,
	               SPL_CODE5 as SPL_CODE5,
	               SPL_CODE6 as SPL_CODE6,
	               SPL_CODE7 as SPL_CODE7,
	               SPL_CODE8 as SPL_CODE8,
	               SPL_CODE9 as SPL_CODE9	               
	            from       awb 
	             where      awb_no=#AWB_NO# and awb_date=to_date(#AWB_DATE#,'DDMONYY')
	</select>

   	<update  id="updAwb001" parameterClass="java.util.HashMap">
   	update AWB SET  
                PMAN_BULK_PCS = nvl(#PMAN_BULK_PCS#, 0),
                PMAN_BULK_WT = nvl(#PMAN_BULK_WT#, 0),               
                LM_USER_ID = #USER_ID#, 
                LM_DATE=SYSDATE,
				PMAN_PCS= NVL(#PMAN_PCS#, PMAN_PCS),
				PMAN_WT= NVL(#PMAN_WT#, PMAN_WT),
				NON_PMAN_PCS= NVL(#NON_PMAN_PCS#, NON_PMAN_PCS),
				NON_PMAN_WT= NVL(#NON_PMAN_WT#, NON_PMAN_WT),
				TR_TYPE=#TR_TYPE#,
				AWB_TYPE = NVL(AWB_TYPE,#AWB_TYPE#),
				PCS = NVL(PCS,0),
				WT = NVL(WT,0),
				spl_code1 = #SPL_CODE1#,
		        spl_code2 = #SPL_CODE2#, 
		        spl_code3 = #SPL_CODE3#, 
		        spl_code4 = #SPL_CODE4#, 
		        spl_code5 = #SPL_CODE5#, 
		        spl_code6 = #SPL_CODE6#,
		        spl_code7 = #SPL_CODE7#,
		        spl_code8 = #SPL_CODE8#,
		        spl_code9 = #SPL_CODE9#,
				CARR_CODE = NVL(CARR_CODE,#CARR_CODE#),
				CATALOG = NVL(CATALOG,'EG'),
				ORIG = NVL(ORIG,#ORIG#),
				DEST = NVL(DEST,#DEST#) 
    	where awb_no=#AWB_NO# and awb_date=to_date(#AWB_DATE#,'DDMONYY')
   	</update>
   	<update  id="updAwb002" parameterClass="java.util.HashMap">
   	update AWB SET  
                PMAN_PPK_PCS = nvl(PMAN_PPK_PCS, 0) + NVL(#PCS#, 0),
                PMAN_PPK_WT = nvl(PMAN_PPK_WT, 0) + NVL(#WT#, 0),
                SPL_CODE1 = NVL(#SPL_CODE1#, SPL_CODE1),
                SPL_CODE2 = NVL(#SPL_CODE2#, SPL_CODE2),
                LM_USER_ID = #USER_ID#, 
                LM_DATE=SYSDATE,
				PMAN_PCS= NVL(#PMAN_PCS#, PMAN_PCS),
				PMAN_WT= NVL(#PMAN_WT#, PMAN_WT),
				NON_PMAN_PCS= NVL(#NON_PMAN_PCS#, NON_PMAN_PCS),
				NON_PMAN_WT= NVL(#NON_PMAN_WT#, NON_PMAN_WT)
    	where awb_no=#AWB_NO# and awb_date=to_date(#AWB_DATE#,'DDMONYY')
   	</update>
   	<update  id="updAwb003" parameterClass="java.util.HashMap">
    update AWB SET  
                PMAN_MIX_PCS = nvl(PMAN_MIX_PCS, 0) + NVL(#PCS#, 0),
                PMAN_MIX_WT = nvl(PMAN_MIX_WT, 0) + NVL(#WT#, 0),
                SPL_CODE1 = NVL(#SPL_CODE1#, SPL_CODE1),
                SPL_CODE2 = NVL(#SPL_CODE2#, SPL_CODE2),
                LM_USER_ID = #USER_ID#, 
                LM_DATE=SYSDATE,
				PMAN_PCS= NVL(#PMAN_PCS#, PMAN_PCS),
				PMAN_WT= NVL(#PMAN_WT#, PMAN_WT),
				NON_PMAN_PCS= NVL(#NON_PMAN_PCS#, NON_PMAN_PCS),
				NON_PMAN_WT= NVL(#NON_PMAN_WT#, NON_PMAN_WT)
    	where awb_no=#AWB_NO# and awb_date=to_date(#AWB_DATE#,'DDMONYY')
   	</update>
   	<update  id="updAwb004" parameterClass="java.util.HashMap">
    update AWB SET
				NON_PMAN_PCS= NVL(#NON_PMAN_PCS#, NON_PMAN_PCS),
				NON_PMAN_WT= NVL(#NON_PMAN_WT#, NON_PMAN_WT),
				TR_TYPE=#TR_TYPE#
    	where awb_no=#AWB_NO# and awb_date=to_date(#AWB_DATE#,'DDMONYY')
   	</update>
   	<select id="getAwb005" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    select AWB_NO, to_char(awb_date,'DDMONYY') AWB_DATE, NON_PMAN_PCS, NON_PMAN_WT, CAR_YN 
    from AWB
    	where awb_no=#AWB_NO# and awb_date=to_date(#AWB_DATE#,'DDMONYY')
   	</select>   	
   	<select id="FETCH_SYS_DATE" parameterClass="java.lang.Object" resultClass="java.lang.String" >
		SELECT TO_CHAR(SYSDATE,'DDMONYY') FROM DUAL
	</select>
	<insert id="insExpPmanAwb001"  parameterClass="java.util.HashMap">
	insert into EXP_PMANIFEST_AWB (AWB_NO, AWB_DATE, FLT_KEY, FLT_DATE, FLT_TYPE,
		                          UNLDG_PT, GROUP_NO, BLDUP_INSTR, MAN_RMK, 
		                          BULK_PCS, BULK_WT, PMAN_PCS, PMAN_WT, PRIORITY,
		                          PPK_PCS, PPK_WT, MIX_PCS, MIX_WT, UNASSIGNED_BULK_PCS, UNASSIGNED_BULK_WT,
		                          CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, ENDORSED_BY
		                          <isNotEmpty property="ENDORSED_BY">
									,ENDORSED_DATE
								  </isNotEmpty>                        
		                           )
			values(#AWB_NO#, to_date(#AWB_DATE#, 'DDMONYY'), #FLT_KEY#, to_date(#FLT_DATE#, 'DDMONYY'), 'E',
			       #UNLDG_PT#, #GROUP_NO#, #BLDUP_INSTR#, #MAN_RMK#, 
			       NVL(#BULK_PCS#, 0), NVL(#BULK_WT#, 0), NVL(#PMAN_PCS#, 0), NVL(#PMAN_WT#, 0), #PRIORITY#, 
			       nvl(#PPK_PCS#, 0), nvl(#PPK_WT#, 0), nvl(#MIX_PCS#, 0), nvl(#MIX_WT#, 0), #UNASSIGNED_BULK_PCS#, #UNASSIGNED_BULK_WT#,
			       #CR_USER_ID#, sysdate, #LM_USER_ID#, sysdate, #ENDORSED_BY#
			      <isNotEmpty property="ENDORSED_BY">
			       , to_char(sysdate,'DDMONYY')
			        </isNotEmpty>)
	</insert>
	<select id="insExpPmanAwb002" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   	select  AWB_NO, to_char(awb_date, 'DDMONYY') AWB_DATE, nvl(bulk_pcs,0) BULK_PCS, nvl(bulk_wt,0) BULK_WT,
   			nvl(ppk_pcs,0) PPK_PCS, nvl(ppk_wt,0) PPK_WT,
   			nvl(mix_pcs,0) MIX_PCS, nvl(mix_wt,0) MIX_WT
		 from 	EXP_PMANIFEST_AWB 
		 where 	awb_no=#AWB_NO# and awb_date=to_date(#AWB_DATE#,'DDMONYY')
		 and	FLT_KEY=#FLT_KEY# and FLT_DATE=to_date(#FLT_DATE#,'DDMONYY')
		 and	UNLDG_PT=#UNLDG_PT# and FLT_TYPE='E'
   	</select>
   	<update  id="insExpPmanAwb003" parameterClass="java.util.HashMap">
    update EXP_PMANIFEST_AWB 
		set GROUP_NO = #GROUP_NO# , BLDUP_INSTR = #BLDUP_INSTR#, MAN_RMK = #MAN_RMK#, 
		    PRIORITY = #PRIORITY#,  LM_USER_ID =	#LM_USER_ID#, LM_DATE=sysdate,
		    PMAN_PCS = nvl(PMAN_PCS, 0) +	nvl(#PMAN_PCS#, 0),
		    PMAN_WT  = nvl(PMAN_WT, 0) + nvl(#PMAN_WT#, 0),
		    BULK_PCS = nvl(BULK_PCS, 0) +	nvl(#BULK_PCS#, 0),
		    BULK_WT	 = nvl(BULK_WT, 0) + nvl(#BULK_WT#, 0),
		    PPK_PCS  = nvl(PPK_PCS, 0) + nvl(#PPK_PCS#, 0),
		    PPK_WT	 = nvl(PPK_WT, 0) + nvl(#PPK_WT#, 0),
		    MIX_PCS	 = nvl(MIX_PCS, 0) + nvl(#MIX_PCS#, 0),
		    MIX_WT	 = nvl(MIX_WT, 0) + nvl(#MIX_WT#, 0)
		where AWB_NO    =	#AWB_NO# 
		and   AWB_DATE	= to_date(#AWB_DATE#, 'DDMONYY') 
		and   FLT_TYPE	= 'E' 
		and   FLT_KEY	  = #FLT_KEY# 
		and   FLT_DATE	= to_date(#FLT_DATE#, 'DDMONYY')
		and   UNLDG_PT	= #UNLDG_PT#
   	</update>
   	
   	<!--  Changed for QR -->
	<select id="getProShcList" parameterClass="cargo.cms.export.bo.PreManifestSearchBO" resultClass="cargo.cms.export.bo.PreManifestFBLDetailsBO">
		select off_point unldgpt, leg_ord legOrd, prohibit_shc1 prShc1, prohibit_shc2 prShc2, prohibit_shc3 prShc3
		from flt_opr_leg 
		where  flt_type = 'D' and flt_key=#fltKey# and sch_date=#fltDate#
		order by leg_ord
	</select>
<!-- ##################### Amend/Delete Premanifest   : Start  ########################################-->
	<select id="sqlfetchPmanPcsWt" parameterClass="map"  resultClass="java.lang.Integer">
		select NVL(sum(PMAN_Pcs),0) from exp_pmanifest_awb p
		join flt_opr f on f.flt_key = p.flt_key and f.sch_date = p.flt_date and f.flt_type = 'D' 
		where (select  FUN_GET_PARENT_CARR (f.carr_code) from dual) = (select  FUN_GET_PARENT_CARR (#FLT_CARR#) from dual)
		and p.awb_no=#AWB_NO# and p.awb_date=#AWB_DATE#
	</select>
	<select id="sqlcheckAwbownerPCWt" parameterClass="map"  resultClass="java.lang.String">
		SELECT PCS FROM AWB_OWNER WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND 
		CARR_CODE =(select  FUN_GET_PARENT_CARR (#FLT_CARR#) from dual)
	</select>
	<select id="sqlpremanifestcheckoutind" parameterClass="cargo.cms.export.bo.PrePackCargoBO"  resultClass="java.lang.String">
		SELECT decode(t2.cfm_status, 'CHECKED OUT', 'Y', 'N') CHK_FLG    
		FROM EXP_CHKOUT_DTL t1, uld_inventory t2    
		WHERE t1.uld_key = t2.uld_key 
			  AND t1.FLT_KEY = #fltNo#
	  		  AND t1.FLT_DATE = to_date(#fltDate#,'DDMONYY')
	  		  AND t1.ULD_KEY = #uldNo#
	</select>
	<select id="sqlamenddeleteawbdetails" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.PrePackCargoBO">
		SELECT rownum as recordID,V.AWB_NO as awbno, 
		CONCAT(CONCAT(SUBSTR(V.AWB_NO,0,3),'-'),SUBSTR(V.AWB_NO,4)) as awbnoDispaly, 
		to_char(V.AWB_DATE,'DDMONYY') as awbdate, 
		V.FLT_KEY as fltNo, to_char(V.FLT_DATE,'DDMONYY') as fltDate, 
		V.PMAN_PCS as preManfPc, V.PMAN_WT as preManfWt
		FROM   V_EXP_PMAN_AWB_FLT V
			<isNotEmpty property="loginCarrier">
				join flt_opr t1
				on t1.flt_key = v.flt_key
				and t1.sch_date = v.flt_date
				and t1.flt_type = 'D'
			</isNotEmpty>
		WHERE  AWB_NO = #awb1#
		AND AWB_DATE = to_char((SELECT AWB_DATE FROM AWB WHERE AWB_NO =#awb1# AND (AWB_TYPE='E' OR AWB_TYPE='T') AND AWB_CLOSED_YN='N'),'DDMONYY')
		AND PMAN_PCS > 0
		<isNotEmpty property="loginCarrier">
	       	AND   (t1.CARR_CODE = #loginCarrier#
					OR t1.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #loginCarrier#))
		</isNotEmpty>
	</select>	
   <select id="isLadingPointValid" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="java.lang.String">
	
    		select COUNT(1) from flt_opr_seg where tr_no in (
					select tr_no from flt_opr where flt_key = #fltKey#  and 
					sch_date=to_date(#fltDate#,'dd-mon-yy') and flt_type = 'D')
			and brd_point='HKG' 			
			and off_point=#unLdgPoint#
   	</select>
   	<select id="checkIfpremanifest" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="java.lang.String">
	
    		select COUNT(1) from exp_pmanifest_awb pmanawb where pmanawb.flt_key=#fltKey#   and pmanawb.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and pmanawb.UNLDG_PT =#unLdgPoint#
   	</select>  
   		<select id="getPremanifestList" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">	
  select pmanawb.awb_No as awbNo,CONCAT(CONCAT(SUBSTR(pmanawb.awb_No,0,3),'-'),SUBSTR(pmanawb.awb_No,4)) as awbNoDisplay,	to_char(pmanawb.awb_date, 'DDMONYY') as awbDate,pmanawb.PMAN_PCS as pmanPcs,pmanawb.PMAN_WT as pmanWt,
		(select car.AIRL_RMK from exp_car car where pmanawb.awb_No=car.awb_No and to_char(pmanawb.awb_date,'DDMONYY')=to_char(car.awb_date,'DDMONYY')) as airlnRmk,
		(select car.WH_RMK from exp_car car where pmanawb.awb_No=car.awb_No and to_char(pmanawb.awb_date,'DDMONYY')=to_char(car.awb_date,'DDMONYY')) as whRmk,
		(select FLT_KEY from v_ddt_dtl ddt where  ddt.awb_no=pmanawb.awb_no and pmanawb.awb_date=ddt.awb_date
        and ddt.shp_cntg_flt_key=pmanawb.flt_key and ddt.shp_cntg_flt_date=pmanawb.flt_date and rownum=1) as inbdFltKey,
        (select to_char(ddt.flt_date, 'DDMONYY') from v_ddt_dtl ddt where  ddt.awb_no=pmanawb.awb_no and pmanawb.awb_date=ddt.awb_date
        and ddt.shp_cntg_flt_key=pmanawb.flt_key and ddt.shp_cntg_flt_date=pmanawb.flt_date and rownum=1)as inbdFltDate, 
		RTRIM(LTRIM
  ( awb.spl_code1 ||
      NVL2( awb.spl_code2, ',' || awb.spl_code2  , null ) ||
      NVL2( awb.spl_code3, ',' || awb.spl_code3 , null ) || 
       NVL2( awb.spl_code4, ',' || awb.spl_code4 , null )|| 
        NVL2( awb.spl_code5, ',' || awb.spl_code5 , null )|| 
         NVL2( awb.spl_code6, ',' || awb.spl_code6 , null )|| 
          NVL2( awb.spl_code7, ',' || awb.spl_code7 , null )||
           NVL2( awb.spl_code8, ',' || awb.spl_code8 , null )||
            NVL2( awb.spl_code9, ',' || awb.spl_code9 , null )
      ,
    ','
  )) as shc,decode(awb.CATALOG,'TM','Y','N') as tmInd,
             ( select min(priority) from awb_inventory awbinv ,mast_wh_loc mastloc ,mast_wh_group mastgp,mast_wh_type mastType 
        where awbinv.awb_no=pmanawb.awb_no and  to_char(awbinv.awb_date,'DDMONYY')=to_char(pmanawb.awb_date,'DDMONYY')
		and awbinv.LOC_CODE=mastloc.CODE and awbinv.flt_key is null and mastloc.WH_GROUP=mastgp.WH_GROUP and mastgp.wh_area not in ('ST1R') and
        mastType.WH_TYPE=mastgp.WH_TYPE) as priority ,  
    PKG_EXP_RPT.get_cc_code_awbType( #fltKey#,#fltDate#,pmanawb.awb_no,awb.awb_type) as constraintCode,
		(select decode(COUNT(1),0,'','Y') from exp_car_sec jo where jo.awb_no =pmanawb.awb_no and to_char(jo.awb_date,'DDMONYY')= to_char(pmanawb.awb_date,'DDMONYY') and jo.REL_DATE is not null) as holding,
    (select sum(bujodtl.AWB_JO_PC) from exp_bu_jo bujo, exp_bu_jo_dtl bujodtl where bujo.jo_no=bujodtl.jo_no and bujo.flt_key=pmanawb.flt_key and bujo.flt_date=pmanawb.flt_date and bujodtl.awb_no=pmanawb.awb_no and  to_char(bujodtl.awb_date,'DDMONYY')= to_char(pmanawb.awb_date,'DDMONYY')) as awbJOPcs
    , (select sum (bujodtl.AWB_JO_WT) from exp_bu_jo bujo, exp_bu_jo_dtl bujodtl where bujo.jo_no=bujodtl.jo_no and bujo.flt_key=pmanawb.flt_key and bujo.flt_date=pmanawb.flt_date and bujodtl.awb_no=pmanawb.awb_no and to_char(bujodtl.awb_date,'DDMONYY')= to_char(pmanawb.awb_date,'DDMONYY')) as awbJOWt,
     (select sum(ddtShp.SHP_TRF_PC) from V_DDT_DTL ddtShp where
		ddtShp.awb_no=pmanawb.awb_no and to_char(pmanawb.awb_date,'DDMONYY')=to_char(ddtShp.awb_date,'DDMONYY') 
                and ddtShp.shp_cntg_flt_key=pmanawb.flt_key and ddtShp.shp_cntg_flt_date=pmanawb.flt_date and ddtShp.shp_trf_type='QT' ) as qtPcs,
      (select sum(ddtShp.SHP_TRF_PC) from V_DDT_DTL ddtShp where
		ddtShp.awb_no=pmanawb.awb_no and to_char(pmanawb.awb_date,'DDMONYY')=to_char(ddtShp.awb_date,'DDMONYY') 
                and ddtShp.shp_cntg_flt_key=pmanawb.flt_key and ddtShp.shp_cntg_flt_date=pmanawb.flt_date and ddtShp.shp_trf_type='QT' and ddtShp.QT_BU = 'Y') as qtBuPcs,
    (select sum(ddtShp.SHP_TRF_WT) from V_DDT_DTL ddtShp where
		ddtShp.awb_no=pmanawb.awb_no and to_char(pmanawb.awb_date,'DDMONYY')=to_char(ddtShp.awb_date,'DDMONYY') 
              	and ddtShp.shp_cntg_flt_key=pmanawb.flt_key and ddtShp.shp_cntg_flt_date=pmanawb.flt_date and ddtShp.shp_trf_type='QT' and ddtShp.QT_BU = 'Y') as qtWt,
    ( select allotawb.instruction from edi_elp_allot allot ,edi_elp_msg elpmsg,edi_elp_port elpport, edi_elp_allot_awb allotawb  where 
  allot.tr_no =elpmsg.tr_no and allot.doc_line_no=allotawb.c_doc_line_no and allotawb.awb_no=pmanawb.awb_no
    and allot.port_doc_line_no=elpport.DOC_LINE_NO 	 and elpmsg.tr_no=elpport.tr_no  and elpport.port=#unLdgPoint# and elpmsg.tr_no in (
                SELECT a.trNO FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and elpmsg.TRF_IND='Y'  order by to_number(elpmsg.tr_no)  desc)a
                WHERE rownum =1)  and rownum=1) as buildUpInstr, (select decode(count(1),0,'N','Y') from  FLT_OPR OPR where 
              ((( TO_CHAR(pmanawb.LM_DATE, 'HH24MI')&gt; TO_CHAR(TO_DATE(TO_CHAR(SCH_DATE ||' ' || LPAD(SCH_TIME,4,0)),'DD-MON-YY HH24MI') - (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'BU_PMAN_CHNG_HRS')/24,'HH24MI'))and (TO_CHAR(pmanawb.LM_DATE, 'DD') &gt;= TO_CHAR(opr.SCH_DATE,'DD')) ) 
OR (TO_CHAR(pmanawb.LM_DATE, 'DD') &gt; TO_CHAR(opr.SCH_DATE,'DD')))
        and pmanawb.flt_key=OPR.flt_key and pmanawb.flt_date=opr.SCH_DATE) as pmanModified,		
    (select decode(count(1),0,'N','Y') from awb_inventory awbinv where pmanawb.awb_no=awbinv.awb_no and  
    to_char(pmanawb.awb_date,'DDMONYY')= to_char(awbinv.awb_date,'DDMONYY')) as inventoryExists,
     (select sum(locn_pcs) from awb_inventory awbinv where awbinv.awb_no=pmanawb.awb_no and  to_char(pmanawb.awb_date,'DDMONYY')= to_char(awbinv.awb_date,'DDMONYY')
   and awbinv.flt_type = 'E' and awbinv.flt_key is not null) as buildUpPieces,
     (select sum(locn_wt) from awb_inventory awbinv where awbinv.awb_no=pmanawb.awb_no and  to_char(pmanawb.awb_date,'DDMONYY')= to_char(awbinv.awb_date,'DDMONYY')
    and awbinv.flt_type = 'E' and awbinv.flt_key is not null ) as buildUpWt 
    from exp_pmanifest_awb pmanawb,awb awb where pmanawb.flt_key=#fltKey#  and pmanawb.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and pmanawb.awb_no=awb.awb_no
    and  to_char(pmanawb.awb_date,'DDMONYY')= to_char(awb.awb_date,'DDMONYY') and pmanawb.UNLDG_PT =#unLdgPoint# and pmanawb.flt_type='E' and pmanawb.UNASSIGNED_BULK_PCS &gt; 0
    <isNotEmpty property="notTranshipCity">
			AND	awb.ORIG not in( #notTranshipCity#)
	</isNotEmpty>
	 <isEqual prepend="AND" property="qtBuildUp" compareValue="Y"> 	
			    	exists(select null from V_DDT_DTL ddtShp where
		ddtShp.awb_no=pmanawb.awb_no and to_char(pmanawb.awb_date,'DDMONYY')=to_char(ddtShp.awb_date,'DDMONYY') 
                and ddtShp.shp_cntg_flt_key=pmanawb.flt_key and ddtShp.shp_cntg_flt_date=pmanawb.flt_date and ddtShp.shp_trf_type='QT' and ddtShp.QT_BU = 'Y')
	</isEqual>
	  order by priority asc
   	</select>
  		<select id="dlsFinalize" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	   select nvl(t2.dls_ind, 'N') from   flt_opr t1, flt_opr_events t2
       where  t1.tr_no = t2.tr_no and    t1.flt_key = #FLT_KEY#
       and    t1.sch_date = TO_DATE(#FLT_DATE#, 'DDMONYY')  and    t1.flt_type = 'D'
	  </select>
   		<select id="getPremanistForQT" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
  select distinct pmanawb.awb_No as awbNo,CONCAT(CONCAT(SUBSTR(pmanawb.awb_No,0,3),'-'),SUBSTR(pmanawb.awb_No,4)) as awbNoDisplay,	to_char(pmanawb.awb_date, 'DDMONYY') as awbDate,pmanawb.PMAN_PCS as pmanPcs,pmanawb.PMAN_WT as pmanWt,
		(select car.AIRL_RMK from exp_car car where pmanawb.awb_No=car.awb_No and to_char(pmanawb.awb_date,'DDMONYY')=to_char(car.awb_date,'DDMONYY')) as airlnRmk,
		(select car.WH_RMK from exp_car car where pmanawb.awb_No=car.awb_No and to_char(pmanawb.awb_date,'DDMONYY')=to_char(car.awb_date,'DDMONYY')) as whRmk,
		ddtshp.FLT_KEY  as inbdFltKey,
		to_char(ddtshp.flt_date, 'DDMONYY') as inbdFltDate, 
		RTRIM(LTRIM
  ( awb.spl_code1 ||
      NVL2( awb.spl_code2, ',' || awb.spl_code2  , null ) ||
      NVL2( awb.spl_code3, ',' || awb.spl_code3 , null ) || 
       NVL2( awb.spl_code4, ',' || awb.spl_code4 , null )|| 
        NVL2( awb.spl_code5, ',' || awb.spl_code5 , null )|| 
         NVL2( awb.spl_code6, ',' || awb.spl_code6 , null )|| 
          NVL2( awb.spl_code7, ',' || awb.spl_code7 , null )||
           NVL2( awb.spl_code8, ',' || awb.spl_code8 , null )||
            NVL2( awb.spl_code9, ',' || awb.spl_code9 , null )
      ,
    ','
  )) as shc,decode(awb.CATALOG,'TM','Y','N') as tmInd,
                ( select min(priority) from awb_inventory awbinv ,mast_wh_loc mastloc ,mast_wh_group mastgp,mast_wh_type mastType 
        where awbinv.awb_no=pmanawb.awb_no and  to_char(awbinv.awb_date,'DDMONYY')=to_char(pmanawb.awb_date,'DDMONYY')
		and awbinv.LOC_CODE=mastloc.CODE and awbinv.flt_key is null and mastloc.WH_GROUP=mastgp.WH_GROUP and mastgp.wh_area not in ('ST1R') and
        mastType.WH_TYPE=mastgp.WH_TYPE) as priority , 
		(select cc_code from v_cst_exp_cc_code where awb_no=pmanawb.awb_no and flt_key=pmanawb.flt_key and flt_date=pmanawb.flt_date and flt_type=pmanawb.flt_type ) as constraintCode,
		(select decode(COUNT(1),0,'','Y') from exp_car_sec jo where jo.awb_no =pmanawb.awb_no and to_char(jo.awb_date,'DDMONYY')= to_char(pmanawb.awb_date,'DDMONYY') and jo.REL_DATE is not null) as holding,
    (select  sum(bujodtl.AWB_JO_PC) from exp_bu_jo bujo, exp_bu_jo_dtl bujodtl where bujo.jo_no=bujodtl.jo_no and bujo.flt_key=pmanawb.flt_key and bujo.flt_date=pmanawb.flt_date and bujodtl.awb_no=pmanawb.awb_no and  to_char(bujodtl.awb_date,'DDMONYY')= to_char(pmanawb.awb_date,'DDMONYY')) as awbJOPcs
    , (select sum(bujodtl.AWB_JO_WT) from exp_bu_jo bujo, exp_bu_jo_dtl bujodtl where bujo.jo_no=bujodtl.jo_no and bujo.flt_key=pmanawb.flt_key and bujo.flt_date=pmanawb.flt_date and bujodtl.awb_no=pmanawb.awb_no and to_char(bujodtl.awb_date,'DDMONYY')= to_char(pmanawb.awb_date,'DDMONYY')) as awbJOWt,
   0 as qtPcs, (select sum(ddtShp.SHP_TRF_PC) from V_DDT_DTL ddtShp where
		ddtShp.awb_no=pmanawb.awb_no and to_char(pmanawb.awb_date,'DDMONYY')=to_char(ddtShp.awb_date,'DDMONYY') 
                and ddtShp.shp_cntg_flt_key=pmanawb.flt_key and ddtShp.shp_cntg_flt_date=pmanawb.flt_date and ddtShp.shp_trf_type='QT' and ddtShp.QT_BU = 'Y') as qtBuPcs,
                (select sum(ddtShp.SHP_TRF_WT) from V_DDT_DTL ddtShp where
		ddtShp.awb_no=pmanawb.awb_no and to_char(pmanawb.awb_date,'DDMONYY')=to_char(ddtShp.awb_date,'DDMONYY') 
              	and ddtShp.shp_cntg_flt_key=pmanawb.flt_key and ddtShp.shp_cntg_flt_date=pmanawb.flt_date and ddtShp.shp_trf_type='QT' and ddtShp.QT_BU = 'Y')   as qtWt,     ( select allotawb.instruction from edi_elp_allot allot ,edi_elp_msg elpmsg,edi_elp_port elpport, edi_elp_allot_awb allotawb  where 
  allot.tr_no =elpmsg.tr_no and allot.doc_line_no=allotawb.c_doc_line_no and allotawb.awb_no=pmanawb.awb_no
    and allot.port_doc_line_no=elpport.DOC_LINE_NO 	 and elpmsg.tr_no=elpport.tr_no  and elpport.port=#unLdgPoint# and elpmsg.tr_no in (
                SELECT a.trNO FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and elpmsg.TRF_IND='Y'  order by to_number(elpmsg.tr_no)  desc)a
                WHERE rownum =1)  and rownum=1) as buildUpInstr, (select decode(count(1),0,'N','Y') from  FLT_OPR OPR where 
        ((( TO_CHAR(pmanawb.LM_DATE, 'HH24MI') &gt; TO_CHAR(TO_DATE(TO_CHAR(SCH_DATE ||' ' || LPAD(SCH_TIME,4,0)),'DD-MON-YY HH24MI') - (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'BU_PMAN_CHNG_HRS')/24,'HH24MI'))and (TO_CHAR(pmanawb.LM_DATE, 'DD') &gt;= TO_CHAR(opr.SCH_DATE,'DD')) ) 
OR (TO_CHAR(pmanawb.LM_DATE, 'DD') &gt; TO_CHAR(opr.SCH_DATE,'DD')))
        and pmanawb.flt_key=OPR.flt_key and pmanawb.flt_date=opr.SCH_DATE) as pmanModified,		
    (select decode(count(1),0,'N','Y') from awb_inventory awbinv where pmanawb.awb_no=awbinv.awb_no and  to_char(pmanawb.awb_date,'DDMONYY')= to_char(awbinv.awb_date,'DDMONYY')) as inventoryExists
    from exp_pmanifest_awb pmanawb,awb awb,V_DDT_DTL ddtShp where pmanawb.flt_key=#fltKey#  and pmanawb.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and pmanawb.awb_no=awb.awb_no
    and  to_char(pmanawb.awb_date,'DDMONYY')= to_char(awb.awb_date,'DDMONYY') and pmanawb.UNLDG_PT =#unLdgPoint# and pmanawb.flt_type='E'
 and ddtShp.awb_no=pmanawb.awb_no and to_char(pmanawb.awb_date,'DDMONYY')=to_char(ddtShp.awb_date,'DDMONYY') 
    and ddtShp.shp_cntg_flt_key=pmanawb.flt_key and ddtShp.shp_cntg_flt_date=pmanawb.flt_date and ddtShp.SHP_TRF_TYPE='QT' 
    and pmanawb.UNASSIGNED_BULK_PCS &gt; 0 order by priority asc
       	</select>




		<select id="checkIfQTAwbExists" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
		  select  jodtl.jo_no as jobOrderNo from exp_bu_jo_dtl jodtl,exp_bu_jo jo where jodtl.awb_no=#awbNo# and jodtl.jo_no= jo.jo_no and jo.flt_key=#fltKey# and jo.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
		</select>
		<delete id="deleteGroup" parameterClass="cargo.cms.export.buildup.bo.BuildUpGroupBO">
		delete from exp_bu_gp where gp_no=#groupNo# 
	</delete>
	<delete id="deleteGroupUld" parameterClass="cargo.cms.export.buildup.bo.BuildUpGroupBO">
		delete from exp_bu_gp_uld_type where gp_no=#groupNo# 
	</delete>
   	<select id="fetchEtdandStd" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">	
   	 select PKG_COMMON.get_flt_eta(flt_opr.FLT_KEY, flt_opr.SCH_DATE, 'D')  as etd,
 	decode(flt_opr.SCH_TIME,null,null,substr(lpad(flt_opr.SCH_TIME,4,'0'),1,2)||':'||substr(lpad(flt_opr.SCH_TIME,4,'0'),3)) as std
 	from flt_opr where flt_key = #fltKey# and sch_date = TO_DATE(#fltDate#, 'DDMONYY') and flt_type = 'D'
   	</select> 
   	
	<select id="fetchAwbInventory" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO">
		select decode(awbinv.ULD_KEY,null,awbinv.LSP_NO,awbinv.ULD_KEY) as uldLsp,awbinv.awb_no awbNo,to_char(awbinv.awb_date,'DDMONYY') awbDate, 
	       awbinv.ULD_KEY as uldKey,mastType.priority , awbinv.SEQ_NO as seqNo, awbinv.LSP_NO as lsp, decode(mastgp.WH_TYPE,'MHS','MHS',awbinv.LOC_CODE )as locn, 
	       awbinv.LOC_CODE as locnCode, awbinv.locn_pcs as locnPieces,awbinv.locn_wt as locnWt,
	       case when uld.PPK_IND = 'Y' or uld.MIX_PPK_IND='Y'  then 'Y' else 'N' end as pkgInd, jo.LOCN_JO_PC as joLocnPieces,
	       case when jo.status in('Completed','Force Complete') then 
	       case when (jo.LOCN_JO_PC-jo.BU_PCS)&lt; 0 then jo.LOCN_JO_PC else jo.LOCN_JO_PC- (jo.LOCN_JO_PC-jo.BU_PCS) end  else jo.LOCN_JO_PC end as locnPiecesWithJO,
	       case when jo.status in('Completed','Force Complete') then 
	       case when (jo.LOCN_JO_WT-jo.BU_WT)&lt; 0 then jo.LOCN_JO_WT else jo.LOCN_JO_WT- (jo.LOCN_JO_WT-jo.BU_WT) end  else jo.LOCN_JO_WT end as locnWtWithJO,
	       jo.status as status, jo.LOCN_JO_WT as joLocnWt,  case when jo.BU_PCS &gt; jo.LOCN_JO_PC then jo.LOCN_JO_PC else jo.BU_PCS end as buPieces, 
	       case when jo.BU_WT &gt; jo.LOCN_JO_WT  then jo.LOCN_JO_WT else jo.BU_WT end as buWeight, 
	       case when jo.status in('Completed','Force Complete') then (jo.LOCN_JO_PC-BU_PCS) else 0 end as nonBUPieces,
	       case when jo.status in('Completed','Force Complete') then (jo.LOCN_JO_WT-BU_WT) else 0 end as nonBUWeight,
	       case when (uld.PPK_IND = 'Y' or uld.MIX_PPK_IND='Y' or uld.handling_mode='PPK' or uld.handling_mode='NBK' )  and (uld.rebuild_yn = 'N' and uld.topup_yn = 'N') 
	       then 'Y' else 'N' end as joIndicator 
	       from awb_inventory awbinv  
	       join mast_wh_loc mastloc on awbinv.LOC_CODE=mastloc.CODE 
	       join mast_wh_group mastgp on mastloc.WH_GROUP=mastgp.WH_GROUP 
	       join mast_wh_type mastType on mastType.WH_TYPE=mastgp.WH_TYPE and mastType.WH_TYPE not in ('SR') 
	       join awb awb on awb.awb_no=awbinv.awb_no  and  awb.awb_date= awbinv.awb_date 
	       left join uld_inventory uld on uld.ULD_KEY=awbinv.ULD_KEY 
	       left join (SELECT awb_no,  awb_date,  lsp,  uld_key,  status,  SUM(locn_jo_pc) locn_jo_pc,
	                    SUM(locn_jo_wt) locn_jo_wt,  SUM(NVL(BU_PCS,0)) BU_PCS ,  SUM(NVL(BU_WT,0)) BU_WT
	                    FROM exp_bu_jo_locn l
	                    JOIN exp_bu_jo j
	                    ON j.jo_no      = l.jo_no
	                    WHERE j.status IN ('Started', 'Confirmed', 'Retrieval Started','Pending','Completed','Force Complete','Started')
	                    GROUP BY awb_no, awb_date, lsp, uld_key, status
	                   ) jo on  nvl(jo.lsp, '*') = nvl(awbinv.lsp_no, '*') and nvl(jo.uld_key,'*') = nvl(awbinv.uld_key, '*') 
	                    	and jo.awb_no = awbinv.awb_no and jo.awb_date = awbinv.awb_date 
	     where awbinv.awb_no=#awbNo# and awbinv.awb_date=TO_DATE(#awbDate#,'DDMONYY') 
	     and not(awbinv.flt_type = 'E' and awbinv.flt_key is not null) order by mastType.priority 
	</select>

   	<select id="fetchJONonBuPieces" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO">
		 select  jo.status,case when jo.status in('Completed','Force Complete') then  jo.locnJoPcs-NVL(jo.buPcs,0) else 0 end as nonBUPieces,
			 case when jo.status in('Completed','Force Complete') then jo.locnJoWt-NVL(jo.buWt,0) else 0 end as nonBUWeight,
		 	 jo.locnJoPcs joLocnPieces,jo.locnJoWt joLocnWt,jo.locnPieces locnPieces,jo.locnWt locnWt,jo.buWt buWeight,jo.buPcs buPieces
		 	from awb_inventory awbinv  left join (select  awb_no, awb_date,lsp, uld_key, status,  BU_PCS buPcs,LOCN_JO_PC locnJoPcs ,
			BU_WT buWt,LOCN_JO_WT locnJoWt ,locn_pc locnPieces,locn_wt locnWt
		 	from exp_bu_jo_locn l     join exp_bu_jo j on j.jo_no = l.jo_no     where j.status in ('Started', 'Confirmed', 'Retrieval Started','Pending','Completed','Force Complete','Started')    
			) jo       on  nvl(jo.lsp, '*') = nvl(awbinv.lsp_no, '*') and nvl(jo.uld_key,'*') = nvl(awbinv.uld_key, '*')       
		 	and jo.awb_no = awbinv.awb_no and jo.awb_date = awbinv.awb_date  where awbinv.awb_no=#awbNo#
			and awbinv.awb_date=TO_DATE(#awbDate#,'DDMONYY') 
		 	and not(awbinv.flt_type in( 'E') and awbinv.flt_key is not null) and (jo.uld_key=#uldLsp# or jo.lsp=#uldLsp# )
   	</select>
   	
   	<select id="nullUldlspJONonBuPieces" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO">
		select  jo.status,case when jo.status in('Completed','Force Complete') then  jo.locnJoPcs-NVL(jo.buPcs,0) else 0 end as nonBUPieces,
		 case when jo.status in('Completed','Force Complete') then jo.locnJoWt-NVL(jo.buWt,0) else 0 end as nonBUWeight,
		 jo.locnJoPcs joLocnPieces,jo.locnJoWt joLocnWt,jo.locnPieces locnPieces,jo.locnWt locnWt,jo.buWt buWeight,jo.buPcs buPieces
		 from awb_inventory awbinv  left join (select  awb_no, awb_date,lsp, uld_key, status,  BU_PCS buPcs,LOCN_JO_PC locnJoPcs ,
		BU_WT buWt,LOCN_JO_WT locnJoWt ,locn_pc locnPieces,locn_wt locnWt
		 from exp_bu_jo_locn l     join exp_bu_jo j on j.jo_no = l.jo_no     where j.status in ('Started', 'Confirmed', 'Retrieval Started','Pending','Completed','Force Complete','Started')    
		) jo       on  nvl(jo.lsp, '*') = nvl(awbinv.lsp_no, '*') and nvl(jo.uld_key,'*') = nvl(awbinv.uld_key, '*')       
		 and jo.awb_no = awbinv.awb_no and jo.awb_date = awbinv.awb_date  where awbinv.awb_no=#awbNo#
		and awbinv.awb_date=TO_DATE(#awbDate#,'DDMONYY') 
		 and not(awbinv.flt_type in( 'E') and awbinv.flt_key is not null) and (jo.uld_key is null and jo.lsp is null) 
   	</select>
   <select id="fetchJOPieces" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO">
		 select  j.status,BU_WT buWt, case when  j.status in('Completed','Force Complete') then BU_WT else LOCN_JO_WT end as joLocnWt  ,locn_pc locnPieces,locn_wt locnWt
		 from  exp_bu_jo_locn l , exp_bu_jo j 
		 where j.status in ('Started', 'Confirmed', 'Retrieval Started','Pending','Completed','Force Complete','Started')
		 and j.jo_no = l.jo_no and j.gp_no in(select distinct  gp.gp_no from exp_bu_gp gp ,exp_bu_gp_uld_type gpUldType
		 where gp.flt_key=#fltKey# and gp.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and gp.gp_no = gpUldType.gp_no 
		 and (gpUldType.uld_type in 
 			<iterate property="uldType" open="(" close=")" conjunction=",">
	             #uldType[]#  
	    	</iterate>
	       	 or gpUldType.uld_key in 
	       <iterate property="uldType" open="(" close=")" conjunction=",">
	                 #uldType[]#  
	       </iterate>))
  </select>
   	<select id="buildUpGroupSequence" resultClass="java.lang.String">	
   	 select 'G' || lpad(EXP_BU_GP_SEQ.NEXTVAL,4,'0') from dual
   	</select>
   	<select id="buildUpJobOrderSequence" resultClass="java.lang.String">	
   	 select 'J' || lpad(EXP_BU_JO_SEQ.NEXTVAL,4,'0') from dual
   	</select>   	
   	<select id="buildUpJOUldTypeSeq" resultClass="java.lang.String">	
   	 select exp_bu_gp_uld_type_seq.nextval from dual
   	</select>
   	<insert id="buildUpGroupInsert" parameterClass="cargo.cms.export.buildup.bo.BuildUpGroupBO" >
     INSERT INTO exp_bu_gp(GP_NO, FLT_KEY , FLT_DATE , ALLOT_TYPE ,UNLDG_PT , TTL_PC , TTL_WT ,CR_USER_ID , CR_DATE , LM_USER_ID ,    LM_DATE  )
  		VALUES  (    #groupNo# ,    #fltKey# ,    #fltDate# ,    #allotType# ,    #unLdgPoint# ,    #totalPieces# ,    #totalWeight# ,    #crUserId# ,  TO_DATE(#crDate#,'DDMONYYHH24MISS')  ,    #lmUserId# ,   TO_DATE(#lmDate#,'DDMONYYHH24MISS')  )
   	 </insert>
   	 <insert id="buildUpGroupUldTypeInsert" parameterClass="cargo.cms.export.buildup.bo.BuildUpGroupUldTypeBO" >
    	INSERT INTO exp_bu_gp_uld_type(GP_NO, 	DOC_LINE_NO, 	ALLOT_TYPE, 	ULD_TYPE , 	ULD_KEY, 	CNTR_CODE , 	BU_ZONE , CR_USER_ID,CR_DATE, LM_USER_ID , LM_DATE,ADD_ROW_IND,CONTRACTOR )  
    	values(#groupNo#, 	#docLineNo#, 	#allotType#, 	#uldType# , 	#uldKey#, 	#contrCode# , 	#buildUpZone# , 	#crUserId#, 	TO_DATE(#crDate#,'DDMONYYHH24MISS'), 	#lmUserId# , 	TO_DATE(#lmDate#,'DDMONYYHH24MISS'),#addRowInd#,#contractor#)  
   	 </insert>
   	 <insert id="buildUpJobOrderInsert" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" >
    	 INSERT INTO exp_bu_jo(JO_NO , 	GP_NO, 	FLT_KEY, 	FLT_DATE, 	STATUS , 	CR_USER_ID, 	CR_DATE , 	LM_USER_ID,	LM_DATE , TR_TYPE )
  		values(#jobOrderNo# , 	#groupNo#, 	#fltKey#, 	#fltDate#, 	#status# , 	#crUserId#, 	TO_DATE(#crDate#,'DDMONYYHH24MISS') , 	#lmUserId#,	TO_DATE(#lmDate#,'DDMONYYHH24MISS'), 'BLDJO')  
   	 </insert>
   	 <insert id="buildUpJobOrderDtlInsert" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" >
    	 INSERT INTO exp_bu_jo_dtl(JO_NO ,	AWB_NO, 	AWB_DATE ,	AWB_JO_PC, 	AWB_JO_WT , 	BU_INST , 	CR_USER_ID , 	CR_DATE ,	LM_USER_ID ,	LM_DATE, AIRL_RMK, WH_RMK,SHC )
  		values(#jobOrderNo# ,	#awbNo#, 	#awbDate# ,	#awbJOPcs#, 	#awbJOWt# , 	#buildUpInstr# , 	#crUserId# , 	TO_DATE(#crDate#,'DDMONYYHH24MISS') ,	#lmUserId# ,	TO_DATE(#lmDate#,'DDMONYYHH24MISS'), #airlnRmk#,#whRmk#,#shc#)
   	 </insert>
   	  <insert id="buildUpJobOrderLocnInsert" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO" >
    	  INSERT INTO exp_bu_jo_locn (JO_NO , 	SEQ_NO, 	AWB_NO ,	AWB_DATE , 	LSP, 	ULD_KEY , 	LOCN_JO_PC ,	LOCN_JO_WT , 	RET_IND, 	CR_USER_ID , 	CR_DATE ,	LM_USER_ID, 	LM_DATE,  LOC_CODE,LOCN_PC,LOCN_WT)
  		   values(#jobOrderNo# , 	#seqNo#, 	#awbNo# ,	#awbDate# , 	#lsp#, 	#uldKey# , 	#joLocnPieces# ,	#joLocnWt# , 	#retInd#, 	#crUserId# , 	TO_DATE(#crDate#,'DDMONYYHH24MISS') ,	#lmUserId#, 	TO_DATE(#lmDate#,'DDMONYYHH24MISS'),  #locnCode#,#locnPieces#,#locnWt#)
   	 </insert>
  		<select id="fetchBuildUpGroup" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpGroupBO">	
  		select GP_NO as groupNo,ALLOT_TYPE as allotType,UNLDG_PT as unLdgPoint,TTL_PC as totalPieces,TTL_WT as totalWeight from exp_bu_gp where
		FLT_KEY =#fltKey# and flt_date=#fltDate# and UNLDG_PT=#unLdgPoint# 
  		</select> 
  		 <select id="fetchBuildUpGroupUldType" parameterClass="cargo.cms.export.buildup.bo.BuildUpGroupBO" resultClass="cargo.cms.export.buildup.bo.BuildUpGroupUldTypeBO">	
  		 select gpuld.GP_NO as groupNo,gpuld.DOC_LINE_NO as docLineNo,gpuld.ALLOT_TYPE as allotType,gpuld.ULD_TYPE as uldType,gpuld.ADD_ROW_IND as addRowInd,gpuld.ULD_KEY as uldKey,decode(gpuld.ULD_KEY,null,gpuld.ULD_TYPE,gpuld.ULD_KEY) as uld,gpuld.CNTR_CODE as contrCode,gpuld.BU_ZONE as buildUpZone,gpuld.CONTRACTOR as contractor from exp_bu_gp_uld_type gpuld where
 		gpuld.GP_NO = #groupNo#    
  		</select> 
  		<select id="fetchBuildUpJobOrder" parameterClass="cargo.cms.export.buildup.bo.BuildUpGroupBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">	
  		  select jo_no as jobOrderNo,GP_NO as groupNo,STATUS as status,FLT_KEY as fltKey ,to_char(FLT_DATE,'DDMONYY') as fltDate,CONFIRMED_YN as isJOConfirmed from exp_bu_jo where  GP_NO = #groupNo#    
  		</select> 
  		<select id="fetchBuildUpJobOrderDtl" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">	
  		   select jodtl.jo_no as jobOrderNo,jodtl.AWB_NO as awbNo,CONCAT(CONCAT(SUBSTR(jodtl.awb_No,0,3),'-'),SUBSTR(jodtl.awb_No,4)) as awbNoDisplay,to_char(jodtl.AWB_DATE,'DDMONYY') as awbDate, jodtl.AWB_JO_PC as awbJOPcs,jodtl.AWB_JO_WT as awbJOWt,
			pmanawb.PMAN_PCS as pmanPcs,pmanawb.PMAN_WT as pmanWt, decode((pmanawb.PMAN_PCS-jodtl.AWB_JO_PC)-abs(pmanawb.PMAN_PCS-jodtl.AWB_JO_PC),0,'N','Y' ) as pmanInsufficient,
			RTRIM(LTRIM
  ( awb.spl_code1 ||
      NVL2( awb.spl_code2, ',' || awb.spl_code2  , null ) ||
      NVL2( awb.spl_code3, ',' || awb.spl_code3 , null ) || 
       NVL2( awb.spl_code4, ',' || awb.spl_code4 , null )|| 
        NVL2( awb.spl_code5, ',' || awb.spl_code5 , null )|| 
         NVL2( awb.spl_code6, ',' || awb.spl_code6 , null )|| 
          NVL2( awb.spl_code7, ',' || awb.spl_code7 , null )||
           NVL2( awb.spl_code8, ',' || awb.spl_code8 , null )||
            NVL2( awb.spl_code9, ',' || awb.spl_code9 , null )
      ,
    ','
  )) as shc
			 from awb awb,exp_bu_jo_dtl jodtl  LEFT OUTER JOIN exp_pmanifest_awb pmanawb ON pmanawb.awb_no=jodtl.awb_no and  to_char(pmanawb.awb_date,'DDMONYY')= to_char(jodtl.awb_date,'DDMONYY') 
       and  pmanawb.flt_key=#fltKey#  and pmanawb.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and pmanawb.UNLDG_PT =#unLdgPoint# and pmanawb.flt_type='E'
			where jodtl.jo_no=#jobOrderNo# and  jodtl.awb_no=awb.awb_no and  to_char(jodtl.awb_date,'DDMONYY')= to_char(awb.awb_date,'DDMONYY') 
			
  		</select>
   	  	<select id="fetchBuildUpJobOrderLocation" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO">	
  		    SELECT bulocn.JO_NO                                    AS jobOrderNo  ,
			  bulocn.SEQ_NO                                         AS seqNo       ,
			  DECODE(bulocn.ULD_KEY,NULL,bulocn.LSP,bulocn.ULD_KEY) AS uldLsp      ,
			  bulocn.LOCN_JO_PC                                     AS joLocnPieces,
			  bulocn.locn_jo_wt                                     AS joLocnWt    ,
			  DECODE(mastgp.WH_TYPE,'MHS','MHS',decode(bulocn.uld_key, null, 
  				decode(bulocn.lsp, null, bulocn.loc_code, 
  				(select nvl(loc_code,bulocn.loc_code)  from lsp_inventory where lsp_no = bulocn.lsp)) ,
  				(select nvl(loc_code,bulocn.loc_code) from uld_inventory where uld_key = bulocn.uld_key)))   AS locn
			FROM exp_bu_jo_locn bulocn,			  
			  		mast_wh_loc mastloc        ,
			  		mast_wh_group mastgp
			WHERE 
				bulocn.loc_code = mastloc.code
				AND mastloc.WH_GROUP                  =mastgp.WH_GROUP
				AND bulocn.JO_NO                      =#jobOrderNo#
				AND bulocn.awb_no                     =#awbNo#
			GROUP BY bulocn.JO_NO,
				bulocn.SEQ_NO      ,
			  	bulocn.ULD_KEY     ,
			  	bulocn.LOCN_JO_PC  ,
			  	bulocn.locn_jo_wt  ,
			  	mastgp.WH_TYPE     ,
			  	bulocn.LSP         ,
			  	bulocn.LOC_CODE
  		</select>
  		<select id="dlsFinalizeValidate" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="java.lang.String">
	   select nvl(t2.dls_ind, 'N') from   flt_opr t1, flt_opr_events t2
       where  t1.tr_no = t2.tr_no and    t1.flt_key = #fltKey#
       and    t1.sch_date = TO_DATE(#fltDate#, 'DDMONYY')  and    t1.flt_type = 'D'
	  </select>
		<select id="fetchJOPending" parameterClass="cargo.cms.export.buildup.bo.BuildUpGroupBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
		select bujo.jo_no as jobOrderNo,bujo.GP_NO as groupNo from exp_bu_gp bugp,exp_bu_jo bujo where bujo.gp_no=bugp.gp_no and bugp.GP_NO=#groupNo# and bujo.status='Pending' 
		</select>
		<select id="checkIfAwbExists" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
		select awb_no as awbNo, jo_no as jobOrderNo,AWB_JO_PC as awbJOPcs,AWB_JO_WT as awbJOWt from exp_bu_jo_dtl where jo_no=#jobOrderNo# and awb_no=#awbNo# 
		</select>
		<select id="checkIfLocationExists" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO">
		select seq_no as seqNo,LOCN_JO_PC as joLocnPieces,LOCN_JO_WT as joLocnWt from exp_bu_jo_locn where jo_no=#jobOrderNo# and awb_no=#awbNo# and SEQ_NO=#seqNo#
		</select>
		
	<update id="updateBuildUpJOStatus" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">		
		update exp_bu_jo set TR_TYPE = 'BLDJO', status=#status#,CONFIRMED_YN='Y' where jo_no=#jobOrderNo#
	 </update>
	 <update id="updateBuildUpJORmk" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">		
		update exp_bu_jo set TR_TYPE = 'BLDJO', rmk=#joRmk# where jo_no=#jobOrderNo#
	 </update>	
	 <update id="updateJODetailBUIns" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">		
		update exp_bu_jo_dtl set bu_inst=#buildUpInstr# where jo_no=#jobOrderNo# and awb_no=#awbNo#
	 </update>
		
	<update id="updateBuildUpGroup" parameterClass="cargo.cms.export.buildup.bo.BuildUpGroupBO">		
		update exp_bu_gp set ttl_pc=#totalPieces#, ttl_wt=#totalWeight#,LM_USER_ID=#lmUserId#, 	LM_DATE=TO_DATE(#lmDate#,'DDMONYYHH24MISS') where GP_NO=#groupNo#
	 </update>
	 <update id="updateBuildUpGrpUldType" parameterClass="cargo.cms.export.buildup.bo.BuildUpGroupUldTypeBO">		
		update exp_bu_gp_uld_type set ULD_TYPE=#uldType# , 	ULD_KEY=#uldKey#, 	CNTR_CODE=#contrCode# , 	BU_ZONE=#buildUpZone#,CONTRACTOR=#contractor#,LM_USER_ID=#lmUserId#, 	LM_DATE=TO_DATE(#lmDate#,'DDMONYYHH24MISS') where DOC_LINE_NO=#docLineNo#
	 </update>
	 <update id="updateBuildUpLocation" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO">
		update exp_bu_jo_locn set LOCN_JO_PC=#joLocnPieces#, LOCN_JO_WT=#joLocnWt#,LM_USER_ID=#lmUserId#, 	LM_DATE=TO_DATE(#lmDate#,'DDMONYYHH24MISS') where SEQ_NO=#seqNo#
	 </update>
	 <update id="updateBuildUpJODetail" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
		update exp_bu_jo_dtl set AWB_JO_PC=#awbJOPcs#, AWB_JO_WT=#awbJOWt#,LM_USER_ID=#lmUserId#, 	LM_DATE=TO_DATE(#lmDate#,'DDMONYYHH24MISS') where JO_NO=#jobOrderNo# and awb_no=#awbNo#
	 </update>
	 <update id="acknowledgeAllotment" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
		 update edi_elp_msg set acknowledge_ind='Y',ACKNOWLEDGE_DATE=TO_DATE(#lmDate#,'DDMONYYHH24MISS'),ACKNOWLEDGE_USER=#lmUserId# where tr_no=#allotTrNo#
	 </update>
	<delete id="deleteJobOrder" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
		delete from exp_bu_jo where jo_no=#jobOrderNo#
	</delete>
	<delete id="deleteJobOrderDetails" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
		delete from exp_bu_jo_dtl where jo_no=#jobOrderNo# and awb_no=#awbNo#
	</delete>
	<delete id="deleteJobOrderLocation" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderLocationBO">
		delete from exp_bu_jo_locn where jo_no=#jobOrderNo# and seq_no=#seqNo#
	</delete>
	<select id="fetchUldAllot" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpGroupUldTypeBO">
		select decode((a.qtyQ7 - b.qtyQ7) - abs(a.qtyQ7 - b.qtyQ7), 0, (a.qtyQ7 - b.qtyQ7), 0) as qtyQ7,
		decode((a.qtyQ6 - b.qtyQ6) - abs(a.qtyQ6 - b.qtyQ6), 0, (a.qtyQ6 - b.qtyQ6), 0) as qtyQ6,
		decode((a.qtyX8 - b.qtyX8) - abs(a.qtyX8 - b.qtyX8), 0, (a.qtyX8 - b.qtyX8), 0) as qtyX8,
		decode((a.qtyPEB - b.qtyPEB) - abs(a.qtyPEB - b.qtyPEB), 0, (a.qtyPEB - b.qtyPEB), 0) as qtyPEB,
		decode((a.qtyH2 - b.qtyH2) - abs(a.qtyH2 - b.qtyH2), 0, (a.qtyH2 - b.qtyH2), 0) as qtyH2,
		decode((a.qtyA2 - b.qtyA2) - abs(a.qtyA2 - b.qtyA2), 0, (a.qtyA2 - b.qtyA2), 0) as qtyA2,
		decode((a.qtyLDC - b.qtyLDC) - abs(a.qtyLDC - b.qtyLDC), 0, (a.qtyLDC - b.qtyLDC), 0) as qtyLDC,
		
		decode((a.qtyZA - b.qtyZA) - abs(a.qtyZA - b.qtyZA), 0, (a.qtyZA - b.qtyZA),0) as qtyZA,
		decode((a.qtyZB - b.qtyZB) - abs(a.qtyZB - b.qtyZB), 0, (a.qtyZB - b.qtyZB),0) as qtyZB,
		decode((a.qtyZC - b.qtyZC) - abs(a.qtyZC - b.qtyZC), 0, (a.qtyZC - b.qtyZC),0) as qtyZC,
		decode((a.qtyPGA - b.qtyPGA) - abs(a.qtyPGA - b.qtyPGA), 0, (a.qtyPGA - b.qtyPGA),0) as qtyPGA,
		decode((a.qtyH3 - b.qtyH3) - abs(a.qtyH3 - b.qtyH3), 0, (a.qtyH3 - b.qtyH3),0) as qtyH3,
		decode((a.qtyBULK - b.qtyBULK) - abs(a.qtyBULK - b.qtyBULK), 0, (a.qtyBULK - b.qtyBULK),0) as qtyBULK,
		decode((a.qtyALF - b.qtyALF) - abs(a.qtyALF - b.qtyALF), 0, (a.qtyALF - b.qtyALF),0) as qtyALF,
		decode((a.qtyPLA - b.qtyPLA) - abs(a.qtyPLA - b.qtyPLA), 0, (a.qtyPLA - b.qtyPLA),0) as qtyPLA,
		decode((a.qtyQ7D - b.qtyQ7D) - abs(a.qtyQ7D - b.qtyQ7D), 0, (a.qtyQ7D - b.qtyQ7D),0) as qtyQ7D,
		decode((a.qtyW2 - b.qtyW2) - abs(a.qtyW2 - b.qtyW2), 0, (a.qtyW2 - b.qtyW2),0) as qtyW2,
		decode((a.qtyPAG - b.qtyPAG) - abs(a.qtyPAG - b.qtyPAG), 0, (a.qtyPAG - b.qtyPAG),0) as qtyPAG,
		
		decode((a.qtyH5 - b.qtyH5) - abs(a.qtyH5 - b.qtyH5), 0, (a.qtyH5 - b.qtyH5), 0) as qtyH5
		from
		(select NVL(d.qtyQ7,0) as qtyQ7, NVL(d.qtyQ6,0) as qtyQ6,NVL(d.qtyX8,0) as qtyX8, NVL(d.qtyPEB,0) as qtyPEB, NVL(d.qtyH2,0)  as qtyH2, NVL(d.qtyA2,0) as qtyA2, 
		NVL(d.qtyLDC,0)  as qtyLDC,NVL(d.countH5,0) as qtyH5,
		NVL(d.qtyZA,0) as qtyZA,NVL(d.qtyZB,0) as qtyZB,NVL(d.qtyZC,0) as qtyZC,NVL(d.qtyPGA,0) as qtyPGA,NVL(d.qtyH3,0) as qtyH3,NVL(d.qtyBULK,0) as qtyBULK,
		NVL(d.qtyALF,0) as qtyALF,NVL(d.qtyPLA,0) as qtyPLA,NVL(d.qtyQ7D,0) as qtyQ7D,NVL(d.qtyW2,0) as qtyW2,NVL(d.qtyPAG,0) as qtyPAG
				from (select a.countH5,(a.totalQ6-b.totalQ6) as qtyQ6,(a.totalQ7-b.totalQ7) as qtyQ7,(a.totalX8-b.totalX8) as qtyX8,
			    (a.totalPEB-b.totalPEB) as qtyPEB,(a.totalA2-b.totalA2) as qtyA2,(a.totalLDC-b.totalLDC) as qtyLDC,(a.totalH2-b.totalH2) as qtyH2,             
			    
			    (a.totalZA-b.totalZA) as qtyZA,(a.totalZB-b.totalZB) as qtyZB,(a.totalZC-b.totalZC) as qtyZC,(a.totalPGA-b.totalPGA) as qtyPGA,   
			    (a.totalH3-b.totalH3) as qtyH3,(a.totalBULK-b.totalBULK) as qtyBULK,(a.totalALF-b.totalALF) as qtyALF,(a.totalPLA-b.totalPLA) as qtyPLA,  
			    (a.totalQ7D-b.totalQ7D) as qtyQ7D,(a.totalW2-b.totalW2) as qtyW2,(a.totalPAG-b.totalPAG) as qtyPAG, 
			    
			    a.tr_no as tr_no,a.portDocLineNo  from (select count(QTY_H5 )as countH5, sum(qty_Q6 ) as totalQ6,sum(qty_Q7 ) as totalQ7,
			     sum(QTY_X8 ) as totalX8,sum(QTY_PEB ) as totalPEB,sum(QTY_A2 ) as totalA2, sum(QTY_LDC ) as totalLDC,
			      sum(QTY_H2 ) as totalH2, 
			      sum(QTY_ZA ) as totalZA,sum(QTY_ZB ) as totalZB,sum(QTY_ZC ) as totalZC, sum(QTY_PGA ) as totalPGA,sum(QTY_H3 ) as totalH3,sum(QTY_BULK) as totalBULK,
			      sum(QTY_ALF) as totalALF,sum(QTY_PLA) as totalPLA,sum(QTY_Q7D) as totalQ7D, sum(QTY_W2) as totalW2,sum(QTY_PAG) as totalPAG,
			      
			      tr_no,PORT_DOC_LINE_NO as portDocLineNo from edi_elp_allot where CGO_TYPE in('Transit','Export Local B/U')   group by tr_no,PORT_DOC_LINE_NO) a, 
			    (select NVL(sum(qty_Q6 ),0) as totalQ6,NVL(sum(qty_Q7 ),0) as totalQ7,
			    NVL(sum(QTY_X8 ),0) as totalX8,NVL(sum(QTY_PEB ),0) as totalPEB,NVL(sum(QTY_A2 ),0) as totalA2,NVL( sum(QTY_LDC ),0) as totalLDC,
			      NVL(sum(QTY_H2 ),0) as totalH2, 
			      
			      NVL(sum(QTY_ZA ),0) as totalZA,NVL(sum(QTY_ZB ),0) as totalZB,NVL(sum(QTY_ZC ),0) as totalZC, NVL(sum(QTY_PGA ),0) as totalPGA,NVL(sum(QTY_H3 ),0) as totalH3,NVL(sum(QTY_BULK),0) as totalBULK,
			      NVL(sum(QTY_ALF),0) as totalALF,NVL(sum(QTY_PLA),0) as totalPLA,NVL(sum(QTY_Q7D),0) as totalQ7D, NVL(sum(QTY_W2),0) as totalW2,NVL(sum(QTY_PAG),0) as totalPAG,
			      
			      tr_no,PORT_DOC_LINE_NO as portDocLineNo from edi_elp_allot where CGO_TYPE in('Transit PPK')  group by tr_no,PORT_DOC_LINE_NO) b
			    where a.tr_no=b.tr_no and a.portDocLineNo=b.portDocLineNo )d,edi_elp_msg elpmsg,edi_elp_port elpport  where d.tr_no =elpmsg.tr_no and d.portDocLineNo=elpport.DOC_LINE_NO
			    and elpmsg.tr_no=elpport.tr_no  and elpport.port=#unLdgPoint# and elpmsg.tr_no in (
                SELECT a.trNO FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and elpmsg.TRF_IND='Y'  order by to_number(elpmsg.tr_no)  desc)a
                WHERE rownum =1) )a,    
		   ( select Q7.countAllot as qtyQ7,Q6.countAllot as qtyQ6,X8.countAllot as qtyX8,PEB.countAllot as qtyPEB,H2.countAllot as qtyH2,A2.countAllot as qtyA2,LDC.countAllot as qtyLDC,
		   ZA.countAllot as qtyZA,ZB.countAllot as qtyZB,ZC.countAllot as qtyZC,PGA.countAllot as qtyPGA,H3.countAllot as qtyH3,BULK.countAllot as qtyBULK,ALF.countAllot as qtyALF,
		    PLA.countAllot as qtyPLA,Q7D.countAllot as qtyQ7D,W2.countAllot as qtyW2,PAG.countAllot as qtyPAG,
		   H5.countAllot as qtyH5
	  from (select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1Q7' and gpuld.ADD_ROW_IND='N' ) Q7, 
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1Q6' and gpuld.ADD_ROW_IND='N') Q6,
	  (select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1X8' and gpuld.ADD_ROW_IND='N' ) X8,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1PEB' and gpuld.ADD_ROW_IND='N' ) PEB,
	(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1H2' and gpuld.ADD_ROW_IND='N' ) H2,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1A2' and gpuld.ADD_ROW_IND='N' ) A2,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1LDC' and gpuld.ADD_ROW_IND='N' ) LDC,
		
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1ZA' and gpuld.ADD_ROW_IND='N' ) ZA,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1ZB' and gpuld.ADD_ROW_IND='N' ) ZB,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1ZC' and gpuld.ADD_ROW_IND='N' ) ZC,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1PGA' and gpuld.ADD_ROW_IND='N' ) PGA,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1H3' and gpuld.ADD_ROW_IND='N' ) H3,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1BULK' and gpuld.ADD_ROW_IND='N' ) BULK,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1ALF' and gpuld.ADD_ROW_IND='N' ) ALF,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1PLA' and gpuld.ADD_ROW_IND='N' ) PLA,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1Q7D' and gpuld.ADD_ROW_IND='N' ) Q7D,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1W2' and gpuld.ADD_ROW_IND='N' ) W2,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1PAG' and gpuld.ADD_ROW_IND='N' ) PAG,
		
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1H5' and gpuld.ADD_ROW_IND='N') H5)b
	</select>
	<select id="fetchJobOrder" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
	select bujo.JO_NO as jobOrderNo,bugp.TTL_PC as totalPieces,bugp.TTL_WT as totalWeight,
bujo.rmk as joRmk	from exp_bu_gp bugp,exp_bu_jo bujo	
where bujo.gp_no=bugp.gp_no and bujo.jo_no=#jobOrderNo#
	</select>
	<select id="fetchJobOrderDetail" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
	select bujodtl.awb_no as awbNo,CONCAT(CONCAT(SUBSTR(bujodtl.awb_No,0,3),'-'),SUBSTR(bujodtl.awb_No,4)) as awbNoDisplay,bujodtl.JO_NO as jobOrderNo, decode(awb.spl_code1, null, '', awb.spl_code1 )
               || decode(awb.spl_code2, null, '',','||  awb.spl_code2 )
               || decode(awb.spl_code3, null, '', ','|| awb.spl_code3 )
               || decode(awb.spl_code4, null, '', ','|| awb.spl_code4 )
               || decode(awb.spl_code5, null, '', ','|| awb.spl_code5 )
               || decode(awb.spl_code6, null, '', ','|| awb.spl_code6 )
               || decode(awb.spl_code7, null, '', ','|| awb.spl_code7 )
               || decode(awb.spl_code8, null, '', ','|| awb.spl_code8 )
               || decode(awb.spl_code9, null, '', ','|| awb.spl_code9)as shc,
               bujodtl.BU_INST as buildUpInstr,
               bujodtl.AIRL_RMK as airlnRmk,bujodtl.WH_RMK as whRmk             
               from exp_bu_jo_dtl bujodtl, awb awb
               where  bujodtl.jo_no=#jobOrderNo# and  bujodtl.awb_no=awb.awb_no and  to_char(bujodtl.awb_date,'DDMONYY')= to_char(awb.awb_date,'DDMONYY')
	</select>
	<select id="fetchMaxWtForUldType" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="java.lang.String">
		select sum(MAX_WEIGHT) as maxWeight from uld_group_carr where uld_type||carr_code in		
	            <iterate property="uldForMaxWt" open="(" close=")" conjunction=",">
	                 #uldForMaxWt[]#  
	            </iterate>	  
	</select>
	<select id="validateUldTypeForCarr" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select count(1) from uld_group_carr where uld_type =#uldType# and carr_code=#carrCode#
	</select>
	<select id="checkAwbAssigned" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="java.lang.String">
		select count(1) from exp_bu_jo_dtl bujodtl, exp_bu_jo jo,exp_bu_gp gp where
		gp.flt_key=#fltKey# and gp.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and gp.unldg_pt=#unLdgPoint#
		and gp.gp_no= jo.gp_no and jo.jo_no= bujodtl.jo_no and bujodtl.awb_no=#awbNo# 
	</select>
	<select id="isBuildUpComplete" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="java.lang.String">
       select COUNT(1) from flt_opr_events  where flt_type='D' and flt_key=#fltKey#
       and sch_date=to_date(#fltDate#,'ddmonyy') and BUILDUP_CDATE is not null		 
     </select>
     <select id="fetchFlightAllotQty" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="java.lang.String" >	
	select RULE_VALUE as flightAllotQty from cmsrules where RULE_CODE='FLIGHT_ALLOT_QTY' 	
	</select>
     <select id="qtAllotment" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
      select ALLOT_TYPE as allotType,to_char(sum(QTY),'0.99') as qty,to_char(TIME_FROM,'DDMONYY HH24:MI') as timeFrom,to_char(TIME_TO,'DDMONYY HH24:MI') as timeTo,
		WORKSTATION as workstation from qt_allot where FLT_KEY=#fltKey# and FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') and UNLDG_PT=#unLdgPoint#
		group by ALLOT_TYPE,to_char(TIME_FROM,'DDMONYY HH24:MI'),to_char(TIME_TO,'DDMONYY HH24:MI'),WORKSTATION	 
     </select>
      <select id="joQtBuTime" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
      select qtBUTimeFrom || '/' || qtBUTimeTo qtBuildUpTime from
		exp_bu_jo jo JOIN
		(select to_char(min(TIME_FROM),'DDMONYY HH24:MI') qtBUTimeFrom , 
      		to_char(max(TIME_TO),'DDMONYY HH24:MI')  qtBUTimeTo,      		    		
      		atAllt.flt_key, atAllt.flt_date, D.JO_NO 
			            from QT_Allot atAllt
			            JOIN V_DDT_DTL ddt ON atAllt.flt_key = ddt.shp_cntg_FLT_KEY and atAllt.FLT_DATE = ddt.shp_cntg_FLT_DATE and shp_trf_type = 'QT'
			            JOIN EXP_BU_JO_DTL D ON ddt.AWB_NO = D.AWB_NO AND  ddt.AWB_date = D.AWB_date 
                  	where atAllt.flt_type = 'D' group by  atAllt.flt_key, atAllt.flt_date, D.JO_NO   )  qtBUTime
      on qtBUTime.flt_key = jo.FLT_KEY and qtBUTime.FLT_DATE = jo.FLT_DATE  and   JO.JO_NO = qtBUTime.JO_NO and jo.jo_no=#jobOrderNo#      
  	</select>
      <select id="fetchQTAllot" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
       select case when instr(sum(QTY),'.')='0' then  
   		to_char(sum(QTY),'9999999') ||ALLOT_TYPE
    	ELSE to_char(sum(QTY),'0.99') ||ALLOT_TYPE end as qtAllot
    	from qt_allot where FLT_KEY=#fltKey# and FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')     	
	       and UNLDG_PT=#unLdgPoint#			
		group by ALLOT_TYPE 
     </select>
     <select id="fetchQTAllotForFlight" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
       select case when instr(sum(QTY),'.')='0' then  
   		to_char(sum(QTY),'9999999') ||ALLOT_TYPE
    	ELSE to_char(sum(QTY),'0.99') ||ALLOT_TYPE end as qtAllot
    	from qt_allot where FLT_KEY=#fltKey# and FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')     	  	
		group by ALLOT_TYPE 
     </select>
     <select id="fetchFltAndQtAllotForFlight" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
     select (select (decode(d.qtyQ7 , null, '',0,'',  d.qtyQ7 ||'Q7' )
               || decode(d.qtyQ6, null, '',0,'',','||  d.qtyQ6 ||'Q6')
               || decode(d.qtyX8, null, '',0,'', ','|| d.qtyX8 ||'X8')
               || decode( d.qtyPEB, null, '',0,'', ','|| d.qtyPEB ||'PEB')
               || decode(d.qtyH2, null, '',0,'', ','||d.qtyH2 ||'H2')
               || decode(d.qtyA2, null, '',0,'', ','|| d.qtyA2 ||'A2')
               || decode(d.qtyLDC, null, '',0,'', ','|| d.qtyLDC ||'LDC')
               || decode(d.QTY_ZA , null, '',0,'', ','|| d.QTY_ZA  ||'ZA' )
               ||  decode(d.QTY_ZB, null, '',0,'', ','||d.QTY_ZB  ||'ZB' )
               ||  decode(d.QTY_ZC , null, '',0,'', ','||d.QTY_ZC  ||'ZC' )
               ||  decode(d.QTY_PGA , null, '',0,'', ','||d.QTY_PGA  ||'PGA' )
               ||  decode(d.QTY_H3 , null, '',0,'', ','||d.QTY_H3  ||'H3' )
               ||  decode(d.QTY_BULK , null, '',0,'', ','||d.QTY_BULK ||'BULK' )
               ||  decode(d.QTY_ALF , null, '',0,'', ','||d.QTY_ALF  ||'ALF' )
               ||  decode(d.QTY_PLA , null, '',0,'', ','||d.QTY_PLA ||'PLA' )
               ||  decode(d.QTY_Q7D , null, '',0,'', ','||d.QTY_Q7D ||'Q7D' )
               ||  decode(d.QTY_W2 , null, '',0,'', ','||d.QTY_W2 ||'W2' )
               ||  decode(d.QTY_PAG , null, '',0,'', ','||d.QTY_PAG ||'PAG' )
               ||  decode(d.countH5 , 0, '', ','||'H5' ))  from
              (select a.countH5,(a.totalQ6-b.totalQ6) as qtyQ6,(a.totalQ7-b.totalQ7) as qtyQ7,(a.totalX8-b.totalX8) as qtyX8,
              (a.totalPEB-b.totalPEB) as qtyPEB,(a.totalA2-b.totalA2) as qtyA2,(a.totalLDC-b.totalLDC) as qtyLDC,(a.totalH2-b.totalH2) as qtyH2,             
              (a.totalZA- b.totalZA) as QTY_ZA, (a.totalZB- b.totalZB) as QTY_ZB, (a.totalZC- b.totalZC) as QTY_ZC, (a.totalPGA- b.totalPGA) as QTY_PGA,
               (a.totalH3- b.totalH3) as QTY_H3,(a.totalBULK- b.totalBULK) as QTY_BULK,(a.totalALF- b.totalALF) as QTY_ALF,(a.totalPLA- b.totalPLA) as QTY_PLA, 
               (a.totalQ7D- b.totalQ7D) as QTY_Q7D,(a.totalW2- b.totalW2) as QTY_W2,(a.totalPAG- b.totalPAG) as QTY_PAG,         
              a.tr_no as tr_no 
              from (select count(QTY_H5 )as countH5, sum(qty_Q6 ) as totalQ6,sum(qty_Q7 ) as totalQ7,
               sum(QTY_X8 ) as totalX8,sum(QTY_PEB ) as totalPEB,sum(QTY_A2 ) as totalA2, sum(QTY_LDC ) as totalLDC,
                sum(QTY_H2 ) as totalH2,
                 sum(QTY_ZA ) as totalZA,sum(QTY_ZB ) as totalZB,sum(QTY_ZC ) as totalZC,sum(QTY_PGA ) as totalPGA,
                sum(QTY_H3 ) as totalH3,sum(QTY_BULK ) as totalBULK,sum(QTY_ALF ) as totalALF,sum(QTY_PLA ) as totalPLA,sum(QTY_Q7D ) as totalQ7D,
                sum(QTY_W2 ) as totalW2,sum(QTY_PAG ) as totalPAG,
              tr_no from edi_elp_allot where CGO_TYPE in('Transit')   group by tr_no) a, 
              (select NVL(sum(qty_Q6 ),0) as totalQ6,NVL(sum(qty_Q7 ),0) as totalQ7,
              NVL(sum(QTY_X8 ),0) as totalX8,NVL(sum(QTY_PEB ),0) as totalPEB,NVL(sum(QTY_A2 ),0) as totalA2,NVL( sum(QTY_LDC ),0) as totalLDC,
                NVL(sum(QTY_H2 ),0) as totalH2,
                NVL(sum(QTY_ZA ),0) as totalZA,NVL(sum(QTY_ZB ),0) as totalZB,NVL(sum(QTY_ZC ),0) as totalZC,NVL(sum(QTY_PGA ),0) as totalPGA,
                NVL(sum(QTY_H3 ),0) as totalH3,NVL(sum(QTY_BULK),0) as totalBULK,NVL(sum(QTY_ALF ),0) as totalALF,NVL(sum(QTY_PLA ),0) as totalPLA,NVL(sum(QTY_Q7D ),0) as totalQ7D,
                NVL(sum(QTY_W2 ),0) as totalW2,NVL(sum(QTY_PAG ),0) as totalPAG,
              tr_no from edi_elp_allot where CGO_TYPE in('Transit PPK')  group by tr_no) b
              where a.tr_no=b.tr_no )d where d.tr_no =msg.tr_no) as transitBU, 
                (select (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               ||  decode( sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               ||  decode( sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               ||  decode( sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               ||  decode( sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               ||  decode( sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               ||  decode( sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               ||  decode( sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               ||  decode( sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               ||  decode( sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               ||  decode( sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Export Local B/U') ) as expLocalBU,
                (select STRAGG(STRINGDELIM(sum(QTY) ||ALLOT_TYPE ,' , ')) as qtAllot from qt_allot where FLT_KEY=#fltKey# and FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') 
                 group by ALLOT_TYPE)as qtAllot
                from edi_elp_msg msg where  msg.flt_key=#fltKey#   and msg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and msg.tr_no in(
                SELECT a.trNO FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and elpmsg.TRF_IND='Y'  order by to_number(elpmsg.tr_no)  desc)a
                WHERE rownum =1) 
     </select> 
          <select id="fetchFltAndQtAllotForPort" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
    	select  (select (decode(d.qtyQ7 , null, '',0,'',  d.qtyQ7 ||'Q7' )
               || decode(d.qtyQ6, null, '',0,'',','||  d.qtyQ6 ||'Q6')
               || decode(d.qtyX8, null, '',0,'', ','|| d.qtyX8 ||'X8')
               || decode( d.qtyPEB, null, '',0,'', ','|| d.qtyPEB ||'PEB')
               || decode(d.qtyH2, null, '',0,'', ','||d.qtyH2 ||'H2')
               || decode(d.qtyA2, null, '',0,'', ','|| d.qtyA2 ||'A2')
               || decode(d.qtyLDC, null, '',0,'', ','|| d.qtyLDC ||'LDC')
               || decode(d.QTY_ZA , null, '',0,'', ','|| d.QTY_ZA  ||'ZA' )
               ||  decode(d.QTY_ZB, null, '',0,'', ','||d.QTY_ZB  ||'ZB' )
               ||  decode(d.QTY_ZC , null, '',0,'', ','||d.QTY_ZC  ||'ZC' )
               ||  decode(d.QTY_PGA , null, '',0,'', ','||d.QTY_PGA  ||'PGA' )
               ||  decode(d.QTY_H3 , null, '',0,'', ','||d.QTY_H3  ||'H3' )
               ||  decode(d.QTY_BULK , null, '',0,'', ','||d.QTY_BULK ||'BULK' )
               ||  decode(d.QTY_ALF , null, '',0,'', ','||d.QTY_ALF  ||'ALF' )
               ||  decode(d.QTY_PLA , null, '',0,'', ','||d.QTY_PLA ||'PLA' )
               ||  decode(d.QTY_Q7D , null, '',0,'', ','||d.QTY_Q7D ||'Q7D' )
               ||  decode(d.QTY_W2 , null, '',0,'', ','||d.QTY_W2 ||'W2' )
               ||  decode(d.QTY_PAG , null, '',0,'', ','||d.QTY_PAG ||'PAG' )
               ||  decode(d.countH5 , 0, '', ','||'H5' ))  from
              (select a.countH5,(a.totalQ6-b.totalQ6) as qtyQ6,(a.totalQ7-b.totalQ7) as qtyQ7,(a.totalX8-b.totalX8) as qtyX8,
              (a.totalPEB-b.totalPEB) as qtyPEB,(a.totalA2-b.totalA2) as qtyA2,(a.totalLDC-b.totalLDC) as qtyLDC,(a.totalH2-b.totalH2) as qtyH2,             
              (a.totalZA- b.totalZA) as QTY_ZA, (a.totalZB- b.totalZB) as QTY_ZB, (a.totalZC- b.totalZC) as QTY_ZC, (a.totalPGA- b.totalPGA) as QTY_PGA,
               (a.totalH3- b.totalH3) as QTY_H3,(a.totalBULK- b.totalBULK) as QTY_BULK,(a.totalALF- b.totalALF) as QTY_ALF,(a.totalPLA- b.totalPLA) as QTY_PLA, 
               (a.totalQ7D- b.totalQ7D) as QTY_Q7D,(a.totalW2- b.totalW2) as QTY_W2,(a.totalPAG- b.totalPAG) as QTY_PAG,         
              b.tr_no as tr_no,  b.port_doc_line_no as port_doc_line_no
              from (select count(QTY_H5 )as countH5, sum(qty_Q6 ) as totalQ6,sum(qty_Q7 ) as totalQ7,
               sum(QTY_X8 ) as totalX8,sum(QTY_PEB ) as totalPEB,sum(QTY_A2 ) as totalA2, sum(QTY_LDC ) as totalLDC,
                sum(QTY_H2 ) as totalH2,
                sum(QTY_ZA ) as totalZA,sum(QTY_ZB ) as totalZB,sum(QTY_ZC ) as totalZC,sum(QTY_PGA ) as totalPGA,
                sum(QTY_H3 ) as totalH3,sum(QTY_BULK ) as totalBULK,sum(QTY_ALF ) as totalALF,sum(QTY_PLA ) as totalPLA,sum(QTY_Q7D ) as totalQ7D,
                sum(QTY_W2 ) as totalW2,sum(QTY_PAG ) as totalPAG,
              tr_no,port_doc_line_no from edi_elp_allot where CGO_TYPE in('Transit','Export Local B/U')     group by tr_no,port_doc_line_no) a, 
              (select NVL(sum(qty_Q6 ),0) as totalQ6,NVL(sum(qty_Q7 ),0) as totalQ7,
              NVL(sum(QTY_X8 ),0) as totalX8,NVL(sum(QTY_PEB ),0) as totalPEB,NVL(sum(QTY_A2 ),0) as totalA2,NVL( sum(QTY_LDC ),0) as totalLDC,
                NVL(sum(QTY_H2 ),0) as totalH2,
                NVL(sum(QTY_ZA ),0) as totalZA,NVL(sum(QTY_ZB ),0) as totalZB,NVL(sum(QTY_ZC ),0) as totalZC,NVL(sum(QTY_PGA ),0) as totalPGA,
                NVL(sum(QTY_H3 ),0) as totalH3,NVL(sum(QTY_BULK),0) as totalBULK,NVL(sum(QTY_ALF ),0) as totalALF,NVL(sum(QTY_PLA ),0) as totalPLA,NVL(sum(QTY_Q7D ),0) as totalQ7D,
                NVL(sum(QTY_W2 ),0) as totalW2,NVL(sum(QTY_PAG ),0) as totalPAG,
              tr_no,port_doc_line_no from edi_elp_allot where CGO_TYPE in('Transit PPK')   group by tr_no,port_doc_line_no) b
              where a.tr_no=b.tr_no and a.port_doc_line_no=b.port_doc_line_no )d where d.tr_no =msg.tr_no and d.port_doc_line_no=port.doc_line_no ) as wareHouseBU,
              (select (decode(d.qtyQ7 , null, '',0,'',  d.qtyQ7 ||'Q7' )
               || decode(d.qtyQ6, null, '',0,'',','||  d.qtyQ6 ||'Q6')
               || decode(d.qtyX8, null, '',0,'', ','|| d.qtyX8 ||'X8')
               || decode( d.qtyPEB, null, '',0,'', ','|| d.qtyPEB ||'PEB')
               || decode(d.qtyH2, null, '',0,'', ','||d.qtyH2 ||'H2')
               || decode(d.qtyA2, null, '',0,'', ','|| d.qtyA2 ||'A2')
               || decode(d.qtyLDC, null, '',0,'', ','|| d.qtyLDC ||'LDC')
               || decode(d.QTY_ZA , null, '',0,'', ','|| d.QTY_ZA  ||'ZA' )
               ||  decode(d.QTY_ZB, null, '',0,'', ','||d.QTY_ZB  ||'ZB' )
               ||  decode(d.QTY_ZC , null, '',0,'', ','||d.QTY_ZC  ||'ZC' )
               ||  decode(d.QTY_PGA , null, '',0,'', ','||d.QTY_PGA  ||'PGA' )
               ||  decode(d.QTY_H3 , null, '',0,'', ','||d.QTY_H3  ||'H3' )
               ||  decode(d.QTY_BULK , null, '',0,'', ','||d.QTY_BULK ||'BULK' )
               ||  decode(d.QTY_ALF , null, '',0,'', ','||d.QTY_ALF  ||'ALF' )
               ||  decode(d.QTY_PLA , null, '',0,'', ','||d.QTY_PLA ||'PLA' )
               ||  decode(d.QTY_Q7D , null, '',0,'', ','||d.QTY_Q7D ||'Q7D' )
               ||  decode(d.QTY_W2 , null, '',0,'', ','||d.QTY_W2 ||'W2' )
               ||  decode(d.QTY_PAG , null, '',0,'', ','||d.QTY_PAG ||'PAG' )
               ||  decode(d.countH5 , 0, '', ','||'H5' ))  from
              (select a.countH5,(a.totalQ6-b.totalQ6) as qtyQ6,(a.totalQ7-b.totalQ7) as qtyQ7,(a.totalX8-b.totalX8) as qtyX8,
              (a.totalPEB-b.totalPEB) as qtyPEB,(a.totalA2-b.totalA2) as qtyA2,(a.totalLDC-b.totalLDC) as qtyLDC,(a.totalH2-b.totalH2) as qtyH2,             
              (a.totalZA- b.totalZA) as QTY_ZA, (a.totalZB- b.totalZB) as QTY_ZB, (a.totalZC- b.totalZC) as QTY_ZC, (a.totalPGA- b.totalPGA) as QTY_PGA,
               (a.totalH3- b.totalH3) as QTY_H3,(a.totalBULK- b.totalBULK) as QTY_BULK,(a.totalALF- b.totalALF) as QTY_ALF,(a.totalPLA- b.totalPLA) as QTY_PLA, 
               (a.totalQ7D- b.totalQ7D) as QTY_Q7D,(a.totalW2- b.totalW2) as QTY_W2,(a.totalPAG- b.totalPAG) as QTY_PAG,  
              b.tr_no as tr_no,  b.port_doc_line_no as port_doc_line_no
              from (select count(QTY_H5 )as countH5, sum(qty_Q6 ) as totalQ6,sum(qty_Q7 ) as totalQ7,
               sum(QTY_X8 ) as totalX8,sum(QTY_PEB ) as totalPEB,sum(QTY_A2 ) as totalA2, sum(QTY_LDC ) as totalLDC,
               sum(QTY_ZA ) as totalZA,sum(QTY_ZB ) as totalZB,sum(QTY_ZC ) as totalZC,sum(QTY_PGA ) as totalPGA,
                sum(QTY_H3 ) as totalH3,sum(QTY_BULK ) as totalBULK,sum(QTY_ALF ) as totalALF,sum(QTY_PLA ) as totalPLA,sum(QTY_Q7D ) as totalQ7D,
                sum(QTY_W2 ) as totalW2,sum(QTY_PAG ) as totalPAG,
                sum(QTY_H2 ) as totalH2,
              tr_no,port_doc_line_no from edi_elp_allot where CGO_TYPE in('Transit')     group by tr_no,port_doc_line_no) a, 
              (select NVL(sum(qty_Q6 ),0) as totalQ6,NVL(sum(qty_Q7 ),0) as totalQ7,
              NVL(sum(QTY_X8 ),0) as totalX8,NVL(sum(QTY_PEB ),0) as totalPEB,NVL(sum(QTY_A2 ),0) as totalA2,NVL( sum(QTY_LDC ),0) as totalLDC,
                NVL(sum(QTY_H2 ),0) as totalH2,
                NVL(sum(QTY_ZA ),0) as totalZA,NVL(sum(QTY_ZB ),0) as totalZB,NVL(sum(QTY_ZC ),0) as totalZC,NVL(sum(QTY_PGA ),0) as totalPGA,
                NVL(sum(QTY_H3 ),0) as totalH3,NVL(sum(QTY_BULK),0) as totalBULK,NVL(sum(QTY_ALF ),0) as totalALF,NVL(sum(QTY_PLA ),0) as totalPLA,NVL(sum(QTY_Q7D ),0) as totalQ7D,
                NVL(sum(QTY_W2 ),0) as totalW2,NVL(sum(QTY_PAG ),0) as totalPAG,
              tr_no,port_doc_line_no from edi_elp_allot where CGO_TYPE in('Transit PPK')   group by tr_no,port_doc_line_no) b
              where a.tr_no=b.tr_no and a.port_doc_line_no=b.port_doc_line_no )d where d.tr_no =msg.tr_no and d.port_doc_line_no=port.doc_line_no ) as transitBU, 
                (select (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               ||  decode( sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               ||  decode( sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               ||  decode( sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               ||  decode( sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               ||  decode( sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               ||  decode( sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               ||  decode( sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               ||  decode( sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               ||  decode( sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               ||  decode( sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and port.doc_line_no= allot.port_doc_line_no and allot.CGO_TYPE in('Export Local B/U') ) as expLocalBU,
                (select STRAGG(STRINGDELIM(sum(QTY) ||ALLOT_TYPE ,' , ')) as qtAllot from qt_allot where FLT_KEY=#fltKey# and FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') and UNLDG_PT=#unLdgPoint#
                 group by ALLOT_TYPE)as qtAllot,msg.tr_no as allotTrNo , msg.ACKNOWLEDGE_IND as acknowledgeInd ,  TO_CHAR( msg.LM_DATE,'MM/DD/YYYY') as allotLmDate ,TO_CHAR( msg.ACKNOWLEDGE_DATE,'MM/DD/YYYY') as acknowledgeDate           
                from edi_elp_msg msg,edi_elp_port port where  msg.flt_key=#fltKey# and msg.TR_NO=port.tr_no   and msg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
                and port.port =#unLdgPoint# and msg.tr_no in(
                SELECT b.trNO FROM (SELECT rownum r, a.trNo  FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and elpmsg.TRF_IND='Y'  order by to_number(elpmsg.tr_no)  desc)a
                WHERE rownum &lt;=2) b WHERE r=#rowNum#)            
                
     </select> 
      <select id="fetchUldProhAircraft" parameterClass="map" resultClass="java.lang.Integer">
     select COUNT(1) from uld_type_proh_acft
	          where  uld_type = #uldType#
           and    contr_code = #contrCode#
            and (carr_code is null or carr_code=#carrCode#)          
           and    acft_type = (select leg.acft_type from  flt_opr opr,flt_opr_leg leg
                                     where  opr.flt_key = #flightKey#
                                     and    opr.sch_date = TO_DATE(#flightDate#, 'DDMONYY')
                                     and    opr.flt_type = 'D' and leg.tr_no=opr.tr_no and off_point=#unldgpt#)
         </select>  
     <select id="fetchBuildUpInstruction" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
     select allot.instruction as bUInstruction,allot.CGO_TYPE as cargoType,
	(decode(allot.qty_Q7 , null, '',0,'', allot.qty_Q7 ||'Q7')
               || decode(allot.qty_Q6 , null, '',0,'',','||  allot.qty_Q6 ||'Q6')
               || decode(allot.qty_X8 , null, '',0,'', ','|| allot.qty_X8  ||'X8')
               || decode( allot.QTY_PEB , null, '',0,'', ','|| allot.QTY_PEB ||'PEB')
               || decode(allot.QTY_H2 , null, '',0,'', ','|| allot.QTY_H2  ||'H2')
               || decode(allot.QTY_A2 , null, '',0,'', ','|| allot.QTY_A2 ||'A2')
               || decode(allot.QTY_LDC , null, '',0,'', ','|| allot.QTY_LDC ||'LDC')
               
               || decode(allot.QTY_ZA , null, '',0,'', ','|| allot.QTY_ZA  ||'ZA' )
               ||  decode( allot.QTY_ZB , null, '',0,'', ','|| allot.QTY_ZB  ||'ZB' )
               ||  decode( allot.QTY_ZC , null, '',0,'', ','|| allot.QTY_ZC  ||'ZC' )
               ||  decode( allot.QTY_PGA , null, '',0,'', ','|| allot.QTY_PGA  ||'PGA' )
               ||  decode( allot.QTY_H3 , null, '',0,'', ','|| allot.QTY_H3  ||'H3' )
               ||  decode( allot.QTY_BULK , null, '',0,'', ','|| allot.QTY_BULK  ||'BULK' )
               ||  decode( allot.QTY_ALF , null, '',0,'', ','|| allot.QTY_ALF  ||'ALF' )
               ||  decode( allot.QTY_PLA , null, '',0,'', ','|| allot.QTY_PLA  ||'PLA' )
               ||  decode( allot.QTY_Q7D , null, '',0,'', ','|| allot.QTY_Q7D  ||'Q7D' )
               ||  decode( allot.QTY_W2 , null, '',0,'', ','|| allot.QTY_W2  ||'W2' )
               ||  decode( allot.QTY_PAG , null, '',0,'', ','|| allot.QTY_PAG  ||'PAG' )
               
               ||  decode( count(allot.QTY_H5) , 0, '', ','||'H5')) as uldAllot,
               RMK as remarks,allot.tr_no from edi_elp_allot allot, edi_elp_msg elpmsg,edi_elp_port elpport  
               where allot.tr_no =elpmsg.tr_no and allot.PORT_DOC_LINE_NO=elpport.DOC_LINE_NO
	    and allot.cgo_type in('Transit','Transit PPK','Export Local B/U') and elpmsg.tr_no=elpport.tr_no  
      and elpport.port=#unLdgPoint# and elpmsg.tr_no in (SELECT b.trNO FROM (SELECT rownum r, a.trNo  
      FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# 
      and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and elpmsg.TRF_IND='Y'  order by to_number(elpmsg.tr_no)  desc)a
		WHERE rownum &lt;=2) b WHERE r=1) group by allot.tr_no,allot.RMK,allot.instruction,allot.CGO_TYPE,allot.qty_Q7,
    allot.qty_Q6,allot.qty_X8,allot.QTY_PEB,allot.QTY_H2,allot.QTY_A2,allot.QTY_LDC,allot.QTY_H5,allot.QTY_ZA, allot.QTY_ZB, allot.QTY_ZC, allot.QTY_PGA,
  	allot.QTY_H3, allot.QTY_BULK, allot.QTY_ALF, allot.QTY_PLA, allot.QTY_Q7D, allot.QTY_W2, allot.QTY_PAG
                
     </select>
       <select id="fetchAllotmentWithJO" parameterClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO" resultClass="cargo.cms.export.buildup.bo.BuildUpJobOrderBO">
	select (decode(d.qtyQ7 , 0, '',  d.qtyQ7 ||'Q7' )
	               || decode(d.qtyQ6, 0, '',','||  d.qtyQ6 ||'Q6')
	               || decode(d.qtyX8, 0, '', ','|| d.qtyX8 ||'X8')
	               || decode( d.qtyPEB, 0, '', ','|| d.qtyPEB ||'PEB')
	               || decode(d.qtyH2, 0, '', ','||d.qtyH2 ||'H2')
	               || decode(d.qtyA2, 0, '', ','|| d.qtyA2 ||'A2')
	               || decode(d.qtyLDC, 0, '', ','|| d.qtyLDC ||'LDC')
	               || decode(d.QTY_ZA , 0, '', ','|| d.QTY_ZA  ||'ZA' )
	               ||  decode(d.QTY_ZB, 0, '', ','||d.QTY_ZB  ||'ZB' )
	               ||  decode(d.QTY_ZC , 0, '', ','||d.QTY_ZC  ||'ZC' )
	               ||  decode(d.QTY_PGA , 0, '', ','||d.QTY_PGA  ||'PGA' )
	               ||  decode(d.QTY_H3 , 0, '', ','||d.QTY_H3  ||'H3' )
	               ||  decode(d.QTY_BULK , 0, '', ','||d.QTY_BULK ||'BULK' )
	               ||  decode(d.QTY_ALF , 0, '', ','||d.QTY_ALF  ||'ALF' )
	               ||  decode(d.QTY_PLA , 0, '', ','||d.QTY_PLA ||'PLA' )
	               ||  decode(d.QTY_Q7D , 0, '', ','||d.QTY_Q7D ||'Q7D' )
	               ||  decode(d.QTY_W2 , 0, '', ','||d.QTY_W2 ||'W2' )
	               ||  decode(d.QTY_PAG , 0, '', ','||d.QTY_PAG ||'PAG' )
	               ||  decode(d.qtyH5 , 0, '', ','||'H5' )) as allotmentWithJO from               
	(select Q7.countAllot as qtyQ7,Q6.countAllot as qtyQ6,X8.countAllot as qtyX8,PEB.countAllot as qtyPEB,H2.countAllot as qtyH2,A2.countAllot as qtyA2,LDC.countAllot as qtyLDC,
	ZA.countAllot as QTY_ZA,ZB.countAllot as QTY_ZB,ZC.countAllot as QTY_ZC,PGA.countAllot as QTY_PGA,H3.countAllot as QTY_H3,BULK.countAllot as QTY_BULK,ALF.countAllot as QTY_ALF,
	PLA.countAllot as QTY_PLA,Q7D.countAllot as QTY_Q7D,W2.countAllot as QTY_W2,PAG.countAllot as QTY_PAG,
	H5.countAllot as qtyH5
	  from (select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1Q7' and gp.ttl_pc!='0' ) Q7, 
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1Q6' and gp.ttl_pc!='0') Q6,
	  (select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1X8' and gp.ttl_pc!='0' ) X8,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1PEB' and gp.ttl_pc!='0' ) PEB,
	(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1H2' and gp.ttl_pc!='0' ) H2,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1A2' and gp.ttl_pc!='0' ) A2,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1LDC' and gp.ttl_pc!='0' ) LDC,
		
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1ZA' and gp.ttl_pc!='0' ) ZA,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1ZB' and gp.ttl_pc!='0' ) ZB,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1ZC' and gp.ttl_pc!='0' ) ZC,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1PGA' and gp.ttl_pc!='0' ) PGA,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1H3' and gp.ttl_pc!='0' ) H3,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1BULK' and gp.ttl_pc!='0' ) BULK,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1ALF' and gp.ttl_pc!='0' ) ALF,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1PLA' and gp.ttl_pc!='0' ) PLA,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1Q7D' and gp.ttl_pc!='0' ) Q7D,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1W2' and gp.ttl_pc!='0' ) W2,
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1PAG' and gp.ttl_pc!='0' ) PAG,
		
		(select count(gpuld.ALLOT_TYPE) as countAllot  from exp_bu_gp_uld_type gpuld,exp_bu_gp gp
		where gp.UNLDG_PT=#unLdgPoint# and gp.FLT_KEY=#fltKey# and gp.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')and gp.GP_NO=gpuld.GP_NO and gpuld.allot_type='1H5' and gp.ttl_pc!='0') H5)d                    
     </select>
     <select id="validateBuildUpZone" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select count(1) from mast_wh_area where WH_AREA=#buildUpZone#
	</select>
      
	<select id="sqlamenddelete_flt_leg_details" parameterClass="map"  resultClass="java.lang.String">
		select leg_status from flt_opr_leg a ,flt_opr b
			 where
				 a.tr_no = b.tr_no
				 and a.flt_key= b.flt_key
				 and a.sch_date = b.sch_date
				 and a.flt_key=#fltkey#
				 and a.flt_type = 'D'
				 and to_char(a.sch_date,'DDMONYY') =to_date(#schdate#,'DDMONYY')
				 and a.OFF_POINT = #offpoint#
	</select>

	<select id="sqlamenddelete_flt_leg_details1" parameterClass="map"  resultClass="cargo.cms.export.bo.BulkCargoBO">
		select leg_status as portClosed,a.OFF_POINT as bulk_UnldgPT from flt_opr_leg a ,flt_opr b
			 where
				 a.tr_no = b.tr_no
				 and a.flt_key= b.flt_key
				 and a.sch_date = b.sch_date
				 and a.flt_key=#fltkey#
				 and a.flt_type = 'D'
				 and to_char(a.sch_date,'DDMONYY') =to_date(#schdate#,'DDMONYY')
				 
	</select>
	
	<update id="updateTarmacCatalogInAWB" parameterClass="map" >
	update awb set catalog='TG' where AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</update>
	<update id="updateTarmacCatalogInExpCar" parameterClass="map" >
	update EXP_CAR set catalog='TG' where AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</update>
	
	<update id="updateTransitTypeInUldInv" parameterClass="map" >
	update uld_inventory set TRANSIT_TYPE='TA',flt_key=#fltKey#,flt_date=#fltDate# where uld_key=#uldKey#
	</update>
	
	<select id="sqlamenddeleteawbheader" parameterClass="cargo.cms.export.bo.PrePackCargoBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">
			SELECT A.CATALOG catalog,
			(SELECT 
			       (CASE WHEN decode(b.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
			       (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
			       THEN 'Q' ELSE decode(b.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
			       ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
				FROM AWB B WHERE  A.AWB_NO=B.AWB_NO AND A.AWB_DATE=B.AWB_DATE) as cargoType,
			EPA.AWB_NO as awbNo, 
			CONCAT(CONCAT(SUBSTR(EPA.AWB_NO,0,3),'-'),SUBSTR(EPA.AWB_NO,4)) as awbNoDisplay, 
			to_char(EPA.AWB_DATE,'DDMONYY') as awbDate, 
			EPA.DEST as dest, EPA.AWB_PCS as awbPCs, EPA.AWB_WT as awbWt, 
			EPA.NON_PMAN_PCS as totalNonPreManfPc, EPA.NON_PMAN_WT as totalNonPreManfWt, 
       		FLT_KEY as fltNo, to_char(FLT_DATE,'DDMONYY') as fltDate, 
       		to_char(EPA.EST_DATE,'DDMONYY') as fltEstDate,
       		PKG_COMMON.get_flt_eta(EPA.FLT_KEY, EPA.FLT_DATE, 'D', 'DD') as fltEstTime, 
       		EPA.FLT_PORTS as fltPort,EPA.CARR_CODE as fltpfx,EPA.FLT_NO as fltsfx, EPA.car_yn carCreated
			FROM   V_EXP_PMAN_AWB EPA JOIN AWB A ON A.AWB_NO=EPA.AWB_NO AND A.AWB_DATE=EPA.AWB_DATE
			WHERE  EPA.AWB_NO =#awbno#
				AND EPA.AWB_DATE =to_date(#awbdate#,'DDMONYY')
				AND EPA.FLT_KEY =#fltNo# 
				AND EPA.FLT_DATE =to_date(#fltDate#,'DDMONYY')
	</select>		
	
	<select id="sqlamenddeletebulkppkheader" parameterClass="cargo.cms.export.bo.PrePackCargoBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">
			SELECT PMAN_PCS AS premanfbulkpc,
		    NON_PMAN_PCS AS nonpremanfbulkpc,
		    PMAN_WT AS premanfbulkwt,
		    NON_PMAN_WT AS nonpremanfbulkwt,
        	PMAN_PCS AS premanfppkpc,
        	NON_PMAN_PCS  AS nonpremanfppkpc,
        	PMAN_WT AS premanfppkwt,
        	NON_PMAN_WT AS nonpremanfppkwt,
        	TSA_PASS_IND AS tsaPassInd  
			FROM  AWB 
			WHERE  
		    AWB_NO =#awbno#
		    AND AWB_DATE =to_date(#awbdate#,'DDMONYY')
	</select>		
	<select id="sqlamenddeletebulkdetails" parameterClass="cargo.cms.export.bo.PrePackCargoBO"  resultClass="cargo.cms.export.bo.BulkCargoBO">
				SELECT ROWNUM, UNLDG_PT as bulk_UnldgPT,
						UNLDG_PT as bulk_UnldgPT_DB, 
						GROUP_NO as bulk_Grp_No, 
						(p.PMAN_PCS) as bulk_Pc, 
						(p.PMAN_WT) as bulk_Wt,
						UNASSIGNED_BULK_PCS as unAsgnbulk_Pc, 
						UNASSIGNED_BULK_WT as unAsgnbulk_Wt,  
						p.PMAN_PCS as manfBulkPc, 
						p.PMAN_WT as manfBbulkWt,	
						(NON_PMAN_PCS) as nonPman_Pc, 
						(NON_PMAN_WT) as nonPman_Wt,  
						MAN_RMK as bulk_ManfRem, 
						BLDUP_INSTR as bulk_BuldpInstr ,
						(ASSIGNED_BULK_PCS) as assigned_bulk_pcs,
						(ASSIGNED_BULK_WT) as assigned_bulk_wt,
						p.AWB_NO as awbNo,
						to_char(p.AWB_DATE,'DDMONYY') as awbDate ,
						FLT_KEY as fltNo,
						to_char(FLT_DATE,'DDMONYY') as fltDate,
						CAR_YN carCreated ,
						p.bulk_pcs oldBulkPcs,
						p.bulk_wt oldBulkWt,
						(NVL(p.ppk_pcs,0)+NVL(p.mix_pcs,0)) oldBupPcs,
						(NVL(p.ppk_wt,0)+NVL(p.mix_wt,0)) oldBupWt,
						( decode(a.spl_code1, null, '', a.spl_code1 || decode(a.spl_code2, null, '', '/'))
		               		|| decode(a.spl_code2, null, '', a.spl_code2 || decode(a.spl_code3, null, '', '/'))
		               		|| decode(a.spl_code3, null, '', a.spl_code3 || decode(a.spl_code4, null, '', '/'))
		              		|| decode(a.spl_code4, null, '', a.spl_code4 || decode(a.spl_code5, null, '', '/'))
		               		|| decode(a.spl_code5, null, '', a.spl_code5 || decode(a.spl_code6, null, '', '/'))
		              		|| decode(a.spl_code6, null, '', a.spl_code6 || decode(a.spl_code7, null, '', '/'))
		               		|| decode(a.spl_code7, null, '', a.spl_code7 || decode(a.spl_code8, null, '', '/'))
		               		|| decode(a.spl_code8, null, '', a.spl_code8)) splCode
			FROM   EXP_PMANIFEST_AWB p
			join awb a on a.awb_no = p.awb_no and a.awb_date = p.awb_date
			WHERE  p.AWB_NO = #awbno#
			AND   to_char(p.AWB_DATE,'DDMONYY') =to_date(#awbdate#,'DDMONYY')
			AND    FLT_KEY = #fltNo#
			AND    FLT_DATE =to_date(#fltDate#,'DDMONYY')
		
	</select>
	
	<select id="sqlamenddeleteppkdetails" parameterClass="cargo.cms.export.bo.PrePackCargoBO"  resultClass="cargo.cms.export.bo.PrePackCargoBO">
		select rownum, t1.uld_bt_no as uldNo, t1.unldg_pt as ppk_UnldgPT, t1.group_no as ppk_Grp_No, t1.man_rmk as ppk_ManfRem, t1.bldup_instr as ppk_BuldpInstr,
        t1.flt_key as fltNo, to_char(t1.flt_date, 'DDMONYY') as fltDate,t1.CONTR_CODE as ppk_Contr_Code, t2.assigned_pcs preManfPc, t2.assigned_wt preManfWt 
		from   EXP_PMANIFEST_ULD t1, EXP_PMANIFEST_ULD_AWB t2
			where  t1.flt_key = t2.flt_key
			and    t1.flt_date = t2.flt_date
			and    t1.uld_bt_no = t2.uld_bt_no
			and    t1.ppk_type = 'P'
			and    t1.flt_key = #fltNo#
			and    to_char(t1.flt_date,'DDMONYY') =to_date(#fltDate#,'DDMONYY')
			and    t2.awb_no = #awbno#
			and    to_char(t2.awb_date, 'DDMONYY') = to_date(#awbdate#, 'DDMONYY')
	</select>			
	<select id="sqlamenddeleteconnfltdetails" parameterClass="cargo.cms.export.bo.PrePackCargoBO"  resultClass="cargo.cms.export.bo.ConntFlightBO">
		SELECT ROWNUM, CONN_FLT_KEY as cnetg_Flt_Key, to_char(CONN_FLT_DATE,'DDMONYY') as cnetg_Flt_Date, SECTOR as cnetg_Flt_Sector,
			CONN_FLT_SNO as cnetg_Flt_SNO,CONN_FLT_CARR as cnetg_Flt_CarrCode ,CONN_FLT_NO as cnetg_Flt_No,
			CONN_FLT_KEY as cnetg_Flt_Key_DB ,to_char(CONN_FLT_DATE,'DDMONYY') as cnetg_Flt_Date_DB,SECTOR as cnetg_Flt_Sector_DB,
			AWB_NO as awbNo,to_char(AWB_DATE,'DDMONYY') as awbDate,FLT_KEY as fltNo,to_char(FLT_DATE,'DDMONYY') as fltDate
			FROM   EXP_PMANIFEST_AWB_CONN_FLT
			WHERE  AWB_NO = #awbno#
			AND    AWB_DATE = to_date(#awbdate#,'DDMONYY')
			AND    FLT_KEY = #fltNo#
			AND    FLT_DATE =to_date(#fltDate#,'DDMONYY')
			ORDER BY CONN_FLT_SNO
	</select>	
	
	<select id="sqlgetvolumerefno" parameterClass="cargo.cms.export.bo.PrePackCargoBO"  resultClass="cargo.cms.export.bo.PrePackCargoBO">
		select 	trim(to_char(round(pkg_exp_val.get_volume(a.awb_no, a.pman_pcs), 2),'99990.00')) as volMc, c.ref_no as refNo,
		pkg_exp_val.get_exp_awb_cc_code(#fltNo#,#fltDate#, a.awb_no) as consCode, 
		ltrim(b.content ||' '|| (Pkg_Pman.awb_spl_codes(a.AWB_NO,a.AWB_DATE)),'/') as splCode
		from EXP_PMANIFEST_AWB a, awb b, exp_tally_sheet c where 
		a.awb_no = b.awb_no and  a.awb_date = b.awb_date and a.awb_no = c.awb_no and a.awb_date = c.awb_date and a.flt_key = c.flt_key and 
		a.flt_date = c.flt_date and a.awb_no  =  #awbno# and  a.awb_date  = #awbdate# and  a.flt_key   = #fltNo# and
		to_char(a.flt_date, 'DDMONYY')  = to_date(#fltDate#, 'DDMONYY') and  to_number(c.ref_no) = (select max(to_number(nvl(ref_no,0))) 
		from exp_tally_sheet where awb_no = #awbno# and to_char(awb_date, 'DDMONYY') = to_date(#awbdate#, 'DDMONYY')
		and flt_key = #fltNo# and to_char(flt_date, 'DDMONYY') = to_date(#fltDate#, 'DDMONYY'))
	</select>
	
	
	
	<update id="sqlamendawbbulkdetails" parameterClass="cargo.cms.export.bo.BulkCargoBO" >
		UPDATE EXP_PMANIFEST_AWB 
			SET BULK_PCS = #bulk_Pc#,
				BULK_WT= #bulk_Wt#,
				UNLDG_PT=#bulk_UnldgPT#,
				GROUP_NO=#bulk_Grp_No#,
				BLDUP_INSTR=#bulk_BuldpInstr#,
				MAN_RMK=#bulk_ManfRem#,	
				pman_pcs = #pmanPcs#,
				pman_wt = #pmanWt#,
				UNASSIGNED_BULK_PCS = #unAsgnbulk_Pc#,
				UNASSIGNED_BULK_WT	= #unAsgnbulk_Wt#,
		   		TR_TYPE = #trtype#,
		   		PRINT_IND = 'N',
		   		MANUAL_IND = 'Y',
		   		LM_USER_ID=#lastModUserId#,
				LM_DATE=sysdate		
			WHERE
			  AWB_NO =#awbNo#
			  AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			  AND FLT_KEY = #fltNo#
			  AND FLT_DATE = #fltDate#
			  AND UNLDG_PT = #bulk_UnldgPT_DB#
	</update>	
	
	<update id="sqlamendawbppkdetails" parameterClass="cargo.cms.export.bo.PrePackCargoBO" >
		UPDATE EXP_PMANIFEST_ULD
			SET GROUP_NO = #ppk_Grp_No#,
				LM_USER_ID=#lastModUserId#,
				LM_DATE=sysdate			 
			WHERE
			 	 FLT_KEY  = #fltNo#
			 	 AND FLT_DATE  = #fltDate#
			 	 AND ULD_BT_NO = #uldNo#
	</update>	
					   
	<update id="sqlamendconntfltdetails" parameterClass="cargo.cms.export.bo.ConntFlightBO" >
		UPDATE  EXP_PMANIFEST_AWB_CONN_FLT 
			SET CONN_FLT_KEY = #cnetg_Flt_Key#, 
		    	CONN_FLT_DATE=to_date(#cnetg_Flt_Date#,'DDMONYY'),
		    	CONN_FLT_CARR=#cnetg_Flt_CarrCode#,
		    	CONN_FLT_NO=#cnetg_Flt_No#,
				SECTOR=#cnetg_Flt_Sector#, 
 			    LM_USER_ID=#lastModUserId#,
				LM_DATE=sysdate 
	       WHERE
		   	   AWB_NO=#awbNo#
			   AND AWB_DATE=to_date(#awbDate#,'DDMONYY')
			   AND FLT_KEY=#fltNo# 
			   AND FLT_DATE=to_date(#fltDate#,'DDMONYY')
			   AND CONN_FLT_KEY=#cnetg_Flt_Key_DB#
			   AND to_char(CONN_FLT_DATE,'DDMONYY')=to_date(#cnetg_Flt_Date_DB#,'DDMONYY')
			   AND SECTOR = #cnetg_Flt_Sector_DB#
	</update>	

	<delete id="sqldeleteawbbulkdetails" parameterClass="cargo.cms.export.bo.BulkCargoBO" >
		DELETE FROM EXP_PMANIFEST_AWB 
			WHERE
			  AWB_NO =#awbNo#
			  AND AWB_DATE = #awbDate#
			  AND FLT_KEY = #fltNo#
			  AND FLT_DATE = #fltDate#
			  AND UNLDG_PT = #bulk_UnldgPT_DB#
	</delete>	

	<update id="sqlupdateawbbulkdetails" parameterClass="cargo.cms.export.bo.BulkCargoBO" >
		update EXP_PMANIFEST_AWB set  BULK_PCS = BULK_PCS - #oldBulkPcs# , BULK_WT = BULK_WT - #oldBulkWt#,
			PMAN_PCS = #pmanPcs#,PMAN_WT = #pmanWt# ,UNASSIGNED_BULK_PCS = #unAsgnbulk_Pc#,
				UNASSIGNED_BULK_WT	= #unAsgnbulk_Wt# 
			WHERE
			  AWB_NO =#awbNo#
			  AND AWB_DATE = #awbDate#
			  AND FLT_KEY = #fltNo#
			  AND FLT_DATE = #fltDate#
			  AND UNLDG_PT = #bulk_UnldgPT_DB#
	</update>
	
	<delete id="sqldeleteawbppkdetails" parameterClass="cargo.cms.export.bo.PrePackCargoBO" >
		DELETE FROM EXP_PMANIFEST_ULD 
			WHERE
			  FLT_KEY   = #fltNo#
			  AND FLT_DATE  = #fltDate#
			  AND ULD_BT_NO = #uldNo#
	</delete>	
	
	<delete id="sqldeleteconntfltdetails" parameterClass="cargo.cms.export.bo.ConntFlightBO" >
		DELETE FROM EXP_PMANIFEST_AWB_CONN_FLT 
	       WHERE
		   	   AWB_NO=#awbNo#
			   AND AWB_DATE=to_date(#awbDate#,'DDMONYY')
			   AND FLT_KEY=#fltNo# 
			   AND FLT_DATE=#fltDate#
			   AND CONN_FLT_KEY=#cnetg_Flt_Key_DB#
			   AND CONN_FLT_DATE=#cnetg_Flt_Date_DB#
			   AND SECTOR = #cnetg_Flt_Sector_DB#
	</delete>	
	
	<parameterMap id="awb_event_del_by_awb_map" class="map">
		<parameter property="RESULT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="UNLDGPT"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBNO"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBDATE"       jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>	
		<parameter property="USER"        jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>	
	<procedure id="awbeventdelbyawb" parameterMap="awb_event_del_by_awb_map" >
		{? = call pkg_pman.awb_event_del_by_awb(?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap id="awb_event_del_by_uld_map" class="map">
		<parameter property="RESULT"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE"     jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"      jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>		
		<parameter property="USER"        jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>	
	<procedure id="awbeventdelbyuld" parameterMap="awb_event_del_by_uld_map" >
		{? = call pkg_pman.awb_event_del_by_uld(?,?,?,?)  }
	</procedure>
	
	<select id="sqlamenddeleteuldfltdetails" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.ExportULDBO">
		SELECT T2.ppk_type ppkType, 
     	T1.FLT_KEY as fltNo, 
	    to_char(T1.SCH_DATE,'DDMONYY') as fltDepDate,
			PKG_COMMON.get_flt_eta(T1.FLT_KEY, T1.SCH_DATE, 'D', 'DD') as etd, 
			to_char(T1.EST_DATE,'DDMONYY') as fltEstDate,
			T2.BLDUP_INSTR as bldupInst,T2.MAN_RMK  as manRmk,
			(select STRAGG(STRINGDELIM(t22.off_point, '/')) 
                  from     flt_opr t11, flt_opr_leg t22
                  where    t11.tr_no = t22.tr_no
                  and      t11.flt_key = T2.FLT_KEY
                  and      t11.sch_date = T2.FLT_DATE
                  and      t11.flt_type = 'D')
			as portOfCall,
			T2.ULD_BT_NO as uldNo,(t2.GROSS_WT-t2.TARE_WT) as netWeight,t3.MAN_WT as preManfWeight,
			t2.UNLDG_PT as unLdgPt,t2.GROUP_NO as grpNo,T2.CONTR_CODE as contrCode,T1.CARR_CODE as carrCode,T1.FLT_NO as fltKey,
			pkg_exp_val.flt_sector_close_yn(t2.flt_key, t2.flt_date, t2.unldg_pt) as portClosed,
			t3.checkout_yn as checkoutYN,
			pkg_exp_val.val_dls_finalize(T1.FLT_KEY, T1.SCH_DATE) as dlsFinalize 
		FROM   FLt_OPR T1, exp_pmanifest_uld T2, exp_flt_uld T3,uld_inventory T4
		WHERE  t1.flt_key = t2.flt_key
		and    t1.sch_date = t2.flt_date
		and    t2.flt_key = t3.flt_key
		and    t2.flt_date = t3.flt_date
		and    t2.uld_bt_no = t3.uld_key
    	and    t2.flt_key = t4.flt_key
		and    t2.flt_date = t4.flt_date
    	and    t2.uld_bt_no = t4.uld_key
		and    t1.flt_type = 'D'
		and    T4.ULD_KEY = #uldNo#
		<isNotEmpty property="loginCarrier">
	       	AND   (t1.CARR_CODE = #loginCarrier#
					OR t1.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #loginCarrier#))
		</isNotEmpty>
	</select>			
	
	<select id="sqlamenddeletebreakdowndetails" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
		select awbNoDisplay,awbNo, awbDate, dest, splCode1, manifestPcs, manifestWt, content from   
			(SELECT CONCAT(CONCAT(SUBSTR(T2.AWB_NO,0,3),'-'),SUBSTR(T2.AWB_NO,4))awbNoDisplay,T2.AWB_NO awbNo,to_char(T2.AWB_DATE,'DDMONYY') awbDate, 
				T2.DEST dest,(select    decode(spl_code1, null, '', spl_code1 || '/')
               || decode(spl_code2, null, '', spl_code2 || '/')
               || decode(spl_code3, null, '', spl_code3 || '/')
               || decode(spl_code4, null, '', spl_code4 || '/')
               || decode(spl_code5, null, '', spl_code5 || '/')
               || decode(spl_code6, null, '', spl_code6 || '/')
               || decode(spl_code7, null, '', spl_code7 || '/')
               || decode(spl_code8, null, '', spl_code8 || '/')
               || decode(spl_code9, null, '', spl_code9)
        		from   exp_car
        		where  awb_no = T2.AWB_NO
        		and awb_date = t2.awb_date) splCode1,
				ASSIGNED_PCS manifestPcs,ASSIGNED_WT manifestWt,
				T2.CONTENT content,
				T2.TSA_PASS_IND as tsaPassInd
        FROM   EXP_PMANIFEST_ULD_AWB T1, AWB T2,uld_inventory T3
			WHERE  T1.AWB_NO = T2.AWB_NO
			and    t1.awb_date = t2.awb_date			
      and    T1.flt_key = T3.flt_key
		and    T1.flt_date = T3.flt_date
    and    T1.uld_bt_no = T3.uld_key
			AND    T3.ULD_KEY =#uldNo#)
	</select>

	<select id="sqlamenddeleteuldconnfltdetails" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.ConntFlightBO">
		SELECT ROWNUM,T1.CONN_FLT_KEY as cnetg_Flt_Key,to_char(T1.CONN_FLT_DATE,'DDMONYY') as cnetg_Flt_Date,
		   T1.SECTOR as cnetg_Flt_Sector,T1.CONN_FLT_SNO as cnetg_Flt_SNO,
		   T1.CONN_FLT_CARR as cnetg_Flt_CarrCode,T1.CONN_FLT_NO as cnetg_Flt_No,
		   T1.CONN_FLT_KEY as cnetg_Flt_Key_DB,to_char(T1.CONN_FLT_DATE,'DDMONYY') as cnetg_Flt_Date_DB,
		   T1.SECTOR as cnetg_Flt_Sector_DB,T1.FLT_KEY as fltNo,to_char(T1.FLT_DATE,'DDMONYY') as fltDate,
		   T2.ULD_BT_NO as uldNo
			FROM EXP_PMANIFEST_ULD_CONN_FLT T1,EXP_PMANIFEST_ULD T2		
				WHERE  T1.ULD_BT_NO = #uldNo#
					AND    T1.FLT_KEY = T2.FLT_KEY
					AND    T1.FLT_DATE = T2.FLT_DATE
					AND    T1.ULD_BT_NO = T2.ULD_BT_NO 
					ORDER BY T1.CONN_FLT_SNO
	</select>	
	<update id="sqlamendulddetails" parameterClass="cargo.cms.export.bo.ExportULDBO" >
		UPDATE  EXP_PMANIFEST_ULD 
			SET BLDUP_INSTR=#bldupInst#,
				MAN_RMK = #manRmk#,
				TR_TYPE_EVT = #trtypeEvt#
			WHERE
			  FLT_KEY   = #fltNo#
			  AND FLT_DATE  = #fltDepDate#
			  AND ULD_BT_NO = #uldNo#
	</update>
	<update id="sqlamendlmuserinpmanuld" parameterClass="cargo.cms.export.bo.ExportULDBO" >
		UPDATE  EXP_PMANIFEST_ULD 
			SET lm_user_id = #userID#
			WHERE
			  FLT_KEY   = #fltNo#
			  AND FLT_DATE  = #fltDepDate#
			  AND ULD_BT_NO = #uldNo#
			  and unldg_pt = #unLdgPt#
	</update>
	<update id="sqlamendlmuserinpmanuldawb" parameterClass="cargo.cms.export.bo.ExportULDBO" >
		UPDATE  EXP_PMANIFEST_ULD_AWB 
			SET lm_user_id = #userID#
			WHERE
			  FLT_KEY   = #fltNo#
			  AND FLT_DATE  = #fltDepDate#
			  AND ULD_BT_NO = #uldNo#
			  and unldg_pt = #unLdgPt#
	</update>
	<update id="sqlamendlmuserinuld" parameterClass="cargo.cms.export.bo.ExportULDBO" >
		UPDATE  uld_inventory 
			SET lm_user_id = #userID#
			WHERE
			  ULD_KEY = #uldNo#
	</update>
	<delete id="sqldeleteuldconntfltdetails" parameterClass="cargo.cms.export.bo.ConntFlightBO" >
		DELETE FROM EXP_PMANIFEST_ULD_CONN_FLT 
	       WHERE
		   	   ULD_BT_NO=#uldNo#
			   AND FLT_KEY=#fltNo# 
			   AND FLT_DATE=to_date(#fltDate#,'DDMONYY')
			   AND CONN_FLT_KEY=#cnetg_Flt_Key_DB#
			   AND CONN_FLT_DATE=#cnetg_Flt_Date_DB#
			   AND SECTOR = #cnetg_Flt_Sector_DB#
	</delete>

	<update id="sqlamenduldconnfltdetails" parameterClass="cargo.cms.export.bo.ConntFlightBO" >	
		UPDATE  EXP_PMANIFEST_ULD_CONN_FLT 
			SET CONN_FLT_KEY = #cnetg_Flt_Key#, 
		    	CONN_FLT_DATE=to_date(#cnetg_Flt_Date#,'DDMONYY'),
		    	CONN_FLT_CARR=#cnetg_Flt_CarrCode#,
		    	CONN_FLT_NO=#cnetg_Flt_No#,
				SECTOR=#cnetg_Flt_Sector#, 
 			    LM_USER_ID=#lastModUserId#,
				LM_DATE=sysdate 
	       WHERE
		   	   ULD_BT_NO=#uldNo#
			   AND FLT_KEY=#fltNo# 
			   AND FLT_DATE=to_date(#fltDate#,'DDMONYY')
			   AND CONN_FLT_KEY=#cnetg_Flt_Key_DB#
			   AND to_char(CONN_FLT_DATE,'DDMONYY')=to_date(#cnetg_Flt_Date_DB#,'DDMONYY')
			   AND SECTOR = #cnetg_Flt_Sector_DB#		
	</update>			   	
	<delete id="sqldeleteulddetails" parameterClass="cargo.cms.export.bo.ExportULDBO" >
		DELETE FROM EXP_PMANIFEST_ULD 
			WHERE
			  FLT_KEY   = #fltNo#
			  AND FLT_DATE  = #fltDepDate#
			  AND ULD_BT_NO = #uldNo#
	</delete>	
	
		
	<update id="sqlupdateuldawbdtls" parameterClass="map" >	
		UPDATE EXP_ULD_AWB SET MANIFEST_YN='N',CLOSED_YN='N' WHERE  AWB_NO = #AWB_NO#
			 AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
			  AND ULD_KEY = #ULD_BT_NO# 
	</update>
	
	<update id="updateReadyDispathInd" parameterClass="cargo.cms.export.bo.ExportULDBO">
		update exp_pmanifest_uld
	    set ready_disp='Y',
	    READY_DISP_DATE = SYSDATE,READY_DISP_TIME = TO_CHAR(SYSDATE,'HH24MI')
	    where uld_bt_no=#uldNo# 
	    and flt_key = #fltKey# 
	    and flt_date = to_date(#fltDepDate#, 'DDMONYY')
	</update>
	
	<delete id="sqldeleteuldawbdetails" parameterClass="map">
    	DELETE FROM
    		exp_pmanifest_uld_awb
    	WHERE
    		 FLT_KEY=#FLT_KEY#
			 AND trunc(FLT_DATE)=to_date(#FLT_DATE#,'DDMONYY')
			 AND AWB_NO = #AWB_NO#
			 AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
			 AND ULD_BT_NO = #ULD_BT_NO#
    </delete>
<!-- ##################### Amend/Delete Premanifest   : End  ########################################-->
	<!-- Added by Swapneswari for Amend Flight Number and Date :Start--> 
	
	<select id="finalFlightValidate" parameterClass="map"  resultClass="java.lang.Integer">
	SELECT NVL(count(1),0) FROM FLT_OPR WHERE 
            <isEmpty property="fltKey">
                  CARR_CODE = #carrierCode# AND FLT_NO = #flightNo# 
            </isEmpty>
            <isNotEmpty property="fltKey">
                  FLT_KEY = #fltKey# 
            </isNotEmpty>
                  AND SCH_DATE= TO_DATE( #flightDate#, 'DDMONYY') AND FLT_TYPE='D'
	</select>
	
<select id="sqlamendflightgetetd" parameterClass="map" resultClass="java.lang.String">
		SELECT
		PKG_COMMON.get_flt_eta(#FLIGHTKEY#, TO_DATE(#FLIGHTDATE#,'DDMONYY'), 'D', 'DD') AS ETD
		FROM DUAL
	
		<!-- SELECT SUBSTR(TRIM(TO_CHAR(lpad(OPR.EST_TIME,4,0))),0,2)|| ':'||  SUBSTR(TRIM(TO_CHAR(lpad(OPR.EST_TIME,4,0))),3,4) FROM FLT_OPR OPR
		WHERE FLT_KEY =#FLIGHTKEY# AND
			SCH_DATE = TO_DATE(#FLIGHTDATE#,'DDMONYY') AND
			FLT_TYPE = 'D'-->
	</select>
	
	
	<select id="sqlpreoffloadgetetd" parameterClass="map" resultClass="java.lang.String">
		SELECT
		PKG_COMMON.get_flt_eta(#FLIGHTKEY#, TO_DATE(#FLIGHTDATE#,'DDMONYY'), 'D', 'DD') AS ETD
		FROM DUAL
	
		<!-- SELECT SUBSTR(TRIM(TO_CHAR(lpad(OPR.EST_TIME,4,0))),0,2)|| ':'||  SUBSTR(TRIM(TO_CHAR(lpad(OPR.EST_TIME,4,0))),3,4) FROM FLT_OPR OPR
		WHERE FLT_KEY =#FLIGHTKEY# AND
			SCH_DATE = TO_DATE(#FLIGHTDATE#,'DDMONYY') AND
			FLT_TYPE = 'D'-->
	</select>
	
	<select id="amendflight_validate_checkout1" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) 
		from exp_chkout_dtl
		where flt_key = #flightKey#
			and flt_date = #flightDate#        
			and chk_flg = 'N'              
	</select>
	<select id="manfDlsFinalizeValidate" parameterClass="cargo.cms.export.bo.AmendFlightBO" resultClass="cargo.cms.export.bo.AmendFlightBO">
		select final_manf_ind manfFinalize, dls_ind dlsFinalize from flt_opr_events where flt_key = #origFltKey# and sch_date = to_date(#origFltDate#,'DDMONYY') and flt_type='D'             
	</select>
	<select id="manfDlsFinalizeValidateFinal" parameterClass="cargo.cms.export.bo.AmendFlightBO" resultClass="cargo.cms.export.bo.AmendFlightBO">
		select final_manf_ind manfFinalize, dls_ind dlsFinalize from flt_opr_events where flt_key = #finalFltKey# and sch_date = to_date(#finalFltDate#,'DDMONYY') and flt_type='D'        
	</select>
	<select id="chkFreighterFlight" parameterClass="cargo.cms.export.bo.AmendFlightBO" resultClass="java.lang.Integer">
	  select count(1)
	  from flt_opr a join 
	  flt_opr_events b on
	  a.flt_key=b.flt_key and a.sch_date = b.sch_date and b.flt_type='D'
	  where a.flt_key=#finalFltKey# 
	  and a.sch_date= to_date(#finalFltDate#,'DDMONYY')
	  and a.cgo_acft_type!='FRE'
	</select>	
	
	<select id="chkSecCheckReqForShp" parameterClass="map" resultClass="java.lang.Integer">
	 	select count(1) from exp_sec_chk_jo
		WHERE
		AWB_NO = #awbNo# AND
		AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') AND
		FLT_KEY = #fltKey# AND
		FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')	
	</select>
	
	<select id="chkSecCheckCompletedShp" parameterClass="map" resultClass="java.lang.Integer">
	 	select count(1) from exp_sec_chk_jo
		WHERE
		AWB_NO = #awbNo# AND
		AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') AND
		FLT_KEY = #fltKey# AND
		FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') AND
		STATUS = 'Completed'
	</select>
	
	<update id="updateamendflightlist2"  parameterClass="cargo.cms.export.bo.AmendFlightSearchBO">
		
			UPDATE exp_pmanifest_uld_awb
			SET
				flt_key = #finalFltKey#,
				flt_date = #finalFltDate#,
				LM_USER_ID = #modifiedUser#,
				LM_DATE = sysdate
			WHERE
				flt_key = #origFltKey# AND
				flt_date = to_date(#origFltDate#, 'DDMONYY') AND 
				UNLDG_PT = #unLdgPt# AND
				AWB_NO = #awbNo# AND
				AWB_DATE = to_date(#awbDate#, 'DDMONYY')	

	</update>
	<update id="updateamendflightlist"  parameterClass="cargo.cms.export.bo.AmendFlightSearchBO">
		UPDATE exp_pmanifest_awb
			SET
				flt_key = #finalFltKey#,
				flt_date = #finalFltDate#,
				LM_USER_ID = #modifiedUser#,
				LM_DATE = sysdate
			WHERE
				flt_key = #origFltKey# AND
				flt_date = to_date(#origFltDate#, 'DDMONYY') AND 
				UNLDG_PT = #unLdgPt# AND
				AWB_NO = #awbNo# AND
				AWB_DATE = to_date(#awbDate#, 'DDMONYY') 
				
	</update>
	<select id="getamendflightheader" parameterClass="cargo.cms.export.bo.AmendFlightSearchBO" resultClass="cargo.cms.export.bo.AmendFlightBO">
		SELECT 
			A.FLT_KEY as origFltKey,
			to_char(A.ORG_FLT_DATE,'DDMONYY') as origFltDate,
			to_char(A.EST_DATE,'DDMONYY') as origEtd, 
			PKG_PMAN.FLT_PORTS(#origFltKey#,TO_DATE(#origFltDate#, 'DDMONYY')) as origPortOfCall,			
			B.FLT_KEY as finalFltKey,
			to_char(B.ORG_FLT_DATE,'DDMONYY') as finalFltDate,
			to_char(B.EST_DATE,'DDMONYY') as finalEtd, 
			PKG_PMAN.FLT_PORTS(#finalFltKey#,TO_DATE(#finalFltDate#, 'DDMONYY')) as finalPortOfCall
		FROM FLT_OPR A, FLT_OPR B  
			WHERE A.FLT_KEY=UPPER(#origFltKey#) 
			AND A.SCH_DATE = TO_DATE(#origFltDate#, 'DDMONYY') 
			AND A.FLT_TYPE = 'D'			
			AND B.FLT_KEY=UPPER(#finalFltKey#) 
			AND B.SCH_DATE = TO_DATE(#finalFltDate#, 'DDMONYY') 
			AND B.FLT_TYPE = 'D'
	</select>
	<select id="getamendflightlist" parameterClass="cargo.cms.export.bo.AmendFlightSearchBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
	select 
		t1.awb_no as awbNo,
		CONCAT(CONCAT(SUBSTR(t1.AWB_NO,0,3),'-'),SUBSTR(t1.AWB_NO,4)) as awbNoDisplay, 
		to_char(t1.awb_date, 'DDMONYY') as awbDate, 
		t2.pcs as awbPCs, 
		t2.wt as awbWt, 
		(t1.bulk_pcs + t1.ppk_pcs + t1.mix_pcs) as preManfBulkPc, 
		(t1.bulk_wt+t1.ppk_wt+t1.mix_wt) as preManfBulkWt, 
       	t1.unldg_pt as unLdgPt, 
       	t1.group_no as groupno
	from   
		exp_pmanifest_awb t1, 
		awb t2
	where  
		t1.awb_no = t2.awb_no
		and    to_char(t1.awb_date,'DDMONYY') = to_char(t2.awb_date,'DDMONYY')
		and    t1.flt_key = #origFltKey#
		and    t1.flt_date = TO_DATE(#origFltDate#, 'DDMONYY')
	</select>
	
	<select id="assignAwbDeatilsForAmendFlt" parameterClass="cargo.cms.export.bo.AmendFlightBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO" >
	select 
			substr(t1.awb_no, 1, 3)||'-'||substr(t1.awb_no, 4) as awbNoDisplay, 
			t1.awb_no as awbNo, 
			to_char(t1.awb_date,'DDMONYY') as awbDate, 
			t3.ULD_BT_NO as uldKey,
			t2.pcs||'/'||replace(to_char(t2.wt, '9999990.9'), ' ', '') awbPcWt, 
			t2.pcs as awbPCs,
			t2.wt as awbWt,
			t1.bulk_pcs||'/'||replace(to_char(t1.bulk_wt, '9999990.9'), ' ', '') pmanPcWt,
			t1.bulk_pcs pmanPcs,
			replace(to_char(t1.bulk_wt, '9999990.9'), ' ', '') pmanWt,
			t3.assigned_pcs as assignedPcs, 
			t3.assigned_wt as assignedWt, 
			t3.assigned_pcs as amendPcs, 
			t3.assigned_wt as amendWt, 
			t1.group_no as groupno,
			u.DEST_CODE as whDest,
			u.loc_code as locn,
			t4.CONTR_CODE contourCode, 
			t4.TARE_WT tareWt, 
			t4.GROSS_WT grossWt, 
			t4.BLDUP_COMPLETE buldUpComplete, 
			t4.EMPTY_YN emptyYN, 
			t4.EIC_YN eicYN,
			t1.BLDUP_INSTR bldupInst,
			t1.MAN_RMK manRmk,
			t2.DEST dest,
			t3.PPK_TYPE ppkType,
			u.dam_ind dmgInd,
			pkg_exp_val.get_exp_awb_cc_code(#origFltKey#, #origFltDate#, t1.awb_no) as consCode,			
			(select    decode(spl_code1, null, '', spl_code1 || '/')
               || decode(spl_code2, null, '', spl_code2 || '/')
               || decode(spl_code3, null, '', spl_code3 || '/')
               || decode(spl_code4, null, '', spl_code4 || '/')
               || decode(spl_code5, null, '', spl_code5 || '/')
               || decode(spl_code6, null, '', spl_code6 || '/')
               || decode(spl_code7, null, '', spl_code7 || '/')
               || decode(spl_code8, null, '', spl_code8 || '/')
               || decode(spl_code9, null, '', spl_code9)
                  from   exp_car
                  where  awb_no = t2.AWB_NO
                  and awb_date = t2.AWB_DATE) splcode, 
		trim(to_char(round(pkg_exp_val.get_volume(t2.awb_no, t2.pman_pcs), 2),'99990.00')) as volMc
		from   exp_pmanifest_awb t1, awb t2, exp_pmanifest_uld_awb t3, uld_inventory u , exp_pmanifest_uld t4
		where  t1.awb_no = t2.awb_no
			and    to_char(t1.awb_date,'DDMONYY') = to_char(t2.awb_date,'DDMONYY')			
			and    t1.awb_no = t3.awb_no and    t1.FLT_KEY = t3.flt_key and t1.FLT_DATE = t3.flt_date 
			and    t1.FLT_KEY = t4.flt_key and t1.FLT_DATE = t4.flt_date 
			and    t3.ULD_BT_NO = t4.ULD_BT_NO
			and    t3.PPK_TYPE = 'B'
			and    t3.ULD_BT_NO = u.uld_key
			and    t1.flt_key = #origFltKey#
			and    t1.flt_date = to_date(#origFltDate#,'DDMONYY')
			and    t1.unldg_pt = #origPortOfCall#
		order by T3.ULD_BT_NO,t1.awb_no
</select>	

<select id="ppkMIXUldAWBDetailsForAmendFlt" parameterClass="cargo.cms.export.bo.AmendFlightBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO" >
		select  
			substr(t3.awb_no, 1, 3)||'-'||substr(t3.awb_no, 4) as awbNoDisplay, 
			t1.ULD_BT_NO as uldKey, 
			t3.awb_no as awbNo, 
			to_char(t3.awb_date,'DDMONYY') as awbDate, 
			t1.UNLDG_PT as unldgPt,
			t1.GROSS_WT as grossWt,
			t1.TARE_WT as tareWt,
			t3.assigned_pcs as assignedPcs, 
			t3.assigned_wt as assignedWt, 
			group_no as groupno,
			t1.rcl_no as rclNo,
			t1.PPK_TYPE ppkType,
			t1.BLDUP_INSTR bldupInst,
			t1.MAN_RMK manRmk,
			t1.CONTR_CODE contourCode
			from   exp_pmanifest_uld t1, exp_pmanifest_uld_awb t3 
			where  t1.FLT_KEY = t3.flt_key and t1.FLT_DATE = t3.flt_date and t1.ULD_BT_NO = t3.ULD_BT_NO
			and (t3.PPK_TYPE = 'P' OR t3.PPK_TYPE = 'M')		
			and t1.flt_key = #origFltKey#
			and    t1.flt_date = to_date(#origFltDate#,'DDMONYY')
			and    t1.unldg_pt = #origPortOfCall#
		order by t1.ULD_BT_NO		
</select>

<select id="getSeqNoCreateUldAssigment" parameterClass="map" resultClass="java.lang.String" >
	select seq_no 
	from awb_inventory
	where  awb_no = #AWBNO#
        and    awb_date = #AWBDATE#       
        and    nvl(uld_key, '***') = nvl(#ULDKEY#, '***')
        and    flt_key is null
        and    flt_date is null
		and rownum = 1
	</select>
	
	<update id="updExpPmanifestUldConnFlt" parameterClass="map" >
		update EXP_PMANIFEST_ULD_CONN_FLT  set 
		flt_key = #FFLIGHTKEY#, 
		flt_date = to_date(#FFLIGHTDATE#,'DDMONYY')        
		WHERE ULD_BT_NO=#ULDKEY# 
		AND FLT_KEY= #OFLIGHTKEY#        
		AND FLT_DATE=to_date(#OFLIGHTDATE#,'DDMONYY')   
	</update>
	
	<insert id="amendflightpremanifestuldinsert" parameterClass="cargo.cms.export.bo.ExportULDBO" >
		<![CDATA[
		INSERT INTO EXP_PMANIFEST_ULD
					(FLT_KEY,FLT_DATE,ULD_BT_NO,PPK_TYPE,BLDUP_INSTR,MAN_RMK,CONTR_CODE,
					UNLDG_PT,GROUP_NO,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,RCL_NO,GROSS_WT,TARE_WT,FLT_TYPE,TRANSIT_FLG,HDLG_MODE)
		VALUES(#fltKey#,TO_DATE(#fltDepDate#,'DDMONYY'),#uldNo#,#ppkType#,#bldupInst#,#manRmk#,#contrCode#,#unLdgPt#,#grpNo#,#userID#,SYSDATE,#userID#,SYSDATE,#rclNo#,#grossWt#,#tareWt#,'D',
		(SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#uldNo#),
		(SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#uldNo#))
		]]>
	</insert>
	
	<select id="checkAmendFltReptType" parameterClass="map" resultClass="java.lang.Integer" >
		<![CDATA[
			select count(1) from exp_pmanifest_awb 
			where flt_key = #fltKey# and flt_date = to_date(#fltDate#,'DDMONYY')
			and awb_no = #awbNo# and PMAN_PCS > 0
		]]>
	</select>
	
	<insert id="setAWBEventForOldFlight" parameterClass="map">
		insert into awb_events
		(awb_no, awb_date, event_id, event_desc, flt_key, flt_date, flt_type,
		pcs, wt, cr_user_id, cr_date, lm_user_id, lm_date)
		values (#AWB_NO#, to_date(#AWB_DATE#,'DDMONYY'), 'AMDFLT',  'Amend Flight No',
		#FLT_KEY_FROM#, to_date(#FLT_DATE_FROM#,'DDMONYY'), 'E',
		#PCS#, #WT#, #USER_ID#, sysdate, #USER_ID#, sysdate)
	</insert>
	
	<insert id="setAWBEventForNewFlight" parameterClass="map">
		insert into awb_events
		(awb_no, awb_date, event_id, event_desc, flt_key, flt_date, flt_type,
		pcs, wt, cr_user_id, cr_date, lm_user_id, lm_date)
		values (#AWB_NO#, to_date(#AWB_DATE#,'DDMONYY'), 'AMDFLT',  'Amend Flight No',
		#FLT_KEY_TO#, to_date(#FLT_DATE_TO#,'DDMONYY'), 'E',
		#PCS#, #WT#, #USER_ID#, sysdate, #USER_ID#, sysdate)
	</insert>
	
	<select id="ChkFlg_IN_EXP_CHKOUT_dtl" parameterClass="map" resultClass="java.lang.String">
			select CHK_FLG from EXP_CHKOUT_DTL
			where FLT_KEY = #OFLIGHTKEY# and FLT_DATE = to_date(#OFLIGHTDATE#,'DDMONYY')
			and ULD_KEY = #ULDKEY#
	</select>

	<update id="updatePpkPmanAwbAmendFlt" parameterClass="map" >
		update EXP_PMANIFEST_AWB  set 
		FLT_KEY = #FLT_KEY_TO#, 
		FLT_DATE = to_date(#FLT_DATE_TO#,'DDMONYY'), 
		UNLDG_PT =  #UNLDG_PT_TO#   
		WHERE FLT_KEY = #FLT_KEY_FROM#        
		AND FLT_DATE = to_date(#FLT_DATE_FROM#,'DDMONYY')   
		AND UNLDG_PT = #UNLDG_PT_FROM#   
		AND FLT_TYPE = 'E'
		AND AWB_NO = #AWB_NO#
		AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
	</update>	
	
	<update id="updatePpkPmanUldAmendFlt" parameterClass="map" >
		update EXP_PMANIFEST_ULD  set 
		FLT_KEY = #FLT_KEY_TO#, 
		FLT_DATE = to_date(#FLT_DATE_TO#,'DDMONYY'),	
		UNLDG_PT =  #UNLDG_PT_TO#   
		WHERE FLT_KEY = #FLT_KEY_FROM#        
		AND FLT_DATE = to_date(#FLT_DATE_FROM#,'DDMONYY')   
		AND UNLDG_PT = #UNLDG_PT_FROM#     
		AND ULD_BT_NO = #ULD_KEY#   
		AND FLT_TYPE = 'E'		
	</update>
	
	<update id="updatePpkPmanUldAwbAmendFlt" parameterClass="map" >
		update EXP_PMANIFEST_ULD_AWB  set 
		FLT_KEY = #FLT_KEY_TO#, 
		FLT_DATE = to_date(#FLT_DATE_TO#,'DDMONYY'), 
		UNLDG_PT =  #UNLDG_PT_TO#   
		WHERE FLT_KEY = #FLT_KEY_FROM#        
		AND FLT_DATE = to_date(#FLT_DATE_FROM#,'DDMONYY')   
		AND UNLDG_PT = #UNLDG_PT_FROM#   
		AND ULD_BT_NO = #ULD_KEY#
		AND AWB_NO = #AWB_NO#
		AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
	</update>
	
	<update id="updatePpkFltUldAmendFlt" parameterClass="map" >
		update EXP_FLT_ULD  set 
		FLT_KEY = #FLT_KEY_TO#, 
		FLT_DATE = to_date(#FLT_DATE_TO#,'DDMONYY'),
		UNLDG_PT =  #UNLDG_PT_TO#,
		TR_TYPE = #TR_TYPE#   		
		WHERE FLT_KEY = #FLT_KEY_FROM#        
		AND FLT_DATE = to_date(#FLT_DATE_FROM#,'DDMONYY')   
		AND UNLDG_PT = #UNLDG_PT_FROM#
		AND ULD_KEY = #ULD_KEY#    
		AND FLT_TYPE = 'E'		
	</update>	

	<select id="getPmanChkHdCountAmendFlt" parameterClass="map"  resultClass="java.lang.Integer">
		SELECT NVL(count(1),0) 
		FROM EXP_CHKOUT_HD 
		WHERE 
        FLT_KEY = #FLT_KEY_TO#
		AND FLT_DATE = to_date(#FLT_DATE_TO#,'DDMONYY')	
		AND FLT_TYPE = 'E'
	</select>

	<insert id="insertPmanChkHdAmendFlt" parameterClass="map">
		INSERT INTO EXP_CHKOUT_HD
		(FLT_KEY,FLT_DATE,CR_USER_ID,LM_DATE,LM_USER_ID,CR_DATE,FLT_TYPE)
		values (#FLT_KEY_TO#,to_date(#FLT_DATE_TO#,'DDMONYY'),#USER_ID#,SYSDATE,#USER_ID#,SYSDATE,'E')
	</insert>

	<update id="updatePmanChkDtlAmendFlt" parameterClass="map" >
		update EXP_CHKOUT_DTL  set 
		FLT_KEY = #FLT_KEY_TO#, 
		FLT_DATE = to_date(#FLT_DATE_TO#,'DDMONYY')		
		WHERE FLT_KEY = #FLT_KEY_FROM#        
		AND FLT_DATE = to_date(#FLT_DATE_FROM#,'DDMONYY')  		
		AND ULD_KEY = #ULD_KEY#   			
	</update>	

	<update id="updatePmanPpkAwbInv" parameterClass="map" >
		update AWB_INVENTORY  set 
		FLT_KEY = #FLT_KEY_TO#, 
		FLT_DATE = to_date(#FLT_DATE_TO#,'DDMONYY')		
		WHERE FLT_KEY = #FLT_KEY_FROM#        
		AND FLT_DATE = to_date(#FLT_DATE_FROM#,'DDMONYY')   
		AND ULD_KEY = #ULD_KEY#   	
		AND AWB_NO = #AWB_NO#
		AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')		
	</update>

	<update id="updatePmanPpkUldInv" parameterClass="map" >
		update ULD_INVENTORY  set 
		FLT_KEY = #FLT_KEY_TO#, 
		FLT_DATE = to_date(#FLT_DATE_TO#,'DDMONYY')		
		WHERE FLT_KEY = #FLT_KEY_FROM#        
		AND FLT_DATE = to_date(#FLT_DATE_FROM#,'DDMONYY')   
		AND ULD_KEY = #ULD_KEY#   	
		AND FLT_TYPE = 'E'
	</update>		
	
	<insert id="insertPmanFltMovAmendFlt" parameterClass="map" >
	 insert into FLT_MOV (FLT_TYPE , CARR_CODE , 	FLT_NO , FLT_DATE , 	FLT_KEY , RMK, 	
	 TR_NO ,DOC_LINE_NO ,	TR_TYPE , 	TR_STATUS , 	CR_USER_ID , 	CR_DATE , 
	 LM_USER_ID , 	LM_DATE, 	SEQ_NO , 	EVENT_ID    ) 
	 values('D',#CARR_CODE_TO#,#FLT_NO_TO#,to_date(#FLT_DATE_TO#,'DDMONYY'),#FLT_KEY_TO#,'AMEND_FLIGHT_NO_DATE',
	 #TR_NO#, #DOC_LINE_NO#, #TR_TYPE#, #TR_STATUS#, #USER_ID# , SYSDATE , 	#USER_ID# , SYSDATE, 
  	 FLT_MOV_SEQ.NEXTVAL,'AFLTND')
	</insert>							
						
<!-- Added by Swapneswari For Amend Flight Number and Date:End -->

<!-- ##################### PreManifest By Port   : Start  ###########################################-->

	
	<select id="sqlpremanifestportdetails" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.PremanifestByPortBO">
	  <![CDATA[     
        select p.PPK_TYPE as ppkType, p.DEST as dest,p.orig as orig,p.AWB_NO as awbNo,
          p.awb awb,
      p.ULD_KEY as uldKey, 
      NVl(p.rcl_bulk_pcs,0) as rclPcs, 
      TO_CHAR(NVL(p.rcl_bulk_wt,0),'9999999990.00') as rclWt,      
      (select awb.non_pman_pcs from awb awb where awb.awb_no = p.AWB
      and awb.awb_date = p.awb_date and awb.car_yn='Y') as nonManifestPcs ,
      (select TO_CHAR(awb.non_pman_wt,'9999999990.00')   from awb awb where awb.awb_no = p.AWB
      and awb.awb_date = p.awb_date and awb.car_yn='Y') nonManifestWt,
      to_char(p.AWB_RECD_DATE,'ddMONYY hh24:mi')      as docRecvdDate,
      case when (length(p.awb_no) > 8) then     
      	(select awb.car_yn from awb awb where awb.awb_no = replace(p.AWB_NO,'-')  and awb.awb_date = p.awb_date) 
      		else (select decode(count(1),0,'Y','N') from awb where (awb_no,awb_date) in 
      		(select awb_no,awb_date from exp_uld_awb where uld_key = substr(p.uld_key,0,instr(p.uld_key,'/') - 1) and ppk_type = 'M') and car_yn = 'N')
      end as carYN,      
      ( select CASE WHEN count(s.awb_no) > 0 THEN 'Y' else 'N' END from 
      edi_fbl f join edi_fbl_shp s on s.tr_no = f.tr_no
      where s.awb_no = replace(p.AWB_NO,'-') and
      (f.flt_key <> #fltKey# OR f.flt_date <> to_date(#depDate#,'ddmonyy')) and f.fbl_status ='P' and p.PPK_TYPE in('Bulk','Prepack')) as fblRecvd, 
      to_char(p.awb_date,'DDMONYY')  as awbDate,
      (select dtl.contr_code from exp_rcl_dtl dtl where dtl.ppk_type = 'M' 
      and dtl.uld_key = substr(p.ULD_KEY,1,length(p.ULD_KEY)-3) AND ROWNUM=1) as cntrCode,
      (select  typ.height from mast_uld_type typ where typ.code = substr (p.ULD_KEY, 1, 3)) as ht,     
      case when (length(p.awb_no) > 8) then  
      (Select EXP_AWB_LOCK  From Awb Where awb_no = Replace(p.awb_no,'-')  And awb_date = p.awb_date ) 
        else 'N'  end As awbLockInd ,
         decode(spl_code1, null, '', spl_code1 || ',')
	               || decode(spl_code2, null, '', spl_code2 || ',')
	               || decode(spl_code3, null, '', spl_code3 || ',')
	               || decode(spl_code4, null, '', spl_code4 || ',')
	               || decode(spl_code5, null, '', spl_code5 || ',')
	               || decode(spl_code6, null, '', spl_code6 || ',')
	               || decode(spl_code7, null, '', spl_code7 || ',')
	               || decode(spl_code8, null, '', spl_code8 || ',')
	               || decode(spl_code9, null, '', spl_code9) splCode,
	       PKG_EXP_RPT.get_cc_code_awbType( #fltKey#,#depDate#,p.awb,awb.awb_type)customCode,
	       awb.TSA_PASS_IND as tsaPassInd            
      FROM (Select FUN_GET_PARENT_CARR(t.carr_code) p_carr, t.* from V_EXP_PMAN_PORT t)p
      left join 
      (select sum(locn_pcs) locn_pcs,sum(locn_wt) locn_wt,awb_no,awb_date from
      awb_inventory  group by awb_no, awb_date)awb_inv on awb_inv.awb_no=p.AWB and awb_inv.awb_date=p.awb_date       
      left join awb awb on awb.awb_no=p.awb and awb.awb_date=p.awb_date
       ]]>
      <isNotEmpty property="awbExists">
      	left join (select awb_no,awb_date,uld_key from exp_uld_awb where ppk_type = 'M' and MANIFEST_YN = 'N') uldAWB ON uldAWB.uld_key = substr(p.uld_key,0,instr(p.uld_key,'/') - 1)
      </isNotEmpty>  
      WHERE 
      ((p.CARR_CODE = #carrId# or p.p_carr = #carrGrp#) OR exists (select null from awb_owner o where awb_no=p.AWB
      	and awb_date=p.awb_date and (o.carr_code = #carrId# or FUN_GET_PARENT_CARR(o.carr_code) =  #carrGrp#)))
      and (p.dest = nvl(#destination#, p.dest)
      <isNotEmpty prepend="OR" property="country">    
                        p.dest in(select code from mast_city where ctry_code = #country#)
                  </isNotEmpty>)
                  <isEqual prepend="AND" property="pkgId" compareValue="Prepack/ Mix">    
                        p.PPK_TYPE != 'Bulk'
                  </isEqual>
                  <isEqual prepend="AND" property="pkgId" compareValue="Bulk">      
                        p.PPK_TYPE = 'Bulk'
                  </isEqual>
                  <isEqual prepend="AND" property="pkgId" compareValue="Prepack">   
                        p.PPK_TYPE = 'Prepack'
                  </isEqual>
                  <isNotEmpty prepend="AND" property="awbExists">
                  		(uldAWB.awb_no IN (#awb1#,#awb2#,#awb3#,#awb4#,#awb5#,#awb6#,#awb7#,#awb8#,#awb9#,#awb10#)
                  			OR p.AWB IN (#awb1#,#awb2#,#awb3#,#awb4#,#awb5#,#awb6#,#awb7#,#awb8#,#awb9#,#awb10#))
                  </isNotEmpty> 
                  and    exists (select null  from   flt_opr t1, flt_opr_leg t2    where    t1.tr_no = t2.tr_no 
                  and      t1.flt_key = #fltKey#
            and      t1.sch_date = #depDate#
            and      t1.flt_type = 'D'
            and      t2.off_point = t1.dest)
	  order by awb
      </select>

	
	<select id="sqlpremanifestbyportflightdetails" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.ExportULDBO">

				SELECT A.FLT_KeY as fltKey , 
			    TO_CHAR(A.SCH_DATE,'DDMONYY') as fltDepDate,  
			    A.CARR_CODE as carrCode,
			    A.FLT_NO as fltNo,
				PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, 'D', 'DD')  as etd ,
				to_char(A.EST_DATE,'DDMONYY') as fltEstDate,
			    B.final_manf_ind as finalManf
				FROM FLT_OPR A  
				JOIN flt_opr_events B
				on UPPER(B.FLT_KEY)=UPPER(#fltKey#) AND B.SCH_DATE = TO_DATE(#depDate#, 'DDMONYY') and b.flt_type= a.flt_type
				WHERE UPPER(A.FLT_KEY)=UPPER(#fltKey#) AND A.SCH_DATE = TO_DATE(#depDate#, 'DDMONYY')
				AND A.FLT_TYPE = 'D'

	</select>	
	<select id="sqlpremanifestportfbldetails" parameterClass="cargo.cms.export.bo.PreManifestSearchBO"  resultClass="cargo.cms.export.bo.PremanifestByPortBO">
	 	select s.awb_no, s.pcs as pcs, s.net_wt as netWt,
		f.flt_key as fltKey, to_char(f.flt_date,'DDMONYY') as fltDate, s.unldg_pt as unldgPt
		from edi_fbl f join edi_fbl_shp s on s.tr_no = f.tr_no
  		where s.awb_no = replace(#awbNo#,'-')
  		and f.fbl_status ='P'
  		and f.flt_key != #fltKey#
	</select>	
		<select id="validFlight"  parameterClass="map"  resultClass="java.lang.String">
	<![CDATA[
		SELECT TO_CHAR(COUNT(1)) FROM MAST_FLIGHT WHERE CODE = UPPER(#CODE#) AND UPPER(FLT_NO) = UPPER(#FLT_NO#)  
		]]>
   	</select>
   		<select id="validCountry"  parameterClass="map" resultClass="java.lang.String">	
		SELECT TO_CHAR(count(1)) FROM MAST_COUNTRY WHERE CODE = UPPER(#CODE#)		
   	</select>
   	<select id="getTarmacUldStatus"  parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="java.lang.Integer">	
		SELECT count(1) FROM EXP_PMAN_TARMAC_ULD WHERE ULD_BT_NO=#uldNo# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltEstDate#		
   	</select>
   	<select id="checkTTShipmentsUld"  parameterClass="java.lang.String" resultClass="java.lang.Integer">	
		select count(1) from uld_inventory where transit_type in ('TT','IF','QT') and uld_key=#PARAM#		
   	</select>
   	<select id="validateShipperforUS"  parameterClass="map" resultClass="java.lang.Integer">	
		select count(1) from cust_company where 
			code_desc in (select shipper_name from awb where awb_no=#awbNo# and awb_date=#awbDate# and shipper_name is not null)
			and shpr_yn='Y'
   	</select>
	<!-- ##################### PreManifest By Port   : End  ###########################################-->

	
	
<!-- Added by Surendra Gollapalli on 20th May 2011 for Maintain Accessory START -->
<select id="getaccessorylist" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.AccessoryBO">
		select 
			ULD_NO as uldNo, 
			ULD_CARR as uldCarr, 
			contr_code as contourCode,
			ACTIVITY as activity, 
			QTY as qty, 
			FLT_KEY as fltKey, 
			to_char(FLT_DATE,'DDMONYY')  as fltDate, 
			ULD_KEY as uldKey, 
			EQUIP_TYPE as equipType,
			FLT_NO as fltNo,
			FLT_CARR as fltCarr,
			ULD_TYPE as uldType,
			FLT_TYPE as fltType,
			TO_CHAR(LM_DATE,'DDMONYY HH24:MI:SS') AS lastModifiedDate
			
		from EXP_ULD_ACC 
		where FLT_KEY= #fltNo#        
        AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
        and uld_key = nvl(#uldNo#, uld_key)
        
<!--		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="uldNo">
				ULD_KEY = #uldNo#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="fltCarr">
				FLT_CARR = #fltCarr#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="fltNo">
				ULD_KEY IN    
   					(select ULD_BT_NO ULD_KEY from EXP_PMANIFEST_ULD where FLT_KEY= #fltNo#        
	  				AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
	  				)	  				
			</isNotEmpty>
		
		</dynamic>
		-->
		
	</select>
	
	<select id="getaccessorylistheader" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.ExpFlightBO">
	SELECT 
		CARR_CODE as fltpfx,
		FLT_NO as fltsfx, 
		EST_TIME as fltEstTime,
		a.rmk as remarks, 
		flt_no as fltNo, 
		PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, 'D') as etd ,	
		decode(est_time,null,null,substr(lpad(est_time,4,'0'),1,2)||':'||substr(lpad(est_time,4,'0'),3)) as etdTime,		
		to_char(SCH_DATE,'DDMONYY') as fltDate, 
		TR_NO as trNo,
		FLT_KEY as fltKey,
		FLT_TYPE as fltType
	FROM FLT_OPR A
		
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="fltNo">
				A.FLT_KEY= #fltNo# 		
				AND A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
				AND A.FLT_TYPE = 'D'
			</isNotEmpty>
		</dynamic> 
	</select>
	
	<delete id="deleteaccessory" parameterClass="cargo.cms.export.bo.AccessoryBO">
		 DELETE FROM EXP_ULD_ACC 
		 WHERE FLT_KEY = #fltKey# AND FLT_DATE = #fltDate# AND ULD_KEY = #uldKey#
		 AND ACTIVITY = #activity# AND EQUIP_TYPE = #equipType#
	</delete>
	
	<select id="maitainaccvalidateuldkey" parameterClass="map" resultClass="java.lang.String">
		SELECT
			CHK_FLG
		FROM
			EXP_CHKOUT_DTL
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_KEY = #uldKey#
	</select>
	<select id="getCountrCode" parameterClass="java.lang.String" resultClass="java.lang.String">
		select contr_code as coutrCode from uld_inventory  where uld_type = #uldKey# 
	</select>
	
	
	<select id="chkAccessoryExists" parameterClass="cargo.cms.export.bo.AccessoryBO" resultClass="java.lang.String">
		SELECT COUNT(1) FROM EXP_ULD_ACC WHERE FLT_KEY  = #fltKey# AND FLT_DATE = #fltDate# AND ULD_KEY    = #uldKey# AND ACTIVITY   = #activity# AND EQUIP_TYPE = #equipType# 
	</select>
	
	<update id="updateTheAccQuantity"  parameterClass="cargo.cms.export.bo.AccessoryBO">
		UPDATE EXP_ULD_ACC SET QTY  = #qty# ,   LM_DATE  = sysdate WHERE FLT_KEY  = #fltKey# AND FLT_DATE   = #fltDate# AND ULD_KEY    = #uldKey#
  				AND ACTIVITY   = #activity# AND EQUIP_TYPE = #equipType#
	</update>
	
	<insert id="addaccessory" parameterClass="cargo.cms.export.bo.AccessoryBO">
		INSERT INTO EXP_ULD_ACC (
			FLT_KEY,
			FLT_DATE,
			ULD_KEY,
			ACTIVITY,
			EQUIP_TYPE,
			CR_DATE,
			CR_USER_ID,
			FLT_CARR,
			FLT_NO,
			FLT_TYPE,
			LM_DATE,
			LM_USER_ID,
			QTY,
			CONTR_CODE,
			ULD_TYPE,
			ULD_NO,
			ULD_CARR)
		VALUES (
			#fltKey#,
			#fltDate#,
			#uldKey#,
			#activity#,
			#equipType#,
			sysdate,
			#crUserId#,
			#fltCarr#,
			#fltNo#,     
			'E',
			sysdate,
			#crUserId#,
			#qty#,
			#contourCode#,
			#uldType#,
			#uldNo#,
			#uldCarr#)
	</insert>
	<update id="updateaccessorylist"  parameterClass="cargo.cms.export.bo.AccessoryBO">
		UPDATE EXP_ULD_ACC
			SET
				QTY = #qty#,
				LM_DATE = sysdate
			WHERE
				FLT_KEY = #fltKey# AND
				FLT_DATE = #fltDate# AND
				ULD_KEY = #uldKey# AND
				ACTIVITY = #activity# AND
				EQUIP_TYPE = #equipType# AND TO_CHAR(LM_DATE,'DDMONYY HH24:MI:SS') = #lastModifiedDate#
	</update>
	
	<update id="updateaccessoryheader"  parameterClass="map">
		UPDATE FLT_OPR
			SET
				RMK = #remarks#,
				LM_USER_ID = #modifiedUser#,
				LM_DATE = sysdate
			WHERE
				TR_NO = #trNo#
	</update>
	
	<select id="addaccessoryULDNo" parameterClass="cargo.cms.export.bo.AccessoryBO" resultClass="cargo.cms.export.bo.AccessoryBO">
	 select uld_bt_no as uldNo from EXP_PMANIFEST_ULD where flt_key=#fltKey# AND flt_date= #fltDate#
	</select>
	
	 <select id="checkForULDPremanifested"  parameterClass="cargo.cms.export.bo.AccessoryBO" resultClass="java.lang.Integer">
   <![CDATA[
    select count(1) from EXP_PMANIFEST_ULD where ULD_BT_NO = #uldNo# and FLT_KEY= #fltKey# AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
   ]]>
 </select>
 
  <select id="checkForvalidFlight"  parameterClass="cargo.cms.export.bo.AccessoryBO" resultClass="java.lang.Integer">
   <![CDATA[
    select COUNT(1) from flt_opr a where a.flt_key=#fltKey# AND A.SCH_DATE=TO_DATE(#fltDate#, 'DDMONYY') 
   ]]>
 </select>
  <select id="checkForvalidFlightHasDept"  parameterClass="cargo.cms.export.bo.AccessoryBO" resultClass="java.lang.Integer">
   <![CDATA[
    select COUNT(1) from flt_opr a where a.flt_type='D' and a.flt_key=#fltKey# AND A.SCH_DATE=TO_DATE(#fltDate#, 'DDMONYY') 
   ]]>
 </select>
  <select id="checkForvalidFlightHasClosed"  parameterClass="cargo.cms.export.bo.AccessoryBO" resultClass="java.lang.Integer">
   <![CDATA[   
    select COUNT(1) from flt_opr_events a where a.flt_cls_yn='Y' and a.flt_key=#fltKey# AND A.SCH_DATE=TO_DATE(#fltDate#, 'DDMONYY')
   ]]>
 </select>
  <select id="checkForFlightAmendTime"  parameterClass="java.lang.String" resultClass="java.lang.String">
   <![CDATA[   
      select (case
         when ( select ((to_date(to_char(sysdate,'DD-MON-YY HH24MI'),'DD-mon-yy hh24mi') - to_date(#fltDate#,'dd-mon-yyhh24mi'))*24*60) b from dual) < (SELECT RULE_VALUE FROM CMSRULES where RULE_CODE = 'ACCS_FLT_AMEND_TIME')
         then 'Y'
         ELSE 
          'N'      
         end) AS dateInd         
         FROM DUAL
   ]]>
 </select>
 
  <select id="getFltDateAndFltClosingTime"  parameterClass="cargo.cms.export.bo.AccessoryBO" resultClass="cargo.cms.export.bo.AccessoryBO">
   <![CDATA[   
    select to_char( a.sch_date,'DD-MON-YY') as fltDate,a.flt_cls_time as clsTime from flt_opr_events a where a.flt_key=#fltKey# AND A.SCH_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE = 'D'   
   ]]>
 </select>
 <select id="totalAccessoryUsedList" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.AccessoryBO">
   <![CDATA[   
    SELECT EQUIP_TYPE AS equipType,SUM(QTY) AS qty FROM EXP_ULD_ACC
        where FLT_KEY= #fltNo# 	        
        AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY') and uld_key = nvl(#uldNo#, uld_key)
		GROUP BY EQUIP_TYPE order by EQUIP_TYPE
   ]]>
 </select>
 
  <select id="checkForCarrieCode"  parameterClass="java.lang.String" resultClass="java.lang.Integer">
   <![CDATA[
     select count(1) from MAST_CARRIER where CODE = #dest# and HANDLED_BY_TERMINAL = 'CPCT'
   ]]>
 </select>
<!-- Added by Surendra Gollapalli on 20th May 2011 for Maintain Accessory end -->
	
	

	<!-- ######################################################################################################### -->
	<!-- Offload Confirm Offloaded Cargo/Delete Offloaded Cargo/List Print Offloaded Cargo Related Queries Start -->
		<select id="exportoffloadedcargolist" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.OffLoadedCargoBO" >
			select rownum recordNo,'By AWB' preOfLdType ,'566-11111111' awbNo,'566-11111111' awbNo1,'AKE888888SQ' uldKey,'L2' cntrCode,'MIX' pkgType,10 ofLdPcs,
			10 ofLdWt,'NO' ofLdULD FROM DUAL
		</select>

<!-- ##################### List/Print Export Tally List    : Start      ##################################################-->
	<select id="exporttallyflightdetails" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO" 
	resultClass="cargo.cms.export.bo.CargoManifestDetailsBO" >
	SELECT
				FLT_KEY as flightNo, 
				(select (ltrim(SUBSTR(TRIM(TO_CHAR(SCH_TIME,'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(SCH_TIME,'0000')),3,2),':')) std from flt_opr
                where flt_key=#flightKey# and SCH_date=#flightDate# and flt_type='D' and rownum=1) std,           
                PKG_COMMON.get_flt_eta(#flightKey#,#flightDate#, 'D') etd,
				to_char(SCH_DATE,'ddMONYY') as flightDate
	FROM 
				FLT_OPR A  
	WHERE 
				A.FLT_KEY=#flightKey# AND 
				A.SCH_DATE = TO_DATE(#flightDate#, 'DDMONYY') AND 
				A.FLT_TYPE = 'D'				
	</select>
	<select id="fetchPortofCallDetails" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO" 
	resultClass="java.lang.String" >
	  select  STRAGG(STRINGDELIM(t2.off_point,'/'))
                 from     flt_opr t1, flt_opr_leg t2
                 where    t1.tr_no = t2.tr_no
                 and      t1.flt_key = #flightKey# 	
                 and      t1.sch_date = TO_DATE(#flightDate#,'DDMONYY')
                 and      t1.flt_type = 'D'
                 order by t2.leg_ord
	</select>
	
	<select id="FETCH_AWB_DETAILS" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO" 
	resultClass="cargo.cms.export.bo.CargoManifestDetailsBO" >
	  SELECT 
              SUM(AWB_PCS) as totAWBPcs, 
              TO_CHAR(NVL(SUM(AWB_WT),0),'9999990D9') as totAWBWt,
              SUM(PMAN_PCS) as totPmanPcs,
              TO_CHAR(NVL(SUM(PMAN_WT),0),'9999990D9') as totPmanWt,
              SUM(BUP_PCS) as totBupPcs,
              TO_CHAR(NVL(SUM(BUP_WT),0),'9999990D9') as totBupWt
          FROM
              GT_EXP_PMAN_TALLY_SHEET
	</select>
	<select id="FETCH_AWB_DETAILS1" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO" 
   resultClass="cargo.cms.export.bo.CargoManifestDetailsBO" >
   SELECT 
              SUM(AWB_PCS) as totAWBPcs, 
              TO_CHAR(NVL(SUM(AWB_WT),0),'9999990D9') as totAWBWt,
              SUM(PMAN_PCS) as totPmanPcs,
              TO_CHAR(NVL(SUM(PMAN_WT),0),'9999990D9') as totPmanWt,
              SUM(BUP_PCS) as totBupPcs,
              TO_CHAR(NVL(SUM(BUP_WT),0),'9999990D9') as totBupWt
          FROM
              GT_EXP_PMAN_TALLY_SHEET
              WHERE ULD_KEY IS NULL
 </select>
	
	<parameterMap id="tallyListMap" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLIGHTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="DEPDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="UNLDGPT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="BUILDUPONLY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>

	<procedure id="exporttallylistsearchprocedure" parameterMap="tallyListMap" >
		{? = call PKG_EXP_RPT.pman_tally_sheet(?,?,?,?)  }
	</procedure>

	<select id="exporttallylist" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO" 
	resultClass="cargo.cms.export.bo.AWBBO" >
	SELECT 
		DECODE(AWB_NO,NULL,'',CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4))) awbNo1,
		AWB_NO awbNo,
		to_char(AWB_DATE,'DDMONYY') awbDate,
        ULD_KEY uldKey,
        UNLOAD_POINT unldgpt, 
        ORIG orig, 
		DEST dest, 
        CONTENT content,
        SPL_CODE splCode, 
		CC_CODE cc, 
        PMAN_PCS manifestPcs,
        UNASSIGNED_PCS nonManifestPcs, 
		AWB_PCS awbPcs, 
        substr(LOCN_INFO,2,length(LOCN_INFO)) location, 
        BLDUP_INSTR bldUpInsn,
        PMAN_PCS pmanPcs,
        PMAN_WT pmanWt,
        BUP_PCS bupPcs,
        BUP_WT bupWt,
        AWB_WT awbWt,
        HOLDING holding,
        'NA' secChk,
        PRINT_IND printInd,
        nvl(constraint,'N') constraint
	FROM 
		GT_EXP_PMAN_TALLY_SHEET  t
  		left join mast_constraint_code mcc on t.cc_code=mcc.code
		order by AWB_NO,AWB_DATE
	</select>
	<select id="exporttallylistwithoutuld" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO" 
	resultClass="cargo.cms.export.bo.AWBBO" >
	SELECT 
		DECODE(AWB_NO,NULL,'',CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4))) awbNo1,
		AWB_NO awbNo,
		to_char(AWB_DATE,'DDMONYY') awbDate,
        ULD_KEY uldKey,
        UNLOAD_POINT unldgpt, 
		ORIG orig, 
		DEST dest, 
        CONTENT content,
        SPL_CODE splCode, 
		CC_CODE cc, 
        PMAN_PCS manifestPcs,
        UNASSIGNED_PCS nonManifestPcs, 
		AWB_PCS awbPcs, 
        substr(LOCN_INFO,2,length(LOCN_INFO)) location, 
        BLDUP_INSTR bldUpInsn,
        PMAN_PCS pmanPcs,
        PMAN_WT pmanWt,
        BUP_PCS bupPcs,
        BUP_WT bupWt,
        AWB_WT awbWt,
        HOLDING holding,
        SEC_CHK secChk,
        PRINT_IND printInd,
        nvl(constraint,'N') constraint
	FROM 
		GT_EXP_PMAN_TALLY_SHEET  t
   		left join mast_constraint_code mcc on t.cc_code=mcc.code
		WHERE ULD_KEY IS NULL
	</select>
	
	<select id="exp_tally_nullrefwt_record" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.Integer">
	<![CDATA[ 
	SELECT COUNT(1) as refWt FROM AWB_INVENTORY A
	LEFT JOIN ULD_INVENTORY U ON U.ULD_KEY = A.ULD_KEY AND A.ULD_KEY IS NOT NULL
	LEFT JOIN LSP_INVENTORY L ON L.LSP_NO = A.LSP_NO AND A.LSP_NO IS NOT NULL
	WHERE A.AWB_NO=#awbNo# AND A.AWB_DATE=#awbDate# 
	AND ((a.uld_key is not null and U.REF_NET_WT IS NULL)  OR 
        (a.lsp_no is not null and L.REF_NET_WT IS NULL) or
        (a.uld_key is null and a.lsp_no is null))
	]]>
	</select>
	<select id="exp_tally_totalrefwt_record" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.String">
	SELECT TRIM(TO_CHAR(SUM(NVL(NVL(U.REF_NET_WT,L.REF_NET_WT),0)), '9999999990D9')) as refWt FROM AWB_INVENTORY A
	LEFT JOIN ULD_INVENTORY U ON U.ULD_KEY = A.ULD_KEY AND A.ULD_KEY IS NOT NULL
	LEFT JOIN LSP_INVENTORY L ON L.LSP_NO = A.LSP_NO AND A.LSP_NO IS NOT NULL
	WHERE A.AWB_NO=#awbNo# AND A.AWB_DATE=#awbDate#
  and ((a.uld_key is not null and u.ref_net_wt is not null)    
  or (a.lsp_no is not null and l.ref_net_wt is not null))
	</select>
	<select id="exp_tally_totallocnwt_record" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.String">
	SELECT TRIM(TO_CHAR(SUM(NVL(A.LOCN_WT,0)), '9999999990D9')) as refWt FROM AWB_INVENTORY A	WHERE A.AWB_NO=#awbNo# AND A.AWB_DATE=#awbDate#
	</select>
	
	<select id="exporttallylistScr" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"  resultClass="cargo.cms.export.bo.AWBBO" >
			SELECT 
				case when PMAN_PCS > nvl(BUP_PCS,0) then 1 else 2 end recordsOrder,
				TALLY_ORDER tallyOrder,
				FBL fbl,
  				BLDUP_INSTR pmfInstr,
  				TALLY_PCS pcsForTally,
  				TALLY_PCS oldPcsForTally,
				DECODE(AWB_NO,NULL,'',CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4))) awbNo1,
				AWB_NO awbNo,
				to_char(AWB_DATE,'DDMONYY') awbDate,
				UPLIFT_PRIORITY upliftPriority,
			    UNLOAD_POINT unldgpt, 
			    ORIG orig, 
				DEST dest, 
			    CONTENT content,
			    SPL_CODE splCode, 
				CC_CODE cc, 
				
			    (SELECT DISTINCT cc_code
				  FROM V_CST_VSL_CC_CODE_AWB
				  WHERE flt_key                          = t.flt_key
				  AND flt_date                           = t.flt_date
				  AND awb_no                             = t.AWB_NO
				  AND NVL(hawb_no, '000000000000000000') = '000000000000000000' and rownum = 1
				  ) stfsCode,
			    PMAN_PCS manifestPcs,
			    UNASSIGNED_PCS nonManifestPcs, 
				AWB_PCS awbPcs, 
			    AWB_WT awbWt,
			    BLDUP_INSTR bldUpInsn,
			    PMAN_PCS pmanPcs,
			    PMAN_WT pmanWt,
			    NVL(BUP_PCS,'0') bupPcs,
			    NVL(BUP_WT,'0.00') bupWt,
			    'NA' secChk,
			    print_ind printInd,
			    nvl(constraint,'N') constraint,
			    location,
			    locnPc,
			    locnWt,
			    uldKey,
			    contrcode,
			    uldType,
			    flt_key fltKey,
			    to_char(flt_date,'DDMONYY') fltDate,
			    (SELECT CASE WHEN (SELECT count(1) FROM XT_IMP_CAR_SHP_DTL xt where xt.awb_no = t.AWB_NO and xt.AWB_DATE = t.AWB_DATE and xt.EXP_FLT_KEY = t.flt_key and xt.EXP_FLT_DATE = t.flt_date ) > 0 then 'Y' else 'N' end  from dual) as xtShpFlg,
			    ( SELECT DECODE(COUNT(0), 0, 'N','Y')
						FROM exp_pmanifest_uld_awb_shc a
						JOIN exp_pmanifest_uld_awb b
						ON a.tr_no       = b.tr_no
						WHERE b.awb_no   = t.AWB_NO
						AND b.AWB_DATE   = t.AWB_DATE
						AND b.flt_key	 = t.flt_key
						AND b.flt_date   = t.flt_date
						AND NVL(a.BULK_ULD_YN,'N')  = 'Y' )  as shcSplitYN 
				FROM (
				SELECT t1.awb_no AWB_NO,
			        t1.awb_date AWB_DATE,
			        FUN_GET_AWB_UPLIFT_PRIORITY(t3.AWB_NO,t3.AWB_DATE) UPLIFT_PRIORITY,
			        t1.flt_key,
			        t1.flt_date,
			        t1.unldg_pt UNLOAD_POINT,
			        t3.dest DEST,
			        t3.orig ORIG,
			        t3.content CONTENT,
			        pkg_exp_rpt.awb_spl_codes (t1.awb_no, t1.awb_date, ',') SPL_CODE,
			        pkg_exp_rpt.get_cc_code_awbType(t1.FLT_KEY,t1.FLT_DATE,t1.awb_no,t3.AWB_TYPE)  CC_CODE, 
			        pkg_exp_rpt.fun_get_sc(t1.awb_no, t1.awb_date, null) AS sec_chk,
			        t1.bulk_pcs man_pcs,
			        t1.UNASSIGNED_BULK_PCS UNASSIGNED_PCS,
			        t3.pcs AWB_PCS,
			        t3.wt AWB_WT,
			        t1.bldup_instr BLDUP_INSTR,
			        t1.PMAN_PCS PMAN_PCS,
			        t1.PMAN_WT PMAN_WT,
			        t1.ASSIGNED_PCS BUP_PCS,
			        t1.ASSIGNED_WT BUP_WT,
			        t1.print_ind,
			        inv.loc_code as location, inv.locn_pcs as locnPc,inv.locn_wt as locnWt, 
			        nvl(inv.uld_key,inv.lsp_no) as uldKey, 
				     (select contr_code from ULD_INVENTORY where ULD_KEY = inv.uld_key) as contrcode,
					    (case when (SELECT COUNT(1) FROM ULD_INVENTORY WHERE NVL(TRANSIT_FLG,'N')='Y' AND HANDLING_MODE IN('PPK','NBK') AND ULD_KEY = inv.uld_key)>= 1 then '*'
				         else case when (SELECT COUNT(1) FROM ULD_INVENTORY WHERE (PPK_IND='Y' or MIX_PPK_IND = 'Y') AND ULD_KEY = inv.uld_key )>= 1 then '*' 
			         else ''
			         end
			         end) as uldType,
         			t1.TALLY_PCS TALLY_PCS,
              (CASE WHEN t1.TALLY_PCS IS NOT NULL THEN 1 ELSE 2 END) TALLY_ORDER,
         			(SELECT CASE WHEN COUNT(ef.TR_NO) > 0 THEN 'Y' ELSE 'N' END fbl FROM EDI_FBL ef, EDI_FBL_SHP efs
  					    WHERE ef.TR_NO = efs.TR_NO AND efs.AWB_NO = t1.AWB_NO AND efs.AWB_DATE = t1.AWB_DATE AND ef.FBL_STATUS = 'P' AND ef.FLT_KEY = T1.FLT_KEY AND ef.FLT_DATE=T1.FLT_DATE) FBL
			      FROM (  select flt_key, flt_date, awb_no, awb_date, pman_pcs, pman_wt, 
			              (ppk_pcs + mix_pcs + assigned_bulk_pcs) assigned_pcs, 
			              (ppk_wt + mix_wt + assigned_bulk_wt) assigned_wt,
			              unldg_pt, BLDUP_INSTR, UNASSIGNED_BULK_PCS, BULK_PCS, print_ind,TALLY_PCS
			              from exp_pmanifest_awb) t1 
			      left join exp_car t2 on t2.awb_no = t1.awb_no  AND t2.awb_date = t1.awb_date
			      left join AWB t3 on t3.awb_no = t1.awb_no AND t3.awb_date = t1.awb_date
			      left join awb_inventory inv on inv.awb_no = t1.awb_no  AND inv.awb_date = t1.awb_date 
			      WHERE t1.flt_key   = #flightKey#
			      AND t1.flt_date    = #flightDate#
			      AND t1.unldg_pt    = NVL(#unLdgPt#, t1.unldg_pt)
			      <isNotEmpty property="cargoType">
					<isEqual compareValue="CARGO" property="cargoType">
						AND t3.CATALOG != 'TM' AND 
            		(SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = t3.CARR_CODE
             		AND (SPLCODE.SPL_CODE = t3.SPL_CODE1 OR SPLCODE.SPL_CODE = t3.SPL_CODE2 OR SPLCODE.SPL_CODE = t3.SPL_CODE3 OR SPLCODE.SPL_CODE = t3.SPL_CODE4 OR SPLCODE.SPL_CODE = t3.SPL_CODE5 
             		OR SPLCODE.SPL_CODE = t3.SPL_CODE6 OR SPLCODE.SPL_CODE = t3.SPL_CODE7 OR SPLCODE.SPL_CODE = t3.SPL_CODE8 OR SPLCODE.SPL_CODE = t3.SPL_CODE9))=0
					</isEqual>
					<isEqual compareValue="MAIL" property="cargoType">
						AND t3.CATALOG = 'TM'
					</isEqual>
					<isEqual compareValue="COURIER" property="cargoType">
					<![CDATA[
					AND t3.CATALOG != 'TM' AND 
            		(SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = t3.CARR_CODE
             		AND (SPLCODE.SPL_CODE = t3.SPL_CODE1 OR SPLCODE.SPL_CODE = t3.SPL_CODE2 OR SPLCODE.SPL_CODE = t3.SPL_CODE3 OR SPLCODE.SPL_CODE = t3.SPL_CODE4 OR SPLCODE.SPL_CODE = t3.SPL_CODE5 
             		OR SPLCODE.SPL_CODE = t3.SPL_CODE6 OR SPLCODE.SPL_CODE = t3.SPL_CODE7 OR SPLCODE.SPL_CODE = t3.SPL_CODE8 OR SPLCODE.SPL_CODE = t3.SPL_CODE9))>0
             		]]>
             		</isEqual>
				 </isNotEmpty>
				 ) t 
			      left join mast_constraint_code mcc on t.cc_code=mcc.code
			      where 1 =1 
			     <isEqual property="ntYtBldUpOnly" compareValue="Y">
			     	<![CDATA[
				 	  and t.UNASSIGNED_PCS > 0 
			       	]]>
			     </isEqual>
			     <isEqual property="xtShpFlg" compareValue="Y">
			     	<![CDATA[
				 	 AND  EXISTS (SELECT NULL FROM XT_IMP_CAR_SHP_DTL xt where xt.awb_no = t.AWB_NO and xt.AWB_DATE = t.AWB_DATE and xt.EXP_FLT_KEY = t.flt_key and xt.EXP_FLT_DATE = t.flt_date )
			       	]]>
			     </isEqual>
					order by tallyOrder,printInd,recordsOrder,AWB_NO,AWB_DATE,uldKey
	</select>
	
	<select id="getPrintInd_exp_tallySheet" parameterClass="map" resultClass="java.lang.String" >
		select PRINT_IND as v_print_ind
            from (Select PRINT_IND from exp_tally_sheet ets where ets.awb_no=#AWB_NO# and ets.awb_date=#AWB_DATE# order by cr_date desc)
            where rownum=1 
	</select>
	<select id="exporttallynotifylist" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO" 
	resultClass="cargo.cms.export.bo.AWBBO" >
	SELECT 
		A.TRANS_TYPE awbType,
        A.REF_NO refNo,
        A.AWB_NO awbNo,
		DECODE(A.AWB_NO,NULL,'',CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4))) awbNo1,
        A.ULD_KEY uldKey, 
        A.UNLDG_PT unldgpt, 
	    B.DEST dest,
        NVL(A.CONTENT,B.CONTENT) content,
        A.CR_USER_ID staffId,
        to_char(A.CR_DATE,'DDMONYY hh24:mi') transDt 
		FROM   
          EXP_TALLY_SHEET A
          left join awb B on B.awb_no=A.awb_no and b.awb_date = a.awb_date
          WHERE
	      A.FLT_KEY = #flightKey# AND
          A.FLT_DATE = #flightDate# AND
          A.REF_NO = NVL(#refNo#, REF_NO)
		<isNotEmpty property="unLdgPt">
			AND	UNLDG_PT = #unLdgPt#
		</isNotEmpty>
		ORDER BY TRANS_TYPE, REF_NO DESC 
	</select>
	<select id="validateFlightClosed" parameterClass="map" resultClass="java.lang.Integer">
			select COUNT(1)
       			from flt_opr_events 
       			where flt_key=#flightKey#
       			and sch_date=TO_DATE(#flightDate#,'DDMONYY')  
       			and flt_type   ='D'
            	and FLT_CLS_YN ='Y'
	</select>
	<select id="getExportTallyLocList" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="cargo.cms.export.bo.AWBBO" >
		SELECT 
			ai.loc_code as location, ai.locn_pcs as locnPc,ai.locn_wt as locnWt, 
		    nvl(ai.uld_key,ai.lsp_no) as uldKey, 
		    decode(ai.uld_key,null,null,(select CONTR_CODE from ULD_TYPE_CONTR where UPPER(ULD_TYPE) = UPPER(Substr(ai.uld_key, 1, 3)) and rownum=1)) as contrcode,
		    (case when (SELECT COUNT(1) FROM ULD_INVENTORY WHERE NVL(TRANSIT_FLG,'N')='Y' AND HANDLING_MODE IN('PPK','NBK') AND ULD_KEY = ai.uld_key)>= 1 then '*'
	         else case when (SELECT COUNT(1) FROM ULD_INVENTORY WHERE (PPK_IND='Y' or MIX_PPK_IND = 'Y') AND ULD_KEY = ai.uld_key )>= 1 then '*' 
	         else ''
	         end
	         end) as uldType
			FROM 
			AWB_INVENTORY ai
		    join AWB a on a.awb_no=ai.awb_no and a.awb_date=ai.awb_date
		  where ai.AWB_NO =#awbNo# and ai.AWB_DATE=#awbDate#
	</select>

<!-- ##################### List/Print Export Tally List    : End      ##################################################-->


		<select id="exportoffloadedcargolistByAWB" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.OffLoadedCargoBO" >
			SELECT ULD_BT_NO uldKey, CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) awbNo1,AWB_DATE,'BULK' pkgType,
			(PREOFF_BULK_PCS+PREOFF_PPK_PCS+PREOFF_MIX_PCS) assgnPc,(PREOFF_BULK_WT+PREOFF_PPK_WT+PREOFF_MIX_WT) assgnWt,
			(OFF_BULK_PCS+OFF_PPK_PCS+OFF_MIX_PCS) ofLdPcs,(OFF_BULK_WT+OFF_PPK_WT+OFF_MIX_WT)ofLdWt,'Y' as ofLdULD
			from 
			EXP_OFFLOAD_AWB
			WHERE  AWB_NO = #awbNo#
			AND FLT_KEY= #fltNo#
			AND FLT_DATE= #fltDate#
		</select>

		<select id="exportoffloadedcargolistByAWBStorage" parameterClass="cargo.cms.export.bo.OffLoadedCargoBO" resultClass="cargo.cms.export.bo.OffLoadedCargoBO" >
 			SELECT  AWB_NO, AWB_DATE,  WH_DEST, LOC_CODE, LOCN_PCS, LOCN_WT, LSP_NO FROM AWB_INVENTORY WHERE FLT_KEY=#flightNo# AND 
 			FLT_DATE=#flightDate# AND AWB_NO=#awbNo# 
 		</select>

		<select id="offload_getheader" parameterClass="map" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
			SELECT 
				FLT_KEY as fltKey,
				to_char(SCH_DATE,'DDMONYY') as fltDate,
				to_char(EST_DATE,'DDMONYY') as etd,
				SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),0,2)|| ':'||  SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),3,4)  as etdTime,
				RMK as remark			
			FROM FLT_OPR
			WHERE
			FLT_KEY= #fltKey# 		
			AND SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
			AND FLT_TYPE = 'D'
		</select>
		<select id="getPkgTypeInExpPmanUld"  parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="java.lang.String">
		select DECODE(PPK_TYPE, 'M', 'Mix', 'P', 'PrePack', 'B', 'Bulk') as pkgType from exp_pmanifest_uld where uld_bt_no=#uldBtNo# and flt_key=#fltKey# and flt_date=#fltDate#
		</select>
		<select id="fetchAWBOrigDest"  parameterClass="map" resultClass="java.util.HashMap">
		select orig AS ORIG,dest AS DEST from awb where awb_no=#awbNo# and awb_date=#awbDate#
		</select>
		<select id="fetchOffldPmanRmk"  parameterClass="map" resultClass="java.lang.String">
		select rmk FROM edi_fbl_shp WHERE	awb_no = #awbNo#
                                          AND tr_no IN (SELECT tr_no FROM edi_fbl WHERE flt_key = #fltKey# AND	flt_date = #fltDate# AND FBL_STATUS='P')
		</select>
		<select id="checkOffloadCompleteStatus" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="java.lang.Integer">
		select count(1) from dual where 
		                          (select count(1) from exp_offload_uld A where A.flt_key=#fltKey# and A.flt_date=#fltDate# and A.CHECKED_IN_FLAG='Y' AND NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_ULD WHERE NEW_CHECKIN_ULD = 'Y' AND ULD_BT_NO=A.ULD_BT_NO)) = 
		                          (select count(1) from exp_offload_uld where flt_key=#fltKey# and flt_date=#fltDate# and confirmed_yn='Y')
		</select>
		<select id="getConfmFlightCarr" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="java.lang.String">
		select carr_code from flt_opr where flt_key=#fltKey# and SCH_date=#fltDate# AND ROWNUM=1
		</select>
       <select id="checkAllUldsAreOffloadorNot" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="java.lang.Integer">
	   select COUNT(1) from exp_pmanifest_uld where flt_key=#fltKey# and flt_date=#fltDate# and not exists (select NULL from cmsrules where RULE_CODE='Dummy_H_Container')
	   </select>
	<select id="fetchOffloadULDLocCode"  parameterClass="java.lang.String"  resultClass="java.lang.String">
	select loc_code from uld_inventory where uld_key=#PARAM#
    </select>
    <select id="fetchGrossWtInUldInv"  parameterClass="java.lang.String"  resultClass="java.lang.String">
    select gross_weight from uld_inventory where uld_key=#PARAM#
    </select>
    <select id="fetchOffloadLSPLocCode"  parameterClass="java.lang.String"  resultClass="java.lang.String">
	select loc_code from lsp_inventory where lsp_no=#PARAM#
    </select>
    <select id="fetchConfirmOffloadPpktype"  parameterClass="java.lang.String"  resultClass="java.lang.String">
	SELECT CASE WHEN PPK_IND = 'N' AND MIX_PPK_IND = 'N' THEN 'B'
                                  ELSE CASE WHEN PPK_IND = 'Y' AND MIX_PPK_IND = 'N' THEN 'P' 
                                  ELSE CASE WHEN PPK_IND = 'N' AND MIX_PPK_IND = 'Y' THEN 'M'
                                  ELSE NULL END END END FROM ULD_INVENTORY WHERE ULD_KEY=#PARAM#
    </select>
    <select id="fetchHHTBulkPcsInExpPman" parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" resultClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO">
	select 
            bulk_pcs AS bulkPcs,
            bulk_wt AS bulkWt
            from exp_pmanifest_awb where awb_no=#awbNo# and awb_date=#awbDate# and flt_key=#fltKey# and flt_date=#fltDate# and rownum=1
	</select>
	<update id="updateHHTBulkDetailsExppman" parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" >
		UPDATE EXP_PMANIFEST_AWB 
			SET BULK_PCS = #bulkPcs#,
				BULK_WT= #bulkWt#,
				pman_pcs = #pmanPcs#,
				pman_wt = #pmanWt#,
				UNASSIGNED_BULK_PCS = #unassPcs#,
				UNASSIGNED_BULK_WT	= #unassWt#		
			WHERE
			  AWB_NO =#awbNo#
			  AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			  AND FLT_KEY = #fltKey#
			  AND FLT_DATE = #fltDate#
			  AND UNLDG_PT = #unldgpt#
	</update>
	<update id="updateHHTManifestFlgInExpUld" parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" >
    update exp_uld_awb set manifest_yn='N' where uld_key=#oldUldKey# and rcl_no=(SELECT DECODE((SELECT RCL_NO FROM EXP_RCL_HD WHERE ULD_KEY=#oldUldKey#),'',
DECODE((SELECT RCL_NO FROM EXP_RCL_DTL WHERE ULD_KEY=#oldUldKey#),'','',(SELECT RCL_NO FROM EXP_RCL_DTL WHERE ULD_KEY=#oldUldKey#)),
(SELECT RCL_NO FROM EXP_RCL_HD WHERE ULD_KEY=#oldUldKey#)) as  FROM DUAL)
    </update>
    <update id="updateEndorsementDetails" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" >
    update exp_offload_uld set endorsed_by=#username#,endorsed_date=sysdate where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldBtNo#
    </update>
    <update id="amendHHTNonpmanAwbdetails" parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" >
	update awb set pman_pcs = pman_bulk_pcs+pman_ppk_pcs+pman_mix_pcs,
                               pman_wt = pman_bulk_wt+pman_ppk_wt+pman_mix_wt,
                               non_pman_pcs = case when pcs=0 then 0 else (pcs-(pman_bulk_pcs+pman_ppk_pcs+pman_mix_pcs)) end,
                               non_pman_wt = case when wt=0 then 0 else (wt-(pman_bulk_wt+pman_ppk_wt+pman_mix_wt)) end,
                               TR_TYPE=#trtype#
                              where  awb_no = #awbNo#
                              and    awb_date = TO_DATE(#awbDate#,'DDMONYY')   
	</update>
	<update id="amendHHTAWBCloseDetailsInAWB" parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" >
	update awb set awb_closed_yn = 'N' where awb_no=#awbNo# AND AWB_DATE=to_date(#awbDate#,'DDMONYY')
	</update>
	
	<insert id="insertDatatoLsp" parameterClass="java.util.HashMap">
	INSERT INTO LSP_INVENTORY
			(LSP_NO, EMPTY_FLG, LOC_CODE, STRG_DATE, LOCKED, STATUS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE,
			LSP_TYPE,ref_tr_type,REF_TR_EVENT)
		VALUES (#lspNo#, 'N', #location#, SYSDATE, 'N', 'STORED', #user#, SYSDATE, #user#, 
			SYSDATE, SUBSTR(#lspNo#, 0, 1),#tr_type#,#tr_event#)
	</insert>
	<select id="fetchConfirmOffloadEtdTime"  parameterClass="map"  resultClass="java.lang.String">
   select PKG_COMMON.get_flt_eta(#FLTKEY#, #FLTDATE#, 'D') as etd from dual
    </select>
    <select id="fetchHcontainerList" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
    select  p.uld_bt_no AS uldBtNo,
            p.assigned_pcs AS assignedPc,
            P.assigned_wt AS assignedWt,
            P.awb_no as awbNo,
            to_char(p.awb_date,'DDMONYY') as awbDate,
            P.PPK_TYPE AS pkgType,
            contr_code AS contrCode,
  CONCAT(CONCAT(SUBSTR(P.awb_no,0,3),'-'),SUBSTR(P.awb_no,4)) as awbNoDisplay,
  p.unldg_pt as unldgpt
      from 
            exp_pmanifest_uld_awb p,
            exp_pmanifest_uld q 
   where
			  p.flt_key = q.flt_key and 
			  p.flt_date = q.flt_date and
			  p.uld_bt_no = q.uld_bt_no and
			  p.FLT_KEY = #fltKey# AND
			  p.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
              p.awb_no=#awbNo# AND
              P.AWB_DATE=to_date(#awbDate#,'DDMONYY') AND
			  	 ((q.bb_ind = 'Y' or q.new_checkin_uld='Y' 
			  or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y') OR P.ULD_BT_NO = (select RULE_VALUE from cmsrules where RULE_CODE='Dummy_H_Container') )
             AND P.ULD_BT_NO NOT IN (SELECT ULD_BT_NO FROM EXP_PMANIFEST_ULD_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# and uld_bt_no=#uldBtNo#) ORDER BY uldBtNo
	</select>
	<select id="fetchNewCheckHcontainerList" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
 select  p.uld_bt_no AS uldBtNo,
            p.assigned_pcs AS assignedPc,
            P.assigned_wt AS assignedWt,
            P.awb_no as awbNo,
            to_char(p.awb_date,'DDMONYY') as awbDate,
            P.PPK_TYPE AS pkgType,
  CONCAT(CONCAT(SUBSTR(P.awb_no,0,3),'-'),SUBSTR(P.awb_no,4)) as awbNoDisplay,
  p.unldg_pt as unldgpt
      from 
            exp_pmanifest_uld_awb p,
            exp_pmanifest_uld q 
   where
			  p.flt_key = q.flt_key and 
			  p.flt_date = q.flt_date and
			  p.uld_bt_no = q.uld_bt_no and
			  p.FLT_KEY = #fltKey# AND
			  p.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
        p.awb_no=#awbNo# AND
        P.AWB_DATE=to_date(#awbDate#,'DDMONYY') AND
			  (q.bb_ind = 'Y' or q.new_checkin_uld='Y' 
			  or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y') 
        AND P.ULD_BT_NO NOT IN (#assignUld#)
	<!-- 
    select  p.uld_bt_no AS uldBtNo,
            p.assigned_pcs AS assignedPc,
            P.assigned_wt AS assignedWt,
            P.awb_no as awbNo,
            to_char(p.awb_date,'DDMONYY') as awbDate,
  CONCAT(CONCAT(SUBSTR(P.awb_no,0,3),'-'),SUBSTR(P.awb_no,4)) as awbNoDisplay
      from 
            exp_pmanifest_uld_awb p,
            exp_pmanifest_uld q 
   where
			  p.flt_key = q.flt_key and 
			  p.flt_date = q.flt_date and
			  p.uld_bt_no = q.uld_bt_no and
			  p.FLT_KEY = #fltKey# AND
			  p.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
			  (q.bb_ind = 'Y' or q.new_checkin_uld='Y'
			  or (select H_CONT_IND from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y') AND 
        p.uld_bt_no NOT IN (
          select p.uld_bt_no as uldBtNo
  from 
  exp_pmanifest_uld_awb p,exp_pmanifest_uld q 
  where
  p.flt_key = q.flt_key and 
  p.flt_date = q.flt_date and
  p.uld_bt_no = q.uld_bt_no and
  p.FLT_KEY = #fltKey# AND
  p.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
  P.awb_no=#awbNo# and P.awb_date=#awbDate# and p.uld_bt_no = (SELECT ULD_BT_NO FROM EXP_PMANIFEST_ULD_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ROWNUM=1) AND
  (q.bb_ind = 'Y' or q.new_checkin_uld='Y' or (select H_CONT_IND from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y')
  group by p.awb_no,p.awb_date,p.uld_bt_no) -->
	</select>
	<select id="fetchBulkPcsInExpPman" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	select 
            bulk_pcs AS bulkPcs,
            bulk_wt AS bulkWt,
            PPK_PCS as ppkPcs,
            PPK_WT as ppkWt,
            MIX_PCS as mixPcs,
            MIX_WT as mixWt,
            ASSIGNED_BULK_PCS oldAssignedPc,
            ASSIGNED_BULK_WT oldAssignedWt 
            from exp_pmanifest_awb where awb_no=#awbNo# and awb_date=#awbDate# and flt_key=#fltKey# and flt_date=#fltDate# AND UNLDG_PT = #unldgpt#
	</select>
	<update id="updateBulkDetailsExppman" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" >
		UPDATE EXP_PMANIFEST_AWB 
			SET BULK_PCS = #bulkPcs#,
				BULK_WT= #bulkWt#,
				pman_pcs = #pmanPcs#,
				pman_wt = #pmanWt#,
				UNASSIGNED_BULK_PCS = #unassPcs#,
				UNASSIGNED_BULK_WT	= #unassWt# 
			WHERE
			  AWB_NO =#awbNo#
			  AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			  AND FLT_KEY = #fltKey#
			  AND FLT_DATE = #fltDate#
			  AND UNLDG_PT = #unldgpt#
	</update>
	<update id="amendDeleteAwbBulkDetails" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" >
		UPDATE EXP_PMANIFEST_AWB 
			SET BULK_PCS = #bulkPcs#,
				BULK_WT= #bulkWt#,
				pman_pcs = #pmanPcs#,
				pman_wt = #pmanWt#,
				PPK_PCS = #ppkPcs#,
				PPK_WT = #ppkWt#,
				MIX_PCS = #mixPcs#,
				MIX_WT = #mixWt#,
				UNASSIGNED_BULK_PCS = #unassPcs#,
				UNASSIGNED_BULK_WT	= #unassWt# 
			WHERE
			  AWB_NO =#awbNo#
			  AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			  AND FLT_KEY = #fltKey#
			  AND FLT_DATE = #fltDate#
			  AND UNLDG_PT = #unldgpt#
	</update>
	<update id="updatePmanBulkDetailsInAWB" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" >
		UPDATE AWB 
			SET PMAN_PCS = #pmanPcs#,
				PMAN_WT= #pmanWt#,
				NON_PMAN_PCS = #offPcs#,
				NON_PMAN_WT = #offWt#,
				PMAN_BULK_PCS = #bulkPcs#,
				PMAN_BULK_WT	= #bulkWt#,
				BLDUP_BULK_PCS = #bulkPcs#,
				BLDUP_BULK_WT = #bulkWt#
			WHERE
			  AWB_NO =#awbNo#
			  AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</update>
	
	<delete id="deleteBulkRecordPcsExpPman" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">
    DELETE FROM EXP_PMANIFEST_AWB WHERE AWB_NO =#awbNo#
			  AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			  AND FLT_KEY = #fltKey#
			  AND FLT_DATE = #fltDate#
			  AND PMAN_PCS = 0
    </delete>
	<update id="amendNonpmanAwbdetails" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" >
	update awb set pman_pcs = pman_bulk_pcs+pman_ppk_pcs+pman_mix_pcs,
                               pman_wt = pman_bulk_wt+pman_ppk_wt+pman_mix_wt,
                               non_pman_pcs = case when pcs=0 then 0 else (pcs-(pman_bulk_pcs+pman_ppk_pcs+pman_mix_pcs)) end,
                               non_pman_wt = case when wt=0 then 0 else (wt-(pman_bulk_wt+pman_ppk_wt+pman_mix_wt)) end,
                               TR_TYPE=#trtype#
                              where  awb_no = #awbNo#
                              and    awb_date = TO_DATE(#awbDate#,'DDMONYY')   
	</update>
	<update id="amendAWBCloseDetailsInAWB" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" >
	update awb set awb_closed_yn = 'N' where awb_no=#awbNo# AND AWB_DATE=to_date(#awbDate#,'DDMONYY')
	</update>
	<select id="getHHTAwbSHCDetails" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="java.lang.String">
	select pkg_common.get_awb_splcodes(#awbNo#,#awbDate#,(SELECT AWB_TYPE FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ROWNUM=1)) AS shcCode from dual
	</select>
	<select id="fetchAssignDetailsInExpPman" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
  select p.awb_no awbNo,TO_CHAR(P.AWB_DATE,'DDMONYY') awbDate, p.flt_key fltKey,TO_CHAR(P.FLT_DATE,'DDMONYY') fltDate,P.ULD_BT_NO AS uldBtNo,
  SUM(P.ASSIGNED_PCS) AS assignedPc,SUM(P.ASSIGNED_WT) AS assignedWt,P.Ppk_TYPE AS pkgType,q.unldg_pt AS unldgpt  from 
  exp_pmanifest_uld_awb p,exp_pmanifest_uld q 
  where
  p.flt_key = q.flt_key and 
  p.flt_date = q.flt_date and
  p.uld_bt_no = q.uld_bt_no and
  p.FLT_KEY = #FLT_KEY# AND
  p.FLT_DATE = to_date(#FLT_DATE#,'DDMONYY') and 
    P.awb_no=#AWB_NO# and P.awb_date=#AWB_DATE# AND
  (q.bb_ind = 'Y' or q.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y') and rownum=1
  group by p.FLT_KEY,p.FLT_DATE,p.awb_no,P.AWB_DATE,P.ULD_BT_NO,P.Ppk_TYPE,q.unldg_pt
	</select>
	
	<select id="checkUldisNewCheckinUldorNot" parameterClass="map" resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EXP_PMANIFEST_ULD WHERE ULD_BT_NO=#ULD_KEY# AND FLT_KEY=#FLT_KEY# AND FLT_DATE=#FLT_DATE# AND new_checkin_uld='Y'
	</select>
	
	<select id="checkDeloffuldisTarmacOrNot" parameterClass="map" resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EXP_OFFLOAD_ULD WHERE ULD_BT_NO=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND TRF_TYPE IN ('TT','IF','TA')
        AND NOT EXISTS (SELECT NULL FROM EXP_OFFLOAD_ULD_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldKey# AND TYPE = 'Tarmac')  
	</select>
	<select id="tarmacCheckInUldStatus" parameterClass="map" resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EXP_OFFLOAD_ULD WHERE ULD_BT_NO=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND TRF_TYPE IN ('TT','IF','TA')  
	</select>
	<select id="tarmacChkInUldStatus" parameterClass="map" resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EXP_PMANIFEST_ULD A,EXP_OFFLOAD_ULD B WHERE
	B.FLT_KEY = A.FLT_KEY AND
	B.FLT_DATE = A.FLT_DATE AND
	B.ULD_BT_NO = A.ULD_BT_NO AND
	B.TRF_TYPE in ('TT','TA') AND
	A.ULD_BT_NO=#uldKey# AND A.FLT_KEY=#fltKey# AND A.FLT_DATE=#fltDate# AND A.NEW_CHECKIN_ULD='Y'  
	</select>
	<insert id="insertconfirmexpmanawb" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">
			insert into exp_pmanifest_awb(flt_key, flt_date, unldg_pt, awb_no, awb_date, group_no, bulk_pcs, bulk_wt, shp_type, cr_user_id, cr_date, lm_user_id, lm_date,FLT_TYPE,PMAN_PCS,PMAN_WT,UNASSIGNED_BULK_PCS,UNASSIGNED_BULK_WT,ASSIGNED_BULK_PCS,ASSIGNED_BULK_WT)
		values (#fltKey#, #fltDate#, #unldgpt#, #awbNo#, #awbDate#, 1, #bulkPcs#, #bulkWt#, 'LOCAL', #userID#, sysdate, #userID#, sysdate,'E',#pmanPcs#,#pmanWt#,#unassPcs#,#unassWt#, #bulkPcs#, #bulkWt#)
	</insert>
	
	<insert id="insertconfirmppkexpmanawb" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">
			insert into exp_pmanifest_awb(flt_key, flt_date, unldg_pt, awb_no, awb_date, group_no, mix_pcs,mix_wt,ppk_pcs,ppk_wt, shp_type, cr_user_id, cr_date, lm_user_id, lm_date,FLT_TYPE,PMAN_PCS,PMAN_WT,UNASSIGNED_BULK_PCS,UNASSIGNED_BULK_WT,ASSIGNED_BULK_PCS,ASSIGNED_BULK_WT)
		values (#fltKey#, #fltDate#, #unldgpt#, #awbNo#, #awbDate#, 1, #mixPcs#, #mixWt#, #ppkPcs#, #ppkWt#, 'LOCAL', #userID#, sysdate, #userID#, sysdate,'E',#pmanPcs#,#pmanWt#,'0','0', '0', '0')
	</insert>
	
		<select id="fetchTransitHandlingDetails" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	select transit_flg as transitFlg, hdlg_mode as hadleMode from exp_pmanifest_uld where uld_bt_no=#uldBtNo# and flt_key=#fltKey# and flt_date=#fltDate# and rownum=1
	</select>
	<select id="CheckUldisEicUldOrNot" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="java.lang.Integer">
	select COUNT(1) from exp_offload_uld A,ULD_INVENTORY B
    where B.ULD_KEY = A.ULD_BT_NO AND B.EIC_FLG='Y' AND A.CONFIRMED_YN='Y' AND
    A.FLT_KEY= #fltKey# AND A.FLT_DATE=#fltDate# AND A.ULD_BT_NO=#uldBtNo# AND NOT EXISTS (SELECT NULL FROM EXP_OFFLOAD_ULD_AWB B WHERE ULD_BT_NO=A.ULD_BT_NO AND B.FLT_KEY=A.FLT_KEY AND B.FLT_DATE=A.FLT_DATE)
	</select>
	<select id="checkRecordInExpManifestDtl" parameterClass="map" resultClass="java.lang.Integer">
	select count(1) from exp_manifest_dtl where flt_key=#FLT_KEY# and flt_date=#FLT_DATE# and awb_no=#AWB_NO# and awb_date=#AWB_DATE#
	</select>
	<select id="CHECK_IN_EXPPMANAWB" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="java.lang.Integer">
	select COUNT(1) from exp_pmanifest_awb where awb_no=#awbNo# and awb_date=#awbDate# and flt_key=#fltKey# and flt_date=#fltDate# and unldg_pt = #unldgpt#
	</select>
	<update id="updateTransitHandlingdata" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">
	update exp_offload_uld set TR_TYPE = NVL(#trtype#,'COFFC'), TRANSIT_FLG=#transitFlg#,HDLG_MODE=#hadleMode# where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldBtNo#
   </update>
         <select id="fetchConfirmedUnldgPoint"  parameterClass="cargo.cms.export.bo.PreOffLoadItemBO"  resultClass="java.lang.String">
		 SELECT UNLDG_PT
				FROM   EXP_OFFLOAD_ULD_AWB
				WHERE  FLT_KEY = #fltKey#
		        AND    FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
		        AND    ULD_BT_NO = #uldBtNo#
                AND    AWB_NO = #awbNo# 
                AND    AWB_DATE = #awbDate#
		        AND    OFFLOAD_TYPE = 'U'
          </select>
         <select id="fetchCfirmOffldUldLocCode"  parameterClass="java.lang.String"  resultClass="java.lang.String">
		select loc_code from uld_inventory where uld_key=#uldKey#
         </select>

<select id="fetchCfirmOffldLspLocCode"  parameterClass="java.lang.String"  resultClass="java.lang.String">
		SELECT LOC_CODE FROM LSP_INVENTORY WHERE LSP_NO = #lspNo#
</select>

<update id="changeConfirmOffloadComplete" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		UPDATE FLT_OPR_EVENTS SET 
		OFLD_CFM_IND=decode(#completeStatus#,'Y','N','N','Y'),
		LM_DATE = sysdate,
		LM_USER_ID = #userID#,
		OFLD_CFM_USER_ID=decode(#completeStatus#,'N',#userID#,'Y',null),
		OFLD_CFM_DATE=decode(#completeStatus#,'N',sysdate,'Y',null),
		TR_TYPE='CFOFF'
		WHERE
		FLT_KEY=#fltKey# AND
		SCH_DATE=#fltDate# and
		to_char(LM_DATE, 'DDMONYY HH24:MI:SS') = #lastModifiedDate# AND FLT_TYPE = 'D'
</update>
<update id="updateTransferTypeInExpOffldUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
update exp_offload_uld set trf_type = #transferType#,gross_wt=#grossWt#,TARE_WT=#tareWt#,hdlg_mode=#hdlgMode# where uld_bt_no=#uldBtNo# and flt_key=#fltKey# and flt_date=#fltDate#
</update>
<update id="updateTransitTypeInUldInventory" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
update uld_inventory set TRANSIT_TYPE = null where uld_key=#uldBtNo# 
</update>
<select id="getOffLoadedLastmodDate"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.String">
		select TO_CHAR(LM_DATE,'DDMONYY HH24:MI:SS') AS lastModifiedDate from flt_opr_events where flt_key=#flightKey# and SCH_date=#fltDate# AND FLT_TYPE = 'D'
</select>
<select id="validateDeskConfirmOffloadFlight"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
		SELECT count(FLT_KEY) FROM FLT_OPR A  WHERE A.FLT_KEY=#flightKey# AND A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE = 'D'
		AND A.FLT_TYPE = 'D'
</select>

<select id="getContourCodeFromExpOffloadULD"  parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO"  resultClass="java.lang.String">
SELECT contr_code FROM EXP_OFFLOAD_ULD WHERE ULD_BT_NO=#uldBtNo# and flt_key=#fltKey# and flt_date=#fltDate# and rownum=1
</select>

<select id="fetchFlightCompleteStatus"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.String">
		select OFLD_CFM_IND from flt_opr_events WHERE FLT_KEY=#flightKey# AND SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE = 'D'
</select>

<select id="fetchOffloadFlightCarr"  parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO"  resultClass="java.lang.String">
select carr_code from flt_opr_events where flt_key=#fltKey# AND SCH_DATE=#fltDate# AND FLT_TYPE='D'
</select>

<select id="fetchTransitTypeInExpOffldUld"  parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO"  resultClass="java.lang.String">
select TRF_TYPE from exp_offload_uld where flt_key=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
</select>

<select id="fetchAwbOwnerDetails"  parameterClass="map"  resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
select awb_no as awbNo,awb_date as awbDate,carr_code as carr,pcs as assignedPcs,wt as assignedWt from awb_owner where awb_no=#awbNo# and awb_date=#awbDate# and carr_code=#carr#
</select>
<select id="getTransferTypeInUldInv"  parameterClass="java.lang.String"  resultClass="java.lang.String">
select transit_type from uld_inventory where uld_key=#PARAM#
</select>
<select id="getoffloadgrosswttarewtInUldInv"  parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO"  resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
select gross_wt as grossWt,tare_wt as tareWt from exp_offload_uld where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldBtNo# and rownum=1
</select>

<update id="updateawbownerdetails" parameterClass="map">
		UPDATE
			AWB_OWNER
		SET
			PCS=#pcs#,
            WT=#wt#,
            OFFLOAD_PCS=#offpcs#,
            LM_USER_ID = #user#,
            LM_DATE = SYSDATE
	    WHERE
			AWB_NO = #awbNo#
			AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			AND CARR_CODE= #carr#
</update>

<update id="amendOwnedinvLocCfmstatus" parameterClass="java.lang.String">
		update uld_inventory set owned_inv='N',target='',LOC_CODE='',ofld_flg='N' where uld_key=#PARAM#
</update>
<update id="updateBuildupdataExppman" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		UPDATE EXP_PMANIFEST_ULD SET BLDUP_START='Y',BLDUP_COMPLETE='Y',bldup_complete_user_id=#user#,bldup_complete_date=SYSDATE,READY_DISP='Y', READY_WH='Y' WHERE ULD_BT_NO=#uldBtNo# and flt_key=#fltKey# and flt_date=TO_DATE(#fltDate#,'DDMONYY')
</update>
<update id="updateFltULDdataExppman" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		UPDATE EXP_FLT_ULD SET BUILDUP_YN = 'Y' WHERE ULD_KEY = #uldBtNo# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
</update>
<update id="updatetopuldflightdetails" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		update uld_inventory set flt_key=#fltKey#,flt_date=#fltDate#,flt_type = 'E' where uld_key in (select uld_key from uld_inventory where base_plt=#uldBtNo#)
</update>
<update id="updatetopuldlocationdetails" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		update uld_inventory set owned_inv='N',target='',LOC_CODE=null where uld_key in (select uld_key from uld_inventory where base_plt=#uldBtNo#)
</update>

<update id="updateexpfltuldInExpOffldULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
update EXP_FLT_ULD set SOURCE='DDT' where flt_key=#fltKey# and flt_date=#fltDate# and ULD_KEY=#uldBtNo#
</update>
<update id="updateTransitlocDetails" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		update uld_inventory set owned_inv='N',LOC_CODE=null,TRANSIT_TYPE=#transitType# where uld_key=#uldBtNo#
</update>
<update id="updateEicDetailsInExpOffldULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
update exp_offload_uld set confirmed_yn='N' where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldBtNo#
</update>
<update id="updateTareGrossWtInExpPmanUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
update exp_pmanifest_uld set gross_wt=#grossWt#,tare_wt=#tareWt# where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldBtNo#
</update>
<update id="updateOffPpkPcsandWtinAWB" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">
update awb set OFFLOAD_PPK_PCS=NVL(OFFLOAD_PPK_PCS,0) + #offPcs#,OFFLOAD_PPK_WT=NVL(OFFLOAD_PPK_WT,0) + #offWt# where awb_no=#awbNo# and awb_date=#awbDate#
</update>
<update id="deleteOffPpkPcsandWtinAWB" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">
update awb set OFFLOAD_PPK_PCS=NVL(OFFLOAD_PPK_PCS,0) - #offPcs#,OFFLOAD_PPK_WT=NVL(OFFLOAD_PPK_WT,0) - #offWt# where awb_no=#awbNo# and awb_date=#awbDate#
</update>

<update id="updateOffBlkPcsandWtinAWB" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">
update awb set OFFLOAD_BULK_PCS=NVL(OFFLOAD_BULK_PCS,0) - #offPcs#,OFFLOAD_BULK_WT=NVL(OFFLOAD_BULK_WT,0) - #offWt# where awb_no=#awbNo# and awb_date=#awbDate#
</update>
<update id="updateTarmacOffBlkPcsandWtinAWB" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">
update awb set OFFLOAD_BULK_PCS=NVL(OFFLOAD_BULK_PCS,0) + #offPcs#,OFFLOAD_BULK_WT=NVL(OFFLOAD_BULK_WT,0) + #offWt# where awb_no=#awbNo# and awb_date=#awbDate#
</update>
<insert id="insertEicDetailsInExpPmanULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
				insert into exp_pmanifest_uld(flt_key, flt_date, uld_bt_no, unldg_pt, group_no, ppk_type, shp_type, offload_yn,
	            bldup_instr, man_rmk, rcl_no, contr_code, tare_wt, gross_wt, empty_yn, eic_yn, cr_user_id, cr_date, lm_user_id, lm_date,FLT_TYPE,TRANSIT_FLG,HDLG_MODE)
	            select flt_key, flt_date, uld_bt_no, unldg_pt, '1', ppk_type, 'LOCAL', 'Y',
	            '', '', '', contr_code, '0', '0', 'N', 'Y',#user#, cr_date, #user#, lm_date,'E',(SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#uldBtNo#),
				(SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#uldBtNo#) 
	            from   exp_offload_uld
	            where  flt_key = #fltKey#
	            and    flt_date = TO_DATE(#fltDate#,'DDMONYY')
	            and    uld_bt_no = #uldBtNo#
	    </insert> 
	    
<update id="updateOwnedinvcfm" parameterClass="java.lang.String">
		update uld_inventory set owned_inv='N',loc_code='' where uld_key=#PARAM#
</update>

<update id="amendDeleteEventidInUldmov" parameterClass="map">
		update uld_mov set event_id = 'DOC' where flt_key=#FLTKEY# and flt_date=#FLTDATE# and uld_key=#ULDKEY# and event_id='EF'
</update>

<update id="amendOffloadDatainExpmanifestdtl" parameterClass="map">
UPDATE EXP_MANIFEST_DTL SET SHPM_ASSGN_PCS = SHPM_ASSGN_PCS - #OFF_PCS#,SHPM_ASSGN_WT = SHPM_ASSGN_WT - #OFF_WT# WHERE FLT_KEY=#FLT_KEY# AND FLT_DATE=#FLT_DATE# AND AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#
</update>

<update id="modifyTypeInExpOffloadUld" parameterClass="map">
update exp_offload_uld_awb set type=#TYPE#, tr_type='DUMMY'  where awb_no=#AWB_NO# and awb_date=#AWB_DATE# and flt_key=#FLT_KEY# and flt_date=#FLT_DATE# and uld_bt_no=#ULD_KEY#
</update>

<delete id="deleteOffloadDatainExpmanifestdtl" parameterClass="map">
DELETE FROM EXP_MANIFEST_DTL WHERE FLT_KEY=#FLT_KEY# AND FLT_DATE=#FLT_DATE# AND AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#
</delete>

<insert id="insertawbownerdetails" parameterClass="map">
	INSERT INTO AWB_OWNER(AWB_NO,AWB_DATE,CARR_CODE,PCS,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,BU_PCS,
                            OFFLOAD_PCS) VALUES
                            (#awbNo#,#awbDate#,#carr#,#pcs#,#wt#,#user#,SYSDATE,#user#,SYSDATE,null,#offpcs#)
</insert>
<select id="validateDeskConfirmOffloadManifestrFlight"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.String">
		select FINAL_MANF_IND from flt_opr_events WHERE FLT_KEY=UPPER(#flightKey#) AND SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE = 'D'
</select>
<select id="validateDeskConfirmOffloadFlightCompleteOrNot"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.String">
		select ofld_cfm_ind from flt_opr_events WHERE FLT_KEY=UPPER(#flightKey#) AND SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE = 'D'
</select>

<select id="validateULDCheckinOffloadOrNot"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
		select COUNT(1) from EXP_OFFLOAD_ULD where ULD_BT_No=#uldNo# and FLT_KEY=#flightKey# and FLT_DATE=#fltDate# and CHECKED_IN_FLAG='Y'
</select>
<select id="validateULDunCheckinOffloadOrNot"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
SELECT COUNT(1)
FROM exp_chkout_dtl A, EXP_PMANIFEST_ULD B
WHERE 
B.FLT_KEY = A.FLT_KEY
AND B.FLT_DATE = A.FLT_DATE
AND B.ULD_BT_NO = A.ULD_KEY
AND B.NEW_CHECKIN_ULD = 'N'
AND A.flt_key    = #flightKey#
AND A.flt_date     = to_date(#fltDate#,'DDMONYY')
AND A.ULD_KEY      =#uldNo#
AND A.chkout_date IS NULL
AND A.chkout_user IS NULL
</select>
<select id="checkUldIsCheckInUldOrNot"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
		select COUNT(1) from exp_pmanifest_uld where ULD_BT_No=#uldNo# and FLT_KEY=#flightKey# and FLT_DATE=#fltDate# and NEW_CHECKIN_ULD='Y'
</select>
<select id="checkUldIsExpEicUldorNot"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
		select COUNT(1) from exp_pmanifest_uld_awb where ULD_BT_No=#uldNo# and FLT_KEY=#flightKey# and FLT_DATE=#fltDate#
</select>
		<select id="preoffload_amend_getitems" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
			SELECT 
			   A.AWB_NO as awbNo,
		 	   CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) as awbNoDisplay,
		 	   TO_CHAR(AWB_DATE,'DDMONYY') as awbDate,
			   A.ULD_BT_NO as uldBtNo,
			   '' as contrCode,
			   A.PREOFF_BULK_PCS as preOffBulkPcs,
			   A.PREOFF_BULK_WT as preOffBulkWt,
			   A.PREOFF_PPK_PCS as preOffPpkPcs,
			   A.PREOFF_PPK_WT as preOffPpkWt,
			   A.PREOFF_MIX_PCS as preOffMixPcs,
			   A.PREOFF_MIX_WT as preOffMixWt,
			   A.OFF_BULK_PCS as offBulkPcs,
			   A.OFF_BULK_WT as offBulkWt,
			   A.OFF_PPK_PCS as offPpkPcs,
			   A.OFF_PPK_WT as offPpkWt,
			   A.OFF_MIX_PCS as offMixPcs,
			   A.OFF_MIX_WT as offMixWt,
			   A.UNLDG_PT as unldgpt,
			   '' as pkgType,
			   0 as assignedPc,
			   0 as assignedWt
			FROM
			EXP_OFFLOAD_AWB A
			WHERE
			A.FLT_KEY = #fltKey#
			AND A.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			<isNotEmpty prepend="AND" property="awbNo">
				A.AWB_NO = #awbNo#
			</isNotEmpty>
			UNION
			SELECT
				'' as awbNo,
				'-' as awbNoDisplay,
				'' as awbDate,
				B.ULD_BT_NO as uldBtNo,
				B.CONTR_CODE as contrCode,
				0 as preOffBulkPcs,
			    0 as preOffBulkWt,
			    0 as preOffPpkPcs,
			    0 as preOffPpkWt,
			    0 as preOffMixPcs,
			    0 as preOffMixWt,
			    0 as offBulkPcs,
			    0 as offBulkWt,
			    0 as offPpkPcs,
			    0 as offPpkWt,
			    0 as offMixPcs,
			    0 as offMixWt,
				B.UNLDG_PT as unldgpt,
				B.PPK_TYPE as pkgType,
				C.ASSIGNED_PCS as assignedPc,
				C.ASSIGNED_WT as assignedWt
			FROM
				EXP_OFFLOAD_ULD B, EXP_OFFLOAD_ULD_AWB C
			WHERE
				B.FLT_KEY = #fltKey#
				AND B.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
				AND B.FLT_KEY = C.FLT_KEY
				AND B.FLT_DATE = C.FLT_DATE
			<isNotEmpty prepend="AND" property="uldKey">
				B.ULD_BT_NO = #uldKey#
				AND B.ULD_BT_NO = C.ULD_BT_NO
			</isNotEmpty>
	</select>
	<update id="offload_confirm_uld_update1" parameterClass="map">
		UPDATE
			EXP_OFFLOAD_ULD
		SET
			RMK = #rmk#
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldBtNo#
	</update>

	<update id="offload_confirm_uld_update2" parameterClass="map">
		UPDATE
			EXP_OFFLOAD_ULD_AWB
		SET
			RMK = #rmk#,
			OFFLOAD_PCS = #pcs#,
			OFFLOAD_WT = #wt#
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldBtNo#
	</update>

	<update id="offload_confirm_awb_update1" parameterClass="map">
		UPDATE
			EXP_OFFLOAD_AWB
		SET
			RMK = #rmk#,
			OFF_BULK_PCS = #offBulkPcs#, 
	   		OFF_BULK_WT = #offBulkWt#, 
	   		OFF_PPK_PCS = #offPpkPcs#, 
	   		OFF_PPK_WT = #offPpkWt#, 
	   		OFF_MIX_PCS = #offMixPcs#, 
	   		OFF_MIX_WT = #offMixWt#
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND AWB_NO = #awbNo#
			AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	</update>

	<update id="offload_confirm_with_uld" parameterClass="map">
		UPDATE
			ULD_INVENTORY
		SET
			LOC_CODE = #locn#,
			WH_DEST = #whDest#
		WHERE
			ULD_KEY = #uldBtNo#
	</update>

	<select id="offload_confirm_without_uld_check" parameterClass="map" resultClass="java.lang.String">
		SELECT COUNT(1)
		FROM
			AWB_INVENTORY
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_KEY = #uldBtNo#
			AND WH_DEST = #whDest#
			AND LOC_CODE = #locn#
			AND FLT_TYPE = 'D'
			AND LSP_NO = #lspNo#
			AND PPK_IND = #pkgType#
			<isNotEmpty prepend="AND" property="awbNo">
				AWB_NO = #awbNo#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="awbNo">
				AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			</isNotEmpty>
	</select>
	
	<update id="offload_confirm_without_uld_update" parameterClass="map">
		UPDATE
			AWB_INVENTORY
		SET
			LOCN_PCS = #pcs#,
			LOCN_WT = #wt#
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_KEY = #uldBtNo#
			AND WH_DEST = #whDest#
			AND LOC_CODE = #locn#
			AND FLT_TYPE = 'D'
			AND LSP_NO = #lspNo#
			AND PPK_IND = #pkgType#
			<isNotEmpty prepend="AND" property="awbNo">
				AWB_NO = #awbNo#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="awbNo">
				AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			</isNotEmpty>
	</update>
	<select id="delete_offload_getheader" parameterClass="map" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		SELECT
			FLT_KEY as fltKey,
			TO_CHAR(FLT_DATE,'DDMONYY') as fltDate,
			(	SELECT
					SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),0,2)|| ':'||  SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),3,4)
		 		FROM FLT_OPR A  
				WHERE 
					A.FLT_KEY = #fltKey#
					AND A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
					AND A.FLT_TYPE = 'D'
			) as etdTime,
			ULD_BT_NO as uldBtNo,
			CONTR_CODE as contrCode,
			PPK_TYPE as pkgType,
			(
				SELECT
					WH_DEST
				FROM
					ULD_INVENTORY
				WHERE
					ULD_KEY = #uldKey#
			) as whDest,
			(
				SELECT
					LOC_CODE
				FROM
					ULD_INVENTORY
				WHERE
					ULD_KEY = #uldKey#
			) as locn
		FROM
			EXP_OFFLOAD_ULD
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldKey#
	</select>

	<select id="delete_offload_getitems" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		SELECT
			AWB_NO as awbNo,
			CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,
			OFFLOAD_PCS as offPcs,
			OFFLOAD_WT as offWt
		FROM
			EXP_OFFLOAD_ULD_AWB
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldKey#
	</select>

	<delete id="delete_offload_uldsave" parameterClass="map">
		DELETE FROM
			EXP_OFFLOAD_ULD_AWB
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldKey#
	</delete>
	
	<delete id="delete_offload_uldsave2" parameterClass="map">
		DELETE FROM
			EXP_OFFLOAD_ULD
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldKey#
	</delete>
	<!-- Changed for QR -->
	<select id="delete_offload_getheader_awb" parameterClass="map" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		SELECT DISTINCT
			FLT_KEY as fltKey,
			TO_CHAR(FLT_DATE,'DDMONYY') as fltDate,
			PKG_COMMON.get_flt_eta(#fltKey#, #fltDate#, 'D') as etdTime,
			AWB_NO as awbNo,
			CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay
		FROM
			EXP_OFFLOAD_AWB
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
	</select>
	
	<select id="delete_offload_getitems_awb" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		SELECT
			ULD_BT_NO as uldBtNo,
			'TBA' as contrCode,
			OFFLOAD_TYPE as pkgType,
			ASSIGNED_PCS as assignedPc,
			ASSIGNED_WT as assignedWt,
			OFFLOAD_PCS as offPcs,
			OFFLOAD_WT as offWt,
			'TBA' as preOffLoadULD
		FROM
			EXP_OFFLOAD_ULD_AWB
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND AWB_NO = #awbNo#
	</select>
	<delete id="delete_offload_awbsave" parameterClass="map">
		DELETE FROM
			EXP_OFFLOAD_ULD_AWB
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND AWB_NO = #awbNo#
			AND ULD_BT_NO = #uldKey#
	</delete>
	
	<delete id="delete_offload_awbsave2" parameterClass="map">
		DELETE FROM
			EXP_OFFLOAD_ULD
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldKey#
	</delete>
<!-- Updated By Yugandhar for Confirm Offloaded Cargo -->	
	<select id="get_offloaded_cargo_details" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	<!-- 
	    select t1.uld_bt_no as uldBtNo, 
			t1.contr_code as contrCode, 
			decode(t1.ppk_type, 'M', 'Mix', 'P', 'PrePack', 'B', 'Bulk')as pkgType, 
			sum(t2.offload_pcs) as offPcs, 
			sum(t2.offload_wt) as offWt,  
			t1.offload_uld_yn as offloadUldYn,
         	t1.confirmed_yn as confirmOfldInd,
        	(select ui.OFLD_FLG from uld_inventory ui where ui.uld_key = t1.uld_bt_no) as checkInOfld,
        	t1.no_brk_ind as noBreakInd,
        	(decode(p1.spl_code1, null, '', decode(p1.spl_code2,'',p1.spl_code1,'/'))
	               || decode(p1.spl_code2, null, '',decode(p1.spl_code3,'',p1.spl_code2,'/'))
	               || decode(p1.spl_code3, null, '', p1.spl_code3)) AS shcCode,
       		(select ui.TRANSIT_TYPE from uld_inventory ui where ui.uld_key = t1.uld_bt_no) as transitType,
        	sum(t2.assigned_pcs) as assignedPc, 
			sum(t2.assigned_wt) as assignedWt 
         from  exp_pmanifest_uld p1
      	 left join exp_offload_uld t1 on p1.uld_bt_no = t1.uld_bt_no
      	 left join exp_offload_uld_awb t2 on p1.uld_bt_no = t2.uld_bt_no
      	 where  t1.flt_key = t2.flt_key
			and    t1.flt_date = t2.flt_date 
			and    t2.offload_type = 'U'
			and    t2.flt_key =  #FLTKEY#
			and    t2.flt_date = to_date(#FLTDATE#,'DDMONYY')
			and    t2.confirmed_yn = 'N'
      	group by t1.uld_bt_no, t1.contr_code, t1.ppk_type, 
      	t1.unldg_pt, t1.offload_uld_yn,t1.confirmed_yn,t1.no_brk_ind,
      	p1.spl_code1,p1.spl_code2,p1.spl_code3		 -->
      	 SELECT P1.uld_bt_no as uldBtNo, 
			 p1.CONTR_CODE as contrCode, 
			 DECODE(P1.PPK_TYPE, 'M', 'Mix', 'P', 'PrePack', 'B', 'Bulk')as pkgType,
			 CASE WHEN (select COUNT(1) from uld_inventory where uld_key=P1.uld_bt_no and (PPK_IND='Y' OR MIX_PPK_IND='Y' OR HANDLING_MODE IN ('PPK'))) >0 THEN 'P'                                 
       		 ELSE 'B' END as newPkgInd,
			 DECODE(t1.offload_uld_yn,'','N',T1.OFFLOAD_ULD_YN) as offloadUldYn,
       DECODE(t1.confirmed_yn,'','N',t1.confirmed_yn) as confirmOfldInd,
       DECODE(T1.CHECKED_IN_FLAG,'','N',T1.CHECKED_IN_FLAG) as checkInOfld,
       DECODE(t1.no_brk_ind,'','N',t1.no_brk_ind) as noBreakInd,
       (CASE WHEN (select count(awb_no) from exp_pmanifest_uld_awb where flt_key=#FLTKEY# and flt_date=#FLTDATE# and uld_bt_no=P1.uld_bt_no) >0 THEN 'Y' ELSE 'N' END) AS actionInd,
       (SELECT SUM(OFFLOAD_PCS) FROM 
         exp_offload_uld_awb t2,
         EXP_OFFLOAD_ULD P1
         WHERE
         p1.uld_bt_no = T2.ULD_BT_NO AND
         p1.flt_key = T2.FLT_KEY AND
         P1.FLT_DATE = T2.FLT_DATE AND
         T2.uld_bt_no = T1.uld_bt_no AND
         T2.FLT_KEY = T1.FLT_KEY AND 
         T2.FLT_DATE=T1.FLT_DATE AND
         p1.offload_uld_yn = 'Y') as offPcs, 
		   (SELECT SUM(OFFLOAD_WT) FROM 
         exp_offload_uld_awb t2,
         EXP_OFFLOAD_ULD P1
         WHERE
         p1.uld_bt_no = T2.ULD_BT_NO AND
         p1.flt_key = T2.FLT_KEY AND
         P1.FLT_DATE = T2.FLT_DATE AND
         T2.uld_bt_no = T1.uld_bt_no AND
         T2.FLT_KEY = T1.FLT_KEY AND 
         T2.FLT_DATE=T1.FLT_DATE AND
         p1.offload_uld_yn = 'Y') as offWt,
        (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = P1.uld_bt_no AND ROWNUM  &lt;=9) AS shcCode,
       (SELECT TRANSIT_TYPE FROM ULD_INVENTORY WHERE TRANSIT_TYPE NOT IN ('TA') AND ULD_KEY=P1.uld_bt_no) as transitType,
       'Normal' AS type
  from exp_pmanifest_uld p1
       left join exp_offload_uld t1 on t1.uld_bt_no=p1.uld_bt_no AND T1.FLT_KEY = P1.FLT_KEY AND T1.FLT_DATE=P1.FLT_DATE  
  where P1.flt_key = #FLTKEY#	and
        P1.flt_date = #FLTDATE# AND P1.ULD_BT_NO  NOT IN (
        SELECT ULD_BT_NO FROM EXP_OFFLOAD_ULD WHERE FLT_KEY = #FLTKEY# AND FLT_DATE=#FLTDATE# AND ULD_BT_NO=P1.ULD_BT_NO AND CONFIRMED_YN='Y')
  UNION ALL
        SELECT P1.uld_bt_no as uldBtNo, 
			  T1.CONTR_CODE as contrCode, 
			  (CASE WHEN
        (Select Decode((Select Bb_Ind From Exp_Flt_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Key=P1.uld_bt_no And Rownum=1),'Y','Y',Decode(T2.New_Checkin_Uld,'Y','Y',(Select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) From Mast_Uld_Type Where Code = Substr(P1.Uld_Bt_No, 1, 3))))
         From Exp_Pman_Tarmac_Uld Q1
               Left Join Exp_Pmanifest_Uld T2 On T2.Flt_Key=Q1.Flt_Key And T2.Flt_Date=Q1.Flt_Date And T2.Uld_Bt_No = Q1.Uld_Bt_No
               Where q1.Flt_Key=#FLTKEY# And q1.Flt_Date=#FLTDATE# And q1.Uld_Bt_No=P1.uld_bt_no) = 'Y'
              Then 'Bulk'
              Else Case When
              (SELECT 
              COUNT(1) 
          FROM
              exp_pman_tarmac_uld_awb
        WHERE FLT_KEY=#FLTKEY# AND
              FLT_DATE=#FLTDATE# AND
              AWB_NO=(select awb_no from exp_pman_tarmac_uld_awb where ULD_BT_NO=P1.uld_bt_no and flt_key=#FLTKEY# and flt_date=#FLTDATE# and rownum=1)) > 1
              THEN 'Mix'
              Else 'PrePack'
              END
              END) as pkgType,
              (CASE WHEN  (Select Bb_Ind From Exp_Flt_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Key=P1.uld_bt_no And Rownum=1) = 'Y' THEN 'B'                                
			   ELSE CASE WHEN (select COUNT(1) from uld_inventory where uld_key=P1.uld_bt_no and (PPK_IND='Y' OR MIX_PPK_IND='Y' OR HANDLING_MODE IN ('PPK'))) >0 THEN 'P'
               ELSE 'B'
               END
               END) as newPkgInd,
			  DECODE(t1.offload_uld_yn,'','N',T1.OFFLOAD_ULD_YN) as offloadUldYn,
        DECODE(t1.confirmed_yn,'','N',t1.confirmed_yn) as confirmOfldInd,
			  DECODE(T1.CHECKED_IN_FLAG,'','N',T1.CHECKED_IN_FLAG) as checkInOfld,
        DECODE(t1.no_brk_ind,'','N',t1.no_brk_ind) as noBreakInd,
        (CASE WHEN (select count(awb_no) from exp_pman_tarmac_uld_awb where flt_key=#FLTKEY# and flt_date=#FLTDATE# and uld_bt_no=P1.uld_bt_no) >0 THEN 'Y' ELSE 'N' END) AS actionInd,
        (SELECT SUM(OFFLOAD_PCS) FROM 
         exp_offload_uld_awb t2,
         EXP_OFFLOAD_ULD P1
         WHERE
         p1.uld_bt_no = T2.ULD_BT_NO AND
         p1.flt_key = T2.FLT_KEY AND
         P1.FLT_DATE = T2.FLT_DATE AND
         T2.uld_bt_no = T1.uld_bt_no AND
         T2.FLT_KEY = T1.FLT_KEY AND 
         T2.FLT_DATE=T1.FLT_DATE AND
         p1.offload_uld_yn = 'Y') as offPcs, 
		    (SELECT SUM(OFFLOAD_WT) FROM 
         exp_offload_uld_awb t2,
         EXP_OFFLOAD_ULD P1
         WHERE
         p1.uld_bt_no = T2.ULD_BT_NO AND
         p1.flt_key = T2.FLT_KEY AND
         P1.FLT_DATE = T2.FLT_DATE AND
         T2.uld_bt_no = T1.uld_bt_no AND
         T2.FLT_KEY = T1.FLT_KEY AND 
         T2.FLT_DATE=T1.FLT_DATE AND
         p1.offload_uld_yn = 'Y') as offWt,
         (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = P1.uld_bt_no AND ROWNUM  &lt;=9) AS shcCode,
        (SELECT TRANSIT_TYPE FROM ULD_INVENTORY WHERE TRANSIT_TYPE NOT IN ('TA') AND ULD_KEY=P1.uld_bt_no) as transitType,
        'Tarmac' AS type
  from  exp_pman_tarmac_uld p1
      	left join exp_offload_uld t1 on t1.uld_bt_no=p1.uld_bt_no AND T1.FLT_KEY = P1.FLT_KEY AND T1.FLT_DATE=P1.FLT_DATE 
  where  P1.flt_key = #FLTKEY#	and
         P1.flt_date = #FLTDATE# AND P1.ULD_BT_NO  NOT IN (
         SELECT ULD_BT_NO FROM EXP_OFFLOAD_ULD WHERE FLT_KEY = #FLTKEY# AND FLT_DATE=#FLTDATE# AND ULD_BT_NO=P1.ULD_BT_NO AND CONFIRMED_YN='Y')	
	</select>		
	<select id="getconfirmoffloadawb" parameterClass="map" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		select t2.awb_no as awbNo, 
			to_char(t2.awb_date,'DDMONYY') as awbDate, 
		    t1.uld_bt_no as uldBtNo, 
		    t1.contr_code as contrCode, 
		    decode(t1.uld_type, 'BT', 'Bulk', decode(t1.ppk_type, 'M', 'Mix', 'P', 'BUP', 'B', 'Buildup')) as pkgType,
		    t2.unldg_pt as unldgpt, 
		    t2.assigned_pcs as assignedPcs, 
		    t2.assigned_wt as assignedWt, 
		    t2.offload_pcs as preOffPcs, 
		    t2.offload_wt as preOffWt, 
		    t1.offload_uld_yn as preOffULDInd, 
		    t2.rmk as remark
		from   exp_offload_uld t1, exp_offload_uld_awb t2
		where  t1.flt_key = t2.flt_key
			and    t1.flt_date = t2.flt_date
			and    t1.uld_bt_no = t2.uld_bt_no
			and    t2.offload_type = 'A'
			and    t2.flt_key = #FLTKEY#
			and    t2.flt_date = to_date(#FLTDATE#,'DDMONYY')
			and    t2.awb_no = #AWBNO#
			and    t2.uld_bt_no =#ULDKEY#
	</select>

		<select id="getconfirmoffloaduldHeader" parameterClass="map" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	<!-- 
		select t1.uld_bt_no as uldBtNo, 
			 t1.contr_code as contrCode, 
			 t1.UNLDG_PT as unldgpt,
			 decode(t1.ppk_type, 'M', 'Mix', 'P', 'PrePack', 'B', 'Bulk')as pkgType,
			 t1.offload_uld_yn as preOffULDInd,  
			 t1.rmk as remark,
      		 (decode(p1.spl_code1, null, '', decode(p1.spl_code2,'',p1.spl_code1,'/'))
	               || decode(p1.spl_code2, null, '',decode(p1.spl_code3,'',p1.spl_code2,'/'))
	               || decode(p1.spl_code3, null, '', p1.spl_code3)) AS shcCode,
      		(select ui.TRANSIT_TYPE from uld_inventory ui where ui.uld_key = t1.uld_bt_no) as transitType,
      		decode(p1.AIRSIDE_BRKDN,'Y','Y',
      		decode((select H_CONT_IND from mast_uld_type where code = substr(t1.uld_bt_no, 1, 3)),'Y','Y','N')) as bulkInd,
      		p1.eic_yn as eicInd
      	from  exp_pmanifest_uld p1
      	left join exp_offload_uld t1 on t1.uld_bt_no=p1.uld_bt_no
      	where      t1.flt_key = #FLTKEY#
      		and    t1.flt_date = to_date(#FLTDATE#,'DDMONYY')
      		and    t1.uld_bt_no = #ULDKEY#
      		and    t1.flt_key = p1.flt_key
      		and    t1.flt_date = p1.flt_date  -->
       SELECT P1.uld_bt_no as uldBtNo,nvl(P1.NESTING_ID,t1.nesting_id)                                               AS nestingId,P1.HDLG_MODE AS handlingCode, 
			  P1.CONTR_CODE as contrCode, 
			  P1.UNLDG_PT as unldgpt,
			  PKG_COMMON.get_flt_eta(#FLTKEY#, #FLTDATE#, 'D')   as etd,
			  DECODE(P1.PPK_TYPE, 'M', 'Mix', 'P', 'PrePack', 'B', 'Bulk')as pkgType,
			  CASE WHEN (select COUNT(1) from uld_inventory where uld_key=P1.uld_bt_no and (PPK_IND='Y' OR MIX_PPK_IND='Y' OR HANDLING_MODE IN ('PPK'))) >0 THEN 'P'                                 
			  ELSE 'B' END as newPkgInd,
			  DECODE(T1.OFFLOAD_ULD_YN,'','N',T1.OFFLOAD_ULD_YN) as preOffULDInd,  
			  T1.rmk as remark,
      	   	(select TRF_TYPE from V_DDT_DTL where FLT_KEY=#FLTKEY# AND FLT_DATE=#FLTDATE# AND ULD_KEY=P1.uld_bt_no AND TRF_TYPE IN ('TT','IF') AND ROWNUM=1) as transitType,
      	decode(P1.bb_ind,'Y','Y',decode(P1.NEW_CHECKIN_ULD,'Y','Y',(select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(P1.uld_bt_no, 1, 3)))) as bulkInd,
      	P1.eic_yn as eicInd,
      	(SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = P1.uld_bt_no AND ROWNUM  &lt;=9) AS shcCode
  from  exp_pmanifest_uld p1
      	left join exp_offload_uld t1 on t1.uld_bt_no=p1.uld_bt_no AND T1.FLT_KEY = P1.FLT_KEY AND T1.FLT_DATE=P1.FLT_DATE
  where  P1.flt_key = #FLTKEY#	and
         P1.flt_date = to_date(#FLTDATE#,'DDMONYY') and
         P1.uld_bt_no = #ULDKEY#
	</select>
<select id="getconfirmoffloadTarmaculdHeader" parameterClass="map" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	SELECT P1.uld_bt_no as uldBtNo, 
			  P1.CONTR_CODE as contrCode, 
			  P1.UNLDG_PT as unldgpt,
			  PKG_COMMON.get_flt_eta(#FLTKEY#, #FLTDATE#, 'D')   as etd,
			  (CASE WHEN
        (SELECT 
              COUNT(1) 
          FROM
              exp_pman_tarmac_uld_awb
        WHERE FLT_KEY=#FLTKEY# AND
              FLT_DATE=#FLTDATE# AND
              AWB_NO=(select awb_no from exp_pman_tarmac_uld_awb where ULD_BT_NO=#ULDKEY# and flt_key=#FLTKEY# and flt_date=#FLTDATE# and rownum=1)) > 1
              THEN 'M'
              ELSE 'P'
              END) as pkgType,
              (CASE WHEN  (Select Bb_Ind From Exp_Flt_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Key=P1.uld_bt_no And Rownum=1) = 'Y' THEN 'B'                                
			   ELSE CASE WHEN (select COUNT(1) from uld_inventory where uld_key=P1.uld_bt_no and (PPK_IND='Y' OR MIX_PPK_IND='Y' OR HANDLING_MODE IN ('PPK'))) >0 THEN 'P'
               ELSE 'B'
               END
               END) as newPkgInd,
			  DECODE(T1.OFFLOAD_ULD_YN,'','N',T1.OFFLOAD_ULD_YN) as preOffULDInd,  
			  T1.rmk as remark,
      	(SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = P1.uld_bt_no AND ROWNUM  &lt;=9) AS shcCode,
      	(select TRF_TYPE from V_DDT_DTL where FLT_KEY=#FLTKEY# AND FLT_DATE=#FLTDATE# AND ULD_KEY=#ULDKEY# AND TRF_TYPE IN ('TT','IF') AND ROWNUM=1) as transitType,
        decode((select BB_IND from exp_flt_uld where flt_key=#FLTKEY# AND FLT_DATE=#FLTDATE# AND ULD_KEY=#ULDKEY# and rownum=1),'Y','Y',decode(T2.NEW_CHECKIN_ULD,'Y','Y',(select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(P1.uld_bt_no, 1, 3)))) as bulkInd,
      	(select EIC_YN from exp_flt_uld where flt_key=#FLTKEY# AND FLT_DATE=#FLTDATE# AND ULD_KEY=#ULDKEY# and rownum=1) as eicInd,
      	'Tarmac' as type,
      	uld.transit_type as transferType
  from  exp_pman_tarmac_uld p1
      	left join exp_offload_uld t1 on t1.uld_bt_no=p1.uld_bt_no AND T1.FLT_KEY = P1.FLT_KEY AND T1.FLT_DATE=P1.FLT_DATE
        LEFT JOIN EXP_PMANIFEST_ULD T2 ON t2.uld_bt_no=p1.uld_bt_no AND T2.FLT_KEY = P1.FLT_KEY AND T2.FLT_DATE=P1.FLT_DATE
        LEFT JOIN ULD_INVENTORY uld ON uld.uld_key = p1.uld_bt_no
  where  P1.flt_key = #FLTKEY#	and
         P1.flt_date = to_date(#FLTDATE#,'DDMONYY') and
         P1.uld_bt_no = #ULDKEY#
	</select>
	
	<select id="checkoffloadUldIsPpkOrMixppk" parameterClass="map" resultClass="java.lang.Integer">
	SELECT COUNT(1)
	FROM EXP_FLT_ULD
	WHERE flt_key = #FLTKEY#
	AND flt_date  = to_date(#FLTDATE#,'DDMONYY')
	AND ULD_KEY = #ULDKEY#
	AND (PPK_TYPE ='P'
	OR PPK_TYPE   ='M' OR HANDLING_MODE='PPK' OR HANDLING_MODE='NBK')
	AND ROWNUM    =1
	</select>
	
	<select id="checkpreoffloadcreateornot" parameterClass="map" resultClass="java.lang.Integer">
	select COUNT(1) from exp_offload_uld where uld_bt_no=#ULDKEY# and flt_key=#FLTKEY# and flt_date=#FLTDATE# and offload_uld_yn='Y'
	</select>
	
		<select id="fetchPreOffloadUldDetails" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	SELECT A.AWB_NO AS awbNo,A.TR_NO AS trNo,
         to_char(A.AWB_DATE,'DDMONYY') AS awbDate,
         A.ASSIGNED_PCS AS assignedPc,
         A.ASSIGNED_WT AS assignedWt,
         'Y' as isChecked,
        decode((SELECT SUM(OFFLOAD_PCS) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO),'','',
         (SELECT SUM(OFFLOAD_PCS) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO)) as offPcs,
         decode((SELECT SUM(OFFLOAD_WT) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO),'','',
         (SELECT SUM(OFFLOAD_WT) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO)) as offWt,
          a.uld_bt_no as uldKey,
         '' AS offBulkPcs,
         ''  AS offBulkWt,
         pkg_common.get_awb_splcodes(A.AWB_NO,to_char(A.AWB_DATE,'DDMONYY') ,(SELECT AWB_TYPE FROM AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=to_char(A.AWB_DATE,'DDMONYY') AND ROWNUM=1)) AS shcCode,
         'Normal' as type
  FROM
      EXP_PMANIFEST_ULD_AWB A
  WHERE
  A.FLT_KEY = #FLTKEY# AND
  A.FLT_DATE = to_date(#FLTDATE#,'DDMONYY') AND
  A.ULD_BT_NO = #ULDKEY#
  </select>
 <select id="fetchPreOffloadTarmacUldDetails" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
   SELECT A.AWB_NO AS awbNo,
       to_char(A.AWB_DATE,'DDMONYY') AS awbDate,
       A.ASSIGNED_PCS AS assignedPc,
       A.ASSIGNED_WT AS assignedWt,
       'Y' as isChecked,
      decode((SELECT SUM(OFFLOAD_PCS) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO),'',A.ASSIGNED_PCS,
      (SELECT SUM(OFFLOAD_PCS) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO)) as offPcs,
      decode((SELECT SUM(OFFLOAD_WT) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO),'',A.ASSIGNED_WT,
      (SELECT SUM(OFFLOAD_WT) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO)) as offWt,
      A.uld_bt_no as uldKey,
      pkg_common.get_awb_splcodes(A.AWB_NO,to_char(A.AWB_DATE,'DDMONYY') ,(SELECT AWB_TYPE FROM AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=to_char(A.AWB_DATE,'DDMONYY') AND ROWNUM=1)) AS shcCode,
      'Tarmac' AS type
 FROM
      EXP_PMAN_tarmac_ULD_AWB A
 WHERE
      A.FLT_KEY = #FLTKEY# AND
      A.FLT_DATE = to_date(#FLTDATE#,'DDMONYY') AND
      A.ULD_BT_NO = #ULDKEY#
  </select>
 <select id="getEicCompFlg"  parameterClass="map" resultClass="java.util.HashMap">
  select eic_flg as eicFlag, empty_flg as empFlag,
(decode((select bldup_complete from exp_pmanifest_uld where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldKey#),'Y','Y','N','N','','N')) AS compFlg
from
uld_inventory where uld_key=#uldKey#
  </select>
  <select id="fetchPkgTypeInExpPmanUldAwb"  parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="java.lang.String">
  SELECT ppk_type as ppkType FROM EXP_PMANIFEST_ULD_AWB WHERE ULD_BT_NO=#uldBtNo# and awb_no=#awbNo# and awb_date=to_date(#awbDate#,'DDMONYY') and flt_key=#fltKey# and flt_date=to_date(#fltDate#,'DDMONYY') and rownum=1
  </select>
  <select id="checkBupCompleteorNotinOutBound"  parameterClass="map" resultClass="java.lang.String">
  SELECT DECODE((select bldup_complete from exp_pmanifest_uld where uld_bt_no=#uldKey# and flt_key=#fltKey# and flt_date=#fltDate#),'Y','Y','N','N','','N') FROM DUAL
  </select>
  <select id="checkULDisPPKOrNotInOutbound"  parameterClass="map" resultClass="java.lang.Integer">
  SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_FLOW='E' AND (PPK_IND='Y' OR MIX_PPK_IND = 'Y') AND ULD_KEY = #uldKey#
  </select>
   <select id="checkULDistransitPPKOrNotInOutbound"  parameterClass="map" resultClass="java.lang.Integer">
  SELECT COUNT(1) FROM ULD_INVENTORY WHERE NVL(TRANSIT_FLG,'N')='Y' AND HANDLING_MODE IN('PPK','NBK') AND ULD_KEY = #uldKey#
  </select>
  <select id="fetchULDMaxWtInOutbound"  parameterClass="map" resultClass="java.lang.String">
  select max_weight from uld_group_carr where uld_type=#uldType# and carr_code=#uldCarr#
  </select>
  <select id="fetchPmanWtInOutBound"  parameterClass="map" resultClass="java.lang.String">
  select sum(bulk_wt) from exp_pmanifest_awb where awb_no=(select substr(#awbNo#,0,3)||substr(#awbNo#,5,9) from dual) and flt_key=#fltKey# and flt_date=#fltDate#
  </select>
  <select id="getPkgQtyDetails"  parameterClass="map" resultClass="cargo.cms.export.bo.OutBoundULDListBO">
   <!-- select sum(PKG_PCS) AS unPkg, sum(QTY) AS unQty, sum(QU) AS unUnit
    	FROM EXP_DGD 
  		WHERE OP_ON = #overPackId# AND APIO_ID = #apioId# AND UN_ID = #unNo# -->
  	SELECT 
  		SUM(A.PKG_PCS) AS unPkg,  A.QTY AS unQty, A.QU AS unUnit
   	FROM EXP_DGD A, EXP_PMANIFEST_ULD_AWB B 
    WHERE B.TR_NO=#trNo# AND A.AWB_NO = B.AWB_NO AND A.AWB_DATE = B.AWB_DATE AND (A.OP_ON IS NULL OR A.OP_ON = nvl(#overPackId#,A.OP_ON)) 
    and (A.APIO_ID IS NULL OR A.APIO_ID = nvl(#apioId#,A.APIO_ID)) and A.UN_ID = nvl(#unNo#,A.UN_ID) GROUP BY A.QTY, A.QU
  </select>
  
    <select id="getTotOpidDetails"  parameterClass="map" resultClass="java.lang.String">
      select decode(total,0,'',total) from (select (select count(distinct(apio_id)) from exp_pmanifest_uld_awb_un where overpack_id=#opId# AND APIO_ID IS NOT NULL AND TR_NO=#trNo#) + 
       (SELECT COUNT(DISTINCT(UN_TR_NO)) FROM exp_pmanifest_uld_awb_un where overpack_id=#opId# AND APIO_ID IS NULL AND TR_NO=#trNo#) + 
       (SELECT COUNT(DISTINCT(UN_TR_NO)) FROM exp_pmanifest_uld_awb_un where overpack_id IS NULL AND APIO_ID = #opId# AND TR_NO=#trNo#) as total from dual)
    </select>
    
    <select id="getTotApidDetails"  parameterClass="map" resultClass="java.lang.String">
    select DECODE(count(DISTINCT(UN_TR_NO)),'0','',count(DISTINCT(UN_TR_NO))) from exp_pmanifest_uld_awb_un 
    where 
    overpack_id=#opId# AND
	apio_id = #apId# and 
    un_tr_no is not null AND TR_NO=#trNo#
    </select>
  
  <select id="getUnloadpkgOpidDetails"  parameterClass="map" resultClass="java.lang.String">
  select load_qty from exp_pmanifest_uld_awb_un a where a.tr_no=#trNo# and nvl(a.overpack_id,'*')=nvl(#overPackId#,'*')  and nvl(a.APIO_ID,'*')=nvl(#apioId#,'*') and nvl(a.un_tr_no,'*') =nvl(#unNo#,'*') and rownum=1
  </select>
  <select id="checkOffloadIsCompleteOrNotforULD" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="java.lang.Integer">
  select COUNT(1) from exp_offload_uld where uld_bt_no=#uldBtNo# and flt_key=#fltKey# and flt_date=#fltDate# and confirmed_yn='Y'
  </select>
  
  <select id="checkUldExistOrNotInUldInventory" parameterClass="java.lang.String" resultClass="java.lang.Integer">
  select COUNT(1) from awb_inventory where uld_key=#PARAM#
  </select>
  
  <select id="getOutboundPpkType" parameterClass="java.lang.String" resultClass="java.lang.String">
  	SELECT CASE WHEN PPK_IND = 'N' AND MIX_PPK_IND = 'N' THEN 'B'
                                  ELSE CASE WHEN PPK_IND = 'Y' AND MIX_PPK_IND = 'N' THEN 'P' 
                                  ELSE CASE WHEN PPK_IND = 'N' AND MIX_PPK_IND = 'Y' THEN 'M'
                                  ELSE NULL END END END FROM ULD_INVENTORY WHERE ULD_KEY=#PARAM#
  </select>
  
  <select id="getOutboundCarrier" parameterClass="java.lang.String" resultClass="java.lang.String">
  	select carr_code FROM ULD_INVENTORY WHERE ULD_KEY=#PARAM#
  </select>
  
  <update id="updateUldInvInEmptyandOfloadFlg" parameterClass="map" >
  update uld_inventory set empty_flg=#emptyFlg#,CARR_CODE=null,flt_type=null,FLT_NO=null, flt_key=null, flt_date=null,OFLD_FLG='N' where uld_key=#uldKey#
  </update>
  
  <select id="checkHandlingInUldInv" parameterClass="map" resultClass="java.lang.Integer">
  	select count(*) from uld_inventory where handling_mode='DT' and uld_key=#uldKey#
  </select>
  
  <update id="updateHandlingInUldInv" parameterClass="map" >
  update uld_inventory set handling_mode=null where uld_key=#uldKey#
  </update>
  <update id="updatePkgTypeInExpOffloaduld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" >
  update exp_offload_uld set ppk_type='B' where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldBtNo#
  </update>
  
  <update id="updateWtsInUld" parameterClass="java.lang.String" >
   update uld_inventory set second_wt=null,third_wt=null,ref_wt=null where uld_key=#PARAM#
  </update>
  
  <select id="getPpkMixFlags" parameterClass="map" resultClass="java.util.HashMap">
  	select ppk_ind AS ppkInd, mix_ppk_ind AS mixInd from uld_inventory where uld_key=#uldKey#
  </select>
  <select id="checkTarmacPPKIndicatorInULD" parameterClass="map" resultClass="java.lang.Integer">
  	select count(1) from exp_pman_tarmac_uld_awb where uld_bt_no=#uldKey#
  </select>
  <select id="getAwbDateFromExpPmanUldAwb" parameterClass="map" resultClass="java.lang.String">
  	select TO_CHAR(AWB_DATE,'DDMONYY') from exp_pmanifest_uld_awb where awb_no=#awbNo# and flt_key=#fltKey# and flt_date=#fltDate# AND ULD_BT_NO=#uldKey# and rownum=1
  </select>
 
  <select id="getAwbDateFromExpPmanTarmacAwb" parameterClass="map" resultClass="java.lang.String">
  	select TO_CHAR(AWB_DATE,'DDMONYY') from exp_pman_tarmac_awb where awb_no=#awbNo# and flt_key=#fltKey# and flt_date=#fltDate# AND rownum=1
  </select>

  <select id="checkHHtUldBulkInd" parameterClass="map" resultClass="java.lang.Integer">
  <![CDATA[
  SELECT COUNT(1) FROM (
  select COUNT(1) cnt from exp_pmanifest_uld q 
  	where
  	Q.FLT_KEY = #fltKey# AND
  	Q.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
  	Q.ULD_BT_NO=#uldKey# AND
  	(Q.bb_ind = 'Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(Q.uld_bt_no, 1, 3)) = 'Y' OR 
     q.NEW_CHECKIN_ULD = 'Y') and rownum=1
     UNION ALL
     SELECT COUNT(1) cnt FROM EXP_FLT_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND BB_IND ='Y' AND ULD_KEY=#uldKey# AND NOT EXISTS (SELECT ULD_BT_NO FROM EXP_PMANIFEST_ULD B WHERE B.FLT_KEY=#fltKey# AND B.FLT_DATE=#fltDate# AND B.ULD_BT_NO=#uldKey#)) C WHERE C.cnt > 0
     ]]>	
     </select>
  <select id="getAwbDateFromExpPmanUldAwbHHTBulk" parameterClass="map" resultClass="java.lang.String">
  	SELECT TO_CHAR(AWB_DATE,'DDMONYY') FROM exp_pmanifest_uld_awb where flt_key=#fltKey# and flt_date=#fltDate# and awb_no=#awbNo# AND rownum=1
  </select>
  <select id="checkBulkawbismanifestornot"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.Integer">
  select COUNT(1) from 
  exp_pmanifest_uld q 
  where
  Q.FLT_KEY = #fltKey# AND
  Q.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
  Q.ULD_BT_NO=#uldKey# AND
  (q.bb_ind = 'Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(Q.uld_bt_no, 1, 3)) = 'Y') and rownum=1
  AND NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_ULD_AWB WHERE ULD_BT_NO=#uldKey# AND AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND FLT_KEY=#fltKey# AND FLT_DATE=to_date(#fltDate#,'DDMONYY'))
  </select>
  
  <update id="updateFirstSecondThirdWeight" parameterClass="map" >
  	update uld_inventory set FIRST_WT=null, SECOND_WT=null, THIRD_WT=null,FINAL_WEIGHT='N',double_wgt_rslt=null,X_RAY_RES=null,X_RAY_REQ=null,TR_TYPE='COFFC' where uld_key=#uldKey#
  </update>
  <update id="updateSecondThirdWeight" parameterClass="map" >
  	update uld_inventory set SECOND_WT=null, THIRD_WT=null, FINAL_WEIGHT='N',double_wgt_rslt=null,TR_TYPE=#trtype# where uld_key=#uldKey#
  </update>
  
  <update id="updateManifestFlgInExpUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" >
	   update exp_uld_awb set manifest_yn = 'N', closed_yn = 'N' where uld_key=#uldBtNo# 
      		and rcl_no IN (SELECT RCL_NO FROM EXP_RCL_HD WHERE RCL_NO IN 
	    	(SELECT RCL_NO FROM EXP_RCL_DTL WHERE ULD_KEY=#uldBtNo# UNION SELECT RCL_NO FROM EXP_RCL_BRKDN WHERE ULD_KEY=#uldBtNo# ) AND STATUS = 'S')
  </update>
  
  <update id="updateTransHdlgFlgInExpOffldULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" >
  	update exp_offload_uld set transit_flg=#transitFlg#,hdlg_mode=#hdlgMode#,gross_wt=#grossWt#,TARE_WT=#tareWt#,SECOND_WT=#secondWt#,THIRD_WT=#thirdWt#,FINAL_WEIGHT=#finalWt#,BB_IND=#bbInd#,checked_in_flag='N' where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldBtNo#
  </update>
  
  <update id="updateTransHdlgFlgInExpPmanULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" >
  update exp_pmanifest_uld set transit_flg=#transitFlg#,hdlg_mode=#hdlgMode#,gross_wt=#grossWt#,tare_wt=#tareWt# where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldBtNo#
  </update>
	<update id="updateEICOfldFltDetailsInULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" >
	update uld_inventory set flt_key=null,flt_date=null,flt_type = null,owned_inv = 'Y',ofld_flg='N' where uld_key in (select uld_key from uld_inventory where base_plt=#uldBtNo#)
	</update>
	<update id="updateTopPalletDetails" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" >
		update uld_inventory set flt_key=#fltKey#,flt_date=#fltDate#,flt_type = 'E' where uld_key = #uldBtNo#
	</update>
	<update id="updateBasePalletDetails" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" >
		update uld_inventory set flt_key=#fltKey#,flt_date=#fltDate#,flt_type = 'E' where uld_key in (select uld_key from uld_inventory where base_plt=#uldBtNo#)
	</update>
	<select id="fetchDummyUldInCmsrules" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="java.lang.String">
  select RULE_VALUE from cmsrules where RULE_CODE='Dummy_H_Container'
  </select>
  <select id="fetchConfirmDummyUldInCmsrules" parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" resultClass="java.lang.String">
  select RULE_VALUE from cmsrules where RULE_CODE='Dummy_H_Container'
  </select>
		<select id="getconfirmoffloadDisableuldDetails" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	<!-- 
	select a.awb_no as awbNo,
			to_char(a.awb_date,'DDMONYY') as awbDate, 
			a.assigned_pcs as assignedPc, 
			a.assigned_wt as assignedWt,
			'Y' as isChecked,
      a.offload_pcs as offPcs,
      a.OFFLOAD_WT as offWt,
      #ULDKEY# as uldKey,
      (SELECT
         PMAN_BULK_PCS 
  FROM
         AWB
  WHERE AWB_NO=A.AWB_NO AND 
        AWB_DATE=A.AWB_DATE AND (
        (select H_CONT_IND from mast_uld_type where code = substr(A.ULD_BT_NO, 1, 3)) = 'Y' OR
        (select bb_ind from exp_pmanifest_uld where uld_bt_no=A.ULD_BT_NO and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE) = 'Y' OR
        (select airside_brkdn from exp_pmanifest_uld where uld_bt_no=A.ULD_BT_NO and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE) = 'Y')) AS offBulkPcs,
      (SELECT
         PMAN_BULK_WT 
  FROM
         AWB
  WHERE AWB_NO=A.AWB_NO AND 
        AWB_DATE=A.AWB_DATE AND (
        (select H_CONT_IND from mast_uld_type where code = substr(A.ULD_BT_NO, 1, 3)) = 'Y' OR
        (select bb_ind from exp_pmanifest_uld where uld_bt_no=A.ULD_BT_NO and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE) = 'Y' OR
        (select airside_brkdn from exp_pmanifest_uld where uld_bt_no=A.ULD_BT_NO and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE) = 'Y')) AS offBulkWt
		from   exp_offload_uld_awb A
		where  flt_key = #FLTKEY#
		and    flt_date = to_date(#FLTDATE#,'DDMONYY')
		and    uld_bt_no =  #ULDKEY#
		and    offload_type = 'U' -->
		 SELECT A.AWB_NO AS awbNo,A.TR_NO trNo,
         to_char(A.AWB_DATE,'DDMONYY') AS awbDate,
         A.ASSIGNED_PCS AS assignedPc,
         A.ASSIGNED_WT AS assignedWt,
         'Y' as isChecked,
         A.ASSIGNED_PCS as offPcs,
         A.ASSIGNED_WT as offWt,
         #ULDKEY# as uldKey,
         '' AS offBulkPcs,
         ''  AS offBulkWt,
         pkg_common.get_awb_splcodes(A.AWB_NO,to_char(A.AWB_DATE,'DDMONYY') ,(SELECT AWB_TYPE FROM AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=to_char(A.AWB_DATE,'DDMONYY') AND ROWNUM=1)) AS shcCode,
         'Normal' as type
  FROM
      EXP_PMANIFEST_ULD_AWB A
  WHERE
  A.FLT_KEY = #FLTKEY# AND
  A.FLT_DATE = to_date(#FLTDATE#,'DDMONYY') AND
  A.ULD_BT_NO = #ULDKEY#
	</select>
	<select id="getconfirmoffloaduldDetails" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	<!--  
	select a.awb_no as awbNo,
			to_char(a.awb_date,'DDMONYY') as awbDate, 
			a.assigned_pcs as assignedPc, 
			a.assigned_wt as assignedWt,
      (SELECT
         PMAN_BULK_PCS 
  FROM
         AWB
  WHERE AWB_NO=A.AWB_NO AND 
        AWB_DATE=A.AWB_DATE AND (
        (select H_CONT_IND from mast_uld_type where code = substr(A.ULD_BT_NO, 1, 3)) = 'Y' OR
        (select bb_ind from exp_pmanifest_uld where uld_bt_no=A.ULD_BT_NO and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE) = 'Y' OR
        (select airside_brkdn from exp_pmanifest_uld where uld_bt_no=A.ULD_BT_NO and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE) = 'Y')) AS offBulkPcs,
      (SELECT
         PMAN_BULK_WT 
  FROM
         AWB
  WHERE AWB_NO=A.AWB_NO AND 
        AWB_DATE=A.AWB_DATE AND (
        (select H_CONT_IND from mast_uld_type where code = substr(A.ULD_BT_NO, 1, 3)) = 'Y' OR
        (select bb_ind from exp_pmanifest_uld where uld_bt_no=A.ULD_BT_NO and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE) = 'Y' OR
        (select airside_brkdn from exp_pmanifest_uld where uld_bt_no=A.ULD_BT_NO and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE) = 'Y')) AS offBulkWt
		from   exp_offload_uld_awb A
		where  flt_key = #FLTKEY#
		and    flt_date = to_date(#FLTDATE#,'DDMONYY')
		and    uld_bt_no =  #ULDKEY#
		and    offload_type = 'U'-->
		
  SELECT A.AWB_NO AS awbNo,A.TR_NO AS trNo,
         to_char(A.AWB_DATE,'DDMONYY') AS awbDate,
         A.ASSIGNED_PCS AS assignedPc,
         A.ASSIGNED_WT AS assignedWt,
         '' AS offBulkPcs,
         ''  AS offBulkWt,
         pkg_common.get_awb_splcodes(A.AWB_NO,to_char(A.AWB_DATE,'DDMONYY') ,(SELECT AWB_TYPE FROM AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=to_char(A.AWB_DATE,'DDMONYY') AND ROWNUM=1)) AS shcCode,
         'Normal' as type
  FROM
      EXP_PMANIFEST_ULD_AWB A
  WHERE
  A.FLT_KEY = #FLTKEY# AND
  A.FLT_DATE = to_date(#FLTDATE#,'DDMONYY') AND
  A.ULD_BT_NO = #ULDKEY#
	</select>	

<select id="getconfirmoffloaduldBulkDetails" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
 <!--  
 select awbNo,awbDate,fltKey,fltDate,oldUld,offBulkPcs,offBulkWt,assignedPc,assignedWt,TYPE,pkg_common.get_awb_splcodes(awbNo,awbDate ,(SELECT AWB_TYPE FROM AWB WHERE AWB_NO=awbNo AND AWB_DATE=awbDate AND ROWNUM=1)) AS shcCode,pkgType 
 from (select 
 awbNo,awbDate,fltKey,fltDate,uldKey AS oldUld,'' AS pkgType,
 (select sum(bulk_pcs) from exp_pman_tarmac_awb c where c.flt_key = fltKey and c.flt_date = fltDate and awb_no=awbNo and awb_date=awbDate) as offBulkPcs,
 (select sum(bulk_wt) from exp_pman_tarmac_awb c where c.flt_key = fltKey and c.flt_date = fltDate and awb_no=awbno and awb_date=awbdate) as offBulkWt,
 (select sum(bulk_pcs) from exp_pman_tarmac_awb c where c.flt_key = fltKey and c.flt_date = fltDate and awb_no=awbNo and awb_date=awbDate) as assignedPc,
 (select sum(bulk_wt) from exp_pman_tarmac_awb c where c.flt_key = fltKey and c.flt_date = fltDate and awb_no=awbno and awb_date=awbdate) as assignedWt,
 'Tarmac' AS type
 from( 
 select p.awb_no awbNo,TO_CHAR(P.AWB_DATE,'DDMONYY') awbDate, p.flt_key fltKey,TO_CHAR(P.FLT_DATE,'DDMONYY') fltDate,P.ULD_BT_NO AS uldKey from 
  exp_pman_tarmac_uld_awb p,EXP_PMAN_TARMAC_AWB K,exp_pman_tarmac_uld q
  LEFT JOIN exp_pmanifest_uld r ON  r.flt_key = q.flt_key and r.flt_date = q.flt_date and r.uld_bt_no = q.uld_bt_no 
  LEFT JOIN EXP_FLT_ULD S ON S.flt_key = q.flt_key and S.flt_date = q.flt_date and S.uld_KEY = q.uld_bt_no 
  where
  q.flt_key = p.flt_key and 
  q.flt_date = p.flt_date and
  q.uld_bt_no = p.uld_bt_no and
  K.AWB_NO = P.AWB_NO AND 
  K.AWB_DATE = P.AWB_DATE AND
  K.BULK_PCS &gt;0 AND
  p.FLT_KEY = #FLTKEY# AND
  p.FLT_DATE = to_date(#FLTDATE#,'DDMONYY') and 
  (r.bb_ind = 'Y' or r.new_checkin_uld='Y' or (select H_CONT_IND from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y')
  group by p.FLT_KEY,p.FLT_DATE,p.awb_no,P.AWB_DATE,P.ULD_BT_NO)
  UNION ALL
select 
 awbNo,awbDate,fltKey,fltDate,uldKey AS oldUld,pkgType
 ,
(select sum(assigned_pcs) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND 
 c.flt_key = #FLTKEY# and c.flt_date = to_date(#FLTDATE#,'DDMONYY') and C.AWB_NO=awbNo AND
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select H_CONT_IND from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y')) as offBulkPcs,
(select sum(assigned_wt) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND
c.flt_key = #FLTKEY# and c.flt_date = to_date(#FLTDATE#,'DDMONYY') and C.AWB_NO=awbNo AND 
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select H_CONT_IND from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y')) as offBulkWt,
 (select sum(assigned_pcs) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND c.flt_key = #FLTKEY# and c.flt_date = to_date(#FLTDATE#,'DDMONYY') and 
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select H_CONT_IND from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y') and c.awb_no = awbNo and c.uld_bt_no=uldKey) as assignedPc,
(select sum(assigned_wt) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND c.flt_key = #FLTKEY# and c.flt_date = to_date(#FLTDATE#,'DDMONYY') and 
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select H_CONT_IND from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y') and c.awb_no = awbNo and c.uld_bt_no=uldkey) as assignedWt,
 'Normal' AS type
 from( 
 select p.awb_no awbNo,TO_CHAR(P.AWB_DATE,'DDMONYY') awbDate, p.flt_key fltKey,TO_CHAR(P.FLT_DATE,'DDMONYY') fltDate,P.ULD_BT_NO AS uldKey,P.PPK_TYPE AS pkgType from 
  exp_pmanifest_uld_awb p,exp_pmanifest_uld q 
  where
  p.flt_key = q.flt_key and 
  p.flt_date = q.flt_date and
  p.uld_bt_no = q.uld_bt_no and
  p.FLT_KEY = #FLTKEY# AND
  p.FLT_DATE = to_date(#FLTDATE#,'DDMONYY') and 
  (q.bb_ind = 'Y' or q.new_checkin_uld='Y' or (select H_CONT_IND from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y')
  group by p.FLT_KEY,p.FLT_DATE,p.awb_no,P.AWB_DATE,p.uld_bt_no,p.ppk_type)) order by type -->
 select awbNo,trNo,awbDate,fltKey,fltDate,oldUld,offBulkPcs,offBulkWt,assignedPc,assignedWt,unldgpt,TYPE,pkg_common.get_awb_splcodes(awbNo,awbDate ,(SELECT AWB_TYPE FROM AWB WHERE AWB_NO=awbNo AND AWB_DATE=awbDate AND ROWNUM=1)) AS shcCode,pkgType 
 from (select 
 awbNo,awbDate,fltKey,fltDate,'' AS oldUld,'' AS unldgpt,'' AS pkgType,
 (select sum(bulk_pcs) from exp_pman_tarmac_awb c where c.flt_key = fltKey and c.flt_date = fltDate and awb_no=awbNo and awb_date=awbDate) as offBulkPcs,
 (select sum(bulk_wt) from exp_pman_tarmac_awb c where c.flt_key = fltKey and c.flt_date = fltDate and awb_no=awbno and awb_date=awbdate) as offBulkWt,
 (select sum(bulk_pcs) from exp_pman_tarmac_awb c where c.flt_key = fltKey and c.flt_date = fltDate and awb_no=awbNo and awb_date=awbDate) as assignedPc,
 (select sum(bulk_wt) from exp_pman_tarmac_awb c where c.flt_key = fltKey and c.flt_date = fltDate and awb_no=awbno and awb_date=awbdate) as assignedWt,
 'Tarmac' AS type,'' as trNo
 from( 
 select 
  k.awb_no awbNo,TO_CHAR(k.AWB_DATE,'DDMONYY') awbDate, K.flt_key fltKey,TO_CHAR(K.FLT_DATE,'DDMONYY') fltDate
  from EXP_PMAN_TARMAC_AWB K
  Where 
  K.BULK_PCS &gt;0 AND FLT_KEY=#FLTKEY# AND FLT_DATE=#FLTDATE#)
  UNION ALL
select 
 awbNo,awbDate,fltKey,fltDate,uldKey AS oldUld,unldgpt,pkgType
 ,
(select sum(assigned_pcs) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND 
 c.flt_key = #FLTKEY# and c.flt_date = to_date(#FLTDATE#,'DDMONYY') and C.AWB_NO=awbNo AND
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y')) as offBulkPcs,
(select sum(assigned_wt) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND
c.flt_key = #FLTKEY# and c.flt_date = to_date(#FLTDATE#,'DDMONYY') and C.AWB_NO=awbNo AND 
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y')) as offBulkWt,
 (select sum(assigned_pcs) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND c.flt_key = #FLTKEY# and c.flt_date = to_date(#FLTDATE#,'DDMONYY') and 
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y') and c.awb_no = awbNo and c.uld_bt_no=uldKey) as assignedPc,
(select sum(assigned_wt) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND c.flt_key = #FLTKEY# and c.flt_date = to_date(#FLTDATE#,'DDMONYY') and 
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y') and c.awb_no = awbNo and c.uld_bt_no=uldkey) as assignedWt,
 'Normal' AS type,tr_no as trNo
 from( 
 select p.awb_no awbNo,p.tr_no,TO_CHAR(P.AWB_DATE,'DDMONYY') awbDate, p.flt_key fltKey,TO_CHAR(P.FLT_DATE,'DDMONYY') fltDate,P.ULD_BT_NO AS uldKey,P.unldg_pt AS unldgpt,P.PPK_TYPE AS pkgType from 
  exp_pmanifest_uld_awb p,exp_pmanifest_uld q 
  where
  p.flt_key = q.flt_key and 
  p.flt_date = q.flt_date and
  p.uld_bt_no = q.uld_bt_no and
  p.FLT_KEY = #FLTKEY# AND
  p.FLT_DATE = to_date(#FLTDATE#,'DDMONYY') and 
  (Q.Bb_Ind = 'Y' Or Q.New_Checkin_Uld='Y' Or (Select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) From Mast_Uld_Type Where Code = Substr(P.Uld_Bt_No, 1, 3)) = 'Y')
  Group By P.Flt_Key,P.Flt_Date,P.Awb_No,P.Awb_Date,P.Uld_Bt_No,P.unldg_pt,P.Ppk_Type,p.tr_no)
  UNION ALL
  select
  awbNo,awbDate,fltKey,fltDate,uldKey AS oldUld,unldgpt,pkgType
 ,(Select sum(assigned_pcs)  From   Exp_Pman_Tarmac_Uld_Awb R,Exp_Pman_Tarmac_Uld S
  Where  R.Flt_Key = S.Flt_Key And R.Flt_Date = S.Flt_Date And   R.ULD_BT_NO = S.ULD_BT_NO AND S.Uld_Bt_No = uldKey and  S.FLT_KEY = #FLTKEY# AND
  S.Flt_Date = To_Date(#FLTDATE#,'DDMONYY') And ((Select Bb_Ind From Exp_Flt_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Key=uldKey And Rownum=1) = 'Y' Or 
  (Select New_Checkin_Uld From Exp_Pmanifest_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Bt_No=Uldkey And Rownum=1)='Y' Or (Select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) From Mast_Uld_Type Where Code = Substr(uldKey, 1, 3)) = 'Y')) as offBulkPcs,
(Select  sum(assigned_WT)  From   Exp_Pman_Tarmac_Uld_Awb R,Exp_Pman_Tarmac_Uld S
  Where  R.Flt_Key = S.Flt_Key And R.Flt_Date = S.Flt_Date And   R.ULD_BT_NO = S.ULD_BT_NO AND S.Uld_Bt_No = uldKey and  S.FLT_KEY = #FLTKEY# AND
  S.Flt_Date = To_Date(#FLTDATE#,'DDMONYY') And ((Select Bb_Ind From Exp_Flt_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Key=uldKey And Rownum=1) = 'Y' Or 
  (Select New_Checkin_Uld From Exp_Pmanifest_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Bt_No=Uldkey And Rownum=1)='Y' Or (Select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) From Mast_Uld_Type Where Code = Substr(uldKey, 1, 3)) = 'Y')) As offBulkWt,
(Select Sum(Assigned_Pcs)  From   Exp_Pman_Tarmac_Uld_Awb R,Exp_Pman_Tarmac_Uld S
  Where  R.Flt_Key = S.Flt_Key And   R.Flt_Date = S.Flt_Date AND R.ULD_BT_NO = S.ULD_BT_NO And  S.Uld_Bt_No = uldKey AND R.AWB_NO=Awbno and  S.FLT_KEY = #FLTKEY# AND
  S.Flt_Date = To_Date(#FLTDATE#,'DDMONYY') And ((Select Bb_Ind From Exp_Flt_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Key=uldKey And Rownum=1) = 'Y' Or 
  (Select New_Checkin_Uld From Exp_Pmanifest_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Bt_No=Uldkey And Rownum=1)='Y' Or (Select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) From Mast_Uld_Type Where Code = Substr(uldKey, 1, 3)) = 'Y')) as assignedPc,
(Select sum(assigned_WT)  From   Exp_Pman_Tarmac_Uld_Awb R,Exp_Pman_Tarmac_Uld S
  Where  R.Flt_Key = S.Flt_Key And   R.Flt_Date = S.Flt_Date AND R.ULD_BT_NO = S.ULD_BT_NO And  S.Uld_Bt_No = uldKey AND R.AWB_NO=Awbno and  S.FLT_KEY = #FLTKEY# AND
  S.Flt_Date = To_Date(#FLTDATE#,'DDMONYY') And ((Select Bb_Ind From Exp_Flt_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Key=uldKey And Rownum=1) = 'Y' Or 
  (Select New_Checkin_Uld From Exp_Pmanifest_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Bt_No=Uldkey And Rownum=1)='Y' Or (Select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) From Mast_Uld_Type Where Code = Substr(uldKey, 1, 3)) = 'Y')) as assignedWt,
 'TarmacBB' AS type,'' as trNo
 From( 
  Select R.Awb_No Awbno,To_Char(R.Awb_Date,'DDMONYY') Awbdate, R.Flt_Key Fltkey,To_Char(R.Flt_Date,'DDMONYY') Fltdate,R.Uld_Bt_No As Uldkey,R.unldg_pt AS unldgpt,'B' As Pkgtype From 
  Exp_Pman_Tarmac_Uld_Awb R,Exp_Pman_Tarmac_Uld S,Exp_Pmanifest_Uld T 
  where
  R.Flt_Key = S.Flt_Key And 
  R.Flt_Date = S.Flt_Date And
  R.Uld_Bt_No = S.Uld_Bt_No And
  T.Flt_Key(+) = R.Flt_Key And 
  T.Flt_Date(+) = R.Flt_Date And
  T.uld_bt_no(+) = R.uld_bt_no and
  r.FLT_KEY = #FLTKEY# AND
  R.Flt_Date = To_Date(#FLTDATE#,'DDMONYY') And 
  ((Select Bb_Ind From Exp_Flt_Uld Where Flt_Key=#FLTKEY# And Flt_Date=#FLTDATE# And Uld_Key=R.Uld_Bt_No And Rownum=1) = 'Y' Or T.New_Checkin_Uld='Y' Or (Select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) From Mast_Uld_Type Where Code = Substr(R.Uld_Bt_No, 1, 3)) = 'Y')
  group by r.FLT_KEY,r.FLT_DATE,r.awb_no,r.AWB_DATE,r.uld_bt_no,R.unldg_pt))Order By Type,Olduld
</select>
	<select id="get_offloaded_cargo_delete_details" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	<!-- 
		select decode(t2.offload_type, 'A', 'By AWB', 'By ULD') as preOffloadType,
			t2.awb_no  as awbNo, 
			to_char(t2.awb_date,'DDMONYY') as awbDate,
			t1.uld_bt_no as uldBtNo, 
			t1.contr_code as contrCode, 
			decode(t1.uld_type, 'BT', 'Bulk', decode(t1.ppk_type, 'M', 'Mix', 'P', 'BUP', 'B', 'Buildup')) as pkgType, 
			t2.unldg_pt as unldgpt, 
			t2.assigned_pcs as assignedPc, 
			t2.assigned_wt as assignedWt, 
			t2.offload_pcs as offPcs, 
			t2.offload_wt as offWt, 
			t1.offload_uld_yn as offloadUldYn
		from   exp_offload_uld t1, exp_offload_uld_awb t2
		where  t1.flt_key = t2.flt_key
		and    t1.flt_date = t2.flt_date 
		and    t1.uld_bt_no = t2.uld_bt_no
		and    t2.offload_type = 'A'
		and    t2.flt_key =  #FLTKEY#
		and    t2.flt_date = to_date(#FLTDATE#,'DDMONYY')
		and    t2.confirmed_yn = 'Y'
		union 
		select 'By ULD' as preOffloadType, 
			null as awbNo,
			null  as awbDate,
			t1.uld_bt_no as uldBtNo, 
			t1.contr_code as contrCode, 
			decode(t1.ppk_type, 'M', 'Mix', 'P', 'BUP', 'B', 'Buildup') as pkgType, 
			t1.unldg_pt as unldgpt, 
			sum(t2.assigned_pcs)as assignedPc, 
			sum(t2.assigned_wt) as assignedWt, 
			sum(t2.offload_pcs) as offPcs, 
			sum(t2.offload_wt) as offWt,  
			t1.offload_uld_yn as offloadUldYn
		from   exp_offload_uld t1, exp_offload_uld_awb t2
		where  t1.flt_key = t2.flt_key
		and    t1.flt_date = t2.flt_date 
		and    t1.uld_bt_no = t2.uld_bt_no
		and    t2.offload_type = 'U'
		and    t2.flt_key =  #FLTKEY#
		and    t2.flt_date = to_date(#FLTDATE#,'DDMONYY')
		and    t2.confirmed_yn = 'Y'
		group by t1.uld_bt_no, t1.contr_code, t1.ppk_type, t1.unldg_pt, t1.offload_uld_yn -->
		
		    select t1.uld_bt_no as uldBtNo,
           t1.contr_code as contrCode, 
           DECODE(t1.PPK_TYPE, 'M', 'Mix', 'P', 'PrePack', 'B', 'Bulk') as pkgType,
           t1.OFFLOAD_ULD_YN as offloadUldYn,
           (SELECT SUM(OFFLOAD_PCS) FROM exp_offload_uld_awb t2 WHERE T2.uld_bt_no = T1.uld_bt_no AND T2.FLT_KEY = T1.FLT_KEY AND T2.FLT_DATE=T1.FLT_DATE and confirmed_yn='Y') as offPcs, 
		   (SELECT SUM(OFFLOAD_WT) FROM exp_offload_uld_awb t2  WHERE T2.uld_bt_no = T1.uld_bt_no AND T2.FLT_KEY = T1.FLT_KEY AND T2.FLT_DATE=T1.FLT_DATE and confirmed_yn='Y') as offWt,
	       t1.confirmed_yn as confirmInd,
	       t1.UNLDG_PT as unldgpt
           from
           exp_offload_uld t1
           join flt_opr FLTOPR on t1.flt_key = FLTOPR.flt_key and t1.flt_date = FLTOPR.sch_date AND FLT_TYPE='D'
           where
           t1.flt_key= #FLTKEY# and
           t1.flt_date=#FLTDATE# and
           t1.confirmed_yn='Y'
           <isNotEmpty property="loginCarrier">
           AND (FLTOPR.CARR_CODE = #loginCarrier#
           OR FLTOPR.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE= #loginCarrier#))
           </isNotEmpty>
	</select>

	<select id="getdeleteoffloaduldHeader" parameterClass="map" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		select loc_code as locn 
		from   uld_inventory
		where  uld_key =  #ULDKEY#	
	</select>	
	<select id="getTransitHandlingInExpPamnULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	select transit_flg as transitFlg,hdlg_mode as hdlgMode,GROSS_WT AS grossWt,TARE_WT AS tareWt,ROUND(GROSS_WT-TARE_WT) AS netWt from exp_pmanifest_uld where uld_bt_no=#uldBtNo# and flt_key=#fltKey# and flt_date=#fltDate# and rownum=1
	</select>
	<select id="getGrossTareInExpPamTarmacULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	SELECT A.GROSS_WT           AS grossWt,  A.TARE_WT                 AS tareWt,  ROUND(A.GROSS_WT-A.TARE_WT) AS netWt,  B.HANDLING_MODE AS hdlgMode FROM exp_pman_tarmac_uld A,ULD_INVENTORY B WHERE B.ULD_KEY= A.ULD_BT_NO AND A.uld_bt_no=#uldBtNo# AND A.flt_key    =#fltKey# AND A.flt_date   =#fltDate# AND rownum     =1
	</select>
	<select id="getTransitHandlingInExpOffldULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	select transit_flg as transitFlg,hdlg_mode as hdlgMode,GROSS_WT as grossWt,TARE_WT as tareWt,second_wt as secondWt,third_wt as thirdWt,FINAL_WEIGHT as finalWt,BB_IND AS bbInd from exp_offload_uld where uld_bt_no=#uldBtNo# and flt_key=#fltKey# and flt_date=#fltDate# and rownum=1
	</select>
	<select id="getSecThirdWtInExpOffldULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	select second_wt as secondWt,third_wt as thirdWt,FINAL_WEIGHT as finalWt from uld_inventory where uld_key=#uldBtNo#
	</select>
	<select id="getBBIndInExpFltUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	select bb_ind as bbInd from exp_flt_uld where uld_key=#uldBtNo# and flt_key=#fltKey# and flt_date=#fltDate# and rownum=1
	</select>
	<select id="getreasondeleteoffloaduldHeader" parameterClass="map" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		SELECT B.CONFIRMED_RMK as remark,
                B.OFFLOAD_REASON as offloadReason,
                PKG_COMMON.get_flt_eta(#FLTKEY#, #FLTDATE#, 'D')   as etd,
                A.TRF_TYPE AS transferType
       FROM
            EXP_OFFLOAD_ULD A,EXP_OFFLOAD_ULD_AWB B
      WHERE   B.FLT_KEY = A.FLT_KEY AND 
              B.FLT_DATE = A.FLT_DATE AND
              B.ULD_BT_NO = A.ULD_BT_NO AND
              A.flt_key = #FLTKEY# and
              A.flt_date = to_date(#FLTDATE#,'DDMONYY') and
              A.uld_bt_no =  #ULDKEY# and
              rownum=1
	</select>	
	
	<select id="getdeleteoffloaduldDetails" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		select awb_no as awbNo, 
		to_char(awb_date,'DDMONYY') as awbDate,
			offload_pcs as offPcs, 
			offload_wt as offWt,
			#ULDKEY# as uldBtNo,
			TYPE AS type
		from   exp_offload_uld_awb 
		where  flt_key = #FLTKEY#
		and    flt_date = to_date(#FLTDATE#,'DDMONYY')
		and    uld_bt_no =  #ULDKEY#
		AND    CONFIRMED_YN = 'Y'
	</select>	
	<select id="fetchDeleteCargoAWBList" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	 <![CDATA[
		select awb_no as awbNo, 
		       to_char(awb_date,'DDMONYY') as awbDate,
		       SUBSTR(TRIM(AWB_NO),1,3)||'-'||SUBSTR(TRIM(AWB_NO),4) as awbNoDisplay,
		       loc_code as locn,
		       locn_pcs as locnPcs,
			   TRIM(TO_CHAR(NVL(locn_wt,0), '9999990D99'))  as locnWt,
		 	   lsp_no AS lspNo,
		  	   uld_key as uldBtNo,
		  	   SEQ_NO as seqNo,
		  	   CARR_CODE as carr
		  from
		       awb_inventory 
		  where 
		       awb_no=#awbNo# and		       
		       awb_date=#awbDate# AND
               FLT_KEY IS NULL AND
               FLT_DATE IS NULL AND
               LOCN_PCS > 0 AND 
               LOCN_WT > 0
               ]]>
	</select>
		<select id="fetchDeleteCargoDummyAWBList" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	 <![CDATA[
		select awb_no as awbNo, 
		       to_char(awb_date,'DDMONYY') as awbDate,
		       SUBSTR(TRIM(AWB_NO),1,3)||'-'||SUBSTR(TRIM(AWB_NO),4) as awbNoDisplay,
		       loc_code as locn,
		       locn_pcs as locnPcs,
			   TRIM(TO_CHAR(NVL(locn_wt,0), '9999990D99'))  as locnWt,
		 	   lsp_no AS lspNo,
		  	   uld_key as uldBtNo,
		  	   SEQ_NO as seqNo,
		  	   CARR_CODE as carr
		  from
		       awb_inventory 
		  where 
		       awb_no=#awbNo# and		       
		       awb_date=#awbDate# AND
               FLT_KEY IS NULL AND
               FLT_DATE IS NULL AND
               LOCN_PCS > 0 AND 
               LOCN_WT > 0 and 
               uld_key = #uldKey#
               	]]>
	</select>
	<select id="getdeleteoffloadawbdetails" parameterClass="map"  resultClass="cargo.cms.export.bo.AWBStorageItemBO">
		select seq_no as seqNo,
			loc_code as locn,
			locn_pcs as pcs, 
			locn_wt as wt, 
			uld_key as uldBtNo, 
			lsp_no as lspNo
		from   awb_inventory
		where  awb_no = #AWBNO#
		and    awb_date = to_date(#AWBDATE#,'DDMONYY')		
		and    flt_key is null
	</select>	
	
	<!-- Offload Confirm Offloaded Cargo/Delete Offloaded Cargo/List Print Offloaded Cargo Related Queries End -->
	<!-- ######################################################################################################### -->
<!-- Added By swapna For Enquire pre Offload:Starts -->
	<select id="fetchPreOfldDetails"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.PreOffLoadItemBO">	
		
	select 'By AWB' as preOffloadType,t3.CATALOG catalog, 
		   (SELECT 
		          (CASE WHEN decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		          (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = C.CARR_CODE AND (SPLCODE.SPL_CODE = c.SPL_CODE1 OR SPLCODE.SPL_CODE = c.SPL_CODE2 OR SPLCODE.SPL_CODE = c.SPL_CODE3 OR SPLCODE.SPL_CODE = c.SPL_CODE4 OR SPLCODE.SPL_CODE = c.SPL_CODE5 OR SPLCODE.SPL_CODE = c.SPL_CODE6 OR SPLCODE.SPL_CODE = c.SPL_CODE7 OR SPLCODE.SPL_CODE = c.SPL_CODE8 OR SPLCODE.SPL_CODE = c.SPL_CODE9)) > 0
		          THEN 'Q' ELSE decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		          ELSE decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		       FROM AWB C WHERE  C.AWB_NO=t3.AWB_NO AND C.AWB_DATE=t3.AWB_DATE) as cargoType, 
		   t2.awb_no as awbNo,
		   t2.awb_no as awbNoDisplay, 
		   t1.uld_bt_no as uldBtNo, 
		   t1.contr_code as contrCode, 
		   decode(t1.uld_type, 'BT', 'Bulk', decode(t1.ppk_type, 'M', 'M', 'P', 'P', 'B', 'B')) as pkgType, 
		   t2.unldg_pt as unldgpt, 
		   t2.assigned_pcs as assignedPc, 
		   LTRIM(TO_CHAR(t2.assigned_wt,'9999999999.0')) as assignedWt, 
		   t2.PRE_OFF_PCS as preOffLoadPc, 
		   LTRIM(TO_CHAR(t2.PRE_OFF_WT,'9999999999.0')) as preOffLoadWt, 
		   t1.offload_uld_yn as preOffLoadULD, 
		   t2.confirmed_yn as confirmedYn,
		   t1.RMK as rmk,
		   t2.OFFLOAD_REASON offLoadReason
		   from   exp_offload_uld t1, exp_offload_uld_awb t2,AWB t3
		   where  t1.flt_key = t2.flt_key
		   and    t1.flt_date = t2.flt_date 
		   and    t1.uld_bt_no = t2.uld_bt_no
		   and    t2.offload_type = 'A'
		   and    t3.awb_no=t2.awb_no
		   and    t3.awb_date=t2.awb_date
		   and    t2.flt_key = #flightKey# 
		   and    t2.flt_date = #fltDate# 
	union 
	select 'By ULD' as preOffloadType,null as catalog,
	   	   null as cargoType,
		   null as awb_no, 
		   null as awbNoDisplay,
		   t1.uld_bt_no as uldBtNo, 
		   t1.contr_code as contrCode, 
		   decode(t1.ppk_type, 'M', 'M', 'P', 'P', 'B', 'B') as pkgType, 
		   t1.unldg_pt as unldgpt, 
		   sum(t2.assigned_pcs) as assignedPc, 
		   LTRIM(TO_CHAR(sum(t2.assigned_wt),'9999999999.0')) as assignedWt,
		   sum(t2.PRE_OFF_PCS) as preOffLoadPc,
		   TRIM(TO_CHAR(sum(t2.PRE_OFF_WT),'9999999999.0')) as preOffLoadWt,
		   t1.offload_uld_yn as preOffLoadULD, 
		   t1.confirmed_yn as confirmedYn,
		   t1.RMK as rmk,
		   t2.OFFLOAD_REASON offLoadReason 
		from   exp_offload_uld t1, exp_offload_uld_awb t2
		where  t1.flt_key = t2.flt_key
		and    t1.flt_date = t2.flt_date 
		and    t1.uld_bt_no = t2.uld_bt_no
		and    t2.offload_type = 'U'
		and    t2.flt_key = #flightKey# 
		and    t2.flt_date = #fltDate# 
		group by t1.uld_bt_no, t1.contr_code, t1.ppk_type, t1.unldg_pt, t1.offload_uld_yn, t2.confirmed_yn, t1.RMK, t2.OFFLOAD_REASON, t1.confirmed_yn			
   </select>	

	<select id="offload_exp_flt_validate"  parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		SELECT NVL(count(1),0) FROM FLT_OPR WHERE 
		<isEmpty property="fltKey">
			CARR_CODE = #fltPfx# AND FLT_NO = #fltSfx# 
		</isEmpty>
		<isNotEmpty property="fltKey">
			FLT_KEY = #fltKey# 
		</isNotEmpty>
			AND SCH_DATE= TO_DATE( #fltDate#, 'DDMONYY') AND FLT_TYPE='D'
   	</select>
   	
   	
   	<select id="isPortExistsForExportFlight" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
		SELECT 
					COUNT(1)
		FROM   
					FLT_OPR T1, FLT_OPR_LEG T2
		WHERE 
					T1.TR_NO = T2.TR_NO
		AND    T1.FLT_KEY = #fltKey#
		AND    T1.SCH_DATE = TO_DATE(#fltDate#,'DDMONYY')
		AND    T1.FLT_TYPE = 'D'
		AND    T2.OFF_POINT = #unldgPort#		
	</select>

      <select id="getTareGrossWtFromUldInvFltUld" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.FlightSearchBO" >
		SELECT 
				uld.tare_wt tareWt, uld.gross_wt grossWt
		FROM   	exp_flt_uld uld join
				uld_inventory inv on 
      			uld.uld_key = inv.uld_key
		WHERE 			
				uld.uld_key = #ULDNO#
				AND uld.FLT_KEY=#FLTKEY#
				AND	uld.FLT_DATE=TO_DATE(#FLTDATE#,'DDMONYY')	
	</select>
	<select id="getGrossWtFromOldFltUld" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.FlightSearchBO" >
		SELECT 
				uld.gross_wt grossWt
		FROM   	exp_flt_uld uld 
		WHERE 			
				uld.uld_key = #ULDNO#
				AND uld.FLT_KEY=#FLTKEY#
				AND	uld.FLT_DATE=TO_DATE(#FLTDATE#,'DDMONYY')
				AND uld.unldg_pt = #UNLDGPT#
				and rownum = 1
	</select>

	<update id="updateTareGrossWtUldInv" parameterClass="java.util.HashMap"  >
		UPDATE ULD_INVENTORY
		SET FIRST_WT = NVL(FIRST_WT,#GROSSWT#),
		GROSS_WEIGHT = #GROSSWT#,
		TARE_WEIGHT = #TAREWT#
		WHERE
		ULD_KEY = #ULDNO#
		AND FLT_KEY = #FLTKEY#
		AND FLT_DATE = TO_DATE(#FLTDATE#,'DDMONYY')	
	</update>
	
	<update id="updateTareWtExpFltUld" parameterClass="java.util.HashMap"  >
		UPDATE exp_flt_uld
		SET tare_wt = #TAREWT#,
		gross_wt = 	#GROSSWT#
		WHERE
		ULD_KEY = #ULDNO#
		AND FLT_KEY = #FLTKEY#
		AND FLT_DATE = TO_DATE(#FLTDATE#,'DDMONYY')	
	</update>
	
	<update id="updateTareWtExpPmanUld" parameterClass="java.util.HashMap"  >
		UPDATE exp_pmanifest_uld
		SET GROSS_WT = #GROSSWT#
		WHERE
		uld_bt_no = #ULDNO#
		AND FLT_KEY = #FLTKEY#
		AND FLT_DATE = TO_DATE(#FLTDATE#,'DDMONYY')	
	</update>
	
	
	
	<!-- Added By swapna For Enquire pre Offload:Ends -->
	
	<!-- Queries for enqBuJobOrder Starts -->
	<!-- Changed for QR -->
		<select id="getBuJobOrderList" parameterClass="cargo.cms.export.bo.BuildUpJobOrderSearchBO" resultClass="cargo.cms.export.bo.BUJobOrderBO">
		<!--
		SELECT G.FLT_KEY AS FLTNO,TO_CHAR(G.FLT_DATE,'DDMONYY')AS FLTDATE ,JO.JO_NO AS JOBORDERNO,
		UPPER(JO.STATUS) AS STATUS,		U.BU_ZONE buZone,U.QT_BU_TIME_FROM qtBUTimeFrom,
		U.QT_BU_TIME_TO qtBUTimeTo,U.ULD_KEY uldkey,
		G.UNLDG_PT unlgd,U.ULD_TYPE type,U.CNTR_CODE cntrCode,JO.RMK joRemarks,
		(SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY=U.ULD_KEY) AS locn, 
		U.CONTRACTOR as contractor
		FROM EXP_BU_GP G
    	JOIN EXP_BU_JO JO ON G.GP_NO = JO.GP_NO
    	JOIN EXP_BU_GP_ULD_TYPE U ON G.GP_NO = U.GP_NO
    	<isNotEmpty property="awbNo">
			JOIN EXP_BU_JO_DTL D ON JO.JO_NO = D.JO_NO AND	D.AWB_NO = #awbNo# 
		</isNotEmpty>  
		<isNotEmpty property="fltNo">
			JOIN FLT_OPR FLT ON FLT.FLT_KEY = G.FLT_KEY AND FLT.SCH_DATE  = G.FLT_DATE AND FLT.FLT_TYPE = 'D' AND	G.FLT_KEY = #fltNo# AND G.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
		</isNotEmpty>   	
    	<isNotEmpty property="loadFrom">
			LEFT JOIN EXP_BU_JO_LOCN L ON JO.JO_NO = L.JO_NO AND	(L.ULD_KEY = #loadFrom# OR L.LSP = #loadFrom#)  AND	(UPPER(JO.STATUS) NOT IN ('COMPLETE','FORCE COMPLETE'))
		</isNotEmpty>    	
    	WHERE 1=1			
		<isNotEmpty property="bujobOrderNo">
			AND	JO.JO_NO = #bujobOrderNo#
		</isNotEmpty>
		<isNotEmpty property="buZone">
			AND	U.BU_ZONE = #buZone#
		</isNotEmpty>
		<isNotEmpty property="qtBuFromHrs">
			<![CDATA[
			and TO_DATE(TO_CHAR(U.QT_BU_TIME_FROM,'DDMONYY HH24:MI') ,'DDMONYY HH24:MI')  >=TO_DATE(#qtBuFromHrs#,'DDMONYY HH24:MI') 
			and TO_DATE(TO_CHAR(U.QT_BU_TIME_TO,'DDMONYY HH24:MI'),'DDMONYY HH24:MI')   <= TO_DATE(#qtBuToMin#,'DDMONYY HH24:MI')
			]]>
		</isNotEmpty>
		<isNotEmpty property="etdTimeFrom">
			<![CDATA[
		AND	FLT.SCH_TIME BETWEEN (#etdTimeFrom#) AND (#etdTimeTo#)
			]]>
		</isNotEmpty>
		<isNotEmpty property="buUldNo">
			AND	U.ULD_KEY = #buUldNo#  AND	(UPPER(JO.STATUS) NOT IN ('COMPLETE','FORCE COMPLETE'))
		</isNotEmpty>
		<isNotEmpty property="status">
			AND	UPPER(JO.STATUS) = DECODE(UPPER(#status#),UPPER('Buildup Started'), UPPER('Started'), UPPER(#status#))
		</isNotEmpty>
		<isNotEmpty property="fltModule">
			AND	(FLT.FLT_MODULE1 = #fltModule# OR FLT.FLT_MODULE2 = #fltModule# )
		</isNotEmpty>
		<isNotEmpty property="contractor">
			AND	UPPER(U.CONTRACTOR) = UPPER(#contractor#)
		</isNotEmpty>
				
   	-->
   	SELECT G.FLT_KEY AS FLTNO,TO_CHAR(G.FLT_DATE,'DDMONYY')AS FLTDATE ,JO.JO_NO AS JOBORDERNO,
            UPPER(JO.STATUS) AS STATUS,CONFIRMED_YN as confirmed ,        U.BU_ZONE buZone, 
			qtBUTime.qtBUTimeFrom,
            qtBUTime.qtBUTimeTo,   
            U.ULD_KEY uldkey, G.UNLDG_PT unlgd,U.ULD_TYPE type,U.CNTR_CODE cntrCode,JO.RMK joRemarks,
            (SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY=U.ULD_KEY) AS locn, 
            U.CONTRACTOR as contractor
            FROM EXP_BU_GP G
      JOIN EXP_BU_JO JO ON G.GP_NO = JO.GP_NO
      JOIN EXP_BU_GP_ULD_TYPE U ON G.GP_NO = U.GP_NO
      JOIN FLT_OPR FLT ON FLT.FLT_KEY = G.FLT_KEY 
      AND FLT.SCH_DATE  = G.FLT_DATE AND FLT.FLT_TYPE = 'D'       
      <isNotEmpty property="awbNo">
                  JOIN EXP_BU_JO_DTL D ON JO.JO_NO = D.JO_NO 
                  AND  D.AWB_NO = #awbNo# AND D.AWB_DATE=NVL(TO_DATE(#awbDate#,'DDMONYY'),PKG_COMMON.GET_AWB_DATE(#awbNo#, 'E')) 
            </isNotEmpty>     
      <isNotEmpty property="loadFrom">
                  JOIN EXP_BU_JO_LOCN L ON JO.JO_NO = L.JO_NO AND  (L.ULD_KEY = #loadFrom# OR L.LSP = #loadFrom#)  
            </isNotEmpty>    
      		left join (select to_char(min(TIME_FROM),'DDMONYY HH24:MI') qtBUTimeFrom , 
      		to_char(max(TIME_TO),'DDMONYY HH24:MI')  qtBUTimeTo,  
      		to_char(min(TIME_FROM),'HH24MI') qtBUTimeFromTemp, 
          	to_char(max(TIME_TO),'HH24MI')  qtBUTimeToTemp,      		
      		atAllt.flt_key, atAllt.flt_date, D.JO_NO 
			            from QT_Allot atAllt
			            JOIN V_DDT_DTL ddt ON atAllt.flt_key = ddt.shp_cntg_FLT_KEY and atAllt.FLT_DATE = ddt.shp_cntg_FLT_DATE and shp_trf_type = 'QT'
			            JOIN EXP_BU_JO_DTL D ON ddt.AWB_NO = D.AWB_NO AND  ddt.AWB_date = D.AWB_date 
                  	where atAllt.flt_type = 'D' group by  atAllt.flt_key, atAllt.flt_date, D.JO_NO   )  qtBUTime
      on qtBUTime.flt_key = G.FLT_KEY and qtBUTime.FLT_DATE = G.FLT_DATE  and   JO.JO_NO = qtBUTime.JO_NO    
      WHERE 1=1               
      		<isNotEmpty property="fltNo">                  
                  AND    G.FLT_KEY = #fltNo# 
            </isNotEmpty> 
            <isNotEmpty property="fltDate">                  
                  AND G.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
            </isNotEmpty>                  
            <isNotEmpty property="bujobOrderNo">
                  AND   JO.JO_NO = #bujobOrderNo#
            </isNotEmpty>
            <isNotEmpty property="buZone">
                  AND   U.BU_ZONE = #buZone#
            </isNotEmpty>
            <isNotEmpty property="qtBuTimeFrom">
                  <![CDATA[
                  and qtBUTime.qtBUTimeFromTemp >= #qtBuTimeFrom#          
                  and qtBUTime.qtBUTimeToTemp  <= #qtBuTimeTo#                 
                  ]]>
            </isNotEmpty>
            <isNotEmpty property="etdTimeFrom">
                  <![CDATA[
               AND NVL(FLT.EST_TIME,NVL(FLT.SCH_TIME,0)) BETWEEN (#etdTimeFrom#) AND (#etdTimeTo#)            	
                  ]]>
            </isNotEmpty>
            <isNotEmpty property="buUldNo">
                  AND   U.ULD_KEY = #buUldNo#  AND    (JO.STATUS NOT IN ('COMPLETE','FORCE COMPLETE'))
            </isNotEmpty>
            <isNotEmpty property="status">
                  AND   UPPER(JO.STATUS) = DECODE(UPPER(#status#),UPPER('Buildup Started'), UPPER('Started'),UPPER('Complete'), UPPER('Completed'), UPPER(#status#))
            </isNotEmpty>
            <isNotEmpty property="fltModule">
                  AND   (FLT.FLT_MODULE1 = #fltModule# OR FLT.FLT_MODULE2 = #fltModule# )
            </isNotEmpty>
            <isNotEmpty property="contractor">
                  AND   U.CONTRACTOR = UPPER(#contractor#)
            </isNotEmpty>   	
   	</select>
   	<!-- Changed for QR -->
   	<select id="getBuJobOrderListCOUNT" parameterClass="cargo.cms.export.bo.BuildUpJobOrderSearchBO" resultClass="java.lang.Integer">
		select COUNT(1) from (
		SELECT G.FLT_KEY AS FLTNO,TO_CHAR(G.FLT_DATE,'DDMONYY')AS FLTDATE ,JO.JO_NO AS JOBORDERNO,
            UPPER(JO.STATUS) AS STATUS,CONFIRMED_YN as confirmed ,        U.BU_ZONE buZone, 
			qtBUTime.qtBUTimeFrom,
            qtBUTime.qtBUTimeTo,   
            U.ULD_KEY uldkey, G.UNLDG_PT unlgd,U.ULD_TYPE type,U.CNTR_CODE cntrCode,JO.RMK joRemarks,
            (SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY=U.ULD_KEY) AS locn, 
            U.CONTRACTOR as contractor
            FROM EXP_BU_GP G
      JOIN EXP_BU_JO JO ON G.GP_NO = JO.GP_NO
      JOIN EXP_BU_GP_ULD_TYPE U ON G.GP_NO = U.GP_NO
      JOIN FLT_OPR FLT ON FLT.FLT_KEY = G.FLT_KEY 
      AND FLT.SCH_DATE  = G.FLT_DATE AND FLT.FLT_TYPE = 'D'       
      <isNotEmpty property="awbNo">
                  JOIN EXP_BU_JO_DTL D ON JO.JO_NO = D.JO_NO 
                  AND  D.AWB_NO = #awbNo# AND D.AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') 
            </isNotEmpty>     
      <isNotEmpty property="loadFrom">
                  JOIN EXP_BU_JO_LOCN L ON JO.JO_NO = L.JO_NO AND  (L.ULD_KEY = #loadFrom# OR L.LSP = #loadFrom#)  
            </isNotEmpty>    
      		left join (select to_char(min(TIME_FROM),'DDMONYY HH24:MI') qtBUTimeFrom , 
      		to_char(max(TIME_TO),'DDMONYY HH24:MI')  qtBUTimeTo,  
      		to_char(min(TIME_FROM),'HH24MI') qtBUTimeFromTemp, 
          	to_char(max(TIME_TO),'HH24MI')  qtBUTimeToTemp,      		
      		atAllt.flt_key, atAllt.flt_date, D.JO_NO 
			            from QT_Allot atAllt
			            JOIN V_DDT_DTL ddt ON atAllt.flt_key = ddt.shp_cntg_FLT_KEY and atAllt.FLT_DATE = ddt.shp_cntg_FLT_DATE and shp_trf_type = 'QT'
			            JOIN EXP_BU_JO_DTL D ON ddt.AWB_NO = D.AWB_NO AND  ddt.AWB_date = D.AWB_date 
                  	where atAllt.flt_type = 'D' group by  atAllt.flt_key, atAllt.flt_date, D.JO_NO   )  qtBUTime
      on qtBUTime.flt_key = G.FLT_KEY and qtBUTime.FLT_DATE = G.FLT_DATE  and   JO.JO_NO = qtBUTime.JO_NO    
      WHERE 1=1               
      		<isNotEmpty property="fltNo">                  
                  AND    G.FLT_KEY = #fltNo# 
            </isNotEmpty> 
            <isNotEmpty property="fltDate">                  
                  AND G.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
            </isNotEmpty>                  
            <isNotEmpty property="bujobOrderNo">
                  AND   JO.JO_NO = #bujobOrderNo#
            </isNotEmpty>
            <isNotEmpty property="buZone">
                  AND   U.BU_ZONE = #buZone#
            </isNotEmpty>
            <isNotEmpty property="qtBuTimeFrom">
                  <![CDATA[
                  and qtBUTime.qtBUTimeFromTemp >= #qtBuTimeFrom#          
                  and qtBUTime.qtBUTimeToTemp  <= #qtBuTimeTo#                 
                  ]]>
            </isNotEmpty>
            <isNotEmpty property="etdTimeFrom">
                  <![CDATA[
               AND NVL(FLT.EST_TIME,NVL(FLT.SCH_TIME,0)) BETWEEN (#etdTimeFrom#) AND (#etdTimeTo#)            	
                  ]]>
            </isNotEmpty>
            <isNotEmpty property="buUldNo">
                  AND   U.ULD_KEY = #buUldNo#  AND    (JO.STATUS NOT IN ('COMPLETE','FORCE COMPLETE'))
            </isNotEmpty>
            <isNotEmpty property="status">
                   AND   UPPER(JO.STATUS) = DECODE(UPPER(#status#),UPPER('Buildup Started'), UPPER('Started'),UPPER('Complete'), UPPER('Completed'), UPPER(#status#))
            </isNotEmpty>
            <isNotEmpty property="fltModule">
                  AND   (FLT.FLT_MODULE1 = #fltModule# OR FLT.FLT_MODULE2 = #fltModule# )
            </isNotEmpty>
            <isNotEmpty property="contractor">
                  AND   U.CONTRACTOR = UPPER(#contractor#)
            </isNotEmpty>   
            )
   	
   	</select>
   	<!-- Changed for QR -->
   	<select id="getBuJobOrderAwbDetails" parameterClass="cargo.cms.export.bo.BUJobOrderBO" resultClass="cargo.cms.export.bo.BuildUpAwbBO">
   	SELECT SUBSTR(P.AWB_NO,'0','3') AS awbPfx  ,SUBSTR(P.AWB_NO,'4') AS awbSfx,A.PCS as awbPc,A.WT as awbWt, 
   	P.PMAN_PCS as pmanPc,P.PMAN_WT as pmanwt,P.AWB_NO as awbNo,TO_CHAR(P.AWB_DATE,'DDMONYY') as awbDate,
   	decode((P.PMAN_PCS-JO.AWB_JO_PC)-abs(P.PMAN_PCS-JO.AWB_JO_PC),0,'N','Y' ) as pmanInsufficient,
	JO.AWB_JO_PC as joPc,JO.AWB_JO_WT as joWt,
	A.SPL_CODE1 as splCode1,
	A.SPL_CODE2 as splCode2,
	A.SPL_CODE3 as splCode3,
	A.SPL_CODE4 as splCode4,
	A.SPL_CODE5 as splCode5,
	A.SPL_CODE6 as splCode6,
	A.SPL_CODE7 as splCode7,
	A.SPL_CODE8 as splCode8,
	A.SPL_CODE9 as splCode9,
	E.AIRL_RMK as airLineRmk,E.WH_RMK as whRmk,
	JO.BU_INST as buInstruction
	FROM AWB A
	LEFT OUTER JOIN EXP_PMANIFEST_AWB P
	ON A.AWB_NO = P.AWB_NO AND A.AWB_DATE = P.AWB_DATE
	LEFT OUTER JOIN EXP_CAR E 
	ON A.AWB_NO  = E.AWB_NO AND A.AWB_DATE = E.AWB_DATE
	JOIN EXP_BU_JO_DTL JO
	ON A.AWB_NO = JO.AWB_NO AND A.AWB_DATE = JO.AWB_DATE
	WHERE P.FLT_KEY = #fltNo# AND
	P.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
	AND JO.JO_NO = #jobOrderNo#
	</select>
	<!-- Changed for QR -->
	<select id="getBuJobOrderAwbInvDetails" parameterClass="cargo.cms.export.bo.BuildUpAwbBO" resultClass="cargo.cms.export.bo.BuildUpAwbDtlBO">
   	  SELECT 
        LOCN.LOC_CODE as locn,
       LOCN.LSP as lsp,
     LOCN.ULD_KEY as uld,
        LOCN.LOCN_JO_PC as pc,
        LOCN.LOCN_JO_WT as wt,
      LOCN.BU_YN   as buInd,
        LOCN.RET_IND as retrieveInd,
        DECODE(LOCN.RET_IND,'Y','Y','') as sel,
        LOCN.SEQ_NO as seqNo  
            FROM 
        EXP_BU_JO_LOCN LOCN 
        JOIN EXP_BU_JO_DTL DTL ON LOCN.JO_NO = DTL.JO_NO and LOCN.AWB_NO = DTL.AWB_NO AND LOCN.AWB_DATE = DTL.AWB_DATE         
	  WHERE  LOCN.JO_NO = #joNo# AND LOCN.AWB_NO = #awbNo# AND LOCN.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') 
  	</select>
	<update id="confirmJobOrder" parameterClass="map" >
	update EXP_BU_JO  set 
	TR_TYPE = 'BLDJO',
	STATUS = #status#, 
	CONFIRMED_YN = 'Y',
	LM_USER_ID = #lmUserId#,
	LM_DATE  = SYSDATE     
	WHERE  JO_NO = #jobOrderNo#  and status !='Completed'
	</update>
	<insert id="createJobOrMoveOrder_byType" parameterClass="map">
	INSERT INTO rtrv_move_order(FUNC,REF_NO,AWB_NO,CURR_LOCN,LSP,ULD,PC,WT,TARGET,STATUS,
                            CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TYPE,INV_TYPE) VALUES
                            (#func#,#refNo#,#awbNo#,#currLocn#,#lspNo#,#uldNo#,#pcs#,#wt#,#target#,#status#, 
                            #crUserId#,sysdate,#lmUserId#, sysdate,#orderType#,#invType#)
 	</insert>
 	<select id="getShpWOInv" parameterClass="cargo.cms.export.bo.BUJobOrderBO" resultClass="cargo.cms.export.bo.WoInvAwbBO">
  	SELECT SUBSTR(DTL.AWB_NO,0,3) as awbPfx,SUBSTR(DTL.AWB_NO,4) as awbSfx,AWB.PCS as awbPc,AWB.WT as awbWt,       SHP.RECD_PCS as bdPc,SHP.RECD_WT as bdWt,
DTL.AWB_NO as awbNo,TO_CHAR(DTL.AWB_DATE,'DDMONYY') as awbDate       FROM       EXP_BU_JO JO       JOIN EXP_BU_JO_DTL DTL ON JO.JO_NO = DTL.JO_NO    
JOIN AWB AWB ON DTL.AWB_NO = AWB.AWB_NO       AND DTL.AWB_DATE = AWB.AWB_DATE       JOIN IMP_CAR_SHP SHP ON SHP.AWB_NO = AWB.AWB_NO       
AND SHP.AWB_DATE = AWB.AWB_DATE 
WHERE DTL.JO_NO = #jobOrderNo#    
AND JO.FLT_KEY = #fltNo# AND JO.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
	</select>
	
	<select id="getShpWOInvDtls" parameterClass="map" resultClass="cargo.cms.export.bo.WoInvAwbDtlBO">
  	SELECT DECODE(IMP.BRKDN_START_DATE,'','','S') AS status,DECODE(INV.OWNED_INV,'Y', INV.LOC_CODE, '') AS locn,
  FFM.PC as pc, FFM.WT as wt,FFM.ULD_KEY as uldKey
	FROM
	(SELECT  MSG.FLT_KEY AS FLT_KEY, MSG.FLT_DATE AS FLT_DATE, ULD.ULD_KEY AS ULD_KEY , decode(ULD.ULD_KEY,null,null,SUM(SHP.MAN_PCS)) AS PC,decode(ULD.ULD_KEY,null,null,SUM(SHP.MAN_WT)) AS WT
	      FROM 
	      EDI_FFM_MSG MSG
	      JOIN EDI_FFM_SHP SHP
	      ON MSG.TR_NO = SHP.TR_NO
	      JOIN EDI_FFM_ULD ULD 
	      ON SHP.UDOC_LINE_NO = ULD.DOC_LINE_NO and MSG.TR_NO = ULD.TR_NO 
	      WHERE MSG.FFM_STATUS = 'P' AND SHP.AWB_NO = #awbNo# AND SHP.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
	AND EXISTS (SELECT NULL FROM V_DDT_DTL WHERE FLT_KEY = MSG.FLT_KEY AND FLT_DATE = MSG.FLT_DATE
	AND SHP_CNTG_FLT_KEY = #fltKey# AND SHP_CNTG_FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') 

  )GROUP BY MSG.FLT_KEY, MSG.FLT_DATE, ULD.ULD_KEY)FFM  
  LEFT JOIN IMP_RAMP_CHK_DTL IMP
	ON IMP.ULD_KEY = FFM.ULD_KEY AND IMP.FLT_KEY =FFM.FLT_KEY AND IMP.FLT_DATE = FFM.FLT_DATE
	LEFT JOIN ULD_INVENTORY INV ON INV.ULD_KEY = FFM.ULD_KEY
  where NOT EXISTS(select null from IMP_RAMP_CHK_DTL where flt_key=FFM.FLT_KEY and flt_date=FFM.FLT_DATE and uld_key=FFM.uld_key and brkdn_compl_yn='Y' and tr_no=IMP.tr_no)
	</select>
 	<update id="updateRetrievalIndicator" parameterClass="map" >
	update EXP_BU_JO_LOCN  set 
	RET_IND = 'Y',
	LM_USER_ID = #userId#,
	LM_DATE  = SYSDATE     
	WHERE  JO_NO = #jobOrderNo#  AND AWB_NO = #awbNo#
	<isNotEmpty property="seqNo">
		AND	SEQ_NO = #seqNo# 	
	</isNotEmpty>	
	</update>
	<select id="getBuildUpLocn" parameterClass="map" resultClass="java.lang.String">
		  	select BLDUP_LOCN from exp_pmanifest_uld where  flt_key = #fltKey# and flt_date = TO_DATE(#fltDate#,'DDMONYY') and rownum=1
	</select>
	<select id="validateBuZone" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		  	select count(1) from EXP_BU_GP_ULD_TYPE where bu_zone = #buZone#
	</select>
	
	<!-- Queries for enqBuJobOrder Ends -->
	
 	<!-- Added by Manorama for Report::::Get Car Details::: -->
	<select id="getCarCreatedValue" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="java.lang.String">
	select PRINT_IND from exp_car where awb_no=#awb# and awb_date = #awbDate#
	</select>
	
	
	<!-- Queries for enq Retrieval JobOrder Starts -->
		<!-- Changed for QR -->
		<select id="getRetrievalJoDtlsForAwb" parameterClass="cargo.cms.export.bo.RetrievelJobOrderBO" resultClass="cargo.cms.export.bo.RetrievelJobOrderBO">
		  	select substr(o.awb_no,0,3) as awbPfx,substr(o.awb_no,4) as awbSfx ,o.curr_locn as locn,o.lsp as lsp,
			decode(o.status,'','PENDING',upper(o.status)) as status,o.awb_no as awbNo,
			pc as pc,
			wt as wt
			from rtrv_move_order o
			where o.awb_no=#awbNo# and o.awb_date = to_date(#awbDate#,'DDMONYY')
			and ( o.status != 'CANCELLED' OR o.status is NULL)
		</select>
		<!-- Changed for QR -->
		<select id="getRetrievalJoDtlsForZone" parameterClass="cargo.cms.export.bo.RetrievelJobOrderBO" resultClass="cargo.cms.export.bo.RetrievelJobOrderBO">
		  	select substr(o.awb_no,0,3) as awbPfx,substr(o.awb_no,4) as awbSfx,o.curr_locn as locn,o.awb_no as awbNo,
            o.lsp as lsp,decode(o.status,'','PENDING',upper(o.status)) as status,
            o.pc as pc,
            o.wt as wt
            from rtrv_move_order o 
            join awb awb on awb.awb_no = o.awb_no and awb.awb_date=o.awb_date
             where (o.curr_locn = #storageZone#  or  o.curr_locn in (select code from mast_wh_loc where wh_group in (select wh_group from mast_wh_group where wh_area =#storageZone#)) or o.curr_locn in (select code from mast_wh_loc where wh_group=#storageZone# ))
              and  ( o.status != 'CANCELLED' OR o.status is NULL)
		</select>
		<select id="chkValidStrgZone" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		  	select count(1) from exp_bu_gp_uld_type where bu_zone = #storageZone#
		</select>
		<!-- Changed for QR -->
		<select id="enquireAwbType" parameterClass="cargo.cms.export.bo.RetrievelJobOrderBO" resultClass="java.lang.String">
		  	select awb_type from awb where awb_no=#awbNo# and awb_date= to_date(#awbDate#,'DDMONYY') and  AWB_CLOSED_YN = 'N'
		</select>
		
	<!-- Queries for enq Retrieval JobOrder Ends -->
	
	


	<!-- Maintain PreManifest and Auto BuildUp - Start -->
	
	<select id="getAWBAmendPmanHdrDtls" parameterClass="cargo.cms.export.bo.PremanBuildUpBO"  resultClass="cargo.cms.export.bo.PremanBuildUpBO">
		select distinct a.awb_no awbNo,SUBSTR(a.AWB_NO,1,3)||'-'||SUBSTR(A.AWB_NO,4) as awbNoDisp ,TO_CHAR(a.AWB_DATE,'DDMONYY') AS awbDate , 
		a.pman_pcs pmanPcs, a.pman_wt pmanWt,(PPK_PCS+MIX_PCS+ASSIGNED_BULK_PCS) buildupPcs,(PPK_WT+MIX_WT+ASSIGNED_BULK_WT) buildupWt, 
		a.bulk_pcs bulkPcs,a.bulk_wt bulkWt,a.unldg_pt unladingPt,(NVL(a.ppk_pcs,0)+NVL(a.mix_pcs,0)) oldBupPcs,
		(NVL(a.ppk_wt,0)+NVL(a.mix_wt,0)) oldBupWt,
		PPK_PCS ppkPcs,PPK_WT ppkWt, MIX_PCS mixPcs,MIX_WT mixWt, 
		(select TSA_PASS_IND from awb where awb_no = a.awb_no and awb_date = a.awb_date) as tsaPassInd
		from exp_pmanifest_awb a 
		where a.flt_key=#fltKey# and a.flt_date=to_date(#fltDate#,'DDMONYY')  and a.pman_pcs!=0 and a.pman_wt!=0 
		and a.awb_no in (select awb_no from awb where awb_no=a.awb_no and awb_date=a.awb_date )
		and (a.pman_pcs!=(PPK_PCS+MIX_PCS+ASSIGNED_BULK_PCS) or a.pman_wt!=(PPK_WT+MIX_WT+ASSIGNED_BULK_WT)) 
		order by a.awb_no asc
	</select>  
	<select id="getAWBAmendPmanDtls" parameterClass="cargo.cms.export.bo.PremanBuildUpBO"  resultClass="cargo.cms.export.bo.PremanBuildUpBO">	
		 select awbUld,uldKey,packingType,grossWt,awbNo,awbNoDisp ,loadedPcs, loadedWt,awbDate,transCCExists,ccAllowYn,directTowVal,rclNo,contourCode,awbDest from (
	        select b.uld_key ||'_'|| a.awb_no awbUld, b.uld_key uldKey, b.ppk_type packingType, b.gross_wt grossWt, a.awb_no awbNo,SUBSTR(a.AWB_NO,1,3)||'-'||SUBSTR(a.AWB_NO,4) as awbNoDisp , b.pcs loadedPcs, b.NET_WT loadedWt,TO_CHAR(a.AWB_DATE,'DDMONYY') AS awbDate,
          case when awb.awb_type='T' and awb.CATALOG !='TM' and (select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(A.awb_no) from dual )) is null then 'Y' else 'N' end as transCCExists,			 
			 case when (select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(A.awb_no) from dual )) ='Y' and awb.CATALOG !='TM'  then 'Y' else 'N' end  as ccAllowYn,
	        c.direct_tow directTowVal,a.rcl_no rclNo,b.contr_code contourCode,a.awb_dest awbDest 
	        from exp_rcl_hd a
          LEFT OUTER JOIN AWB awb ON a.awb_no=awb.awb_no and a.awb_date=awb.awb_date
          ,exp_rcl_dtl b,uld_inventory c,exp_uld_awb d 
	        where  c.uld_key=b.uld_key  and  d.uld_key = b.uld_key  and d.rcl_no = a.rcl_no and d.awb_no = a.awb_no and d.manifest_yn = 'N' 
	        and a.rcl_no= b.rcl_no and a.awb_no = #awbNo# and a.PPK_TYPE='P' and a.status not in ('V','R')
	          UNION
	        select  c.uld_key ||'_'|| a.awb_no awbUld, c.uld_key uldKey, c.ppk_type packingType, b.gross_wt grossWt,a.awb_no awbNo,SUBSTR(a.AWB_NO,1,3)||'-'||SUBSTR(a.AWB_NO,4) as awbNoDisp ,a.pcs loadedPcs, a.weight loadedWt,TO_CHAR(a.AWB_DATE,'DDMONYY') AS awbDate,
           case when awb.awb_type='T' and awb.CATALOG !='TM' and (select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(A.awb_no) from dual )) is null then 'Y' else 'N' end as transCCExists,			 
			 case when (select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(A.awb_no) from dual )) ='Y' and awb.CATALOG !='TM'  then 'Y' else 'N' end  as ccAllowYn,
	        d.direct_tow directTowVal,a.rcl_no rclNo,b.contr_code contourCode,a.dest awbDest 
	        from exp_rcl_brkdn a
          LEFT OUTER JOIN AWB awb ON a.awb_no=awb.awb_no and a.awb_date=awb.awb_date
          , exp_rcl_dtl b, exp_rcl_hd c ,
	        uld_inventory d, exp_uld_awb e  
	        where d.uld_key = c.uld_key and e.uld_key=a.uld_key and e.rcl_no = a.RCL_NO and e.awb_no = a.awb_no and e.manifest_yn = 'N' 
	        and a.rcl_no in (select rcl_no  from exp_rcl_brkdn t where t.awb_no in (#awbNo#) and t.uld_key=c.uld_key) 
	        and a.rcl_no=b.rcl_no and a.rcl_no=b.rcl_no and b.PPK_TYPE='M' and a.rcl_no=c.rcl_no and c.status not in ('V','R')
  	      )  order by awbUld asc
	</select> 
	<select id="getAWBAmendPmanDtlsPcsWtCount" parameterClass="cargo.cms.export.buildup.bo.ManifestAWBBO"  resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(1) FROM EXP_PMANIFEST_AWB WHERE AWB_NO=#awbNo# and AWB_DATE=to_date(#awbDate#,'DDMONYY') and 
			FLT_KEY = #fltKey# and FLT_DATE=to_date(#fltDate#,'DDMONYY') and unassigned_bulk_pcs>=#assignedPcs# and unassigned_bulk_wt>=#assignedWt#
		]]>
	</select>
	
		<select id="getPMANDtls_SPLIT" parameterClass="cargo.cms.export.buildup.bo.ManifestAWBBO"  resultClass="cargo.cms.export.buildup.bo.ManifestAWBBO">
		<![CDATA[
			SELECT NVL(SUM(PMAN_PCS),0) AS pmanPcs,TRIM(TO_CHAR(NVL(SUM(PMAN_WT),0),9999999999.9)) AS pmanWt FROM EXP_PMANIFEST_AWB WHERE FLT_KEY           =#fltKey# AND FLT_DATE            =#fltDate# AND AWB_NO              =#awbNo# AND AWB_DATE            =#awbDate#
		]]>
	</select>
	
	<update id="updateAWBAmendPmanDtls" parameterClass="cargo.cms.export.bo.PremanBuildUpBO" >
		UPDATE EXP_PMANIFEST_AWB 
			SET bulk_pcs = #bulkPcs#,
				bulk_wt = #bulkWt#,
				pman_pcs = #pmanPcs#,
				pman_wt = #pmanWt#,
				UNASSIGNED_BULK_PCS = #unAsgnbulk_Pc#,
				UNASSIGNED_BULK_WT	= #unAsgnbulk_Wt#,
				TR_TYPE = #trtype#,		
				MANUAL_IND = 'Y',
				lm_user_id =#userID#,
				lm_date = SYSDATE
			WHERE
			  AWB_NO =#awbNo#
			  AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			  AND FLT_KEY = #fltKey#
			  AND FLT_DATE = #fltDate#
	</update>
	<select id="getAWBPcWt" parameterClass="cargo.cms.export.bo.PremanBuildUpBO"  resultClass="cargo.cms.export.bo.PremanBuildUpBO">
		select PCS pcs,Wt wt from awb where awb_no=#awbNo# and AWB_DATE = to_date(#awbDate#,'DDMONYY') and (awb_type='E' or 	awb_type='T')
	</select>
	<select id="getAWBPPKMixPcWt" parameterClass="cargo.cms.export.bo.PremanBuildUpBO"  resultClass="cargo.cms.export.bo.PremanBuildUpBO">
		select PCS pcs,Wt wt,PMAN_PPK_PCS ppkPcs,PMAN_PPK_WT ppkWt, PMAN_MIX_PCS mixPcs,PMAN_MIX_WT mixWt from awb where awb_no=#awbNo# and AWB_DATE = to_date(#awbDate#,'DDMONYY') and (awb_type='E' or awb_type='T')	
	</select>
	<select id="getAWBBU_PcWt" parameterClass="cargo.cms.export.bo.PremanBuildUpBO"  resultClass="cargo.cms.export.bo.PremanBuildUpBO">
		select (PPK_PCS+MIX_PCS+ASSIGNED_BULK_PCS) buildupPcs,(PPK_WT+MIX_WT+ASSIGNED_BULK_WT) buildupWt from exp_pmanifest_awb where awb_no=#awbNo# and AWB_DATE = to_date(#awbDate#,'DDMONYY') and flt_key=#fltKey# and flt_date=to_date(#fltDate#,'DDMONYY')	
	</select>
	<!-- Maintain PreManifest and Auto BuildUp - End -->	
	<select id="getConsignmentListModuleOneDtl" parameterClass="cargo.cms.export.bo.OutBoundCnsgmntSearchBO" resultClass="cargo.cms.export.bo.OutBoundCnsgmntBO">
   		SELECT 
      opr.FLT_KEY as fltKey,      
			to_char(SCH_DATE,'DDMONYY') as fltDate,
   		(ltrim(SUBSTR(TRIM(TO_CHAR(opr.SCH_TIME,'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(opr.SCH_TIME,'0000')),3,2),':')) std,
	    PKG_COMMON.GET_FLT_ETA(opr.FLT_KEY,opr.SCH_DATE,'D','DD') etd,
      pkg_common.flt_route(opr.FLT_KEY, opr.SCH_DATE, 'D') portOfCall,        
       (select (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               ||  decode( sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               ||  decode( sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               ||  decode( sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               ||  decode( sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               ||  decode( sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               ||  decode( sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               ||  decode( sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               ||  decode( sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               ||  decode( sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               ||  decode( sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
            ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' ))
		from 
		edi_elp_msg msg,edi_elp_allot allot
		where  msg.tr_no = allot.tr_no 
		and msg.flt_key = OPR.FLT_KEY and msg.flt_date = OPR.SCH_DATE
		and cgo_type in ('Transit','Export Local Pre-Pack','Export Local B/U')
		and msg.ver_no = (select max(ver_no) from edi_elp_msg where flt_key = OPR.FLT_KEY and flt_date = TO_DATE(#fltDepDate#, 'DDMONYY') and trf_ind = 'Y')) as allotment,
			          
        (SELECT NVL(SUM(B.LOCN_PCS),0) ||'/'||NVL(SUM(LOCN_WT),0) FROM AWB_INVENTORY B  
                            WHERE EXISTS(select null from EXP_PMANIFEST_AWB P  WHERE P.AWB_NO=B.AWB_NO and P.AWB_DATE = B.AWB_DATE and  P.FLT_KEY =  OPR.FLT_KEY AND P.FLT_DATE = OPR.SCH_DATE ) )as invPcWt,
                       
        (SELECT NVL(SUM(A.PMAN_PCS),0) ||'/'|| NVL(SUM(A.PMAN_WT),0) FROM EXP_PMANIFEST_AWB A
                            WHERE A.FLT_KEY = OPR.FLT_KEY AND A.FLT_DATE = OPR.SCH_DATE) AS pmanPcWt,   
                         
        (select NVL(sum(pmanuld.assigned_pcs),0) ||'/'||NVL(sum(pmanuld.assigned_wt),0) from exp_pmanifest_uld_awb pmanuld where 
                         pmanuld.FLT_KEY =OPR.FLT_KEY  and pmanuld.FLT_DATE = OPR.SCH_DATE) AS buPcWt,
                         
		 (select NVL(sum(dtl.awb_jo_pc),0) ||'/'|| NVL(sum(dtl.awb_jo_wt),0) from exp_bu_gp gp,exp_bu_jo jo,exp_bu_jo_dtl dtl
                          where gp.gp_no= jo.gp_no and jo.jo_no=dtl.jo_no
                          and gp.flt_key= OPR.FLT_KEY and gp.FLT_DATE=OPR.SCH_DATE) joPcWt,
		
		  (select DECODE(COUNT(offawb.offload_pcs),'0','',sum(offawb.offload_pcs) ||'/') ||''|| DECODE(COUNT(offawb.offload_wt),'0','',sum(offawb.offload_wt)) from exp_offload_uld_awb offawb
      where offawb.flt_key=OPR.FLT_KEY and offawb.flt_date=OPR.SCH_DATE and confirmed_yn = 'Y') as offPcWt,  
	   #fltModule# as fltModule
			FROM (SELECT * FROM FLT_OPR opr		
	    WHERE   opr.SCH_DATE = TO_DATE(#fltDepDate#, 'DDMONYY') 
	    		AND (FLT_MODULE1 = #fltModule# OR FLT_MODULE2 = #fltModule#) AND opr.SCH_TIME BETWEEN (#fltDepDateFrom#) AND (#fltDepDateTo#) and  flt_type = 'D'
	    		<isNotEmpty property="fltKey">
					AND	FLT_KEY= #fltKey# 	
				</isNotEmpty>
				<isEmpty property="fltKey">
				<isNotEmpty property="loginCarrier">
				AND (opr.CARR_CODE = #loginCarrier#
					OR opr.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #loginCarrier#))
				</isNotEmpty>
				</isEmpty>
	    	)opr order by std	
	</select>
	<select id="sqlQueryWithJOAllot" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT stragg(stringdelim(sum(qty)||allot,','))  from (
        SELECT regexp_replace(B.ALLOT_TYPE, '^[A-Za-z0-9]') as allot,
        SUBSTR(B.ALLOT_TYPE,0,instr(B.ALLOT_TYPE, regexp_replace(B.ALLOT_TYPE, '^[A-Za-z0-9]'), 1, 1) - 1) as qty 
        FROM 
        EXP_BU_GP A, EXP_BU_GP_ULD_TYPE B WHERE A.GP_NO = B.GP_NO AND A.FLT_KEY = #fltKey# AND A.FLT_DATE = TO_DATE(#fltDepDate#, 'DDMONYY') AND B.ALLOT_TYPE IS NOT NULL) a
        group by allot,qty
	</select>
	
	<select id="popUpAllotmentDetails" parameterClass="cargo.cms.export.bo.OutBoundCnsgmntSearchBO" resultClass="cargo.cms.export.bo.OutBoundCnsgmntPopUpBO">
	select 
 		(select 
				(decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               ||  decode( sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               ||  decode( sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               ||  decode( sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               ||  decode( sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               ||  decode( sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               ||  decode( sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               ||  decode( sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               ||  decode( sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               ||  decode( sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               ||  decode( sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
            ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' ))
				from 
				edi_elp_msg msg,edi_elp_allot allot
				where 
				msg.tr_no = allot.tr_no 
				and msg.flt_key = nvl(#fltKey#,msg.flt_key)  and msg.flt_date = TO_DATE(#fltDepDate#, 'DDMONYY')       
				and cgo_type in ('Transit','Export Local B/U')
				and msg.ver_no = (select max(ver_no) from edi_elp_msg where flt_key = nvl(#fltKey#,flt_key) and flt_date = TO_DATE(#fltDepDate#, 'DDMONYY') and trf_ind = 'Y')) as whAllotment,       
         (select (decode(d.qtyQ7 , null, '',0,'',  d.qtyQ7 ||'Q7' )
               || decode(d.qtyQ6, null, '',0,'',','||  d.qtyQ6 ||'Q6')
               || decode(d.qtyX8, null, '',0,'', ','|| d.qtyX8 ||'X8')
               || decode( d.qtyPEB, null, '',0,'', ','|| d.qtyPEB ||'PEB')
               || decode(d.qtyH2, null, '',0,'', ','||d.qtyH2 ||'H2')
               || decode(d.qtyA2, null, '',0,'', ','|| d.qtyA2 ||'A2')
               || decode(d.qtyLDC, null, '',0,'', ','|| d.qtyLDC ||'LDC')
               || decode(d.QTY_ZA , null, '',0,'', ','|| d.QTY_ZA  ||'ZA' )
               ||  decode(d.QTY_ZB, null, '',0,'', ','||d.QTY_ZB  ||'ZB' )
               ||  decode(d.QTY_ZC , null, '',0,'', ','||d.QTY_ZC  ||'ZC' )
               ||  decode(d.QTY_PGA , null, '',0,'', ','||d.QTY_PGA  ||'PGA' )
               ||  decode(d.QTY_H3 , null, '',0,'', ','||d.QTY_H3  ||'H3' )
               ||  decode(d.QTY_BULK , null, '',0,'', ','||d.QTY_BULK ||'BULK' )
               ||  decode(d.QTY_ALF , null, '',0,'', ','||d.QTY_ALF  ||'ALF' )
               ||  decode(d.QTY_PLA , null, '',0,'', ','||d.QTY_PLA ||'PLA' )
               ||  decode(d.QTY_Q7D , null, '',0,'', ','||d.QTY_Q7D ||'Q7D' )
               ||  decode(d.QTY_W2 , null, '',0,'', ','||d.QTY_W2 ||'W2' )
               ||  decode(d.QTY_PAG , null, '',0,'', ','||d.QTY_PAG ||'PAG' )
               ||  decode(d.countH5 , 0, '', ','||'H5' ))  from
              (select a.countH5,(a.totalQ6-b.totalQ6) as qtyQ6,(a.totalQ7-b.totalQ7) as qtyQ7,(a.totalX8-b.totalX8) as qtyX8,
              (a.totalPEB-b.totalPEB) as qtyPEB,(a.totalA2-b.totalA2) as qtyA2,(a.totalLDC-b.totalLDC) as qtyLDC,(a.totalH2-b.totalH2) as qtyH2,             
              (a.totalZA- b.totalZA) as QTY_ZA, (a.totalZB- b.totalZB) as QTY_ZB, (a.totalZC- b.totalZC) as QTY_ZC, (a.totalPGA- b.totalPGA) as QTY_PGA,
               (a.totalH3- b.totalH3) as QTY_H3,(a.totalBULK- b.totalBULK) as QTY_BULK,(a.totalALF- b.totalALF) as QTY_ALF,(a.totalPLA- b.totalPLA) as QTY_PLA, 
               (a.totalQ7D- b.totalQ7D) as QTY_Q7D,(a.totalW2- b.totalW2) as QTY_W2,(a.totalPAG- b.totalPAG) as QTY_PAG,       
              a.tr_no as tr_no 
              from (select count(QTY_H5 )as countH5, sum(qty_Q6 ) as totalQ6,sum(qty_Q7 ) as totalQ7,
               sum(QTY_X8 ) as totalX8,sum(QTY_PEB ) as totalPEB,sum(QTY_A2 ) as totalA2, sum(QTY_LDC ) as totalLDC,
                sum(QTY_H2 ) as totalH2,
                sum(QTY_ZA ) as totalZA,sum(QTY_ZB ) as totalZB,sum(QTY_ZC ) as totalZC,sum(QTY_PGA ) as totalPGA,
                sum(QTY_H3 ) as totalH3,sum(QTY_BULK ) as totalBULK,sum(QTY_ALF ) as totalALF,sum(QTY_PLA ) as totalPLA,sum(QTY_Q7D ) as totalQ7D,
                sum(QTY_W2 ) as totalW2,sum(QTY_PAG ) as totalPAG,
              tr_no from edi_elp_allot where CGO_TYPE in('Transit')   group by tr_no) a, 
              (select NVL(sum(qty_Q6 ),0) as totalQ6,NVL(sum(qty_Q7 ),0) as totalQ7,
              NVL(sum(QTY_X8 ),0) as totalX8,NVL(sum(QTY_PEB ),0) as totalPEB,NVL(sum(QTY_A2 ),0) as totalA2,NVL( sum(QTY_LDC ),0) as totalLDC,
                NVL(sum(QTY_H2 ),0) as totalH2,
                NVL(sum(QTY_ZA ),0) as totalZA,NVL(sum(QTY_ZB ),0) as totalZB,NVL(sum(QTY_ZC ),0) as totalZC,NVL(sum(QTY_PGA ),0) as totalPGA,
                NVL(sum(QTY_H3 ),0) as totalH3,NVL(sum(QTY_BULK),0) as totalBULK,NVL(sum(QTY_ALF ),0) as totalALF,NVL(sum(QTY_PLA ),0) as totalPLA,NVL(sum(QTY_Q7D ),0) as totalQ7D,
                NVL(sum(QTY_W2 ),0) as totalW2,NVL(sum(QTY_PAG ),0) as totalPAG,
              tr_no from edi_elp_allot where CGO_TYPE in('Transit PPK')  group by tr_no) b
              where a.tr_no=b.tr_no )d where d.tr_no = (select tr_no from edi_elp_msg msg where
              msg.flt_key = nvl(#fltKey#,msg.flt_key) and msg.flt_date = TO_DATE(#fltDepDate#, 'DDMONYY')       			
            and msg.ver_no = (select max(ver_no) from edi_elp_msg where flt_key = nvl(#fltKey#,flt_key) and flt_date = TO_DATE(#fltDepDate#, 'DDMONYY') 
            and trf_ind = 'Y')))as whTranBUAllot,       
         (select 
				(decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               ||  decode( sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               ||  decode( sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               ||  decode( sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               ||  decode( sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               ||  decode( sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               ||  decode( sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               ||  decode( sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               ||  decode( sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               ||  decode( sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               ||  decode( sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
            ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' ))
				from 
				edi_elp_msg msg,edi_elp_allot allot
				where 
				msg.tr_no = allot.tr_no 
				and msg.flt_key = nvl(#fltKey#,msg.flt_key) and msg.flt_date = TO_DATE(#fltDepDate#, 'DDMONYY')       
				and cgo_type in ('Export Local B/U')
				and msg.ver_no = (select max(ver_no) from edi_elp_msg where flt_key = nvl(#fltKey#,flt_key) and flt_date = TO_DATE(#fltDepDate#, 'DDMONYY') and trf_ind = 'Y'))  as whExpLocBUAllot,
        (select 
				(decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               ||  decode( sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               ||  decode( sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               ||  decode( sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               ||  decode( sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               ||  decode( sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               ||  decode( sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               ||  decode( sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               ||  decode( sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               ||  decode( sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               ||  decode( sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
            ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' ))
				from 
				edi_elp_msg msg,edi_elp_allot allot
				where 
				msg.tr_no = allot.tr_no 
				and msg.flt_key = nvl(#fltKey#,msg.flt_key) and msg.flt_date = TO_DATE(#fltDepDate#, 'DDMONYY')        
         and cgo_type in ('Export Local Pre-Pack','Transit PPK')			
				and msg.ver_no = (select max(ver_no) from edi_elp_msg where flt_key = nvl(#fltKey#,flt_key) and flt_date = TO_DATE(#fltDepDate#, 'DDMONYY') and trf_ind = 'Y'))  as ppkAllotment,         
         (select 
				(decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               ||  decode( sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               ||  decode( sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               ||  decode( sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               ||  decode( sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               ||  decode( sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               ||  decode( sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               ||  decode( sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               ||  decode( sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               ||  decode( sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               ||  decode( sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
            ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' ))
				from 
				edi_elp_msg msg,edi_elp_allot allot
				where 
				msg.tr_no = allot.tr_no 
				and msg.flt_key = nvl(#fltKey#,msg.flt_key) and msg.flt_date = TO_DATE(#fltDepDate#, 'DDMONYY')       
				 and cgo_type in ('Transit PPK')			
				and msg.ver_no = (select max(ver_no) from edi_elp_msg where flt_key = nvl(#fltKey#,flt_key) and flt_date = TO_DATE(#fltDepDate#, 'DDMONYY') and trf_ind = 'Y')) as ppkTranPPKAllot, 
        (select 
				(decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
			               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
			               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
			               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
			               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
			               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
			               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
			               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
			               ||  decode( sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
			               ||  decode( sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
			               ||  decode( sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
			               ||  decode( sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
			               ||  decode( sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
			               ||  decode( sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
			               ||  decode( sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
			               ||  decode( sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
			               ||  decode( sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
			               ||  decode( sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
			            ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' ))
				from 
				edi_elp_msg msg,edi_elp_allot allot
				where 
				msg.tr_no = allot.tr_no 
				and msg.flt_key = nvl(#fltKey#,msg.flt_key) and msg.flt_date = TO_DATE(#fltDepDate#, 'DDMONYY')       
			   and cgo_type in ('Export Local Pre-Pack')		
				and msg.ver_no = (select max(ver_no) from edi_elp_msg where flt_key = nvl(#fltKey#,flt_key) and flt_date = TO_DATE(#fltDepDate#, 'DDMONYY') and trf_ind = 'Y'))  as ppkExpLocPrepackAllot         
        from dual
	</select>
	
	
	
	

	
	<select id="checkValidULDNumberOrNot" parameterClass="cargo.cms.export.bo.ChangePackingBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_KEY = #uldNo# AND OWNED_INV='Y'
	</select>
	<select id="checkBuildisCompletedOrNot" parameterClass="cargo.cms.export.bo.ChangePackingBO"  resultClass="java.lang.Integer">
	select COUNT(1) from exp_pmanifest_uld where uld_bt_no = #uldNo# and bldup_complete = 'Y' and bldup_complete_user_id IS not null and BLDUP_COMPLETE_DATE IS not null
	and (flt_key,flt_date) in (select flt_key,flt_date from ULD_INVENTORY where uld_key = #uldNo# and flt_type='E')
	</select>
	<select id="checkRecordExistsOrNotInAWBInv" parameterClass="cargo.cms.export.bo.ChangePackingBO"  resultClass="java.lang.Integer">
	select COUNT(1) from awb_inventory where uld_key= #uldNo# 
	</select>
	
	<select id="checkULDIsPPKorMixPPK" parameterClass="cargo.cms.export.bo.ChangePackingBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM ULD_INVENTORY 
	WHERE ULD_KEY = #uldNo#
		AND (NVL(PPK_IND,'N') = 'Y' OR
    		 NVL(MIX_PPK_IND,'N') = 'Y' OR 
     		 (NVL(TRANSIT_FLG,'N') = 'Y' AND HANDLING_MODE IN ('NBK','PPK')))
	</select>
	<select id="checkULDIsAssignedOrNot" parameterClass="cargo.cms.export.bo.ChangePackingBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_KEY = #uldNo# AND FLT_KEY IS NOT NULL AND FLT_DATE IS NOT NULL AND FLT_TYPE = 'E'
	</select>
    <select id="checkULDIsPPkorNot" parameterClass="cargo.cms.export.bo.ChangePackingBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_FLOW='E' AND (PPK_IND='Y' OR MIX_PPK_IND='Y') AND ULD_KEY = #uldNo#
	</select>
    <select id="checkULDIstransitPPkorNot" parameterClass="cargo.cms.export.bo.ChangePackingBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM ULD_INVENTORY WHERE NVL(TRANSIT_FLG,'N')='Y' AND HANDLING_MODE IN('PPK','NBK') AND ULD_KEY = #uldNo#
	</select>
	
	<update id="changeULDTopupTypeValue" parameterClass="cargo.cms.export.bo.ChangePackingBO" >
		UPDATE ULD_INVENTORY 
		       SET TR_TYPE = 'CHPKG',
		          TOPUP_YN = 'Y',
		          REBUILD_YN = 'N',
		          CHANGE_USERID=#userID#,
		          CHANGE_DATE=SYSDATE,
		          FIRST_WT = null,
		          SECOND_WT = null,
		          THIRD_WT = null,
		          FINAL_WEIGHT = 'N',
		          double_wgt_rslt = null,
		          PPK_IND = 'N',
		          MIX_PPK_IND = 'N',
		          HANDLING_MODE = null,
		          gross_weight = '0',
		          LM_DATE = SYSDATE,
		          LM_USER_ID = #userID#
		     WHERE 
		          ULD_KEY=#uldNo#
	</update>		
	
	<update id="changePackingIndicator" parameterClass="cargo.cms.export.bo.ChangePackingBO" >
	update exp_offload_uld EU set change_pck_yn = 'Y' where EU.uld_bt_no = #uldNo# and (
	<!--	(EU.uld_bt_no in 
    (select ED.uld_key from exp_rcl_dtl ED join exp_rcl_hd EH on ED.rcl_no = EH.rcl_no where EU.cr_date >= EH.cr_date and ED.ppk_type != 'B' and 
    EH.cr_date = (select max(A.cr_date) from exp_rcl_hd A,exp_rcl_DTL B where A.rcl_no=B.rcl_no AND B.uld_KEY=#uldNo#)))
    or-->
     (EU.uld_bt_no in (select uld.uld_key from uld_inventory uld where EU.cr_date >= uld.entry_time and uld.uld_key=EU.uld_bt_no)))    
    and EU.cr_date = (select max(cr_date) from exp_offload_uld where uld_bt_no=#uldNo#)
	</update>	
	
	<update id="changeULDRebuildTypeValue" parameterClass="cargo.cms.export.bo.ChangePackingBO" >
		UPDATE ULD_INVENTORY 
		       SET TR_TYPE = 'CHPKG',
		          TOPUP_YN = 'N',
		          REBUILD_YN = 'Y',
		          CHANGE_USERID=#userID#,
		          CHANGE_DATE=SYSDATE,
		          FIRST_WT = null,
		          SECOND_WT = null,
		          THIRD_WT = null,
		          FINAL_WEIGHT = 'N',
		          double_wgt_rslt = null,
		          PPK_IND = 'N',
		          MIX_PPK_IND = 'N',
		          HANDLING_MODE = null,
		          gross_weight = '0',
		          LM_DATE = SYSDATE,
		          LM_USER_ID = #userID#
		     WHERE 
		          ULD_KEY=#uldNo#
	</update>		
	
	<update id="changeFirstSecondThirdweightValues" parameterClass="cargo.cms.export.bo.ChangePackingBO" >
		UPDATE ULD_INVENTORY 
		       SET TR_TYPE = 'CHPKG',
		          FIRST_WT = null,
		          SECOND_WT = null,
		          THIRD_WT = null,
		          FINAL_WEIGHT = 'N',
		          double_wgt_rslt = null,
		          PPK_IND = 'N',
		          MIX_PPK_IND = 'N',
		          HANDLING_MODE = null,
		          gross_weight = '0',
		          LM_DATE = SYSDATE,
		          LM_USER_ID = #userID#
		     WHERE 
		          ULD_KEY=#uldNo#
	</update>
	<update id="changeEmptyFlgInUldInv" parameterClass="cargo.cms.export.bo.ChangePackingBO" >
		UPDATE ULD_INVENTORY 
		       SET
		          EMPTY_FLG = 'Y'
		        WHERE 
		          ULD_KEY=#uldNo#
	</update>
	<select id="getPpkAndMixInd" parameterClass="cargo.cms.export.bo.ChangePackingBO"  resultClass="cargo.cms.export.bo.ChangePackingBO">
	SELECT PPK_IND AS ppkInd,MIX_PPK_IND AS mixInd,FLT_KEY AS fltKey,to_char(FLT_DATE,'DDMONYY') AS fltDate,ULD_KEY AS uldNo FROM ULD_INVENTORY WHERE ULD_KEY=#uldNo#
	</select>
	<update id="changePkgTypeInExpPmanUld" parameterClass="cargo.cms.export.bo.ChangePackingBO" >
		UPDATE EXP_PMANIFEST_ULD SET PPK_TYPE = 'B' WHERE FLT_KEY = #fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldNo#
	</update>
	<update id="changePkgTypeInExpPmanUldAWB" parameterClass="cargo.cms.export.bo.ChangePackingBO" >
		UPDATE EXP_PMANIFEST_ULD_AWB SET PPK_TYPE = 'B' WHERE FLT_KEY = #fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldNo#
	</update>
	<update id="changePkgTypeInExpFltULD" parameterClass="cargo.cms.export.bo.ChangePackingBO" >
		UPDATE EXP_FLT_ULD SET PPK_TYPE = 'B' WHERE FLT_KEY = #fltKey# AND FLT_DATE=#fltDate# AND ULD_KEY=#uldNo#
	</update>
	<select id="getChangePackingAwbDetails" parameterClass="cargo.cms.export.bo.ChangePackingBO"  resultClass="cargo.cms.export.bo.ChangePackingBO">
	SELECT AWB_NO AS awbNo, TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate, ASSIGNED_PCS AS assignPcs,ASSIGNED_WT AS assignWt FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldNo# AND PPK_TYPE=#pkgType#
	</select>
	<update id="changePcsInExpPmanAWB" parameterClass="cargo.cms.export.bo.ChangePackingBO">
	UPDATE EXP_PMANIFEST_AWB  SET 
		BULK_PCS = BULK_PCS + #assignPcs#,
		BULK_WT = BULK_WT + #assignWt#,
		PPK_PCS = DECODE(#pkgType#,'P',PPK_PCS - #assignPcs#,0) ,
		PPK_WT =  DECODE(#pkgType#,'P',PPK_WT - #assignWt#,'0'),
		MIX_PCS = DECODE(#pkgType#,'M',MIX_PCS - #assignPcs#,0),
		MIX_WT = DECODE(#pkgType#,'M',MIX_WT - #assignWt#,0),
		assigned_bulk_pcs = assigned_bulk_pcs + #assignPcs#,
		assigned_bulk_wt = assigned_bulk_wt + #assignWt#
		WHERE
		AWB_NO=#awbNo# AND
		AWB_DATE=#awbDate# AND
		FLT_KEY=#fltKey# AND
		FLT_DATE=#fltDate# 
	</update>
	<update id="changePcsInAWB" parameterClass="cargo.cms.export.bo.ChangePackingBO">
	UPDATE AWB  SET 
		PMAN_BULK_PCS = PMAN_BULK_PCS + #assignPcs#,
		PMAN_BULK_WT = PMAN_BULK_WT + #assignWt#,
		PMAN_PPK_PCS = DECODE(#pkgType#,'P',PMAN_PPK_PCS - #assignPcs#,0) ,
		PMAN_PPK_WT =  DECODE(#pkgType#,'P',PMAN_PPK_WT - #assignWt#,0),
		PMAN_MIX_PCS = DECODE(#pkgType#,'M',PMAN_MIX_PCS - #assignPcs#,0),
		PMAN_MIX_WT = DECODE(#pkgType#,'M',PMAN_MIX_WT - #assignWt#,0),
		ppk_type = 'B'
		WHERE
		AWB_NO=#awbNo# AND
		AWB_DATE=#awbDate# 
	</update>
	<select id="fetchMaxULDQuantity" parameterClass="cargo.cms.export.bo.RetriveEmptyULDBO"  resultClass="java.lang.Integer">
	SELECT RULE_VALUE FROM CMSRULES where RULE_CODE = 'RETRIVE_MAX_ULD_QUANTITY'
	</select>
	<select id="checkLocationIsValidOrNot" parameterClass="cargo.cms.export.bo.RetriveEmptyULDBO"  resultClass="java.lang.Integer">
	SELECT COUNT(CODE) FROM MAST_WH_LOC WHERE CODE=#targetLocation#
	</select>
	<select id="checkCarrierIsValidOrNot" parameterClass="cargo.cms.export.bo.RetriveEmptyULDBO"  resultClass="java.lang.Integer">
	SELECT COUNT(CODE) FROM MAST_CARRIER WHERE CODE=#carr#
	</select>
	<select id="checkUldTypeIsValid" parameterClass="cargo.cms.export.bo.RetriveEmptyULDBO"  resultClass="java.lang.Integer">
	select COUNT(1) from mast_uld_type where code=#uldType#
	</select>
<select id="checkUnldgValidorNot" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"  resultClass="java.lang.Integer">
	select COUNT(1) from flt_opr_leg where off_point=#unLdgPt# AND FLT_KEY=#flightKey# AND SCH_DATE=#flightDate#
	</select>
	<select id = "listPrintCheckFlightcarr" parameterClass="cargo.cms.export.bo.CargoManifestSearchBO"  resultClass="java.lang.Integer">
	select COUNT(1) from mast_carrier where code=#carrierCode# 
</select>
	
	<select id="checkUldInHoldingListForUpd" parameterClass="map" resultClass="java.lang.Integer">
  		SELECT count(1) from ULD_INVENTORY where ULD_KEY=#uldNo# and AGENT_INV='Y' and AGENT_ID=#custNo#
	</select>
<!-- ######################################################################################################### -->
	<!-- DDS_EXP_BUP_CheckinOffloadedULD Related Queries Start -->
	<select id="doesUldExistInULDInventory" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select COUNT(1) from ULD_INVENTORY where  uld_key = #UldKey# 
	</select>
	<select id="offLoadCheckInSearch" parameterClass="cargo.cms.export.bo.ExpOffloadUld" resultClass="cargo.cms.export.bo.ExpOffloadUld">
		 SELECT #fltKey# AS fltKey,
  				#fltDate# AS fltDate,
  				uld.ULD_KEY AS uldBtNo,
  				offload.UNLDG_PT AS unldgPt,
  				offload.PPK_TYPE AS ppkType,
  				offload.RMK AS remarks,
  				NVL(uld.EIC_FLG,'N') AS eicYn,
  				(select EMPTY_YN from  EXP_PMANIFEST_ULD EPU 
  				  where uld.ULD_KEY = EPU.ULD_BT_NO 
  				  and FLT_KEY=#fltKey# and FLT_DATE=#fltDate#) AS emptyYn,
  				(SELECT BU_ZONE FROM EXP_BU_GP A, EXP_BU_GP_ULD_TYPE B WHERE 
          		A.FLT_KEY = offload.FLT_KEY AND A.FLT_DATE = offload.FLT_DATE AND A.GP_NO = B.GP_NO AND B.ULD_KEY = offload.ULD_BT_NO AND ROWNUM = 1) AS buZone
   		FROM ULD_INVENTORY  uld
   		LEFT OUTER JOIN  EXP_OFFLOAD_ULD offload ON offload.ULD_BT_NO = uld.ULD_KEY 
   		                 AND offload.FLT_KEY=#fltKey# AND offload.FLT_DATE =to_date(#fltDate#,'ddMONyy') 
   		                 AND offload.CHECKED_IN_FLAG ='N'
		WHERE uld.ULD_KEY = #uldBtNo#
	</select>
	<insert id="insertOffloadCheckInUld" parameterClass="java.util.HashMap">
		INSERT into ULD_INVENTORY (ULD_KEY,ULD_TYPE,ULD_NO,ULD_CARR,CARR_CODE,FLT_NO,FLT_TYPE,FLT_DATE,FLT_KEY,
			LOC_CODE, EIC_FLG, EMPTY_FLG, BASE_PAL_FLG, OWNER_ID, STRG_DATE, PPK_IND, CFM_STATUS, OWNED_INV, LM_USER_ID, LM_DATE, UAF_FLG, 
			ref_tr_type, ref_tr_no, ref_tr_date, ref_in_carr, ref_out_carr, ref_doc_line_no, ref_loc_from, ref_tr_event, OFLD_FLG,RHO_STAFF,DAM_TYPE,DAM_IND,TARGET,SER_IND ,ENTRY_TIME) 
		VALUES (#UldKey#,#ULDTYPE#,#ULDNO#,#CARRIERID#, #CarrCode#, #FltNo#,'E',TO_DATE(#FltDate#,'DDMONYY'),#FltKey#,
			#Loc#, 'N',#emptyYn#,'N',#CarrCode#, sysdate,'B', 'CHECKED IN', 'Y', #UserId#, sysdate,'Y',
		    'OH', #UldKey#,sysdate,null,null,1,null,'OH','Y',#rhoStaff#,#condnCode#,#damYn#,#targetLocation#,#serYn# ,sysdate)
	</insert>
	
	<select id="getContrCode_Count" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT count(a.CONTR_CODE)
                     FROM
                     ULD_TYPE_CONTR a 
                     WHERE 
                     ULD_TYPE=SUBSTR(#PARAM#,0,3)
	</select>
	<select id="getContrCodeFromUldTypeContr" parameterClass="java.lang.String" resultClass="java.lang.String">
		 SELECT a.CONTR_CODE
                     FROM
                     ULD_TYPE_CONTR a 
                     WHERE 
                     ULD_TYPE=SUBSTR(#PARAM#,0,3)   
	</select>
	<select id="getContrCodeFromUldInventory" parameterClass="java.lang.String" resultClass="java.lang.String">
		select CONTR_CODE from uld_inventory where uld_key=#PARAM#
	</select>
	<select id="getAWBInvRecord_Count" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select COUNT(1) from awb_inventory where uld_key = #PARAM#
	</select>
	<select id="getOldTransactionId" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT uld_image_name FROM ULD_IMAGE where uld_key=#PARAM# and rownum=1
	</select>
	
	<insert id="insertInExpOffloadUld" parameterClass="java.util.HashMap">
		INSERT into EXP_OFFLOAD_ULD 
                    (TR_TYPE ,FLT_KEY,FLT_DATE,ULD_BT_NO,UNLDG_PT,PPK_TYPE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,CONTR_CODE,checked_in_date) 
		     VALUES ('CINOU1',#fltkey#,#fltDate#,#uldKey#,#unloadPt#,#ppkType#,#crUser#,sysdate,#lmUser#,sysdate,#contrCode#,sysdate)
	</insert>
	
	<insert id="insertInExpPmanifestUld" parameterClass="java.util.HashMap">
		INSERT into EXP_PMANIFEST_ULD 
                    (FLT_KEY,FLT_DATE,ULD_BT_NO,FLT_TYPE,PPK_TYPE,UNLDG_PT,GROUP_NO,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,NEW_CHECKIN_ULD,EMPTY_YN,TRANSIT_FLG,HDLG_MODE) 
		     VALUES (#fltkey#,#fltDate#,#uldKey#,'E',#ppkType#,#unloadPt#,#groupNo#,#crUser#,sysdate,#lmUser#,sysdate,'Y',#emptyYn#,
		     (SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey#),
			 (SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey#))
	</insert>
	<select id="getUnloadptFormFltOprLeg" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select off_point as unloadPt from flt_opr_leg where flt_key=#FltKey# and sch_date = #FltDate# and flt_type='D' and rownum=1
	</select>
	<select id="getUnloadptFormExpPmanUld" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select unldg_pt as unloadPt from exp_pmanifest_uld where flt_key =#FltKey# and flt_date=#FltDate# and uld_bt_no=#UldKey#
		union
		select unldg_pt as unloadPt from exp_pman_tarmac_uld where flt_key =#FltKey# and flt_date=#FltDate# and uld_bt_no=#UldKey#
	</select>
	<select id="hhtCheckUldExists" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select COUNT(1) from ULD_INVENTORY where  uld_key = #UldKey# 
	</select>
	<select id="doesULDExistinCPCTInventory" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM uld_inventory WHERE uld_key = #uldKey# AND LOC_CODE is null
	</select>
	<select id="getReocrdCountInPmanifestUld" parameterClass="map" resultClass="java.lang.Integer">
		select COUNT(1) from EXP_PMANIFEST_ULD  WHERE ULD_BT_NO = #UldKey# AND FLT_KEY  = #FltKey# AND FLT_DATE  = #FltDate#
	</select>
	<select id="getReocrdCountInPmanifestTarmacUld" parameterClass="map" resultClass="java.lang.Integer">
		select COUNT(1) from EXP_PMAN_TARMAC_ULD WHERE ULD_BT_NO = #UldKey# AND FLT_KEY  = #FltKey# AND FLT_DATE  = #FltDate#
	</select>
	<select id="getAwbCoutnFromTarmacUldAwb" parameterClass="map" resultClass="java.lang.Integer">
		select count(AWB_NO) from EXP_PMAN_TARMAC_ULD_AWB WHERE ULD_BT_NO = #UldKey# AND FLT_KEY  = #FltKey# AND FLT_DATE  = #FltDate#
	</select>
	<select id="getReocrdCountInOffloadUld" parameterClass="map" resultClass="java.lang.Integer">
		select COUNT(1) from EXP_OFFLOAD_ULD  WHERE ULD_BT_NO = #UldKey# AND FLT_KEY  = #FltKey# AND FLT_DATE  = #FltDate#
	</select>
	<select id="doesManifestFinaliseforFlight" parameterClass="map" resultClass="java.lang.String">
		select TO_CHAR(COUNT(1)) from flt_opr_events where flt_key=#fltKey# and sch_date=#fltDate# and FINAL_MANF_IND = 'Y'
	</select>
	<select id="getPpkTypeFromUldInventory" parameterClass="java.lang.String" resultClass="java.lang.String">
		select decode(PPK_IND,'Y','P',decode(MIX_PPK_IND,'Y','M','B')) as ppkType from uld_inventory where ULD_KEY = #PARAM#
	</select>
	<select id="getpreoffPpkTypeFromUldInventory" parameterClass="java.lang.String" resultClass="java.lang.String">
		select (CASE WHEN (select COUNT(1) from uld_inventory where uld_key=#PARAM# and (PPK_IND='Y' OR MIX_PPK_IND='Y' OR HANDLING_MODE IN ('PPK'))) >0 THEN 'P'                                 
          ELSE 'B' END) from dual
	</select>
	
	<select id="fetchRCLAWBDate" parameterClass="map" resultClass="java.lang.String">
	SELECT to_char(AWB_DATE,'DDMONYY') FROM exp_rcl_brkdn WHERE rcl_no=#RCLNO# AND AWB_NO=#AWBNO#
	</select>
	
	

	<select id="shcInformationId"  parameterClass="cargo.cms.export.bo.SHCInformationBO" resultClass="cargo.cms.export.bo.SHCInformationBO">
		SELECT TR_NO AS trNo, SHC AS shcValue, PCS AS pcsvaluve FROM EXP_CARGO_RECEIVE_RECORD_SHC WHERE TR_NO = #trNo# 
	</select>
	
	<select id="getPpkAndMixPpkInd_ULDInventory" parameterClass="java.lang.String" resultClass="java.util.HashMap">
		SELECT PPK_IND AS PPKIND,
       		   MIX_PPK_IND AS MIXPPKIND,
       		   EMPTY_FLG   AS EMPTYIND,
       		   CONTR_CODE  AS CONTOURCODE
    	  FROM ULD_INVENTORY 
    	  WHERE ULD_KEY = #PARAM#
	</select>
	<select id="getBuZonefromEXP_BU_GP_ULD_TYPE" parameterClass="map" resultClass="java.lang.String">
		SELECT BU_ZONE AS LOCATION 
 		  FROM EXP_BU_GP_ULD_TYPE T1
  		  JOIN EXP_BU_GP T2 ON T1.GP_NO = T2.GP_NO
  		 WHERE T1.ULD_KEY = #uldKey#
  		 AND T2.FLT_KEY=#fltKey# AND T2.FLT_DATE=#fltDate# AND ROWNUM=1
	</select>
	<select id="getULDTypeFormMAST_ULD_ALLOT" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT PLT_CNT AS uldType
          FROM MAST_ULD_ALLOT T1
    	  JOIN MAST_ULD_ALLOT_GROUP T2 ON t1.uld_allot = t2.uld_allot
    	  WHERE t2.uld_group = #PARAM#
	</select>
	<select id="getContourCodeFromULD_TYPE_CONTR" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT  MAX(CONTR_CODE) AS contrCode
    	   FROM ULD_TYPE_CONTR 
    	  WHERE ULD_TYPE = #PARAM# GROUP BY ULD_TYPE
	</select>
	<select id="getManifestCompleteForULD" parameterClass="cargo.cms.export.bo.ExpOffloadUld" resultClass="java.lang.Integer">
		SELECT (SELECT 
		COUNT(1)
		FROM EXP_PMANIFEST_ULD
		WHERE ULD_BT_NO = #uldBtNo#
		AND FLT_KEY = #fltKey#        
		AND FLT_DATE = #fltDate#
		) + 
		(SELECT COUNT(1) FROM EXP_PMAN_TARMAC_ULD 
		WHERE ULD_BT_NO = #uldBtNo#   
		AND FLT_KEY = #fltKey#       
		AND FLT_DATE = #fltDate#
		)
		FROM DUAL
        </select>
	<update id="updateULDReadyForDispatch" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
			update EXP_PMANIFEST_ULD
			    set READY_DISP = 'N',
			    	READY_WH  = 'N',
			    	READY_MAN_DATE = sysdate,
			    	READY_MAN_ID = #userID#,
			    	LM_DATE = sysdate,
			    	LM_USER_ID  = #userID#,
			    	READY_DISP_DATE = NULL,READY_DISP_TIME = NULL,EMPTY_YN = #emptyYn#
			WHERE FLT_KEY=#fltKey# 
			AND FLT_DATE=#fltDate# 
			AND ULD_BT_NO=#uldBtNo#
	</update>
	<update id="updateULDReadyForDispatchIF" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
			update EXP_PMAN_TARMAC_ULD
			    set READY_DISP = 'N',			    	
			    	READY_MAN_DATE = sysdate,
			    	READY_MAN_ID = #userID#,
			    	LM_DATE = sysdate,
			    	LM_USER_ID  = #userID#,
			    	READY_DISP_DATE = NULL,READY_DISP_TIME = NULL
			WHERE FLT_KEY=#fltKey# 
			AND FLT_DATE=#fltDate# 
			AND ULD_BT_NO=#uldBtNo#
	</update>
	<update id="hhtchkinUpdateUldInventory" parameterClass="java.util.HashMap">
		update uld_inventory set FLT_KEY=#FltKey#,FLT_DATE=to_date(#FltDate#,'ddMONyy'),
		loc_code = #Loc# , LM_USER_ID=#UserId#,LM_DATE=sysdate , 
		AGENT_INV='N',
		OWNED_INV = 'Y', CFM_STATUS='CHECKED IN',
		CARR_CODE= #CarrCode# ,FLT_NO=#FltNo#,FLT_TYPE = 'E',
		RHO_STAFF = #rhoStaff#,
		EMPTY_FLG = #emptyYn#,
		TARGET = #targetLocation#,
		ref_tr_type  = 'OH',
		ref_tr_no    = #UldKey#,
		ref_tr_date  = sysdate, 
		ref_in_carr  = null,
		ref_out_carr = null,
		ref_doc_line_no = 1,
		ref_loc_from    = NULL,
		ref_tr_event    = 'OH', 
		OFLD_FLG = 'Y',
		DAM_IND = #damYn#,
		TR_TYPE = 'DUMMY', X_RAY_REQ=null, X_RAY_RES=null, ENTRY_TIME = sysdate, ULD_FLOW = 'E'
		where ULD_KEY=#UldKey#
	</update>
	
	<update id="updateUldInventoryOffLoadFlg" parameterClass="java.util.HashMap">
		update uld_inventory set OFLD_FLG = 'Y'	where ULD_KEY=#UldKey#
	</update>
	
	<update id="hhtchkindamUpdateUldInventory" parameterClass="java.util.HashMap">
		update uld_inventory set FLT_KEY=#FltKey#,FLT_DATE=to_date(#FltDate#,'ddMONyy'),
		loc_code = #Loc# ,
		LM_USER_ID=#UserId#,LM_DATE=sysdate, 
		AGENT_INV='N',
		OWNED_INV = 'Y', CFM_STATUS='CHECKED IN',
		CARR_CODE= #CarrCode# ,FLT_NO=#FltNo#,FLT_TYPE = 'E',
		DAM_TYPE = #condnCode#,
		DAM_IND = #damYn#,		
		SER_IND = #serYn#,
		RHO_STAFF = #rhoStaff#,
		EMPTY_FLG = #emptyYn#,
		TARGET = #targetLocation#,
		ref_tr_type  = 'OH',
		ref_tr_no    = #UldKey#,
		ref_tr_date  = sysdate, 
		ref_in_carr  = null,
		ref_out_carr = null,
		ref_loc_from    = NULL,
		ref_tr_event    = 'OH',
		OFLD_FLG = 'Y', X_RAY_REQ=null, X_RAY_RES=null, ENTRY_TIME = sysdate  
		where ULD_KEY=#UldKey#
	</update>
	<update id="hhtUpdateUldInventoryChkIn" parameterClass="java.util.HashMap">
			update EXP_OFFLOAD_ULD set TR_TYPE = 'CINOU', CHECKED_IN_FLAG ='Y',checked_in_date=sysdate,lm_user_id = #UserId# 
			WHERE FLT_KEY=#FltKey# AND FLT_DATE=#FltDate# AND ULD_BT_NO=#UldKey#
	</update>
	<select id="hhtCheckWhDestExists" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT COUNT(1) FROM  MAST_WH_LOC WHERE CODE=#Loc#
	</select>
	<select id="checkWareHouseAreaExist" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT COUNT(1) FROM  MAST_WH_AREA WHERE WH_AREA=#Loc#
	</select>
	<select id="getAWBDtlsFrom_Offload_ULD_AWB" parameterClass="cargo.cms.export.bo.ExpOffloadUld" resultClass="java.util.HashMap">
		SELECT	AWB_NO as awbNo,
               	TO_CHAR(AWB_DATE,'DDMONYY') as awbDate,
       			OFFLOAD_PCS as pcs,
       			OFFLOAD_WT as wt
           FROM EXP_OFFLOAD_ULD_AWB
       	   WHERE  FLT_KEY=#fltKey#
          	  AND FLT_DATE =to_date(#fltDate#,'ddMONyy')
          	  AND ULD_BT_NO = #uldBtNo#
          	  AND ROWNUM = 1
   	</select>
   	<select id="getEicFlagFromULD_Inventory" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select eic_flg from uld_inventory where uld_key=#UldKey#
	</select>
	<update id="updateLocationASbasePalletLoc" parameterClass="java.util.HashMap">
		update uld_inventory set loc_code=#Loc#, lm_user_id =#UserId#, lm_date=sysdate,owned_inv='Y',OFLD_FLG = 'Y', ENTRY_TIME = sysdate where uld_key in (select uld_key from uld_inventory where base_plt=#UldKey#)
	</update>
	<update id="updateCheckOutDtl_from_Checkin" parameterClass="java.util.HashMap">
		update EXP_CHKOUT_DTL set CHK_FLG='N', CHKOUT_USER = '', CHKOUT_DATE ='', CHKOUT_TIME='', STATUS='',TR_TYPE='DUMMY'
			WHERE FLT_KEY=#FltKey# AND FLT_DATE=#FltDate# AND uld_key=#UldKey#
	</update>
	
	<!-- DDS_EXP_BUP_CheckinOffloadedULD Related Queries End -->
	<!-- ######################################################################################################### -->
	<!-- ######################################################################################################### -->
	<!-- DDS_EXP_BUP_UAFPrintOTL Related Queries Start -->
	<select id="doesUAFExist" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM exp_flt_uld
		WHERE uld_key = #uldKey#
		AND FLT_KEY = #flightKey#
		AND FLT_DATE = #flightDate#
	</select>
	<select id="doesULDExist" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM uld_inventory
		WHERE uld_key = #uldKey# AND OWNED_INV = 'Y'
	</select>
	<select id="getRebuildTopupInd" parameterClass="map" resultClass="java.lang.String">
	select count(1) from uld_inventory where uld_key=#uldKey# AND (TOPUP_YN='Y' OR REBUILD_YN='Y')
	</select>
	<select id="getULDDetails" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.UAFBO">
		select 
		  uld_key AS uldNumber,		  
		  empty_flg AS emptyIndicator,
		  eic_flg AS eicIndicator		  
		from uld_inventory where uld_key = #uldNo#
	</select>
	<select id="doesLUCIssuedforULD" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1))
          from luc_hd lh, luc_dtl ld
         where lh.luc_no = ld.luc_no
           and ld.uld_key = #uldKey#
           and lh.LUC_STAT = 'I'
	</select>
	<select id="doesULDisTopPallet" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) 
		   FROM uld_inventory 
		   where uld_key = #uldKey# 
		   and base_plt is not null
	</select>
	<select id="doesDLSExistForFlight" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) 
		   FROM flt_opr_events 
		   where flt_key = #flightKey#
		   and   sch_date = #schDate#
		   and   flt_type='D'
           and   dls_ind  = 'Y'
	</select>
	<select id="validateUnloadingPt"  parameterClass="map" resultClass="java.lang.Integer">	
			 select    COUNT(1) from     flt_opr t1, flt_opr_leg t2 where    t1.tr_no = t2.tr_no
         	 and t1.flt_key = #flightKey#  and t1.sch_date = to_date(#flightDate#,'DDMONYY') 
         	 and t1.flt_type = 'D' and t2.off_point = #unloadPt#
	</select>
	<select id="isULDBelongsToPalletStack"  parameterClass="java.lang.String" resultClass="java.lang.Integer">	
			 select count(*) from uld_inventory where uld_key=#PARAM# and eic_flg='Y' and eic_type='PS'
	</select>
	
	<select id="chkUldInventoryPpkInd"  parameterClass="java.lang.String" resultClass="java.lang.Integer">	
			select count(1) from uld_inventory where uld_key = #uld# and final_weight = 'Y' and 
					( (ppk_ind = 'Y' or mix_ppk_ind = 'Y') or (transit_flg = 'Y' and (handling_mode = 'PPK' or handling_mode = 'NBK')) )
	</select>
	
	<update id="createUAF_insert" parameterClass="cargo.cms.export.bo.UAFBO">
		insert into exp_flt_uld( 
			uld_key, 
			FLT_KEY,       
			FLT_DATE,       
			EIC_YN,        
			EMPTY_YN,
			UNLDG_PT,
			source,        
			CR_USER_ID,
			LM_USER_ID,
			CR_DATE,
			LM_DATE,
			INS_FROM_IND,
			FLT_USE,
			BB_IND,
			FLT_TYPE,
			SPL_CODE1,			
			REMARKS,
			PMAN_YN,
			PPK_TYPE,
			DEL_YN,
			contr_code,			                                                                                                                                                                                        
			TARE_WT,
			ULD_TYPE,			
			TR_TYPE) 
		values	
			(#uldNumber#,
			#flightNumber#,
			TO_DATE(#flightDate#,'DDMONYY'),
			#eicIndicator#,
			#emptyIndicator#,			
			#unLdgPt#,			
			#source#,
			#userID#,
			#userID#,
			sysdate,
			sysdate,
			#insFromInd#,
			#fltUse#,
			#bbIndicator#,
			'E',
			#splCode1#,
			#remarks#,
			NVL(#pmanIndicator#,'N'),
			#ppkType#,
			#deleteInd#,
			#contourCode#,			
			NVL(#tareWt#,0),
			#cargoType#,
			#trtype#)
	</update>
	
	<insert id="insertRecordInExpPmanifestUld" parameterClass="cargo.cms.export.bo.UAFBO">
		insert into EXP_PMANIFEST_ULD( 
			FLT_KEY,FLT_DATE,ULD_BT_NO,FLT_TYPE,PPK_TYPE,UNLDG_PT,GROUP_NO,
			CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,FLT_USE,EIC_YN,EMPTY_YN,BB_IND,contr_code,TRANSIT_FLG,HDLG_MODE,TARE_WT
			) 
		values	
			(#flightNumber#,TO_DATE(#flightDate#,'DDMONYY'),#uldNumber#,'E',
			 (select decode(PPK_IND,'Y','P',decode(MIX_PPK_IND,'Y','M','B')) from uld_inventory where ULD_KEY = #uldNumber#),
			 #unLdgPt#,'000',#userID#,sysdate,#userID#,sysdate,#fltUse#,#eicIndicator#,#emptyIndicator#,#bbIndicator#,#contourCode#,
			 (SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#uldNumber#),
			 (SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#uldNumber#),NVL(#tareWt#,0) 
			)
	</insert>	
	<select id="getDelIndicator"  parameterClass="map" resultClass="java.lang.Integer">	
			 select count(1) from uld_inventory where uld_key = #UldKey# and  (MIX_PPK_IND='Y' OR ppk_ind = 'Y')  and (rebuild_yn = 'N' AND topup_yn = 'N') 
	</select>
	<update id="deleteUAF" parameterClass="cargo.cms.export.bo.UAFListBO">
		delete from exp_flt_uld
		where
			flt_key = #flightNumber#
			and flt_date = #flightDate# 
			and uld_key = #uldNumber#
	</update>
	<select id="getCurrentLocFromUldInventory"  parameterClass="java.lang.String" resultClass="java.lang.String">	
	    SELECT  loc_code 
		  FROM uld_inventory 
		  where uld_key = #PARAM#
	</select>
	<select id="isULDBelongstorHDBContanerType"  parameterClass="map" resultClass="java.lang.String">	
	    select decode(H_CONT_IND,'Y','Y',decode(DUMMY_H_CONT_IND,'Y','Y',decode(BT_IND,'Y','Y','N'))) as contType 
	    from  mast_uld_type where code =#ULDTYPE#
	</select>
	<select id="getOwnerIDFromInventory"  parameterClass="java.lang.String" resultClass="java.lang.String">	
	    SELECT  OWNER_ID 
		  FROM uld_inventory 
		  where uld_key = #PARAM#
	</select>
	
	<select id="getManPcWtFromExpFltUld" parameterClass="cargo.cms.export.bo.UAFListBO" resultClass="cargo.cms.export.bo.UAFListBO">
		SELECT NVL(MAN_PCS, 0) as manPc, NVL(MAN_WT, 0) as manWt
		  FROM EXP_FLT_ULD 
		  where FLT_KEY = #flightNumber# and FLT_DATE = #flightDate# AND ULD_KEY = #uldNumber# 
	</select>
	<select id="getEicBasePltFlagfromULDInv" parameterClass="cargo.cms.export.bo.UAFListBO" resultClass="cargo.cms.export.bo.UAFListBO">
		SELECT EIC_FLG AS eicFlag, BASE_PAL_FLG AS basePltFlag FROM ULD_INVENTORY WHERE ULD_KEY = #uldNumber# 
	</select>
	<select id="getBuildupStatusFormExpPmanifestUld"  parameterClass="map" resultClass="java.lang.String">	
	    SELECT  DECODE(BLDUP_START,'Y','Y',DECODE(BLDUP_COMPLETE,'Y','Y','N')) as buildupStatus
		  FROM EXP_PMANIFEST_ULD 
		  where ULD_BT_NO = #UldKey# and FLT_KEY = #FltKey# and FLT_DATE = #FltDate#
	</select>

	<select id="getValidateBuildUpcompleteForFlight"  parameterClass="map" resultClass="java.lang.Integer">	
	    select COUNT(1) from FLT_OPR_EVENTS
        where FLT_KEY=#fltKey# AND SCH_DATE=TO_DATE(#fltDate#,'DDMONYY') AND FLT_TYPE = 'D'
          and BUILDUP_CDATE is not null and BUILDUP_CTIME is not null and BUILDUP_CUSER is not null
	</select>
	
	<update id="deleteRecordInExpPmanifestUld" parameterClass="cargo.cms.export.bo.UAFListBO">
		delete from EXP_PMANIFEST_ULD
		where ULD_BT_NO = #uldNumber# and FLT_KEY = #flightNumber# and FLT_DATE = #flightDate#
	</update>
	<update id="deleteRecordFromUldInventory" parameterClass="cargo.cms.export.bo.UAFListBO">
		update uld_inventory set FLT_NO = NULL,FLT_TYPE=NULL,FLT_DATE =NULL,FLT_KEY=NULL
		where uld_key = #uldNumber# 
	</update>
	<update id="deleteBasepltFltDetailsFromUldInventory" parameterClass="cargo.cms.export.bo.UAFListBO">
		update uld_inventory set FLT_NO = NULL,FLT_TYPE=NULL,FLT_DATE =NULL,FLT_KEY=NULL
		where BASE_PLT = #uldNumber# 
	</update>
	<select id="getUAFList" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.UAFListBO">
		select  t1.del_yn as deleteInd,
				t1.uld_key as uldnumber,
				t1.uld_key as uldnumber1, 
				t1.contr_code as contourcode, 
				DECODE(T2.TRANSIT_TYPE,'IF','Y','TT','Y',t1.buildup_yn)  as buildupcompleteindicator, 
				t1.pman_yn as premanifestindicator, 
			    t1.eic_yn as eicindicator, 
				t2.empty_flg as emptyindicator,  
				t1.checkout_yn as checkoutInd,
				t2.loc_code as locationcode,
				t1.bb_ind as bbIndicator,
				t1.flt_use as fltUse,
				t1.source as sourceDesc        		
		from   exp_flt_uld t1, uld_inventory t2
		where  t1.uld_key = t2.uld_key
			   and t1.flt_key = #fltNo#
			   and t1.flt_date = #fltDate#
			   and  t1.source not in ('DLS-L', 'DLS-E')
			   and not exists (select null from uld_inventory t2 where  t2.uld_key = t1.uld_key and nullif(t2.base_plt, 'N') is not null)
		<isNotEmpty property="uldNo" prepend="and">
			t1.uld_key = #uldNo#
		</isNotEmpty>
		
			<dynamic prepend="ORDER BY ">
                         <isNotEmpty property="sortOrder.sortField">
                        $sortOrder.sortField$
                  </isNotEmpty>
            </dynamic>   
	</select>
	
	<select id="getUAFListCOUNT" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) AS totalRowCount FROM (
		select  t1.del_yn as deleteInd,
				t1.uld_key as uldnumber,
				t1.uld_key as uldnumber1, 
				t1.contr_code as contourcode, 
				t1.buildup_yn as buildupcompleteindicator, 
				t1.pman_yn as premanifestindicator, 
			    t1.eic_yn as eicindicator, 
				t2.empty_flg as emptyindicator,
				t1.checkout_yn as checkoutInd,
				t2.loc_code as locationcode,
				t1.bb_ind as bbIndicator,
				t1.flt_use as fltUse,
				t1.source as sourceDesc        		
		from   exp_flt_uld t1, uld_inventory t2
		where  t1.uld_key = t2.uld_key
			   and t1.flt_key = #fltNo#
			   and t1.flt_date = #fltDate#
			   and  t1.source not in ('DLS-L', 'DLS-E')
			   and not exists (select null from uld_inventory t2 where  t2.uld_key = t1.uld_key and nullif(t2.base_plt, 'N') is not null)
		<isNotEmpty property="uldNo" prepend="and">
			t1.uld_key = #uldNo#
		</isNotEmpty>
		)
	</select>
	<select id="getUAFDetails" parameterClass="cargo.cms.export.bo.UAFListBO" resultClass="cargo.cms.export.bo.UAFBO">
		SELECT
			t1.flt_key AS flightNumber,
			to_char(t1.flt_date, 'DDMONYY') AS flightDate,
			t1.uld_key AS uldNumber,
			t1.contr_code AS contourCode,
			t1.eic_yn as eicindicator, 
			t2.empty_flg as emptyindicator,
			t1.bb_ind as bbIndicator,
			t1.flt_use as fltUse,
			t1.flt_use as oldfltUseValue,
			t1.source as source,
			t1.unldg_pt as unLdgPt,
			t1.unldg_pt as oldUnladingPnt,
			t1.uld_type as cargoType,
			t1.uld_type as oldCargoType,			
			t1.REMARKS as dlsRemarks
		FROM exp_flt_uld t1, uld_inventory t2
		WHERE t1.uld_key = t2.uld_key and
			  t1.flt_key = #flightNumber# and
			  t1.flt_date = to_date(#flightDate#,'DDMONYY')and 		 
			  t1.uld_key = #uldNumber#
	</select>
	<select id="getBuildUpComplete_UAF" parameterClass="cargo.cms.export.bo.UAFBO" resultClass="java.lang.String">
		select BLDUP_COMPLETE as buildupYN from exp_pmanifest_uld where flt_key = #flightNumber# and flt_date = #flightDate# and uld_bt_no = #uldNumber#
	</select>
	<select id="getContainerTypes_UAF" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.UAFBO">
		select bt_ind as btConatiner,dummy_h_cont_ind as dummyHConatiner,h_cont_ind as hConatiner  from mast_uld_type where code=#PARAM#
	</select>
	
	<select id="doesContourCodeExist" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) 
		FROM ULD_TYPE_CONTR 
		WHERE 
			ULD_TYPE like UPPER(#uldType#) and
			CONTR_CODE = UPPER(#contourCode#)
	</select>	
	<update id="updateUAF" parameterClass="cargo.cms.export.bo.UAFBO">
		update exp_flt_uld set
			EIC_YN      =   #eicIndicator#,
			EMPTY_YN    =   #emptyIndicator#,	
			UNLDG_PT 	= 	#unLdgPt#,
			FLT_USE  	= 	#fltUse#,	
			BB_IND  	= 	#bbIndicator#,	
			SPL_CODE1 	= 	#splCode1#,			
			PMAN_YN		=	#pmanIndicator#,
			PPK_TYPE	= 	#ppkType#,
			DEL_YN		=	#deleteInd#,
			LM_USER_ID  =   #userID#,
			LM_DATE     =   sysdate,
			buildup_yn  =   #buildUpComplete#,
			contr_code  =   #contourCode#,
			ULD_TYPE    =   #cargoType#,
			REMARKS    =   #dlsRemarks#,	
			TR_TYPE     =   #trtype#
		where
			flt_key = #flightNumber#
			and flt_date = #flightDate# 
			and uld_key = #uldNumber#
	</update>
	<update id="updateFlagsinExpPmanUld" parameterClass="cargo.cms.export.bo.UAFBO">
		update EXP_PMANIFEST_ULD set
			EIC_YN      =   #eicIndicator#,
			EMPTY_YN    =   #emptyIndicator#,	
			UNLDG_PT 	= 	#unLdgPt#,
			FLT_USE  	= 	#fltUse#,	
			BB_IND  	= 	#bbIndicator#,
			contr_code	= 	#contourCode#,	
			LM_USER_ID  =   #userID#,
			LM_DATE     =   sysdate
		where
			flt_key       = #flightNumber#
			and flt_date  = #flightDate# 
			and FLT_TYPE  = 'E'
			and ULD_BT_NO = #uldNumber#
	</update>
	
	<update id="updateUldFlowInUldInventory" parameterClass="map">
		update uld_inventory set
			ULD_FLOW     =   'E',
			BB_IND       =   #bbInd#,
			EIC_UNLDG_PT =   #unloadPt#,
			contr_code   =   nvl(#contour#,contr_code),
			LM_USER_ID   =   #userID#,
			LM_DATE      =   sysdate
		where
			ULD_KEY = #uldKey#
	</update>
	<update id="updateULDWeights_UAF" parameterClass="cargo.cms.export.bo.UAFBO">
		update uld_inventory set
			GROSS_WEIGHT = #uldWeight#, 
			FIRST_WT     = #uldWeight#,
			LM_USER_ID   = #userID#,
			LM_DATE      = sysdate
		where
			ULD_KEY = #uldNumber#
	</update>
	<update id="updateULDWeights_Pman_ULD_UAF" parameterClass="cargo.cms.export.bo.UAFBO">
		update EXP_PMANIFEST_ULD set
			GROSS_WT    = #uldWeight#, 
			TARE_WT     = #uldWeight#,
			LM_USER_ID  = #userID#,
			LM_DATE     = sysdate
		where
			ULD_BT_NO = #uldNumber#
			and FLT_KEY=#flightNumber# 
			AND FLT_DATE=#flightDate# 
	</update>
	<update id="updateULDWeights_FLT_ULD_UAF" parameterClass="cargo.cms.export.bo.UAFBO">
		update EXP_FLT_ULD set
			GROSS_WT    = #uldWeight#, 
			TARE_WT     = #uldWeight#,
			buildup_yn  = #buildUpComplete#,
			LM_USER_ID  = #userID#,
			LM_DATE     = sysdate
		where
			uld_key = #uldNumber#
			and FLT_KEY=#flightNumber# 
			AND FLT_DATE=#flightDate# 
	</update>
	<update id="updateULDReadyForDispatch_UAF" parameterClass="cargo.cms.export.bo.UAFBO">
		update EXP_PMANIFEST_ULD
		    set READY_DISP = #readyForDisp#,
		    	READY_WH  = #readyWh#,
		    	READY_MAN_DATE = sysdate,
		    	READY_MAN_ID = #userID#,
		    	BLDUP_COMPLETE = #buildUpComplete#,
		    	LM_DATE = sysdate,
		    	LM_USER_ID  = #userID#,
		    	READY_DISP_DATE = DECODE(#readyForDisp#,'Y',SYSDATE,NULL),READY_DISP_TIME = DECODE(#readyForDisp#,'Y',TO_CHAR(SYSDATE,'HH24MI') ,NULL)  
			WHERE FLT_KEY=#flightNumber# 
			AND FLT_DATE=#flightDate# 
			AND ULD_BT_NO=#uldNumber#
	</update>
	<select id="doesULDTypeExist" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from mast_uld_type
		where code = #uldType#
	</select>
	<select id="isULDContourCompatibleWithFlight" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from uld_type_proh_acft a
		where a.uld_type = #ulfType#
		and a.contr_code = #contrCode#
		and a.acft_type = (select acft_type from flt_opr where flt_key = #flightKey# and sch_date = #flightDate# and flt_type = 'D')
		and nvl(a.carr_code,#carrCode#) = #carrCode#
	</select>
		<select id="isULDOwnerSameAsCarrier" parameterClass="map" resultClass="java.lang.String">
		select to_char(count(1)) from dual where (select  FUN_GET_PARENT_CARR (#ownerID#) from dual) = (select  FUN_GET_PARENT_CARR (#carrierCode#) from dual)
	</select>
	<select id="isULDPremanifestedOrAssigned" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from uld_inventory
		where uld_key = upper(#uldKey#)
			  and ((flt_key is null and flt_date is null) or (flt_type='I' and empty_flg='Y'))
	</select>	
	<select id="isUldLucConfirmed" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from uld_inventory
		where cfm_status = 'CONFIRMED'
		and upper(uld_key) = upper(#uldKey#)
	</select>		
	<select id="isULDReserved" parameterClass="map" resultClass="java.lang.String">
		select resv_flg from uld_inventory
		where uld_key = #uldKey#
		<isNotEmpty property="flightKey" prepend="AND">
			FLT_KEY = #flightKey#
		</isNotEmpty>
		<isNotEmpty property="flightDate" prepend="AND">
			AND FLT_DATE = #flightDate#
		</isNotEmpty>
	</select>
		<select id="isULDConfirmed" parameterClass="map" resultClass="java.lang.String">
	  select to_char(COUNT(1)) from uld_inventory
		where uld_key = #uldKey#
		AND CFM_STATUS = 'UNCONFIRMED'
	</select>	

<select id="isULDLoadStatus" parameterClass="java.lang.String" resultClass="java.lang.String">
	  <![CDATA[
	SELECT COUNT(cnt) FROM(SELECT (CASE
    WHEN (SELECT code_desc FROM mast_code_dtl WHERE code_type = 'ULD_STATE' AND code = FUN_GET_ULD_STATE(A.ULD_KEY)) = 'Available Loaded'
    THEN 1
    ELSE 0
  	END) cnt
	FROM ULD_INVENTORY A
	WHERE A.ULD_KEY=#uldKey# 
	AND instr(nvl(UPPER((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='DEF_LOAD_TYPE_UAF')),'*'), nvl(UPPER(TRIM(A.LOAD_TYPE)),'**')) > 0) where cnt > 0
	  	]]>
	</select>
	<select id="getLoadTypeValue" parameterClass="java.lang.String" resultClass="java.lang.String">
	 SELECT (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE='LOAD_TYPE' AND trim(code)=TRIM(A.LOAD_TYPE) AND GROUP_CODE='38' AND ROWNUM=1)  FROM ULD_INVENTORY A WHERE A.ULD_KEY=#uldKey# 
	</select>
	<select id="isULDNotEmpty" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from awb_inventory
		where uld_key = #uldKey#
	</select>
	<parameterMap id="valDls" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	<procedure id="validateDlsFinalize" parameterMap="valDls" >
		{? = call pkg_exp_val.val_dls_finalize(?, ?)}
	</procedure>
	<select id="isULDEicCheck" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from ULD_INVENTORY 
		WHERE ULD_KEY = #uldNumber# and EIC_FLG = 'Y'
		and (exists (select null from ULD_INVENTORY where  BASE_PLT = #uldNumber#)
			or BASE_PLT is not null)
	</select>
	<select id="sqluldcheckoutind" parameterClass="map"  resultClass="java.lang.String">
		SELECT decode(t2.cfm_status, 'CHECKED OUT', 'Y', 'N') CHK_FLG    
		FROM EXP_CHKOUT_DTL t1, uld_inventory t2    
		WHERE t1.uld_key = t2.uld_key 
			  AND t1.FLT_KEY = #fltNo#
	  		  AND t1.FLT_DATE = to_date(#fltDate#,'DDMONYY')
	  		  AND t1.ULD_KEY = #uldNo#
	</select>
	<insert id="setUAFDeleteMov" parameterClass="cargo.cms.export.bo.UAFListBO" >
	<![CDATA[
		insert into uld_mov
		(tr_type, tr_no, tr_date, doc_line_no, uld_no, uld_type, uld_carr, uld_key, strg_date,
		mov_from, mov_to, flt_carr,
		flt_no, flt_type, flt_key, flt_date, brd_point, off_point, 
		eic_iss, empty_iss, contr_ccode, owner_id, 
		cr_user_id, cr_date, lm_user_id, lm_date, uld_status, seq_no, event_id)
		select 'UA', uld_key, sysdate, 1, uld_no, uld_type, uld_carr, uld_key, sysdate,
		loc_code, loc_code, carr_code,
		flt_no, flt_type, flt_key, flt_date, null, null,
		eic_flg, empty_flg, contr_code, owner_id, 
		#userID#, sysdate, #userID#, sysdate, cfm_status, uld_mov_seq.nextval, #event_id#
		from uld_inventory
		where uld_key = #uldNumber#
	]]>
	</insert>
	<update id="updateExpFltUldForUldAssmntToFlt" parameterClass="cargo.cms.export.bo.CreateULDBO">
		UPDATE 
			EXP_FLT_ULD 
		SET 
			EIC_YN=NVL(#eicFlag#, 'N'), EMPTY_YN=#emptyFlag#, UNLDG_PT=#unldg_pt#, FLT_USE='N', BB_IND=NVL(#bbIndYN#, 'N'), PMAN_YN='Y', PPK_TYPE=#ppkType#, 
			DEL_YN=#delFlag#, LM_USER_ID=#crUserId#, 
			LM_DATE=SYSDATE , TR_TYPE =#trtype#
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey#
	</update>
	<update id="updateExpPmanUldForUldAssmntToFlt" parameterClass="cargo.cms.export.bo.CreateULDBO">
		UPDATE 
			EXP_PMANIFEST_ULD 
		SET 
			EIC_YN=NVL(#eicFlag#, 'N'), EMPTY_YN=#emptyFlag#, UNLDG_PT=#unldg_pt#, FLT_USE='N', BB_IND=NVL(#bbIndYN#, 'N'), READY_DISP='N', READY_MAN_DATE=SYSDATE, 
			READY_MAN_ID=#crUserId#, READY_WH='N', LM_USER_ID=#crUserId#, LM_DATE=SYSDATE 
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND FLT_TYPE='E'
	</update>
	<update id="updateUldInvForUldAssmntToFlt" parameterClass="cargo.cms.export.bo.CreateULDBO">
		UPDATE 
			ULD_INVENTORY 
		SET 
			ULD_FLOW='E', BB_IND=NVL(#bbIndYN#, 'N'), LM_USER_ID=#crUserId#, LM_DATE=SYSDATE, FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY'), READY_WH = 'N'
		WHERE 
			ULD_KEY=#uldKey#
	</update>
	<insert id="createExpFltUldForUldAssmntToFlt" parameterClass="cargo.cms.export.bo.CreateULDBO">
		INSERT INTO EXP_FLT_ULD
			(ULD_KEY, FLT_KEY, FLT_DATE, EIC_YN, EMPTY_YN, UNLDG_PT, SOURCE, CR_USER_ID, LM_USER_ID, CR_DATE, LM_DATE, INS_FROM_IND, 
			FLT_USE, BB_IND, FLT_TYPE, PMAN_YN, PPK_TYPE, DEL_YN,GROSS_WT,TARE_WT,NET_WT, TR_TYPE) 
		VALUES 
			(#uldKey#, #fltKey#, TO_DATE(#fltDate#,'DDMONYY'), NVL(#eicFlag#, 'N'), #emptyFlag#, #unldg_pt#, #source#, #crUserId#, #crUserId#, 
			SYSDATE, SYSDATE, 'Y', 'N', NVL(#bbIndYN#, 'N'), 'E', NVL(#pmanYN#,'N'), #ppkType#, #delFlag#,#grossWt#,#tareWt#,#grossWt#-#tareWt#,#trtype#)
	</insert>
	<insert id="createExpPmanUldForUldAssmntToFlt" parameterClass="cargo.cms.export.bo.CreateULDBO">
		INSERT INTO EXP_PMANIFEST_ULD
			(FLT_KEY, FLT_DATE, ULD_BT_NO, FLT_TYPE, PPK_TYPE, UNLDG_PT, CR_USER_ID, LM_USER_ID, CR_DATE, LM_DATE, FLT_USE, EIC_YN, 
			EMPTY_YN, BB_IND, READY_DISP, READY_MAN_DATE, READY_MAN_ID, READY_WH, GROUP_NO,TRANSIT_FLG,HDLG_MODE) 
		VALUES 
			(#fltKey#, TO_DATE(#fltDate#,'DDMONYY'), #uldKey#, 'E', #ppkType#, #unldg_pt#, #crUserId#, #crUserId#, SYSDATE, SYSDATE, 
			'N', NVL(#eicFlag#, 'N'),  #emptyFlag#, NVL(#bbIndYN#, 'N'), 'N', SYSDATE, #crUserId#, 'N', '000',
			(SELECT TRANSIT_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey#),
			(SELECT HANDLING_MODE FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey#))
	</insert>
	<select id="fetchRecordExistInExpFltUld" parameterClass="cargo.cms.export.bo.CreateULDBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_FLT_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey#
	</select>
	<select id="fetchRecordExistInExpPmanUld" parameterClass="cargo.cms.export.bo.CreateULDBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMANIFEST_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND FLT_TYPE='E'
	</select>
	<update id="updateSourceInExpFltUld" parameterClass="cargo.cms.export.bo.UAFBO">
		UPDATE EXP_FLT_ULD SET REMARKS=#dlsRemarks#  WHERE FLT_KEY=#flightNumber# AND FLT_DATE=TO_DATE(#flightDate#, 'DDMONYY') AND ULD_KEY=#uldNumber#
	</update>
	<!-- DDS_EXP_BUP_UAFPrintOTL Related Queries End -->
	
	<!-- ######################################################################################################### -->
				<select id="fetchOutBoundUldValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
     SELECT *
FROM
  (
     select uldNo,netWt,tareWt,unldgPt,country,location,bupCompInd,shcCode,bbInd,grossWt,chkOutInd,finalWt,bupWt,fltKey,fltDate,
         transferType,
	trim(decode(grossWt,'0.00','0','0','0',TO_CHAR(netWt-bupWt,'9999990D99'))) as wtVar,
	decode(grossWt,'0.00','0','0','0',decode((netWt-bupWt),'0','0',decode(netWt,'0.00','0',DECODE(netWt,'0','0',(round(100 * ((netWt-bupWt)/netWt))))))) as wtVarPer,readyDisp,readyWh,uldState,qtInd,manWtInd,uldClose,LEG_ORD,bulkULD,
	upliftPriority  
	from (
     SELECT
     A.ULD_BT_NO AS uldNo,
     DECODE(A.bldup_complete,'Y',decode(A.GROSS_WT,null,0,0,0,'0.00','0',trim(TO_CHAR(NVL(A.GROSS_WT-A.TARE_WT,0),'9999990D99'))),'0') AS netWt,
     trim(TO_CHAR(NVL(A.TARE_WT,0),'9999990D99')) AS tareWt,
     A.UNLDG_PT AS unldgPt,
     B.CONTR_CODE AS country,     
     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1','',
     (SELECT LOC_CODE FROM EXP_FLT_ULD B  WHERE A.FLT_KEY =B.FLT_KEY and A.FLT_DATE=B.FLT_DATE and A.ULD_BT_NO = B.ULD_KEY )) AS location,
     A.BLDUP_COMPLETE AS bupCompInd,
     DECODE((select DECODE(COUNT(1),'0','N','Y') from exp_chkout_dtl where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHK_FLG='Y' and rownum=1), 'Y', CHECK_OUT_SHC,  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM(SELECT B.CODE FROM V_EXP_ULD_SHC A,  MAST_SPL_HAND_CODE B WHERE B.CODE = A.CODE AND ULD_KEY  = A.ULD_BT_NO ORDER BY PRIORITY DESC) WHERE ROWNUM &lt;=9)) AS shcCode,
     decode((SELECT BB_IND FROM EXP_FLT_ULD WHERE FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_KEY=A.ULD_BT_NO AND UNLDG_PT=A.UNLDG_PT),'N','N','Y','Y','N') AS bbInd,
     DECODE(A.bldup_complete,'Y',trim(TO_CHAR(NVL(A.GROSS_WT,0),'9999990D99')),'0.00') AS grossWt,
     decode((select COUNT(1) from exp_chkout_dtl where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHK_FLG='Y' and rownum=1),1,'Y','N') AS chkOutInd,
     (SELECT DECODE(FINAL_WEIGHT,null,'N','','N','N','N','Y') FROM EXP_FLT_ULD WHERE FLT_KEY = A.FLT_KEY and FLT_DATE = A.FLT_DATE and ULD_KEY = A.ULD_BT_NO) AS finalWt,
     (SELECT SUM(ASSIGNED_WT) FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO) AS bupWt,
     A.FLT_KEY AS fltKey,
     to_char(A.FLT_DATE,'DDMONYY') AS fltDate, 
      B.TRANSIT_TYPE transferType,
     DECODE(A.READY_DISP,'','N','N','N','Y') AS readyDisp,
     A.READY_WH AS readyWh,
     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1',
     (SELECT code_desc from mast_code_dtl 
         			where code = (select ULD_STATE from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1)  and code_type='ULD_STATE'),
     (SELECT code_desc from mast_code_dtl 
         			where code = FUN_GET_ULD_STATE(A.ULD_BT_NO) and rownum=1)) as uldState,
     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1',
     (select QT_IND from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),
     (DECODE((select transit_type from EXP_FLT_ULD where transit_type='QT' and FLT_KEY = A.FLT_KEY and FLT_DATE = A.FLT_DATE and ULD_KEY = A.ULD_BT_NO),'QT','Y','N'))) AS qtInd,
     B.MAN_WT_IND as manWtInd,
     NVL(A.ULD_CLOSE,'N') AS uldClose,LEG.LEG_ORD,
     DECODE((SELECT BB_IND FROM EXP_FLT_ULD WHERE FLT_KEY=A.FLT_KEY AND FLT_DATE =A.FLT_DATE AND ULD_KEY =A.ULD_BT_NO AND UNLDG_PT =A.UNLDG_PT),'N',DECODE(D.BT_IND,'Y','Y','N',DECODE(D.H_CONT_IND,'N',D.DUMMY_H_CONT_IND,'Y','Y')),'Y','Y','N') AS bulkUld,
     FUN_GET_ULD_UPLIFT_PRIORITY(A.FLT_KEY, TO_CHAR(A.FLT_DATE, 'DDMONYY'), A.ULD_BT_NO) upliftPriority
	FROM
      EXP_PMANIFEST_ULD A
      JOIN MAST_ULD_TYPE D ON D.CODE = substr(A.ULD_BT_NO ,0,3)
      LEFT JOIN EXP_FLT_ULD B on A.FLT_KEY =B.FLT_KEY and A.FLT_DATE=B.FLT_DATE and A.ULD_BT_NO = B.ULD_KEY
        LEFT JOIN
      FLT_OPR_LEG LEG ON
      A.FLT_KEY = LEG.FLT_KEY
      AND A.FLT_DATE = LEG.SCH_DATE
      AND LEG.OFF_POINT=A.UNLDG_PT
WHERE 
      A.FLT_KEY = #fltKey# AND
      A.FLT_DATE =#fltDate#
      AND (B.HANDLING_MODE != 'DT' OR HANDLING_MODE IS NULL)
      AND (B.TRANSIT_TYPE NOT IN ('TT') OR TRANSIT_TYPE IS NULL)
    
                       <isNotEmpty property="readyDisp">
                       AND NVL( A.READY_DISP,'N')= #readyDisp#
                </isNotEmpty>
  UNION 
  
   SELECT
     A.ULD_BT_NO AS uldNo,
     decode(A.GROSS_WT,null,0,0,0,'0.00','0',trim(TO_CHAR(NVL(A.GROSS_WT-A.TARE_WT,0),'9999990D99'))) AS netWt,
     trim(TO_CHAR(NVL(A.TARE_WT,0),'9999990D99')) AS tareWt,
     A.UNLDG_PT AS unldgPt,
     B.CONTR_CODE AS country,
     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1','',
     (SELECT LOC_CODE FROM EXP_FLT_ULD WHERE FLT_KEY = A.FLT_KEY and FLT_DATE = A.FLT_DATE and ULD_KEY = A.ULD_BT_NO)) AS location,
     'Y' AS bupCompInd,     
     DECODE(C.CHK_FLG, 'Y', CHECK_OUT_SHC, (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM(SELECT B.CODE FROM V_EXP_ULD_SHC A,  MAST_SPL_HAND_CODE B WHERE B.CODE = A.CODE AND ULD_KEY  = A.ULD_BT_NO ORDER BY PRIORITY DESC) WHERE ROWNUM &lt;=9)) AS shcCode,
     decode((SELECT BB_IND FROM EXP_FLT_ULD WHERE FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_KEY=A.ULD_BT_NO AND UNLDG_PT=A.UNLDG_PT),'N','N','Y','Y','N') AS bbInd,
     trim(TO_CHAR(NVL(A.GROSS_WT,0),'9999990D99')) AS grossWt,
     decode((select COUNT(1) from exp_chkout_dtl where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHK_FLG='Y' and rownum=1),1,'Y','N') AS chkOutInd,
     (SELECT DECODE(FINAL_WEIGHT,null,'N','','N','N','N','Y') FROM EXP_FLT_ULD WHERE ULD_KEY = A.ULD_BT_NO AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE) AS finalWt,
     (SELECT SUM(ASSIGNED_WT) FROM EXP_PMAN_TARMAC_ULD_AWB WHERE FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO) AS bupWt,
     A.FLT_KEY AS fltKey,
     to_char(A.FLT_DATE,'DDMONYY') AS fltDate,   
      B.TRANSIT_TYPE transferType,
      case when B.TRANSIT_TYPE='IF' then NVL(A.READY_DISP,'N') else 'Y' end AS readyDisp,
     case when B.TRANSIT_TYPE='IF' then NVL(A.READY_DISP,'N') else 'Y' end AS readyWh,
     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1',
     (SELECT code_desc from mast_code_dtl 
         			where code = (select ULD_STATE from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1) and code_type='ULD_STATE'),
     (SELECT code_desc from mast_code_dtl 
         			where code = FUN_GET_ULD_STATE(A.ULD_BT_NO) and rownum=1)) as uldState,
     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1',
     (select QT_IND from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),
     (DECODE((select transit_type from EXP_FLT_ULD where transit_type='QT' and ULD_KEY  = A.ULD_BT_NO  AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE),'QT','Y','N'))) AS qtInd,
     B.MAN_WT_IND as manWtInd,
     'N' AS uldClose,LEG.LEG_ORD,DECODE((SELECT BB_IND FROM EXP_FLT_ULD WHERE FLT_KEY=A.FLT_KEY AND FLT_DATE =A.FLT_DATE AND ULD_KEY =A.ULD_BT_NO AND UNLDG_PT =A.UNLDG_PT),'N',
     DECODE(D.BT_IND,'Y','Y','N',DECODE(D.H_CONT_IND,'N',D.DUMMY_H_CONT_IND,'Y','Y')),'Y','Y','N') AS bulkUld,
     FUN_GET_ULD_UPLIFT_PRIORITY(A.FLT_KEY, TO_CHAR(A.FLT_DATE, 'DDMONYY'), A.ULD_BT_NO) upliftPriority
	FROM
      EXP_PMAN_TARMAC_ULD A
      JOIN EXP_CHKOUT_DTL C on A.FLT_KEY =C.FLT_KEY and A.FLT_DATE=C.FLT_DATE and A.ULD_BT_NO = C.ULD_KEY
      JOIN MAST_ULD_TYPE D ON D.CODE = substr(A.ULD_BT_NO,0,3)
      LEFT JOIN EXP_FLT_ULD B on A.FLT_KEY =B.FLT_KEY and A.FLT_DATE=B.FLT_DATE and A.ULD_BT_NO = B.ULD_KEY
        LEFT JOIN
      FLT_OPR_LEG LEG ON
      A.FLT_KEY = LEG.FLT_KEY
      AND A.FLT_DATE = LEG.SCH_DATE
      AND LEG.OFF_POINT=A.UNLDG_PT
WHERE 
      A.FLT_KEY = #fltKey# AND
      A.FLT_DATE =#fltDate#
      and (B.LOC_CODE is not null or C.CHK_FLG='Y')
   <isNotEmpty property="readyDisp">
                       AND 	decode(B.TRANSIT_TYPE,'IF' , NVL( A.READY_DISP,'N'), 'Y') = #readyDisp#
                </isNotEmpty>
       )) A, ULD_INVENTORY B WHERE B.ULD_KEY = A.uldNo     
   
    <isEqual property="readyIndicator" compareValue="Ready Indicator">
       order by readyWh, unldgPt
       </isEqual>
        <isEqual property="readyIndicator" compareValue="Based On ULD Key">
       
    ORDER BY LEG_ORD,A.bulkUld,B.ULD_TYPE,B.ULD_NO,B.ULD_CARR 
   </isEqual>
    
       
 	</select>
 	<select id="fetchOutBoundUldValues1" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >

select uldNo,netWt,tareWt,unldgPt,country,location,bupCompInd,shcCode,bbInd,grossWt,chkOutInd,finalWt,bupWt,fltKey,fltDate,
	trim(decode(grossWt,'0.00','0','0','0',TO_CHAR(netWt-bupWt,'9999990D99'))) as wtVar,
	decode(grossWt,'0.00','0','0','0',decode((netWt-bupWt),'0','0',decode(netWt,'0.00','0',DECODE(netWt,'0','0',(round(100 * ((netWt-bupWt)/netWt))))))) as wtVarPer,readyDisp,readyWh,uldState,qtInd from (
  SELECT
     A.ULD_BT_NO AS uldNo,
     DECODE(A.bldup_complete,'Y',decode(A.GROSS_WT,null,0,0,0,'0.00','0',trim(TO_CHAR(NVL(A.GROSS_WT-A.TARE_WT,0),'9999990D99'))),'0') AS netWt,
     trim(TO_CHAR(NVL(A.TARE_WT,0),'9999990D99')) AS tareWt,
     A.UNLDG_PT AS unldgPt,
     B.CONTR_CODE AS country,
     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1','',
     B.LOC_CODE) AS location,
     A.BLDUP_COMPLETE AS bupCompInd,
     DECODE((select DECODE(COUNT(1),'0','N','Y') from exp_chkout_dtl where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHK_FLG='Y' and rownum=1), 'Y', CHECK_OUT_SHC,
     (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM(SELECT B.CODE FROM V_EXP_ULD_SHC A,  MAST_SPL_HAND_CODE B WHERE B.CODE = A.CODE AND ULD_KEY  = A.ULD_BT_NO ORDER BY PRIORITY DESC) WHERE ROWNUM &lt;=9) )  AS shcCode,    
     decode((SELECT BB_IND FROM EXP_FLT_ULD WHERE FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_KEY=A.ULD_BT_NO AND UNLDG_PT=A.UNLDG_PT),'N','N','Y','Y','N') AS bbInd,
     DECODE(A.bldup_complete,'Y',trim(TO_CHAR(NVL(A.GROSS_WT,0),'9999990D99')),'0.00') AS grossWt,
     decode((select COUNT(1) from exp_chkout_dtl where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHK_FLG='Y' and rownum=1),1,'Y','N') AS chkOutInd,
     B.FINAL_WEIGHT AS finalWt,
     (SELECT SUM(ASSIGNED_WT) FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO) AS bupWt,
     A.FLT_KEY AS fltKey,
     to_char(A.FLT_DATE,'DDMONYY') AS fltDate,
     DECODE(A.READY_DISP,'','N','N','N','Y') AS readyDisp,
     A.READY_WH AS readyWh,
     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1',
     (SELECT code_desc from mast_code_dtl 
         			where code = (select ULD_STATE from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1)),
     (SELECT code_desc from mast_code_dtl 
         			where code = FUN_GET_ULD_STATE(A.ULD_BT_NO) and rownum=1)) as uldState,
     decode((select COUNT(1) from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),'1',
     (select QT_IND from EXP_FLT_ULD where flt_key=A.FLT_KEY and flt_date=A.FLT_DATE and uld_key=A.ULD_BT_NO and CHECKOUT_YN='Y' and rownum=1),
     (DECODE(B.transit_type,'QT','Y','N') ) ) AS qtInd
	FROM
      EXP_PMANIFEST_ULD A,
      EXP_FLT_ULD B
WHERE 
      B.ULD_KEY = A.ULD_BT_NO AND
      A.FLT_KEY = #fltKey# AND
      A.FLT_DATE = #fltDate# AND
      A.UNLDG_PT = #dest# AND
      A.FLT_KEY=B.FLT_KEY AND A.FLT_DATE=B.FLT_DATE
      AND (B.HANDLING_MODE != 'DT' OR HANDLING_MODE IS NULL)
      AND (B.TRANSIT_TYPE NOT IN ('TT','IF') OR B.TRANSIT_TYPE IS NULL)) order by readyWh, unldgPt
      
 	</select>
<select id="fetchOutBoundAWBListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
    SELECT 
    		
            substr(B.AWB_NO,0,3)||'-'||substr(B.AWB_NO,4,8) AS awbNo,
            to_char(B.AWB_DATE,'DDMONYY') AS awbDate,
            A.ULD_BT_NO AS uldKey,
            PKG_EXP_RPT.get_cc_code_awbType(A.FLT_KEY,A.FLT_DATE,P.AWB_NO,C.AWB_TYPE) as ccCode,
            B.ASSIGNED_PCS AS awbBupcs,
            B.ASSIGNED_WT AS awbBupWt,
            A.UNLDG_PT AS unldgPt,
            B.TR_NO AS trNo,            
            case when c.car_yn = 'Y' and C.PCS != B.ASSIGNED_PCS then 'Y' 
            	else case when P.PMAN_PCS != B.ASSIGNED_PCS then 'Y' else 'N' end end as splitInd,
            DECODE((SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO =B.TR_NO  AND ROWNUM=1),1,'Y','N') AS shcInd,
            DECODE((SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB_UN WHERE TR_NO =B.TR_NO  AND ROWNUM=1),1,'Y','N') AS dgInd,
            DECODE((SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB_TAG WHERE TR_NO =B.TR_NO  AND ROWNUM=1),1,'Y','N') AS tagInd,
            DECODE((SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB_HAWB WHERE TR_NO =B.TR_NO  AND ROWNUM=1),1,'Y','N') AS hawbInd,
            (SELECT SUM(LOCN_PCS) FROM AWB_INVENTORY E WHERE E.ULD_KEY = A.ULD_BT_NO AND  E.AWB_NO = B.AWB_NO AND E.AWB_DATE = B.AWB_DATE AND NOT(E.FLT_TYPE='E' AND E.FLT_KEY IS NOT NULL)) AS nonAwbBupPcs,
            (SELECT SUM(LOCN_WT) FROM AWB_INVENTORY E WHERE E.ULD_KEY = A.ULD_BT_NO AND  E.AWB_NO = B.AWB_NO AND E.AWB_DATE = B.AWB_DATE AND NOT(E.FLT_TYPE='E' AND E.FLT_KEY IS NOT NULL)) AS nonAwbBupWt,
            FUN_GET_AWB_UPLIFT_PRIORITY(C.AWB_NO,C.AWB_DATE) upliftPriority
           FROM
            EXP_PMANIFEST_ULD A
            JOIN EXP_PMANIFEST_ULD_AWB B on B.ULD_BT_NO = A.ULD_BT_NO AND B.FLT_KEY = A.FLT_KEY AND B.FLT_DATE = A.FLT_DATE 
            JOIN EXP_PMANIFEST_AWB P on P.FLT_KEY=A.FLT_KEY AND P.FLT_DATE=A.FLT_DATE AND P.AWB_NO = B.AWB_NO AND P.UNLDG_PT = B.UNLDG_PT
            LEFT JOIN AWB C ON  C.AWB_NO = B.AWB_NO AND C.AWB_DATE = B.AWB_DATE
          WHERE 
             A.FLT_KEY = #fltKey# AND
             A.FLT_DATE = #fltDate# AND
             A.ULD_BT_NO = #uldNo#
UNION
		SELECT 
            substr(B.AWB_NO,0,3)||'-'||substr(B.AWB_NO,4,8) AS awbNo,
            to_char(B.AWB_DATE,'DDMONYY') AS awbDate,
            A.ULD_BT_NO AS uldKey,
            PKG_EXP_RPT.get_cc_code_awbType(A.FLT_KEY,A.FLT_DATE,P.AWB_NO,C.AWB_TYPE) as ccCode,
            B.ASSIGNED_PCS AS awbBupcs,
            B.ASSIGNED_WT AS awbBupWt,
            A.UNLDG_PT AS unldgPt,
            '1' AS trNo,           
            case when c.car_yn = 'Y' and C.PCS != B.ASSIGNED_PCS then 'Y' 
            	else case when P.PPK_PCS != B.ASSIGNED_PCS then 'Y' else 'N' end end as splitInd,
            'N' AS shcInd,
            'N' AS dgInd,
            'N' AS tagInd,
            'N' AS hawbInd,
            (SELECT SUM(LOCN_PCS) FROM AWB_INVENTORY E WHERE E.ULD_KEY = A.ULD_BT_NO AND  E.AWB_NO = B.AWB_NO AND E.AWB_DATE = B.AWB_DATE AND NOT(E.FLT_TYPE='E' AND E.FLT_KEY IS NOT NULL)) AS nonAwbBupPcs,
            (SELECT SUM(LOCN_WT) FROM AWB_INVENTORY E WHERE E.ULD_KEY = A.ULD_BT_NO AND  E.AWB_NO = B.AWB_NO AND E.AWB_DATE = B.AWB_DATE AND NOT(E.FLT_TYPE='E' AND E.FLT_KEY IS NOT NULL)) AS nonAwbBupWt,
            FUN_GET_AWB_UPLIFT_PRIORITY(C.AWB_NO,C.AWB_DATE) upliftPriority
           FROM
            EXP_PMAN_TARMAC_ULD A
            JOIN EXP_PMAN_TARMAC_ULD_AWB B on B.ULD_BT_NO = A.ULD_BT_NO AND B.FLT_KEY = A.FLT_KEY AND B.FLT_DATE = A.FLT_DATE 
            JOIN EXP_PMAN_TARMAC_AWB P on P.FLT_KEY=A.FLT_KEY AND P.FLT_DATE=A.FLT_DATE AND P.AWB_NO = B.AWB_NO AND P.UNLDG_PT = B.UNLDG_PT
            LEFT JOIN AWB C ON  C.AWB_NO = B.AWB_NO AND C.AWB_DATE = B.AWB_DATE
          WHERE 
             A.FLT_KEY = #fltKey# AND
             A.FLT_DATE = #fltDate# AND
             A.ULD_BT_NO = #uldNo#
             
</select>
<select id="fetchOutBoundSHCListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="java.lang.String" >
	SELECT STRAGG(STRINGDELIM(shcCode, ','))  FROM (SELECT SHC AS shcCode FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO = #trNo#
	UNION
	SELECT SHC2 AS shcCode FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO = #trNo#
	UNION
	SELECT SHC3 AS shcCode FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO = #trNo#
	UNION
	SELECT SHC4 AS shcCode FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO = #trNo#
	UNION
	SELECT SHC5 AS shcCode FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO = #trNo#
	UNION
	SELECT SHC6 AS shcCode FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO = #trNo#
	UNION
	SELECT SHC7 AS shcCode FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO = #trNo#
	UNION
	SELECT SHC8 AS shcCode FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO = #trNo#
	UNION
	SELECT SHC9 AS shcCode FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO = #trNo#)
</select>
<select id="fetchOutBoundHAWBListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
        SELECT 
           HAWB_NO AS hawbNo,
           PC AS hawbPc,
           WT AS hawbWt
           FROM EXP_PMANIFEST_ULD_AWB_HAWB WHERE TR_NO =#trNo#
</select>
<select id="fetchOutBoundTAGListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
	SELECT C.AWB_NO,
       DECODE((select DEST from IMP_XPS_OBC_MAIL where awb_no=C.AWB_NO and awb_date=C.AWB_DATE AND TAG_NO=A.TAG_NO AND ROWNUM=1),
               NULL,
                  (SELECT DEST FROM EXP_RCL_OBC WHERE TAG_NO=A.TAG_NO AND RCL_NO IN (
                    SELECT RCL_NO FROM EXP_RCL_HD WHERE AWB_NO=C.AWB_NO AND AWB_DATE=C.AWB_DATE and status != 'V'
                    UNION
                    SELECT RCL_NO FROM EXP_RCL_BRKDN WHERE AWB_NO=C.AWB_NO AND AWB_DATE=C.AWB_DATE
                    AND NOT EXISTS (SELECT NULL FROM EXP_RCL_HD WHERE AWB_NO=C.AWB_NO AND AWB_DATE=C.AWB_DATE and status != 'V')) AND ROWNUM=1),
              (select min(DEST) from IMP_XPS_OBC_MAIL where awb_no=C.AWB_NO and awb_date=C.AWB_DATE AND TAG_NO=A.TAG_NO group by awb_no,awb_date,tag_no)) AS tagDest,
       A.TAG_NO AS tagNo,
       A.PC AS tagLoadPc,
       DECODE((select ACT_PCS from IMP_XPS_OBC_MAIL where awb_no=C.AWB_NO and awb_date=C.AWB_DATE AND TAG_NO=A.TAG_NO AND ROWNUM=1),
               NULL,
                  (SELECT TAG_PCS FROM EXP_RCL_OBC WHERE TAG_NO=A.TAG_NO AND RCL_NO IN (
                    SELECT RCL_NO FROM EXP_RCL_HD WHERE AWB_NO=C.AWB_NO AND AWB_DATE=C.AWB_DATE and status != 'V'
                    UNION
                    SELECT RCL_NO FROM EXP_RCL_BRKDN WHERE AWB_NO=C.AWB_NO AND AWB_DATE=C.AWB_DATE
                    AND NOT EXISTS (SELECT NULL FROM EXP_RCL_HD WHERE AWB_NO=C.AWB_NO AND AWB_DATE=C.AWB_DATE and status != 'V')) AND ROWNUM=1),
              (select sum(ACT_PCS) from IMP_XPS_OBC_MAIL where awb_no=C.AWB_NO and awb_date=C.AWB_DATE AND TAG_NO=A.TAG_NO group by awb_no,awb_date,tag_no)) AS tagPc
     FROM EXP_PMANIFEST_ULD_AWB_TAG A
     JOIN EXP_PMANIFEST_ULD_AWB C ON C.TR_NO = A.TR_NO
    WHERE A.TR_NO =#trNo#
   </select>
<select id="fetchOutBoundDGListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
	SELECT 
		<!--DECODE(UN_TR_NO, NULL, NULL, OVERPACK_ID) overPackId, APIO_ID apioId, NVL(UN_TR_NO, OVERPACK_ID) unNo -->
		OVERPACK_ID overPackId, APIO_ID apioId, UN_TR_NO unNo 
    FROM EXP_PMANIFEST_ULD_AWB_UN
    WHERE TR_NO = #trNo# 
    GROUP BY OVERPACK_ID,APIO_ID,UN_TR_NO ORDER BY OVERPACK_ID ASC
</select>
<select id="getuldandawbNo" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
	select uld_bt_no as uldNo,SUBSTR(TRIM(AWB_NO),1,3)||'-'||SUBSTR(TRIM(AWB_NO),4) as awbNo from exp_pmanifest_uld_awb where tr_no=#trNo# and rownum=1
</select>
<select id="getNotifyEmailRequestBUP" parameterClass="cargo.cms.export.bo.CreateULDBO" resultClass="cargo.cms.export.bo.CreateULDBO" >
SELECT NOTF_MAIL_BU as notfyEmail,HNDLG_MODULE_BU as fltModReq FROM MAST_EDRE_LEVEL_BUP WHERE SEQ_NO = #endorseLevel#
</select>
<select id="getFltModuleNotifyEmailBUP" parameterClass="cargo.cms.export.bo.CreateULDBO" resultClass="cargo.cms.export.bo.CreateULDBO" >
SELECT EMAIL_ADDRESSES notfyEmail FROM MAST_MODULE_OFF_EMAIL WHERE MODULE_OFFICE IN (SELECT FLT_MODULE1 FROM FLT_OPR WHERE FLT_KEY=#fltKey# AND SCH_DATE=#fltDate# AND FLT_TYPE='D')
</select>
<select id="getNotifyFltModDataBUP" parameterClass="cargo.cms.export.bo.CreateULDBO" resultClass="cargo.cms.export.bo.CreateULDBO" >
select A.FLT_MODULE1 AS flightModule,PKG_COMMON.GET_FLT_STA(A.FLT_KEY,A.SCH_DATE, 'D', 'DD') AS std,PKG_COMMON.GET_FLT_ETA(A.FLT_KEY,A.SCH_DATE, 'D', 'DD') AS etd from FLT_OPR A where A.FLT_KEY=#fltKey# and A.SCH_DATE=#fltDate# and A.FLT_TYPE='D'
</select>
<select id="getULDLocationBUP" parameterClass="java.lang.String" resultClass="java.lang.String" >
SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY=#PARAM#
</select>
<select id="fetchOutBoundDGsubListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
 SELECT condition,overPackId,apioId,totApos,SUM(unPkg),SUM(unQty),SUM(unUnit),unNo,unloadPkg from
(SELECT 'Q1' AS condition,
        #overPackId# AS overPackId,
        '' AS apioId,
        '' as totApos,
        B.PKG_PCS AS unPkg,
        B.QTY AS unQty,
        B.QU AS unUnit,
        B.UN_TR_NO AS unNo,
        A.LOAD_QTY AS unloadPkg
  FROM
       EXP_PMANIFEST_ULD_AWB_UN A
        LEFT JOIN EXP_DGD B ON  B.OP_ON = A.OVERPACK_ID AND B.APIO_ID = A.APIO_ID AND B.UN_ID = A.UN_TR_NO
  WHERE  <isNotEmpty property="overPackId">
  A.OVERPACK_ID=#overPackId# 
  </isNotEmpty>
  <isEmpty property="overPackId">
  A.OVERPACK_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="apioId">
  AND A.APIO_ID=#apioId# 
  </isNotEmpty>
  <isEmpty property="apioId">
  AND A.APIO_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="unNo">
  AND A.UN_TR_NO IN ($unNo$)
  </isNotEmpty>) where ROWNUM=1
GROUP BY condition,overPackId,apioId,unNo,unloadPkg 
  UNION ALL
  SELECT condition,overPackId,apioId,totApos,SUM(unPkg),SUM(unQty),SUM(unUnit),unNo,unloadPkg from
(SELECT 'Q2' AS condition, 
        #overPackId# AS overPackId,
        #apioId# AS apioId,
        '' as totApos,
        B.PKG_PCS AS unPkg,
        B.QTY AS unQty,
        B.QU AS unUnit,
        B.UN_TR_NO AS unNo,
        A.LOAD_QTY AS unloadPkg
  FROM
       EXP_PMANIFEST_ULD_AWB_UN A
        LEFT JOIN EXP_DGD B ON  B.OP_ON = A.OVERPACK_ID AND B.APIO_ID = A.APIO_ID AND B.UN_ID = A.UN_TR_NO
  WHERE  <isNotEmpty property="overPackId">
  A.OVERPACK_ID=#overPackId# 
  </isNotEmpty>
  <isEmpty property="overPackId">
  A.OVERPACK_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="apioId">
  AND A.APIO_ID=#apioId# 
  </isNotEmpty>
  <isEmpty property="apioId">
  AND A.APIO_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="unNo">
  AND A.UN_TR_NO IN ($unNo$)
  </isNotEmpty>) where ROWNUM=1
GROUP BY condition,overPackId,apioId,unNo,unloadPkg 
  UNION ALL
  SELECT condition,overPackId,apioId,totApos,SUM(unPkg),SUM(unQty),SUM(unUnit),unNo,unloadPkg
(select 'Q3' AS condition,
        #overPackId# AS overPackId,
        #apioId# AS apioId,
        '' as totApos,
        B.PKG_PCS AS unPkg,
        B.QTY AS unQty,
        B.QU AS unUnit,
        B.UN_TR_NO AS unNo,
        A.LOAD_QTY AS unloadPkg
  FROM
       EXP_PMANIFEST_ULD_AWB_UN A
        LEFT JOIN EXP_DGD B ON  B.OP_ON = A.OVERPACK_ID AND B.APIO_ID = A.APIO_ID AND B.UN_ID = A.UN_TR_NO
  WHERE  <isNotEmpty property="overPackId">
  A.OVERPACK_ID=#overPackId# 
  </isNotEmpty>
  <isEmpty property="overPackId">
  A.OVERPACK_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="apioId">
  AND A.APIO_ID=#apioId# 
  </isNotEmpty>
  <isEmpty property="apioId">
  AND A.APIO_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="unNo">
  AND A.UN_TR_NO IN ($unNo$)
  </isNotEmpty>)
GROUP BY condition,overPackId,apioId,unNo,unloadPkg 
</select>

  <select id="getFlightTypeForoutBoundUld"  parameterClass="map" resultClass="java.lang.String">
	SELECT FLT_TYPE FROM FLT_OPR WHERE FLT_KEY =#FLT_KEY# AND SCH_DATE = TO_DATE( #FLT_DATE#, 'DDMONYY') AND FLT_TYPE='A'
  </select> 
   	
<select id="fetchOutBoundDGsub1ListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
   SELECT condition,overPackId,apioId,totApos,SUM(unPkg),SUM(unQty),SUM(unUnit),unNo,unloadPkg from
(SELECT 'Q2' AS condition, 
        #overPackId# AS overPackId,
        #apioId# AS apioId,
        '' as totApos,
        B.PKG_PCS AS unPkg,
        B.QTY AS unQty,
        B.QU AS unUnit,
        B.UN_TR_NO AS unNo,
        A.LOAD_QTY AS unloadPkg
  FROM
       EXP_PMANIFEST_ULD_AWB_UN A
        LEFT JOIN EXP_DGD B ON  B.OP_ON = A.OVERPACK_ID AND B.APIO_ID = A.APIO_ID AND B.UN_ID = A.UN_TR_NO
  WHERE  <isNotEmpty property="overPackId">
  A.OVERPACK_ID=#overPackId# 
  </isNotEmpty>
  <isEmpty property="overPackId">
  A.OVERPACK_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="apioId">
  AND A.APIO_ID=#apioId# 
  </isNotEmpty>
  <isEmpty property="apioId">
  AND A.APIO_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="unNo">
  AND A.UN_TR_NO IN ($unNo$)
  </isNotEmpty>) where ROWNUM=1
GROUP BY condition,overPackId,apioId,unNo,unloadPkg 
  UNION ALL
     SELECT condition,overPackId,apioId,totApos,SUM(unPkg),SUM(unQty),SUM(unUnit),unNo,unloadPkg from
(select 'Q3' AS condition,
        #overPackId# AS overPackId,
        #apioId# AS apioId,
        '' as totApos,
        B.PKG_PCS AS unPkg,
        B.QTY AS unQty,
        B.QU AS unUnit,
        B.UN_TR_NO AS unNo,
        A.LOAD_QTY AS unloadPkg
  FROM
       EXP_PMANIFEST_ULD_AWB_UN A
        LEFT JOIN EXP_DGD B ON  B.OP_ON = A.OVERPACK_ID AND B.APIO_ID = A.APIO_ID AND B.UN_ID = A.UN_TR_NO
  WHERE  <isNotEmpty property="overPackId">
  A.OVERPACK_ID=#overPackId# 
  </isNotEmpty>
  <isEmpty property="overPackId">
  A.OVERPACK_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="apioId">
  AND A.APIO_ID=#apioId# 
  </isNotEmpty>
  <isEmpty property="apioId">
  AND A.APIO_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="unNo">
  AND A.UN_TR_NO IN ($unNo$)
  </isNotEmpty>)
GROUP BY condition,overPackId,apioId,unNo,unloadPkg 
</select>
<select id="fetchOutBoundDGsub2ListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
SELECT condition,overPackId,apioId,totApos,SUM(unPkg),SUM(unQty),SUM(unUnit),unNo,unloadPkg from
(select 'Q3' AS condition,
        #overPackId# AS overPackId,
        #apioId# AS apioId,
        '' as totApos,
        B.PKG_PCS AS unPkg,
        B.QTY AS unQty,
        B.QU AS unUnit,
        B.UN_TR_NO AS unNo,
        A.LOAD_QTY AS unloadPkg
  FROM
       EXP_PMANIFEST_ULD_AWB_UN A
        LEFT JOIN EXP_DGD B ON  B.OP_ON = A.OVERPACK_ID AND B.APIO_ID = A.APIO_ID AND B.UN_ID = A.UN_TR_NO
  WHERE  <isNotEmpty property="overPackId">
  A.OVERPACK_ID=#overPackId# 
  </isNotEmpty>
  <isEmpty property="overPackId">
  A.OVERPACK_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="apioId">
  AND A.APIO_ID=#apioId# 
  </isNotEmpty>
  <isEmpty property="apioId">
  AND A.APIO_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="unNo">
  AND A.UN_TR_NO IN ($unNo$)
  </isNotEmpty>)
GROUP BY condition,overPackId,apioId,unNo,unloadPkg 
</select>
<select id="fetchOutBoundDGsub3ListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
  SELECT condition,overPackId,apioId,totApos,SUM(unPkg),SUM(unQty),SUM(unUnit),unNo,unloadPkg from
(SELECT 'Q1' AS condition,
        #overPackId# AS overPackId,
        '' AS apioId,
        '' as totApos,
        B.PKG_PCS AS unPkg,
        B.QTY AS unQty,
        B.QU AS unUnit,
        B.UN_TR_NO AS unNo,
        A.LOAD_QTY AS unloadPkg
  FROM
       EXP_PMANIFEST_ULD_AWB_UN A
        LEFT JOIN EXP_DGD B ON  B.OP_ON = A.OVERPACK_ID AND B.APIO_ID = A.APIO_ID AND B.UN_ID = A.UN_TR_NO
  WHERE  <isNotEmpty property="overPackId">
  A.OVERPACK_ID=#overPackId# 
  </isNotEmpty>
  <isEmpty property="overPackId">
  A.OVERPACK_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="apioId">
  AND A.APIO_ID=#apioId# 
  </isNotEmpty>
  <isEmpty property="apioId">
  AND A.APIO_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="unNo">
  AND A.UN_TR_NO IN ($unNo$)
  </isNotEmpty>) where ROWNUM=1
GROUP BY condition,overPackId,apioId,unNo,unloadPkg 
  UNION ALL
SELECT condition,overPackId,apioId,totApos,SUM(unPkg),SUM(unQty),SUM(unUnit),unNo,unloadPkg from
(select 'Q3' AS condition,
        #overPackId# AS overPackId,
        #apioId# AS apioId,
        '' as totApos,
        B.PKG_PCS AS unPkg,
        B.QTY AS unQty,
        B.QU AS unUnit,
        B.UN_TR_NO AS unNo,
        A.LOAD_QTY AS unloadPkg
  FROM
       EXP_PMANIFEST_ULD_AWB_UN A
        LEFT JOIN EXP_DGD B ON  B.OP_ON = A.OVERPACK_ID AND B.APIO_ID = A.APIO_ID AND B.UN_ID = A.UN_TR_NO
  WHERE  <isNotEmpty property="overPackId">
  A.OVERPACK_ID=#overPackId# 
  </isNotEmpty>
  <isEmpty property="overPackId">
  A.OVERPACK_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="apioId">
  AND A.APIO_ID=#apioId# 
  </isNotEmpty>
  <isEmpty property="apioId">
  AND A.APIO_ID IS NULL 
  </isEmpty>
  <isNotEmpty property="unNo">
  AND A.UN_TR_NO IN ($unNo$)
  </isNotEmpty>)
GROUP BY condition,overPackId,apioId,unNo,unloadPkg 
</select>
<select id="fetchOutBoundWtModListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
        select awbNo,uldKey,lspNo,location,lspRefWt,bupPcs,bupWt,loadPcs,loadWt,fltKey,fltDate,fltType,bupWt as bupNewWt,loadWt as loadNewWt,substr(awbNo,0,3)||'-'||substr(awbNo,4,8) as awbNoDisplay,
(select decode(bldup_complete,'Y',decode(GROSS_WT,'0.00','0','0','0',(GROSS_WT - TARE_WT) - (wtBup)),'0') from EXP_PMANIFEST_ULD Where uld_BT_NO=uldKey AND FLT_KEY=fltKey AND FLT_DATE=fltDate) wtVar,
(select DECODE(bldup_complete,'Y',DECODE(GROSS_WT,'0.00','0','0','0',DECODE(((GROSS_WT - TARE_WT) - (wtBup)),'0.00','0','0','0',decode(GROSS_WT - TARE_WT,'0.00','0','0','0',ROUND(100 * (((GROSS_WT - TARE_WT) - (wtBup))/(GROSS_WT - TARE_WT)))))),'0') from EXP_PMANIFEST_ULD where uld_BT_NO=uldKey AND FLT_KEY=fltKey AND FLT_DATE=fltDate) wtVarPer
from
(
select awbNo,uldKey,lspNo,location,lspRefWt,bupPcs,bupWt,loadPcs,loadWt,fltKey,to_char(fltDate,'DDMONYY') as fltDate,fltType as fltType,bupWt as bupNewWt,loadWt as loadNewWt,
substr(awbNo,0,3)||'-'||substr(awbNo,4,8) as awbNoDisplay,
(SELECT SUM(ASSIGNED_WT) FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY=fltkey AND FLT_DATE=to_char(fltDate,'DDMONYY') AND ULD_BT_NO=uldKey) as wtBup
from
(
SELECT awbNo as awbNo,uldKey as uldKey,lspNo as lspNo,location,lspRefWt as lspRefWt,sum(bupPcs) as bupPcs,sum(bupWt) as bupWt,sum(loadedPcs) as loadPcs,sum(loadedWt) as loadWt,
(select flt_key from awb_inventory where awb_no=awbNo and (lsp_no=lspNo or uld_key=uldKey) AND FLT_KEY IS NOT NULL AND ROWNUM=1) AS fltKey,
(select FLT_DATE from awb_inventory where awb_no=awbNo and (lsp_no=lspNo or uld_key=uldKey) AND FLT_DATE IS NOT NULL AND ROWNUM=1) as fltDate,
(select FLT_TYPE from awb_inventory where awb_no=awbNo and (lsp_no=lspNo or uld_key=uldKey) AND FLT_KEY IS NOT NULL AND FLT_DATE IS NOT NULL AND ROWNUM=1) as fltType
 FROM
(select A.uld_key uldKey, 
      A.AWB_NO awbNo,
      A.lsp_no lspNo, 
      A.LOC_CODE location,
      (case when (select  count(1) from awb_inventory aa where aa.lsp_no=A.LSP_NO) > 1 then 'Shpm:1+'
                     else (select to_char(l.REF_WT) from lsp_inventory l where l.lsp_no=A.lsp_no) end)  as lspRefWt,
      DECODE(A.uld_key,NULL,'',sum(LOCN_PCS)) AS bupPcs,
      DECODE(A.uld_key,NULL,'',sum(LOCN_WT)) AS bupWt,
      DECODE(A.lsp_no,NULL,'',sum(LOCN_PCS)) AS loadedPcs,
      DECODE(A.lsp_no,NULL,'',sum(LOCN_WT)) AS loadedWt
      from 
      awb_inventory A
     LEFT JOIN ULD_INVENTORY B ON B.ULD_KEY=A.ULD_KEY AND A.ULD_KEY IS NOT NULL
      where
      AWB_NO=#awbNo# AND
      AWB_DATE=#awbDate# 
      AND ((A.ULD_KEY IS NOT NULL AND B.PPK_IND='N' AND B.MIX_PPK_IND='N') OR (A.ULD_KEY IS NULL AND A.LSP_NO IS NOT NULL))
      group by A.uld_key,A.AWB_NO, A.lsp_no,A.AWB_DATE,A.LOC_CODE order by lspNo desc) 
GROUP BY awbNo,uldKey,lspNo,lspRefWt,location)) order by uldKey
</select>
<select id="fetchOutBoundInvListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
select substr(a.awb_no,0,3)||'-'||substr(a.awb_no,4,8) as awbNoDisplay,
(select sum(pcs) from awb where awb_no=a.awb_no and awb_date=a.awb_date) as awbPcs,
(select sum(wt) from awb where awb_no=a.awb_no and awb_date=a.awb_date) as awbWt,
(select sum(LOCN_PCS)
from 
     awb_inventory B
     LEFT JOIN ULD_INVENTORY C ON C.ULD_KEY=B.ULD_KEY AND B.ULD_KEY IS NOT NULL
where
      AWB_NO=a.awb_no AND
      AWB_DATE=a.awb_date AND ((B.ULD_KEY IS NOT NULL AND C.PPK_IND='N' AND C.MIX_PPK_IND='N') OR (B.ULD_KEY IS NULL AND B.LSP_NO IS NOT NULL))) as invPcs,
(select sum(LOCN_WT)
from 
     awb_inventory B
     LEFT JOIN ULD_INVENTORY C ON C.ULD_KEY=B.ULD_KEY AND B.ULD_KEY IS NOT NULL
where
      AWB_NO=a.awb_no AND
      AWB_DATE=a.awb_date AND ((B.ULD_KEY IS NOT NULL AND C.PPK_IND='N' AND C.MIX_PPK_IND='N') OR (B.ULD_KEY IS NULL AND B.LSP_NO IS NOT NULL))) as invWt
from awb a where awb_no=#awbNo# and awb_date=#awbDate#
</select>
<select id="fetchOutBoundNonBuListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
	select A.awb_no AS awbNo,
	substr(A.awb_no,0,3)||'-'||substr(A.awb_no,4,8) as awbNoDisplay,
	TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate,
	pkg_exp_val.get_exp_awb_cc_code(A.FLT_KEY,A.FLT_DATE,A.AWB_NO) AS ccCode,
	SUM(A.PMAN_PCS) + DECODE((select sum(bulk_pcs)+ sum(ppk_pcs) from exp_pman_tarmac_awb where awb_no=A.awb_no and awb_date=A.AWB_DATE and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE),'',0,((select sum(bulk_pcs)+ sum(ppk_pcs) from exp_pman_tarmac_awb where awb_no=A.awb_no and awb_date=A.AWB_DATE and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE))) AS pmanPcs,
	SUM(A.PMAN_WT) + DECODE((select sum(bulk_wt)+ sum(ppk_wt) from exp_pman_tarmac_awb where awb_no=A.awb_no and awb_date=A.AWB_DATE and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE),'',0,((select sum(bulk_wt)+ sum(ppk_wt) from exp_pman_tarmac_awb where awb_no=A.awb_no and awb_date=A.AWB_DATE and flt_key=A.FLT_KEY and flt_date=A.FLT_DATE))) AS pmanWt,
	SUM(A.UNASSIGNED_BULK_PCS) as unAssignPcs,
	SUM(A.UNASSIGNED_BULK_WT) as unAssignWt,
	(SELECT STRAGG(STRINGDELIM(shp_trf_type, ',')) FROM V_DDT_DTL WHERE AWB_NO=a.awb_no AND AWB_DATE=a.awb_date) transType,
	pkg_common.get_awb_splcodes(a.awb_no,a.awb_date ,(SELECT AWB_TYPE FROM AWB WHERE AWB_NO=a.awb_no AND AWB_DATE=a.awb_date AND ROWNUM=1)) shcCode, (
		SELECT MIN(FUN_GET_AWB_UPLIFT_PRIORITY(AWB_NO,AWB_DATE)) FROM AWB WHERE AWB.AWB_NO = A.AWB_NO AND AWB.AWB_DATE = A.AWB_DATE
	) upliftPriority
	from 
	exp_pmanifest_awb A 
	where 
	unassigned_bulk_pcs > 0 and
	shp_type in ('LOCAL','TRM') and
	flt_key=#fltKey# and
	flt_date=#fltDate# GROUP BY A.AWB_NO,A.FLT_DATE,A.FLT_KEY,A.AWB_DATE
</select>
<update id="sqlUpdateManualAWBUpliftPriority" parameterClass="java.util.Map">
		<![CDATA[
	    	UPDATE AWB
	    	SET
    		AWB_UPLIFT_PRIORITY = #PRIORITY#, UPLIFT_PRIO_MANUAL_YN = 'Y', TR_TYPE = 'AWBUPL',
    		LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>
	<select id="getUpliftULDPriority" parameterClass="java.util.Map" resultClass="java.lang.String">
	    	SELECT FUN_GET_ULD_UPLIFT_PRIORITY(#FLT_KEY#,#FLT_DATE#,#ULD_KEY#) FROM DUAL 
	</select>
	<update id="sqlUpdateUpliftPriorityOnBUComplete" parameterClass="java.util.Map">
		<![CDATA[
	    	UPDATE EXP_PMANIFEST_ULD PMAN
	    	SET
    		UPLIFT_PRIORITY = 
    		CASE 
    			WHEN NVL(BLDUP_COMPLETE, 'N') = 'Y' THEN #PRIORITY#
    			ELSE NULL
    		END, 
    		LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE,
    		tr_type_evt = 'ULDUPL'
			WHERE ULD_BT_NO = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
		]]>
	</update>
	<update id="sqlUpdateUpliftPriorityOnBUCompleteTTIF" parameterClass="java.util.Map">
		<![CDATA[
	    	UPDATE exp_pman_tarmac_uld PMAN
	    	SET
    		UPLIFT_PRIORITY =  #PRIORITY# , LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE , tr_type = 'ULDUPL'
			WHERE ULD_BT_NO = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
		]]>
	</update>
<select id="sqlGetOffloadingULDPriorityTarmac" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
	    	SELECT UPLIFT_PRIORITY FROM EXP_PMAN_TARMAC_ULD 
	    	WHERE ULD_BT_NO = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
		]]>
	</select>
	<update id="sqlUpdateRevertULDUpliftPriorityOnDeleteOffloadTARMAC" parameterClass="java.util.Map">
		<![CDATA[
	    	UPDATE EXP_PMAN_TARMAC_ULD
	    	SET
    		UPLIFT_PRIORITY = #PRIORITY#, tr_type = 'ULDUPL',
    		LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE ULD_BT_NO = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
		]]>
	</update>
	<select id="sqlGetULDUpliftPriority" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
	    	SELECT FUN_GET_ULD_UPLIFT_PRIORITY(#FLT_KEY#, #FLT_DATE#, #ULD_KEY#) upliftPriority FROM DUAL
		]]>
	</select>
<select id="fetchOutBoundAllotmentListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="java.lang.String" >
<![CDATA[
SELECT DECODE(substr(TOTAL,0,1),',',substr(TOTAL,2,length(total)),total) AS total from(
select (select (decode(sum(allot.qty_Q7 ), null, '', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode( sum(allot.QTY_H5 ), null, '', ','|| sum(allot.QTY_H5 ) ||'H5' )
                || decode(sum(allot.H5WT), null, '', '('|| sum(allot.H5WT)||')' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and port.doc_line_no= allot.port_doc_line_no  and allot.CGO_TYPE in('Transit','Export Local B/U'))  as total               
                 from edi_elp_msg msg,edi_elp_port port
                where msg.TR_NO=port.tr_no  and port.port=#dest# and  msg.flt_key=#fltKey# and msg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and msg.tr_no in
               (SELECT  a.trNo  FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') 
               AND elpmsg.TRF_IND = 'Y' order by to_number(elpmsg.tr_no)  desc)a
                WHERE rownum =1))
   ]]>
</select>
<select id="fetchoutboundflightcontrdetails" parameterClass="java.lang.String" resultClass="java.lang.String" >
SELECT ULD_ALLOT FROM MAST_ULD_ALLOT_GROUP WHERE uld_group=(select ULD_GROUP from uld_group_type where uld_type=(select uld_type from uld_type_contr where contr_code=decode(#PARAM#,'LDC','L3',#PARAM#) and ROWNUM=1) AND ROWNUM=1)
</select>
<select id="fetchoutbounduldcontrdetails" parameterClass="java.lang.String" resultClass="java.lang.String" >
SELECT ULD_ALLOT FROM MAST_ULD_ALLOT_GROUP WHERE uld_group=(select ULD_GROUP from uld_group_type where uld_type=(SELECT substr(ULD_KEY,0, 3) FROM ULD_INVENTORY WHERE ULD_KEY=#PARAM#) AND ROWNUM=1)
</select>

<select id="fetchOutBoundBuildupAllotmentListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="java.lang.String" >
<![CDATA[
SELECT stragg(stringdelim(sum(qty)||allot,','))  from (
SELECT regexp_replace(B.ALLOT_TYPE, '^[A-Za-z0-9]') as allot,
SUBSTR(B.ALLOT_TYPE,0,instr(B.ALLOT_TYPE, regexp_replace(B.ALLOT_TYPE, '^[A-Za-z0-9]'), 1, 1) - 1) as qty 
FROM 
EXP_BU_GP A, EXP_BU_GP_ULD_TYPE B WHERE A.GP_NO = B.GP_NO AND A.FLT_KEY = #fltKey# AND A.FLT_DATE = #fltDate# AND A.UNLDG_PT=#dest# AND B.ALLOT_TYPE IS NOT NULL) a
group by allot,qty
   ]]>
</select>
<select id="fetchOutBoundBuildupContrCodeListValues" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="java.lang.String" >
<![CDATA[
select COUNT(d.uld_allot)||d.uld_allot
from
exp_bu_gp a,exp_bu_gp_uld_type b,mast_uld_allot_group D where a.gp_no=b.gp_no and D.uld_group = b.cntr_code AND a.flt_key =#fltKey# and a.flt_date=#fltDate# AND A.UNLDG_PT=#dest# AND d.uld_allot IS NOT NULL GROUP BY d.uld_allot
]]>
</select>

<select id="fetchAllotmentDestList" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
select flt_key as fltKey,
       to_char(sch_date,'DDMONYY') as fltDate,
       off_point as dest
       from flt_opr_leg where flt_key=#fltKey# and SCH_date=#fltDate# and flt_type = 'D'
</select>

<select id = "checkOutBoundCarrIsValidOrNot" parameterClass="cargo.cms.export.bo.OutBoundULDListBO"  resultClass="java.lang.Integer">
	select COUNT(1) from mast_carrier where code=#fltCarr# 
</select>
<select id = "fetchDlsInd" parameterClass="cargo.cms.export.bo.OutBoundULDListBO"  resultClass="java.lang.String">
	SELECT DLS_IND FROM flt_opr_events WHERE flt_key = #fltKey# AND sch_date  = TO_DATE(#fltDate#, 'DDMONYY') AND flt_type  = 'D'
</select>

<select id="checkOutBoundFlightIsValidOrNot"  parameterClass="cargo.cms.export.bo.OutBoundULDListBO"  resultClass="java.lang.Integer">
		SELECT count(FLT_KEY) FROM FLT_OPR A  WHERE A.FLT_KEY=UPPER(#fltKey#) AND A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		AND A.FLT_TYPE = 'D'
</select>
<select id="checkOutBoundawbislockornot"  parameterClass="cargo.cms.export.bo.OutBoundULDListBO"  resultClass="java.lang.Integer">
		SELECT 
       COUNT(C.LOCK_IND)
       FROM
       EXP_PMANIFEST_ULD A,
       EXP_PMANIFEST_ULD_AWB B,
       EXP_CAR C
       WHERE 
       A.ULD_BT_NO = b.uld_bt_no AND
       A.FLT_KEY = B.FLT_KEY AND
       A.FLT_DATE = B.FLT_DATE AND
       C.AWB_NO = B.AWB_NO AND
       C.AWB_DATE = B.AWB_DATE AND
       A.ULD_BT_NO =#uldNo# AND 
       A.FLT_KEY = #fltKey# AND
       A.FLT_DATE = #fltDate# AND
       C.LOCK_IND = 'Y'
</select>
<update id="UpdateOutboundTareWeightinUldInv" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" >
	UPDATE ULD_INVENTORY SET TARE_WEIGHT=#tareWt# WHERE ULD_KEY=#uldKey#
</update>
<update id="UpdateOutboundTareWeightinUldExpPman" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" >
	UPDATE EXP_PMANIFEST_ULD SET TR_TYPE_EVT = 'OULDL', TARE_WT=#tareWt# WHERE ULD_BT_NO = #uldNo# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
</update>
<update id="UpdateOutboundReadyWHinUldExpPman" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" >
	UPDATE EXP_PMANIFEST_ULD SET READY_WH=#readyWh#,READY_DISP=DECODE(#dumReadyDisp#,'N','N','Y'),
	READY_DISP_DATE = DECODE(#dumReadyDisp#,'N',NULL,SYSDATE),READY_DISP_TIME = DECODE(#dumReadyDisp#,'N',NULL,TO_CHAR(SYSDATE,'HH24MI'))
	WHERE ULD_BT_NO = #uldNo# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
</update>


<update id="DEC_WT_IN_OUTBOUND_AWBINVENTORY" parameterClass="map" >
	UPDATE AWB_INVENTORY SET locn_wt = locn_wt - #wt# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ULD_KEY=#uldKey#
		 AND nvl(FLT_KEY,'*') = nvl(#fltKey#,'*') AND nvl(FLT_DATE,'01JAN00') = to_date(nvl(#fltDate#,'01JAN00'),'DDMONYY')
</update>

<update id="DEC_WT_IN_OUTBOUND_EXPPMANIFESTULDAWB" parameterClass="map" >
	UPDATE EXP_PMANIFEST_ULD_AWB SET ASSIGNED_WT = ASSIGNED_WT - TO_CHAR(#wt#,'9999990D99'),TR_TYPE='OBULT',LM_DATE=SYSDATE,LM_USER_ID=#userID# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ULD_BT_NO=#uldKey# AND FLT_KEY = #fltKey# AND FLT_DATE = #fltDate#
</update>

<update id="DEC_WT_IN_OUTBOUND_EXPFLTULD" parameterClass="map" >
	UPDATE EXP_FLT_ULD SET MAN_WT = MAN_WT - #wt# , TR_TYPE='OBULT',LM_DATE=SYSDATE,LM_USER_ID=#userID# WHERE ULD_KEY=#uldKey# AND FLT_KEY = #fltKey# AND FLT_DATE = #fltDate#
</update>

<update id="DEC_WT_IN_OUTBOUND_AWB" parameterClass="map" >
	UPDATE AWB SET BLDUP_BULK_WT = BLDUP_BULK_WT - #wt#,TR_TYPE=#trType# where awb_no=#awbNo# and awb_date=#awbDate#
</update>

<update id="DEC_WT_IN_OUTBOUND_EXPPMANIFESTAWB" parameterClass="map" >
	UPDATE EXP_PMANIFEST_AWB SET assigned_bulk_wt = assigned_bulk_wt - #wt#, unassigned_bulk_wt = unassigned_bulk_wt + #wt#,TR_TYPE='OBULT',LM_DATE=SYSDATE,LM_USER_ID=#userID# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND FLT_KEY = #fltKey# AND FLT_DATE = #fltDate#
</update>

<update id="INC_WT_IN_OUTBOUND_AWBINVENTORY" parameterClass="map" >
	UPDATE AWB_INVENTORY SET locn_wt = locn_wt + #wt# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ULD_KEY=#uldKey# 
		AND nvl(FLT_KEY,'*') = nvl(#fltKey#,'*') AND nvl(FLT_DATE,'01JAN00') = to_date(nvl(#fltDate#,'01JAN00'),'DDMONYY')	 
</update>

<update id="INC_WT_IN_OUTBOUND_EXPPMANIFESTULDAWB" parameterClass="map" >
	UPDATE EXP_PMANIFEST_ULD_AWB SET ASSIGNED_WT = ASSIGNED_WT + TO_CHAR(#wt#,'9999990D99'),TR_TYPE='OBULT',LM_DATE=SYSDATE,LM_USER_ID=#userID# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ULD_BT_NO=#uldKey# AND FLT_KEY = #fltKey# AND FLT_DATE = #fltDate#
</update>

<update id="INC_WT_IN_OUTBOUND_EXPFLTULD" parameterClass="map" >
	UPDATE EXP_FLT_ULD SET MAN_WT = MAN_WT + #wt# , TR_TYPE='OBULT',LM_DATE=SYSDATE,LM_USER_ID=#userID# WHERE ULD_KEY=#uldKey# AND FLT_KEY = #fltKey# AND FLT_DATE = #fltDate#
</update>

<update id="INC_WT_IN_OUTBOUND_AWB" parameterClass="map" >
	UPDATE AWB SET BLDUP_BULK_WT = BLDUP_BULK_WT + #wt#,TR_TYPE=#TR_TYPE# where awb_no=#awbNo# and awb_date=#awbDate#
</update>

<update id="INC_WT_IN_OUTBOUND_EXPPMANIFESTAWB" parameterClass="map" >
	UPDATE EXP_PMANIFEST_AWB SET assigned_bulk_wt = assigned_bulk_wt + #wt#, unassigned_bulk_wt = unassigned_bulk_wt - #wt#,TR_TYPE='OBULT',LM_DATE=SYSDATE,LM_USER_ID=#userID# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND FLT_KEY = #fltKey# AND FLT_DATE = #fltDate#
</update>
<select id="fetcholdstoragelistbasedonuldkey" parameterClass="map" resultClass="cargo.cms.export.bo.OutBoundULDListBO">
SELECT SEQ_NO AS seqNo,LOCN_PCS AS locnPcs,TRIM(TO_CHAR(NVL(locn_wt,0), '999999999D99')) AS locnWt FROM AWB_INVENTORY WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ULD_KEY=#uldKey#
</select>
<select id="fetchseqnoAWBInvwtwithFltKeyNull"  parameterClass="map" resultClass="java.lang.String">
SELECT SEQ_NO FROM AWB_INVENTORY WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ULD_KEY=#uldKey# AND ROWNUM=1
</select>
<update id="DEC_WT_IN_OUTBOUND_LOAD_AWBINVENTORY" parameterClass="map" >
	UPDATE AWB_INVENTORY SET locn_wt = locn_wt - #locWt# WHERE SEQ_NO=#seqNo#
</update>

<update id="INC_WT_IN_OUTBOUND_LOAD_AWBINVENTORY" parameterClass="map" >
	UPDATE AWB_INVENTORY SET locn_wt = locn_wt + #wt# WHERE SEQ_NO=#seqno#
</update>

<update id="DEC_WT_IN_OUTBOUND_LOAD_LSP_AWBINVENTORY" parameterClass="map" >
	UPDATE AWB_INVENTORY SET locn_wt = locn_wt - #wt# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo# 
</update>


<update id="DEC_WT_IN_OUTBOUND_LOAD_LSP_NULL_AWBINVENTORY" parameterClass="map" >
	UPDATE AWB_INVENTORY SET locn_wt = locn_wt - #wt# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo# AND flt_key is null and flt_date is null
</update>

<update id="DEC_WT_IN_OUTBOUND_LOAD_LSP_NOT_NULL_AWBINVENTORY" parameterClass="map" >
	UPDATE AWB_INVENTORY SET locn_wt = locn_wt - #locWt# WHERE SEQ_NO=#seqNo#
</update>
<select id="fetcholdstoragelistbasedonlspfltnotnull" parameterClass="map" resultClass="cargo.cms.export.bo.OutBoundULDListBO">
SELECT SEQ_NO AS seqNo,LOCN_PCS AS locnPcs,TRIM(TO_CHAR(NVL(locn_wt,0), '999999999D99')) AS locnWt FROM AWB_INVENTORY WHERE flt_key is NOT NULL and flt_date is NOT NULL and AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo#
</select>
<select id="fetchAWBInvwtwithFltKeyNull"  parameterClass="map" resultClass="java.lang.String">
select TRIM(TO_CHAR(NVL(sum(locn_wt),0), '999999999D99')) from awb_inventory WHERE flt_key is null and flt_date is null and AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo#
</select>

<select id="fetchAWBInvwtwithFltKeyNotNull"  parameterClass="map" resultClass="java.lang.String">
select TRIM(TO_CHAR(NVL(sum(locn_wt),0), '999999999D99')) from awb_inventory WHERE flt_key is NOT NULL and flt_date is NOT NULL and AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo#
</select>

<select id="fetchAWBInvwtwithPcsFltKeyNotNull"  parameterClass="map" resultClass="java.lang.String">
select locn_pcs from awb_inventory WHERE flt_key is NOT NULL and flt_date is NOT NULL and AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo# AND LOCN_WT =0
</select>

<select id="fetchAWBInvwtwithPcsFltKeyNull"  parameterClass="map" resultClass="java.lang.String">
select locn_pcs from awb_inventory WHERE flt_key is null and flt_date is null and AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo# AND LOCN_WT =0
</select>

<update id="DEC_WT_IN_OUTBOUND_LOAD_LSP_PCS_NULL_AWBINVENTORY" parameterClass="map" >
	<![CDATA[
 		UPDATE AWB_INVENTORY SET locn_pcs = locn_pcs + #pcs# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo# AND flt_key is null and flt_date is null and locn_wt != 0 and rownum=1
 	]]>
</update>

<update id="DEC_WT_IN_OUTBOUND_LOAD_LSP_PCS_NOT_NULL_AWBINVENTORY" parameterClass="map" >
	<![CDATA[
		 UPDATE AWB_INVENTORY SET locn_pcs = locn_pcs + #pcs# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo# AND flt_key is NOT NULL and flt_date is NOT NULL and locn_wt != 0 and rownum=1
 	]]>
</update>

<delete id="DELAWBInvwtwithFltKeyNotNull" parameterClass="map" >	
		delete from awb_inventory where locn_wt = 0 and AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo#
</delete>



<update id="INC_WT_IN_OUTBOUND_LOAD_LSP_AWBINVENTORY" parameterClass="map" >
	UPDATE AWB_INVENTORY SET locn_wt = locn_wt + #wt# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND LSP_NO=#lspNo# and rownum=1
</update>

<update id="updateTareWtInUldInventory" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" >
	UPDATE ULD_INVENTORY SET TARE_WEIGHT=#tareWt#, READY_WH=#readyWh# WHERE ULD_KEY = #uldNo#
</update>
<update id="updateTareWtInExpfltuld" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" >
	UPDATE EXP_FLT_ULD SET TARE_WT=#tareWt#,NET_WT=#netWt# WHERE ULD_KEY = #uldNo# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
</update>

<update id="updateUldWtInUldInventory" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" >
	update awb_inventory set locn_wt=#loadNewWt#, lm_date=sysdate, lm_user_id=#userID# where awb_no=(select substr(#awbNo#,0,3)||substr(#awbNo#,5,9) from dual) and uld_key=#uldKey#
</update>
<update id="updateLspWtInLspInventory" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" >
	update awb_inventory set locn_wt=#loadNewWt#, lm_date=sysdate, lm_user_id=#userID# where awb_no=(select substr(#awbNo#,0,3)||substr(#awbNo#,5,9) from dual) and uld_key=#lspNo#
</update>
<select id="checkAssgnedPcwtValidation" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="java.lang.Integer" >
  select COUNT(*) from exp_pmanifest_awb where awb_no=#awbNo# AND TO_CHAR(AWB_DATE,'DDMONYY')=#awbDate# and flt_key=#fltKey# and TO_CHAR(FLT_DATE,'DDMONYY')=#fltDate# AND ASSIGNED_BULK_WT > BULK_WT
  </select>
	<!-- Added By Santosh D For Create/update/delete pre Offload:starts -->	
	
	<select id="getamendpreoffloadfltdetails" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		select 'By AWB' as preOffloadType, 
				t2.awb_no as awbNo, 
				t1.uld_bt_no as uldBtNo, 
				t1.contr_code as contrCode, 
				decode(t1.uld_type, 'BT', 'Bulk', decode(t1.ppk_type, 'M', 'Mix', 'P', 'BUP', 'B', 'Buildup')) as pkgType,
				t2.unldg_pt as unldgpt, 
				t2.assigned_pcs as assignedPc, 
				t2.assigned_wt as assignedWt, 
				t2.offload_pcs as offPcs, 
				t2.offload_wt as offWt, 
				t1.offload_uld_yn as offloadUldYn, 
				t2.confirmed_yn as confirmedYn
		from   exp_offload_uld t1, exp_offload_uld_awb t2
			where  t1.flt_key = t2.flt_key
			and    t1.flt_date = t2.flt_date 
			and    t1.uld_bt_no = t2.uld_bt_no
			and    t2.offload_type = 'A'
			and    t2.flt_key = #FLTKEY#
			and    t2.flt_date = to_date(#FLTDATE#,'DDMONYY')
		union 
		select 'By ULD' as preOffloadType, 
			null as awbNo, 
			t1.uld_bt_no as uldBtNo, 
			t1.contr_code as contrCode, 
			decode(t1.ppk_type, 'M', 'Mix', 'P', 'BUP', 'B', 'Buildup') as pkgType, 
			t1.unldg_pt as unldgpt, 
			sum(t2.assigned_pcs) as assignedPc, 
			sum(t2.assigned_wt) as assignedWt, 
			sum(t2.offload_pcs)as offPcs, 
			sum(t2.offload_wt) as offWt,  
			t1.offload_uld_yn as offloadUldYn, 
			t1.confirmed_yn as confirmedYn
		from   exp_offload_uld t1, exp_offload_uld_awb t2
			where  t1.flt_key = t2.flt_key
			and    t1.flt_date = t2.flt_date 
			and    t1.uld_bt_no = t2.uld_bt_no
			and   t2.offload_type = 'U'
			and    t2.flt_key = #FLTKEY#
			and    t2.flt_date = to_date(#FLTDATE#,'DDMONYY')
		group by t1.uld_bt_no, t1.contr_code, t1.ppk_type, t1.unldg_pt, t1.offload_uld_yn, t1.confirmed_yn
	</select>	
	
	<parameterMap id="AmdOffLdAwbMap" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBNO" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="CONFIRMYN"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="REMARK"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="ETD"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	
	<procedure id="amendpreoffloadawbdetails" parameterMap="AmdOffLdAwbMap" >
		{? = call pkg_offload.val_amend_preoffload_awb(?,?,?,?,?,?)}
	</procedure>
	
		<select id="getamendpreoffloadawbdetails" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		SELECT t1.uld_bt_no AS uldBtNo,
  t1.contr_code     AS contrCode,
  CASE
    WHEN (SELECT COUNT(1)
      FROM uld_inventory
      WHERE uld_key     =t1.uld_bt_no
      AND (PPK_IND      ='Y'
      OR MIX_PPK_IND    ='Y'
      OR HANDLING_MODE IN ('PPK'))) >0
    THEN 'P'
    ELSE 'B'
  END               AS pkgType,
  t2.unldg_pt       AS unldgpt,
  t2.assigned_pcs   AS assignedPc,
  t2.assigned_wt    AS assignedWt,
  t2.PRE_OFF_PCS    AS offPcs,
  t2.PRE_OFF_WT     AS offWt,
  t1.offload_uld_yn AS offloadUldYn,
  t2.confirmed_yn   AS confirmedYn,
  DECODE(T1.PPK_TYPE,'P','Y','M','Y',DECODE((SELECT COUNT(1) FROM EXP_PMAN_TARMAC_ULD WHERE ULD_BT_NO=T1.ULD_BT_NO AND FLT_KEY = #FLTKEY# AND FLT_DATE =TO_DATE(#FLTDATE#,'DDMONYY')  AND ROWNUM =1),1,'Y','N')) disableInd
FROM exp_offload_uld t1,
  exp_offload_uld_awb t2
WHERE t1.flt_key    = t2.flt_key
AND t1.flt_date     = t2.flt_date
AND t1.uld_bt_no    = t2.uld_bt_no
AND t2.offload_type = 'A'
AND t2.flt_key      = #FLTKEY#
AND t2.flt_date     = TO_DATE(#FLTDATE#,'DDMONYY')
AND t2.awb_no       = #AWBNO#
AND EXISTS ( SELECT NULL FROM exp_pmanifest_uld A,exp_pmanifest_uld_awb C WHERE C.FLT_KEY=A.FLT_KEY AND C.FLT_DATE=A.FLT_DATE AND C.uld_bt_no=A.ULD_BT_NO AND
              A.FLT_KEY=t1.FLT_KEY AND A.FLT_DATE=t1.FLT_DATE AND a.uld_bt_no=t1.ULD_BT_NO AND C.AWB_NO=t2.AWB_NO and c.awb_date = t2.awb_date
             UNION ALL
             SELECT NULL FROM exp_pman_tarmac_uld B,EXP_PMAN_TARMAC_ULD_AWB D WHERE D.FLT_KEY=B.FLT_KEY AND D.FLT_DATE=B.FLT_DATE AND D.uld_bt_no=B.ULD_BT_NO AND
              B.FLT_KEY=T1.FLT_KEY AND B.FLT_DATE=T1.FLT_DATE AND B.uld_bt_no=T1.ULD_BT_NO AND D.AWB_NO=T2.AWB_NO and d.awb_date = t2.awb_date
              UNION ALL
              (SELECT NULL FROM exp_pman_tarmac_awb E WHERE E.flt_key = T1.FLT_KEY AND E.flt_date  = T1.FLT_DATE AND E.awb_no    = T2.AWB_NO AND E.BULK_PCS  > 0
                AND NOT EXISTS (SELECT NULL FROM exp_pman_tarmac_uld_awb F WHERE F.flt_key = T1.FLT_KEY  AND F.flt_date  = T1.FLT_DATE  AND F.uld_bt_no = 'TARMACBULK' AND F.awb_no    = T2.AWB_NO and f.awb_date = t2.awb_date)
   ))
	</select>
	
	<parameterMap id="AmdOffLdUldMap" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="CONTRCODE"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="PKGTYPE"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="OFFLOADYN"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="CONFIRMYN"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="REMARK"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="ETD"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	
	<procedure id="amendpreoffloadulddetails" parameterMap="AmdOffLdUldMap" >
		{? = call pkg_offload.val_amend_preoffload_uld(?,?,?,?,?,?,?,?,?)}
	</procedure>
	
	<select id="getamendpreoffloadulddetails" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		select A.awb_no as awbNo, 
			TO_CHAR(A.awb_date,'DDMONYY') as awbDate,
			A.unldg_pt as unldgpt, 
			A.PRE_OFF_PCS as offPcs, 
			A.PRE_OFF_WT as offWt,
			A.ASSIGNED_PCS as assignedPc,
			A.ASSIGNED_WT as assignedWt,
			DECODE(B.PPK_TYPE,'P','Y','M','Y',DECODE((SELECT COUNT(1) FROM EXP_PMAN_TARMAC_ULD WHERE ULD_BT_NO=#ULDKEY# AND FLT_KEY=#FLTKEY# AND FLT_DATE=TO_DATE(#FLTDATE#,'DDMONYY') AND ROWNUM=1),1,'Y','N')) AS disableInd
		from   exp_offload_uld_awb A, EXP_OFFLOAD_ULD B
			where  B.FLT_KEY = A.FLT_KEY
      AND B.FLT_DATE = A.FLT_DATE
      AND B.ULD_BT_NO = A.ULD_BT_NO
      AND A.flt_key = #FLTKEY#
			and    A.flt_date = TO_DATE(#FLTDATE#,'DDMONYY')
			and    A.uld_bt_no = #ULDKEY#
			and    A.offload_type = 'U'
	</select>
	
	<parameterMap id="offLdDelFltMap" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	
	<procedure id="deletepreoffloadfltdetails" parameterMap="offLdDelFltMap" >
		{? = call pkg_offload.del_preoffload_flt(?,?)}
	</procedure>		
	
	<parameterMap id="amdOffload" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="CONFIRM"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="ETD"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	
	<procedure id="amendpreoffloadfltdetails" parameterMap="amdOffload" >
		{? = call pkg_offload.val_amend_preoffload_flt(?,?,?,?)}
	</procedure>	
	
	<parameterMap id="offloadMapFlt" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="REMARK"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="USER"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	
	<procedure id="savepreoffloadfltdetails" parameterMap="offloadMapFlt" >
		{? = call pkg_offload.ins_preoffload_flt(?,?,?,?)}
	</procedure>
	
	<parameterMap id="offLdAwbMap" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBNO"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="UNLDGPT"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="OFFPC"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="OFFWT"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDYN"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="REMARK"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="USER"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="MODE"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	
	<procedure id="savepreoffloadawbdetails" parameterMap="offLdAwbMap" >
		{? = call pkg_offload.ins_preoffload_awb(?,?,?,?,?,?,?,?,?,?,?)}
	</procedure>
	
	<parameterMap id="savepreoffloadmap" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="OFFLOADIND"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="REMARKS"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="USER"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	
	<procedure id="savepreoffloadulddetails" parameterMap="savepreoffloadmap" >
		{? = call pkg_offload.ins_preoffload_uld(?,?,?,?,?,?)}
	</procedure>	
	
	<parameterMap id="getpreoffloadmap" class="map" >		
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="FLTKEY" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="FLTDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ULDKEY"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="ETD"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="CONTOUR"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="PPKTYPE"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>
	
	<procedure id="getpreoffloaduldheader" parameterMap="getpreoffloadmap" >
		{? = call pkg_offload.get_preoffload_uld(?,?,?,?,?,?)}
	</procedure>
	
	<select id="getpreoffloadulddetails" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		select awb_no as awbNo ,
			to_char(awb_date,'DDMONYY') as awbDate, 
			pcs as assignedPc, 
			wt as assignedWt,
			UNLDG_PT as unldgpt,
			disa_ind as disableInd
		from GT_PREOFFLOAD_ULD order by sno
	</select>
	
	<select id="preoffload_create_getheader"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.PreOffLoadDetailsBO">
		SELECT 
			FLT_KEY as fltKey,
			to_char(SCH_DATE,'DDMONYY') as fltDate,
			to_char(EST_DATE,'DDMONYY') as etd,
			SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),0,2)|| ':'||  SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),3,4)  as etdTime
		FROM FLT_OPR
		WHERE
			FLT_KEY= #fltKey# 		
			AND SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
			AND FLT_TYPE = 'D'
	</select>
	
	<select id="getoffloadpiecAwb"
		parameterClass="cargo.cms.export.bo.PreOffLoadDetailsBO"
		resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		SELECT SUM(offPcs) offPcs,SUM(offWt) offWt FROM (
		select a.OFFLOAD_PCS AS offPcs,a.OFFLOAD_WT AS offWt from 
  		exp_offload_uld_awb a,exp_offload_uld b where b.flt_key = a.flt_key and b.flt_date=a.flt_date and b.uld_bt_no=a.uld_bt_no and
  		a.flt_key=#fltKey# and a.flt_date=#fltDate#  and a.AWB_NO=#awbNo# AND a.confirMED_yn='Y')
	</select>

	<parameterMap id="preOfldmap" class="map" >
		<parameter property="result" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
		<parameter property="fltKey" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="etd" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
		<parameter property="mode" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>		
	</parameterMap>
	
	<procedure id="val_confirm_offload" parameterMap="preOfldmap" >
		{? = call pkg_offload.val_confirm_offload(?,?,?,?)}
	</procedure>	
		
	<parameterMap id="preoffload_create_getitems_prepare_map" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
	</parameterMap>

	<procedure id="preoffload_create_getitems_prepare" 
		parameterMap="preoffload_create_getitems_prepare_map" >
		{? = call pkg_offload.get_offload_flight(?,?)  }     
	</procedure>
	
	<parameterMap id="preoffload_create_getitems_prepare_byawb_map" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="awbNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
	</parameterMap>
	
	<procedure id="preoffload_create_getitems_prepare_byawb" 
		parameterMap="preoffload_create_getitems_prepare_byawb_map" >
		{? = call pkg_offload.get_offload_awb(?,?,?)  }
	</procedure>
	
	<parameterMap id="preoffload_create_getitems_prepare_byuld_map" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="uldKey" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
	</parameterMap>
	
	<procedure id="preoffload_create_getitems_prepare_byuld" 
		parameterMap="preoffload_create_getitems_prepare_byuld_map" >
		{? = call pkg_offload.get_offload_uld(?,?,?)  }
	</procedure>
	
	<select id="preoffload_create_getitems"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		SELECT 
		   A.AWB_NO as awbNo,
	 	   CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) as awbNoDisplay,
	 	   TO_CHAR(AWB_DATE,'DDMONYY') as awbDate,
		   A.ULD_KEY as uldBtNo,
		   A.PPK_TYPE as pkgType,
		   A.PCS as preOffLoadPc,
		   A.WT as preOffLoadWt,
		   A.PCS as assignedPc,
		   A.WT as assignedWt,
		   A.OFFLOAD_ULD_YN as preOffLoadULD,
		   A.UNLDG_PT as unldgpt,
		   A.CONTR_CODE as contrCode
		FROM
			GT_PREOFFLOAD_FLIGHT A
	</select>	
	
	<select id="preoffload_create_getitemsawb"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		SELECT a.uld_key AS uldBtNo,
  (
  CASE
    WHEN (SELECT COUNT(1)
      FROM uld_inventory
      WHERE uld_key     =a.uld_key
      AND (PPK_IND      ='Y'
      OR MIX_PPK_IND    ='Y'
      OR HANDLING_MODE IN ('PPK','NBK'))) >0
    THEN 'P'
    ELSE 'B'
  END)         AS pkgType ,
  a.total_pcs    AS totalPcs,
  a.total_wt     AS totalWt,
  a.unldg_pt     AS unldgpt,
  a.uld_type     AS uldType,
  a.assigned_pcs AS assignedPc,
  a.assigned_wt  AS assignedWt,
  'Y'          AS preOffloadCheck,
  DISA_IND as disableInd
FROM gt_preoffload_awb a
	</select>	
	
	<select id="preoffload_create_getitemsuld"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		select awb_no as awbNo, 
			to_char(awb_date,'DDMONYY') as awbDate, 
			pcs as totalPcs, 
			wt as total_wt 
		from gt_preoffload_uld
	</select>	
	
	<insert id="preoffload_create_save_uld_1" parameterClass="map">
		INSERT INTO EXP_OFFLOAD_ULD (
		   FLT_KEY, 
		   FLT_DATE, 
		   ULD_BT_NO, 
		   UNLDG_PT, 
		   PPK_TYPE, 
		   RMK, 
		   CR_USER_ID, 
		   CR_DATE, 
		   LM_USER_ID, 
		   LM_DATE) 
		VALUES (
			#fltKey#,
			#fltDate#,
			#uldKey#,
			#unldgpt#,
			#pkgType#,
			#rmk#,
			#user#,
			sysdate,
			#user#,
			sysdate)
	</insert>
	
	<insert id="preoffload_create_save_uld_2" parameterClass="map">
		INSERT INTO EXP_OFFLOAD_ULD_AWB (
		   FLT_KEY, 
		   FLT_DATE, 
		   ULD_BT_NO, 
		   AWB_NO, 
		   AWB_DATE, 
		   UNLDG_PT, 
		   ASSIGNED_PCS, 
		   ASSIGNED_WT, 
		   OFFLOAD_PCS, 
		   OFFLOAD_WT, 
		   OFFLOAD_TYPE, 
		   RMK, 
		   CR_USER_ID, 
		   CR_DATE, 
		   LM_USER_ID, 
		   LM_DATE,
		   TR_NO)		    
		(SELECT
			#fltKey#,
			#fltDate#,
			#uldKey#,
			AWB_NO, 
			TO_CHAR(AWB_DATE,'DDMONYY'),
			#unldgpt#,
			#assignedPc#,
			#assignedWt#,
			0,
			0,
			#pkgType#,
			#rmk#,
			#user#,
			sysdate,
			#user#,
			sysdate,
			EXP_OFFLOAD_ULD_AWB_SEQ.nextval
		FROM 
			EXP_PMANIFEST_ULD_AWB
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldKey#
			AND UNLDG_PT = #unldgpt#
		)
	</insert>
	
	<insert id="preoffload_create_save_awb_1" parameterClass="map">
	INSERT INTO EXP_OFFLOAD_AWB (
	   AWB_NO, 
	   AWB_DATE, 
	   FLT_KEY, 
	   FLT_DATE, 
	   FLT_ETD, 
	   UNLDG_PT, 
	   RMK, 
	   PREOFF_BULK_PCS, 
	   PREOFF_BULK_WT, 
	   PREOFF_PPK_PCS, 
	   PREOFF_PPK_WT, 
	   PREOFF_MIX_PCS, 
	   PREOFF_MIX_WT, 
	   CR_DATE, 
	   LM_USER_ID, 
	   LM_DATE, 
	   ULD_BT_NO) 
	VALUES (
		#awbNo#,
		#awbDate#,
		#fltKey#,
		#fltDate#,
		#etd#,
		#unldgpt#,
		#rmk#,
		#preOffBulkPcs#,
		#preOffBulkWt#,
		#preOffPpkPcs#,
		#preOffPpkWt#,
		#preOffMixPcs#,
		#preOffMixWt#,
		sysdate,
		#user#,
		sysdate,
		#uldKey#)
	</insert>	
	
	<delete id="preoffload_amend_deleteitems_awb1"
		parameterClass="map">
		DELETE FROM EXP_OFFLOAD_AWB
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND AWB_NO = #awbNo#
			AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			AND UNLDG_PT = #unldgpt#
	</delete>
	
	<delete id="preoffload_amend_deleteitems_uld1"
		parameterClass="map">
		DELETE FROM EXP_OFFLOAD_ULD
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldKey#
	</delete>
	
	<delete id="preoffload_amend_deleteitems_uld2"
		parameterClass="map">
		DELETE FROM EXP_OFFLOAD_ULD_AWB
		WHERE
			FLT_KEY = #fltKey#
			AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_BT_NO = #uldKey#
	</delete>		
	
	<select id="getPreOffloadAwbDate" parameterClass="map" resultClass="java.lang.String">
		select awb_date from exp_pmanifest_awb 
		where flt_key = #FLTKEY# and flt_date = to_date(#FLTDATE#,'DDMONYY') 
		and awb_No = #AWBNO# and rownum = 1
	</select>
	
	<select id="checkAWBPmanifestFlt" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	     select count(1) from exp_pmanifest_awb
	     	 where  flt_key = #FLTKEY#
			    and    flt_date = TO_DATE(#FLTDATE#,'DDMONYY')
			    and    flt_type = 'E'			   
			    and    awb_no = #AWBNO#			   
     </select>  
     
     <select id="checkULDCheckedOut" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	    select count(1) 
		from EXP_CHKOUT_HD hd, EXP_CHKOUT_DTL dtl
		where  
		hd.flt_key = dtl.flt_key
		and hd.flt_date = dtl.flt_date
		and   hd.flt_key = #FLTKEY#
		and   hd.flt_date = TO_DATE(#FLTDATE#,'DDMONYY')
		and   hd.flt_type = 'E'
		and   dtl.ULD_KEY = #ULDKEY#   
     </select>     
     
     <select id="getPreOfLdAwbCountForULD" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select count(1)
		from exp_offload_uld_awb
		where
		OFFLOAD_TYPE = 'A'
		AND FLT_KEY = #FLTKEY#
		AND FLT_DATE = TO_DATE(#FLTDATE#,'DDMONYY')
		AND ULD_BT_NO = #ULDKEY#	   
     </select>       
     
	
	<!-- Added By Santosh D For Create/update/delete pre Offload:ends -->
	

	<!-- ######################################################################################################### -->
	<!-- Flight Handling data -Start -->
		<select id="flight_handling_search" 	parameterClass="map" 	resultClass="cargo.cms.export.bo.ExpFlightBO">
			select  t1.flt_key as fltKey,
					to_char(sch_date,'DDMONYY') as fltDate,
					DECODE(est_time,NULL,'',to_char(est_date, 'DDMONYY')) etd,
					PKG_COMMON.get_flt_eta(t1.FLT_KEY, t1.SCH_DATE, 'D') as etdTime,
					decode(t2.saved_yn, 'Y', t2.lm_user_id, 'Y_X') as lastModUserId,
					decode(t2.saved_yn, 'Y', to_char(t2.lm_date,'DDMONYY HH24:MI'), 'Y_X') as lastModDate 
			from   flt_opr t1, (select flt_key, flt_date, lm_user_id, lm_date, saved_yn
                    from   exp_flt_hand_summary
					where  rpt_type = #fltType#) t2
			where  t1.flt_key = t2.flt_key (+)
				and    t1.sch_date = t2.flt_date (+)
				and    sch_date = TO_DATE(#fltDate#,'ddmonyy')
				and    t1.flt_key = nvl(#fltKey#,t1.flt_key)
				and    t1.flt_type = 'D'
                <isNotEmpty property="loginCarrier">
                	AND   (t1.CARR_CODE = #loginCarrier#
					OR t1.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE = #loginCarrier#))
				</isNotEmpty>
		</select>
	<select id="flight_handling_validate"  parameterClass="map"  resultClass="java.lang.String">
		<![CDATA[
			SELECT pkg_exp_flt_hand.val_flight(#fltKey#,#fltDate#) FROM DUAL
		]]>
   	</select>
 
 	<select id="flight_handling_search_report_allotment" 	parameterClass="map" resultClass="cargo.cms.export.bo.ExpFltHandAllotmentBO">
		select unldg_pt as unLdgPt, allot_type as uldAllot, qty as qty
		from   exp_flt_hand_wh_allot
		where
			flt_key = #fltKey#
			and flt_date= to_date(#fltDate#,'ddmonyy')
	</select>
	<select id="flight_handling_search_report_accessory"	parameterClass="map" resultClass="cargo.cms.export.bo.AccessoryBO">
		select accessory_type as equipType,
			   qty as qty
		from   exp_flt_hand_wh_accessory
		where
			flt_key = #fltKey#
			and flt_date= to_date(#fltDate#,'ddmonyy')
	</select>
	
	<select id="flight_handling_search_report_uld_summary"	parameterClass="map" resultClass="cargo.cms.export.bo.ExpFltHandUldSummaryBO">
		select  uld_type as uldType,
			    uld_key as uldKey,
				dest as dest,
				contour_code as contourCode,
				manifest_wt as manifestWt,
				net_wt as netWt,
				gross_wt as grossWt
		from   exp_flt_hand_wh_uld
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>
	<select id="flight_handling_search_report_dispatch_unit"	parameterClass="map" resultClass="cargo.cms.export.bo.ExpFltHandDispatchBO">
		select to_char(trans_date,'ddMONyy') as transDate,
			   to_char(trans_date,'HH24') as transDateHr,
			   to_char(trans_date,'MI') as transDateMin,
			   ramp_user_id as rampUserID,
			   auld_detail as auldDetail
		from   exp_flt_hand_wh_dispatch
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>
	<delete id="deleteDispUnit" parameterClass="cargo.cms.export.bo.ExpFltHandDispatchBO">
		delete
		from   exp_flt_hand_wh_dispatch
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
			and RAMP_USER_ID=#rampUserID#
			and AULD_DETAIL=#auldDetail#
			and trans_date=to_date(#transDt#,'ddmonyyHH24MI')
	</delete>
	<select id="flight_handling_search_report_inspect_cargo" parameterClass="map" resultClass="cargo.cms.export.bo.ExpFltHandInspectBO">
		select  uld_awb_no as uldAwbNo,
			    pcs as pcs,
				wt as wt,
				bup_ind as bupInd,
				to_char(CE_date,'ddMONyy') as ceDate,
				to_char(CE_date,'HH24') as ceDateHr,
				to_char(CE_date,'MI') as ceDateMin,
				to_char(aat_date,'ddMONyy') as aatDate,
				to_char(aat_date,'HH24') as aatDateHr,
				to_char(aat_date,'MI') as aatDateMin,
				remarks as remarks
		from   exp_flt_hand_wh_inspect
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>
	<delete id="deleteCustCargo" parameterClass="cargo.cms.export.bo.ExpFltHandInspectBO">
		delete
		from   exp_flt_hand_wh_inspect
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
			and ULD_AWB_NO=#uldAwbNo# 
			and PCS=#pcs# and WT=#wt# and BUP_IND=#bupInd# and CE_date=to_date(#delCEdate#,'ddmonyyHH24MI')
			and aat_date=to_date(#delaatdate#,'ddmonyyHH24MI') and remarks=#remarks# and bup_ind=#bupInd#
	</delete>
	<select id="flight_handling_search_report_performance"	parameterClass="map" resultClass="cargo.cms.export.bo.ExpFltHandPerformanceBO">
		select  perf_name as perfName,
				perf_desc as perfDesc,
				info_reqd as infoReqd,
				remarks as remarks
		from   exp_flt_hand_man_perf
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>
	
	<select id="flight_handling_search_report_timestamp" parameterClass="map" resultClass="cargo.cms.export.bo.ExpFltHandTimestampBO">
		select  sno as sNo,
				item_name as itemName,
				to_char(trans_date,'ddMONyy') as transDate,
				to_char(trans_date,'HH24') as transDateHr,
				to_char(trans_date,'MI') as transDateMin,
				modify_yn modifyYN
		from   exp_flt_hand_tstamp
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
			and    rpt_type = #fltType#
		order by sno
	</select>
	<select id="flight_handling_search_report_svc_std"	parameterClass="map" resultClass="cargo.cms.export.bo.ExpFltHandSvcStdBO">
		select  sno as sNo,
				item_name as itemName,
				std || ' min' as std ,
				service_time as serviceTime,
				std_met as stdMet,
				remarks as remarks,
				EXCEED_MIN as exceedMin
		from   exp_flt_hand_ser_std
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
			and    rpt_type = #fltType#
	</select>
	
	<select id="flight_handling_search_post_flt" parameterClass="map"	resultClass="cargo.cms.export.bo.ExpFltHandPostFlightBO">
		select  awb_no as awbNo,
				loc_code as locCode,
				pcs as pcs,
				checker as checker
		from   exp_flt_hand_wh_post_flt
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>
	<delete id="deletePostFltData" parameterClass="cargo.cms.export.bo.ExpFltHandPostFlightBO">
		delete
		from   exp_flt_hand_wh_post_flt
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
			and awb_no=#awbNo#  and loc_code=#locCode# and pcs=#pcs# and checker=#checker#
	</delete>
	<update id="flight_handling_update_timestamp" parameterClass="map">
		update exp_flt_hand_tstamp set
			trans_Date = to_date(#transDate#,'DDMONYYHH24MI')
		where item_name =trim(#itemName#) and 
			rpt_type=#rptType# and
			flt_key =#fltKey# and
			flt_date = to_date(#fltDate#,'ddmonyy')
	</update>
	<select id="flight_handling_search_remarks" 		parameterClass="map" 	resultClass="cargo.cms.export.bo.FlightHandlingReportBO">
		select  INSPECT_CARGO_remarks as inspectCargoRemarks,
				POST_FLT_CHK_remarks as postFltRemarks,
				ser_std_remarks as svcStdRemarks
		from   exp_flt_hand_wh
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>
	<delete id="flight_handling_delete_report_dispatch_unit" 		parameterClass="map">
		delete from exp_flt_hand_wh_dispatch
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</delete>
	
	<delete id="flight_handling_delete_report_inspect_cargo" 		parameterClass="map">
		delete from exp_flt_hand_wh_inspect
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</delete>

	<delete id="flight_handling_delete_report_performance" parameterClass="map">
		delete from exp_flt_hand_man_perf
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</delete>
	
	<delete id="flight_handling_delete_report_performance_ew" 		parameterClass="map">
		delete from exp_flt_hand_wh_perf
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</delete>	
	<delete id="flight_handling_delete_report_performance_ramp" 		parameterClass="map">
		delete from exp_flt_hand_ramp_perf
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</delete>	

	<delete id="flight_handling_delete_post_flt" 		parameterClass="map">
		delete from exp_flt_hand_wh_post_flt
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</delete>
	<update id="flight_handling_update_remarks"  parameterClass="cargo.cms.export.bo.FlightHandlingReportBO">
	<![CDATA[
			update exp_flt_hand_wh set INSPECT_CARGO_remarks = #inspectCargoRemarks#, POST_FLT_CHK_remarks = #postFltRemarks# , ser_std_remarks = #svcStdRemarks#
			where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')  
	 ]]>
   	</update>
   	<insert id="flight_handling_insert_report_dispatch_unit" 		parameterClass="cargo.cms.export.bo.ExpFltHandDispatchBO">
		insert into exp_flt_hand_wh_dispatch (flt_key, flt_date, trans_date, ramp_user_id, auld_detail)  
		values(#fltKey#, to_date(#fltDate#, 'ddmonyy'), to_date(#transDate#,'ddmonyy HH24MI'), #rampUserID#, #auldDetail#)     
	</insert>

	<insert id="flight_handling_insert_report_inspect_cargo" 		parameterClass="cargo.cms.export.bo.ExpFltHandInspectBO">
		insert into exp_flt_hand_wh_inspect 
			(flt_key, flt_date, uld_awb_no, pcs, wt, bup_ind, CE_date, aat_date, remarks)
		values(#fltKey#, to_date(#fltDate#, 'ddmonyy'), #uldAwbNo#, #pcs#, #wt#, #bupInd#, to_date(#ceDate#, 'ddmonyy HH24MI'), to_date(#aatDate#, 'ddmonyy HH24MI'), #remarks#)    
	</insert>

	<insert id="flight_handling_insert_report_performance" 		parameterClass="cargo.cms.export.bo.ExpFltHandPerformanceBO">
		insert into exp_flt_hand_man_perf (flt_key, flt_date, perf_name, perf_desc, info_reqd, remarks)
		values(#fltKey#, to_date(#fltDate#, 'ddmonyy'),#perfName#, #perfDesc#, #infoReqd#, #remarks#)    
	</insert>
	
	<insert id="flight_handling_insert_report_performance_ew" 		parameterClass="cargo.cms.export.bo.ExpFltHandPerformanceBO">
		insert into exp_flt_hand_wh_perf (flt_key, flt_date, perf_name, perf_desc, info_reqd, remarks)
		values(#fltKey#, to_date(#fltDate#, 'ddmonyy'),#perfName#, #perfDesc#, #infoReqd#, #remarks#)    
	</insert>

	<insert id="flight_handling_insert_report_performance_ramp"
		parameterClass="cargo.cms.export.bo.ExpFltHandPerformanceBO">
		insert into exp_flt_hand_ramp_perf (flt_key, flt_date, perf_name, perf_desc, info_reqd, remarks)
		values(#fltKey#, to_date(#fltDate#, 'ddmonyy'),#perfName#, #perfDesc#, #infoReqd#, #remarks#)    
	</insert>
	<select id="validLocnFltRpt" 	parameterClass="java.lang.String" resultClass="java.lang.Integer">
	select count(1) from mast_wh_loc where code=#param#
	</select>
	<insert id="flight_handling_insert_post_flt"
		parameterClass="cargo.cms.export.bo.ExpFltHandPostFlightBO">
		insert into exp_flt_hand_wh_post_flt (flt_key, flt_date, awb_no, loc_code, pcs, checker)     
		values(#fltKey#, to_date(#fltDate#, 'ddmonyy'),#awbNo#, #locCode#, #pcs#, #checker#) 
	</insert>
	<select id="get_port_of_call" 	parameterClass="map" resultClass="java.lang.String">
		
        select   t2.off_point
                  from     flt_opr t1, flt_opr_leg t2
                  where    t1.tr_no = t2.tr_no
                  and      t1.flt_key = #fltKey#
                  and      t1.sch_date = to_date(#fltDate#, 'ddmonyy')
                  and      t1.flt_type = 'D'
                  order by t2.leg_ord
	</select>
	<select id="flight_handling_search_report_performance_wh" 	parameterClass="map" resultClass="cargo.cms.export.bo.ExpFltHandPerformanceBO">
		select  perf_name as perfName,
				perf_desc as perfDesc,
				info_reqd as infoReqd,
				remarks as remarks
		from   exp_flt_hand_wh_perf
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>

	<select id="flight_handling_search_report_performance_ramp" 	parameterClass="map" 	resultClass="cargo.cms.export.bo.ExpFltHandPerformanceBO">
		select  perf_name as perfName,
				perf_desc as perfDesc,
				info_reqd as infoReqd,
				remarks as remarks
		from   exp_flt_hand_ramp_perf
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>
	<select id="EXP_getSvcStdRemarks" parameterClass="map" resultClass="cargo.cms.export.bo.FlightHandlingReportBO">
		select SVC_STD_RMK svcStdRemarks, GEN_RMK generalRemarks, IMAGE transactionId
		from   exp_flt_hand_summary  
		where  rpt_type = #fltType# and FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
		and    flt_key = nvl(#fltKey#,flt_key)	
	</select>
	<update id="update_save_yn" parameterClass="cargo.cms.export.bo.FlightHandlingReportBO" >
		UPDATE exp_flt_hand_summary set saved_yn='Y' , SVC_STD_RMK = #svcStdRemarks# , image=#transactionId#, 
		GEN_RMK = #generalRemarks# ,LM_USER_ID=#lastModUserId#,LM_DATE=SYSDATE where flt_key =#fltKey# and flt_date = to_date(#fltDate#,'DDMONYY') and rpt_type = #rptType#
	</update>
	<select id="reportExist" parameterClass="cargo.cms.export.bo.FlightHandlingReportBO" resultClass="java.lang.Integer">
		select count(1) from exp_flt_hand_summary where flt_key =#fltKey# and flt_date = to_date(#fltDate#,'DDMONYY') and rpt_type = #rptType#
	</select>
	<insert id="insertReport" parameterClass="cargo.cms.export.bo.FlightHandlingReportBO" >
	  insert into  exp_flt_hand_summary (saved_yn,SVC_STD_RMK,GEN_RMK,flt_key,flt_date,rpt_type,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,IMAGE)
	  values ('Y', #svcStdRemarks# , #generalRemarks# ,#fltKey# ,to_date(#fltDate#,'DDMONYY'), #rptType#,#lastModUserId#,SYSDATE,#lastModUserId#,SYSDATE,#transactionId#)
	</insert>
	<parameterMap id="generateEWFltHandReportMap" class="map" >
		<parameter property="RESULT"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="fltKey"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="userId" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	<procedure id="flight_handling_generate_ew_report" parameterMap="generateEWFltHandReportMap" >
		{? = call PKG_EXP_FLT_HAND.gen_wh(?,?,?)}
	</procedure>
	<select id="fetchReportDate" parameterClass="map" resultClass="cargo.cms.export.bo.FlightHandlingReportBO">
	 select LM_USER_ID as lastModUserId,to_char(LM_DATE,'DDMONYY') as lastModDate ,saved_yn as saved,IMAGE as transactionId  from exp_flt_hand_summary where flt_key =#fltKey# and flt_date = to_date(#fltDate#,'DDMONYY') 
	 and rpt_type = #fltType#
	</select>
	<select id="checkImageReport" parameterClass="cargo.cms.export.bo.FlightHandlingReportBO" resultClass="java.lang.Integer">
	select count(1) from fw_image_store where IMG_SESSION_ID=#transactionId#
	</select>
	
	<parameterMap id="generateFltHandERReportMap" class="map" >
		<parameter property="RESULT"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="fltKey"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="userId" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	<procedure id="flight_handling_generate_er_report" parameterMap="generateFltHandERReportMap" >
		{? = call PKG_EXP_FLT_HAND.gen_ramp(?,?,?)}
	</procedure>

	<parameterMap id="generateFltHandEDReportMap" class="map" >
		<parameter property="RESULT"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="fltKey"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="userId" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>

	<procedure id="flight_handling_generate_ed_report" parameterMap="generateFltHandEDReportMap" >
		{? = call PKG_EXP_FLT_HAND.gen_manifest(?,?,?)}
	</procedure>

	<select id="flight_handling_search_report_header" 
		parameterClass="map"
		resultClass="cargo.cms.export.bo.FlightHandlingReportBO">
		select
			flt_key as fltKey,
			to_char(sch_date,'DDMONYY') as fltDate,
		    decode(sch_time,null,'', substr(lpad(sch_time, 4, '0'), 1, 2)||':'||substr(sch_time, -2)) as stdTime,
		    PKG_COMMON.get_flt_eta(FLT_KEY, SCH_DATE, 'D') as etdTime,
			pkg_common.get_flt_ata(#fltKey# ,#fltDate#,'D') as atdTime,
		    (select code_desc from mast_code_dtl where code_type='CGO_ACFT_TYPE' and mast_code_dtl.code=flt_opr.cgo_acft_type) as aircraftType,
		    '' as portOfCall,
		    (select code_desc from mast_code_dtl where code=wthr_cond and code_type='WTH_CONDN')
		     as weather
		from   flt_opr
		where 
			sch_date = to_date(#fltDate#, 'ddmonyy')
			and flt_type = 'D'
			and flt_key = #fltKey#
	</select>
	
	<select id="flight_handling_search_report_er_dispatch_unit"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.ExpFltHandDispatchBO">
		select to_char(trans_date,'DDMONYY') as transDate,
			   to_char(trans_date,'HH24') as transDateHr,
			   to_char(trans_date,'MI') as transDateMin,
			   buildup_user_id as rampUserID,
			   auld_detail as auldDetail
		from   exp_flt_hand_ramp_dispatch
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy') order by trans_date
	</select>

	<select id="flight_handling_search_er_dispatch_rho"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.FlightHandlingReportBO">
		select  dispatch_rho as dispatchRho
		from   exp_flt_hand_er
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>

	<parameterMap id="getEDFltHandReportTotalAllotmentMap" class="map" >
		<parameter property="RESULT"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="fltKey"  jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="fltDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	<procedure id="flight_handling_ed_total_allotment" parameterMap="getEDFltHandReportTotalAllotmentMap" >
		{? = call pkg_exp_flt_hand.get_ed_allot(?,?)}
	</procedure>

	
	<select id="flight_handling_search_report_tonnage"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.ExpFltHandTonnageBO">
	 SELECT   item_name itemName,
      		  consignment consignment,
      		  ppk_wt tonnBuWt,
			  pcs tonnPcs,
     		  bulk_wt tonnBulkWt
	 from   exp_flt_hand_man_tonnage
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
			and sno > 9
		order by sno
	</select>
	<select id="flight_handling_search_report_rebuilt"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.ExpFltHandRebuiltInfoBO">
		select  uld_key as uldKey,
				wt as wt,
				to_char(trans_date,'DDMONYY HH24:MI') as transDate,
				remarks as remarks
		from   exp_flt_hand_man_rebuilt
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>

	<select id="flight_handling_search_report_offload"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.ExpFltHandOffloadInfoBO">
		select  uld_awb_no as uldAWBNo,
				pcs as pcs, 
				wt as wt,
				to_char(trans_date,'ddmonyy') as transDate,
				remarks as remarks
		from   exp_flt_hand_man_offload
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>

	<select id="flight_handling_search_report_returncargo"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.ExpFltHandReturnCargoInfoBO">
		select  uld_awb_no as uldAWBNo,
				pcs as pcs, 
				wt as wt,
				loaded_in_uld_yn as loadedIn,
				to_char(trans_date,'ddmonyy') as transDate,
				to_char(trans_date,'HH24') as transDateHr,
				to_char(trans_date,'MI') as transDateMin,
				remarks as remarks
		from   exp_flt_hand_man_returns
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>

	<select id="flight_handling_search_report_delayflt"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.FlightHandlingReportBO">
		select  delay_flt_yn as delayFlt, 
				offload_late_uld_yn as offloadLateUld, 
				offload_remarks as offloadRemarks, 
				remarks as delayFltRemarks
		from   exp_flt_hand_man
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</select>
	
	<delete id="flight_handling_delete_report_er_dispatch_unit"
		parameterClass="map">
		delete from exp_flt_hand_ramp_dispatch
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</delete>

	<update id="flight_handling_update_SrvStdRmk"  parameterClass="cargo.cms.export.bo.FlightHandlingReportBO">
	<![CDATA[
			update exp_flt_hand_wh set ser_std_remarks = #svcStdRemarks#
			where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')  
	 ]]>
   	</update>

	<update id="flight_handling_update_er_dispatch_rho"  parameterClass="cargo.cms.export.bo.FlightHandlingReportBO">
	<![CDATA[
			update exp_flt_hand_er set dispatch_rho = #dispatchRho#
			where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')  
	 ]]>
   	</update>

	<insert id="flight_handling_insert_report_er_dispatch_unit"
		parameterClass="cargo.cms.export.bo.ExpFltHandDispatchBO">
		insert into exp_flt_hand_ramp_dispatch (flt_key, flt_date, trans_date, buildup_user_id, auld_detail)  
		values(#fltKey#, to_date(#fltDate#, 'ddmonyy'), to_date(#transDate#,'ddmonyy HH24MI'), #rampUserID#, #auldDetail#)     
	</insert>

	<delete id="flight_handling_delete_report_return_cargo"
		parameterClass="map">
		delete from exp_flt_hand_man_returns
		where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')
	</delete>

	<update id="flight_handling_update_svcstd_remarks"  parameterClass="cargo.cms.export.bo.FlightHandlingReportBO">
	<![CDATA[
			update exp_flt_hand_wh set ser_std_remarks = #svcStdRemarks#
			where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')  
	 ]]>
   	</update>
	<update id="flight_handling_ed_update_delay_flt"  parameterClass="cargo.cms.export.bo.FlightHandlingReportBO">
	<![CDATA[
			update exp_flt_hand_man set delay_flt_yn = #delayFlt#, offload_late_uld_yn = #offloadLateUld#, offload_remarks = #offloadRemarks#, remarks = #delayFltRemarks#  
			where
			flt_key = #fltKey#
			and flt_date = to_date(#fltDate#,'ddmonyy')  
	 ]]>
   	</update>

	<insert id="flight_handling_insert_report_return_cargo"
		parameterClass="cargo.cms.export.bo.ExpFltHandReturnCargoInfoBO">
		insert into exp_flt_hand_man_returns 
			(flt_key, flt_date, uld_awb_no, pcs, wt, loaded_in_uld_yn, trans_date, remarks)
		values(#fltKey#, to_date(#fltDate#, 'ddmonyy'), #uldAWBNo#, #pcs#, #wt#, #loadedIn#, to_date(#transDate#, 'ddmonyy HH24MI'), #remarks#)    
	</insert>

	<select id="exp_flight_report_getImageListReal"  parameterClass="cargo.cms.export.bo.ExpReportImageBO"  resultClass="cargo.cms.export.bo.ExpReportImageBO">
	SELECT FLT_KEY fltKey, to_char(FLT_DATE,'DDMONYY') fltDate, RPT_TYPE reptType,	DOC_LINE_NO as docLineNo,
		  DOC_NAME as docName, LENGTH(DOC_IMAGE) as filesize
	FROM EXP_FLT_HAND_SUMMARY_DOC 
	WHERE FLT_KEY = #fltKey# and flt_date = to_date(#fltDate#,'DDMONYY')
	AND RPT_TYPE = #reptType#
	ORDER BY DOC_LINE_NO
	</select>
	<select id="exp_flight_report_getImageList"  parameterClass="cargo.cms.export.bo.ExpReportImageBO"  resultClass="cargo.cms.export.bo.ExpReportImageBO">
	SELECT
		  FLT_KEY fltKey, 
		  to_char(FLT_DATE,'DDMONYY') fltDate,
		  RPT_TYPE reptType,
		  DOC_LINE_NO as docLineNo,
		  DOC_NAME as docName,
		  LENGTH(DOC_IMAGE) as filesize
	FROM EXP_FLT_HAND_SUMMARY_DOC_TMP
	WHERE FLT_KEY = #fltKey# and flt_date = to_date(#fltDate#,'DDMONYY') 
	and RPT_TYPE = #reptType#
	ORDER BY DOC_LINE_NO
	</select>
	<insert id="exp_flight_report_insertReportImage" parameterClass="cargo.cms.export.bo.ExpReportImageBO">
	INSERT INTO EXP_FLT_HAND_SUMMARY_DOC_TMP 
	(FLT_KEY,FLT_DATE, RPT_TYPE ,DOC_LINE_NO, ATT_PATH, DOC_NAME, DOC_IMAGE, CR_DATE)
	VALUES (#fltKey#, to_date(#fltDate#,'DDMONYY'), #reptType# ,
	(SELECT NVL(MAX(DOC_LINE_NO), 0) FROM EXP_FLT_HAND_SUMMARY_DOC_TMP 
	WHERE FLT_KEY = #fltKey# and flt_date = to_date(#fltDate#,'DDMONYY'))+1 , '',
	#docName#, #docImage#, SYSDATE)
	</insert>
	<delete id="exp_flight_report_deleteImage" parameterClass="cargo.cms.export.bo.ExpReportImageBO" >
	DELETE EXP_FLT_HAND_SUMMARY_DOC_TMP 
	WHERE FLT_KEY = #fltKey# and to_char(flt_date, 'DDMONYY') = to_date(#fltDate#,'DDMONYY') 
	AND RPT_TYPE=#reptType# AND DOC_LINE_NO = #docLineNo#
	</delete>
	<select id="flight_handling_report_er_tow_order_list"
		parameterClass="map"
		resultClass="cargo.cms.export.bo.ExpFltToworderListBO">
			select distinct tord.to_no towOrderNo, cc.code_desc rhoId,
			       to_char(tord.est_time, 'DDMONYY HH24:MI:SS') estTime,  
			       tord.ho_area hoArea, case when XYZ.OS>0 then 'Y' else 'N' end  os,
			        tord.status status
			from tow_order_out_dtl tdtl, tow_order_out tord 
			JOIN
			    (select inn.tno to_no, sum(inn.OS) OS from (select DISTINCT tdtl.to_no tno, 
			           case when (cdtl.chkout_user is not null 
			                 and  cdtl.chkout_date is not null
			                 and  cdtl.chkout_time is not null)
			           then '0' else '1' end OS
			    from tow_order_out_dtl tdtl
			    left join exp_chkout_dtl cdtl
			      on tdtl.uld_key=cdtl.uld_key
			      and cdtl.flt_key=#fltKey# 
			      and to_char(cdtl.flt_date,'DDMONYY')=to_date(#fltDate#,'DDMONYY')) inn 
			    group by inn.tno  ) XYZ
			ON XYZ.to_no=TORD.to_no
			left join cust_company cc
		  on cc.code = tord.rho_id
		  where tdtl.to_no= tord.to_no 
			  and tord.flt_key=#fltKey# 
			  and to_char(tord.flt_date,'DDMONYY')=to_date(#fltDate#,'DDMONYY')
	</select>
	<select id='flight_handling_report_er_ho_form_list'
			parameterClass="map"
			resultClass="cargo.cms.export.bo.ExpFltHoFormListBO">
		select distinct ecdtl.ho_form_no hoFormNo,EXPHOVER.ramp_user rho,
		       to_char(ecdtl.OB_HANDOVER_DATE,'DDMONYY HH24:MI') hoTime,
		       EXPHOVER.ramp_recv_user rhoStaff, ecdtl.uld_key uldKey,
           B.assignPcs as latstBupPcs,
           to_char(nvl(B.assignWt,0),'999999990.99') as latstBupWt,
           B.AWB_NO as latstBupAWB,
           to_char(buuld.BLDUP_START_DATE,'DDMONYY HH24:MI') buStartTime,
           to_char(buuld.BLDUP_COMPLETE_DATE,'DDMONYY HH24:MI') buCompTime,
           (SELECT to_char(out.CR_DATE,'DDMONYY HH24:MI') FROM TOW_ORDER_OUT out where FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# and rownum=1) towTime,
           to_char(EXPHOVER.SEND_handover_date,'DDMONYY HH24:MI') hoSendTime,
           to_char(EXPHOVER.PRINT_handover_date,'DDMONYY HH24:MI') hoPrintTime,
           to_char(ecdtl.chkout_date, 'DDMONYY') || ' ' ||decode(ecdtl.chkout_time, null, '', SUBSTR(lpad(ecdtl.chkout_time,4,0), 1, 2)|| ':'||  SUBSTR(lpad(ecdtl.chkout_time,4,0), 3)) as chkoutTime  
		from exp_chkout_hd echd
		join exp_chkout_dtl ecdtl on ecdtl.flt_key= echd.flt_key and to_char(ecdtl.flt_date,'DDMONYY')=to_char(echd.flt_date,'DDMONYY')	and ecdtl.ho_form_no is not null
    LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = ecdtl.HO_FORM_NO AND EXPHOVER.ULD_KEY = ecdtl.ULD_KEY
    JOIN EXP_PMANIFEST_ULD buuld ON buuld.flt_key = ecdtl.flt_key and buuld.flt_date = ecdtl.flt_date and buuld.uld_bt_no = ecdtl.uld_key
    LEFT JOIN (SELECT FLT_KEY,FLT_DATE,ULD_BT_NO,AWB_NO,assignPcs,assignWt FROM (select FLT_KEY,FLT_DATE,ULD_BT_NO,AWB_NO,lm_date,SUM(ASSIGNED_PCS) AS assignPcs,SUM(ASSIGNED_WT) assignWt from exp_pmanifest_uld_awb uldawb where uldawb.flt_key = #fltKey# and uldawb.flt_date = #fltDate# 
    GROUP BY FLT_KEY,FLT_DATE,ULD_BT_NO,AWB_NO,LM_DATE order by lm_date desc) WHERE ROWNUM=1) B ON B.FLT_KEY = ecdtl.FLT_KEY  AND B.FLT_DATE=ecdtl.FLT_DATE AND B.ULD_BT_NO = ecdtl.ULD_KEY
    left join (select max(TO_NUMBER(t4.to_no)) as to_num , t4.flt_key, t4.flt_date, t5.uld_key from tow_order_out t4 , tow_order_out_dtl t5 
                              where t4.to_no=t5.to_no and nvl(status,'N') !='VOID' group by t4.flt_key, t4.flt_date, t5.uld_key) t45 
                               on t45.uld_key=ecdtl.uld_key and t45.flt_key=ecdtl.flt_key and t45.flt_date=ecdtl.flt_date
    where  echd.flt_key=#fltKey#
		and to_char(echd.flt_date,'DDMONYY')=#fltDate#
	</select>
	<!-- Flight Handling data -End-->
	<!-- ######################################################################################################### -->
	<!-- DDS_EXP_BUP_CaptureB/U Status Related Queries Start -->
	<!-- Changes for QR -->
	<select id="declare_buildup_complete_uld_get_header" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO"
		resultClass="cargo.cms.export.bo.DeclareBuildupCompleteDetailsBO"><!--
		select distinct
		  B.flt_key as fltNo,
		  to_char(B.sch_date,'DDMONYY') as fltDate,
		   PKG_COMMON.get_flt_eta(B.FLT_KEY, B.sch_date, 'D', 'DD') as etd,
		  decode(est_time, null, '', substr(lpad(est_time, 4, 0), 1, 2) || ':' || substr(lpad(est_time, 4, 0), 3)||decode(est_date, null, '', decode(sch_date, nvl(est_date, sch_date), '', '/'||to_char(nvl(est_date, sch_date), 'DD')))) as etdTime
		from flt_opr B 
		left outer join exp_pmanifest_uld A on B.FLT_KEY = A.flt_key and B.SCH_DATE = A.FLT_DATE  
		where 
			B.flt_key=#fltNo#
			and B.sch_date = TO_DATE(#fltDate#, 'DDMONYY')			
			and B.FLT_TYPE = 'D'
	-->
		select 
		  B.flt_key as fltNo,
		  to_char(B.sch_date,'DDMONYY') as fltDate,
		  PKG_COMMON.get_flt_eta(B.FLT_KEY, B.sch_date, 'D', 'DD') as etd,
		  decode(est_time, null, '', substr(lpad(est_time, 4, 0), 1, 2) || ':' || substr(lpad(est_time, 4, 0), 3)||decode(est_date, null, '', decode(sch_date, nvl(est_date, sch_date), '', '/'||to_char(nvl(est_date, sch_date), 'DD')))) as etdTime,
		  (SELECT DECODE(COUNT(1), 0, 'N', 'Y')  FROM MAST_CARRIER where code = CARR_CODE and NVL(MAIL_AS_CARGO,'X') = 'Y') as mailAsCargo
		from flt_opr B 
		where 
			B.flt_key=#fltNo#
			and B.sch_date = TO_DATE(#fltDate#, 'DDMONYY')			
			and B.FLT_TYPE = 'D'
	</select>
	<!-- Changes for QR -->
	<select id="declare_buildup_complete_uld_get_items" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" 
		resultClass="cargo.cms.export.bo.DeclareBuildupCompleteItemBO">
		select 
              B.uld_bt_no as uldBtNo,B.HDLG_MODE as hdlgMode, B.NESTING_ID as nestingId,             
              (select sum(assigned_pcs) from exp_pmanifest_uld_awb 
                  WHERE flt_key = B.flt_key
                  AND flt_date = b.flt_date and uld_bt_no =  b.uld_bt_no)
                  as assgnPc,
              (select to_char(sum(assigned_wt),'999999990.99') from exp_pmanifest_uld_awb 
              WHERE flt_key = B.flt_key
                  AND flt_date = b.flt_date and uld_bt_no =  b.uld_bt_no)
                  as assgnWt,
                  B.BLDUP_COMPLETE as buildupInd,
                  DECODE(B.BLDUP_COMPLETE,'Y',B.BLDUP_COMPLETE,'')as oldBuildupInd,                  
                  TRIM(TO_CHAR(U.tare_weight,'99999999999999990.00')) AS tareWt,
                  CASE WHEN U.FINAL_WEIGHT = 'Y' AND NVL(U.GROSS_WEIGHT,0)>0 THEN TRIM(TO_CHAR(NVL(U.GROSS_WEIGHT,0),'99999999999999990.00'))
                      ELSE TRIM(TO_CHAR(NVL(U.FIRST_WT,0),'99999999999999990.00')) END AS GROSSWT,
                  CASE WHEN U.FINAL_WEIGHT = 'Y' AND NVL(U.GROSS_WEIGHT,0)>0 THEN TRIM(TO_CHAR(NVL(U.GROSS_WEIGHT,0),'99999999999999990.00'))
                      else TRIM(TO_CHAR(NVL(U.FIRST_WT,0),'99999999999999990.00')) end AS oldgrossWt,                  
                  B.EIC_YN as eicInd,
                 B.UNLDG_PT as unldgPt,
                  B.VOL_IND as volInd,
                  DECODE(B.BLDUP_START,'','N',B.BLDUP_START) as buildupStartInd,
                  DECODE(B.BLDUP_START,'Y',B.BLDUP_START,'') as oldBuildupStartInd,
                  B.BB_IND as bbInd,                  
                  B.OHG as ohg,
                  B.RCL_NO as rclNo,
                  B.JO_NO as joNo,
                  B.GP_NO as gpNo,
                  B.PPK_TYPE as ppkType,
                  B.ready_disp as readyDisp,
                  U.MAN_WT_IND as manWtInd,                 
      case when (u.transit_flg='Y' and u.handling_mode in('NBK','PPK')) then cont_plt else null end as contPlt  ,
case when B.CONTR_CODE is null then  
        case when cont_plt='C' then 
          case when (select count(1) from uld_type_contr where uld_type=SUBSTR(TRIM(U.uld_key),1,3))=1 then 
      (select contr_code from uld_type_contr where uld_type=SUBSTR(TRIM(U.uld_key),1,3)) 
      else null 
      end 
      else U.contr_code 
      end else B.CONTR_CODE 
      end as contrCode,
      NVL(B.ULD_CLOSE,'N') AS uldClose,
      B.HEIGHT AS height,
      ((case when (SELECT COUNT(1)
		FROM uld_group_type gt,
  			 mast_uld_allot_group uag,
  			 mast_uld_allot ua,
  			 mast_uld_group ug
	   WHERE gt.uld_group = uag.uld_group
			 AND uag.uld_allot  = ua.uld_allot
			 AND ug.uld_group   = uag.uld_group
	         AND gt.uld_type    = SUBSTR(U.uld_key, 0, 3)
			 AND ua.plt_cnt     = 'Pallet') > 0 then 'P' else 'C' end))    as pallet,
			(SELECT NVL(SUM(QTY),'') FROM EXP_ULD_ACC WHERE FLT_KEY  = B.FLT_KEY AND FLT_DATE = B.FLT_DATE AND ULD_KEY    = B.ULD_BT_NO AND ACTIVITY   = 'BUILDUP' AND UPPER(EQUIP_TYPE) = UPPER('HALF SIZE PVC')) as halfPvc,
		    (SELECT NVL(SUM(QTY),'') FROM EXP_ULD_ACC WHERE FLT_KEY  = B.FLT_KEY AND FLT_DATE = B.FLT_DATE AND ULD_KEY    = B.ULD_BT_NO AND ACTIVITY   = 'BUILDUP' AND UPPER(EQUIP_TYPE) = UPPER('FULL SIZE PVC')) as fullPvc,
		    CASE WHEN (SELECT COUNT(1) FROM exp_pmanifest_uld_awb uawb, AWB awb 
          	WHERE uawb.awb_no = awb.awb_no AND uawb.awb_DATE = awb.awb_DATE and awb.catalog = 'TM' and uawb.FLT_KEY = B.FLT_KEY 
          	AND uawb.FLT_DATE = B.FLT_DATE AND uawb.uld_bt_no = B.ULD_BT_NO ) = 0 THEN 'Y'
		      WHEN (SELECT COUNT(1)  FROM MAST_CARRIER where code = CARR_CODE and NVL(MAIL_AS_CARGO,'X') = 'Y') = 0 THEN 'Y'
		      WHEN  (u.handling_mode = 'NBK' AND B.NESTING_ID IS NOT NULL) then 'Y' else 'N' end as nestingIdDisable
                  from  EXP_PMANIFEST_ULD B,uld_inventory U,
                mast_uld_type uldType
                  where B.flt_key = #fltNo#
                  AND B.flt_date = TO_DATE(#fltDate#, 'DDMONYY')
                  and uldType.code=SUBSTR(TRIM(U.uld_key),1,3) 
                  AND B.uld_bt_no = U.uld_key 
                  AND (U.HANDLING_MODE IS NULL or U.HANDLING_MODE NOT IN ('DT'))
                  <isNotEmpty property="uldNo">
                        AND B.uld_bt_no = #uldNo#
                  </isNotEmpty>
            Order BY B.uld_bt_no
	</select>
	<!-- Changed for QR -->
	<!--<select id="declare_buildup_complete_flight_get_header" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" 
		resultClass="cargo.cms.export.bo.DeclareBuildupCompleteDetailsBO">
		select distinct
		  A.flt_key as fltNo,
		  to_char(A.flt_date,'DDMONYY') as fltDate,
		  to_char(B.EST_DATE,'DDMONYY') as etd
		from exp_pmanifest_uld A, flt_opr B
		where 
			A.flt_key=#fltNo#
			and A.flt_date = TO_DATE(#fltDate#, 'DDMONYY')
			and B.FLT_KEY = A.flt_key
			and B.SCH_DATE = A.FLT_DATE
			and B.FLT_TYPE = 'D'
	</select>
	--><select id="declare_buildup_complete_flight_get_items" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" 
		resultClass="cargo.cms.export.bo.DeclareBuildupCompleteItemByFltBO">
		select
		  A.AWB_NO as awbNo,
		  CONCAT(CONCAT(SUBSTR(A.AWB_NO,0,3),'-'),SUBSTR(A.AWB_NO,4)) as awbNoDisplay,
		  A.AWB_DATE as awbDate,
		  (A.BULK_PCS + A.PPK_PCS + A.MIX_PCS) as pmanfPcs,
		  (A.BULK_WT + A.PPK_WT + A.MIX_WT) as pmanfWt,
		  (A.BULK_PCS + A.PPK_PCS + A.MIX_PCS - A.ASSIGNED_BULK_PCS) as unassgnPcs,
		  (A.BULK_WT + A.PPK_WT + A.MIX_WT - A.ASSIGNED_BULK_WT) as unassgnWt,
		  (B.ULD_BT_NO || ' ' || B.ASSIGNED_PCS || '/' || B.ASSIGNED_WT) as uldBtNo,
	  	  B.ASSIGNED_PCS as assgnPcs,
	  	  B.ASSIGNED_WT as assgnWt
		from exp_pmanifest_awb A, exp_pmanifest_uld_awb B
		where 
			A.flt_key=#fltNo#
			and A.flt_date = TO_DATE(#fltDate#, 'DDMONYY')
			and B.flt_key = A.flt_key
			and B.flt_date = A.flt_date
			and B.awb_no = A.awb_no
			and B.awb_date = A.awb_date
	</select>
	<update id="declare_buildup_complete_flight_update" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" > 
	UPDATE 
				FLT_OPR_EVENTS 
	SET 		TR_TYPE = 'CPBUS',
				BUILDUP_CDATE=SYSDATE,
				BUILDUP_CTIME=TO_CHAR(SYSDATE,'HH24MI'),
				BUILDUP_CUSER=#user#,
				LM_USER_ID = #user#,
				LM_DATE = SYSDATE
	WHERE 
				FLT_KEY=#fltNo#
	AND SCH_DATE=TO_DATE(#fltDate#,'DDMONYY')
	AND FLT_TYPE = 'D'
    </update>
    <update id="amendManWtInd" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteItemBO" >
    update uld_inventory set MAN_WT_IND = #manWtInd# WHERE ULD_KEY= #uldBtNo#
	</update>
 <update id="declare_buildup_complete_uld_update" parameterClass="map" > 
	UPDATE 
				EXP_PMANIFEST_ULD 
	SET			
				TR_TYPE_EVT = 'CPBUS',
				BLDUP_COMPLETE=#buComplete#,
				NESTING_ID=#nestingId#,
				VOL_IND=#volInd#,
				BLDUP_START=#buStart#,
				OHG=#ohg#,
				CONTR_CODE=#contrCode#,
				BB_IND=#bbInd#,
				LM_USER_ID=#user#,
				LM_DATE=sysdate,
				READY_DISP =#ReadyDispatch#,
				READY_DISP_DATE = DECODE(#ReadyDispatch#,'Y',SYSDATE,NULL),
				READY_DISP_TIME = DECODE(#ReadyDispatch#,'Y',TO_CHAR(SYSDATE,'HH24MI') ,NULL),				
				READY_WH = DECODE(#buComplete#,'Y','Y','N','N','N'),
				JO_NO=DECODE(#buStart#,'Y',JO_NO,null),
				BLDUP_START_USER_ID = DECODE(#buStart#,'Y',#user#,null),
				BLDUP_START_DATE	= DECODE(#buStart#,'Y',DECODE(BLDUP_START_DATE,'',SYSDATE,BLDUP_START_DATE),null), 
				BLDUP_COMPLETE_USER_ID = DECODE(#buComplete#,'Y',#user#,null),
				BLDUP_COMPLETE_DATE	= DECODE(#buComplete#,'Y',SYSDATE,null),
				ULD_CLOSE = #uldClose#,
				ULD_CLOSE_USER_ID = DECODE(#uldClose#,'Y',#user#,null),
				ULD_CLOSE_DATE = DECODE(#uldClose#,'Y',SYSDATE,null),
				HEIGHT = #height#
	WHERE 
				FLT_KEY=#fltNo#
				AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY')
				AND ULD_BT_NO = #uldNo#
    </update>
	<select id="checkBulkULD_capBU" parameterClass="map" resultClass="java.lang.Integer">
		SELECT COUNT(1)
		FROM EXP_PMANIFEST_ULD A
		WHERE ((A.BB_IND    = 'Y'
		OR A.NEW_CHECKIN_ULD='Y'
		OR (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N'))
		  FROM mast_uld_type
		  WHERE code   = SUBSTR(A.ULD_BT_NO, 1, 3)) = 'Y')
		OR A.ULD_BT_NO =
		  (SELECT RULE_VALUE FROM cmsrules WHERE RULE_CODE='Dummy_H_Container'
		  ))
		AND A.ULD_BT_NO = #uldNo#
		AND FLT_KEY     =#fltNo#
		AND FLT_DATE    =#fltDate#
	</select>
    <update id="declare_buildup_complete_accessory_update" parameterClass="map" >
    UPDATE EXP_ULD_ACC SET QTY = #quantity# WHERE FLT_KEY  = #fltNo# AND FLT_DATE = #fltDate# AND ULD_KEY    = #uldNo# AND ACTIVITY   = 'BUILDUP' AND UPPER(EQUIP_TYPE) = UPPER(#equipType#)
    </update>
	<select id="chkAccessoryExistsfordesktopbucomp" parameterClass="map" resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EXP_ULD_ACC WHERE FLT_KEY  = #fltNo# AND FLT_DATE = #fltDate# AND ULD_KEY    = #uldNo# AND ACTIVITY   = 'BUILDUP' AND UPPER(equip_type) = UPPER(#equipType#) 
	</select>
    <select id="chkAccessoryExistsforbucomp" parameterClass="map" resultClass="java.lang.String">
	SELECT COUNT(1) FROM EXP_ULD_ACC WHERE FLT_KEY  = #fltNo# AND FLT_DATE = #fltDate# AND ULD_KEY    = #uldNo# AND ACTIVITY   = 'BUILDUP' AND UPPER(equip_type) IN ('HALF SIZE PVC','FULL SIZE PVC') 
	</select>
	<insert id="addaccessoryforbucomp" parameterClass="map">
		INSERT INTO EXP_ULD_ACC (
			FLT_KEY,
			FLT_DATE,
			ULD_KEY,
			ACTIVITY,
			EQUIP_TYPE,
			CR_DATE,
			CR_USER_ID,
			FLT_CARR,
			FLT_NO,
			FLT_TYPE,
			LM_DATE,
			LM_USER_ID,
			QTY,
			CONTR_CODE,
			ULD_TYPE,
			ULD_NO,
			ULD_CARR)
		VALUES (
			#fltNo#,
			#fltDate#,
			#uldNo#,
			'BUILDUP',
			#equipType#,
			sysdate,
			#user#,
			(SELECT CARR_CODE FROM FLT_OPR WHERE FLT_KEY=#fltNo# AND SCH_DATE=#fltDate# AND FLT_TYPE='D' AND ROWNUM=1),
			(SELECT FLT_NO FROM FLT_OPR WHERE FLT_KEY=#fltNo# AND SCH_DATE=#fltDate# AND FLT_TYPE='D' AND ROWNUM=1),     
			'E',
			sysdate,
			#user#,
			#quantity#,
			#contrCode#,
			(select uld_type from uld_inventory where uld_key=#uldNo# and rownum=1),
			(select uld_no from uld_inventory where uld_key=#uldNo# and rownum=1),
			(select uld_carr from uld_inventory where uld_key=#uldNo# and rownum=1))
		</insert>
	<update id="deleteaccessoryforbucomp" parameterClass="map">
    	DELETE FROM EXP_ULD_ACC	WHERE FLT_KEY=#fltNo# AND FLT_DATE=#fltDate# AND ULD_KEY=#uldNo# AND ACTIVITY='BUILDUP' AND UPPER(equip_type) = #equipType# 			
	</update>
    <select id="chkAccessoryExistsfordesktopbucompwithzero" parameterClass="map" resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EXP_ULD_ACC WHERE FLT_KEY  = #fltNo# AND FLT_DATE = #fltDate# AND ULD_KEY    = #uldNo# AND ACTIVITY   = 'BUILDUP' AND UPPER(equip_type) = #equipType# and qty = 0 
	</select>
	<select id="getEquipType_capture" parameterClass="java.lang.String" resultClass="java.lang.String">
	<![CDATA[
	select CODE from mast_code_dtl where code_type = 'EQUIP_TYPE' AND UPPER(CODE) LIKE UPPER('%'||#keySearchStr#||'%') AND ROWNUM=1
	]]> 
	</select>
    <update id="updateExpFltULDCounterCode_tm" parameterClass="java.util.HashMap">
    	UPDATE EXP_FLT_ULD SET 
		CONTR_CODE = #contrCode#,		
		LM_USER_ID= #user#,
		LM_DATE= SYSDATE
		WHERE FLT_KEY=#fltNo# AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY') AND ULD_KEY = #uldNo#
    </update>
    
    
    <update id="updateExpFltULDCounterCode" parameterClass="java.util.HashMap">
    	UPDATE EXP_FLT_ULD SET 
		CONTR_CODE = #contrCode#,
		BB_IND = #bbInd#,
		LM_USER_ID= #user#,
		LM_DATE= SYSDATE
		WHERE FLT_KEY=#fltNo# AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY') AND ULD_KEY = #uldNo#
    </update>
    
    <update id="declare_buildup_complete_uld_amend" parameterClass="map">
    UPDATE EXP_PMANIFEST_ULD
    SET
    	TR_TYPE_EVT = #TR_TYPE_EVT#,
    	CONTR_CODE = #newContrCode#,
    	TARE_WT = #newTareWt#,
    	GROSS_WT = #newGrossWt#,
    	LM_USER_ID = #user#,
    	LM_DATE = sysdate,
    	ENDORSED_BY	= DECODE(#endorse#,'true',#user#,ENDORSED_BY),
		ENDORSED_DATE = DECODE(#endorse#,'true',SYSDATE,ENDORSED_DATE)
    WHERE
    	FLT_KEY = #fltNo#
    	AND FLT_DATE = to_date(#fltDate#,'DDMONYY')
    	AND ULD_BT_NO = #uldNo#
    </update>
    <update id="declare_buildup_complete_flight_reset" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" > 
	UPDATE 
				FLT_OPR_EVENTS 
	SET
				TR_TYPE = 'CPBUS',
				BUILDUP_CDATE=null,
				BUILDUP_CTIME=null,
				BUILDUP_CUSER=null,
				LM_USER_ID = #user#,
				LM_DATE = SYSDATE
	WHERE 
				FLT_KEY=#fltNo#
				AND SCH_DATE=TO_DATE(#fltDate#,'DDMONYY')
				AND FLT_TYPE = 'D'
    </update>
    <update id="declare_buildup_complete_uld_reset" parameterClass="map" > 
	UPDATE 
				EXP_PMANIFEST_ULD 
	SET
				TR_TYPE_EVT = 'BUPUC',
				BLDUP_COMPLETE='N',
				READY_WH = 'N',
				LM_USER_ID=#user#,
				LM_DATE=sysdate,
				GROSS_WT =#grossWt#,
				BLDUP_COMPLETE_USER_ID = NULL,
				BLDUP_COMPLETE_DATE	= NULL,
				endorsed_by = NULL, endorsed_date = NULL
	WHERE 
				FLT_KEY=#fltNo#
				AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY')
				AND ULD_BT_NO = #uldNo#
    </update>
    <!-- Changed for QR -->
     <select id="declare_buildup_complete_validate_uld_complete" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" 
     	resultClass="cargo.cms.export.bo.ExpPmanifestUldBO">
		select C.BLDUP_COMPLETE as buildupStatus
		from exp_pmanifest_uld C
		where 		flt_key=#fltNo#
			and flt_date = TO_DATE(#fltDate#, 'DDMONYY')
			and BLDUP_COMPLETE = 'N'
	</select>
	<select id="declare_buildup_complete_validate_buildup_flight" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" resultClass="java.lang.String">
		select
				BUILDUP_CUSER
				from FLT_OPR_EVENTS
		WHERE 
					FLT_KEY=#fltNo#
		AND SCH_DATE=TO_DATE(#fltDate#,'DDMONYY')
		AND FLT_TYPE = 'D'
	</select>
	<select id="declare_buildup_complete_validate_uld_flight" parameterClass="map" resultClass="java.lang.String">
		select BLDUP_COMPLETE from EXP_PMANIFEST_ULD 
		WHERE 
					FLT_KEY=#fltNo#
					AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY')
					AND ULD_BT_NO = #uldNo#
	</select>
	<select id="declare_buildup_complete_chk_flg" parameterClass="map" resultClass="java.lang.String">
		SELECT CHK_FLG FROM EXP_CHKOUT_DTL WHERE FLT_KEY=#fltNo# AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY') AND ULD_KEY=#uldNo#
	</select>
	<select id="get_uld_transit_type" parameterClass="java.lang.String" resultClass="java.lang.String">
		select transit_type from uld_inventory where uld_key = #PARAM#
	</select>
	<select id="getTransitTypeofULD" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(*) from uld_inventory  where uld_key = #PARAM# and transit_flg='Y' and handling_mode in ('PPK','NBK')
	</select>
	
	<select id="declare_buildup_complete_validate_pmanifest" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" resultClass="java.lang.String">
		select COUNT(1)
		from   exp_pmanifest_awb 
		where  flt_key = #fltNo#
			and    flt_date = to_date(#fltDate#, 'DDMONYY')
			and    unassigned_bulk_pcs > 0
	</select>
	<select id="declare_buildup_complete_validate_flight" parameterClass="map" resultClass="java.lang.String">		
		select decode(buildup_cdate, null, 'N', 'Y')
			from   flt_opr_events
			where  flt_key = #fltNo#
			and    sch_date =TO_DATE(#fltDate#,'DDMONYY')
			and    flt_type = 'D'	
	</select>
	<select id="checkEndorsePmanforBUP" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="cargo.cms.export.bo.AWBBO">
   		<![CDATA[
   	 SELECT CODE AS endorseShc,MAST_SPL_HAND_CODE.ENDR_BLDUP as endorseLevel,#pcs# as endorsePc,#wt# as endorseWt FROM AWB awb ,MAST_SPL_HAND_CODE WHERE 
      		awb.awb_no=#awbNo1# and awb.awb_date=#awbDate# and 
			(MAST_SPL_HAND_CODE.CODE = awb.spl_code1 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code2 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code3 OR 
			MAST_SPL_HAND_CODE.CODE = awb.spl_code4 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code5 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code6 OR 
			MAST_SPL_HAND_CODE.CODE = awb.spl_code7 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code8 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code9)
		AND MAST_SPL_HAND_CODE.ENDR_BLDUP IS NOT NULL AND MAST_SPL_HAND_CODE.ENDR_BLDUP <> '0' ORDER BY MAST_SPL_HAND_CODE.ENDR_BLDUP DESC
		]]>
   	</select>
	<select id="declare_buildup_complete_endorse_spl" parameterClass="map" resultClass="cargo.cms.export.bo.DeclareBuildupCompleteDetailsBO">
	<![CDATA[
		SELECT B.AWB_NO AS awbNo,TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate,M.CODE AS endrsShc,M.ENDR_BC AS endrsLevel,C.PCS AS endrsPc,TRIM(TO_CHAR(NVL(((B.ASSIGNED_WT/B.ASSIGNED_PCS) * C.PCS),0), '9999990D9')) AS endrsWt
			FROM EXP_PMANIFEST_ULD A,EXP_PMANIFEST_ULD_AWB B,EXP_PMANIFEST_ULD_AWB_SHC C,MAST_SPL_HAND_CODE M WHERE A.FLT_KEY = #flightNo# AND A.FLT_DATE = #flightDate# AND A.ULD_BT_NO = #uldBtNo# 
			AND A.FLT_KEY = B.FLT_KEY AND A.FLT_DATE = B.FLT_DATE AND A.ULD_BT_NO = B.ULD_BT_NO
			AND C.TR_NO = B.TR_NO AND ENDR_BC IS NOT NULL AND ENDR_BC <> '0'  AND (M.CODE=C.SHC OR M.CODE=C.SHC2 OR M.CODE=C.SHC3 OR M.CODE=C.SHC4 OR 
			M.CODE=C.SHC5 OR M.CODE=C.SHC6 OR M.CODE=C.SHC7 OR M.CODE=C.SHC8 OR M.CODE=C.SHC9) ORDER BY B.AWB_NO,M.ENDR_BC DESC
			]]>
	</select>
	<select id="declare_buildup_complete_endorse_awb" parameterClass="map" resultClass="java.lang.String">
	<![CDATA[
		SELECT MAX(M.ENDR_BC)
			FROM EXP_PMANIFEST_ULD A,EXP_PMANIFEST_ULD_AWB B,EXP_PMANIFEST_ULD_AWB_SHC C,MAST_SPL_HAND_CODE M WHERE A.FLT_KEY = #flightNo# AND A.FLT_DATE = #flightDate# AND A.ULD_BT_NO = #uldBtNo# 
			AND A.FLT_KEY = B.FLT_KEY AND A.FLT_DATE = B.FLT_DATE AND A.ULD_BT_NO = B.ULD_BT_NO
			AND C.TR_NO = B.TR_NO AND ENDR_BC IS NOT NULL AND ENDR_BC <> '0'  AND (M.CODE=C.SHC OR M.CODE=C.SHC2 OR M.CODE=C.SHC3 OR M.CODE=C.SHC4 OR 
			M.CODE=C.SHC5 OR M.CODE=C.SHC6 OR M.CODE=C.SHC7 OR M.CODE=C.SHC8 OR M.CODE=C.SHC9)
			]]>
	</select>
	<select id="declare_buildup_complete_uld_get_header_hht" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO"
		resultClass="cargo.cms.export.bo.DeclareBuildupCompleteDetailsBO">
		select 
		  A.flt_key as fltNo,
		  to_char(A.flt_date,'DDMONYY') as fltDate,
		  to_char(B.EST_DATE,'DDMONYY') as etd,
		  decode(est_time, null, '', substr(lpad(est_time, 4, 0), 1, 2) || ':' || substr(lpad(est_time, 4, 0), 3)||decode(est_date, null, '', decode(sch_date, nvl(est_date, sch_date), '', '/'||to_char(nvl(est_date, sch_date), 'DD')))) as etdTime,
		  B.carr_code as fltPfx,
      	  B.flt_no as fltSfx,
      	  B.flt_type as fltType,
      	  A.BLDUP_COMPLETE as buildupCompInd,
      	  (SELECT DECODE(COUNT(1), 0, 'N', 'Y')  FROM MAST_CARRIER where code = b.CARR_CODE and NVL(MAIL_AS_CARGO,'X') = 'Y') as mailAsCargo
		from exp_pmanifest_uld A
		join ULD_INVENTORY C on A.ULD_BT_NO = C.ULD_KEY and A.FLT_KEY=C.FLT_KEY and A.FLT_DATE=C.FLT_DATE, 
		flt_opr B
		where 
			<isEmpty property="uldNo">
				A.bldup_locn = #location#
			</isEmpty>
			<isEmpty property="location">
				A.uld_bt_no = #uldNo#
			</isEmpty>
			<isNotEmpty property="uldNo">
				<isNotEmpty property="location">
				(A.uld_bt_no = #uldNo# and A.bldup_locn = #location#)
				</isNotEmpty>
			</isNotEmpty>
			and B.FLT_KEY = A.flt_key
			and B.SCH_DATE = A.FLT_DATE
			and B.FLT_TYPE = 'D'
	</select>	
	<select id="declare_buildup_complete_uld_get_accessory_hht" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.DeclareBuildupCompleteDetailsBO">
		SELECT      
      		EQUIP_TYPE AS accessory,
      		'BUILDUP' AS activity,
      		QTY AS qty
    	FROM EXP_ULD_ACC WHERE FLT_KEY = #fltNo# AND FLT_DATE = #fltDate# AND ULD_KEY = #uldNo#
    </select>
    <insert id="declare_buildup_complete_uld_insert_accessory_hht" parameterClass="java.util.HashMap">
    	INSERT INTO EXP_ULD_ACC(FLT_KEY,FLT_DATE,ULD_KEY,ACTIVITY,EQUIP_TYPE,FLT_TYPE,FLT_CARR,FLT_NO,QTY,ULD_TYPE,ULD_NO,ULD_CARR,CONTR_CODE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
    	VALUES(#fltKey#,TO_DATE(#fltDate#,'DDMONYY'),#uldKey#,#activity#,#accessory#,#fltType#,#fltCarr#,#fltNo#,#qty#,#uldType#,#uldNo#,#uldCarr#,#contrCode#,
    	#user#,SYSDATE,#user#,SYSDATE)	
    </insert>      
    <update id="declare_buildup_complete_uld_update_accessory_hht" parameterClass="java.util.HashMap">
    	UPDATE EXP_ULD_ACC SET QTY = NVL(#qty#,0) WHERE FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') AND ULD_KEY = #uldKey# AND EQUIP_TYPE = #accessory# AND ACTIVITY = #activity#
    </update>
    <select id="declare_buildup_complete_uld_check_accessory_hht" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
    	SELECT COUNT(1) FROM EXP_ULD_ACC WHERE FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') AND ULD_KEY = #uldKey# AND EQUIP_TYPE = #accessory# AND ACTIVITY = #activity#
    </select>
    <update id="change_uld_to_prepack" parameterClass="java.util.HashMap">
    	update uld_inventory set rebuild_yn = 'N',topup_yn = 'N',change_userid = null,change_date = null,
		lm_user_id=#user#,lm_date= sysdate where uld_key = #uldNo#
    </update>
    <select id="get_premanifset_dtl" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" resultClass="cargo.cms.export.bo.DeclareBuildupCompleteDetailsBO">
    	select sum(pman_pcs) as pmanPcs,sum(pman_wt) as pmanWt from exp_pmanifest_awb where 
    	flt_key = #fltNo# and flt_date = to_date(#fltDate#,'DDMONYY')
    </select>
     <select id="get_uld_buildup_dtl" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" resultClass="cargo.cms.export.bo.DeclareBuildupCompleteDetailsBO">
    	select sum(b.assigned_pcs) as buPcs,sum(b.assigned_wt) as buWt from exp_pmanifest_uld a
		join exp_pmanifest_uld_awb b
		on a.uld_bt_no = b.uld_bt_no and a.flt_key= b.flt_key and a.flt_date= b.flt_date
		where a.flt_key=#fltNo#
		and a.flt_date = to_date(#fltDate#,'DDMONYY')		
    </select>
    
    <select id="get_uld_bu_wt" parameterClass="map" resultClass="java.lang.String">
    	select sum(b.assigned_wt) from exp_pmanifest_uld a
		join exp_pmanifest_uld_awb b on a.uld_bt_no = b.uld_bt_no and a.flt_key = b.flt_key and a.flt_date = b.flt_date
		where a.uld_bt_no = #ULD_KEY# AND A.FLT_KEY = #FLT_NO#  AND A.FLT_DATE = TO_DATE(#FLT_DATE#,'DDMONYY')			
    </select>
    
     <select id="get_uld_shipment_dtls" parameterClass="map" resultClass="cargo.cms.export.bo.DeclareBuildupCompleteLooseItemBO">
    	select b.UNLDG_PT as unldgpt,b.AWB_NO as awbNo,to_char(b.AWB_DATE,'DDMONYY') as awbDate,
    	DECODE((SELECT A1.AWB_TYPE FROM AWB A1 WHERE A1.AWB_NO = b.AWB_NO AND A1.AWB_DATE = b.AWB_DATE AND A1.DOCACC_USER IS NOT NULL),NULL,'N','T','NA','Y') AS docAccYn
    	 from exp_pmanifest_uld a
		join exp_pmanifest_uld_awb b on 
		a.flt_key = b.flt_key and a.flt_date = b.flt_date 
		and a.uld_bt_no = b.uld_bt_no 
		where a.uld_bt_no = #uldNo#
		and a.flt_key = #fltNo#
		and a.flt_date = to_date(#fltDate#,'DDMONYY')
    </select>
	<select id="getBuildUpPcsforsecchk" parameterClass="map" resultClass="java.lang.String">
		SELECT NVL(SUM(A.ASSIGNED_PCS),0)
			FROM EXP_PMANIFEST_ULD_AWB A,
			  EXP_PMANIFEST_ULD B, AWB C
			WHERE B.ULD_BT_NO = A.ULD_BT_NO
			AND B.FLT_KEY     = A.FLT_KEY
			AND B.FLT_DATE    = A.FLT_DATE
			AND C.AWB_NO = A.AWB_NO 
			AND C.AWB_DATE = A.AWB_DATE
			and C.AWB_TYPE = 'T'
			AND A.FLT_KEY     = #FLT_KEY#
			AND A.FLT_DATE    = #FLT_DATE#
			AND A.AWB_NO      =#AWB_NO#
			AND A.AWB_DATE    =#AWB_DATE#
	</select>
	<select id="getPassJOPcsforsecchk" parameterClass="map" resultClass="java.lang.String">
		SELECT NVL(SUM(JOHD.PC),0)
			FROM EXP_SEC_CHK_JO JOHD,
			  EXP_SEC_CHK_JO_DTL JODTL
			WHERE JODTL.JO_NO = JOHD.JO_NO
			AND JODTL.RESULT IS NOT NULL
			AND JODTL.RESULT  = 'Pass'
			AND JOHD.AWB_NO   =#AWB_NO#
			AND JOHD.AWB_DATE =#AWB_DATE#
	</select>	
    <select id="validatePremanifest" parameterClass="map" resultClass="java.lang.Integer">
    	select COUNT(1) from awb_inventory  where uld_key = #uldNo# and flt_key != #fltNo#
		and 	flt_date != to_date (#fltDate#,'DDMONYY')
	</select>
     <select id="validateUnladingPoint" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteLooseItemBO" resultClass="java.lang.Integer">
    	 select count(1) from exp_pmanifest_awb where 
		awb_no = #awbNo# and awb_date = to_date(#awbDate#,'DDMONYY') 
		and flt_key = #fltKey# and flt_date = to_date(#fltDate#,'DDMONYY')
		and unldg_pt = #unldgpt#
    </select>
   	<select id="validateFltOrSectorClosed" parameterClass="map" resultClass="java.lang.Integer">
    	 select count(1) from flt_opr_leg where flt_key = #fltNo#
		and sch_date = to_date(#fltDate#,'DDMONYY') and leg_status = 'Y' and off_point = 
		(select unldg_pt from exp_pmanifest_uld where uld_bt_no = #uldNo# and flt_key = #fltNo#
		and flt_date = to_date(#fltDate#,'DDMONYY'))
	</select>
	<select id="getUldWeights" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.FinalizeULDWtBO">
    	 select   TRIM(to_char(first_wt,9999999.99)) as firstWt,
        TRIM(to_char(second_wt,9999999.99)) as secondWt,
        TRIM(to_char(third_wt,9999999.99)) as thirdWt,
        (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'FINALIZED_ULD_WT_Wi-Fi_IND') as wifiInd
        from uld_inventory where uld_key = #uldKey#
	</select>
	<select id="chkUldTypeForHContainer" parameterClass="java.lang.String" resultClass="java.lang.Integer">
    	 select count(1) from mast_uld_type where h_cont_ind = 'Y' and code = #uldType#
	</select>
	<select id="validateOHGLimit" parameterClass="map" resultClass="java.lang.String">
    	select ohg_limit from mast_contr_ind where code = #code# 
	</select>
	<update id="resetJobOrderUldStatus" parameterClass="java.util.HashMap">
    	 update exp_bu_gp_uld_type
       set bu_zone = null,status = null,
       lm_user_id = #user#,
       lm_date = sysdate
       where gp_no in (  
       select a.gp_no from exp_bu_gp a join exp_bu_gp_uld_type b
       on a.gp_no = b.gp_no
       where a.flt_key =#fltNo#
       and a.flt_date = to_date(#fltDate#,'DDMONYY')
       and b.uld_key = #uldNo#)
    </update>
	<select id="check_uld_in_mhs" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select NVL(COUNT(1),0) from mast_wh_group where wh_type='MHS' and wh_group=(select wh_group from mast_wh_loc
    where code=(select loc_code from uld_inventory where uld_key = #uldKey#) )
	</select>
	<select id="get_first_wt_for_uld" parameterClass="java.lang.String" resultClass="java.lang.String">
		select CASE WHEN U.FINAL_WEIGHT = 'Y' AND NVL(U.GROSS_WEIGHT,0)>0 THEN TRIM(TO_CHAR(NVL(U.GROSS_WEIGHT,0),'99999999999999990.00'))
                      ELSE TRIM(TO_CHAR(NVL(U.FIRST_WT,0),'99999999999999990.00')) END AS GROSSWT from uld_inventory U where U.uld_key = #uldKey#
	</select>
	<select id="getShpBuildUpOnUld" parameterClass="map" resultClass="java.lang.String">
		SELECT  SUM(LOCN_PCS)
		FROM AWB_INVENTORY A
		WHERE A.ULD_KEY = #uldNo# and A.FLT_KEY = #fltNo# AND A.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') and A.flt_type = 'E'
	</select>
	<select id="getShpLoadedOnUld" parameterClass="map" resultClass="java.lang.String">
		SELECT SUM(LOCN_PCS) FROM AWB_INVENTORY WHERE ULD_KEY = #uldNo#
	</select>
	
	<select id="sqlFetchShpPcsBuildUpOnUld" parameterClass="map" resultClass="java.lang.String">
		SELECT 
			SUM(LOCN_PCS) 
		FROM 
			AWB_INVENTORY 
		WHERE 
			ULD_KEY=#uldKey# AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_KEY=#fltKey# 
			AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY') AND FLT_TYPE='E'
	</select>
	
	<select id="CHECK_HOLDING_VALIDATION" parameterClass="map" resultClass="java.lang.String">
	  <![CDATA[
	SELECT 
	DECODE(C.act_acc_date,'',to_char(B.RCL_DATE,'DDMONYY HH24:MI'),(to_char(C.act_acc_date,'DDMONYY')|| ' ' || SUBSTR(TRIM(TO_CHAR(C.act_acc_time,'0000')),1,2) || ':' ||SUBSTR(TRIM(TO_CHAR(C.act_acc_time,'0000')),3,2))) AS startDate
	FROM 
	EXP_PMANIFEST_AWB A,
	EXP_RCL_HD B,
	EXP_PRE_RCL_HD C
	WHERE 
	B.AWB_NO = A.AWB_NO AND
	B.AWB_DATE = A.AWB_DATE AND
	B.CR_DATE = (select max(cr_date) from exp_rcl_hd where awb_no = A.AWB_NO and status <> 'V') AND
	C.PRE_RCL_NO(+) = B.PRE_RCL_NO AND
	A.FLT_KEY=#fltNo# AND
	A.FLT_DATE=#fltDate# AND
	A.AWB_NO=#awbNo# AND
    A.AWB_DATE=#awbDate# and rownum=1
	UNION
	SELECT 
	DECODE(D.act_acc_date,'',to_char(C.RCL_DATE,'DDMONYY HH24:MI'),(to_char(D.act_acc_date,'DDMONYY')|| ' ' || SUBSTR(TRIM(TO_CHAR(D.act_acc_time,'0000')),1,2) || ':' ||SUBSTR(TRIM(TO_CHAR(D.act_acc_time,'0000')),3,2))) AS startDate
	FROM 
	EXP_PMANIFEST_AWB A,
	EXP_RCL_BRKDN B,
	EXP_RCL_HD C,
	EXP_PRE_RCL_HD D
	WHERE
	B.AWB_NO = A.AWB_NO AND
	B.AWB_DATE = A.AWB_DATE AND
	C.RCL_NO = B.RCL_NO AND
	C.RCL_DATE = (select max(cr_date) from exp_rcl_hd where RCL_NO=B.RCL_NO AND status <> 'V') AND
	D.PRE_RCL_NO(+) = C.PRE_RCL_NO AND
	A.FLT_KEY=#fltNo# AND
	A.FLT_DATE=#fltDate# AND
	A.AWB_NO=#awbNo# AND
    A.AWB_DATE=#awbDate# AND
    NOT EXISTS (SELECT 
	NULL
	FROM 
	EXP_PMANIFEST_AWB A,
	EXP_RCL_HD B,
	EXP_PRE_RCL_HD C
	WHERE 
	B.AWB_NO = A.AWB_NO AND
	B.AWB_DATE = A.AWB_DATE AND
	B.CR_DATE = (select max(cr_date) from exp_rcl_hd where awb_no = A.AWB_NO and status <> 'V') AND
	C.PRE_RCL_NO(+) = B.PRE_RCL_NO AND
	A.FLT_KEY=#fltNo# AND
	A.FLT_DATE=#fltDate# AND
	A.AWB_NO=#awbNo# AND
    A.AWB_DATE=#awbDate#) and rownum=1
	]]>
	</select>
	<select id="CHECK_HOLDING_VALIDATION_FOR_AUTOBUILDUP" parameterClass="map" resultClass="java.lang.String">
	  <![CDATA[
	SELECT 
	DECODE(C.act_acc_date,'',to_char(B.RCL_DATE,'DDMONYY HH24:MI'),(to_char(C.act_acc_date,'DDMONYY')|| ' ' || SUBSTR(TRIM(TO_CHAR(C.act_acc_time,'0000')),1,2) || ':' ||SUBSTR(TRIM(TO_CHAR(C.act_acc_time,'0000')),3,2))) AS startDate
	FROM 
	EXP_RCL_HD B,
	EXP_PRE_RCL_HD C
	WHERE 
	B.CR_DATE = (select max(cr_date) from exp_rcl_hd where awb_no = B.AWB_NO and status <> 'V') AND
	C.PRE_RCL_NO(+) = B.PRE_RCL_NO AND
  	B.AWB_NO = #awbNo# AND
	B.AWB_DATE = #awbDate# AND ROWNUM=1
	UNION
	SELECT 
	DECODE(D.act_acc_date,'',to_char(C.RCL_DATE,'DDMONYY HH24:MI'),(to_char(D.act_acc_date,'DDMONYY')|| ' ' || SUBSTR(TRIM(TO_CHAR(D.act_acc_time,'0000')),1,2) || ':' ||SUBSTR(TRIM(TO_CHAR(D.act_acc_time,'0000')),3,2))) AS startDate
	FROM 
	EXP_RCL_BRKDN B,
	EXP_RCL_HD C,
	EXP_PRE_RCL_HD D
	WHERE
	C.RCL_NO = B.RCL_NO AND
	C.RCL_DATE = (select max(cr_date) from exp_rcl_hd where RCL_NO=B.RCL_NO AND status <> 'V') AND
	D.PRE_RCL_NO(+) = C.PRE_RCL_NO AND
	B.AWB_NO = #awbNo# AND
	B.AWB_DATE = #awbDate# AND ROWNUM=1 AND
  	NOT EXISTS(
   	SELECT 
	NULL
	FROM 
	EXP_RCL_HD B,
	EXP_PRE_RCL_HD C
	WHERE 
	B.CR_DATE = (select max(cr_date) from exp_rcl_hd where awb_no = B.AWB_NO and status <> 'V') AND
	C.PRE_RCL_NO(+) = B.PRE_RCL_NO AND
  	B.AWB_NO = #awbNo# AND
	B.AWB_DATE = #awbDate# AND ROWNUM=1
	)
	]]>
	</select>
	<select id="getCaptureHolding" parameterClass="map" resultClass="java.lang.String">
	SELECT HLDG_PERIOD FROM EXP_CAR WHERE AWB_NO = #awbNo# AND AWB_DATE = #awbDate#
	</select>
	<!-- Changed for QR -->
	<select id="getCaptureFlightHolding" parameterClass="map" resultClass="java.lang.String">
	select decode(holding_time,null,'0000',lpad(holding_time, 4, 0)) from flt_opr_events where flt_key=#fltNo# and SCH_date=#fltDate# AND FLT_TYPE='D'
	</select>
	<!-- Changed for QR -->
	<select id="getCaptureFlightCarrHolding" parameterClass="map" resultClass="java.lang.String">
	SELECT MIN_HOLD_HR FROM MAST_CARRIER WHERE CODE=(select carr_code from flt_opr where flt_key=#fltNo# and sch_date=#fltDate# AND FLT_TYPE='D')
	</select>
	<select id="CHECK_START_REL_DATE_DIFF"  parameterClass="java.util.HashMap"  resultClass="java.lang.String">
	 <![CDATA[
			select
	       (case when (SELECT to_number(TO_DATE(#startDate#,'DDMONYY HH24:MI') - TO_DATE(#estDate#,'DDMONYY HH24:MI')) as DAYDIFF FROM DUAL) <= 0 
	       then 'Y'
	       else 'N'
	       end)
	       from 
	       dual
	       ]]>
	</select>
	<!-- Changed for QR -->
	<select id="getCaptureEstDate" parameterClass="map" resultClass="java.lang.String">
	SELECT 
      DECODE(EST_DATE,'',
            TO_CHAR(SCH_DATE,'DDMONYY') ||' '|| ltrim(SUBSTR(TRIM(TO_CHAR(SCH_TIME,'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(SCH_TIME,'0000')),3,2)),
            TO_CHAR(EST_DATE,'DDMONYY') ||' '|| ltrim(SUBSTR(TRIM(TO_CHAR(EST_TIME,'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(EST_TIME,'0000')),3,2))) FROM FLT_OPR WHERE FLT_KEY=#fltNo# AND SCH_DATE=#fltDate# AND ROWNUM=1 
	</select>
	
	<select id="chkShpInUS" parameterClass="map" resultClass="java.lang.Integer">
		select count(1) from mast_city where ctry_code='US' and code = (
		SELECT loc_code FROM AWB_INVENTORY WHERE AWB_NO=#AWB_NO# and awb_date = to_date(#AWB_DATE#,'DDMONYY') and rownum=1 )
	</select>
	<select id="chkSecChkForUSShipment" parameterClass="map" resultClass="java.lang.String">
		select decode(COUNT(1),'0','N','Y') from exp_sec_chk_jo where awb_no =#AWB_NO# and
		awb_date = to_date(#AWB_DATE#,'DDMONYY') and flt_key = #FLT_KEY# 
		and flt_date = to_date(#FLT_DATE#,'DDMONYY') and jo_type = 'TSA' and status='COMPLETED'
	</select>
	<select id="chkSecChkForNOnUSShipment" parameterClass="map" resultClass="java.lang.Integer">
		select cnt1+cnt2+cnt3 from
		(select count(1) cnt1 from exp_sec_chk_jo where awb_no =#AWB_NO# and
		awb_date = to_date(#AWB_DATE#,'DDMONYY')  
		and jo_type = 'AIRLINE QCP' and UPPER(status) !='COMPLETED') ,
		(select count(1) cnt2 from exp_sec_chk_jo where awb_no =#AWB_NO# and
		awb_date = to_date(#AWB_DATE#,'DDMONYY')  
		and jo_type = 'AIRLINE RAR' and UPPER(status) !='COMPLETED') ,
		(select count(1) cnt3 from exp_sec_chk_jo where awb_no =#AWB_NO# and
		awb_date = to_date(#AWB_DATE#,'DDMONYY')  
		and jo_type = 'SC' and UPPER(status) !='COMPLETED'  ) 
	</select>
	<select id="isSecChkRequired" parameterClass="map" resultClass="java.lang.Integer">
		 select count(1) from exp_sec_chk_jo where awb_no =#AWB_NO# and  awb_date = to_date(#AWB_DATE#,'DDMONYY')
	</select>
	<select id="chkUldForMixOrPrepack" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		 select count(1) from uld_inventory where uld_key = #uldBtNo# and (MIX_PPK_IND='Y' OR ppk_ind = 'Y')
		and (rebuild_yn = 'N' and topup_yn = 'N')
	</select>
	<select id="getContainerType" parameterClass="map" resultClass="java.lang.String">
		select dummy_h_cont_ind as dummyInd from mast_uld_type where code =#uldType#
	</select>
	<update id="updateFirstWtSecondWt" parameterClass="java.util.HashMap">
    	update uld_inventory set FIRST_WT = #grossWt#,second_wt = #secondWt#,FINAL_WEIGHT =#finalizeWt#, TARE_WEIGHT = #tareWt#,CONTR_CODE = #contrCode#,GROSS_WEIGHT=#grossWt#,
		lm_user_id=#user#,lm_date= sysdate where uld_key = #uldNo#
    </update>
    <update id="updateFirstWt" parameterClass="java.util.HashMap">
    	update uld_inventory set FIRST_WT = #grossWt#,CONTR_CODE = #contrCode#,TARE_WEIGHT = #tareWt#,
		lm_user_id=#user#,lm_date= sysdate, tr_type=#trType# where uld_key = #uldNo#
    </update>
    <update id="UPDATE_ULD_INV_TAREWT_CONTRCODE" parameterClass="java.util.HashMap">
    	update uld_inventory set CONTR_CODE = #contrCode#,TARE_WEIGHT = #tareWt#,lm_user_id=#user#,lm_date= sysdate where uld_key = #uldNo#
    </update>
    <select id="getGpNo" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		  SELECT GP.GP_NO FROM EXP_BU_GP GP, EXP_BU_GP_ULD_TYPE ULDTYPE WHERE 
		 GP.GP_NO = ULDTYPE.GP_NO
		 AND GP.FLT_KEY = #fltNo# AND  GP.FLT_DATE =to_date(#fltDate#,'DDMONYY') AND 
		 ULDTYPE.ULD_KEY = #uldNo#
	</select>
	<update id="nullifyBUZone" parameterClass="java.util.HashMap">
    	update  exp_bu_gp_uld_type set bu_zone = null,status = null,lm_user_id=#user#,lm_date= sysdate
  		where uld_key=#uldNo# and gp_no = (select gp_no from exp_bu_jo where jo_no = #joNo#)
	</update>
    <update id="nullifyBUStatus" parameterClass="java.util.HashMap">
    	 update  exp_bu_jo set TR_TYPE = 'BLDJO',status = null,lm_user_id=#user#,lm_date= sysdate
  where gp_no = #gpNo# and FLT_KEY = #fltNo# AND  FLT_DATE =to_date(#fltDate#,'DDMONYY')
    </update>
    <select id="getRestrictedCodeForAWB" parameterClass="java.lang.String" resultClass="java.lang.String">
		 select   pkg_exp_val.get_exp_awb_cc_code(#awbNo#) as cccode from dual
	</select>
	    <select id="getRestrictReadyDispForAWB" parameterClass="java.lang.String" resultClass="java.lang.String">
		  select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(#awbNo#) from dual ) 
	</select>
	<select id="chkRestrictedCodeForAWB" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		  select count(1) from mast_constraint_code where code = #ccCode# and constraint = 'Y'
	</select>
	<select id="chkRestrictedReadyForDispForAWB" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		  select count(1) from mast_constraint_code where code = #ccCode# and restrict_ready_for_dispatch = 'Y'
	</select>
	<update id="upadteWeightsToULDInventory" parameterClass="java.util.HashMap">
    	UPDATE ULD_INVENTORY SET 
		FIRST_WT =null,
		SECOND_WT =null,
		THIRD_WT = null,
		MAN_WT_IND = 'N',
		MAN_WT_IND2 = 'N',
		MAN_WT_IND3 = 'N',
		GROSS_WEIGHT = '0.0',
		FINAL_WEIGHT = 'N',
		LM_USER_ID=#user#,
		LM_DATE= SYSDATE
		WHERE ULD_KEY = #uldNo#
    </update>
    <update id="upadteWtsToULDInventory" parameterClass="java.util.HashMap">
    	UPDATE ULD_INVENTORY SET 
		SECOND_WT =null,
		THIRD_WT = null,
		MAN_WT_IND2 = 'N',
		MAN_WT_IND3 = 'N',		
		GROSS_WEIGHT = '0.0',
		FINAL_WEIGHT = 'N',
		LM_USER_ID=#user#,
		LM_DATE= SYSDATE
		WHERE ULD_KEY = #uldNo#
    </update>
    <update id="updateJobOrderStatusFromBUStatus" parameterClass="java.util.HashMap">
    	update exp_bu_jo set TR_TYPE = 'BLDJO', status = #status#,lm_user_id = #user#,lm_date = sysdate where gp_no = #gpNo# and status !='Force Complete'
    </update>
    
    <update id="updateContrCode" parameterClass="java.util.HashMap">
    	UPDATE ULD_INVENTORY SET 
		CONTR_CODE = #contrCode#,
		LM_USER_ID= #user#,
		LM_DATE= SYSDATE
		WHERE ULD_KEY = #uldNo#
    </update>
    <select id="check_uld_is_empty" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from uld_inventory where uld_key = #uldKey# and empty_flg ='Y'
	</select>
	<select id="getUldDefaultTareWt" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT TARE_WEIGHT FROM ULD_TYPE_CARR_TARE_WT WHERE ULD_TYPE=#uldType# 
  		AND ULD_CARR=#uldCarr# AND #uldSeqNo# between ULD_NO_FROM and ULD_NO_TO
	</select>
	<select id="getFinalizeULDWtVarienceListForBUStatus"  parameterClass="cargo.cms.export.bo.FinalizeULDWtBO" resultClass="cargo.cms.export.bo.FinalizeULDWtBO" >
	select  wts.uldKey as uldKey,
	        TRIM(to_char(wts.netWt,'9999990D99')) as netWt,
            TRIM(to_char(wts.tareWt,'9999990D99')) as tareWt,
            TRIM(to_char(wts.grossWt,'9999990D99')) as grossWt,
            TRIM(to_char(wts.buildupWt,'9999990D99')) as buildupWt,
	        DECODE(wts.netWt,0,'0',round(100 * (wts.netWt-wts.buildupWt)/wts.netWt)) as varience,
	        (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'FINALIZED_ULD_VARIENCE_LMT') as varienceLmt
	  	from (select 
	        UI.ULD_KEY as uldKey,
	        ui.gross_weight - ui.tare_weight as netWt,
	        UI.tare_weight as tareWt,
	        UI.gross_weight as grossWt,
	        (select SUM(assigned_wt) from EXP_PMANIFEST_ULD_AWB WHERE ULD_BT_NO = PU.ULD_BT_NO) as buildupWt
	        from EXP_PMANIFEST_ULD PU,
	        ULD_INVENTORY UI  where PU.ULD_BT_NO = ui.ULD_KEY and PU.FLT_KEY = #flightNoKey# and PU.FLT_DATE = #flightDate# ) wts,
	        EXP_PMANIFEST_ULD EPU,ULD_INVENTORY UIN 
	  	where EPU.FLT_KEY = #flightNoKey#
	    and   EPU.FLT_DATE = #flightDate#
	    and   EPU.ULD_BT_NO = wts.uldKey
	    and   UIN.ULD_KEY   = wts.uldKey
    	and   EPU.BLDUP_COMPLETE = 'Y' 
    	and   DECODE(wts.netWt,0,'0',(round(100 * (wts.netWt-wts.buildupWt)/wts.netWt)))>0
    	</select>
    	
    	<select id="declare_buildup_complete_uld_get_items_hht" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" 
		resultClass="cargo.cms.export.bo.DeclareBuildupCompleteItemBO">
		select 
              B.uld_bt_no as uldBtNo,              
              (select sum(assigned_pcs) from exp_pmanifest_uld_awb 
                  WHERE flt_key = B.flt_key
                  AND flt_date = b.flt_date and uld_bt_no =  b.uld_bt_no)
                  as assgnPc,
              (select sum(assigned_wt) from exp_pmanifest_uld_awb 
              WHERE flt_key = B.flt_key
                  AND flt_date = b.flt_date and uld_bt_no =  b.uld_bt_no)
                  as assgnWt,
                  B.BLDUP_COMPLETE as buildupInd,
                  DECODE(B.BLDUP_COMPLETE,'Y',B.BLDUP_COMPLETE,'')as oldBuildupInd,                  
                  TRIM(TO_CHAR(U.tare_weight,'99999999999999990.00')) AS tareWt,
                  CASE WHEN U.FINAL_WEIGHT = 'Y' AND NVL(U.GROSS_WEIGHT,0)>0 THEN TRIM(TO_CHAR(NVL(U.GROSS_WEIGHT,0),'99999999999999990.00'))
                      ELSE TRIM(TO_CHAR(NVL(U.FIRST_WT,0),'99999999999999990.00')) END AS GROSSWT,
                  CASE WHEN U.FINAL_WEIGHT = 'Y' AND NVL(U.GROSS_WEIGHT,0)>0 THEN TRIM(TO_CHAR(NVL(U.GROSS_WEIGHT,0),'99999999999999990.00'))
                      else TRIM(TO_CHAR(NVL(U.FIRST_WT,0),'99999999999999990.00')) end AS oldgrossWt,            
                  B.EIC_YN as eicInd,
                 B.UNLDG_PT as unldgPt,
                  B.VOL_IND as volInd,
                  DECODE(B.BLDUP_START,'','N',B.BLDUP_START) as buildupStartInd,
                  DECODE(B.BLDUP_START,'Y',B.BLDUP_START,'') as oldBuildupStartInd,
                  B.BB_IND as bbInd,                  
                  B.OHG as ohg,
                  B.RCL_NO as rclNo,
                  B.JO_NO as joNo,
                  B.GP_NO as gpNo,
                  B.FLT_KEY as fltNo,
                  TO_CHAR(B.FLT_DATE,'DDMONYY') as fltDate,
                  B.PPK_TYPE as ppkType,
                  case when (u.transit_flg='Y' and u.handling_mode in('NBK','PPK')) then cont_plt else null end as contPlt  ,
      case when (u.transit_flg='Y' and u.handling_mode in('NBK','PPK')) then  case when cont_plt='C' then case when (select count(1) from uld_type_contr where uld_type=SUBSTR(TRIM(U.uld_key),1,3))=1 then 
      (select contr_code from uld_type_contr where uld_type=SUBSTR(TRIM(U.uld_key),1,3)) else null end else U.contr_code end else B.CONTR_CODE end as contrCode,
      NVL(B.ULD_CLOSE,'N') AS uldClose,
      HEIGHT AS height
                from uld_inventory U, EXP_PMANIFEST_ULD B,
                mast_uld_type uldType
                   where B.uld_bt_no = U.uld_key
                   and B.flt_key = U.flt_key
                   and uldType.code=SUBSTR(TRIM(U.uld_key),1,3) 
                   and B.flt_date = U.flt_date
                   and u.uld_key=#uldNo#
		
		</select>
		<select id="getUldCountForCaptureBuStatus" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from uld_inventory where loc_code=#location#
		</select>
		<!-- <select id="getUldKeyForCaptureBuStatus" parameterClass="java.lang.String" resultClass="java.lang.String">
		select uld_key from uld_inventory where loc_code=#location#
		</select> -->
		
		<select id="isULDoneCcheckOffload" parameterClass="map" resultClass="java.lang.Integer">
			SELECT count(*) FROM exp_offload_uld WHERE FLT_KEY=#fltNo# AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY') AND uld_bt_no=#uldNo# and checked_in_flag='Y'
		</select>
	<!-- DDS_EXP_BUP_CaptureB/U Status Related Queries End -->
	<!-- ######################################################################################################### -->
	<!-- Maintain Flight Allotment - Start -->
	<select id="getFlightAllotmentHeader" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	 select * from (select opr.flt_key as fltKey,to_char(opr.sch_date,'DDMONYY') as fltDate,PKG_COMMON.get_flt_eta(opr.FLT_KEY, opr.SCH_DATE, 'D') as etd, opr.TR_NO as oprTrNo
 	,  elpmsg.CALL_SIGN as callSign, decode(elpmsg.FINALIZE_IND,null,null,decode(elpmsg.FINALIZE_IND,'Y','Y','N')) as finalizeInd,decode(elpmsg.LOAD_PLAN_FINALIZE,null,'N',decode(elpmsg.LOAD_PLAN_FINALIZE,'Y','Y','N')) as messageFinalizeInd,  decode(event.allot_freeze_ind,null,'N',decode(event.allot_freeze_ind,'Y','Y','N')) as freezeInd, 	elpmsg.load_plan_ind as loadPlanInd,  elpmsg.acft_type as acftType,elpmsg.exceed as exceed,elpmsg.uco_rmk as ucoRmk,elpmsg.VER_NO as versionNo,elpmsg.TR_NO as trNo,
 	 elpmsg.BAGGAGE_NO as  baggageNo from  flt_opr_events event,flt_opr opr   LEFT OUTER JOIN edi_elp_msg elpmsg  ON elpmsg.flt_key=opr.flt_key and to_char(elpmsg.flt_date, 'DDMONYY')=to_char(opr.sch_date, 'DDMONYY')   where
 	opr.flt_key=#fltKey# and opr.sch_date=TO_DATE(#fltDate#, 'DDMONYY') and opr.flt_type = 'D' and opr.flt_key= event.flt_key and opr.sch_date=event.sch_date and opr.flt_type= event.flt_type order by to_number(elpmsg.tr_no) desc) where rownum=1
	</select>
	<select id="checkValidLegForELP" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
	 select COUNT(1) from flt_opr opr,flt_opr_leg leg where opr.flt_key=#fltKey# and opr.sch_date=TO_DATE(#fltDate#, 'DDMONYY')  and leg.tr_no=opr.tr_no and leg.OFF_POINT =#unLdgPoint# and opr.flt_type = 'D'
	</select>
	<select id="checkMaintainFltAllot" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
	 select count(1)
	from edi_elp_msg elpmsg where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	</select>
	<select id="fetchflightport" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="java.lang.String">
	 select doc_line_no from edi_elp_port where tr_no=#trNo# and port=#unLdgPoint#
	</select> 
	<select id="fetchfreezeStatus" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="java.lang.String">
	 select ALLOT_FREEZE_IND from flt_opr_events where flt_key=#fltKey# and sch_date=TO_DATE(#fltDate#, 'DDMONYY') and FLT_TYPE='D'
	</select> 
	<select id="fetchLPFinalizeStatus" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="java.lang.String">
	 select decode(FINALIZE_IND,'Y','Y','N') from edi_elp_msg where TR_NO=#trNo# 
	</select> 	
	<select id="getFlightAllotmentDetails" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	select elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG, 
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Transit' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Transit' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>	
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG, 
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Export Local B/U' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Export Local B/U' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG, 
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Export Local Pre-Pack' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Export Local Pre-Pack'and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG,
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Transit PPK' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Transit PPK' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG,
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Tarmac' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Tarmac' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG,
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Courier' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Courier'  and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG, 
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Mail' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Mail' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG, 
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Open' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Open'  and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG, 
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'EIC' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='EIC'  and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG,
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Standby' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Standby' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	</select>
	<select id="getUnLdgPoints" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	    select off_point as unLdgPoint from flt_opr_seg where tr_no in (select tr_no from flt_opr where flt_key = #fltKey# and sch_date=to_date(#fltDate#,'dd-mon-yy') and flt_type = 'D') and brd_point='HKG' 
	 </select>
   <insert id="insertFlightAllotHeader" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	insert into edi_elp_msg  (TR_NO,	FLT_KEY , 	FLT_DATE , 	VER_NO , 	CALL_SIGN , 	ACFT_TYPE , 	BAGGAGE_NO , 	TRF_IND, 	TRF_USER_ID , 
	TRF_DATE , 	CR_USER_ID , 	CR_DATE , 	LM_USER_ID , 	LM_DATE , 	UCO_RMK, EXCEED,FINALIZE_IND,LOAD_PLAN_FINALIZE,LOAD_PLAN_IND , TR_TYPE, RECEIVE_DATE,
	FINALIZE_USER_ID, FINALIZE_DATE) values (#trNo#, 	#fltKey# , 	#fltDate# , 	#versionNo# , 	#callSign# , 	#acftType# , 	#baggageNo# , 	#transferInd#, 	#transferUserId# , 	#transferDate# , 	#crUserId# ,	SYSDATE , 	#lmUserId# , 
	SYSDATE , 	#ucoRmk#,#exceed#,#finalizeInd#,#messageFinalizeInd#,#loadPlanInd#,#trtype#, TO_DATE(#receiveDate#,'YYYY/MM/DD HH24:MI'),
	DECODE(#finalizeInd#, 'Y', #finalizeUserId#, NULL), DECODE(#finalizeInd#, 'Y', SYSDATE, NULL))
 	</insert>
 	<insert id="insertIntoEdiElpPort" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	insert into edi_elp_port (TR_NO , DOC_LINE_NO	 , 	PORT , 	CR_USER_ID , 	CR_DATE, 	LM_USER_ID , 	LM_DATE ) values (#trNo# , 	#portDocLineNo# , 
	#unLdgPoint# , 	 	#crUserId# ,	SYSDATE , 	#lmUserId# , 	SYSDATE )
 	</insert>
 	<insert id="insertFlightAllotDtl" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	  insert into edi_elp_allot (TR_NO , DOC_LINE_NO	 , 	PORT_DOC_LINE_NO , 	CGO_TYPE , 	INSTRUCTION , 	QTY_Q7 , 	QTY_Q6 , 	QTY_X8 , 	QTY_PEB , 	QTY_H5 , QTY_A2 ,QTY_LDC ,QTY_H2,
	WT , H5WT,	RMK , 	CR_USER_ID , 	CR_DATE , 	LM_USER_ID , 	LM_DATE, 
	QTY_ZA, QTY_ZB, QTY_ZC, QTY_PGA, QTY_H3, QTY_BULK, QTY_ALF, QTY_PLA, QTY_Q7D, QTY_W2, QTY_PAG) 
	values (#trNo# , #docLineNo#	 , 	#portDocLineNo# , 	#cgoType# , 	#instruction# , 	#qtyQ7# , 
	#qtyQ6# , 	#qtyX8# , 	#qtyPEB# , 	#qtyH5# ,#qtyA2# ,#qtyLDC# ,#qtyH2# , 	#wt# ,#h5Wt# , 	#rmk# , #crUserId# ,	SYSDATE , 	#lmUserId# , 	SYSDATE,
	#qtyZA#, #qtyZB#, #qtyZC#, #qtyPGA#, #qtyH3#, #qtyBULK#, #qtyALF#, #qtyPLA#, #qtyQ7D#, #qtyW2#, #qtyPAG#)
 	</insert> 	
 	 <update id="updateFlightAllotDtl" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO" >
 	  update edi_elp_allot set INSTRUCTION=#instruction#,QTY_Q7=#qtyQ7# , 	QTY_Q6=#qtyQ6# , 	QTY_X8=#qtyX8# , 	QTY_PEB=#qtyPEB# , 	QTY_H5=#qtyH5# , QTY_A2=#qtyA2# ,QTY_LDC=#qtyLDC# ,QTY_H2=#qtyH2#, WT=#wt#,H5WT=#h5Wt#,RMK=#rmk#  ,LM_USER_ID=#lmUserId# , LM_DATE=	SYSDATE  
 	  ,QTY_ZA=#qtyZA#, QTY_ZB=#qtyZB#, QTY_ZC=#qtyZC#, QTY_PGA=#qtyPGA#, QTY_H3=#qtyH3#, QTY_BULK=#qtyBULK#, 
 	  QTY_ALF=#qtyALF#, QTY_PLA=#qtyPLA#, QTY_Q7D=#qtyQ7D#, QTY_W2=#qtyW2#, QTY_PAG=#qtyPAG#
 	  where DOC_LINE_NO=#docLineNo#
 	</update> 	
	<delete id="deleteFlightAllotDtl" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">		        	
	delete from edi_elp_allot where doc_line_no=#docLineNo#
    </delete>
    <select id="fetch_edi_elp_msg_seq" resultClass="java.lang.String">	
   	 select edi_elp_msg_seq.nextval from dual
   	</select>
   	<select id="fetch_edi_elp_port_seq" resultClass="java.lang.String">	
   	 select edi_elp_port_seq.nextval from dual
   	</select>
   		<select id="fetch_edi_elp_allot_seq" resultClass="java.lang.String">	
   	 select EDI_ELP_ALLOT_SEQ.NEXTVAL from dual
   	</select>
   	<select id="fetch_TtlandGDTtl_Allot" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">   	
				select (select (decode(sum(allot.qty_Q7 ), null, '', sum(allot.qty_Q7 ) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ZA ), null, '', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               ||  decode( sum(allot.QTY_ZB ), null, '', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               ||  decode( sum(allot.QTY_ZC ), null, '', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               ||  decode( sum(allot.QTY_PGA ), null, '', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               ||  decode( sum(allot.QTY_H3 ), null, '', ','|| sum(allot.QTY_H3 ) ||'H3' )
               ||  decode( sum(allot.QTY_BULK ), null, '', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               ||  decode( sum(allot.QTY_ALF ), null, '', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               ||  decode( sum(allot.QTY_PLA ), null, '', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               ||  decode( sum(allot.QTY_Q7D ), null, '', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               ||  decode( sum(allot.QTY_W2 ), null, '', ','|| sum(allot.QTY_W2 ) ||'W2' )
               ||  decode( sum(allot.QTY_PAG ), null, '', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' ) || decode(sum(allot.WT ), null, '', ' (' || sum(allot.WT )||')') )     from edi_elp_allot allot,edi_elp_port port
                where port.doc_line_no= allot.port_doc_line_no  and msg.TR_NO=port.tr_no  and port.port=#unLdgPoint#
                and allot.CGO_TYPE in('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac',
                'Courier','Mail','Open','EIC')
                
                )as portTotal ,
                (select (decode(sum(allot.qty_Q7 ), null, '', sum(allot.qty_Q7 ) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               ||  decode( sum(allot.QTY_ZA ), null, '', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               ||  decode( sum(allot.QTY_ZB ), null, '', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               ||  decode( sum(allot.QTY_ZC ), null, '', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               ||  decode( sum(allot.QTY_PGA ), null, '', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               ||  decode( sum(allot.QTY_H3 ), null, '', ','|| sum(allot.QTY_H3 ) ||'H3' )
               ||  decode( sum(allot.QTY_BULK ), null, '', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               ||  decode( sum(allot.QTY_ALF ), null, '', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               ||  decode( sum(allot.QTY_PLA ), null, '', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               ||  decode( sum(allot.QTY_Q7D ), null, '', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               ||  decode( sum(allot.QTY_W2 ), null, '', ','|| sum(allot.QTY_W2 ) ||'W2' )
               ||  decode( sum(allot.QTY_PAG ), null, '', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' ) || decode(sum(allot.WT ), null, '', ' (' || sum(allot.WT )||')') ) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac',
                'Courier','Mail','Open','EIC') ) as grandTotal                
                from 
               edi_elp_msg msg                
             where msg.flt_key=#fltKey# and msg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and msg.tr_no=#trNo#
   	</select>
   	   	<select id="fetch_Allotment_Summary" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">   	
	select (select (decode(d.qtyQ7 , null, '',  d.qtyQ7 ||'Q7' )
               || decode(d.qtyQ6, null, '',','||  d.qtyQ6 ||'Q6')
               || decode(d.qtyX8, null, '', ','|| d.qtyX8 ||'X8')
               || decode( d.qtyPEB, null, '', ','|| d.qtyPEB ||'PEB')
               || decode(d.qtyH2, null, '', ','||d.qtyH2 ||'H2')
               || decode(d.qtyA2, null, '', ','|| d.qtyA2 ||'A2')
               || decode(d.qtyLDC, null, '', ','|| d.qtyLDC ||'LDC')
               ||  decode(d.countH5 , 0, '', ','||'H5' ))  from
              (select a.countH5,(a.totalQ6-b.totalQ6) as qtyQ6,(a.totalQ7-b.totalQ7) as qtyQ7,(a.totalX8-b.totalX8) as qtyX8,
              (a.totalPEB-b.totalPEB) as qtyPEB,(a.totalA2-b.totalA2) as qtyA2,(a.totalLDC-b.totalLDC) as qtyLDC,(a.totalH2-b.totalH2) as qtyH2,             
              a.tr_no as tr_no 
              from (select count(QTY_H5 )as countH5, sum(qty_Q6 ) as totalQ6,sum(qty_Q7 ) as totalQ7,
               sum(QTY_X8 ) as totalX8,sum(QTY_PEB ) as totalPEB,sum(QTY_A2 ) as totalA2, sum(QTY_LDC ) as totalLDC,
                sum(QTY_H2 ) as totalH2,
              tr_no from edi_elp_allot where CGO_TYPE in('Transit','Export Local B/U')   group by tr_no) a, 
              (select NVL(sum(qty_Q6 ),0) as totalQ6,NVL(sum(qty_Q7 ),0) as totalQ7,
              NVL(sum(QTY_X8 ),0) as totalX8,NVL(sum(QTY_PEB ),0) as totalPEB,NVL(sum(QTY_A2 ),0) as totalA2,NVL( sum(QTY_LDC ),0) as totalLDC,
                NVL(sum(QTY_H2 ),0) as totalH2,
              tr_no from edi_elp_allot where CGO_TYPE in('Transit PPK')  group by tr_no) b
              where a.tr_no=b.tr_no )d where d.tr_no =msg.tr_no) as whBuildUpTotal, 
                (select (decode(sum(allot.qty_Q7 ), null, '', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Export Local Pre-Pack','Transit PPK') ) as ppkTotal,
                (select (decode(sum(allot.qty_Q7 ), null, '', sum(allot.qty_Q7 ) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Tarmac') ) as tarmacTotal,
                (select (decode(sum(allot.qty_Q7 ), null, '', sum(allot.qty_Q7 ) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Courier','Mail','Open','EIC') ) as othersTotal ,
                 (select (decode(sum(allot.qty_Q7 ), null, '', sum(allot.qty_Q7 ) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )|| decode(sum(allot.WT ), null, '', ' (' || sum(allot.WT )||')')) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac',
                'Courier','Mail','Open','EIC')  ) as grandTotal                
                from edi_elp_msg msg where  msg.flt_key=#fltKey#   and msg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and msg.tr_no in(
                SELECT b.trNO FROM (SELECT rownum r, a.trNo  FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')  order by to_number(elpmsg.tr_no)  desc)a
                WHERE rownum &lt;=2) b WHERE r=#rownum#)
   	</select>
	<!-- transit details -->
   	<select id="fetch_transit_details" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	select DISTINCT concat(concat(substr(edi_fbl_shp.awb_no,0,3),'-'),substr(edi_fbl_shp.awb_no,4))as awbNoDisplay,
       edi_fbl_shp.awb_no as awbNo,
       nvl(awb.orig,edi_fbl_shp.org) as origin,
       nvl(awb.dest,edi_fbl_shp.dest) as dest,
       (NVL(awb.spl_code1,edi_fbl_shp.SPL_CODE1) ||''|| decode(NVL(awb.spl_code2,edi_fbl_shp.SPL_CODE2), null, '', ','|| NVL(awb.spl_code2,edi_fbl_shp.SPL_CODE2))
      		||''|| decode(NVL(awb.spl_code3,edi_fbl_shp.SPL_CODE3), null, '', ','|| NVL(awb.spl_code3,edi_fbl_shp.SPL_CODE3))
      		||''|| decode(NVL(awb.spl_code4,edi_fbl_shp.SPL_CODE4), null, '', ','|| NVL(awb.spl_code4,edi_fbl_shp.SPL_CODE4))
      		||''|| decode(NVL(awb.spl_code5,edi_fbl_shp.SPL_CODE5), null, '', ','|| NVL(awb.spl_code5,edi_fbl_shp.SPL_CODE5))
      		||''|| decode(NVL(awb.spl_code6,edi_fbl_shp.SPL_CODE6), null, '', ','||NVL(awb.spl_code6,edi_fbl_shp.SPL_CODE6))
      		||''|| decode(NVL(awb.spl_code7,edi_fbl_shp.SPL_CODE7), null, '', ','|| NVL(awb.spl_code7,edi_fbl_shp.SPL_CODE7))
      		||''|| decode(NVL(awb.spl_code8,edi_fbl_shp.SPL_CODE8), null, '', ','|| NVL(awb.spl_code8,edi_fbl_shp.SPL_CODE8))
      		||''|| decode(awb.SPL_CODE9, null, '', ','|| awb.SPL_CODE9)) as shipmentDescCode,
       nvl(edi_fbl_shp.pcs,0) as qty,
       nvl(edi_fbl_shp.net_wt,0) as weightCode,      
      ffm.FLT_KEY,ddt.flt_key
	from 
       edi_fbl
       JOIN edi_fbl_shp ON  edi_fbl.TR_NO= edi_fbl_shp.TR_NO 
      and edi_fbl_shp.org!='HKG'                
       LEFT join awb on edi_fbl_shp.awb_no=awb.awb_no and awb.awb_date=edi_fbl_shp.awb_date
       LEFT JOIN
       (SELECT DISTINCT msg.flt_key,
		    msg.flt_date,		  
		    shp.awb_no,
        shp.awb_date,
		    trf.cntg_flt_key,
		    trf.cntg_flt_date,
		    trf.UNLDG_PT,
		    trf.TRF_TYPE,
		    trf.TRF_PC,
		    trf.TRF_WT
		  FROM ddt_msg msg,		   
		    ddt_shp shp ,
		    ddt_shp_trf_dtl trf
		  WHERE 
		   shp.tr_no       =msg.tr_no
		  AND trf.sdoc_line_no= shp.doc_line_no
		  AND trf.tr_no       =msg.tr_no
		  ) ddt  
      ON   edi_fbl.flt_key =ddt.cntg_flt_key and edi_fbl.flt_date=ddt.cntg_flt_DATE
     and ddt.awb_no= edi_fbl_shp.awb_no and ddt.awb_date=edi_fbl_shp.awb_date
     LEFT JOIN 
      (select  edi_ffm_msg.flt_key,edi_ffm_msg.flt_date,shp.dest,shp.awb_no,shp.awb_date from  
      edi_ffm_msg ,edi_ffm_shp shp
     where edi_ffm_msg.ffm_status='P' and edi_ffm_msg.tr_no=shp.tr_no and
     edi_ffm_msg.flt_date in (select max(edi_ffm_msg.flt_date)  from edi_ffm_msg ,edi_ffm_shp where  edi_ffm_msg.ffm_status='P' and edi_ffm_msg.tr_no=edi_ffm_shp.tr_no
       and edi_ffm_shp.awb_no =shp.awb_no and edi_ffm_shp.awb_date=shp.awb_date group by  edi_ffm_shp.awb_no, 
       edi_ffm_shp.awb_date)) ffm
     ON  edi_fbl_shp.awb_no= ffm.awb_no and edi_fbl_shp.awb_date=ffm.awb_date and ffm.dest!='HKG' 
	where 
        edi_fbl.flt_key =#fltKey#
        and edi_fbl.flt_date = TO_DATE(#fltDate#, 'DDMONYY')
        and edi_fbl.unldg_pt = #unLdgPoint#
        and edi_fbl.si_type in('S','I') and edi_fbl.fbl_status ='P'

	</select>	
	<select id="fetch_enq_transittarmac_details" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">
	select DISTINCT concat(concat(substr(edi_fbl_shp.awb_no,0,3),'-'),substr(edi_fbl_shp.awb_no,4))as awbNoDisplay,
       edi_fbl_shp.awb_no as awbNo,
       nvl(awb.orig,edi_fbl_shp.org) as origin,
       nvl(awb.dest,edi_fbl_shp.dest) as dest,
       (NVL(awb.spl_code1,edi_fbl_shp.SPL_CODE1) ||''|| decode(NVL(awb.spl_code2,edi_fbl_shp.SPL_CODE2), null, '', ','|| NVL(awb.spl_code2,edi_fbl_shp.SPL_CODE2))
      		||''|| decode(NVL(awb.spl_code3,edi_fbl_shp.SPL_CODE3), null, '', ','|| NVL(awb.spl_code3,edi_fbl_shp.SPL_CODE3))
      		||''|| decode(NVL(awb.spl_code4,edi_fbl_shp.SPL_CODE4), null, '', ','|| NVL(awb.spl_code4,edi_fbl_shp.SPL_CODE4))
      		||''|| decode(NVL(awb.spl_code5,edi_fbl_shp.SPL_CODE5), null, '', ','|| NVL(awb.spl_code5,edi_fbl_shp.SPL_CODE5))
      		||''|| decode(NVL(awb.spl_code6,edi_fbl_shp.SPL_CODE6), null, '', ','||NVL(awb.spl_code6,edi_fbl_shp.SPL_CODE6))
      		||''|| decode(NVL(awb.spl_code7,edi_fbl_shp.SPL_CODE7), null, '', ','|| NVL(awb.spl_code7,edi_fbl_shp.SPL_CODE7))
      		||''|| decode(NVL(awb.spl_code8,edi_fbl_shp.SPL_CODE8), null, '', ','|| NVL(awb.spl_code8,edi_fbl_shp.SPL_CODE8))
      		||''|| decode(awb.SPL_CODE9, null, '', ','|| awb.SPL_CODE9)) as shipmentDescCode,
       nvl(edi_fbl_shp.pcs,0) as qty,
       nvl(edi_fbl_shp.net_wt,0) as weightCode,      
      ffm.FLT_KEY,ddt.flt_key
	from 
       edi_fbl
       JOIN edi_fbl_shp ON  edi_fbl.TR_NO= edi_fbl_shp.TR_NO 
      and edi_fbl_shp.org!='HKG'                
       LEFT join awb on edi_fbl_shp.awb_no=awb.awb_no and awb.awb_date=edi_fbl_shp.awb_date
       LEFT JOIN
       (SELECT DISTINCT msg.flt_key,
		    msg.flt_date,		  
		    shp.awb_no,
        shp.awb_date,
		    trf.cntg_flt_key,
		    trf.cntg_flt_date,
		    trf.UNLDG_PT,
		    trf.TRF_TYPE,
		    trf.TRF_PC,
		    trf.TRF_WT
		  FROM ddt_msg msg,		   
		    ddt_shp shp ,
		    ddt_shp_trf_dtl trf
		  WHERE 
		   shp.tr_no       =msg.tr_no
		  AND trf.sdoc_line_no= shp.doc_line_no
		  AND trf.tr_no       =msg.tr_no
		  ) ddt  
      ON   edi_fbl.flt_key =ddt.cntg_flt_key and edi_fbl.flt_date=ddt.cntg_flt_DATE
     and ddt.awb_no= edi_fbl_shp.awb_no and ddt.awb_date=edi_fbl_shp.awb_date
     LEFT JOIN 
      (select  edi_ffm_msg.flt_key,edi_ffm_msg.flt_date,shp.dest,shp.awb_no,shp.awb_date from  
      edi_ffm_msg ,edi_ffm_shp shp
     where edi_ffm_msg.ffm_status='P' and edi_ffm_msg.tr_no=shp.tr_no and
     edi_ffm_msg.flt_date in (select max(edi_ffm_msg.flt_date)  from edi_ffm_msg ,edi_ffm_shp where  edi_ffm_msg.ffm_status='P' and edi_ffm_msg.tr_no=edi_ffm_shp.tr_no
       and edi_ffm_shp.awb_no =shp.awb_no and edi_ffm_shp.awb_date=shp.awb_date group by  edi_ffm_shp.awb_no, 
       edi_ffm_shp.awb_date)) ffm
     ON  edi_fbl_shp.awb_no= ffm.awb_no and edi_fbl_shp.awb_date=ffm.awb_date and ffm.dest!='HKG' 
	where 
        edi_fbl.flt_key =#fltKey#
        and edi_fbl.flt_date = TO_DATE(#fltDate#, 'DDMONYY')
        and edi_fbl.unldg_pt = #unLdgPoint#
        and edi_fbl.si_type in('S','I') and edi_fbl.fbl_status ='P'

	</select>	
	<select id="fetch_transit_qt_details" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	select DISTINCT concat(concat(substr(ddt.awb_no,0,3),'-'),substr(ddt.awb_no,4))as awbNoDisplay,
       ddt.awb_no as awbNo,
       awb.orig as origin,
       awb.dest as dest,
       (awb.spl_code1 ||''|| decode(awb.spl_code2, null, '', ','|| awb.spl_code2)
      		||''|| decode(awb.spl_code3, null, '', ','|| awb.spl_code3)
      		||''|| decode(awb.spl_code4, null, '', ','|| awb.spl_code4)
      		||''|| decode(awb.spl_code5, null, '', ','||  awb.spl_code5)
      		||''|| decode(awb.spl_code6, null, '', ','||awb.spl_code6)
      		||''|| decode(awb.spl_code7, null, '', ','|| awb.spl_code7)
      		||''|| decode(awb.spl_code8, null, '', ','|| awb.spl_code8)
      		||''|| decode(awb.spl_code9, null, '', ','|| awb.spl_code9)) as shipmentDescCode,
       nvl(ddt.TRF_PC,0) as qty,
       nvl(ddt.TRF_WT,0) as weightCode
      
   		from 
     (SELECT DISTINCT msg.flt_key,
		    msg.flt_date,		  
		    shp.awb_no,
        shp.awb_date,
		    trf.cntg_flt_key,
		    trf.cntg_flt_date,
		    trf.UNLDG_PT,
		    trf.TRF_TYPE,
		    trf.TRF_PC,
		    trf.TRF_WT
		  FROM ddt_msg msg,		   
		    ddt_shp shp ,
		    ddt_shp_trf_dtl trf
		  WHERE 
		   shp.tr_no       =msg.tr_no
		  AND trf.sdoc_line_no= shp.doc_line_no
		  AND trf.tr_no       =msg.tr_no
      ) ddt
      LEFT JOIN 
      (  select  edi_ffm_msg.flt_key,edi_ffm_msg.flt_date,edi_ffm_shp.awb_no,edi_ffm_shp.awb_date  from   edi_ffm_msg ,edi_ffm_shp
     where edi_ffm_msg.ffm_status='P' and edi_ffm_msg.tr_no=edi_ffm_shp.tr_no ) ffm
     ON ffm.flt_key=ddt.flt_key and ffm.flt_date=ddt.flt_date and ddt.awb_no= ffm.awb_no  and ddt.awb_date=ffm.awb_date
      LEFT join awb on DDT.awb_no=awb.awb_no and ddt.awb_date=awb.awb_date
       		where 
        ddt.cntg_flt_date=TO_DATE(#fltDate#, 'DDMONYY') and ddt.cntg_flt_key=#fltKey#
        AND ddt.UNLDG_PT=#unLdgPoint#
        and ddt.TRF_TYPE=#trtype#
	</select>	
	<select id="fetch_transittarmac_enq_details" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">
	select DISTINCT concat(concat(substr(ddt.awb_no,0,3),'-'),substr(ddt.awb_no,4))as awbNoDisplay,
       ddt.awb_no as awbNo,
       awb.orig as origin,
       awb.dest as dest,
       (awb.spl_code1 ||''|| decode(awb.spl_code2, null, '', ','|| awb.spl_code2)
      		||''|| decode(awb.spl_code3, null, '', ','|| awb.spl_code3)
      		||''|| decode(awb.spl_code4, null, '', ','|| awb.spl_code4)
      		||''|| decode(awb.spl_code5, null, '', ','||  awb.spl_code5)
      		||''|| decode(awb.spl_code6, null, '', ','||awb.spl_code6)
      		||''|| decode(awb.spl_code7, null, '', ','|| awb.spl_code7)
      		||''|| decode(awb.spl_code8, null, '', ','|| awb.spl_code8)
      		||''|| decode(awb.spl_code9, null, '', ','|| awb.spl_code9)) as shipmentDescCode,
       nvl(ddt.TRF_PC,0) as qty,
       nvl(ddt.TRF_WT,0) as weightCode
      
   		from 
     (SELECT DISTINCT msg.flt_key,
		    msg.flt_date,		  
		    shp.awb_no,
        shp.awb_date,
		    trf.cntg_flt_key,
		    trf.cntg_flt_date,
		    trf.UNLDG_PT,
		    trf.TRF_TYPE,
		    trf.TRF_PC,
		    trf.TRF_WT
		  FROM ddt_msg msg,		   
		    ddt_shp shp ,
		    ddt_shp_trf_dtl trf
		  WHERE 
		   shp.tr_no       =msg.tr_no
		  AND trf.sdoc_line_no= shp.doc_line_no
		  AND trf.tr_no       =msg.tr_no
      ) ddt
      LEFT JOIN 
      (  select  edi_ffm_msg.flt_key,edi_ffm_msg.flt_date,edi_ffm_shp.awb_no,edi_ffm_shp.awb_date  from   edi_ffm_msg ,edi_ffm_shp
     where edi_ffm_msg.ffm_status='P' and edi_ffm_msg.tr_no=edi_ffm_shp.tr_no ) ffm
     ON ffm.flt_key=ddt.flt_key and ffm.flt_date=ddt.flt_date and ddt.awb_no= ffm.awb_no  and ddt.awb_date=ffm.awb_date
      LEFT join awb on DDT.awb_no=awb.awb_no and ddt.awb_date=awb.awb_date
       		where 
        ddt.cntg_flt_date=TO_DATE(#fltDate#, 'DDMONYY') and ddt.cntg_flt_key=#fltKey#
        AND ddt.UNLDG_PT=#unLdgPoint#
        and ddt.TRF_TYPE=#trtype#
	</select>
	<select id="fetch_transit_cpct_details" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
		select elpallot.INSTRUCTION as instruction,'Y' as hardDelete,elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,
	    elpallot.QTY_PEB as qtyPEB,elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 ,
	    'Transit CPCT' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,
	    elpallot.WT as wt,elpallot.H5WT as h5Wt
		from  edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot 
		where elpmsg.TR_NO=elpport.tr_no and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO and  elpallot.CGO_TYPE='Transit' 
	    and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	  	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
		</isNotEmpty>
		
	    UNION ALL
	    
		select elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
		elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Transit HACTL' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
	    elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
		from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
		and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
		and  elpallot.CGO_TYPE='Transit HACTL' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
		<isNotEmpty property="trNo">
			AND elpmsg.TR_NO = #trNo#
		</isNotEmpty>
		
	</select>	
	<select id="fetch_tarmac_cpct_details" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
		select elpallot.INSTRUCTION as instruction,'Y' as hardDelete,elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,
	    elpallot.QTY_PEB as qtyPEB,elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 ,
	    'Tarmac CPCT' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,
	    elpallot.WT as wt,elpallot.H5WT as h5Wt
		from  edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot 
		where elpmsg.TR_NO=elpport.tr_no and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO and  elpallot.CGO_TYPE='Tarmac' 
	    and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	  	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
		</isNotEmpty>
		
	    UNION ALL
	    
		select elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
		elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Tarmac HACTL' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
	    elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
		from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
		and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
		and  elpallot.CGO_TYPE='Tarmac HACTL' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
		<isNotEmpty property="trNo">
			AND elpmsg.TR_NO = #trNo#
		</isNotEmpty>
	</select>	
	<select id="fetch_transit_summary_details" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
			SELECT
		  'FBL'                          AS summaryType,
		  NVL(SUM(edi_fbl_shp.pcs),0)    AS qty,
		  NVL(SUM(edi_fbl_shp.net_wt),0) AS weightCode,
		  NULL                           AS qtLoosePc,
		  NULL                           AS qtLooseWeight,
		  NULL                           AS fullUldAllot,
		  (DECODE(ROUND((NVL(SUM(edi_fbl_shp.net_wt),0)/
		  (SELECT to_number(CODE_DESC)
		  FROM MAST_CODE_DTL
		  WHERE CODE= 'FBL_ALLOT_P'
		  )),0),'0','',((ROUND((NVL(SUM(edi_fbl_shp.net_wt),0)/
		  (SELECT to_number(CODE_DESC)
		  FROM MAST_CODE_DTL
		  WHERE CODE= 'FBL_ALLOT_P'
		  )),0)||'P')))) estFblQuotient,
		  (DECODE(ROUND((MOD(NVL(SUM(edi_fbl_shp.net_wt),0),
		  (SELECT to_number(CODE_DESC) FROM MAST_CODE_DTL WHERE CODE= 'FBL_ALLOT_P'
		  )) /
		  (SELECT to_number(CODE_DESC) FROM MAST_CODE_DTL WHERE CODE= 'FBL_ALLOT_A'
		  )),0),'0','',((ROUND((MOD(NVL(SUM(edi_fbl_shp.net_wt),0),
		  (SELECT to_number(CODE_DESC) FROM MAST_CODE_DTL WHERE CODE= 'FBL_ALLOT_P'
		  )) /
		  (SELECT to_number(CODE_DESC) FROM MAST_CODE_DTL WHERE CODE= 'FBL_ALLOT_A'
		  )),0))))) estFblRemainder
			FROM edi_fbl
			INNER JOIN edi_fbl_shp
			ON edi_fbl.tr_no = edi_fbl_shp.tr_no  and edi_fbl_shp.org!='HKG'  
			LEFT JOIN awb
			ON edi_fbl_shp.awb_no=awb.awb_no
			AND awb.awb_date     =edi_fbl_shp.awb_date
             LEFT JOIN
       (SELECT DISTINCT msg.flt_key,
		    msg.flt_date,		  
		    shp.awb_no,
        shp.awb_date,
		    trf.cntg_flt_key,
		    trf.cntg_flt_date,
		    trf.UNLDG_PT,
		    trf.TRF_TYPE,
		    trf.TRF_PC,
		    trf.TRF_WT
		  FROM ddt_msg msg,		   
		    ddt_shp shp ,
		    ddt_shp_trf_dtl trf
		  WHERE 
		   shp.tr_no       =msg.tr_no
		  AND trf.sdoc_line_no= shp.doc_line_no
		  AND trf.tr_no       =msg.tr_no
		  ) ddt  
      ON   edi_fbl.flt_key=ddt.cntg_flt_key and edi_fbl.flt_date=ddt.cntg_flt_DATE
      and ddt.awb_no= edi_fbl_shp.awb_no and ddt.awb_date=edi_fbl_shp.awb_date
     ,
			 edi_elp_msg msg
			WHERE edi_fbl.flt_key    =#fltKey#
			AND edi_fbl.flt_date     = TO_DATE(#fltDate# , 'DDMONYY')
			AND edi_fbl_shp.unldg_pt =  #unLdgPoint#
			AND edi_fbl.si_type     IN('S','I')
			AND edi_fbl.fbl_status   ='P'
		AND edi_fbl.flt_key      =msg.flt_key
		AND edi_fbl.flt_date     = msg.flt_date
			AND edi_fbl.tr_no        = edi_fbl_shp.tr_no
		AND msg.tr_no           IN
			  (SELECT b.trNO
			 FROM
			   (SELECT rownum r,
			      a.trNo
			    FROM
			      (SELECT elpmsg.tr_no AS trNo
			      FROM edi_elp_msg elpmsg,
			        edi_fbl
			      where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
			      ORDER BY to_number(elpmsg.tr_no)  desc
			      )a
			    WHERE rownum &lt;=2
			    ) b
			  WHERE r=#rownum#
			  )
			 
			GROUP BY edi_fbl.flt_key,edi_fbl.flt_date,edi_fbl_shp.unldg_pt
			UNION
			SELECT 
        'DDT' AS summaryType,
        (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='QT') AS qty,
       (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='QT' ) AS weightCode,
        (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL ) AS qtLoosePc,
        (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL ) AS qtLooseWeight,
       (  SELECT STRAGG(STRINGDELIM((COUNT(SUBSTR(ULD_KEY,0,3)))
    		|| (SELECT  uld_allot  FROM MAST_ULD_ALLOT_GROUP a, uld_group_type c where a.uld_group = c.uld_group and c.uld_type=SUBSTR(ULD_KEY,0,3) AND ROWNUM=#rownum#) ,','))
          FROM V_DDT_DTL
          WHERE SHP_cntg_flt_date  =ddt.cntg_flt_date
          AND SHP_cntg_flt_key     =ddt.cntg_flt_key
          AND ddt.UNLDG_PT=SHP_UNLDG_PT
          AND SUBSTR(ULD_KEY,0,3) IS NOT NULL
          AND SHP_TRF_TYPE         ='QT'
          AND TRF_TYPE            IS NOT NULL 
          GROUP BY ULD_KEY) AS fullUldAllot,
       (decode(ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_P')),0),'0','',((ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_P')),0))||'P'))) estFblQuotient,
       (decode(ROUND((MOD((NVL((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL),0)),(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_P'))
        /(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_A')),0),'0','',((ROUND((MOD((NVL((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL),0)),(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_P'))
        /(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_A')),0))))) estFblRemainder
        from 
        (select  msg.flt_key,msg.flt_date,uld.uld_key,shp.awb_no,shp.awb_date, trf.cntg_flt_key,trf.cntg_flt_date,trf.UNLDG_PT,trf.TRF_TYPE,trf.TRF_PC,trf.TRF_WT 
        from ddt_msg msg,ddt_uld uld ,ddt_shp shp ,
        ddt_shp_trf_dtl trf
        where uld.tr_no= msg.tr_no and uld.doc_line_no=shp.udoc_line_no
        and shp.tr_no=msg.tr_no and trf.sdoc_line_no= shp.doc_line_no  and
        trf.tr_no=msg.tr_no) ddt
          ,
          edi_ffm_msg join edi_ffm_shp on edi_ffm_msg.tr_no=edi_ffm_shp.tr_no,
          edi_elp_msg msg
   	where 
   	 edi_ffm_msg.flt_key=ddt.flt_key
            and edi_ffm_msg.flt_date = ddt.flt_date and
        ddt.cntg_flt_date=TO_DATE(#fltDate#, 'DDMONYY') and ddt.cntg_flt_key=#fltKey#
        AND ddt.UNLDG_PT=#unLdgPoint#
        and ddt.TRF_TYPE='QT'
        and edi_ffm_msg.flt_key=ddt.flt_key and edi_ffm_msg.flt_date=ddt.flt_date
        and edi_ffm_shp.awb_no=ddt.awb_no
        AND ddt.cntg_flt_key   =msg.flt_key
        AND ddt.cntg_flt_date    = msg.flt_date
        and msg.tr_no in(SELECT b.trNO FROM 
        (SELECT rownum r, a.trNo  FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')  order by to_number(elpmsg.tr_no) desc)a
		                WHERE rownum &lt;=2) b WHERE r=#rownum#)
        AND edi_ffm_shp.awb_no=ddt.awb_no and edi_ffm_shp.awb_date=ddt.awb_date and edi_ffm_msg.ffm_status='P'
            
	</select>
	<select id="fetch_enq_transit_summary_details" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">
			SELECT
		  'FBL'                          AS summaryType,
		  NVL(SUM(edi_fbl_shp.pcs),0)    AS qty,
		  NVL(SUM(edi_fbl_shp.net_wt),0) AS weightCode,
		  NULL                           AS qtLoosePc,
		  NULL                           AS qtLooseWeight,
		  NULL                           AS fullUldAllot,
		  (DECODE(ROUND((NVL(SUM(edi_fbl_shp.net_wt),0)/
		  (SELECT to_number(CODE_DESC)
		  FROM MAST_CODE_DTL
		  WHERE CODE= 'FBL_ALLOT_P'
		  )),0),'0','',((ROUND((NVL(SUM(edi_fbl_shp.net_wt),0)/
		  (SELECT to_number(CODE_DESC)
		  FROM MAST_CODE_DTL
		  WHERE CODE= 'FBL_ALLOT_P'
		  )),0)||'P')))) estFblQuotient,
		  (DECODE(ROUND((MOD(NVL(SUM(edi_fbl_shp.net_wt),0),
		  (SELECT to_number(CODE_DESC) FROM MAST_CODE_DTL WHERE CODE= 'FBL_ALLOT_P'
		  )) /
		  (SELECT to_number(CODE_DESC) FROM MAST_CODE_DTL WHERE CODE= 'FBL_ALLOT_A'
		  )),0),'0','',((ROUND((MOD(NVL(SUM(edi_fbl_shp.net_wt),0),
		  (SELECT to_number(CODE_DESC) FROM MAST_CODE_DTL WHERE CODE= 'FBL_ALLOT_P'
		  )) /
		  (SELECT to_number(CODE_DESC) FROM MAST_CODE_DTL WHERE CODE= 'FBL_ALLOT_A'
		  )),0))))) estFblRemainder
			FROM edi_fbl
			INNER JOIN edi_fbl_shp
			ON edi_fbl.tr_no = edi_fbl_shp.tr_no  and edi_fbl_shp.org!='HKG'  
			LEFT JOIN awb
			ON edi_fbl_shp.awb_no=awb.awb_no
			AND awb.awb_date     =edi_fbl_shp.awb_date
             LEFT JOIN
       (SELECT DISTINCT msg.flt_key,
		    msg.flt_date,		  
		    shp.awb_no,
        shp.awb_date,
		    trf.cntg_flt_key,
		    trf.cntg_flt_date,
		    trf.UNLDG_PT,
		    trf.TRF_TYPE,
		    trf.TRF_PC,
		    trf.TRF_WT
		  FROM ddt_msg msg,		   
		    ddt_shp shp ,
		    ddt_shp_trf_dtl trf
		  WHERE 
		   shp.tr_no       =msg.tr_no
		  AND trf.sdoc_line_no= shp.doc_line_no
		  AND trf.tr_no       =msg.tr_no
		  ) ddt  
      ON   edi_fbl.flt_key=ddt.cntg_flt_key and edi_fbl.flt_date=ddt.cntg_flt_DATE
      and ddt.awb_no= edi_fbl_shp.awb_no and ddt.awb_date=edi_fbl_shp.awb_date
     ,
			 edi_elp_msg msg
			WHERE edi_fbl.flt_key    =#fltKey#
			AND edi_fbl.flt_date     = TO_DATE(#fltDate# , 'DDMONYY')
			AND edi_fbl_shp.unldg_pt =  #unLdgPoint#
			AND edi_fbl.si_type     IN('S','I')
			AND edi_fbl.fbl_status   ='P'
		AND edi_fbl.flt_key      =msg.flt_key
		AND edi_fbl.flt_date     = msg.flt_date
			AND edi_fbl.tr_no        = edi_fbl_shp.tr_no
		AND msg.tr_no           IN
			  (SELECT b.trNO
			 FROM
			   (SELECT rownum r,
			      a.trNo
			    FROM
			      (SELECT elpmsg.tr_no AS trNo
			      FROM edi_elp_msg elpmsg,
			        edi_fbl
			      where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
			      ORDER BY to_number(elpmsg.tr_no)  desc
			      )a
			    WHERE rownum &lt;=2
			    ) b
			  WHERE r=#rownum#
			  )
			 
			GROUP BY edi_fbl.flt_key,edi_fbl.flt_date,edi_fbl_shp.unldg_pt
			UNION
			SELECT 
        'DDT' AS summaryType,
        (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='QT') AS qty,
       (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='QT' ) AS weightCode,
        (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL ) AS qtLoosePc,
        (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL ) AS qtLooseWeight,
       (  SELECT STRAGG(STRINGDELIM((COUNT(SUBSTR(ULD_KEY,0,3)))
    		|| (SELECT  uld_allot  FROM MAST_ULD_ALLOT_GROUP a, uld_group_type c where a.uld_group = c.uld_group and c.uld_type=SUBSTR(ULD_KEY,0,3) AND ROWNUM=#rownum#) ,','))
          FROM V_DDT_DTL
          WHERE SHP_cntg_flt_date  =ddt.cntg_flt_date
          AND SHP_cntg_flt_key     =ddt.cntg_flt_key
          AND ddt.UNLDG_PT=SHP_UNLDG_PT
          AND SUBSTR(ULD_KEY,0,3) IS NOT NULL
          AND SHP_TRF_TYPE         ='QT'
          AND TRF_TYPE            IS NOT NULL 
          GROUP BY ULD_KEY) AS fullUldAllot,
       (decode(ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_P')),0),'0','',((ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_P')),0))||'P'))) estFblQuotient,
       (decode(ROUND((MOD((NVL((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL),0)),(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_P'))
        /(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_A')),0),'0','',((ROUND((MOD((NVL((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='QT' AND TRF_TYPE IS NULL),0)),(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_P'))
        /(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'QT_ALLOT_A')),0))))) estFblRemainder
        from 
        (select  msg.flt_key,msg.flt_date,uld.uld_key,shp.awb_no,shp.awb_date, trf.cntg_flt_key,trf.cntg_flt_date,trf.UNLDG_PT,trf.TRF_TYPE,trf.TRF_PC,trf.TRF_WT 
        from ddt_msg msg,ddt_uld uld ,ddt_shp shp ,
        ddt_shp_trf_dtl trf
        where uld.tr_no= msg.tr_no and uld.doc_line_no=shp.udoc_line_no
        and shp.tr_no=msg.tr_no and trf.sdoc_line_no= shp.doc_line_no  and
        trf.tr_no=msg.tr_no) ddt
          ,
          edi_ffm_msg join edi_ffm_shp on edi_ffm_msg.tr_no=edi_ffm_shp.tr_no,
          edi_elp_msg msg
   	where 
   	 edi_ffm_msg.flt_key=ddt.flt_key
            and edi_ffm_msg.flt_date = ddt.flt_date and
        ddt.cntg_flt_date=TO_DATE(#fltDate#, 'DDMONYY') and ddt.cntg_flt_key=#fltKey#
        AND ddt.UNLDG_PT=#unLdgPoint#
        and ddt.TRF_TYPE='QT'
        and edi_ffm_msg.flt_key=ddt.flt_key and edi_ffm_msg.flt_date=ddt.flt_date
        and edi_ffm_shp.awb_no=ddt.awb_no
        AND ddt.cntg_flt_key   =msg.flt_key
        AND ddt.cntg_flt_date    = msg.flt_date
        and msg.tr_no in(SELECT b.trNO FROM 
        (SELECT rownum r, a.trNo  FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')  order by to_number(elpmsg.tr_no) desc)a
		                WHERE rownum &lt;=2) b WHERE r=#rownum#)
        AND edi_ffm_shp.awb_no=ddt.awb_no and edi_ffm_shp.awb_date=ddt.awb_date and edi_ffm_msg.ffm_status='P'
            
	</select>
	<select id="fetch_handled_cto" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	   select EXP_LOCAL_PPK expLocPpkCTO,MAIL mailCTO,EXP_LOCAL_BU expLocBuCTO,COURIER couCTO,OPEN openCTO,EIC eicCTO from trn_setup a join  trn_setup_eload b on a.tr_no=b.tr_no 
	   where TO_DATE(#fltDate#, 'DDMONYY') BETWEEN PERIOD_FRM AND PERIOD_TO
	</select>
	<select id="fetch_tarmac_summary_details" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	  SELECT distinct 
        (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='TT'  ) AS ttPc,
      (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='TT' ) AS ttWeight,
       (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='TT'  AND TRF_TYPE IS NULL) AS ttLoosePc,
        (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key  and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='TT'  AND TRF_TYPE IS NULL) AS ttLooseWeight,
        (  SELECT STRAGG(STRINGDELIM((COUNT(SUBSTR(ULD_KEY,0,3)))
          || (SELECT  uld_allot  FROM MAST_ULD_ALLOT_GROUP a, uld_group_type c where a.uld_group = c.uld_group and c.uld_type=SUBSTR(ULD_KEY,0,3) AND ROWNUM=#rownum#) ,','))
          FROM V_DDT_DTL
          WHERE SHP_cntg_flt_date  =ddt.cntg_flt_date
          AND SHP_cntg_flt_key     =ddt.cntg_flt_key
          AND ddt.UNLDG_PT=SHP_UNLDG_PT
          AND SUBSTR(ULD_KEY,0,3) IS NOT NULL
          AND SHP_TRF_TYPE         ='TT'
         
          AND TRF_TYPE            IS NOT NULL
          GROUP BY ULD_KEY) AS ttfullUldAllot,
        (DECODE(ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='TT' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'TT_ALLOT')),0),'0','',((ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='TT' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'TT_ALLOT')),0))||'H5'))) AS ttestOutput,
       (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF') AS ifPc,
      (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF') AS ifWeight,
        (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key  and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF' AND TRF_TYPE IS NULL) AS ifLoosePc,
        (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key  and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF' AND TRF_TYPE IS NULL) AS ifLooseWeight,
        (  SELECT STRAGG(STRINGDELIM((COUNT(SUBSTR(ULD_KEY,0,3)))
          || (SELECT  uld_allot  FROM MAST_ULD_ALLOT_GROUP a, uld_group_type c where a.uld_group = c.uld_group and c.uld_type=SUBSTR(ULD_KEY,0,3) AND ROWNUM=#rownum#) ,','))
          FROM V_DDT_DTL
          WHERE SHP_cntg_flt_date  =ddt.cntg_flt_date
          AND SHP_cntg_flt_key     =ddt.cntg_flt_key
          AND ddt.UNLDG_PT=SHP_UNLDG_PT
        
          AND SUBSTR(ULD_KEY,0,3) IS NOT NULL
          AND SHP_TRF_TYPE         ='IF'
          AND TRF_TYPE            IS NOT NULL
          GROUP BY ULD_KEY) AS iffullUldAllot,
        (DECODE(ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'IF_ALLOT')),0),'0','',((ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'IF_ALLOT')),0))||'H5'))) AS ifestOutput
      FROM  edi_elp_msg msg,            
      edi_ffm_msg join edi_ffm_shp on edi_ffm_msg.tr_no=edi_ffm_shp.tr_no, 
      (select  msg.flt_key,msg.flt_date,uld.uld_key,shp.awb_no,shp.awb_date, trf.cntg_flt_key,trf.cntg_flt_date,trf.UNLDG_PT,trf.TRF_TYPE,trf.TRF_PC,trf.TRF_WT from ddt_msg msg,ddt_uld uld ,ddt_shp shp ,
        ddt_shp_trf_dtl trf
        where uld.tr_no= msg.tr_no and uld.doc_line_no=shp.udoc_line_no
        and shp.tr_no=msg.tr_no and trf.sdoc_line_no= shp.doc_line_no  and
        trf.tr_no=msg.tr_no) ddt 
            WHERE 
            edi_ffm_msg.flt_key =ddt.flt_key
            and edi_ffm_msg.flt_date = ddt.flt_date and
            ddt.cntg_flt_key    =#fltKey#
            AND ddt.cntg_flt_date     = TO_DATE(#fltDate#, 'DDMONYY')
            AND ddt.UNLDG_PT = #unLdgPoint#
            AND ddt.cntg_flt_key    =msg.flt_key
            AND ddt.cntg_flt_date     = msg.flt_date
            and msg.tr_no in(SELECT b.trNO FROM 
        (SELECT rownum r, a.trNo  FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')  order by to_number(elpmsg.tr_no) desc)a
		                WHERE rownum &lt;=2) b WHERE r=#rownum#)
      and edi_ffm_msg.ffm_status='P'
      AND edi_ffm_shp.awb_no=ddt.awb_no and edi_ffm_shp.awb_date=ddt.awb_date 
	</select>
	<select id="fetch_enq_tarmac_summary_details" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">
	  SELECT distinct 
        (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='TT'  ) AS ttPc,
      (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='TT' ) AS ttWeight,
       (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='TT'  AND TRF_TYPE IS NULL) AS ttLoosePc,
        (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key  and ddt.UNLDG_PT=SHP_UNLDG_PT
        and SHP_TRF_TYPE='TT'  AND TRF_TYPE IS NULL) AS ttLooseWeight,
        (  SELECT STRAGG(STRINGDELIM((COUNT(SUBSTR(ULD_KEY,0,3)))
          || (SELECT  uld_allot  FROM MAST_ULD_ALLOT_GROUP a, uld_group_type c where a.uld_group = c.uld_group and c.uld_type=SUBSTR(ULD_KEY,0,3) AND ROWNUM=#rownum#) ,','))
          FROM V_DDT_DTL
          WHERE SHP_cntg_flt_date  =ddt.cntg_flt_date
          AND SHP_cntg_flt_key     =ddt.cntg_flt_key
          AND ddt.UNLDG_PT=SHP_UNLDG_PT
          AND SUBSTR(ULD_KEY,0,3) IS NOT NULL
          AND SHP_TRF_TYPE         ='TT'
         
          AND TRF_TYPE            IS NOT NULL
          GROUP BY ULD_KEY) AS ttfullUldAllot,
        (DECODE(ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='TT' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'TT_ALLOT')),0),'0','',((ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='TT' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'TT_ALLOT')),0))||'H5'))) AS ttestOutput,
       (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF') AS ifPc,
      (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
        where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF') AS ifWeight,
        (select nvl(SUM(SHP_TRF_PC),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key  and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF' AND TRF_TYPE IS NULL) AS ifLoosePc,
        (select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
         SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key  and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF' AND TRF_TYPE IS NULL) AS ifLooseWeight,
        (  SELECT STRAGG(STRINGDELIM((COUNT(SUBSTR(ULD_KEY,0,3)))
          || (SELECT  uld_allot  FROM MAST_ULD_ALLOT_GROUP a, uld_group_type c where a.uld_group = c.uld_group and c.uld_type=SUBSTR(ULD_KEY,0,3) AND ROWNUM=#rownum#) ,','))
          FROM V_DDT_DTL
          WHERE SHP_cntg_flt_date  =ddt.cntg_flt_date
          AND SHP_cntg_flt_key     =ddt.cntg_flt_key
          AND ddt.UNLDG_PT=SHP_UNLDG_PT
        
          AND SUBSTR(ULD_KEY,0,3) IS NOT NULL
          AND SHP_TRF_TYPE         ='IF'
          AND TRF_TYPE            IS NOT NULL
          GROUP BY ULD_KEY) AS iffullUldAllot,
        (DECODE(ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'IF_ALLOT')),0),'0','',((ROUND((NVL(((select nvl(SUM(SHP_TRF_WT),0) from 
        V_DDT_DTL 
          where 
        SHP_cntg_flt_date=ddt.cntg_flt_date and SHP_cntg_flt_key=ddt.cntg_flt_key and ddt.UNLDG_PT=SHP_UNLDG_PT 
        and SHP_TRF_TYPE='IF' AND TRF_TYPE IS NULL)),0)/(SELECT to_number(CODE_DESC)  FROM MAST_CODE_DTL WHERE CODE= 'IF_ALLOT')),0))||'H5'))) AS ifestOutput
      FROM  edi_elp_msg msg,            
      edi_ffm_msg join edi_ffm_shp on edi_ffm_msg.tr_no=edi_ffm_shp.tr_no, 
      (select  msg.flt_key,msg.flt_date,uld.uld_key,shp.awb_no,shp.awb_date, trf.cntg_flt_key,trf.cntg_flt_date,trf.UNLDG_PT,trf.TRF_TYPE,trf.TRF_PC,trf.TRF_WT from ddt_msg msg,ddt_uld uld ,ddt_shp shp ,
        ddt_shp_trf_dtl trf
        where uld.tr_no= msg.tr_no and uld.doc_line_no=shp.udoc_line_no
        and shp.tr_no=msg.tr_no and trf.sdoc_line_no= shp.doc_line_no  and
        trf.tr_no=msg.tr_no) ddt 
            WHERE 
            edi_ffm_msg.flt_key =ddt.flt_key
            and edi_ffm_msg.flt_date = ddt.flt_date and
            ddt.cntg_flt_key    =#fltKey#
            AND ddt.cntg_flt_date     = TO_DATE(#fltDate#, 'DDMONYY')
            AND ddt.UNLDG_PT = #unLdgPoint#
            AND ddt.cntg_flt_key    =msg.flt_key
            AND ddt.cntg_flt_date     = msg.flt_date
            and msg.tr_no in(SELECT b.trNO FROM 
        (SELECT rownum r, a.trNo  FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')  order by to_number(elpmsg.tr_no) desc)a
		                WHERE rownum &lt;=2) b WHERE r=#rownum#)
      and edi_ffm_msg.ffm_status='P'
      AND edi_ffm_shp.awb_no=ddt.awb_no and edi_ffm_shp.awb_date=ddt.awb_date 
	</select>
	
   		
   	<update id="updateTrfInd" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO" >
 	  update edi_elp_msg set TR_TYPE = #trtype# , TRF_IND=#transferInd#,TRF_USER_ID=#transferUserId# , 	TRF_DATE=SYSDATE ,LM_USER_ID=#lmUserId# , LM_DATE=	SYSDATE where TR_NO=#trNo#
 	</update> 
 	<update id="updateFinalizeInd" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO" >
 	  update edi_elp_msg set TR_TYPE = #trtype# ,FINALIZE_IND=#finalizeInd#,FINALIZE_USER_ID=#finalizeUserId# , 	FINALIZE_DATE=SYSDATE ,LM_USER_ID=#lmUserId# , LM_DATE=	SYSDATE where TR_NO=#trNo#
 	</update>
 	<update id="updateFreezeInd" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO" >
 	  update flt_opr_events set ALLOT_FREEZE_IND = #freezeInd# , ALLOT_FREEZE_USER_ID=#freezeUserId# , ALLOT_FREEZE_DATE=	SYSDATE, TR_TYPE=#trtype# where flt_key=#fltKey# and sch_date=TO_DATE(#fltDate#, 'DDMONYY') and FLT_TYPE='D'
 	</update> 
 	<select id="fetch_edi_elp_allot_awb" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">   	
		select DOC_LINE_NO as awbDocLineNo,AWB_NO as awbNo,PCS as awbPcs,WT as awbWt,INSTRUCTION as awbInstruction,TR_NO as trNo,C_DOC_LINE_NO as docLineNo,
		substr(AWB_NO,0,3) as awbNoPfx,substr(AWB_NO,4) as awbNoSfx from edi_elp_allot_awb	where tr_no=#trNo#
   	</select>   	
   	
   	<select id="fetch_edi_elp_allot_uld" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">   	
		select DOC_LINE_NO as uldDocLineNo,ULD_KEY as uldKey,TR_NO as trNo,C_DOC_LINE_NO as docLineNo
		from edi_elp_allot_uld	where tr_no=#trNo#
   	</select> 
   	
   	<insert id="insert_edi_elp_allot_awb" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	 insert into edi_elp_allot_awb  (TR_NO, 	C_DOC_LINE_NO,	DOC_LINE_NO , 	AWB_NO , 	PCS , 	WT , 	INSTRUCTION, 	CR_USER_ID , 	CR_DATE , 	LM_USER_ID , 	LM_DATE  )values(#trNo#, 
	#docLineNo#, 	EDI_ELP_ALLOT_AWB_SEQ.NEXTVAL , 	#awbNo# , 	#awbPcs# , 	#awbWt# ,	#awbInstruction#, 	 	#crUserId# ,	SYSDATE , 	#lmUserId# , 	SYSDATE )
 	</insert>
   	<update id="update_edi_elp_allot_awb" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO" >
 	  update edi_elp_allot_awb set 	AWB_NO=#awbNo# , 	PCS =#awbPcs#, 	WT=	#awbWt#  , 	INSTRUCTION=#awbInstruction# ,LM_USER_ID=#lmUserId# , LM_DATE=	SYSDATE where DOC_LINE_NO=#awbDocLineNo#
 	</update>  	
 	<delete id="delete_edi_elp_allot_awb" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">		        	
	  delete from edi_elp_allot_awb where c_doc_line_no=#docLineNo#
    </delete>
    <insert id="insert_edi_elp_allot_uld" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	 insert into edi_elp_allot_uld  (TR_NO, 	C_DOC_LINE_NO,	DOC_LINE_NO , 	ULD_KEY, CR_USER_ID , 	CR_DATE , 	LM_USER_ID , 	LM_DATE  )values(#trNo#, 
	#docLineNo#, 	EDI_ELP_ALLOT_ULD_SEQ.NEXTVAL , 	#uldKey#, #crUserId# ,	SYSDATE , 	#lmUserId# , 	SYSDATE )
 	</insert>
   	<insert id="insert_flt_mov" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	 insert into FLT_MOV    ( 	FLT_TYPE , 	CARR_CODE , 	FLT_NO , 	FLT_DATE , 	FLT_KEY , RMK, 	TR_NO ,DOC_LINE_NO ,	TR_TYPE , 	TR_STATUS , 	CR_USER_ID , 	CR_DATE , 
	LM_USER_ID , 	LM_DATE, 	SEQ_NO , 	EVENT_ID    ) values('D',#carrCode#,#fltNo#,#fltDate#,#fltKey#,'EXP_FLIGHT_ALLOTMENT',#oprTrNo#,'1','FA','A',#crUserId# ,	SYSDATE , 	#lmUserId# , 	SYSDATE 
   ,FLT_MOV_SEQ.NEXTVAL,'FAF')
 	</insert>
 	<insert id="insert_edi_elp_summary" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
	 insert into EDI_ELP_SUMMARY    (	FLT_KEY, 	FLT_DATE, 	VER_NO , 	ALLOT_TYPE , 	SUMMARY, 	CR_USER_ID , 	CR_DATE ,	LM_USER_ID , 	LM_DATE ) values(#fltKey#,#fltDate#,#versionNo#,#allotType#,#summary#,#crUserId#,SYSDATE,#lmUserId#,SYSDATE)
 	</insert>
 	
 	
	<!-- Maintain Flight Allotment - End -->
	
	<!-- Queries for House Reconciliation starts -->
	<select id="getHouseReconUldList" parameterClass="cargo.cms.export.buildup.bo.HouseBUReconBO" resultClass="cargo.cms.export.buildup.bo.UldHouseBUReconBO" >
		select uld.uld_bt_no as uld,
	    (case when uaf.cnsl_awb = uaf.fhl_awb then 'Y'
	      else case when uaf.cnsl_awb = 0 then 'Y' else 'N'
	      end end) as fhlRecdInd,
	     (PKG_FLT.CHECK_HOUSE_BU_DIS(#fltNo#,#fltDate#,uld.uld_bt_no,null))as discrepency
	    from exp_pmanifest_uld uld 
	    left join (select count(a.awb_no) cnsl_awb, count(f.awb_no) fhl_awb,flt_key,flt_date,uld_bt_no 
	                from exp_pmanifest_uld_awb ua
	                join awb a on a.awb_no = ua.awb_no and a.awb_date = ua.awb_date
	                left join (select awb_no,awb_date from edi_fhl group by awb_no, awb_date) f on a.awb_no = f.awb_no and a.awb_date= f.awb_date
	                where a.cnsl_ind = 'Y'
	               group by flt_key, flt_date, uld_bt_no) uaf on uaf.flt_key = uld.flt_key and uaf.flt_date = uld.flt_date and uaf.uld_bt_no =uld.uld_bt_no
	    where uld.flt_key = #fltNo# and
	    uld.flt_date = to_date(#fltDate#,'DDMONYY')
	<dynamic prepend="ORDER BY ">
                         <isNotEmpty property="sortOrder.sortField">
                        $sortOrder.sortField$
                  </isNotEmpty>
            </dynamic>	
	</select>
<select id="getHouseReconUldListCOUNT"  parameterClass="cargo.cms.export.buildup.bo.HouseBUReconBO" resultClass="java.lang.Integer">
	   SELECT COUNT(1) AS totalRowCount FROM 
	      (
	      select uld.uld_bt_no as uld,
	    (case when uaf.cnsl_awb = uaf.fhl_awb then 'Y'
	      else case when uaf.cnsl_awb = 0 then 'Y' else 'N'
	      end end) as fhlRecdInd,
	     (PKG_FLT.CHECK_HOUSE_BU_DIS(#fltNo#,#fltDate#,uld.uld_bt_no,null))as discrepency
	    from exp_pmanifest_uld uld 
	    left join (select count(a.awb_no) cnsl_awb, count(f.awb_no) fhl_awb,flt_key,flt_date,uld_bt_no 
	                from exp_pmanifest_uld_awb ua
	                join awb a on a.awb_no = ua.awb_no and a.awb_date = ua.awb_date
	                left join (select awb_no,awb_date from edi_fhl group by awb_no, awb_date) f on a.awb_no = f.awb_no and a.awb_date= f.awb_date
	                where a.cnsl_ind = 'Y'
	               group by flt_key, flt_date, uld_bt_no) uaf on uaf.flt_key = uld.flt_key and uaf.flt_date = uld.flt_date and uaf.uld_bt_no =uld.uld_bt_no
	    where uld.flt_key = #fltNo# and
	    uld.flt_date = to_date(#fltDate#,'DDMONYY')
	      )
			
	</select>

	
	<select id="getHouseReconAwbListForUld" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AwbHouseBUReconBO" >
		  SELECT SUBSTR(a.awb_no, 0, 3) AS awbpfx  ,
	 	 SUBSTR(a.awb_no,4)           AS awbsfx  ,
	 	 a.awb_no AS awbNo,to_char(a.awb_date,'DDMONYY') as awbDate,
	  	nvl((select pcs from awb a1 where a1.awb_no = a.awb_no and a1.awb_date = a.awb_date),0)                 AS awbPc   ,
	  	nvl((select wt from awb a1 where a1.awb_no = a.awb_no and a1.awb_date = a.awb_date),0)                         AS awbWt   ,
	  	a.assigned_pcs               AS awbBUPc ,
	  	a.assigned_wt                AS awbBUWt ,
	 	 nvl((select sum(pc) from exp_pmanifest_uld_awb_hawb t1 where t1.tr_no = a.tr_no),0)                    AS hawbBUPc,
	 	 nvl((select sum(wt) from exp_pmanifest_uld_awb_hawb t1 where t1.tr_no = a.tr_no),0)                    AS hawbBUWt,
	 	 nvl((select sum(hawb_pcs) from edi_fhl fhl,edi_fhl_hawb fhlhawb
          		 where fhl.tr_no = fhlhawb.tr_no and fhl.awb_no = a.awb_no and fhl.awb_date = a.awb_date),0)  AS fhlPc   ,
	 	 nvl((select sum(hawb_net_wt) from edi_fhl fhl,edi_fhl_hawb fhlhawb
         		 where fhl.tr_no = fhlhawb.tr_no and fhl.awb_no = a.awb_no and fhl.awb_date = a.awb_date),0)  AS fhlWt   ,
	 	 a.UNLDG_PT AS dest,
	 	 a.tr_no as trNo,
	 	 (PKG_FLT.CHECK_HOUSE_BU_DIS(a.flt_key,a.flt_date,#uldKey#,a.awb_no)) as discrepency 	
	 	 FROM exp_pmanifest_uld_awb a
	 	 where a.uld_bt_no =#uldKey#
	
	</select>
	<!-- Changed for QR -->
	<select id="chkAwbForMixLoad" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
	select count(uld_bt_no) from  exp_pmanifest_uld_awb where awb_no= #awbNo# and awb_date=to_date(pkg_common.get_awb_date(#awbNo#, 'E'),'DDMONYY')
	</select>
	<!-- Changed for QR -->
	<select id="chkFhlRecdForAwb" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
	select count(1) from  edi_fhl where awb_no= #awbNo# and awb_date=to_date(pkg_common.get_awb_date(#awbNo#, 'E'),'DDMONYY')
	</select>
	<select id="chkFhlRecdForHouseAwb" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
	select count(1) from  edi_fhl_hawb where hawb_no = #hawbNo#
	</select>
 	<select id="getHouseReconHAwbListForAwb" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.HAwbHouseBUReconBO" >
	 select b.hawb_no as hawbNo,b.pc as oldPc,b.wt as oldWt,b.tr_no as trNo from  exp_pmanifest_uld_awb_hawb b 
	where b.tr_no= #trNo# 
	</select> 
	
	<select id="getHouseDtlsForAwbFromFHL" parameterClass="cargo.cms.export.buildup.bo.AwbHouseBUReconBO" resultClass="cargo.cms.export.buildup.bo.HAwbHouseBUReconBO" >
	select hawb.hawb_no as hawbNo,sum(hawb.HAWB_PCS) as fhlPc,sum(hawb.HAWB_NET_WT) as fhlWt,fhl.tr_no as trNo
	from  edi_fhl fhl,edi_fhl_hawb hawb where  fhl.tr_no = hawb.tr_no and
	fhl.awb_no = #awbNo# and 
	fhl.awb_date = TO_DATE(#awbDate#,'DDMONYY') 
	group by hawb.hawb_no, fhl.tr_no
	</select>
	
	<select id="getFhlPcWT" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" >
	select sum(hawb.HAWB_PCS) as fhlPcs,sum(hawb.HAWB_NET_WT) as fhlWt from  edi_fhl fhl,edi_fhl_hawb hawb where fhl.tr_no = hawb.tr_no
	AND hawb_no = #hAwbNo# and fhl.awb_no = #awbNo# and fhl.awb_date = TO_DATE(#awbDate#,'DDMONYY')
	</select>
	<select id="getOldPcWTForHAWB" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" >
	select pc as oldPc,wt as OLDWT from  exp_pmanifest_uld_awb_hawb where
	 hawb_no = #hAwbNo#  and tr_no = #trNo#
	</select>
	<!-- Changed for QR -->
	<select id="getBUPcWtOnOtherULD" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.HAwbHouseBUReconBO" >
		SELECT 	
      	b.hawb_no as hawbOtherUld,a.uld_bt_no as uldOtherUld,fhlhawb.hawb_pcs as fhlPcsOtherUld,fhlhawb.hawb_net_wt as fhlWtOtherUld,
    	(select sum(hawb.pc) from exp_pmanifest_uld_awb awb, exp_pmanifest_uld_awb_hawb hawb where awb.tr_no=hawb.tr_no and awb.awb_no=a.awb_no and hawb.hawb_no= b.hawb_no and awb.uld_bt_no not in(#uldKey#))  hawbBUPcOtherUld,
      	(select sum(hawb.wt) from exp_pmanifest_uld_awb awb, exp_pmanifest_uld_awb_hawb hawb where awb.tr_no=hawb.tr_no and awb.awb_no=a.awb_no and hawb.hawb_no= b.hawb_no and awb.uld_bt_no not in(#uldKey#))  hawbBUWtOtherUld  
	 	 FROM exp_pmanifest_uld_awb a, exp_pmanifest_uld_awb_hawb b,edi_fhl fhl,edi_fhl_hawb fhlhawb
      	where  a.tr_no=b.tr_no and fhl.tr_no = fhlhawb.tr_no and  fhl.awb_no = a.awb_no and fhl.awb_date = a.awb_date and fhlhawb.hawb_no=b.hawb_no
      	and a.awb_no=#awbNo# and a.uld_bt_no=#uldKey# and a.awb_date=to_date(pkg_common.get_awb_date(#awbNo#, 'E'))
      	</select>
	<select id="getHouseReconDiscrepencyForUld" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AwbHouseBUReconBO" >
	 select a.hawbBUPc as hawbBUPc1,a.hawbBUWt as hawbBUWt1,a.fhlPc as fhlPc1,a.fhlWt as fhlWt1 from (SELECT 	
      b.hawb_no,a.awb_no,
     sum(b.pc) as  hawbBUPc,
       sum( b.wt) as   hawbBUWt,
      hawb_pcs as fhlPc, 
      hawb_net_wt as fhlWt  
	 	  FROM exp_pmanifest_uld_awb a, exp_pmanifest_uld_awb_hawb b,edi_fhl fhl,edi_fhl_hawb fhlhawb
      where  a.tr_no=b.tr_no and fhl.tr_no = fhlhawb.tr_no and  fhl.awb_no = a.awb_no and fhl.awb_date = a.awb_date and fhlhawb.hawb_no=b.hawb_no
      group by b.hawb_no,a.awb_no,hawb_pcs,hawb_net_wt) a,exp_pmanifest_uld_awb b where a.awb_no= b.awb_no and b.uld_bt_no=#uldKey#
     </select>
     <select id="getTrnoInExpPmanUldAwb" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
     select tr_no from exp_pmanifest_uld_awb where flt_key=#fltKey# and flt_date=#fltDate# and awb_no=#awbNo# and awb_date=#awbDate# and uld_bt_no=#uldKey#
     </select>
	<delete id="deleteNonFhlHawb" parameterClass="map">
	delete from exp_pmanifest_uld_awb_hawb where tr_no=#trNo# and hawb_no = #hawbNo#
    </delete>
     <update id="updateHawbList" parameterClass="cargo.cms.export.buildup.bo.HAwbHouseBUReconBO" >
	UPDATE exp_pmanifest_uld_awb_hawb
	SET    PC = #newBuPc#,
		   WT = #newBUWt#,
		   LM_USER_ID  = #modifiedUserId#,
		   LM_DATE     = SYSDATE
	WHERE  tr_no=#trNo# and hawb_no = #hawbNo#
    </update>
    <select id="chkflightManifestFinalised" parameterClass="map" resultClass="java.lang.Integer">
       select COUNT(1) from flt_opr_events  where flt_type='D' and flt_key=#fltKey#
       and sch_date=to_date(#fltDate#,'ddmonyy') and FINAL_MANF_IND='Y'
	</select>
	<select id="chkULDInMixOrPrepack" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	  select count(1) from uld_inventory where (mix_ppk_ind = 'Y' or ppk_ind = 'Y') and uld_key=#uldKey#
	</select>
	<select id="chkPreConfPort" parameterClass="map" resultClass="java.lang.String">
	 SELECT DECODE(A,'N',B,A) FROM (
	SELECT
	(SELECT hse_bu_ind FROM FLT_OPR_LEG WHERE FLT_KEY = #fltKey# and sch_date = #fltDate# and off_point = #unladingPt# and flt_type='D') A,
	(SELECT decode(count(1),0,'N','Y') FROM mast_hse_bu_config WHERE (carr_code = #carr# AND PORT IS NULL) OR (CARR_CODE = #carr# and PORT = #unladingPt#)) AS B FROM DUAL)
	</select>
	<insert id="insertHawbList" parameterClass="cargo.cms.export.buildup.bo.HAwbHouseBUReconBO">
	insert into exp_pmanifest_uld_awb_hawb(tr_no,hawb_no,pc,wt,cr_user_id,cr_date,lm_user_id,lm_date)
	values (#trNo#,#hawbNo#,#newBuPc#,#newBUWt#,#createdUserId#,sysdate,#modifiedUserId#,sysdate)
 	</insert>
 	<select id="getNonFHLHouseDtlsForAwb" parameterClass="cargo.cms.export.buildup.bo.AwbHouseBUReconBO" resultClass="cargo.cms.export.buildup.bo.HAwbHouseBUReconBO" >
 	  select b.hawb_no as hawbNo,b.pc as oldPc,b.wt as oldWt,a.tr_no as trNo from exp_pmanifest_uld_awb a,exp_pmanifest_uld_awb_hawb b where
                a.tr_no = b.tr_no and
                b.tr_no=#trNo# and b.hawb_no not in (select hawb.hawb_no from edi_fhl fhl,edi_fhl_hawb hawb where  fhl.tr_no = hawb.tr_no and
                fhl.awb_no = a.awb_no and fhl.awb_date = a.awb_date)
	</select>
<!-- Queries for House Reconciliation Ends -->

<!-- ################### Flight Custom Out   : Start  ###########-->	
	
	<select id="getCarrierConfigToSemdMSG" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.FlightCustomBO">
		select send_out_ffm as sendFFM, send_out_fhl as sendFHL, send_out_fwb as sendFWB from mast_carrier where code = #fltPfx#
	</select>
	
	<select id="sqlvalidflightcustomout" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.FlightCustomBO">	
	SELECT b.tr_no as trNO,a.FLT_KEY as fltKey,to_char(a.SCH_DATE,'DDMONYY') as fltDate,
			PKG_COMMON.get_flt_eta(a.flt_key, a.SCH_DATE, 'D') as etd,
			to_char(EST_DATE,'DDMONYY') as fltEstDate,
			a.CARR_CODE as fltPfx,
			a.FLT_NO as fltSfx,
			flt_cls_yn as fltCloseYN,
			BUILDUP_CDATE as buildupDate,
			DLS_IND as dlsIND,
			FINAL_MANF_IND as finalManfInd,
			GROUND_HANDLER as gha,
			CTM_OUT_DATE as ctm_out_date,
			CTM_OUT_TIME as ctm_out_time,
			a.ORIG fltOrig,
			a.DEST fltDest
		from flt_opr a, flt_opr_events b
		WHERE a.tr_no = b.tr_no 
			AND b.flt_type='D' 
			AND a.flt_key = #fltNo#
			AND a.sch_date = #fltDate#
	</select>
	<select id="checkForNilCargo" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="java.lang.Integer">	
		SELECT COUNT(1) 
		FROM EXP_PMANIFEST_AWB PA, AWB A
		WHERE
			FLT_KEY = 	#fltNo#
			AND FLT_DATE = to_date(#fltDate#,'DDMONYY') AND PA.awb_no = A.awb_no and PA.awb_date = A.awb_date 
			AND FUN_VALIDATE_AWB(PA.AWB_NO, A.carr_code,'A') not in ('N','C')
	</select>
	<parameterMap id="params_sqlFltCustOut" class="map" >
		<parameter property="p_flt_key"			jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="p_flt_date"		jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="p_total_ships"					jdbcType="VARCHAR"	javaType="java.lang.String"	
				mode="OUT"/>
		<parameter property="p_total_comp_fwb"				jdbcType="VARCHAR"	javaType="java.lang.String"	
				mode="OUT"/>
		<parameter property="p_total_consol_ships"			jdbcType="VARCHAR"	javaType="java.lang.String"	
				mode="OUT"/>
		<parameter property="p_total_consol_ships_w_fhl"	jdbcType="VARCHAR"	javaType="java.lang.String"	
				mode="OUT"/>
		<parameter property="p_total_consol_ships_wo_fhl"	jdbcType="VARCHAR"	javaType="java.lang.String"	
				mode="OUT"/>
	</parameterMap>

	<procedure id="sqlFltCustOut" parameterMap="params_sqlFltCustOut" >
		{call pkg_exp_val.get_customout_ship_total(?,?,?,?,?,?,?)  }
	</procedure>

	<select id="sqlflightcustomoutawbdetails" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">	
		SELECT T2.AWB_NO as awbNo,
			CONCAT(CONCAT(SUBSTR(T2.AWB_NO,0,3),'-'),SUBSTR(T2.AWB_NO,4)) as awbNoDisplay,
			to_char(T2.AWB_DATE,'DDMONYY') as awbDate,DEST as dest
		FROM EXP_PMANIFEST_AWB T1,AWB T2
		WHERE FLT_KEY=#fltNo#
			AND FLT_DATE =#fltDate#
			AND T1.AWB_NO = T2.AWB_NO
			AND T1.AWB_DATE = T2.AWB_DATE
			AND FUN_VALIDATE_AWB(T1.AWB_NO,T2.carr_code,'A') not in ('N','C')
			<!-- AND T2.AWB_CLOSED_YN='N'-->
	</select>
	<!-- Changed for QR
	<select id="fetchAddressListForFFMByCC" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.SitaAddressBO">			
			SELECT B.SITA_ADDR AS sitaAddress FROM CUST_AIRL_SITA_CIMP_MSG A, CUST_AIRL_SITA_CIMP_DTL B
			WHERE A.TR_NO = B.TR_NO AND A.MSG_TYPE = 'FFM'
			  AND A.CARR_CODE = DECODE(#flightKey#,'ZZZ99999',#fltPfx#,A.CARR_CODE) AND A.FLT_KEY=#flightKey#
	</select>
	 -->
	
	<select id="fetchAddressListForFFMByCC" parameterClass="map" resultClass="cargo.cms.export.bo.SitaAddressBO">			
			SELECT SITA_ADDR as sitaAddress	
			  FROM CUST_AIRL_SITA_ADDR 
			 WHERE
				CUST_NO = (SELECT code FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND AIRLINE_YN = 'Y' 
				AND BLACKLISTED='N' And Active = 'Y' And Carr_Code = #carrierCode# AND CARR_CODE IS NOT NULL AND ROWNUM = 1)
	      		AND TYPE = #contactType#			
	</select>
	
	
	<select id="fetchFCOSITAAddressListByPORT" parameterClass="map" resultClass="cargo.cms.export.bo.SitaAddressBO">			
			SELECT SITA_ADDR as sitaAddress	,port as fcoPort
			  FROM CUST_AIRL_SITA_ADDR 
			 WHERE
				CUST_NO = (SELECT code FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND AIRLINE_YN = 'Y' 
				AND BLACKLISTED='N' And Active = 'Y' And Carr_Code = #carrierCode# AND CARR_CODE IS NOT NULL AND ROWNUM = 1)
	      		AND TYPE = #contactType# AND ADDR_TYPE = 'SITA' and PORT = #port#	 	
	</select>
	
	<select id="fetchFCOSITAAddressListByNOPORT" parameterClass="map" resultClass="cargo.cms.export.bo.SitaAddressBO">			
			SELECT SITA_ADDR as sitaAddress	, port as fcoPort
			  FROM CUST_AIRL_SITA_ADDR 
			 WHERE
				CUST_NO = (SELECT code FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND AIRLINE_YN = 'Y' 
				AND BLACKLISTED='N' And Active = 'Y' And Carr_Code = #carrierCode# AND CARR_CODE IS NOT NULL AND ROWNUM = 1)
	      		AND TYPE = #contactType# AND ADDR_TYPE = 'SITA' and PORT is null	 	
	</select>
	
	<select id="fetchFCOEMAILAddressListByPORT" parameterClass="map" resultClass="cargo.cms.export.bo.SitaAddressBO">			
			SELECT SITA_ADDR as emailAddress ,port as fcoPort
			  FROM CUST_AIRL_SITA_ADDR 
			 WHERE
				CUST_NO = (SELECT code FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND AIRLINE_YN = 'Y' 
				AND BLACKLISTED='N' And Active = 'Y' And Carr_Code = #carrierCode# AND CARR_CODE IS NOT NULL AND ROWNUM = 1)
	      		AND TYPE = #contactType# AND ADDR_TYPE = 'EMAIL' and PORT = #port#	 	
	</select>

	<select id="getSubFltList" parameterClass="map" resultClass="cargo.cms.common.ext.bo.EDIOutboundMsgLogBO">			
	SELECT arln.carr_code as vesselFltCar,ARLN.FLT_KEY as vesselFltKey FROM FLT_OPR_EVENTS EVENT,FLT_OPR_AIRLINE ARLN WHERE ARLN.TR_NO = EVENT.TR_NO AND EVENT.FLT_KEY=#fltKey# AND EVENT.SCH_DATE=#fltDate#
	</select>
	
	<select id="fetchFCOEMAILAddressListByNOPORT" parameterClass="map" resultClass="cargo.cms.export.bo.SitaAddressBO">			
			SELECT SITA_ADDR as emailAddress	, port as fcoPort
			  FROM CUST_AIRL_SITA_ADDR 
			 WHERE
				CUST_NO = (SELECT code FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND AIRLINE_YN = 'Y' 
				AND BLACKLISTED='N' And Active = 'Y' And Carr_Code = #carrierCode# AND CARR_CODE IS NOT NULL AND ROWNUM = 1)
	      		AND TYPE = #contactType# AND ADDR_TYPE = 'EMAIL' and PORT is null	 	
	</select>
	
	<select id="fetchFCOFAXAddressListByPORT" parameterClass="map" resultClass="cargo.cms.export.bo.SitaAddressBO">			
			SELECT SITA_ADDR as faxAddress	, port as fcoPort
			  FROM CUST_AIRL_SITA_ADDR 
			 WHERE
				CUST_NO = (SELECT code FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND AIRLINE_YN = 'Y' 
				AND BLACKLISTED='N' And Active = 'Y' And Carr_Code = #carrierCode# AND CARR_CODE IS NOT NULL AND ROWNUM = 1)
	      		AND TYPE = #contactType# AND ADDR_TYPE = 'FAX' and  PORT = #port#		 	
	</select>
	
	<select id="fetchFCOFAXAddressListByNOPORT" parameterClass="map" resultClass="cargo.cms.export.bo.SitaAddressBO">			
			SELECT SITA_ADDR as faxAddress	,port as fcoPort
			  FROM CUST_AIRL_SITA_ADDR 
			 WHERE
				CUST_NO = (SELECT code FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND AIRLINE_YN = 'Y' 
				AND BLACKLISTED='N' And Active = 'Y' And Carr_Code = #carrierCode# AND CARR_CODE IS NOT NULL AND ROWNUM = 1)
	      		AND TYPE = #contactType# AND ADDR_TYPE = 'FAX' and PORT is null 	
	</select>
	
	
	
	<select id="getCountForHouseBUConfigFlight"  parameterClass="map" resultClass="java.lang.Integer">
			select count(*) from flt_opr_leg where flt_key=#FLT_KEY# and sch_date=#FLT_DATE# and off_point = #OFF_POINT# and HSE_BU_IND = 'Y'	
	</select>
	<select id="getCountForHouseBUConfig"  parameterClass="map" resultClass="java.lang.Integer">
			select count (*) 
				from exp_pmanifest_uld_awb pua
				join awb a on pua.awb_no=a.awb_no and pua.awb_date =a.awb_date
				join uld_inventory ui on pua.uld_bt_no = ui.uld_key and pua.flt_key = ui.flt_key and pua.flt_date=ui.flt_date
				left join exp_pmanifest_uld_awb_hawb puah on pua.tr_no=puah.tr_no
				where a.cnsl_ind = 'Y' and  puah.hawb_no is null
				and pua.flt_key=#FLT_KEY# and pua.flt_date=#FLT_DATE# and pua.UNLDG_PT = #OFF_POINT#
				and not (ui.transit_flg='Y' and ui.handling_mode in ('PPK','NBK'))
	</select>
		
	<select id="getDefalutSitaAddressSCM" parameterClass="map" resultClass="cargo.cms.uld.bo.GenerateScmBO">			
			SELECT SITA_ADDR as sitaAddress	
			  FROM CUST_AIRL_SITA_ADDR 
			 WHERE
				CUST_NO = (SELECT code FROM CUST_COMPANY WHERE ACTIVE = 'Y' AND AIRLINE_YN = 'Y' 
				AND BLACKLISTED='N' And Active = 'Y' And Carr_Code = #carrierCode# AND CARR_CODE IS NOT NULL AND ROWNUM = 1)
	      		AND TYPE = #contactType#			
	</select>
	
	<select id="validateflightAddressGroup"  parameterClass="map" resultClass="java.lang.String">
		SELECT A.CUST_NO AS CUST_NO FROM CUST_AIRL_SITA_GRP A, CUST_COMPANY B
			WHERE
				A.ADDR_GROUP = UPPER(#addressGroup#) AND
				A.CUST_NO = B.CODE 
				<isNotEmpty prepend="AND" property="carrierCode">
					B.CARR_CODE = #carrierCode#
				</isNotEmpty>			
	</select>
	<select id="getSitaAddressForflightFormat"  parameterClass="map" resultClass="cargo.cms.export.bo.SitaAddressBO">
		SELECT SITA_ADDR AS sitaAddress FROM CUST_AIRL_SITA_GRPDTL
		WHERE
			CUST_NO = #customerId# AND
			ADDR_GROUP = UPPER(#addressGroup#)
		ORDER BY SITA_ADDR
	</select>
	<select id="getEmailFaxAddressForCreateflightFormat"  parameterClass="map" resultClass="cargo.cms.export.bo.FlightCustomBO">
		SELECT EMAIL1 AS emailAddr1, EMAIL2 AS emailAddr2, EMAIL3 AS emailAddr3, 
			EMAIL4 AS emailAddr4, EMAIL5 AS emailAddr5, FAX1 AS faxNo1, 
			FAX2 AS faxNo2, FAX3 AS faxNo3, FAX4 AS faxNo4, FAX5 AS faxNo5 
		FROM CUST_CONTACT
		WHERE
			CUST_NO = #customerId# AND
			CONTACT_TYPE = #contactType#
	</select>
	
	<select id="getContactInfoForFlightCustomOut"  parameterClass="map" resultClass="cargo.cms.export.bo.FlightCustomBO">
		SELECT EMAIL1 AS emailAddr1, EMAIL2 AS emailAddr2, EMAIL3 AS emailAddr3, 
				EMAIL4 AS emailAddr4, EMAIL5 AS emailAddr5, FAX1 AS faxNo1, 
				FAX2 AS faxNo2, FAX3 AS faxNo3, FAX4 AS faxNo4, FAX5 AS faxNo5 
			FROM CUST_CONTACT
			Where
				CUST_NO = (SELECT code FROM CUST_COMPANY WHERE ACTIVE   = 'Y' AND AIRLINE_YN = 'Y' 
				AND BLACKLISTED='N' And Active = 'Y' And Carr_Code = #carrierCode# AND CARR_CODE IS NOT NULL AND ROWNUM = 1)
	      AND CONTACT_TYPE = #contactType#
    </select>
    
	<!-- Changed for QR -->
	<select id="fetchAddressListForFSUByCC" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.SitaAddressBO">			
			SELECT B.SITA_ADDR AS sitaAddress FROM CUST_AIRL_SITA_CIMP_MSG A, CUST_AIRL_SITA_CIMP_DTL B
			WHERE A.TR_NO = B.TR_NO AND A.MSG_TYPE = #msgType#
			  AND A.CARR_CODE = DECODE(#flightKey#,'ZZZ99999',#fltPfx#,A.CARR_CODE) AND A.FLT_KEY=#flightKey#
	</select>
	<select id="getAWBDetailsfltCusOutFSU" resultClass="cargo.cms.export.bo.FlightCustomBO" parameterClass="cargo.cms.export.bo.FlightCustomBO">			
		SELECT 
			 PA.AWB_NO AS awbNo,
			 TO_CHAR(PA.AWB_DATE,'DDMONYY') AS awbDate,
			 SUM(PA.PMAN_PCS) AS Pcs
		FROM
			EXP_PMANIFEST_AWB PA,AWB A
		WHERE
				 FLT_KEY = #fltKey#
			 AND FLT_DATE = #fltDate# AND PA.awb_no = A.awb_no and PA.awb_date = A.awb_date 
			 AND FUN_VALIDATE_AWB(PA.AWB_NO, A.carr_code,'A') not in ('N','C')
		GROUP BY PA.AWB_NO, TO_CHAR(PA.AWB_DATE,'DDMONYY')
		UNION ALL
    	SELECT 
			 PA.AWB_NO AS awbNo,
			 TO_CHAR(PA.AWB_DATE,'DDMONYY') AS awbDate,
       NVL(SUM(PA.BULK_PCS),0) + NVL(SUM(PA.PPK_PCS),0) AS Pcs
		FROM
			EXP_PMAN_TARMAC_AWB PA,AWB A
		WHERE
				 FLT_KEY = #fltKey#
			 AND FLT_DATE = #fltDate# AND PA.awb_no = A.awb_no and PA.awb_date = A.awb_date 
			 AND FUN_VALIDATE_AWB(PA.AWB_NO,A.carr_code,'A') not in ('N','C')
		GROUP BY PA.AWB_NO, PA.AWB_DATE
	</select>
	
   	<select id="select_customout_shpm_header" parameterClass="cargo.cms.export.bo.FlightCustomBO" resultClass="cargo.cms.export.bo.FlightCustomBO">	
		   select PKG_COMMON.get_flt_sta(#fltKey#, #fltDate#, 'D', 'DD') std, 
	      PKG_COMMON.get_flt_eta(#fltKey#, TO_DATE(#fltDate#,'DDMONYY'), 'D', 'DD') etd,					 
	   	   PKG_COMMON.get_flt_ata(#fltKey#, TO_DATE(#fltDate#, 'DDMONYY'), 'D', 'DD') atd, 
	       to_char(ctm_out_date, 'DDMONYY') ctm_out_date, to_char(ctm_out_date, 'HH24:MI') ctm_out_time 
		from   flt_opr t1, flt_opr_events t2
		where  t1.flt_key = t2.flt_key
		and    t1.sch_date = t2.sch_date
		and    t1.flt_type = t2.flt_type
		and    t1.flt_key = #fltKey#
		and    t1.sch_date = to_date(#fltDate#,'DDMONYY')
		and    t1.flt_type = 'D'
	</select>
	<!-- Changed for QR -->
	<select id="select_customout_shpm_fwb" parameterClass="cargo.cms.export.bo.FlightCustomBO" resultClass="cargo.cms.export.bo.FlightCustomBO">	
		select t1.awb_no as awbNo, 
		concat(concat(substr(t1.awb_no, 0, 3), '-'), substr(t1.awb_no, 4)) as awbNoDisplay,	 
		t2.content as awbContant
		from   exp_pmanifest_awb t1, exp_car t2
		where  t1.awb_no = t2.awb_no
		and    t1.awb_date = t2.awb_date
		and    t1.flt_key = #fltKey#
		and    t1.flt_date = to_date(#fltDate#,'DDMONYY')
		AND FUN_VALIDATE_AWB(T1.AWB_NO,(select carr_code from awb where awb_no = T2.AWB_NO and awb_date = T2.AWB_DATE ),'A') not in ('N','C')
		and  not exists (select null
		                   from   edi_fwb
		                   where  awb_no = t1.awb_no and awb_date=t1.awb_date)
		union all
		select t1.awb_no as awbNo, 
		concat(concat(substr(t1.awb_no, 0, 3), '-'), substr(t1.awb_no, 4)) as awbNoDisplay,	
		t2.content as awbContant
		from   exp_pman_tarmac_awb t1, exp_car t2
		where  t1.awb_no = t2.awb_no
		and    t1.awb_date = t2.awb_date
		and    t1.flt_key = #fltKey#
		and    t1.flt_date = to_date(#fltDate#,'DDMONYY')
		AND    FUN_VALIDATE_AWB(T1.AWB_NO, SUBSTR(T1.FLT_KEY,1,2),'A') not in ('N','C')
		and    not exists (select null
		                   from   edi_fwb
		                   where  awb_no = t1.awb_no and awb_date=t1.awb_date)
		and    not exists (select null
		                   from   exp_pmanifest_awb
		                   where  awb_no = t1.awb_no and awb_date=t1.awb_date and flt_key=#fltKey# and flt_date=to_date(#fltDate#,'DDMONYY')) 		                
	</select>
	<!-- Changed for QR -->
	<select id="select_customout_shpm_fhl" parameterClass="cargo.cms.export.bo.FlightCustomBO" resultClass="cargo.cms.export.bo.FlightCustomBO">	
		select t1.awb_no as awbNo, 
		concat(concat(substr(t1.awb_no, 0, 3), '-'), substr(t1.awb_no, 4)) as awbNoDisplay,	
		t2.content as awbContant
		from   exp_pmanifest_awb t1, exp_car t2
		where  t1.awb_no = t2.awb_no
		and    t1.awb_date = t2.awb_date
		and    t1.flt_key = #fltKey#
		and    t1.flt_date = to_date(#fltDate#,'DDMONYY')
		AND    FUN_VALIDATE_AWB(T1.AWB_NO,(select carr_code from awb where awb_no = T2.AWB_NO and awb_date = T2.AWB_DATE ),'A') not in ('N','C')
		and    pkg_exp_val.content_consol_yn(t2.content) = 'Y' 
		and    not exists (select null
		                   from   v_edi_fhl_hawb
		                   where  awb_no = t1.awb_no and awb_date=t1.awb_date)
		union all
		select t1.awb_no as awbNo, 
		concat(concat(substr(t1.awb_no, 0, 3), '-'), substr(t1.awb_no, 4)) as awbNoDisplay,	
		t2.content as awbContant
		from   exp_pman_tarmac_awb t1, exp_car t2
		where  t1.awb_no = t2.awb_no
		and    t1.awb_date = t2.awb_date
		and    t1.flt_key = #fltKey#
		and    t1.flt_date = to_date(#fltDate#,'DDMONYY')
		AND    FUN_VALIDATE_AWB(T1.AWB_NO, SUBSTR(T1.FLT_KEY,1,2),'A') not in ('N','C')
		and    pkg_exp_val.content_consol_yn(t2.content) = 'Y' 
		and    not exists (select null
		                   from   v_edi_fhl_hawb
		                   where  awb_no = t1.awb_no and awb_date=t1.awb_date)
		and    not exists (select null
		                   from   exp_pmanifest_awb
		                   where  awb_no = t1.awb_no and awb_date=t1.awb_date and flt_key=#fltKey# and flt_date=to_date(#fltDate#,'DDMONYY')) 
	</select>
	<!-- TO INSERT FFM RECORD FROM FLIGHT_CUSTOM_OUT -->
	<select id="get_premanifest_list" parameterClass="cargo.cms.export.bo.FlightCustomBO" resultClass="cargo.cms.export.bo.AWBBO">
			  SELECT pman.AWB_NO as awbNo, TO_CHAR(pman.AWB_DATE,'DDMONYY') as awbDate	
  				FROM EXP_PMANIFEST_AWB pman
  				inner join exp_car car 	on pman.AWB_NO = car.awb_no and PMAN.AWB_DATE = car.awb_date
  				inner join awb a 	on pman.AWB_NO = a.awb_no and PMAN.AWB_DATE = a.awb_date
  				WHERE pman.AWB_NO not in (select awb_no from edi_fwb  where awb_no = pman.AWB_NO and AWB_DATE = pman.AWB_DATE ) 
  				and pman.FLT_KEY = #fltKey#	AND pman.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
  				AND FUN_VALIDATE_AWB(pman.AWB_NO,a.carr_code,'A') not in ('N','C')
	</select>
	
	
	<select id="getOtherRateCharges" parameterClass="map" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT 
			ITM_CODE    AS	chargeCode,
			PREPAID_AMT AS	prepaidAmount,
			COLLECT_AMT AS	collectAmount
		FROM EXP_AWB_REV_CHARGES
		WHERE AWB_NO	=	#AWB_NO#
		AND AWB_DATE =  to_date(#AWB_DATE#,'DDMONYY') and TO_NUMBER(length(itm_code),99) = 2
	</select>
	
	<select id="getCarDetailsToSendFFM" parameterClass="map" resultClass="cargo.cms.export.bo.ExpCarBO">
		  SELECT
		  AWB_NO AS awb,
		  TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate,
		  DIRECT_SHIPPER AS directShipper,
		  SLAC                AS slac,
		  HANDLER_CODE        AS handlerCode,
		  CATALOG             AS catalog,
		  CARR_CODE           AS carrCode,
		  TRNS_CARR_CODE      AS trnsCarrCode,
		  ORIGIN              AS origin,
		  DEST                AS dest,
		  PCS                 AS pcs,
		  WT                  AS wt,
		  CONTENT             AS content,
		  SHPR_NAME           AS shprName,
		  AGENT_NAME          AS agentName,
		  SPL_CODE1           AS splCode1,
		  SPL_CODE2           AS splCode2,
		  SPL_CODE3           AS splCode3,
		  SPL_CODE4           AS splCode4,
		  SPL_CODE5           AS splCode5,
		  SPL_CODE6           AS splCode6,
		  SPL_CODE7           AS splCode7,
		  SPL_CODE8           AS splCode8,
		  SPL_CODE9           AS splCode9,
		  RMK                 AS remarks,
		  SECURITY_OPTION     AS securityOption,
		  EXEMPTION_CODE      AS exemptionCode,
		  SEC_RMK             AS secRemarks,
		  SEC_RC_CODE         AS raNo,
		  SEC_KC_CODE         AS kcNo,
		  LOCK_IND            AS awbLock,
		  AIRL_RMK            AS airlRemark,
		  HLDG_PERIOD         AS hldgPeriod,
		  SHPR_ADDR           AS shprAddrOne,
		  SHPR_ADDR2          AS shprAddrTwo,
		  SHPR_ADDR3          AS shprAddrThree,
		  SHPR_ADDR4          AS shprAddrFour,
		  SHPR_CTRY_CODE      AS shprCountry,
		  SHPR_PLACE          AS shprCity,
		  SHPR_PIN_CODE       AS shprPin,
		  CSGNE_ADDR          AS consAddrOne,
		  CSGNE_ADDR2         AS consAddrTwo,
		  CSGNE_ADDR3         AS consAddrThree,
		  CSGNE_ADDR4         AS consAddrFour,
		  CSGNE_CTRY_CODE     AS consCountry,
		  CSGNE_NAME          AS consigneeName,
		  CSGNE_PIN_CODE      AS consPin,
		  CSGNE_PLACE         AS consCity,
		  AGENt_CODe          AS agentCode,
		  DECODE(ACCEPT_MODE,'Local Export','LCA', 'Dummy', 'LDM', 
		  'Inter Terminal Local Transfer', 'LIT', 'Inter Terminal Transhipment', 'TIT',
		  'Tarmac Transfer','TTT', 'Online Transhipment', 'TIH',
		  'OBC', 'LOB', 'Direct Shipper', 'LDS', 
		  'Inhouse Transshipment','TIL', 'Transhipment' ,'TRN', 'NA') AS  acceptMode
		FROM exp_car
		WHERE AWB_NO	=	#AWB_NO#
		AND AWB_DATE =  to_date(#AWB_DATE#,'DDMONYY')
	</select>
	
	<select id="select_customout_fwb_fhl" parameterClass="cargo.cms.export.bo.FlightCustomBO" resultClass="cargo.cms.export.bo.AWBBO">
		SELECT DISTINCT AWB_NO as awbNo, TO_CHAR(AWB_DATE,'DDMONYY') as awbDate ,  FWB_IND as fwbFlag , FHL_IND as fhlFlag
		FROM(
		(SELECT DISTINCT A.AWB_NO, A.AWB_DATE, DECODE(B.AWB_NO,NULL,'N','Y')
		FWB_IND,DECODE(C.AWB_NO,NULL,'N','Y') FHL_IND
		FROM EXP_PMANIFEST_AWB A,
		EDI_FWB B,
		EDI_FHL C
		WHERE A.AWB_NO = B.AWB_NO(+)
		AND A.AWB_NO = C.AWB_NO(+)
		AND A.FLT_KEY = #fltKey#
		AND A.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
		AND FUN_VALIDATE_AWB(A.AWB_NO,(SELECT CARR_CODE FROM AWB WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE),'A') not in ('N','C'))
		UNION ALL
    	(SELECT DISTINCT A.AWB_NO, A.AWB_DATE, DECODE(B.AWB_NO,NULL,'N','Y')
		FWB_IND,DECODE(C.AWB_NO,NULL,'N','Y') FHL_IND
		FROM EXP_PMAN_TARMAC_AWB A,
		EDI_FWB B,
		EDI_FHL C
		WHERE A.AWB_NO = B.AWB_NO(+)
		AND A.AWB_NO = C.AWB_NO(+)
		AND A.FLT_KEY = #fltKey#
		AND A.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
    	AND FUN_VALIDATE_AWB(A.AWB_NO, (SELECT CARR_CODE FROM AWB WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE),'A') not in ('N','C')))
	</select>
	
	<select id="getorigin"  parameterClass="java.lang.String" resultClass="java.lang.String">	
		SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='SITA_ORI_ADD'
	</select>
	<update id="sendFFM"   parameterClass="cargo.cms.export.bo.FlightCustomBO">	
		UPDATE FLT_OPR_EVENTS
			SET CTM_OUT_DATE= sysdate,
			CTM_OUT_TIME =  TO_CHAR (SYSDATE, 'HH24MI')  ,
			FFM_IND='Y' , TR_TYPE='FLTCO', LM_USER_ID = #userID#
		WHERE
			TR_NO = #trNO#
	</update>
	<select id="validateFlightCustomOut" parameterClass="cargo.cms.export.bo.FlightCustomBO" resultClass="java.lang.String">
		select to_char(to_date(#ffmfltDate#||' '||to_char(sysdate, 'hh24:mi'),'DDMONYY HH24:MI')
						- to_date(#fltDate#||' '||#etd#,'DDMONYY HH24:MI')) from dual
	</select>
	<!-- Changed for QR -->
	<update id="fltCstmOutClsAwb" parameterClass="cargo.cms.export.bo.FlightCustomBO">
	<![CDATA[
		update awb a set a.awb_closed_yn='Y'
		where non_pman_pcs = 0 and pman_pcs > 0 and car_yn = 'Y'
	  	and not exists(select null from   exp_pmanifest_awb where  pman_pcs > 0 and unassigned_bulk_pcs > 0 and awb_no=a.awb_no and awb_date = a.awb_date)
	  	and (a.awb_no, a.awb_date) in (select awb_no, awb_date from exp_pmanifest_awb where flt_key = #fltKey# and flt_date = #fltDate# 
	  	   union all select awb_no, awb_date from exp_pman_tarmac_awb where flt_key = #fltKey# and flt_date = #fltDate#)
	    and not exists( select null from  awb_inventory where  awb_no=a.awb_no and awb_date = a.awb_date) 
	    and (a.awb_type = 'E' or (a.awb_type = 'T' and nvl((select sum(MANIFEST_PCS + case when CIR_PROC_USER is null then 0 else 
           case when CIR_PCS_TYPE = 'SL' then -1 * CIR_PCS else CIR_PCS end end)
            from imp_car_shp where awb_no = a.awb_no and awb_date = a.awb_date ),0) = a.pcs ))
	   ]]>
	</update>
	
	<update id="sqlUpdateAwbCloseForFltClose" parameterClass="map">
		<![CDATA[
		update awb set awb_closed_yn='Y',LM_DATE = sysdate,LM_USER_ID =  'SYSTEM'
		 where (awb_no, awb_date) in (
			select a.awb_no, a.awb_date 
			from awb a
			left join (select d.awb_no, d.awb_date, sum(d.pcs) pcs, sum(d.wt) wt from imp_trm_hd h
	    	join imp_trm_dtl d on h.trm_no = d.trm_no
				    where h.status = 'POSTED' and h.recd_carr_handr != 'CPCT'
	    	group by d.awb_no, d.awb_date) t on t.awb_no = a.awb_no and t.awb_date = a.awb_date
				left join (select cs.awb_no, cs.awb_date, 
				          sum(case when nvl(recd_pcs,0) + nvl(tt_if_pcs, 0) != nvl(sup_pcs, 0)  then 1 else 0 end) disc_cnt 
				      from (select awb_no, awb_date, flt_key, flt_date, manifest_pcs, recd_pcs, (manifest_pcs + case when CIR_PROC_USER is null then 0 else
				                case when CIR_PCS_TYPE = 'SL' then -1 * CIR_PCS else CIR_PCS end end) sup_pcs
				           from imp_car_shp) cs
				       left join (select awb_no, awb_date, flt_key, flt_date, sum(shp_trf_pc) tt_if_pcs
				          from v_ddt_dtl where (trf_type = 'IF' or shp_trf_type = 'TT') group by awb_no, awb_date, flt_key, flt_date) d 
				            on d.awb_no = cs.awb_no and d.awb_date = cs.awb_date and d.flt_key = cs.flt_key and d.flt_date = cs.flt_date 
				      group by cs.awb_no, cs.awb_date
				       ) s on s.awb_no = a.awb_no and s.awb_date = a.awb_date
				left join (select awb_no, awb_date, sum(locn_pcs) locn_pcs from  awb_inventory group by awb_no, awb_date) i
				    on i.awb_no = a.awb_no and i.awb_date = a.awb_date       
				left join (select awb_no, awb_date, sum(pman_pcs) pman_pcs, sum(unassigned_bulk_pcs) unassigned_bulk_pcs 
				        from  exp_pmanifest_awb group by awb_no, awb_date) p
				    on p.awb_no = a.awb_no and p.awb_date = a.awb_date       
				where a.pman_pcs + nvl(t.pcs, 0) >= a.pcs   
				and nvl(p.unassigned_bulk_pcs, 0) = 0 and nvl(i.locn_pcs, 0) = 0
				and ((a.awb_type = 'E' and a.car_yn = 'Y') or (a.awb_type = 'T' and nvl(s.disc_cnt, 0) = 0 ))
				and a.awb_closed_yn='N'
				and a.awb_no = #awbNo# and a.awb_date = #awbDate#)
 		]]>
	</update>
	<!-- ################### Flight Custom Out   : End  ###########-->


<!-- Queries for confirm offload(HHT) Starts -->
<select id="fetchConfirmOffloadAwbList"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" resultClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" >
select a.flt_key as fltKey,
       to_char(a.flt_date,'DDMONYY') as fltDate,
       a.uld_bt_no as uldKey,
       A.unldg_pt AS unldgpt,
       a.awb_no as awbNo,
       to_char(a.awb_date,'DDMONYY') as awbDate,
			a.assigned_pcs as assignedPcs, 
			a.assigned_wt as assignedWt,
	  decode((select BB_IND from exp_flt_uld where flt_key=#fltKey# AND FLT_DATE=#fltDate# AND ULD_KEY=#uldKey# and rownum=1),'Y','Y',decode(B.NEW_CHECKIN_ULD,'Y','Y',(select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(a.uld_bt_no, 1, 3)))) AS bulkInd,
      A.ppk_type as pkgType,
      'Normal' as type
  	from   EXP_PMANIFEST_ULD_AWB A,
  	       EXP_PMANIFEST_ULD B
		where B.ULD_BT_NO = a.uld_bt_no AND
          b.flt_key = a.flt_key AND
          B.flt_date = a.flt_date AND		  
		A.flt_key = #fltKey#
		and    A.flt_date = to_date(#fltDate#,'DDMONYY')
		and    A.uld_bt_no =  #uldKey#
		AND    A.AWB_NO = #awbNo#
		AND   A.AWB_DATE = to_date(#awbDate#,'DDMONYY')
</select>
<select id="fetchConfirmOffloadTarmacAwbList"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" resultClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" >
   select a.flt_key as fltKey,
       to_char(a.flt_date,'DDMONYY') as fltDate,
       a.uld_bt_no as uldKey,
       A.unldg_pt AS unldgpt,
       a.awb_no as awbNo,
       to_char(a.awb_date,'DDMONYY') as awbDate,
			a.assigned_pcs as assignedPcs, 
			a.assigned_wt as assignedWt,
     decode((select BB_IND from exp_flt_uld where flt_key=#fltKey# AND FLT_DATE=#fltDate# AND ULD_KEY=#uldKey# and rownum=1),'Y','Y',decode((SELECT DECODE(new_checkin_uld,'','N','Y','Y','N','N') FROM EXP_PMANIFEST_ULD M2 WHERE M2.FLT_KEY=A.FLT_KEY AND M2.FLT_DATE=A.FLT_DATE AND M2.ULD_BT_NO=A.ULD_BT_NO AND ROWNUM=1),'Y','Y',(select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(A.uld_bt_no, 1, 3)))) AS bulkInd,
     'Tarmac' as type
  	from   EXP_PMAN_TARMAC_ULD_AWB A,
  	       EXP_PMAN_TARMAC_ULD B
		where B.ULD_BT_NO = a.uld_bt_no AND
          b.flt_key = a.flt_key AND
          B.flt_date = a.flt_date AND		  
		      A.flt_key = #fltKey#
		and   A.flt_date = to_date(#fltDate#,'DDMONYY')
		and   A.uld_bt_no =  #uldKey#
		AND   A.AWB_NO = #awbNo#
		AND   A.AWB_DATE = to_date(#awbDate#,'DDMONYY') 
</select>
<select id="fetchConfirmOffloadBulkAwbList"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" resultClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" >
  select 
  awbNo,awbDate,fltKey,fltDate,pkgType,oldUld,
(select sum(assigned_pcs) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND c.flt_key = #fltKey# and c.flt_date = to_date(#fltDate#,'DDMONYY') and 
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y')) as offBulkPcs,
(select sum(assigned_wt) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND c.flt_key = #fltKey# and c.flt_date = to_date(#fltDate#,'DDMONYY') and 
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y')) as offBulkWt,
 (select sum(assigned_pcs) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND c.flt_key = #fltKey# and c.flt_date = to_date(#fltDate#,'DDMONYY') and 
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y') and c.awb_no = awbNo ) as assignedPcs,
(select sum(assigned_wt) from exp_pmanifest_uld_awb c,exp_pmanifest_uld d where D.FLT_KEY=C.FLT_KEY AND D.FLT_DATE = C.FLT_DATE AND D.ULD_BT_NO = C.ULD_BT_NO AND c.flt_key = #fltKey# and c.flt_date = to_date(#fltDate#,'DDMONYY') and 
 (d.bb_ind = 'Y' or d.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(c.uld_bt_no, 1, 3)) = 'Y') and c.awb_no = awbNo) as assignedWt,
 'Normal' AS type,
 decode((select BB_IND from exp_flt_uld where flt_key=fltKey AND FLT_DATE=fltDate AND ULD_KEY=#uldKey# and rownum=1),'Y','Y',decode((SELECT DECODE(new_checkin_uld,'','N','Y','Y','N','N') FROM EXP_PMANIFEST_ULD M2 WHERE M2.FLT_KEY=fltKey AND M2.FLT_DATE=fltDate AND M2.ULD_BT_NO=#uldKey# AND ROWNUM=1),'Y','Y',(select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(#uldKey#, 1, 3)))) AS bulkInd,
 unldgpt AS unldgpt
 from( 
 select p.awb_no awbNo,TO_CHAR(P.AWB_DATE,'DDMONYY') awbDate, p.flt_key fltKey,TO_CHAR(P.FLT_DATE,'DDMONYY') fltDate,p.ppk_type as pkgType,P.ULD_BT_NO as oldUld,P.UNLDG_PT AS unldgpt from 
  exp_pmanifest_uld_awb p,exp_pmanifest_uld q 
  where
  p.flt_key = q.flt_key and 
  p.flt_date = q.flt_date and
  p.uld_bt_no = q.uld_bt_no and
  p.FLT_KEY = #fltKey# AND
  p.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
  P.AWB_NO=#awbNo# AND   P.AWB_DATE = to_date(#awbDate#,'DDMONYY') AND 
  (q.bb_ind = 'Y' or q.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y') and rownum=1
  group by p.FLT_KEY,p.FLT_DATE,p.awb_no,P.AWB_DATE,p.ppk_type,P.ULD_BT_NO,P.UNLDG_PT)
</select>

<select id="fetchConfirmOffloadTarmacBulkAwbList"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" resultClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" >
select 
 awbNo,awbDate,fltKey,fltDate,
 (select sum(bulk_pcs) from exp_pman_tarmac_awb c where c.flt_key = fltKey and c.flt_date = fltDate and awb_no=awbNo and awb_date=awbDate) as offBulkPcs,
 (select sum(bulk_wt) from exp_pman_tarmac_awb c where c.flt_key = fltKey and c.flt_date = fltDate and awb_no=awbno and awb_date=awbdate) as offBulkWt,
 bulk_pcs as assignedPcs,
 bulk_wt as assignedWt,
 UNLDG_PT AS unldgpt,
 'Tarmac' AS type
 from( 
 select K.awb_no awbNo,TO_CHAR(K.AWB_DATE,'DDMONYY') awbDate, K.flt_key fltKey,TO_CHAR(K.FLT_DATE,'DDMONYY') fltDate,BULK_PCS,BULK_WT,UNLDG_PT from 
  EXP_PMAN_TARMAC_AWB K
  where
  K.BULK_PCS > 0 AND
  K.FLT_KEY = #fltKey# AND
  K.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
  K.awb_no = #awbNo# AND   K.AWB_DATE = to_date(#awbDate#,'DDMONYY'))
</select>

<select id="validateConfirmOffloadFlight"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.Integer">
		SELECT count(FLT_KEY) FROM FLT_OPR A  WHERE A.FLT_KEY=UPPER(#fltKey#) AND A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		AND A.FLT_TYPE = 'D'
</select>
<select id="checkhhtconfirmuldistarmacornot"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.Integer">
SELECT COUNT(1) FROM EXP_PMAN_TARMAC_ULD WHERE ULD_BT_NO=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')
</select>
<select id="checkhhtconfirmuldischeckinuldornot"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.Integer">
SELECT COUNT(1) FROM exp_pmanifest_uld WHERE ULD_BT_NO=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND new_checkin_uld='Y'
</select>
<select id="CHECK_HHT_CHECKIN_ULD_IS_TARMAC"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.Integer">
SELECT COUNT(1) FROM EXP_PMAN_TARMAC_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND AWB_NO=#awbNo# AND BULK_PCS>0 AND BULK_WT>0
</select>

<select id="fetchHHTAssignDetailsInExpPman" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO">
  select p.awb_no awbNo,TO_CHAR(P.AWB_DATE,'DDMONYY') awbDate, p.flt_key fltKey,TO_CHAR(P.FLT_DATE,'DDMONYY') fltDate,P.ULD_BT_NO AS uldKey,
  SUM(P.ASSIGNED_PCS) AS assignedPcs,SUM(P.ASSIGNED_WT) AS assignedWt from 
  exp_pmanifest_uld_awb p,exp_pmanifest_uld q 
  where
  p.flt_key = q.flt_key and 
  p.flt_date = q.flt_date and
  p.uld_bt_no = q.uld_bt_no and
  p.FLT_KEY = #FLT_KEY# AND
  p.FLT_DATE = to_date(#FLT_DATE#,'DDMONYY') and 
    P.awb_no=#AWB_NO# and P.awb_date=#AWB_DATE# and
  (q.bb_ind = 'Y' or q.new_checkin_uld='Y' or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y')
  group by p.FLT_KEY,p.FLT_DATE,p.awb_no,P.AWB_DATE,P.ULD_BT_NO
</select>

  <select id="fetchHHTNewCheckHcontainerList" parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
    select  p.uld_bt_no AS uldBtNo,
            p.assigned_pcs AS assignedPc,
            P.assigned_wt AS assignedWt,
            P.awb_no as awbNo,
            to_char(p.awb_date,'DDMONYY') as awbDate,
  CONCAT(CONCAT(SUBSTR(P.awb_no,0,3),'-'),SUBSTR(P.awb_no,4)) as awbNoDisplay,
  p.unldg_pt as unldgpt
      from 
            exp_pmanifest_uld_awb p,
            exp_pmanifest_uld q 
   where
			  p.flt_key = q.flt_key and 
			  p.flt_date = q.flt_date and
			  p.uld_bt_no = q.uld_bt_no and
			  p.FLT_KEY = #fltKey# AND
			  p.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
			  (q.bb_ind = 'Y' or q.new_checkin_uld='Y'
			  or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y') AND p.uld_bt_no NOT IN (       
        select RULE_VALUE from cmsrules where RULE_CODE='Dummy_H_Container')
	</select>
	
<select id="validateConfirmOffloadManifestrFlight"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.String">
		select FINAL_MANF_IND from flt_opr_events WHERE FLT_KEY=#fltKey# AND SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE = 'D'
</select>
<select id="validateConfirmOffloadFlightCompleteOrNot"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.String">
		select ofld_cfm_ind from flt_opr_events WHERE FLT_KEY=#fltKey# AND SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE = 'D'
</select>

<select id="fetchConfirmOffloadUldLocCode"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.String">
		select loc_code from uld_inventory where uld_key=#uldKey#
</select>

<select id="fetchConfirmOffloadLspLocCode"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.String">
		SELECT LOC_CODE FROM LSP_INVENTORY WHERE LSP_NO = #lspNo#
</select>

 <select id="fetchConfirmTransitHandlingDetails" parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO" resultClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO">
	select transit_flg as transitFlg, hdlg_mode as hadleMode from exp_pmanifest_uld where ULD_BT_NO=#oldUldKey# and flt_key=#fltKey# and flt_date=#fltDate# and rownum=1
	</select>
	<update id="updateConfirmTransitHandlingdata" parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO">
	update exp_offload_uld set TRANSIT_FLG=#transitFlg#,HDLG_MODE=#hadleMode# where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#oldUldKey#
  </update>
  <select id="fetchHHTHcontainerList" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
    select  p.uld_bt_no AS uldBtNo,
            p.assigned_pcs AS assignedPc,
            P.assigned_wt AS assignedWt
      from 
            exp_pmanifest_uld_awb p,
            exp_pmanifest_uld q 
   where
			  p.flt_key = q.flt_key and 
			  p.flt_date = q.flt_date and
			  p.uld_bt_no = q.uld_bt_no and
			  p.FLT_KEY = #fltKey# AND
			  p.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
			  (q.bb_ind = 'Y' or q.new_checkin_uld='Y'
			  or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y')
	</select>
 <select id="fetchConfirmOffloadUnldgpt"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.String">
		 SELECT UNLDG_PT
				FROM   EXP_OFFLOAD_ULD_AWB
				WHERE  FLT_KEY = #fltKey#
		        AND    FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
		        AND    ULD_BT_NO = #uldKey#
                AND    AWB_NO = #awbNo# 
                AND    AWB_DATE = #awbDate#
 </select>
 <select id="checkUldIsValidOrNot"  parameterClass="java.lang.String"  resultClass="java.lang.Integer">
 select COUNT(1) from uld_inventory where owned_inv='Y' and uld_key=#PARAM#
 </select>
 <select id="checkLspIsValidOrNot"  parameterClass="java.lang.String"  resultClass="java.lang.Integer">
 select COUNT(1) from lsp_inventory where lsp_no=#PARAM#
 </select>
 <select id="checkLspIsInAgentInv"  parameterClass="java.lang.String"  resultClass="java.lang.Integer">
 select count(1) from asv_inventory where lsp_no=#PARAM#
 </select>
 <select id="checkUldIsInAgentInv"  parameterClass="java.lang.String"  resultClass="java.lang.Integer">
 select count(1) from asv_inventory where uld_key=#PARAM#
 </select>
  <select id="checkawbismanifestornot"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.Integer">
   SELECT 
  (select COUNT(1) from exp_pmanifest_uld_awb where flt_key= #fltKey# and flt_date=TO_DATE(#fltDate#,'DDMONYY') and uld_bt_no=#uldKey# and awb_no=#awbNo# AND AWB_DATE = #awbDate#) + 
  (select COUNT(1) from exp_pman_tarmac_uld_awb where flt_key= #fltKey# and flt_date=TO_DATE(#fltDate#,'DDMONYY') and uld_bt_no=#uldKey# and awb_no=#awbNo# AND AWB_DATE = #awbDate#) +
  (select COUNT(1) from exp_pmanifest_uld where flt_key= #fltKey# and flt_date=TO_DATE(#fltDate#,'DDMONYY') and uld_bt_no=#uldKey# AND new_checkin_uld='Y') FROM DUAL
 </select>
<select id="checkInCompleteornotinconfirm"  parameterClass="cargo.cms.export.buildup.bo.ConfirmOffloadBO"  resultClass="java.lang.Integer">
select COUNT(1) from EXP_OFFLOAD_ULD where ULD_BT_No=#uldKey# and FLT_KEY=#fltKey# and FLT_DATE=#fltDate# and CHECKED_IN_FLAG='Y'
</select>
 
<!-- Queries for confirm offload(HHT) Ends -->

<!-- Load Shipment to ULD (HHT) :: Anup :: Begins -->
	<select id="sqlGetLoadShipmentHdDtls" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT 
			PMAN.FLT_KEY as fltNo, TO_CHAR(PMAN.FLT_DATE, 'DDMONYY') as fltDate, PMAN.UNLDG_PT as unLdgPt, PMAN.JO_NO as joNo 
		FROM 
			EXP_PMANIFEST_ULD PMAN JOIN ULD_INVENTORY ULD ON PMAN.ULD_BT_NO = ULD.ULD_KEY AND PMAN.FLT_KEY = ULD.FLT_KEY AND PMAN.FLT_DATE = ULD.FLT_DATE
		WHERE 
			PMAN.ULD_BT_NO=#buildToUld# AND NVL(ULD.FLT_TYPE,'N') = 'E' AND (NVL(PMAN.BLDUP_START,'N') = 'Y' OR ULD.FLT_KEY IS NOT NULL)      		
	</select>
	<select id="sqlGetJORemarks" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT 
			RMK as jobOrderRmk 
		FROM 
			EXP_BU_JO 
		WHERE 
			JO_NO=#joNo#
	</select>
	<select id="sqlGetLoadShipmentAwbDtls" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT 
			A.SEQ_NO as seqNo, A.AWB_NO as awbNo, (SUBSTR(A.AWB_NO, 0, 3) || '-' || SUBSTR(A.AWB_NO, 4, 8)) as awbNoDisplay, 
			TO_CHAR(A.AWB_DATE, 'DDMONYY') as awbDate, B.CATALOG as catalog, (SELECT BU_INST FROM EXP_BU_JO_DTL WHERE JO_NO=#joNo# 
			AND AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE) as buldpInstr, A.LOC_CODE as whDest, A.LSP_NO as lspNo, A.LOCN_PCS as locnPcs, 
			 case when B.awb_type='T' and B.CATALOG !='TM' and (select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(C.awb_no) from dual )) is null then 'Y' else 'N' end as transCCExists,			 
			 case when (select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(C.awb_no) from dual )) ='Y' and B.CATALOG !='TM'  then 'Y' else 'N' end  as ccAllowYn,
			A.LOCN_WT as locnWt, A.CARR_CODE as carrCode, C.UNLDG_PT AS unLdgPt,B.AWB_RMK AS whRmk,
			(B.spl_code1 ||''|| decode(B.spl_code2, null, '', ','|| B.spl_code2)
      		||''|| decode(B.spl_code3, null, '', ','|| B.spl_code3)
      		||''|| decode(B.spl_code4, null, '', ','|| B.spl_code4)
      		||''|| decode(B.spl_code5, null, '', ','|| B.spl_code5)
      		||''|| decode(B.spl_code6, null, '', ','|| B.spl_code6)
      		||''|| decode(B.spl_code7, null, '', ','|| B.spl_code7)
      		||''|| decode(B.spl_code8, null, '', ','|| B.spl_code8)
      		||''|| decode(B.spl_code9, null, '', ','|| B.spl_code9)) AS splCode,
      		(select content from awb where awb_no=A.AWB_NO and awb_date=A.AWB_DATE) content,
      		(select dest from awb where awb_no=A.AWB_NO and awb_date=A.AWB_DATE) dest    
		FROM 
			AWB_INVENTORY A LEFT JOIN EXP_PMANIFEST_AWB C ON C.AWB_NO=A.AWB_NO AND C.AWB_DATE=A.AWB_DATE AND 
			C.FLT_KEY=#fltKey# AND C.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') LEFT JOIN AWB B ON B.AWB_NO=A.AWB_NO AND 
			A.AWB_DATE=B.AWB_DATE 
		WHERE 
			(A.ULD_KEY=#uldKey# OR A.LSP_NO=#uldKey#) AND (C.FLT_KEY IS NOT NULL OR B.CATALOG='EO') AND 
			NOT(A.FLT_TYPE='E' AND A.FLT_KEY IS NOT NULL) AND TRM_NO IS NULL			
	</select>
	<select id="sqlGetLoadShipmntSHC" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT 
			B.CODE as splCode 
		FROM 
			AWB_INVENTORY A1, AWB A, MAST_SPL_HAND_CODE B 
		WHERE 
			A.AWB_NO=A1.AWB_NO AND A.AWB_DATE=A1.AWB_DATE AND (B.CODE=A.SPL_CODE1 OR B.CODE=A.SPL_CODE2 OR B.CODE=A.SPL_CODE3 
			OR B.CODE=A.SPL_CODE4 OR B.CODE=A.SPL_CODE5 OR B.CODE=A.SPL_CODE6 OR B.CODE=A.SPL_CODE7 OR B.CODE=A.SPL_CODE8 OR 
			B.CODE=A.SPL_CODE9) AND B.BLDUP_RELATED='Y' AND  A1.SEQ_NO=#trNo#
	</select>
	<select id="sqlGetLoadShpmtMailTagDtls" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		<![CDATA[
		SELECT 
			B.TAG_NO as tagNo, B.TAG_PCS as pc, B.TAG_WT as wt, A.AWB_DEST as dest, NVL(TAGBUPCS, 0) tagBUPc, NVL(TAGBUWT, 0) tagBUWt 
		FROM 
			EXP_RCL_HD A JOIN EXP_RCL_OBC B ON B.RCL_NO=A.RCL_NO
      		LEFT JOIN (SELECT C.AWB_NO, C.AWB_DATE, D.TAG_NO, SUM(D.PC) TAGBUPCS, SUM(D.WT) TAGBUWT FROM EXP_PMANIFEST_ULD_AWB C  
        		JOIN EXP_PMANIFEST_ULD_AWB_TAG D ON D.TR_NO=C.TR_NO 
        		GROUP BY C.AWB_NO, C.AWB_DATE, D.TAG_NO) T ON T.TAG_NO=B.TAG_NO  AND T.AWB_NO=A.AWB_NO AND T.AWB_DATE=A.AWB_DATE
    	WHERE 
      		A.STATUS<>'V' AND A.AWB_NO=#awbNo# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') ORDER BY B.TAG_NO
      	]]>
	</select>
	<select id="sqlFetchTMMailTag" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT * FROM (
			SELECT 
				A.TAG_NO AS tagNo, A.ACT_PCS as pc, A.ACT_WT as wt, A.DEST as dest, NVL(TAGBUPCS, 0) tagBUPc, NVL(TAGBUWT, 0) tagBUWt 
			FROM 
				(SELECT AWB_NO, AWB_DATE,TAG_NO AS TAG_NO, SUM(ACT_PCS) as ACT_PCS, SUM(ACT_WT) as ACT_WT, min(DEST) as DEST, min(catalog) as CATALOG 
         			FROM IMP_XPS_OBC_MAIL group by AWB_NO,AWB_DATE,TAG_NO) A
					LEFT JOIN (SELECT C.AWB_NO, C.AWB_DATE, D.TAG_NO, SUM(D.PC) TAGBUPCS, SUM(D.WT) TAGBUWT FROM EXP_PMANIFEST_ULD_AWB C  
        			JOIN EXP_PMANIFEST_ULD_AWB_TAG D ON D.TR_NO=C.TR_NO 
        			GROUP BY C.AWB_NO, C.AWB_DATE, D.TAG_NO ) T ON T.TAG_NO=A.TAG_NO AND T.AWB_NO=A.AWB_NO AND T.AWB_DATE=A.AWB_DATE
			WHERE 
				A.CATALOG != 'TM' AND A.AWB_NO=#awbNo# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
		) ORDER BY tagNo
	</select>
	
	<select id="sqlGetBuldUpCompleteStatus" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMANIFEST_ULD WHERE NVL(BLDUP_COMPLETE,'N')='Y' AND ULD_BT_NO=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')
	</select>
	
	<select id="sqlGetBuldUpStartStatus" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMANIFEST_ULD WHERE NVL(BLDUP_START,'N')='Y' AND ULD_BT_NO=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')
	</select>
	
	<select id="sqlUldServiceable" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE SER_IND='Y' AND ULD_KEY=#uldKey#
	</select>
	<select id="sqlUldPrePackStatus" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	<![CDATA[
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE ((PPK_IND='Y' OR MIX_PPK_IND='Y') OR (HANDLING_MODE='NBK' OR HANDLING_MODE='PPK')) 
			AND (REBUILD_YN='N' AND TOPUP_YN='N') AND ULD_KEY=#uldKey#
	]]>
	</select>
	<!-- Changed for QR -->
	<select id="sqlGetFltBuldCompl" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM FLT_OPR_EVENTS WHERE BUILDUP_CDATE IS NOT NULL AND FLT_KEY=#fltKey# AND SCH_DATE=TO_DATE(#fltDate#,'DDMONYY') AND FLT_TYPE='D'
	</select>
	<!-- Changed for QR -->
	<select id="sqlGetDLSForFlt" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM FLT_OPR_EVENTS WHERE DLS_FINAL_DATE IS NOT NULL AND FLT_KEY=#fltKey# AND SCH_DATE=TO_DATE(#fltDate#,'DDMONYY') AND FLT_TYPE='D'
	</select>
	<!-- Changed for QR -->
	<select id="sqlGetManifestForFltFinalised" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM FLT_OPR_EVENTS WHERE FINAL_MANF_IND='Y' AND FLT_KEY=#fltKey# AND SCH_DATE=TO_DATE(#fltDate#,'DDMONYY') AND FLT_TYPE='D'
	</select>
	<select id="sqlGetPmanPcWt" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			NVL(UNASSIGNED_BULK_PCS, 0) as UNASSIGNED_BULK_PCS, NVL(UNASSIGNED_BULK_WT, 0) as UNASSIGNED_BULK_WT 
		FROM 
			EXP_PMANIFEST_AWB 
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND UNLDG_PT=#unldgpt# AND AWB_NO=#awbNo# 
			AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY')
	</select>
	<select id="sqlFindShpmtBuldUpAllwed" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT 
			COUNT(1) 
		FROM 
			V_CST_EXP_CC_CODE A, MAST_CONSTRAINT_CODE B 
		WHERE 
			B.CODE=A.CC_CODE AND B.RESTRICT_BUILDUP_COMP_ULD='Y' AND A.AWB_NO=#awbNo# AND A.FLT_KEY=#fltKey# 
			AND A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')
	</select>
	<select id="sqlFindFHLExists" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select COUNT(1) from edi_fhl where awb_no=#awbNo# and awb_date=to_date(#awbDate#, 'DDMONYY')
	</select>
	<select id="findFHLTrnoExists" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select TR_NO from edi_fhl where awb_no=#awbNo# and awb_date=to_date(#awbDate#, 'DDMONYY') AND ROWNUM=1
	</select>
	<select id="findFHLHawbExists" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT count(1) FROM EDI_FHL_HAWB WHERE TR_NO=#trNo# AND HAWB_NO=#hawbNo#
	</select>
	<select id="sqlFindFHLHawbDtls" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		select 
			b.hawb_no, b.hawb_pcs, b.hawb_net_wt 
		from 
			edi_fhl a, edi_fhl_hawb b 
		where 
			b.tr_no=a.tr_no and a.awb_no=#awbNo# and a.awb_date=to_date(#awbDate#, 'DDMONYY') and b.hawb_no=#hawbNo#
	</select>
	<select id="sqlFindPmanHawbDtls" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		select 
			b.pc, b.wt 
		from 
			exp_pmanifest_uld_awb a, exp_pmanifest_uld_awb_hawb b 
		where 
			b.tr_no=a.tr_no and a.flt_key=#fltKey# and a.flt_date=to_date(#fltDate#, 'DDMONYY') and a.uld_bt_no=#uldKey# 
			and a.unldg_pt=#unldgPt# and a.awb_no=#awbNo# and a.awb_date=to_date(#awbDate#, 'DDMONYY') and b.hawb_no=#hawbNo#
	</select>
	<select id="sqlGetAwbInventoryPcWt" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		select sum(locn_pcs) locn_pcs, sum(locn_wt) locn_wt from awb_inventory where awb_no=#awbNo# and awb_date=to_date(#awbDate#, 'DDMONYY')
		 AND (uld_key=#uldKey# OR lsp_no=#uldKey#) and ((flt_type='E' and flt_key is null) or nvl(flt_type, 'I')='I') 
	</select>
	<select id="sqlGetAwbInventoryPcWt_tm" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		select sum(locn_pcs) locn_pcs, sum(locn_wt) locn_wt from awb_inventory where SEQ_NO=#seqNo#
	</select>
	<select id="sqlGetJOPcsWt" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			NVL(SUM(D.LOCN_JO_PC), 0) AS joPcs, NVL(SUM(D.LOCN_JO_WT), 0) AS joWt 
		FROM 
			EXP_PMANIFEST_ULD A, EXP_BU_GP B, EXP_BU_JO C, EXP_BU_JO_LOCN D 
		WHERE 
    		D.JO_NO=C.JO_NO AND C.GP_NO=B.GP_NO AND B.GP_NO=A.GP_NO AND A.FLT_KEY=#fltKey# AND A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') 
    		AND C.STATUS in('Started', 'Confirmed', 'Retrieval Started','Pending') AND C.CONFIRMED_YN='Y' AND D.AWB_NO=#awbNo# AND 
    		D.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND A.ULD_BT_NO=#buildToUld# AND (d.lsp=#uldLsp# or d.uld_key=#uldLsp#)
		<!--  SELECT 
			NVL(SUM(D.AWB_JO_PC), 0) AS joPcs, NVL(SUM(D.AWB_JO_PC), 0) AS joWt 
		FROM 
			EXP_PMANIFEST_ULD A, EXP_BU_GP B, EXP_BU_JO C, EXP_BU_JO_DTL D 
		WHERE 
    		D.JO_NO=C.JO_NO AND C.GP_NO=B.GP_NO AND B.GP_NO=A.GP_NO AND A.FLT_KEY=#fltKey# AND A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') 
    		AND C.CONFIRMED_YN='Y' AND D.AWB_NO=#awbNo# AND D.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND A.ULD_BT_NO=#buildToUld# -->
	</select>
	<select id="sqlFetchUldKeyByLocation" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT ULD_KEY as uldKey FROM ULD_INVENTORY WHERE LOC_CODE=#locCode# and rownum =1
	</select>
	
	<select id="sqlFetchLocKeyByUldKey" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT LOC_CODE as locCode FROM ULD_INVENTORY WHERE ULD_KEY=#uld_bt_no#
	</select>
	
	<select id="sqlGetUldCountByLocation" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT count(0) FROM ULD_INVENTORY WHERE LOC_CODE=#locCode# 
	</select>
	
	
	<select id="sqlFetchAssignedPcsByUldAwb" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT 
			ASSIGNED_PCS as assignedPcs 
		FROM 
			EXP_PMANIFEST_ULD_AWB 
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#buildToUld# AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	<update id="sqlUpdateAwbInvForLoadShpmnt" parameterClass="java.util.HashMap">
    	UPDATE AWB_INVENTORY 
    		SET LOCN_PCS=LOCN_PCS-NVL(#undoPcs#, 0), LOCN_WT=LOCN_WT-NVL(#undoWt#, 0) , LM_USER_ID=#userId#
    	WHERE 
    		SEQ_NO=#seqNo#
    </update>
    <delete id="deleteAwbInvForLoadShpmnt" parameterClass="java.lang.String">
		DELETE FROM 
			AWB_INVENTORY 
		WHERE 
			SEQ_NO=#seqNo# AND LOCN_PCS=0
	</delete>
    <select id="sqlFetchAwbPcWtForLoadShipment" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT 
    		LOCN_PCS as pcs, LOCN_WT as wt 
    	FROM 
    		AWB_INVENTORY 
    	WHERE 
    		AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND (ULD_KEY=#binUld# OR LSP_NO=#binUld#) 
    		AND ROWNUM=1
    </select>
    <select id="fetchFlightCarrCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT CARR_CODE FROM FLT_OPR_EVENTS WHERE FLT_KEY=#fltNo# AND TO_CHAR(SCH_DATE,'DDMONYY')=#fltDate# AND FLT_TYPE='D'
	</select>
	<update id="updateBUInfoInExpBuJoLocn" parameterClass="java.util.HashMap">
		UPDATE 
			EXP_BU_JO_LOCN SET BU_YN='Y', BU_PCS=NVL(BU_PCS, 0) + NVL(#buPcs#, 0), BU_WT=NVL(BU_WT, 0) + NVL(#buWt#, 0) 
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND (ULD_KEY=#uldKey# OR LSP=#uldKey#) AND 
			JO_NO=(SELECT C.JO_NO FROM EXP_PMANIFEST_ULD A, EXP_BU_GP B, EXP_BU_JO C WHERE C.GP_NO=B.GP_NO AND B.GP_NO=A.GP_NO AND A.FLT_KEY=#fltKey# 
			AND A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND C.CONFIRMED_YN='Y' AND C.STATUS != 'COMPLETED' AND A.ULD_BT_NO=#buildToUld#  AND ROWNUM = 1)
	</update>
	<select id="isAwbLockedInCar" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_CAR WHERE LOCK_IND='Y' AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	
	<update id="updateDCEndrInExpPmanUldAwb" parameterClass="java.util.HashMap">
		UPDATE 
			EXP_PMANIFEST_ULD_AWB 
		SET 
			ENDORSED_DC_BY=#endrDCBy#, ENDORSED_DC_DATE=SYSDATE, TR_TYPE='LODSP' 
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND AWB_NO=#awbNo# 
			AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND UNLDG_PT=#unldgPt#
	</update>
			
	<update id="updateDcUserName" parameterClass="java.util.HashMap">
		UPDATE 
			EXP_PMANIFEST_ULD_AWB 
		SET 
			ENDORSED_DC_BY=#ENDOSE_USER#, ENDORSED_DC_DATE=SYSDATE, TR_TYPE='CRUAS' 
		WHERE 
			FLT_KEY=#FLT_KEY# AND FLT_DATE=TO_DATE(#FLT_DATE#, 'DDMONYY') AND ULD_BT_NO=#ULD_KEY# AND AWB_NO=#AWB_NO# 
			AND AWB_DATE=TO_DATE(#AWB_DATE#, 'DDMONYY') AND UNLDG_PT=#UNLDG_PT#
	</update>
	
	<!-- Load Shipment to ULD (HHT) :: Anup :: Ends -->
	
	<!-- Amend ULD No :: Anup :: Begins -->
	<select id="amend_uld_no_validate_new_uld_in_awb_inventory" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT COUNT(ULD_KEY) FROM ULD_INVENTORY WHERE ULD_KEY=#newUld# and owned_inv='Y'		
	</select>
	<select id="amend_uld_no_validate_old_uld_assign_to_flight" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT COUNT(ULD_BT_NO) FROM EXP_PMANIFEST_ULD WHERE ULD_BT_NO=#oldUld# AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#arrDate#,'DDMONYY')
	</select>
	<select id="isNewULDAssignedToFlight" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_KEY=UPPER(#uldKey#) AND ((FLT_TYPE='I' and EMPTY_FLG='N') OR (FLT_TYPE='E')) AND FLT_KEY IS NOT NULL
	</select>
	<select id="isNewULDAssignedToFlightRCL" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_KEY=UPPER(#uldKey#) AND OWNED_INV = 'Y' AND ((FLT_TYPE='I' and EMPTY_FLG='N') OR (FLT_TYPE='E')) AND FLT_KEY IS NOT NULL
	</select>	
	<select id="isNewULDAssignedToFlightURFTO" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT count(1) FROM ULD_INVENTORY U
		LEFT JOIN FLT_OPR F ON U.FLT_KEY = F.FLT_KEY AND U.FLT_DATE = F.SCH_DATE AND F.FLT_TYPE = decode(U.FLT_TYPE,'E','D','A')
		WHERE U.ULD_KEY=UPPER(#uldKey#) AND ((U.FLT_TYPE = 'E' AND U.FLT_KEY IS NOT NULL) OR (U.FLT_TYPE = 'I' and U.empty_flg = 'N')) AND F.FLT_KEY IS NOT NULL
	</select>
	
	<select id="sqlFetchUldAssgndtoSameFlt" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_KEY=UPPER(#uldKey#) and FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') and FLT_TYPE='E'
	</select>
	<select id="amend_uld_no_validate_dls" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT DLS_IND FROM FLT_OPR_EVENTS WHERE FLT_KEY=#fltKey# AND SCH_DATE=TO_DATE(#arrDate#,'DDMONYY') AND FLT_TYPE='D'
	</select>	
	<!-- Changed for QR -->
	<select id="amend_uld_no_validate_unldgpt" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT 
			C.LEG_STATUS 
		FROM 
			EXP_PMANIFEST_ULD A, FLT_OPR B, FLT_OPR_LEG C WHERE A.FLT_KEY=#fltKey# AND A.FLT_DATE=TO_DATE(#arrDate#, 'DDMONYY') 
			AND A.ULD_BT_NO=#oldUld# AND B.FLT_KEY=A.FLT_KEY AND B.SCH_DATE=A.FLT_DATE AND B.FLT_TYPE='D' AND C.TR_NO=B.TR_NO 
			AND C.OFF_POINT=A.UNLDG_PT
	</select>	
	<select id="amend_uld_no_validate_contrcode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT 
			COUNT(1) 
		FROM 
			ULD_TYPE_PROH_ACFT T1 WHERE T1.ULD_TYPE=#uldtype# AND T1.CONTR_CODE=#contrcode# AND T1.ACFT_TYPE=(SELECT B.ACFT_TYPE FROM 
			FLT_OPR B WHERE B.FLT_KEY=#fltKey# AND B.SCH_DATE=TO_DATE(#arrDate#, 'DDMONYY') AND B.FLT_TYPE='D')
	</select>	
	<select id="amend_uld_no_validate_uld_belong_carrier" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT FUN_GET_PARENT_CARR(OWNER_ID) FROM ULD_INVENTORY WHERE ULD_KEY=#newUld#
	</select>	
	<select id="amend_uld_no_validate_uld_reserve" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT RESV_FLG FROM ULD_INVENTORY WHERE ULD_KEY=#newUld#
	</select>	
	<select id="amend_uld_no_get_header" parameterClass="cargo.cms.export.bo.AmendUldNoBO" 	resultClass="cargo.cms.export.bo.AmendUldNoDetailsBO">
		SELECT 
			DISTINCT A.FLT_KEY AS fltNo, TO_CHAR(A.FLT_DATE,'DDMONYY') AS fltDate, A.ULD_BT_NO AS oldUld, A.CONTR_CODE AS contrCode, A.UNLDG_PT AS unldgPt, 
			TO_CHAR(B.EST_DATE, 'DDMONYY') AS etd, 
			<!-- PKG_PMAN.FLT_PORTS(#fltKey#, TO_DATE(#arrDate#, 'DDMONYY')) AS portOfCall, --> 
			A.PPK_TYPE AS ppkType 
		FROM 
			EXP_PMANIFEST_ULD A, FLT_OPR B 
		WHERE 
			A.FLT_KEY=#fltKey# AND A.FLT_DATE=TO_DATE(#arrDate#, 'DDMONYY') AND A.ULD_BT_NO=#oldUld# AND B.FLT_KEY=A.FLT_KEY AND B.FLT_TYPE='D' 
			AND B.SCH_DATE=A.FLT_DATE
	</select>	
	<select id="amend_uld_no_get_items" parameterClass="cargo.cms.export.bo.AmendUldNoBO" resultClass="cargo.cms.export.bo.AmendUldNoItemBO">
		SELECT 
			A.AWB_NO AS awbNo, SUBSTR(A.AWB_NO,1,3)||'-'||SUBSTR(A.AWB_NO,4) AS awbNoDisp, B.CATALOG AS catalog, 
			(SELECT 
		          (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		          (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
		          THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		          ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		       FROM AWB A WHERE  A.AWB_NO=B.AWB_NO AND A.AWB_DATE=B.AWB_DATE) as cargoType, 
			case when B.AWB_TYPE = 'E' then
            (SELECT V.CC_CODE FROM V_CST_EXP_CC_CODE V
              	WHERE V.FLT_KEY = A.FLT_KEY AND V.FLT_DATE = A.FLT_DATE AND V.AWB_NO = B.AWB_NO AND V.HAWB_NO = '000000000000000000' AND ROWNUM = 1)
                when B.AWB_TYPE = 'T' then
            (SELECT V.CC_CODE FROM V_CST_TRM_CC_CODE V
              	WHERE V.AWB_NO = B.AWB_NO AND V.HAWB_NO = '000000000000000000' AND ROWNUM = 1) end as cc,
			B.PMAN_PCS AS manfPc, 
			B.PMAN_WT AS manfWt, A.ASSIGNED_PCS AS oldAssgnPc, A.ASSIGNED_WT AS oldAssgnWt, A.ASSIGNED_PCS AS newAssgnPc, A.ASSIGNED_WT AS newAssgnWt 
		FROM 
			EXP_PMANIFEST_ULD_AWB A, AWB B 
		WHERE 
			 A.FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#arrDate#, 'DDMONYY') AND A.ULD_BT_NO=#oldUld# AND A.AWB_NO=B.AWB_NO 
			 AND A.AWB_DATE=B.AWB_DATE AND B.AWB_TYPE IN ('E','T') 
		ORDER BY A.AWB_NO
	</select>	
	<insert id="amend_uld_no_update_in_uld_inv_1_insert" parameterClass="java.util.HashMap">
		INSERT INTO ULD_INVENTORY 
			(ULD_KEY, ULD_TYPE, ULD_NO, ULD_CARR, CARR_CODE, FLT_NO, FLT_TYPE, FLT_DATE, FLT_KEY, BASE_PLT, WH_DEST, LOC_CODE, EIC_UNLDG_PT, EIC_FLG, EMPTY_FLG, 
			BASE_PAL_FLG, CONTR_CODE, CONDN_CODE, OWNER_ID, SURP_I, RESV_FLG, RESV_DATE, STRG_DATE, RTRV_DATE, RESV_USER_ID, TARE_WEIGHT, PPK_IND, GROSS_WEIGHT, 
			GEN_RMK, DAM_RMK, RESV_RMK, RMV_RMK, IMAGE_REF, SOURCE_CODE, DEST_CODE, AGENT_INV, CFM_STATUS, AGENT_ID, LM_USER_ID, LM_DATE, OWNED_INV, UAF_FLG) 
    		(SELECT #newUld#, ULD_TYPE, ULD_NO, ULD_CARR, CARR_CODE, FLT_NO, FLT_TYPE, FLT_DATE, FLT_KEY, BASE_PLT, WH_DEST, LOC_CODE, EIC_UNLDG_PT, EIC_FLG, EMPTY_FLG, 
    		BASE_PAL_FLG, CONTR_CODE, CONDN_CODE, OWNER_ID, SURP_I, RESV_FLG, RESV_DATE, STRG_DATE, RTRV_DATE, RESV_USER_ID, TARE_WEIGHT, PPK_IND, GROSS_WEIGHT, 
    		GEN_RMK, DAM_RMK, RESV_RMK, RMV_RMK, IMAGE_REF, SOURCE_CODE, DEST_CODE, AGENT_INV, CFM_STATUS, AGENT_ID, LM_USER_ID, LM_DATE, OWNED_INV, UAF_FLG 
    		FROM ULD_INVENTORY WHERE ULD_KEY=#oldUld#)  
	</insert>	
	<update id="amend_uld_no_update_in_uld_inv_2_update" parameterClass="java.util.HashMap">
		UPDATE
			ULD_INVENTORY
		SET
			FLT_KEY=#fltKey#, FLT_NO=#fltNo#, CARR_CODE=#fltCarr#, FLT_DATE=#arrDate#, EMPTY_FLG='N', CFM_STATUS=(SELECT CFM_STATUS FROM ULD_INVENTORY WHERE ULD_KEY=#oldUld#), 
			CONTR_CODE=#contrcode#, REF_TR_NO=ULD_KEY, REF_TR_TYPE='AN', REF_TR_DATE=sysdate, REF_TR_EVENT='AN', REF_DOC_LINE_NO=1, LM_USER_ID=#userId#, LM_DATE=SYSDATE 
		WHERE 
			ULD_KEY=#newUld#
	</update>	
	<update id="amend_uld_no_update_in_awb_inv_1_update" parameterClass="java.util.HashMap">		
		UPDATE
			AWB_INVENTORY
		SET
			ULD_KEY=#newUld#, 
			<!-- WH_DEST=(SELECT WH_DEST FROM ULD_INVENTORY WHERE ULD_KEY=#oldUld#), --> 
			LOC_CODE=(SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY=#oldUld#), 
			LM_USER_ID=#userId#, LM_DATE=SYSDATE
		WHERE
			ULD_KEY=#oldUld#		
	</update>
	
	<update id="amend_uld_no_update_in_uld_inv_1_update" parameterClass="java.util.HashMap">
		UPDATE
			ULD_INVENTORY
		SET
		   	GROSS_WEIGHT=0, TARE_WEIGHT=0, CARR_CODE=NULL, FLT_NO=NULL, FLT_KEY=NULL, FLT_DATE=NULL, EMPTY_FLG='Y', CFM_STATUS='CONFIRMED', 
		   	REF_TR_NO=ULD_KEY, REF_TR_TYPE='AN', REF_TR_DATE=SYSDATE, REF_TR_EVENT='AN', REF_DOC_LINE_NO=1, LM_USER_ID=#userId#, LM_DATE=SYSDATE 
		WHERE 
			ULD_KEY = #oldUld#
	</update>	
	<update id="amend_uld_no_update_in_pmanf_uld" parameterClass="java.util.HashMap">
		UPDATE
			EXP_PMANIFEST_ULD
		SET
			ULD_BT_NO=#newUld#, CONTR_CODE=#contrcode#, LM_USER_ID=#userId#, LM_DATE=SYSDATE 
		WHERE 
			FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#arrDate#, 'DDMONYY') AND ULD_BT_NO=#oldUld#
	</update>	
	<update id="amend_uld_no_update_in_pmanf_uld_awb" parameterClass="java.util.HashMap">
		UPDATE
			EXP_PMANIFEST_ULD_AWB
		SET
			ULD_BT_NO=#newUld#, LM_USER_ID=#userId#, LM_DATE=SYSDATE 
		WHERE 
			FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#arrDate#, 'DDMONYY') AND ULD_BT_NO=#oldUld# AND AWB_NO=#awbNo# 
	</update>
	<insert id="insert_BT_NO" parameterClass="java.util.HashMap">
		INSERT INTO ULD_INVENTORY 
			(ULD_KEY, ULD_NO, CONDN_CODE, OWNER_ID, STRG_DATE, PPK_IND, LM_USER_ID, LM_DATE) 
		VALUES 
			(#newUld#, #newUldNo#, 'SER', '---', SYSDATE ,'N' ,#modifiedUser#, SYSDATE)
    </insert>
    <delete id="sqlDeleteUldInventory" parameterClass="java.lang.String">
    	DELETE FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey#
    </delete>
    <delete id="sqlDeletePreManifestULD" parameterClass="cargo.cms.export.bo.CreateULDBO">
    	DELETE FROM EXP_PMANIFEST_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND FLT_TYPE='E'
    </delete>
    <!-- 'UNLDG_PT=#unldgPt# AND' remove from where condition for problem fix PR101294 --> 
    <select id="sqlGetExpPMnfstUldAwbTrNo" parameterClass="java.util.HashMap" resultClass="java.lang.String">
    	SELECT TR_NO FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND 
    		AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey#
    </select>
    <delete id="sqlDeletePMnfstUldAwb" parameterClass="java.lang.String">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB WHERE TR_NO=#trNo#
    </delete>
    <delete id="sqlDeletePMnfstUldAwbHawb" parameterClass="java.lang.String">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB_HAWB WHERE TR_NO=#trNo#
    </delete>
    <delete id="sqlDeletePMnfstUldAwbUn" parameterClass="java.lang.String">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB_UN WHERE TR_NO=#trNo#
    </delete>
    <delete id="sqlDeletePMnfstUldAwbTag" parameterClass="java.lang.String">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB_TAG WHERE TR_NO=#trNo#
    </delete>
    <delete id="sqlDeletePMnfstUldAwbSHC" parameterClass="java.lang.String">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO=#trNo#
    </delete>
    <update id="sqlDeleteAwbInventory" parameterClass="java.util.HashMap">
    	UPDATE AWB_INVENTORY SET LOCN_PCS=LOCN_PCS-NVL(#undoPcs#, 0), LOCN_WT=LOCN_WT-NVL(#undoWt#, 0) 
    	WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY = #uldKey#
    </update>
    <select id="sqluldpremanfassignmentforundo" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">		               
		SELECT ROWNUM, CONCAT(CONCAT(SUBSTR(T1.AWB_NO,0,3),'-'),SUBSTR(T1.AWB_NO,4)) as awbNoDisplay ,T1.AWB_NO as awbNo, to_char(T1.AWB_DATE,'DDMONYY') as awbDate, 
	         T2.CATALOG as catalog, T2.DEST as dest,
			 pkg_exp_val.get_exp_awb_cc_code(t1.flt_key, t1.flt_date, t1.awb_no) as cccode, 
	         UNLDG_PT as unLdgPt, GROUP_NO as groupno, BULK_PCS as preManfBulkPc, BULK_WT as preManfBulkWt, 
    	     (BULK_PCS-ASSIGNED_BULK_PCS) as unassignedPcs, (BULK_WT-ASSIGNED_BULK_WT) as unassignedWt,     
    	     MAN_RMK as manfRmk, BLDUP_INSTR as buldpInstr,
    	     FLT_KEY as fltNo,TO_CHAR(FLT_DATE,'DDMONYY')  as fltDate,UNLDG_PT as unLdgPt
		FROM   EXP_PMANIFEST_AWB T1, AWB T2 
			WHERE  T1.AWB_NO = T2.AWB_NO
				AND    T1.AWB_DATE = T2.AWB_DATE
				AND    FLT_KEY = #fltNo#
				AND    FLT_DATE = #fltDate#
				AND    UNLDG_PT = #unldgPt#
				AND    EXISTS
					 (SELECT NULL
                   		FROM   EXP_PMANIFEST_ULD_AWB T3
		                   WHERE  FLT_KEY = #fltNo#
        		           AND    FLT_DATE = #fltDate#
                		   AND    T3.ULD_BT_NO = #uldNo#
		                   AND    UNLDG_PT = #unldgPt#
        		           AND    T3.AWB_NO = T1.AWB_NO
                		   AND    T3.AWB_DATE = T1.AWB_DATE	)	               
				
	</select>
	<select id="sqluldawblistforevents" parameterClass="java.util.HashMap"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">
	SELECT AWB_NO awbNo,TO_CHAR(AWB_DATE,'DDMONYY') awbDate,FLT_KEY fltKey,TO_CHAR(FLT_DATE,'DDMONYY') fltDate,unldg_pt unLdgPt,ASSIGNED_PCS oldAssignBulkPcs,ASSIGNED_WT oldAssignBulkWt,uld_bt_no as uldKey FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldKey# AND UNLDG_PT=#unldgPt#
	</select>
	<select id="getAWBdataforevents" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">
	SELECT AWB_NO awbNo,TO_CHAR(AWB_DATE,'DDMONYY') awbDate,FLT_KEY fltKey,TO_CHAR(FLT_DATE,'DDMONYY') fltDate,unldg_pt unLdgPt,ASSIGNED_PCS oldAssignBulkPcs,ASSIGNED_WT oldAssignBulkWt FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldKey# AND UNLDG_PT=#unLdgPt# and awb_no=#awbNo# and awb_date=#awbDate#
	</select>
	<select id="findUldReadyForDispatch" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMANIFEST_ULD WHERE READY_DISP='Y' AND ULD_BT_NO=#oldUld# AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#arrDate#, 'DDMONYY')
	</select>
	<select id="findUldInMHS" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT 
			COUNT(1) 
		FROM 
			ULD_INVENTORY A, MAST_WH_LOC B, MAST_WH_GROUP C, MAST_WH_TYPE D 
		WHERE 
			A.LOC_CODE=B.CODE AND B.WH_GROUP=C.WH_GROUP AND C.WH_TYPE=D.WH_TYPE AND D.WH_TYPE='MHS' AND A.ULD_KEY=#uldKey#
	</select>
	<select id="sqlFindUldPrePackStatus" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey# AND (PPK_IND='Y' OR MIX_PPK_IND='Y')
	</select>
	<update id="sqlUpdateExpFltUldWt" parameterClass="java.util.HashMap">
		UPDATE 
			EXP_FLT_ULD 
		SET 
			GROSS_WT=(MAN_WT + TARE_WT), NET_WT=MAN_WT 
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND UNLDG_PT=#unldgPt# AND FLT_TYPE='E'
	</update>

	<update id="updateExpFltUldTareWt" parameterClass="java.util.HashMap">
		UPDATE 
			EXP_FLT_ULD 
		SET 
			TARE_WT = nvl(#tareWt#,TARE_WT), GROSS_WT = nvl(#grossWt#,GROSS_WT),NET_WT = (nvl(#grossWt#,GROSS_WT) - nvl(#tareWt#,TARE_WT))
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND UNLDG_PT=#unldgPt# AND FLT_TYPE='E'
	</update>
	<update id="updateExpPmanUldTareWt" parameterClass="java.util.HashMap">
		UPDATE 
			exp_pmanifest_uld 
		SET 
			TARE_WT = nvl(#tareWt#,TARE_WT) , GROSS_WT = nvl(#grossWt#,GROSS_WT)
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND UNLDG_PT=#unldgPt# AND FLT_TYPE='E'
	</update>
	<select id="sqlFetchAwbDtlsByUldKey" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM AWB_INVENTORY WHERE (ULD_KEY=#uldKey# OR LSP_NO=#uldKey#)
	</select>
	<update id="sqlUpdateEmptyFlgInUldInv" parameterClass="java.util.HashMap">
		UPDATE ULD_INVENTORY SET EMPTY_FLG=#emptyFlg# WHERE ULD_KEY=#uldKey#
	</update>
	<update id="sqlUpdateUldInvPpk" parameterClass="java.util.HashMap">
		UPDATE ULD_INVENTORY SET EMPTY_FLG=#emptyFlg#, PPK_IND='Y' WHERE ULD_KEY=#uldKey#
	</update>
	<delete id="deleteAwbInvForUndo" parameterClass="java.util.HashMap">
		DELETE FROM 
			AWB_INVENTORY 
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY') 
			AND ULD_KEY = #uldKey# AND LOCN_PCS=0
	</delete>
	
	<select id="isUldOffSiteEmpty" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE OWNED_INV='N' AND EMPTY_FLG='Y' AND ULD_KEY=#uldKey#
	</select>
	
	<select id="isUldOffSiteEmptyRCL" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE OWNED_INV='Y' AND ULD_KEY=#uldKey#
	</select>
	
	<select id="isUldEmptyInCpctInv" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE EMPTY_FLG='Y' AND ULD_KEY=#uldKey#
	</select>
	<update id="updateAwbInvForAmendUldNoPpk" parameterClass="java.util.HashMap">
		UPDATE 
			AWB_INVENTORY 
		SET 
			ULD_KEY=#uldKey#,PPK_IND = 'B' 
		WHERE 
			ULD_KEY=(SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='Dummy_H_Container') AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND PPK_IND IN ('P','M')
	</update>
	<update id="updateUldInvForAmendUldNo" parameterClass="java.lang.String">
		UPDATE 
			ULD_INVENTORY 
		SET 
			FIRST_WT='', SECOND_WT='', THIRD_WT='', FINAL_WEIGHT='', PPK_IND='N', MIX_PPK_IND='N', HANDLING_MODE='', TR_TYPE = 'AMULD'
		WHERE 
			ULD_KEY=#uldKey#
	</update>
	<select id="sqlFetchExpPmanAwbExists" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT 
			COUNT(1) 
		FROM 
			EXP_PMANIFEST_AWB 
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY') AND UNLDG_PT=#unldgPt#
	</select>
	<insert id="insertExpPmanAwbPpk" parameterClass="java.util.HashMap">
		INSERT INTO EXP_PMANIFEST_AWB
			(AWB_NO,FLT_KEY,FLT_DATE,UNLDG_PT,SHP_TYPE,BULK_PCS,BULK_WT,PPK_PCS,PPK_WT,PMAN_PCS,PMAN_WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,FLT_TYPE,AWB_DATE, MIX_PCS, MIX_WT,
			UNASSIGNED_BULK_PCS, UNASSIGNED_BULK_WT) 
		VALUES
			(#awbNo#,#fltKey#,TO_DATE(#fltDate#,'DDMONYY'),#unldgPt#,'LOCAL',#bulkPcs#,#bulkWt#,#ppkPcs#,#ppkWt#,#pmanPcs#,#pmanWt#,#userId#,SYSDATE,#userId#,SYSDATE,'E',TO_DATE(#awbDate#,'DDMONYY'),
			#mixPcs#, #mixWt#,#unAssignedPcs#,#unAssignedWt#)
	</insert>
	<select id="fetchLocnPcWtForOldUld" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			LOCN_PCS, LOCN_WT, SEQ_NO 
		FROM 
			AWB_INVENTORY 
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#oldUldKey#
	</select>
	<update id="updateAwbInvLocnPcWtForNewUld" parameterClass="java.util.HashMap">
		UPDATE 
			AWB_INVENTORY 
		SET 
			LOCN_PCS=LOCN_PCS+#undoPcs#, LOCN_WT=LOCN_WT+#undoWt# 
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey#
	</update>
	<delete id="deleteAwbInvAmndUldNo" parameterClass="java.lang.String">
		DELETE FROM AWB_INVENTORY WHERE SEQ_NO=#seqNo#
	</delete>
	<update id="updateAwbInvForPpkMixAmdUldNo" parameterClass="java.util.HashMap">
		UPDATE 
			AWB_INVENTORY 
		SET 
			FLT_KEY=#fltKey#, FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY'), FLT_TYPE='E', ULD_KEY=#newUldKey#, LOCN_PCS = #locnPcs#, LOCN_WT = #locnWt#
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND ULD_KEY=(SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='Dummy_H_Container') AND 
			FLT_KEY IS NULL AND FLT_DATE IS NULL
	</update>
	<update id="updateAwbInvForPpkMixAmdNewUldNo" parameterClass="java.util.HashMap">
		UPDATE 
			AWB_INVENTORY 
		SET 
			LOCN_PCS = #locnPcs#, LOCN_WT = #locnWt#
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND ULD_KEY=#newUldKey# AND 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE='E'
	</update>
	<!-- Amend ULD No :: Anup :: Ends -->

<!-- Amend/Delete ULD Assignment :: Anup :: Begins -->
	<update id="amenduld_searchbyuld_accessorydeleteAll" parameterClass="java.util.HashMap">
    	DELETE FROM EXP_ULD_ACC
    	WHERE
    		FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_KEY=#uldNo# AND ACTIVITY='BUILDUP'			
	</update>
	<delete id="amenduld_searchbyuld_assignmentdelete" parameterClass="java.util.HashMap">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB
    	WHERE
    		FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY') AND UNLDG_PT=#unldgpt# 
    		AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') AND ULD_BT_NO=#uldNo#
	</delete>
	<update id="amenduld_searchbyuld_accessorydelete" parameterClass="java.util.HashMap">
    	DELETE FROM EXP_ULD_ACC
    	WHERE
    		FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_KEY=#uldNo# AND ACTIVITY='BUILDUP' 
    		AND EQUIP_TYPE=#equipTypeDB#    	
	</update>
	<update id="amenduld_searchbyuld_assignmentupdate" parameterClass="java.util.HashMap">
    	UPDATE EXP_PMANIFEST_AWB
    	SET
    		ASSIGNED_BULK_PCS=#newPcs#,
    		ASSIGNED_BULK_WT=#newWt#
    	WHERE
    		FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND UNLDG_PT=#unldgpt# AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY')
	</update>
	<update id="amenduld_searchbyuld_assignmentupdate2" parameterClass="java.util.HashMap">
    	UPDATE EXP_PMANIFEST_ULD_AWB
    	SET
    		ASSIGNED_PCS= #newPcs#,
    		ASSIGNED_WT= TO_CHAR(#newWt#,'9999990D99')
    	WHERE
    		FLT_KEY = #fltKey#
			AND FLT_DATE =#fltDate#
			AND UNLDG_PT =#unldgpt#
			AND AWB_NO = #awbNo#
			AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
			AND ULD_BT_NO = #uldNo#
	</update>
	<update id="amenduld_searchbyuld_accessoryupdate" parameterClass="java.util.HashMap">
    	UPDATE EXP_ULD_ACC
    	SET
    		EQUIP_TYPE=#equipType#,
    		QTY=#qty#
    	WHERE
    		FLT_KEY = #fltKey#
			AND FLT_DATE =#fltDate#
			AND ULD_KEY =#uldNo#
			AND ACTIVITY = 'BUILDUP'
			AND EQUIP_TYPE = #equipTypeDB#    	
	</update>
	<select id="sqlFetchAwbInvDtls" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT SEQ_NO as seqNo, CARR_CODE as carr FROM AWB_INVENTORY WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	<select id="sqlFetchUnldgPtByUld" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT UNLDG_PT FROM EXP_PMANIFEST_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey#
	</select>
	<select id="sqlFetchUnldgPtByAwb" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT UNLDG_PT FROM EXP_PMANIFEST_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
	</select>
	<select id="sqlFetchFltSectorForUnldgPtClosedYN" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(LEG_STATUS, 'N') FROM FLT_OPR_LEG WHERE FLT_KEY=#fltKey# AND SCH_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE='D' AND OFF_POINT=#unldgPt#
	</select>
	<select id="fetchAwbDate" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(pkg_common.get_awb_date(#awbNo#, #awbType#), TRUNC(SYSDATE)) FROM DUAL
	</select>
	<select id="sqlIsAwbCon">
		SELECT 
			COUNT(1) 
		FROM 
			AWB A, MAST_SPL_HAND_CODE B 
		WHERE 
			(B.CODE=A.SPL_CODE1 OR B.CODE=A.SPL_CODE2 OR B.CODE=A.SPL_CODE3 OR B.CODE=A.SPL_CODE4 OR B.CODE=A.SPL_CODE5 OR 
			B.CODE=A.SPL_CODE6 OR B.CODE=A.SPL_CODE7 OR B.CODE=A.SPL_CODE8 OR B.CODE=A.SPL_CODE9) AND b.BLDUP_RELATED='Y' 
			AND A.AWB_NO='16030811056' AND A.AWB_DATE=TO_DATE('04AUG11', 'DDMONYY')
	</select>
	<select id="sqlFetchAwbPmanfstedStatus" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMANIFEST_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')
	</select>
	<select id="sqlFetchAwbBuildUpStatus" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY')
	</select>
	<select id="sqlFetchUldReserveStatus" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT NVL(RESV_FLG, 'N') AS reserveFlg FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey#
	</select>
	<select id="sqlFetchBldUpCompleteForUld" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT NVL(BLDUP_COMPLETE, 'N') as bldupComp FROM EXP_PMANIFEST_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey#
	</select>
	<select id="sqlFetchDGLoadPksDtls" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT 
			B.LOAD_QTY as loadPkg 
		FROM 
			EXP_PMANIFEST_ULD_AWB A, EXP_PMANIFEST_ULD_AWB_UN B 
		WHERE 
			B.TR_NO=A.TR_NO AND A.AWB_NO=#awbNo# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND A.FLT_KEY=#fltKey# AND 
			A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND A.ULD_BT_NO=#uldKey# AND A.UNLDG_PT=#unldgPt# AND B.OVERPACK_ID=#opApUnId#
	</select>
	<select id="sqlFetchAwbInvDtlsForAmndDelete" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT SEQ_NO as seqNo FROM AWB_INVENTORY WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND LOC_CODE=#locCode# AND FLT_KEY IS NULL
		 AND SRF_NO IS NULL AND CDIF_NO IS NULL AND TRM_NO IS NULL
		<isNotEmpty property="lspNo">
			AND LSP_NO=#lspNo# 
		</isNotEmpty>
		<isNotEmpty property="btNo">
			AND ULD_KEY=#btNo# 
		</isNotEmpty>
		<isEmpty property="lspNo">
			AND LSP_NO IS NULL 
		</isEmpty>
		<isEmpty property="btNo">
			AND ULD_KEY IS NULL
		</isEmpty>
	</select>
	<update id="sqlAmndDelUldAssgnUpdateAwbInv" parameterClass="java.util.HashMap">
		UPDATE 
			AWB_INVENTORY 
		SET 
			LOCN_PCS=LOCN_PCS + NVL(#locnPc#, 0), LOCN_WT=LOCN_WT + NVL(#locnWt#, 0) 
		WHERE 
			SEQ_NO=#seqNo#
	</update>
	<insert id="sqlInsertAwbInvForAmendDelete" parameterClass="java.util.HashMap">
		INSERT INTO AWB_INVENTORY
			(AWB_NO, AWB_DATE, CARR_CODE, LOCN_PCS, LOCN_WT, STRG_DATE, PPK_IND, LSP_NO, LOC_CODE, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, SEQ_NO, ULD_KEY) 
		VALUES 
			(#awbNo#, #awbDate#, #carrCode#, #locnPcs#, #locnWt#, SYSDATE, #ppkType#, #lspNo#, #locCode#, #userId#, SYSDATE, #userId#, SYSDATE, #seqNo#, #uldKey#)
	</insert>	
	<insert id="sqlInsertAwbInvForAmendDeleteAmendFlt" parameterClass="java.util.HashMap">
		INSERT INTO AWB_INVENTORY
			(AWB_NO, AWB_DATE, CARR_CODE, LOCN_PCS, LOCN_WT, STRG_DATE, PPK_IND, LSP_NO, LOC_CODE, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, SEQ_NO, ULD_KEY,
			FLT_KEY,FLT_DATE,FLT_TYPE) 
		VALUES 
			(#awbNo#, #awbDate#, #carrCode#, #locnPcs#, #locnWt#, SYSDATE, #ppkType#, #lspNo#, #locCode#, #userId#, SYSDATE, #userId#, SYSDATE, AWB_INV_SEQ.NEXTVAL, #uldKey#,
			#newFltKey#,to_date(#newFltDate#,'DDMONYY'),#fltType#)		
	</insert>	
	<update id="sqlAmndDelUldAssgnUpdateAwbInvAmendFlt" parameterClass="java.util.HashMap">
		UPDATE 
			AWB_INVENTORY 
		SET 
			LOCN_PCS=LOCN_PCS + NVL(#locnPc#, 0), LOCN_WT=LOCN_WT + NVL(#locnWt#, 0),
			FLT_KEY = #newFltKey#, FLT_DATE = to_date(#newFltDate#,'DDMONYY'), FLT_TYPE = #fltType#
		WHERE 
			SEQ_NO=#seqNo#
	</update>
	<select id="sqlFetchLspExistsInInventory" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM LSP_INVENTORY WHERE LSP_NO=#lspNo#
	</select>
	<insert id="sqlInsertLspIntoInventory" parameterClass="cargo.cms.uld.bo.LSPBO">
		INSERT INTO LSP_INVENTORY
			(LSP_NO, EMPTY_FLG, LOC_CODE, STRG_DATE, LOCKED, STATUS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, 
			REF_TR_NO, REF_TR_TYPE, REF_TR_EVENT, REF_TR_DATE, REF_DOC_LINE_NO, LSP_TYPE)
		VALUES (#lspNo#, #emptyFlag#, #locationCode#, SYSDATE, #lockStatus#, #status#, #crUserId#, SYSDATE, #lmUserId#, 
			SYSDATE, #refTrNo#, #refTrType#, #refTrEvent#, SYSDATE, #refDocLineNo#, SUBSTR(#lspNo#, 0, 1))
	</insert>
	<insert id="sqlInsertExpPmanUldAwbHawb" parameterClass="cargo.cms.export.bo.PreManifestAWBBO">
		INSERT INTO EXP_PMANIFEST_ULD_AWB_HAWB
			(TR_NO, HAWB_NO, PC, WT, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE) 
		VALUES
			(#preManfTrNo#, #hawbNo#, #pc#, #wt#, #crUserId#, SYSDATE, #crUserId#, SYSDATE)
	</insert>
	<select id="sqlFetchExpPmanUldAwbShcDtls" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT B.SHC    AS shcOne,
			  B.SHC2        AS shcTwo,
			  B.SHC3        AS shcThree,
			  B.SHC4        AS shcFour,
			  B.SHC5        AS shcFive,
			  B.SHC6        AS shcSix,
			  B.SHC7        AS shcSeven,
			  B.SHC8        AS shcEight,
			  B.SHC9        AS shcNine,
			  B.DOC_LINE_NO AS docLine,
			  B.PCS         AS pc,
			  B.REMARKS     AS shcRemarks,
			  B.REMARKS     AS oldShcRemarks,
			  B.tr_no       AS preManfTrNo,
			 (select DECODE(COUNT(1),'0','N','Y') from CUST_AIRL_SPL_CODE where spl_type ='SPL_DANG' and carr_code = 
			    (select carr_code from awb where AWB_NO   = A.AWB_NO AND AWB_DATE = A.AWB_DATE ) and spl_code in
			        (b.SHC,b.SHC2,b.SHC3,b.SHC4,b.SHC5,b.SHC6,b.SHC7,b.SHC8,b.SHC9) ) as awbDgInd
			FROM EXP_PMANIFEST_ULD_AWB A,
			  EXP_PMANIFEST_ULD_AWB_SHC B
			WHERE B.TR_NO  =A.TR_NO
			AND A.FLT_KEY  =#fltNo#
			AND A.FLT_DATE =TO_DATE(#fltDate#, 'DDMONYY')
			AND A.ULD_BT_NO=#uldKey#
			AND A.UNLDG_PT =#unLdgPt#
			AND A.AWB_NO   =#awbNo#
			AND A.AWB_DATE =TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	<select id="sqlFetchExpPmanUldAwbDGDtls" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT 
    		B.OVERPACK_ID as overpackApioUnid, B.APIO_ID as apioUnid, B.UN_TR_NO as unid, B.LOAD_QTY as loadPkg
    	FROM 
    		EXP_PMANIFEST_ULD_AWB A, EXP_PMANIFEST_ULD_AWB_UN B 
    	WHERE 
    		B.TR_NO=A.TR_NO AND A.FLT_KEY=#fltNo# AND A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND A.ULD_BT_NO=#uldKey# AND A.UNLDG_PT=#unLdgPt# 
    		AND A.AWB_NO=#awbNo# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
	</select>
	<update id="sqlAmndDelUpdateExpPmanAwb" parameterClass="java.util.HashMap">
		UPDATE 
			EXP_PMANIFEST_AWB 
		SET 
			ASSIGNED_BULK_WT=ASSIGNED_BULK_WT + NVL(#assignedWt#, 0),LM_USER_ID=#userId#, LM_DATE=SYSDATE 
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
	</update>
	<select id="sqlAmndDelFetchTrNoExpPmanUldAwb" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT TR_NO as trNo FROM EXP_PMANIFEST_ULD_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ULD_BT_NO=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
	</select>
	<update id="sqlAmndDelUpdateExpPmanUldAwb" parameterClass="java.util.HashMap">
		UPDATE EXP_PMANIFEST_ULD_AWB SET ASSIGNED_WT=ASSIGNED_WT + NVL(TO_CHAR(#assignedWt#,'9999990D99'), 0), LM_USER_ID=#userId#, LM_DATE=SYSDATE WHERE TR_NO=#trNo#
	</update>
	<update id="sqlAmndDelUpdateExpFltUld" parameterClass="java.util.HashMap">
		UPDATE 
			EXP_FLT_ULD 
		SET 
			MAN_WT=MAN_WT+NVL(#assignedWt#, 0), NET_WT=(MAN_WT+NVL(#assignedWt#, 0)-TARE_WT), LM_USER_ID=#userId#, LM_DATE=SYSDATE 
		WHERE 
			ULD_KEY=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
	</update>
	<update id="sqlAmndDelUpdateAwb" parameterClass="java.util.HashMap">
		UPDATE AWB SET BLDUP_BULK_WT=BLDUP_BULK_WT+NVL(#assignedWt#, 0), LM_USER_ID=#userId#, LM_DATE=SYSDATE,TR_TYPE=#trType# WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</update>
	<update id="sqlAmndDelUpdateAwbInventory" parameterClass="java.util.HashMap">
		UPDATE 
			AWB_INVENTORY 
		SET 
			LOCN_WT=LOCN_WT+NVL(#assignedWt#, 0), LM_USER_ID=#userId#, LM_DATE=SYSDATE 
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ULD_KEY=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
	</update>		
	<select id="getULDUnldgPt" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT UNLDG_PT as unldg_pt FROM EXP_PMANIFEST_ULD WHERE ULD_BT_NO=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
	</select>
	<select id="sqlFetchUAFCreatedForUld" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_FLT_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND SOURCE IN ('UAF-E', 'UAF-L')
	</select>
	<select id="sqlFetchLspExistsInAwbInventory" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM AWB_INVENTORY WHERE LSP_NO=#lspNo#
	</select>
	<update id="updateEmptyFlagInUldInventory" parameterClass="java.util.HashMap">
		UPDATE ULD_INVENTORY SET EMPTY_FLG=#emptyFlag# WHERE ULD_KEY=#uldKey#
	</update>
	<update id="updateEmptyFlagInLspInventory" parameterClass="java.util.HashMap">
		UPDATE LSP_INVENTORY SET EMPTY_FLG=#emptyFlag# WHERE LSP_NO=#lspNo#
	</update>
	<!-- Amend/Delete ULD Assignment :: Anup :: Ends -->

	<!-- ################################################################################################# -->
	<!-- Flight Control Queries Start -->
		<select id="sqlFetchFlightControlHeader" parameterClass="cargo.cms.export.buildup.bo.FlightControlBO" resultClass="cargo.cms.export.buildup.bo.FlightControlBO">
			SELECT 
        		OPR.FLT_KEY AS fltKey,
        		TO_CHAR(OPR.SCH_DATE,'DDMONYY') AS fltDate,
        		DECODE(OPR.EST_TIME, NULL, '', SUBSTR(LPAD(OPR.EST_TIME, 4, 0), 1, 2) || ':' 
                            || SUBSTR(LPAD(OPR.EST_TIME, 4, 0), 3)||DECODE(OPR.EST_DATE, NULL, '', DECODE(OPR.SCH_DATE, NVL(OPR.EST_DATE, OPR.SCH_DATE), '', '/'
                            ||TO_CHAR(NVL(OPR.EST_DATE, OPR.SCH_DATE), 'DD')))) as fltTime,
        		NVL(EVENT.FINAL_MANF_IND,'N') AS manifestFinalizeYn,
        		DECODE(EVENT.TO_FINALIZE,NULL,'N','Y') AS toFinalize
      		FROM FLT_OPR OPR, FLT_OPR_EVENTS EVENT
      		WHERE OPR.TR_NO = EVENT.TR_NO
      		AND OPR.FLT_KEY = NVL(#fltKey#,OPR.FLT_KEY)
      		AND OPR.SCH_DATE = NVL(TO_DATE(#fltDate#,'DDMONYY'),OPR.SCH_DATE)
      		AND OPR.FLT_TYPE = 'D'
		</select>
		<select id="sqlFetchUldBuildupList" parameterClass="cargo.cms.export.buildup.bo.FlightControlBO" resultClass="cargo.cms.export.buildup.bo.FlightControlULDBO">
			SELECT
			  	ULD.ULD_BT_NO||'_H' AS section,
			  	ULD.ULD_BT_NO AS uldKey,
			  	NULL as tarmac,
			  	INV.TRANSIT_TYPE AS transferType,
			  	DECODE(PPK_IND,'N',DECODE(MIX_PPK_IND,'N',DECODE(TRANSIT_TYPE,NULL,'B',''),'M'),'P') AS joining,
			  	NVL(ULD.BLDUP_COMPLETE,'N') AS buYn,
				DECODE((select count(1) from uld_inventory where uld_key=ULD.ULD_BT_NO and handling_mode='DT'),'1','Y',
				 DECODE((select count(1) from exp_flt_uld where uld_key=ULD.ULD_BT_NO and flt_key=ULD.FLT_KEY and flt_date=ULD.FLT_DATE and (source='DLS-E' OR source='DLS-L')),'1','Y',
				  DECODE((SELECT CHKOUT_USER FROM EXP_CHKOUT_DTL WHERE FLT_KEY = ULD.FLT_KEY AND FLT_DATE = ULD.FLT_DATE  AND ULD_KEY = ULD.ULD_BT_NO),NULL,'N','Y'))) AS chkOutYn,
				(select decode(COUNT(1),'0','N','Y') from(
				select  b.tr_no,b.assigned_pcs as asspc,b.assigned_wt as asswt,sum(c.pc) as pc,sum(c.wt) as wt
				from exp_pmanifest_uld a
				join exp_pmanifest_uld_awb b on
				a.flt_key = b.flt_key and a.flt_date = b.flt_date 
				and a.uld_bt_no = b.uld_bt_no 
				join exp_pmanifest_uld_awb_hawb c
				on b.tr_no = c.tr_no
				and a.flt_key = #fltKey#
				and a.flt_date = to_date(#fltDate#,'DDMONYY')
				group by b.tr_no, b.assigned_pcs, b.assigned_wt)
				where  asspc > pc ) as hseBuDiscYn,
				DECODE((SELECT ULD_KEY FROM EXP_SUPER_URGENT WHERE FLT_KEY = ULD.FLT_KEY AND FLT_DATE = ULD.FLT_DATE AND 
											ULD_KEY = ULD.ULD_BT_NO AND STATUS NOT IN ('VOID','EXPIRED')),NULL,'N','Y') AS superUrgentCargoYn,
				NVL(INV.OFLD_FLG,'N') AS ofldYn,
				NULL AS readyForDispatchSysYn,
			  	ULD.READY_MAN_ID AS updateBy,
			  	ULD.READY_DISP as readyForDispatchManYn,
			  	ULD.READY_WH as readyWHInd,
			  	to_char(ULD.READY_MAN_DATE,'DDMONYY HH24:MI') AS updateTime,
			  	NULL AS awbNo,NULL AS awbDate,NULL AS awbType,NULL catalog,NULL cargoType,NULL AS awbNoDisplay,NULL AS cc,NULL AS docAccYn,NULL AS pmanYn,NULL AS carYn,NULL AS obcYn,NULL AS scYn
			FROM EXP_PMANIFEST_ULD ULD,ULD_INVENTORY INV
			WHERE 
				ULD.ULD_BT_NO = INV.ULD_KEY
				AND ULD.FLT_KEY = NVL(#fltKey#,ULD.FLT_KEY) AND ULD.FLT_DATE = NVL(TO_DATE(#fltDate#,'DDMONYY'),ULD.FLT_DATE)
				<isNotEmpty property="transferType">
                       AND INV.TRANSIT_TYPE = #transferType#
                </isNotEmpty>
                <isNotEmpty property="readyForDispatch">
                       AND ULD.READY_DISP = #readyForDispatch#
                </isNotEmpty>
			UNION ALL
			SELECT
			  	ULD.ULD_BT_NO||'_D' AS section,
			  	NULL AS uldKey,NULL as tarmac,NULL AS transferType,NULL AS joining,NULL AS buYn,NULL AS chkOutYn,NULL as hseBuDiscYn,NULL AS superUrgentCargoYn,NULL AS ofldYn,NULL AS readyForDispatchSysYn,
          		NULL AS updateBy,NULL AS readyForDispatchManYn,
          		NULL as readyWHInd,
          		NULL AS updateTime,
			  	AWB.AWB_NO AS awbNo,
			  	TO_CHAR(AWB.AWB_DATE,'DDMONYY') AS awbDate,
			  	AWB1.AWB_TYPE awbType,
			  	AWB1.CATALOG catalog,
				(SELECT 
				      (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
				      (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
				       THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
				       ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
				  FROM AWB  A
					  WHERE A.AWB_NO=AWB.AWB_NO AND A.AWB_DATE=AWB.AWB_DATE) as cargoType,
			  	SUBSTR(AWB.AWB_NO,0,3)||'-'||SUBSTR(AWB.AWB_NO,4) AS awbNoDisplay,
			  	PKG_EXP_VAL.GET_EXP_AWB_CC_CODE(AWB.FLT_KEY,AWB.FLT_DATE,AWB.AWB_NO) AS cc,
			  	(SELECT DECODE(A1.AWB_TYPE, 'T','NA','E',DECODE(A1.DOCACC_USER, NULL,'N','Y'),'I',DECODE(A1.DOCACC_USER, NULL,'N','Y')) 
			  	FROM AWB A1 WHERE A1.AWB_NO = AWB.AWB_NO AND A1.AWB_DATE = AWB.AWB_DATE)
			  	 AS docAccYn,
			  	(SELECT DECODE(COUNT(PMAN.AWB_NO),NULL,'N','Y') FROM EXP_PMANIFEST_AWB PMAN WHERE AWB.AWB_NO=PMAN.AWB_NO AND 
			  											AWB.AWB_DATE=PMAN.AWB_DATE AND AWB.FLT_KEY = PMAN.FLT_KEY AND AWB.FLT_dATE= PMAN.FLT_DATE) AS pmanYn,
			  	(SELECT DECODE(COUNT(A1.CAR_YN),0,'N','Y') FROM AWB A1 WHERE A1.AWB_NO = AWB.AWB_NO AND A1.AWB_DATE = AWB.AWB_DATE AND A1.CAR_YN='Y') AS carYn,
			  	(SELECT DECODE(COUNT(A1.AWB_NO),0,'N','Y') FROM AWB A1 WHERE A1.AWB_NO = AWB.AWB_NO AND A1.AWB_DATE = AWB.AWB_DATE AND A1.ACCEPT_MODE = 'LOB') AS obcYn,
			  	NULL AS scYn  
			FROM
				EXP_PMANIFEST_ULD ULD,EXP_PMANIFEST_ULD_AWB AWB JOIN AWB AWB1 ON AWB.AWB_NO=AWB1.AWB_NO AND AWB.AWB_DATE=AWB1.AWB_DATE
			WHERE 
				ULD.FLT_KEY = NVL(#fltKey#,ULD.FLT_KEY) AND ULD.FLT_DATE = NVL(TO_DATE(#fltDate#,'DDMONYY'),ULD.FLT_DATE)
				AND AWB.FLT_KEY = ULD.FLT_KEY 
				AND AWB.FLT_DATE = ULD.FLT_DATE
				AND AWB.ULD_BT_NO = ULD.ULD_BT_NO
				 UNION ALL      
			SELECT distinct
						 ( decode (TAR_AWB.BULK_PCS ,'0',ULD.ULD_BT_NO,'TARMAC BULK')	||'_H') AS section,
								( decode (TAR_AWB.BULK_PCS ,'0',ULD.ULD_BT_NO,'TARMAC BULK'))  AS uldKey,
								'TARMAC' as tarmac,
							'TT' AS transferType,
						 decode (TAR_AWB.BULK_PCS ,'0','P','B')	 AS joining,
							'Y' AS buYn,
					  'Y' AS chkOutYn,
							'NA' as hseBuDiscYn,
							DECODE((SELECT ULD_KEY FROM EXP_SUPER_URGENT WHERE FLT_KEY = ULD.FLT_KEY AND FLT_DATE = ULD.FLT_DATE AND 
														ULD_KEY = ULD.ULD_BT_NO AND STATUS NOT IN ('VOID','EXPIRED')),NULL,'N','Y') AS superUrgentCargoYn,
						'N' AS ofldYn,
							null AS readyForDispatchSysYn,
							null as updateBy,
							null as readyForDispatchManYn,
							'N' readyWHInd,			  	
							null as updateTime,
							NULL AS awbNo,NULL AS awbDate,NULL awbType,NULL catalog,NULL cargoType,NULL AS awbNoDisplay,NULL AS cc,'NA' AS docAccYn,NULL AS pmanYn,NULL AS carYn,NULL AS obcYn,NULL AS scYn
						FROM 
				  AWB AWB JOIN exp_pman_tarmac_awb TAR_AWB ON  AWB.AWB_NO=TAR_AWB.AWB_NO AND AWB.AWB_DATE=TAR_AWB.AWB_DATE JOIN exp_pman_tarmac_uld ULD   ON ULD.FLT_KEY = TAR_AWB.FLT_KEY AND ULD.FLT_DATE = TAR_AWB.FLT_DATE				     
						WHERE 
							 ULD.FLT_KEY = NVL(#fltKey#,ULD.FLT_KEY) AND ULD.FLT_DATE = NVL(TO_DATE(#fltDate#,'DDMONYY'),ULD.FLT_DATE)   
							 and TAR_AWB.BULK_PCS > 0
							 <isNotEmpty property="transferType">
								   AND 'TT' = #transferType#
							</isNotEmpty>
							 <isNotEmpty property="readyForDispatch">
								   AND 	'Y' = #readyForDispatch#
							</isNotEmpty>	
        UNION ALL
       SELECT distinct
			 ( decode (TAR_AWB.BULK_PCS ,'0',ULD.ULD_BT_NO,'TARMAC BULK')	||'_H') AS section,
			  	 	( decode (TAR_AWB.BULK_PCS ,'0',ULD.ULD_BT_NO,'TARMAC BULK'))  AS uldKey,
			  	 	'TARMAC' as tarmac,
			  	INV.TRANSIT_TYPE AS transferType,
			 decode (TAR_AWB.BULK_PCS ,'0','P','B')	 AS joining,
			  	'Y' AS buYn,
          'Y' AS chkOutYn,
				'NA' as hseBuDiscYn,
				DECODE((SELECT ULD_KEY FROM EXP_SUPER_URGENT WHERE FLT_KEY = ULD.FLT_KEY AND FLT_DATE = ULD.FLT_DATE AND 
											ULD_KEY = ULD.ULD_BT_NO AND STATUS NOT IN ('VOID','EXPIRED')),NULL,'N','Y') AS superUrgentCargoYn,
			NVL(INV.OFLD_FLG,'N') AS ofldYn,
				null AS readyForDispatchSysYn,
			  	case when INV.TRANSIT_TYPE='IF' then ULD.READY_MAN_ID else null end as updateBy,
			  	case when INV.TRANSIT_TYPE='IF' then NVL(ULD.READY_DISP,'N') else 'Y' end as readyForDispatchManYn,
			  	case when INV.OFLD_FLG ='Y' then 'N' else case when INV.TRANSIT_TYPE='IF' then NVL(ULD.READY_DISP,'N') else 'Y' end end as readyWHInd,			  	
			  	case when INV.TRANSIT_TYPE='IF' then to_char(ULD.READY_MAN_DATE,'DDMONYY HH24:MI') else null end as updateTime,
			  	NULL AS awbNo,NULL AS awbDate,NULL awbType,NULL catalog,NULL cargoType,NULL AS awbNoDisplay,NULL AS cc,'NA' AS docAccYn,NULL AS pmanYn,NULL AS carYn,NULL AS obcYn,NULL AS scYn
			FROM 
      AWB AWB JOIN exp_pman_tarmac_awb TAR_AWB ON  AWB.AWB_NO=TAR_AWB.AWB_NO AND AWB.AWB_DATE=TAR_AWB.AWB_DATE JOIN exp_pman_tarmac_uld ULD   ON ULD.FLT_KEY = TAR_AWB.FLT_KEY AND ULD.FLT_DATE = TAR_AWB.FLT_DATE
    LEFT OUTER JOIN ULD_INVENTORY INV ON ULD.uld_bt_no=INV.uld_key      
			WHERE 
				 ULD.FLT_KEY = NVL(#fltKey#,ULD.FLT_KEY) AND ULD.FLT_DATE = NVL(TO_DATE(#fltDate#,'DDMONYY'),ULD.FLT_DATE)          
				 and TAR_AWB.BULK_PCS = 0
         		 <isNotEmpty property="transferType">
                       AND INV.TRANSIT_TYPE = #transferType#
                </isNotEmpty>
                 <isNotEmpty property="readyForDispatch">
                       AND 	decode(INV.TRANSIT_TYPE,'IF' , NVL( ULD.READY_DISP,'N'), 'Y') = #readyForDispatch#
                </isNotEmpty>
       UNION ALL
			SELECT distinct
			  	ULD.ULD_BT_NO || '_D' AS section,
			  	NULL AS uldKey,NULL as tarmac,NULL AS transferType,NULL AS joining,NULL AS buYn,NULL AS chkOutYn,NULL as hseBuDiscYn,NULL AS superUrgentCargoYn,NULL AS ofldYn,NULL AS readyForDispatchSysYn,
          		NULL AS updateBy,NULL AS readyForDispatchManYn,
          		NULL as readyWHInd,
          		NULL AS updateTime,
			  	AWB.AWB_NO AS awbNo,
			  	TO_CHAR(AWB.AWB_DATE,'DDMONYY') AS awbDate,A1.AWB_TYPE awbType,A1.CATALOG catalog,
			    (SELECT 
				      (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
				      (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
				       THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
				       ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
				  FROM AWB  A
					  WHERE A.AWB_NO=AWB.AWB_NO AND A.AWB_DATE=AWB.AWB_DATE) as cargoType,
			  	SUBSTR(AWB.AWB_NO,0,3)||'-'||SUBSTR(AWB.AWB_NO,4) AS awbNoDisplay,
			  	PKG_EXP_VAL.GET_EXP_AWB_CC_CODE(AWB.FLT_KEY,AWB.FLT_DATE,AWB.AWB_NO) AS cc,
			  	(SELECT DECODE(A1.AWB_TYPE, 'T','NA','E',DECODE(A1.DOCACC_USER, NULL,'N','Y'),'I',DECODE(A1.DOCACC_USER, NULL,'N','Y')) 
			  	FROM AWB A1 WHERE A1.AWB_NO = AWB.AWB_NO AND A1.AWB_DATE = AWB.AWB_DATE)
			  	 AS docAccYn,
			  	'Y' AS pmanYn,
			  	(SELECT DECODE(COUNT(A1.CAR_YN),0,'N','Y') FROM AWB A1 WHERE A1.AWB_NO = AWB.AWB_NO AND A1.AWB_DATE = AWB.AWB_DATE AND A1.CAR_YN='Y') AS carYn,
			  	'N' AS obcYn,
			  	NULL AS scYn  
			FROM
				exp_pman_tarmac_awb TAR_AWB  JOIN AWB A1 ON A1.AWB_NO=TAR_AWB.AWB_NO AND A1.AWB_DATE=TAR_AWB.AWB_DATE JOIN exp_pman_tarmac_uld ULD ON ULD.FLT_KEY = TAR_AWB.FLT_KEY AND ULD.FLT_DATE = TAR_AWB.FLT_DATE
        and TAR_AWB.BULK_PCS=0
        LEFT OUTER JOIN exp_pman_tarmac_uld_AWB AWB ON 	AWB.FLT_KEY = ULD.FLT_KEY 
				AND AWB.FLT_DATE = ULD.FLT_DATE
        AND AWB.ULD_BT_NO = ULD.ULD_BT_NO        
			WHERE 
				ULD.FLT_KEY = NVL(#fltKey#,ULD.FLT_KEY) AND ULD.FLT_DATE = NVL(TO_DATE(#fltDate#,'DDMONYY'),ULD.FLT_DATE)
         UNION ALL
				SELECT distinct
			  	 'TARMAC BULK'||'_D' AS section,
			  	NULL AS uldKey,NULL as tarmac,NULL AS transferType,NULL AS joining,NULL AS buYn,NULL AS chkOutYn,NULL as hseBuDiscYn,NULL AS superUrgentCargoYn,NULL AS ofldYn,NULL AS readyForDispatchSysYn,
          		NULL AS updateBy,NULL AS readyForDispatchManYn,
          		NULL as readyWHInd,
          		NULL AS updateTime,
			  	AWB.AWB_NO AS awbNo,
			  	TO_CHAR(AWB.AWB_DATE,'DDMONYY') AS awbDate,A1.AWB_TYPE awbType,A1.CATALOG catalog,
			  	(SELECT 
				      (CASE WHEN decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
				      (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = A.CARR_CODE AND (SPLCODE.SPL_CODE = a.SPL_CODE1 OR SPLCODE.SPL_CODE = a.SPL_CODE2 OR SPLCODE.SPL_CODE = a.SPL_CODE3 OR SPLCODE.SPL_CODE = a.SPL_CODE4 OR SPLCODE.SPL_CODE = a.SPL_CODE5 OR SPLCODE.SPL_CODE = a.SPL_CODE6 OR SPLCODE.SPL_CODE = a.SPL_CODE7 OR SPLCODE.SPL_CODE = a.SPL_CODE8 OR SPLCODE.SPL_CODE = a.SPL_CODE9)) > 0
				       THEN 'Q' ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
				       ELSE decode(a.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
				  FROM AWB  A
					  WHERE A.AWB_NO=AWB.AWB_NO AND A.AWB_DATE=AWB.AWB_DATE) as cargoType,
			  	SUBSTR(AWB.AWB_NO,0,3)||'-'||SUBSTR(AWB.AWB_NO,4) AS awbNoDisplay,
			  	PKG_EXP_VAL.GET_EXP_AWB_CC_CODE(AWB.FLT_KEY,AWB.FLT_DATE,AWB.AWB_NO) AS cc,
			  	(SELECT DECODE(A1.AWB_TYPE, 'T','NA','E',DECODE(A1.DOCACC_USER, NULL,'N','Y'),'I',DECODE(A1.DOCACC_USER, NULL,'N','Y')) 
			  	FROM AWB A1 WHERE A1.AWB_NO = AWB.AWB_NO AND A1.AWB_DATE = AWB.AWB_DATE) AS docAccYn ,
			  	'Y' AS pmanYn,
			  	(SELECT DECODE(COUNT(A1.CAR_YN),0,'N','Y') FROM AWB A1 WHERE A1.AWB_NO = AWB.AWB_NO AND A1.AWB_DATE = AWB.AWB_DATE AND A1.CAR_YN='Y') AS carYn,
			  	'N' AS obcYn,
			  	NULL AS scYn  
			FROM
				exp_pman_tarmac_awb AWB JOIN AWB A1 ON A1.AWB_NO=AWB.AWB_NO AND A1.AWB_DATE=AWB.AWB_DATE
			WHERE 
				AWB.FLT_KEY = NVL(#fltKey#,AWB.FLT_KEY) AND AWB.FLT_DATE = NVL(TO_DATE(#fltDate#,'DDMONYY'),AWB.FLT_DATE) and AWB.BULK_PCS >0
		</select>
		<select id="sqlFetchNonBuildupList" parameterClass="cargo.cms.export.buildup.bo.FlightControlBO" resultClass="cargo.cms.export.buildup.bo.FlightControlAWBBO">
		SELECT A.AWB_NO                AS awbNo  ,
		  TO_CHAR(A.AWB_DATE,'DDMONYY') AS awbDate,
		  SUBSTR(A.AWB_NO,0,3)
		  ||'-'
		  ||SUBSTR(A.AWB_NO,4,8)                                         AS awbNoDisplay,
		  PKG_EXP_VAL.GET_EXP_AWB_CC_CODE(A.FLT_KEY,A.FLT_DATE,A.AWB_NO) AS cc          ,
		  SUM(A.PMAN_PCS)                                                AS pmanPcs     ,
		  SUM(A.PMAN_WT)                                                 AS pmanWt      ,
		  SUM(A.UNASSIGNED_BULK_PCS)                                     AS nonBUPcs    ,
		  SUM(A.UNASSIGNED_BULK_WT)                                      AS nonBUWt
		   FROM EXP_PMANIFEST_AWB A
		  WHERE UNASSIGNED_BULK_PCS > 0
		AND FLT_KEY                 =NVL(#fltKey#,FLT_KEY)
		AND FLT_DATE                =NVL(TO_DATE(#fltDate#,'DDMONYY'),FLT_DATE)
		GROUP BY A.AWB_NO,A.AWB_DATE,A.FLT_DATE,A.FLT_KEY
	</select>
	
	<update id="updateReadyDispatchInd" parameterClass="map">
		UPDATE
			EXP_PMANIFEST_ULD
		SET
			READY_DISP=#readyDisp#, LM_USER_ID=#userId#, LM_DATE=SYSDATE , TR_TYPE_EVT  = 'REDSP',
			READY_DISP_DATE = DECODE(#readyDisp#,'Y',SYSDATE,NULL),READY_DISP_TIME = DECODE(#readyDisp#,'Y',TO_CHAR(SYSDATE,'HH24MI') ,NULL)  
		WHERE 
			FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# 
	</update>
	<update id="updateReadyDispatchIndIF" parameterClass="map">
		UPDATE
			EXP_PMAN_TARMAC_ULD
		SET
			READY_DISP=#readyDisp#, LM_USER_ID=#userId#, LM_DATE=SYSDATE , 
			READY_DISP_DATE = DECODE(#readyDisp#,'Y',SYSDATE,NULL),READY_DISP_TIME = DECODE(#readyDisp#,'Y',TO_CHAR(SYSDATE,'HH24MI') ,NULL)  
		WHERE 
			FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# 
	</update>
	<select id="getReadyForDispatchInd" parameterClass="map" resultClass="java.lang.String">
		SELECT NVL(READY_DISP,'N') from EXP_PMANIFEST_ULD 
		 WHERE FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# 
	</select>
	
	<update id="update_Rmk_Pman_uld" parameterClass="map">
		UPDATE
			EXP_PMANIFEST_ULD
		SET
			MAN_RMK=#manRmk#
		WHERE 
			ULD_BT_NO=#uldKey# 
	</update>
	<update id="updateReadyDispatchManualInd" parameterClass="map">
		UPDATE
			EXP_PMANIFEST_ULD
		SET
			READY_DISP=#readyDisp#, READY_WH=#readyWH#, LM_USER_ID=#userId#, LM_DATE=SYSDATE,
			READY_MAN_ID=#userId#,READY_MAN_DATE=SYSDATE, TR_TYPE=#trtype#,
			READY_DISP_DATE = DECODE(#readyDisp#,'Y',SYSDATE,NULL),READY_DISP_TIME = DECODE(#readyDisp#,'Y',TO_CHAR(SYSDATE,'HH24MI') ,NULL)
		WHERE 
			FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# 
	</update>
	<update id="updateReadyDispatchManualIndIF" parameterClass="map">
		UPDATE
			EXP_PMAN_TARMAC_ULD
		SET
			READY_DISP=#readyDisp#, LM_USER_ID=#userId#, LM_DATE=SYSDATE,
			READY_MAN_ID=#userId#,READY_MAN_DATE=SYSDATE,
			READY_DISP_DATE = DECODE(#readyDisp#,'Y',SYSDATE,NULL),READY_DISP_TIME = DECODE(#readyDisp#,'Y',TO_CHAR(SYSDATE,'HH24MI') ,NULL)
		WHERE 
			FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# 
	</update>
	
	<update id="updateReadyDispatchManualIndOnSearch" parameterClass="map">
		UPDATE
			EXP_PMANIFEST_ULD
		SET
			READY_DISP=#readyDisp#, READY_WH=#readyWH#, TR_TYPE=#trtype#,
			READY_DISP_DATE = DECODE(#readyDisp#,'Y',SYSDATE,NULL),READY_DISP_TIME = DECODE(#readyDisp#,'Y',TO_CHAR(SYSDATE,'HH24MI'),NULL)  
		WHERE 
			FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND READY_MAN_ID IS NULL 
	</update>
	<update id="updateReadyDispManualIndOnSearchIF" parameterClass="map">
		UPDATE
			EXP_PMAN_TARMAC_ULD
		SET
			READY_DISP=#readyDisp#, 
			READY_DISP_DATE = DECODE(#readyDisp#,'Y',SYSDATE,NULL),READY_DISP_TIME = DECODE(#readyDisp#,'Y',TO_CHAR(SYSDATE,'HH24MI'),NULL)  
		WHERE 
			FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND READY_MAN_ID IS NULL 
	</update>
	
	<select id="getUldShipmentList" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.FlightControlAWBBO">
		SELECT DECODE((SELECT A1.AWB_TYPE FROM AWB A1 WHERE A1.AWB_NO = ULDAWB.AWB_NO AND A1.AWB_DATE = ULDAWB.AWB_DATE AND A1.DOCACC_USER IS NOT NULL),NULL,'N','T','NA','Y') AS docAccYn,
		ULDAWB.AWB_NO AS awbNo,TO_CHAR(ULDAWB.AWB_DATE,'DDMONYY') AS awbDate, AWB.AWB_TYPE awbType
		FROM
		EXP_PMANIFEST_ULD ULD,EXP_PMANIFEST_ULD_AWB ULDAWB, AWB AWB
		WHERE 
		ULD.FLT_KEY = NVL(#fltKey#,ULD.FLT_KEY) AND ULD.FLT_DATE = NVL(TO_DATE(#fltDate#,'DDMONYY'),ULD.FLT_DATE)
		AND ULDAWB.awb_no=AWB.awb_no AND  ULDAWB.awb_date=AWB.awb_date
		AND ULDAWB.FLT_KEY = ULD.FLT_KEY 
		AND ULDAWB.FLT_DATE = ULD.FLT_DATE
		AND ULD.ULD_BT_NO =#uldKey#
	</select>
	<select id="chkBUCompleteForUld" parameterClass="map" resultClass="java.lang.String">
		SELECT BLDUP_COMPLETE FROM EXP_PMANIFEST_ULD WHERE FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
		AND ULD_BT_NO =#uldKey#
	</select>
	<!-- Flight Control Queries End -->
	<!-- ################################################################################################# -->
	
	<!--  Added by Surendra Gollaplli on 11 July 2011 for Date validation Start -->
	
	<select id="checkForValidDateFrom" parameterClass="java.lang.String"  resultClass="java.lang.String">
	select (case
         when (SELECT TO_CHAR(SYSDATE - TO_DATE(#dest#,'DD-MON-YY')) DAYDIFF FROM DUAL) >= 0
         then 'N'
         ELSE 
          'Y'      
         end) AS dateInd         
         FROM DUAL
 </select> 
 <select id="checkForValidDateTo" parameterClass="java.lang.String"  resultClass="java.lang.String">
	select (case
         when (SELECT TO_CHAR(SYSDATE - TO_DATE(#dest#,'DD-MON-YY')) DAYDIFF FROM DUAL) >= 0
         then 'N'
         ELSE 
          'Y'      
         end) AS dateInd         
         FROM DUAL
 </select>
<select id="checkForValidDateToAndFrom" parameterClass="cargo.cms.export.bo.AccessoryUsageBO"  resultClass="java.lang.String">
	select (case
         when (SELECT TO_CHAR(TO_DATE(#dateFrom#,'DDMONYY') - TO_DATE(#dateTo#,'DD-MON-YY')) DAYDIFF FROM DUAL) >= 1
         then 'Y'
         ELSE 
          'N'      
         end) AS dateInd         
         FROM DUAL
 </select>
 
  <select id="checkForUnladingPort"  parameterClass="java.lang.String" resultClass="java.lang.Integer">
   <![CDATA[
    select count(1) from MAST_ARPT where CODE = #dest#
   ]]>
 </select>
	<!--  Added by Surendra Gollaplli on 11 July 2011 for Date validation END -->
	
	
	
	<select id="checkForFlightLevelAcc"  parameterClass="cargo.cms.export.bo.AccessoryBO" resultClass="java.lang.Integer">
   <![CDATA[
   select COUNT(1) from exp_uld_acc a where a.flt_key=#fltKey# AND A.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and a.uld_key=#uldNo# and a.activity=#activity# and a.equip_type=#equipType#
   ]]>
 </select>
<!--	queries for Export Ramp ULD Check-Out(HHT) Added by Mahesh B N from 08.06.2011 to 13.06.2011 begin -->
<update id="checkOutULD_update" parameterClass="java.util.HashMap">
		update exp_chkout_dtl
		set 
			chkout_date = to_char(sysdate,'DDMONYY'),
			chkout_user = #CR_USER_ID#,
			chk_flg = 'Y',
			chkout_time = to_char(sysdate, 'HH24MI'),
			chkout_rmk = #REMARKS#,
			IU_FROM_IND = #SCRMODE#,
			LOC_CODE=#LOC_CODE#,
			CHKOUT_LOCN=#LOC_CODE#,
			TR_TYPE = #TR_TYPE#,
			LM_USER_ID = #CR_USER_ID#,
			LM_DATE = sysdate
		where 
			uld_key = #ULDKEY# and 
			flt_key = #FLIGHTKEY# and 
			flt_date = to_date(#FLIGHTDATE#, 'DDMONYY')
	</update>

<update id="saveCheckOutHeader_update" parameterClass="java.util.HashMap">
		update exp_chkout_hd set
			OSI_RMK    =   #remarks#,
			LM_USER_ID =   #CR_USER_ID#,
			LM_DATE    =   sysdate
		where
			FLT_KEY	   =   #flightKey# and
			FLT_DATE   =   #flightDate#
	</update>


<insert id="saveCheckOutHeader_insert" parameterClass="java.util.HashMap">
		insert into exp_chkout_hd(
			FLT_KEY,
			FLT_DATE,
			FLT_TYPE,
			CARR_CODE,
			OSI_RMK,
			CR_USER_ID,
			CR_DATE,
			LM_USER_ID,
			LM_DATE)
		values(
			#FLIGHTKEY#,
			#FLIGHTDATE#,
			#FLIGHTTYPE#,
			#FLIGHTPREFIX#,
			#REMARKS#,
			#CR_USER_ID#,
			sysdate,
			#CR_USER_ID#,
			sysdate)
	</insert>


<insert id="checkOutULD_insert" parameterClass="java.util.HashMap">
		insert into exp_chkout_dtl(
			FLT_KEY,
			FLT_DATE,
			CARR_CODE,
			ULD_KEY,
			CONTR_CODE,
			EIC_IND,
			EMPTY_IND,
			CHKOUT_USER,
			CHKOUT_DATE,
			CHKOUT_TIME,
			CHKOUT_RMK,
			LOC_CODE,
			CHK_FLG,
			CR_USER_ID,
			CR_DATE,
			LM_USER_ID,
			LM_DATE,
			IU_FROM_IND,
			CHKOUT_LOCN,
			TR_TYPE
			)
		values (
			#FLIGHTKEY#,
			#FLIGHTDATE#,                                
			#FLIGHTPREFIX#,
			#ULDKEY#,
			#CONTOURCODE#,
			'N',
			'N',
			#CR_USER_ID#,
			sysdate,
			to_char(sysdate, 'HH24MI'),
			#REMARKS#,
			#LOC_CODE#,
			'Y',
			#CR_USER_ID#,
			sysdate,
			#CR_USER_ID#,
			sysdate,
			'H',
			#LOC_CODE#,
			#TR_TYPE#)
	</insert>
		<select id="uldChkOutvalFlt" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">	
			SELECT count(t1.FLT_KEY) AS COUNT, t2.status STATUS  
			FROM FLT_OPR_EVENTS t1 join flt_opr t2 on t1.flt_key=t2.flt_key and t1.sch_date=t2.sch_date
			WHERE t1.FLT_KEY=#FLT_KEY#
			AND t1.SCH_DATE=TO_DATE(#FLT_DATE#,'DDMONYY')
			AND t1.FLT_TYPE='D'
			AND t1.FLT_CLS_YN='N'
		      AND ROWNUM = 1
		      GROUP BY t1.FLT_KEY, t2.status
		</select>
		
		<select id="uldChkOutvalFlt1" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">	
			SELECT COUNT(1) AS COUNT  
			FROM FLT_OPR_EVENTS
			WHERE FLT_KEY=#FLT_KEY#
			AND SCH_DATE=TO_DATE(#FLT_DATE#,'DDMONYY')
			AND FLT_TYPE='D'
			AND FLT_CLS_YN='N'      		
		</select>
		
		<select id="uldChkOutvalUldInv" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">	
			SELECT LOC_CODE LOC_CODE,TRANSIT_TYPE TRANSIT_TYPE 
			FROM ULD_INVENTORY
			WHERE ULD_KEY=#ULD_NO#
			AND LOC_CODE IS NOT NULL
		</select>
		<select id="uldChkOutvalExpChkOutDtl1" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">	
			SELECT CHK_FLG
			FROM EXP_CHKOUT_DTL
			WHERE FLT_KEY=#FLT_KEY#
			AND FLT_DATE=TO_DATE(#FLT_DATE#,'DDMONYY')
			AND ULD_KEY=#ULD_NO#
		</select>
		<select id="uldChkOutvalExpPmaniFestUld" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">	
			SELECT BLDUP_COMPLETE
			FROM EXP_PMANIFEST_ULD
			WHERE FLT_KEY=#FLT_KEY#
			AND FLT_DATE=TO_DATE(#FLT_DATE#,'DDMONYY')
			AND ULD_BT_NO=#ULD_NO#
		</select>
		<select id="uldChkOutvalExpChkOutDtl2" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT nvl(READY_DISP,'N') as READY_IND
			FROM exp_pmanifest_uld
			WHERE FLT_KEY=#FLT_KEY#
			AND FLT_DATE=TO_DATE(#FLT_DATE#,'DDMONYY')
			AND ULD_bt_no=#ULD_NO#
		</select>
		<select id="uldChkOutvalExpChkOutDtl4" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			  SELECT case when inv.TRANSIT_TYPE='IF' then NVL(uld.READY_DISP,'N') else 'Y' end as READY_IND
			FROM exp_pman_tarmac_uld uld,uld_inventory inv
			WHERE uld.FLT_KEY=#FLT_KEY#
			AND uld.FLT_DATE=TO_DATE(#FLT_DATE#,'DDMONYY')
			AND uld.ULD_bt_no=#ULD_NO# and uld.uld_bt_no= inv.uld_key
		</select>
		<select id="uldChkOutvalExpChkOutDtl3" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT COUNT(1) AS COUNT 
			FROM EXP_CHKOUT_DTL
			WHERE FLT_KEY=#FLT_KEY#
			AND FLT_DATE=TO_DATE(#FLT_DATE#,'DDMONYY')
			AND ULD_KEY=#ULD_NO#
		</select>
		<select id="uldChkOutvalExpChkOutHd" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT COUNT(1) AS COUNT 
			FROM EXP_CHKOUT_HD
			WHERE FLT_KEY=#FLT_KEY#
			AND FLT_DATE=TO_DATE(#FLT_DATE#,'DDMONYY')
		</select>
		<insert id="sqlInsUldMovDtls" parameterClass="java.util.HashMap">		
				insert into uld_mov
				(
				TR_TYPE,
				TR_NO,
				TR_DATE,
				DOC_LINE_NO,
				ULD_KEY,
				FLT_KEY,
				FLT_DATE,
				CR_USER_ID,
				CR_DATE,
				LM_USER_ID,
				LM_DATE,
				SEQ_NO,
				DAM_IND
				)
				values
				(
				'CO',
				'33',
				sysdate,
				'1',
				#ULD_KEY#,
				#FLT_KEY#,
				to_date(#FLT_DATE#,'DDMONYY'),
				#CR_USER_ID#,
				sysdate,
				#CR_USER_ID#,
				sysdate,
				uld_mov_seq.nextval,
				'N'
				)
		</insert>
<!--	queries for Export Ramp ULD Check-Out(HHT) Added by Mahesh B N from 08.06.2011 to 13.06.2011 end -->
<!--	queries for Print ULD Tag & Handover Form(Desktop) Added by Mahesh B N from  14.06.2011 to 27.06.2011 begin -->

<select id="sqlflightdetails" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.RampExportBO">		 
	    SELECT A.FLT_KEY as fltNo,
        to_char(A.SCH_DATE,'ddMONYY') as fltDate,
        PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, 'D', 'DD') AS etd,
	   <!--  decode(A.EST_DATE,A.SCH_DATE,'',to_char(A.EST_DATE,'DDMONYY')) || ' '|| SUBSTR(TRIM(TO_CHAR(NVL(A.EST_TIME,0),'0000')),0,2)||':'|| SUBSTR(TRIM(TO_CHAR(NVL(A.EST_TIME,0),'0000')),3,4) as etd, -->
	    b.OFF_POINT as portOfCall,
	    to_char(a.sch_date,'DDMONYY') || ' '|| SUBSTR(TRIM(TO_CHAR(NVL(A.SCH_TIME,0),'0000')),0,2) ||':'|| SUBSTR(TRIM(TO_CHAR(NVL(A.SCH_TIME,0),'0000')),3,4) as stdPrint,
<!--	    PKG_COMMON.get_flt_eta(#fltNo#, TO_DATE(#fltDate#,'DDMONYY'), 'D', 'DD') as etdPrint,-->
		to_char(a.EST_DATE,'DDMONYY') || ' '||  SUBSTR(TRIM(TO_CHAR(NVL(A.EST_TIME,0),'0000')),0,2) ||':' || SUBSTR(TRIM(TO_CHAR(NVL(A.EST_TIME,0),'0000')),3,4) as etdPrint,
	    A.ACFT_PRK_BAY parkingBayPrint
	    FROM FLT_OPR A ,flt_opr_leg B
	    WHERE A.FLT_KEY=#fltNo# 		
		AND A.SCH_DATE = TO_DATE(#fltDate#,'DDMONYY')
		AND A.FLT_TYPE = 'D'
		AND A.FLT_KEY=B.FLT_KEY
		AND A.SCH_DATE=B.SCH_DATE
 </select>	
 
 <select id="sqlGetListOfFlightForPrint" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.RampExportBO">
		select fltNo, fltDate, locn, COUNT(1) as uldCount  from (
				  select
				  DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  t3.FLT_KEY as fltNo,
                  to_char(t3.FLT_DATE,'ddMONYY') as fltDate ,
                  t3.ULD_bt_no as uldNo,
                  t2.carr_code                   AS fltPfx,
  				  t2.flt_no                      AS fltSfx,
  				  (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.ULD_bt_no,0,3)) AS btCont,
  				  DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                   decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  t1.HO_FORM_NO as hoFormNo,
                  to_char(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  decode(t3.READY_DISP,null,'N',t3.READY_DISP) as readyForDispatch,
                  to_char(t1.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t1.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM &lt; 10)  spl,                   
                  t3.bldup_complete as bldupComplete,
                  t2.handling_mode ppkType,
                  (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T3.flt_key and t4.flt_date=T3.flt_date and t5.uld_key=T3.ULD_BT_NO) as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff               
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       exp_pmanifest_uld t3
                  join flt_opr opr
                             on opr.flt_key=t3.flt_key
                        and opr.sch_date=t3.flt_date AND OPR.FLT_TYPE='D'
                  join uld_inventory t2
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                  LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  
                  where   (t2.handling_mode is null or t2.handling_mode!='DT')
                  and t3.uld_bt_no not in (select uld_key from exp_flt_uld 
                                           where (Source='DLS-L' or Source='DLS-E') 
                                           and uld_key=t3.ULD_bt_no and flt_key=t3.flt_key and flt_date=t3.flt_date and FLT_TYPE='E')
                 <isNotEmpty property="uldNo">         
                 	and t3.uld_bt_no= #uldNo#
                 </isNotEmpty>  
                 
                 <isNotEmpty property="fltNo">         
                 and t3.flt_key= #fltNo#
			     and t3.flt_date=TO_DATE(#fltDate#,'DDMONYY')
			     </isNotEmpty> 
                 
                 <isNotEmpty property="loc">
                 and UPPER(t2.loc_code) like UPPER(#loc#) 
                 </isNotEmpty>
                 
                and gt.uld_group   = uag.uld_group
				AND uag.uld_allot    = ua.uld_allot
				AND ug.uld_group     = uag.uld_group
				AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3)
				<isNotEmpty property="rhoId">         
                   and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #rhoId# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #rhoId# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
            	<isNotEmpty property="loginAsRho">
                 and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #loginAsRho# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1))
                </isNotEmpty>
                    <isNotEmpty property="fromDate"> 
                    <isNotEmpty property="toDate" >        
                   AND opr.EST_DATE IS NOT NULL AND TRUNC(opr.EST_DATE) BETWEEN TO_DATE(#fromDate#,'DDMONYY') AND  TO_DATE(#toDate#,'DDMONYY')
                 </isNotEmpty> 
                 </isNotEmpty> 
                 UNION
                  select
                  DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  t3.FLT_KEY as fltNo,
                  to_char(t3.FLT_DATE,'ddMONYY') as fltDate ,
                  t3.ULD_bt_no as uldNo,
                  t2.carr_code                   AS fltPfx,
  				  t2.flt_no                      AS fltSfx,
  				  (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.ULD_bt_no,0,3)) AS btCont,
  				  DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  t1.HO_FORM_NO as hoFormNo,
                  to_char(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  case when t2.TRANSIT_TYPE='IF' then NVL(t3.READY_DISP,'N') else 'Y' end as readyForDispatch,
                  to_char(t1.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t1.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM &lt; 10)  spl,                 
                  'Y' as bldupComplete,
                  t2.handling_mode ppkType,
                  (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T3.flt_key and t4.flt_date=T3.flt_date and t5.uld_key=T3.ULD_BT_NO) as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff               
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       exp_pman_tarmac_uld t3
                  join flt_opr opr
                             on opr.flt_key=t3.flt_key
                        and opr.sch_date=t3.flt_date AND OPR.FLT_TYPE='D'
                  join uld_inventory t2
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                 LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where (t2.handling_mode is null or t2.handling_mode!='DT')
                  and t3.uld_bt_no not in (select uld_key from exp_flt_uld 
                                           where (Source='DLS-L' or Source='DLS-E') 
                                           and uld_key=t3.ULD_bt_no and flt_key=t3.flt_key and flt_date=t3.flt_date and FLT_TYPE='E')
                  and t3.uld_bt_no in (select A.uld_key from uld_inventory A , v_ddt_dtl B 
                                        where (A.transit_type='TT' or A.transit_type='IF')
                                              AND B.uld_key=t3.uld_bt_no and B.shp_cntg_flt_key=t3.flt_key and B.shp_cntg_flt_date=t3.flt_date 
                                              AND A.imp_flt_key = B.FLT_KEY AND A.imp_flt_date = B.FLT_DATE
                                            )
                                           
                 <isNotEmpty property="uldNo">         
                 	and t3.uld_bt_no= #uldNo#
                 </isNotEmpty>  
                 
                 <isNotEmpty property="fltNo">         
                 and t3.flt_key= #fltNo#
			     and t3.flt_date=TO_DATE(#fltDate#,'DDMONYY')
                 </isNotEmpty> 
                 
                 <isNotEmpty property="loc">
                 and UPPER(t2.loc_code) like UPPER(#loc#) 
                 </isNotEmpty>
                 
                 and 
				 gt.uld_group   = uag.uld_group
				 AND uag.uld_allot    = ua.uld_allot
		         AND ug.uld_group     = uag.uld_group
		         AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3)
		         <isNotEmpty property="rhoId">         
                   and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #rhoId# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #rhoId# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
                 <isNotEmpty property="loginAsRho">
                 and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #loginAsRho# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
                    <isNotEmpty property="fromDate"> 
                    <isNotEmpty property="toDate" >        
                   AND opr.EST_DATE IS NOT NULL AND TRUNC(opr.EST_DATE) BETWEEN TO_DATE(#fromDate#,'DDMONYY') AND  TO_DATE(#toDate#,'DDMONYY')
                 </isNotEmpty> 
                 </isNotEmpty> 
                  <dynamic prepend="ORDER BY ">
                      <isNotEmpty property="sortOrder.sortField">
                        $sortOrder.sortField$
                    </isNotEmpty>
                    <isEmpty property="sortOrder.sortField">
                        chkOutTime,hoTime desc
                    </isEmpty>
                   </dynamic> 
         
         ) GROUP BY fltNo, fltDate, locn
         
         
         </select>
 
 
 
 <select id="sqlGetListOfFlightForPrintCOUNT" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
	
	SELECT COUNT(1) AS totalRowCount FROM(select fltNo, fltDate, locn, COUNT(1) as uldCount  from (
				  select
				  DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  t3.FLT_KEY as fltNo,
                  to_char(t3.FLT_DATE,'ddMONYY') as fltDate ,
                  t3.ULD_bt_no as uldNo,
                  t2.carr_code                   AS fltPfx,
  				  t2.flt_no                      AS fltSfx,
  				  (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.ULD_bt_no,0,3)) AS btCont,
  				  DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                   decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  t1.HO_FORM_NO as hoFormNo,
                  to_char(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  decode(t3.READY_DISP,null,'N',t3.READY_DISP) as readyForDispatch,
                  to_char(t1.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t1.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM &lt; 10)  spl,                   
                  t3.bldup_complete as bldupComplete,
                  t2.handling_mode ppkType,
                  (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T3.flt_key and t4.flt_date=T3.flt_date and t5.uld_key=T3.ULD_BT_NO) as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff               
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       exp_pmanifest_uld t3
                  join flt_opr opr
                             on opr.flt_key=t3.flt_key
                        and opr.sch_date=t3.flt_date AND OPR.FLT_TYPE='D'
                  join uld_inventory t2
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                  LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  
                  where   (t2.handling_mode is null or t2.handling_mode!='DT')
                  and t3.uld_bt_no not in (select uld_key from exp_flt_uld 
                                           where (Source='DLS-L' or Source='DLS-E') 
                                           and uld_key=t3.ULD_bt_no and flt_key=t3.flt_key and flt_date=t3.flt_date and FLT_TYPE='E')
                 <isNotEmpty property="uldNo">         
                 	and t3.uld_bt_no= #uldNo#
                 </isNotEmpty>  
                 
                 <isNotEmpty property="fltNo">         
                 and t3.flt_key= #fltNo#
			     and t3.flt_date=TO_DATE(#fltDate#,'DDMONYY')
			     </isNotEmpty> 
                 
                 <isNotEmpty property="loc">
                 and UPPER(t2.loc_code) like UPPER(#loc#) 
                 </isNotEmpty>
                 
                and gt.uld_group   = uag.uld_group
				AND uag.uld_allot    = ua.uld_allot
				AND ug.uld_group     = uag.uld_group
				AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3)
				<isNotEmpty property="rhoId">         
                   and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #rhoId# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #rhoId# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
            	<isNotEmpty property="loginAsRho">
                 and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #loginAsRho# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1))
                </isNotEmpty>
                    <isNotEmpty property="fromDate"> 
                    <isNotEmpty property="toDate" >        
                   AND opr.EST_DATE IS NOT NULL AND TRUNC(opr.EST_DATE) BETWEEN TO_DATE(#fromDate#,'DDMONYY') AND  TO_DATE(#toDate#,'DDMONYY')
                 </isNotEmpty> 
                 </isNotEmpty> 
                 UNION
                  select
                  DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  t3.FLT_KEY as fltNo,
                  to_char(t3.FLT_DATE,'ddMONYY') as fltDate ,
                  t3.ULD_bt_no as uldNo,
                  t2.carr_code                   AS fltPfx,
  				  t2.flt_no                      AS fltSfx,
  				  (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.ULD_bt_no,0,3)) AS btCont,
  				  DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  t1.HO_FORM_NO as hoFormNo,
                  to_char(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  case when t2.TRANSIT_TYPE='IF' then NVL(t3.READY_DISP,'N') else 'Y' end as readyForDispatch,
                  to_char(t1.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t1.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM &lt; 10)  spl,                 
                  'Y' as bldupComplete,
                  t2.handling_mode ppkType,
                  (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T3.flt_key and t4.flt_date=T3.flt_date and t5.uld_key=T3.ULD_BT_NO) as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff               
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       exp_pman_tarmac_uld t3
                  join flt_opr opr
                             on opr.flt_key=t3.flt_key
                        and opr.sch_date=t3.flt_date AND OPR.FLT_TYPE='D'
                  join uld_inventory t2
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                 LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where (t2.handling_mode is null or t2.handling_mode!='DT')
                  and t3.uld_bt_no not in (select uld_key from exp_flt_uld 
                                           where (Source='DLS-L' or Source='DLS-E') 
                                           and uld_key=t3.ULD_bt_no and flt_key=t3.flt_key and flt_date=t3.flt_date and FLT_TYPE='E')
                  and t3.uld_bt_no in (select A.uld_key from uld_inventory A , v_ddt_dtl B 
                                        where (A.transit_type='TT' or A.transit_type='IF')
                                              AND B.uld_key=t3.uld_bt_no and B.shp_cntg_flt_key=t3.flt_key and B.shp_cntg_flt_date=t3.flt_date 
                                              AND A.imp_flt_key = B.FLT_KEY AND A.imp_flt_date = B.FLT_DATE
                                            )
                                           
                 <isNotEmpty property="uldNo">         
                 	and t3.uld_bt_no= #uldNo#
                 </isNotEmpty>  
                 
                 <isNotEmpty property="fltNo">         
                 and t3.flt_key= #fltNo#
			     and t3.flt_date=TO_DATE(#fltDate#,'DDMONYY')
                 </isNotEmpty> 
                 
                 <isNotEmpty property="loc">
                 and UPPER(t2.loc_code) like UPPER(#loc#) 
                 </isNotEmpty>
                 
                 and 
				 gt.uld_group   = uag.uld_group
				 AND uag.uld_allot    = ua.uld_allot
		         AND ug.uld_group     = uag.uld_group
		         AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3)
		         <isNotEmpty property="rhoId">         
                   and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #rhoId# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #rhoId# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
                 <isNotEmpty property="loginAsRho">
                 and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #loginAsRho# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
                    <isNotEmpty property="fromDate"> 
                    <isNotEmpty property="toDate" >        
                   AND opr.EST_DATE IS NOT NULL AND TRUNC(opr.EST_DATE) BETWEEN TO_DATE(#fromDate#,'DDMONYY') AND  TO_DATE(#toDate#,'DDMONYY')
                 </isNotEmpty> 
                 </isNotEmpty> 
                  <dynamic prepend="ORDER BY ">
                      <isNotEmpty property="sortOrder.sortField">
                        $sortOrder.sortField$
                    </isNotEmpty>
                    <isEmpty property="sortOrder.sortField">
                        chkOutTime,hoTime desc
                    </isEmpty>
                   </dynamic> 
         
         ) GROUP BY fltNo, fltDate, locn
         
          )
         </select>
 
	<select id="sqlGetListOfUldForPrint" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.RampExportBO">
				   select
                     DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  t3.FLT_KEY as fltNo,
                  to_char(t3.FLT_DATE,'ddMONYY') as fltDate ,
                  t3.ULD_bt_no as uldNo,
                  DECODE(T1.UIT_PRINT_TYPE,'','N','M','Y','N') AS manualPrintUIT,
                  opr.carr_code                   AS fltPfx,
                     opr.flt_no                      AS fltSfx,
                     (CASE WHEN (SELECT COUNT(1) FROM EXP_ULD_HOVER_REJ_DTL REJDTL WHERE REJDTL.FLT_KEY=t3.FLT_KEY AND REJDTL.FLT_DATE=t3.FLT_DATE AND REJDTL.ULD_KEY = t3.ULD_BT_NO) >0 THEN 'Y' ELSE  'N' END) as rejectInd,
                     (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.ULD_bt_no,0,3)) AS btCont,
                     DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  EXPHOVER.HO_FORM_NO as hoFormNo,
                  to_char(t1.OB_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  decode(t3.READY_DISP,null,'N',t3.READY_DISP) as readyForDispatch,
                  to_char(t1.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t1.chkout_locn as chkOutLoc,                  
                  t2.UIT_PRINT as uitPrint,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM &lt; 10)  spl,                   
                  t3.bldup_complete as bldupComplete,
                  t2.handling_mode ppkType,
                  (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T3.flt_key and t4.flt_date=T3.flt_date and t5.uld_key=T3.ULD_BT_NO) as towOrderNo,
                  (SELECT RESV_FLG FROM ULD_INVENTORY WHERE ULD_KEY = T3.ULD_BT_NO AND FLT_KEY=T3.FLT_KEY) as resvFlg,	
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff,
                  EXPHOVER.RAMP_USER as rHO,
                  '' as dspTo,
                  '' as urfNo,
                  PKG_COMMON.get_flt_eta(opr.FLT_KEY, opr.SCH_DATE, 'D') etd,
                  (CASE WHEN (SELECT COUNT(1) FROM EXP_ULD_HOVER_REJ_DTL REJDTL WHERE REJDTL.FLT_KEY=t3.FLT_KEY AND REJDTL.FLT_DATE=t3.FLT_DATE AND REJDTL.ULD_KEY = t3.ULD_BT_NO) >0 THEN 'Rejected' ELSE  EXPHOVER.HO_STATUS END) as hoFormStat,
                  TO_CHAR(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoPrintDate,
                  TO_CHAR(EXPHOVER.SEND_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoSendDate,
                  DECODE(t2.FINAL_WEIGHT,'Y','Y','N') as finalWtInd                      
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       exp_pmanifest_uld t3
                        join flt_opr opr
                             on opr.flt_key=t3.flt_key
                        and opr.sch_date=t3.flt_date
                        AND opr.flt_type = 'D'
                  
                  join EXP_FLT_ULD t2
                  on  t2.flt_key=t3.flt_key
                  and t2.flt_date=t3.flt_date
                  and t2.uld_key = t3.uld_bt_no  
                   
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                  LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where   (t2.handling_mode is null or t2.handling_mode!='DT')
                  and t3.uld_bt_no not in (select uld_key from exp_flt_uld 
                                           where (Source='DLS-L' or Source='DLS-E') 
                                           and uld_key=t3.ULD_bt_no and flt_key=t3.flt_key and flt_date=t3.flt_date and FLT_TYPE='E')
                 <isNotEmpty property="uldNo">         
                   and t3.uld_bt_no= #uldNo#
                 </isNotEmpty>  
                 
                 <isNotEmpty property="fltNo">         
                 and t3.flt_key= #fltNo#
                   and t3.flt_date=TO_DATE(#fltDate#,'DDMONYY')
                   </isNotEmpty> 
                 
                 <isNotEmpty property="loc">
                 and UPPER(t2.loc_code) like UPPER(#loc#)
                 </isNotEmpty>
                 <isNotEmpty property="searchList">
                 <isEqual property="searchList" compareValue="fltList">
                 and t2.loc_code is null
                 </isEqual>
                 </isNotEmpty>
                and 
                gt.uld_group   = uag.uld_group
                   AND uag.uld_allot    = ua.uld_allot
                   AND ug.uld_group     = uag.uld_group
                   AND gt.uld_type      = SUBSTR(t2.ULD_KEY, 0, 3)
                   <isNotEmpty property="rhoId">         
                   and opr.RHO_ID= #rhoId#
                 </isNotEmpty> 
                 <isNotEmpty property="loginAsRho">
                 and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #loginAsRho# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
                    <isNotEmpty property="fromDate"> 
                    <isNotEmpty property="toDate" >        
                   AND TRUNC(opr.EST_DATE) BETWEEN TO_DATE(#fromDate#,'DDMONYY') AND  TO_DATE(#toDate#,'DDMONYY')
                 </isNotEmpty> 
                 </isNotEmpty> 
                 UNION
                  select
                  DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  t3.FLT_KEY as fltNo,
                  to_char(t3.FLT_DATE,'ddMONYY') as fltDate ,
                  t3.ULD_bt_no as uldNo,
                  DECODE(T1.UIT_PRINT_TYPE,'','N','M','Y','N') AS manualPrintUIT,
                  opr.carr_code                   AS fltPfx,
                     opr.flt_no                      AS fltSfx,
                     (CASE WHEN (SELECT COUNT(1) FROM EXP_ULD_HOVER_REJ_DTL REJDTL WHERE REJDTL.FLT_KEY=t3.FLT_KEY AND REJDTL.FLT_DATE=t3.FLT_DATE AND REJDTL.ULD_KEY = t3.ULD_BT_NO) >0 THEN 'Y' ELSE  'N' END) as rejectInd,
                     (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.ULD_bt_no,0,3)) AS btCont,
                     DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  t1.HO_FORM_NO as hoFormNo,
                  to_char(t1.OB_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  case when t2.TRANSIT_TYPE='IF' then NVL(t3.READY_DISP,'N') else 'Y' end as readyForDispatch,
                  to_char(t1.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t1.chkout_locn as chkOutLoc,                  
                  t2.UIT_PRINT as uitPrint,               
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM &lt; 10)  spl,                 
                  'Y' as bldupComplete,
                  t2.handling_mode ppkType,
                  (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T3.flt_key and t4.flt_date=T3.flt_date and t5.uld_key=T3.ULD_BT_NO) as towOrderNo,
                  (SELECT RESV_FLG FROM ULD_INVENTORY WHERE ULD_KEY = T3.ULD_BT_NO AND FLT_KEY=T3.FLT_KEY) as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff,
                  EXPHOVER.RAMP_USER as rHO,
                  '' as dspTo,
                  '' as urfNo,
                  PKG_COMMON.get_flt_eta(opr.FLT_KEY, opr.SCH_DATE, 'D') etd,
                  (CASE WHEN (SELECT COUNT(1) FROM EXP_ULD_HOVER_REJ_DTL REJDTL WHERE REJDTL.FLT_KEY=t3.FLT_KEY AND REJDTL.FLT_DATE=t3.FLT_DATE AND REJDTL.ULD_KEY = t3.ULD_BT_NO) >0 THEN 'Rejected' ELSE  EXPHOVER.HO_STATUS END) as hoFormStat,
                  TO_CHAR(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoPrintDate,
                  TO_CHAR(EXPHOVER.SEND_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoSendDate,
                  DECODE(t2.FINAL_WEIGHT,'Y','Y','N') as finalWtInd                    
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       exp_pman_tarmac_uld t3
                   join flt_opr opr
                             on opr.flt_key=t3.flt_key
                        and opr.sch_date=t3.flt_date
                        AND opr.flt_type = 'D'
                 
                 
                  join EXP_FLT_ULD t2
                  on  t2.flt_key=t3.flt_key
                  and t2.flt_date=t3.flt_date
                  and t2.uld_key = t3.uld_bt_no  
                 
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                 LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where (t2.handling_mode is null or t2.handling_mode!='DT')  AND  (NOT (NVL(t2.TRANSIT_TYPE, 'N') = 'TT' ))
                  and t3.uld_bt_no not in (select uld_key from exp_flt_uld 
                                           where (Source='DLS-L' or Source='DLS-E') 
                                           and uld_key=t3.ULD_bt_no and flt_key=t3.flt_key and flt_date=t3.flt_date and FLT_TYPE='E')                         
                 <isNotEmpty property="uldNo">         
                   and t3.uld_bt_no= #uldNo#
                 </isNotEmpty>  
                 
                 <isNotEmpty property="fltNo">         
                 and t3.flt_key= #fltNo#
                   and t3.flt_date=TO_DATE(#fltDate#,'DDMONYY')
                 </isNotEmpty> 
                 
                 <isNotEmpty property="loc">
                 and UPPER(t2.loc_code) like UPPER(#loc#)
                 </isNotEmpty>
                 <isNotEmpty property="searchList">
                 <isEqual property="searchList" compareValue="fltList">
                 and t2.loc_code is null
                 </isEqual>
                 </isNotEmpty>
                 and 
                    gt.uld_group   = uag.uld_group
                   AND uag.uld_allot    = ua.uld_allot
                   AND ug.uld_group     = uag.uld_group
                   AND gt.uld_type      = SUBSTR(t2.ULD_KEY, 0, 3)
                    <isNotEmpty property="rhoId">         
                   and opr.RHO_ID= #rhoId#
                 </isNotEmpty> 
                  <isNotEmpty property="loginAsRho">
                 and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #loginAsRho# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
                      <isNotEmpty property="fromDate"> 
                    <isNotEmpty property="toDate" >        
                   AND TRUNC(opr.EST_DATE) BETWEEN TO_DATE(#fromDate#,'DDMONYY') AND  TO_DATE(#toDate#,'DDMONYY')
                 </isNotEmpty> 
                 </isNotEmpty>
                     <dynamic prepend="ORDER BY ">
                      <isNotEmpty property="sortOrder.sortField">
                        $sortOrder.sortField$
                    </isNotEmpty>
                    <isEmpty property="sortOrder.sortField">
                        hoSendDate desc
                    </isEmpty>
                   </dynamic> 
         </select>

		<select id="sqlGetListOfUldForPrintCOUNT" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
                                                SELECT COUNT(1) AS totalRowCount FROM (
                    select
                     DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  t3.FLT_KEY as fltNo,
                  to_char(t3.FLT_DATE,'ddMONYY') as fltDate ,
                  t3.ULD_bt_no as uldNo,
                  DECODE(T1.UIT_PRINT_TYPE,'','N','M','Y','N') AS manualPrintUIT,
                  t2.carr_code                   AS fltPfx,
                     t2.flt_no                      AS fltSfx,
                     (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.ULD_bt_no,0,3)) AS btCont,
                     DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  EXPHOVER.HO_FORM_NO as hoFormNo,
                  to_char(t1.OB_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  decode(t3.READY_DISP,null,'N',t3.READY_DISP) as readyForDispatch,
                  to_char(t1.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t1.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM &lt; 10)  spl,                   
                  t3.bldup_complete as bldupComplete,
                  t2.handling_mode ppkType,
                  (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T3.flt_key and t4.flt_date=T3.flt_date and t5.uld_key=T3.ULD_BT_NO) as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff,
                  EXPHOVER.RAMP_USER as rHO,
                  '' as dspTo,
                  '' as urfNo,
                  PKG_COMMON.get_flt_eta(opr.FLT_KEY, opr.SCH_DATE, 'D') etd,
                  EXPHOVER.HO_STATUS as hoFormStat,
                  TO_CHAR(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoPrintDate,
                  TO_CHAR(EXPHOVER.SEND_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoSendDate                      
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       exp_pmanifest_uld t3
                        join flt_opr opr
                             on opr.flt_key=t3.flt_key
                        and opr.sch_date=t3.flt_date
                        AND opr.flt_type = 'D'
                  
                  join uld_inventory t2
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                  LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where   (t2.handling_mode is null or t2.handling_mode!='DT')
                  and t3.uld_bt_no not in (select uld_key from exp_flt_uld 
                                           where (Source='DLS-L' or Source='DLS-E') 
                                           and uld_key=t3.ULD_bt_no and flt_key=t3.flt_key and flt_date=t3.flt_date and FLT_TYPE='E')
                 <isNotEmpty property="uldNo">         
                   and t3.uld_bt_no= #uldNo#
                 </isNotEmpty>  
                 
                 <isNotEmpty property="fltNo">         
                 and t3.flt_key= #fltNo#
                   and t3.flt_date=TO_DATE(#fltDate#,'DDMONYY')
                   </isNotEmpty> 
                 
                 <isNotEmpty property="loc">
                 and UPPER(t2.loc_code) like UPPER(#loc#)
                 </isNotEmpty>
                 <isNotEmpty property="searchList">
                 <isEqual property="searchList" compareValue="fltList">
                 and t2.loc_code is null
                 </isEqual>
                 </isNotEmpty>
                 
                 
                and 
                gt.uld_group   = uag.uld_group
                   AND uag.uld_allot    = ua.uld_allot
                   AND ug.uld_group     = uag.uld_group
                   AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3)
                   <isNotEmpty property="rhoId">         
                   and opr.RHO_ID= #rhoId#
                 </isNotEmpty> 
                 <isNotEmpty property="loginAsRho">
                 and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #loginAsRho# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
                    <isNotEmpty property="fromDate"> 
                    <isNotEmpty property="toDate" >        
                   AND TRUNC(opr.EST_DATE) BETWEEN TO_DATE(#fromDate#,'DDMONYY') AND  TO_DATE(#toDate#,'DDMONYY')
                 </isNotEmpty> 
                 </isNotEmpty> 
                 UNION
                  select
                  DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  t3.FLT_KEY as fltNo,
                  to_char(t3.FLT_DATE,'ddMONYY') as fltDate ,
                  t3.ULD_bt_no as uldNo,
                  DECODE(T1.UIT_PRINT_TYPE,'','N','M','Y','N') AS manualPrintUIT,
                  t2.carr_code                   AS fltPfx,
                     t2.flt_no                      AS fltSfx,
                     (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.ULD_bt_no,0,3)) AS btCont,
                     DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  t1.HO_FORM_NO as hoFormNo,
                  to_char(t1.OB_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  case when t2.TRANSIT_TYPE='IF' then NVL(t3.READY_DISP,'N') else 'Y' end as readyForDispatch,
                  to_char(t1.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t1.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM &lt; 10)  spl,                 
                  'Y' as bldupComplete,
                  t2.handling_mode ppkType,
                  (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T3.flt_key and t4.flt_date=T3.flt_date and t5.uld_key=T3.ULD_BT_NO) as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff,
                  EXPHOVER.RAMP_USER as rHO,
                  '' as dspTo,
                  '' as urfNo,
                  PKG_COMMON.get_flt_eta(opr.FLT_KEY, opr.SCH_DATE, 'D') etd,
                  EXPHOVER.HO_STATUS as hoFormStat,
                  TO_CHAR(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoPrintDate,
                  TO_CHAR(EXPHOVER.SEND_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoSendDate                    
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       exp_pman_tarmac_uld t3
                   join flt_opr opr
                             on opr.flt_key=t3.flt_key
                        and opr.sch_date=t3.flt_date
                        AND opr.flt_type = 'D'
                  join uld_inventory t2
                  
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                 LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where (t2.handling_mode is null or t2.handling_mode!='DT')
                  and t3.uld_bt_no not in (select uld_key from exp_flt_uld 
                                           where (Source='DLS-L' or Source='DLS-E') 
                                           and uld_key=t3.ULD_bt_no and flt_key=t3.flt_key and flt_date=t3.flt_date and FLT_TYPE='E')
                  and t3.uld_bt_no in (select uld_key 
                                          from uld_inventory
                                           where (transit_type='TT' or transit_type='IF') 
                                           and imp_flt_key in (select flt_key
                                                             from v_ddt_dtl
                                                             where uld_key=t3.uld_bt_no 
                                                             and shp_cntg_flt_key=t3.flt_key
                                                             and shp_cntg_flt_date=t3.flt_date)
                                           and imp_flt_date in (select flt_date
                                                             from v_ddt_dtl
                                                             where uld_key=t3.uld_bt_no
                                                             and shp_cntg_flt_key=t3.flt_key
                                                             and shp_cntg_flt_date=t3.flt_date)
                                           )
                                           
                 <isNotEmpty property="uldNo">         
                   and t3.uld_bt_no= #uldNo#
                 </isNotEmpty>  
                 
                 <isNotEmpty property="fltNo">         
                 and t3.flt_key= #fltNo#
                   and t3.flt_date=TO_DATE(#fltDate#,'DDMONYY')
                 </isNotEmpty> 
                 
                 <isNotEmpty property="loc">
                 and UPPER(t2.loc_code) like UPPER(#loc#)
                 </isNotEmpty>
                 <isNotEmpty property="searchList">
                 <isEqual property="searchList" compareValue="fltList">
                 and t2.loc_code is null
                 </isEqual>
                 </isNotEmpty>
                 and 
                    gt.uld_group   = uag.uld_group
                   AND uag.uld_allot    = ua.uld_allot
                   AND ug.uld_group     = uag.uld_group
                   AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3)
                    <isNotEmpty property="rhoId">         
                   and opr.RHO_ID= #rhoId#
                 </isNotEmpty> 
                  <isNotEmpty property="loginAsRho">
                 and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #loginAsRho# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
                      <isNotEmpty property="fromDate"> 
                    <isNotEmpty property="toDate" >        
                   AND TRUNC(opr.EST_DATE) BETWEEN TO_DATE(#fromDate#,'DDMONYY') AND  TO_DATE(#toDate#,'DDMONYY')
                 </isNotEmpty> 
                 </isNotEmpty>
                 )   
         </select>

                <select id="getFLTHoFormNo" parameterClass="cargo.cms.export.bo.RampExportBO" resultClass="java.lang.String">
		SELECT ho_form_no FROM EXP_CHKOUT_DTL WHERE FLT_KEY=#fltNo# AND FLT_DATE=#fltDate# AND ULD_KEY=#uldNo#
		</select>
		<select id="getURFHoFormNo" parameterClass="cargo.cms.export.bo.RampExportBO" resultClass="java.lang.String">
		SELECT ho_form_no FROM ULD_REL_DTL WHERE EIR_NO=#urfNo# AND ULD_KEY=#uldNo#
		</select>

<update id="sqlUpdateEndorsePrintHandoverDtls" parameterClass="cargo.cms.export.bo.RampExportBO">
			UPDATE EXP_CHKOUT_DTL 
			SET 
			TR_TYPE = 'PULDH',			
			ENDORSED_DC_BY = #username#,
			ENDORSED_DC_DATE = sysdate,
			LM_USER_ID = #userID#,
			LM_DATE = sysdate
			WHERE ho_form_no = #hoFormNo#
		</update>

		<update id="sqlUpdatePrintHandoverDtls" parameterClass="cargo.cms.export.bo.RampExportBO">
			UPDATE EXP_CHKOUT_DTL 
			SET 
			TR_TYPE = 'PULDH',			
			PRINT_HANDOVER_DATE=sysdate,
			HO_FORM_NO=lpad(EXP_RAMP_HOForm_SEQ.currval,8,0),
			ramp_user=#rampRecvUsr#,
			RAMP_RECV_USER=#rampRHOStaff#,
			ENDORSED_DC_BY = #username#,
			ENDORSED_DC_DATE = sysdate,
			LM_USER_ID = #userID#,
			LM_DATE = sysdate
			WHERE FLT_KEY=#fltNo#
			AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_KEY=#uldNo#
		</update>

		<select id="sqlGetHOFormNo" parameterClass="java.lang.String"  resultClass="java.lang.String"> 
			 select lpad(EXP_RAMP_HOForm_SEQ.nextval,8,0)
	 		 from dual
 		</select>

        <select id="getRHOForFlight" parameterClass="cargo.cms.export.report.bo.ExpRampHandoverRepBO"  resultClass="java.lang.String"> 
			select RHO_ID from FLT_OPR where FLT_KEY = #fltNo# and SCH_DATE = #fltDate#
 		</select>

        <select id="getHOPrintConfig" parameterClass="java.lang.String"  resultClass="cargo.cms.export.report.bo.ExpRampHandoverRepBO"> 
			 select HO_PDF as pdf, HO_DIRECT_PRINT as directPrint from MAST_HO_FORM_RHO where code = #PARAM#
 		</select>

<!--	queries for Print ULD Tag & Handover Form(Desktop) Added by Mahesh B N from  14.06.2011 to 27.06.2011 end -->
<!--	queries for Print Handover Form(HHT) Added by Mahesh B N from  01.07.2011 to 12.07.2011 begin -->			
		<select id="sqlGetUldByUldNo" parameterClass="cargo.cms.export.bo.PrintHOFormSearchBO"  resultClass="cargo.cms.export.bo.PrintHOFormTowBO">	
				   select  distinct
                   t3.flt_key as fltKey,
                   TO_CHAR(t3.flt_date,'DDMONYY') as fltDate, 
			       t3.uld_bt_no as uldKey,
			       t3.flt_key as fltNo, 
			       EXPHOVER.print_HandOver_Date as printHandOverDate,
			       'Y' as selValue,
                   t3.READY_DISP as readyInd,
			       t2.RESV_FLG as resrvFlag
                  from exp_pmanifest_uld t3 
                  join uld_inventory t2
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                  LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where t3.uld_bt_no=#uldKey#     
		</select>
		
		<select id="sqlGetHOByUldLocation" parameterClass="cargo.cms.export.bo.PrintHOFormSearchBO"  resultClass="cargo.cms.export.bo.PrintHOFormTowBO">	
				  select  distinct
                   t3.flt_key as fltKey,
                   TO_CHAR(t3.flt_date,'DDMONYY') as fltDate, 
			       t3.uld_bt_no as uldKey,
			       t3.flt_key as fltNo, 
			       EXPHOVER.print_HandOver_Date as printHandOverDate,
			       'Y' as selValue,
                   t3.READY_DISP as readyInd,
			       t2.RESV_FLG as resrvFlag
                  from exp_pmanifest_uld t3 
                  join uld_inventory t2
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                  LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where t2.loc_code=#location#     
		</select>
		
		<select id="sqlGetUldByTowNo" parameterClass="cargo.cms.export.bo.PrintHOFormSearchBO"  resultClass="cargo.cms.export.bo.PrintHOFormTowBO">
			 	select  distinct
                   t46.to_no as towNo,
                   t3.flt_key as fltKey,
                   TO_CHAR(t3.flt_date,'DDMONYY') as fltDate, 
                   t3.uld_bt_no as uldKey,
                   t3.flt_key as fltNo, 
                   EXPHOVER.print_HandOver_Date as printHandOverDate,
                   'Y' as selValue,
                   t3.READY_DISP as readyInd,
                   t2.RESV_FLG as resrvFlag
                  from exp_pmanifest_uld t3
                  left join uld_inventory t2 on t2.uld_key = t3.uld_bt_no
                  left join exp_chkout_dtl t1 on t1.uld_key = t3.uld_bt_no and t1.flt_key=t3.flt_key and t1.flt_date=t3.flt_date
                  left join (select max(TO_NUMBER(t4.to_no)) as to_num , t4.flt_key, t4.flt_date, t5.uld_key from tow_order_out t4 , tow_order_out_dtl t5 
                              where t4.to_no=t5.to_no and nvl(status,'N') !='VOID' group by t4.flt_key, t4.flt_date, t5.uld_key) t45 
                               on t3.uld_bt_no=t45.uld_key and t45.flt_key=t3.flt_key and t45.flt_date=t3.flt_date
                  left join (select to_no,HO_AREA from tow_order_out) t46 on t45.to_num = t46.to_no
                  LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where t46.to_no=#towNo#
		</select>
		<select id="sqlGetUldByTrnsfrGrp" parameterClass="cargo.cms.export.bo.PrintHOFormSearchBO"  resultClass="cargo.cms.export.bo.PrintHOFormTowBO">	
	    	 	 select  distinct
                   t46.to_no as towNo,
                   t3.flt_key as fltKey,
                   TO_CHAR(t3.flt_date,'DDMONYY') as fltDate, 
			       t3.uld_bt_no as uldKey,
			       t3.flt_key as fltNo, 
			       EXPHOVER.print_HandOver_Date as printHandOverDate,
			       'Y' as selValue,
                   t3.READY_DISP as readyInd,
			       t2.RESV_FLG as resrvFlag
                  from exp_pmanifest_uld t3 
                  left join uld_inventory t2
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                  left join (select max(TO_NUMBER(t4.to_no)) as to_num , t4.flt_key, t4.flt_date, t5.uld_key from tow_order_out t4 , tow_order_out_dtl t5 
                              where t4.to_no=t5.to_no and nvl(status,'N') !='VOID' group by t4.flt_key, t4.flt_date, t5.uld_key) t45 
                               on t3.uld_bt_no=t45.uld_key and t45.flt_key=t3.flt_key and t45.flt_date=t3.flt_date
                  left join (select to_no,HO_AREA from tow_order_out) t46 on t45.to_num = t46.to_no
                  LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where  t46.HO_AREA = #trnsfrGroup#
                   and exists  (SELECT GRP.WH_GROUP
                               FROM MAST_WH_GROUP GRP  
                               JOIN MAST_WH_LOC LOC 
                               ON GRP.WH_GROUP = LOC.WH_GROUP  
                               WHERE GRP.WH_GROUP=#trnsfrGroup#)
       </select>                      
       
       <select id="sqlGetUldByUldLoc2" parameterClass="cargo.cms.export.bo.PrintHOFormSearchBO"  resultClass="cargo.cms.export.bo.PrintHOFormTowBO">	
				   select  distinct
                   t3.flt_key as fltKey,
                   TO_CHAR(t3.flt_date,'DDMONYY') as fltDate, 
			       t3.uld_bt_no as uldKey,
			       t3.flt_key as fltNo, 
			      EXPHOVER.print_HandOver_Date as printHandOverDate,
			       'Y' as selValue,
                   t3.READY_DISP as readyInd,
			       t2.RESV_FLG as resrvFlag
                  from exp_pmanifest_uld t3 
                  join uld_inventory t2
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                  LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where T2.LOC_CODE=#location#     
		</select>
		                  
	     <update id="sqlUpdatePrintHandoverDtlsHHT" parameterClass="cargo.cms.export.report.bo.PrintHOFormRepBO">
				UPDATE EXP_CHKOUT_DTL
				SET PRINT_HANDOVER_DATE=sysdate,
				HO_FORM_NO=#strHoFormNo#,
				RAMP_RECV_USER=#rhoStaff#,
				ENDORSED_DC_BY = #endorseUserId#,
				ENDORSED_DC_DATE = sysdate,
				LM_USER_ID = #userID#,
				LM_DATE = sysdate
				WHERE flt_key=#fltNo#
				and   flt_date=TO_DATE(#fltDate#,'DDMONYY')
		<isNotEmpty prepend="AND" property="selUldList">
	            <iterate property="selUldList" open="(" close=")"
	                  conjunction="OR">
	                 uld_key = #selUldList[]#
	            </iterate>
	   </isNotEmpty>
		</update>              

<!--	queries for Print Handover Form(HHT) Added by Mahesh B N from  01.07.2011 to 12.07.2011 end -->

	<!--  Amend/Delete uld Assignment shc,dg,tag,hawb page-->
	
	<select id="amendUldshcOpen" parameterClass="cargo.cms.export.bo.CreateULDBO" resultClass="cargo.cms.export.bo.AWBBO">
		select SPL_CODE1 splCode1, SPL_CODE2 splCode2, SPL_CODE3 splCode3, SPL_CODE4 splCode4, SPL_CODE5 splCode5,
		SPL_CODE6 splCode6, SPL_CODE7 splCode7, SPL_CODE8 splCode8, SPL_CODE9 splCode9
		from  EXP_CAR where awb_no = #awbNo# and  awb_date = to_date(#awbDate#,'DDMONYY')
	</select>
	
	<!--  Amend/Delete uld Assignment shc,dg,tag,hawb page-->	




	<!-- Added by Surendra Gollapalli on 4th July 2011 for Enq Flight Allotment START -->  
 <select id="fetch_enq_flight_list_details" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightListBO">   
   select opr.FLT_KEY                AS fltKey,
  TO_CHAR(opr.SCH_DATE,'DDMONYY') AS fltDate,
  (ltrim(SUBSTR(TRIM(TO_CHAR(opr.SCH_TIME,'0000')),0,2)
  || ':'
  || SUBSTR(TRIM(TO_CHAR(opr.SCH_TIME,'0000')),3,2),':')) std,
  PKG_COMMON.get_flt_eta(opr.FLT_KEY, opr.SCH_DATE, 'D') etd,
  opr.dest      AS dest,
  opr.ACFT_TYPE AS acType,
  ver_no as verNo,
  trf_ind as alltTranfInd,
  LOAD_PLAN_IND as loadPlanInd  
  FROM (select * from
(select t.*, dense_rank() over (partition by flt_key, flt_date order by to_number(tr_no) desc) rank from edi_elp_msg t ) where rank = 1) 
 msg ,
  FLT_OPR opr

 <isNotEmpty property="unldgPt1" >
                                     <isEmpty property="unldgPt2" >
                                           <isEmpty property="unldgPt3" >
                                           INNER JOIN FLT_OPR_LEG LEG
											ON OPR.TR_NO = LEG.TR_NO
                                           AND (OFF_POINT =#unldgPt1#)
                                           </isEmpty>                                
                                     </isEmpty>          
                     </isNotEmpty>                 
                     <isNotEmpty property="unldgPt1" >
                                     <isNotEmpty property="unldgPt2" >
                                           <isEmpty property="unldgPt3" >
                                            INNER JOIN FLT_OPR_LEG LEG
											ON OPR.TR_NO = LEG.TR_NO
                                           AND (OFF_POINT =#unldgPt1# OR OFF_POINT =#unldgPt2#)
                                           </isEmpty>                                
                                     </isNotEmpty>             
                     </isNotEmpty>
                      <isNotEmpty property="unldgPt1" >
                                     <isNotEmpty property="unldgPt2" >
                                           <isNotEmpty property="unldgPt3" >
                                            INNER JOIN FLT_OPR_LEG LEG
											ON OPR.TR_NO = LEG.TR_NO
                                           AND (OFF_POINT =#unldgPt1# OR OFF_POINT =#unldgPt2# OR OFF_POINT =#unldgPt3#)
                                           </isNotEmpty>                                   
                                     </isNotEmpty>             
                     </isNotEmpty>                 
                     <isEmpty property="unldgPt1" >
                                     <isNotEmpty property="unldgPt2" >
                                           <isNotEmpty property="unldgPt3" >
                                            INNER JOIN FLT_OPR_LEG LEG
											ON OPR.TR_NO = LEG.TR_NO
                                           AND (OFF_POINT =#unldgPt2# OR OFF_POINT =#unldgPt3#)
                                           </isNotEmpty>                                   
                                     </isNotEmpty>             
                     </isEmpty>
                     <isEmpty property="unldgPt1" >
                                     <isEmpty property="unldgPt2" >
                                           <isNotEmpty property="unldgPt3" >
                                            INNER JOIN FLT_OPR_LEG LEG
											ON OPR.TR_NO = LEG.TR_NO
                                           AND (OFF_POINT =#unldgPt3#)
                                           </isNotEmpty>                                   
                                     </isEmpty>          
                     </isEmpty>
                      <isNotEmpty property="unldgPt1" >
                                     <isEmpty property="unldgPt2" >
                                           <isNotEmpty property="unldgPt3" >
                                            INNER JOIN FLT_OPR_LEG LEG
											ON OPR.TR_NO = LEG.TR_NO
                                           AND (OFF_POINT =#unldgPt1# OR OFF_POINT =#unldgPt3#)
                                           </isNotEmpty>                                   
                                     </isEmpty>          
                     </isNotEmpty>
WHERE opr.SCH_DATE BETWEEN TO_DATE(#fromFltDate#, 'DDMONYY') AND TO_DATE (#toFltDate#, 'DDMONYY')
AND opr.SCH_TIME BETWEEN (#fromFltTime#) AND (#toFltTime#)
AND OPR.FLT_TYPE ='D'
AND msg.flt_key  =opr.FLT_KEY
AND msg.flt_date =opr.SCH_DATE
AND msg.ver_no  IS NOT NULL
<isNotEmpty property="fltKey" prepend="AND">
            opr.FLT_KEY= #fltKey#
            </isNotEmpty> 
            
 <isEmpty property="fltPfx">
				<isNotEmpty property="loginCarrier">
				   AND ( opr.carr_code = #loginCarrier#
                        OR  opr.carr_code IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #loginCarrier#))             
            	</isNotEmpty>
</isEmpty>	
             order by opr.SCH_DATE,opr.SCH_TIME,opr.EST_TIME,opr.dest
</select>  


<select id="getEnqFlightAllotmentHeader" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">
	 select * from (select PKG_COMMON.get_flt_eta(opr.flt_key, opr.SCH_DATE, 'D') as etd,opr.TR_NO as oprTrNo
 	,  elpmsg.CALL_SIGN as callSign, elpmsg.acft_type as acftType,elpmsg.exceed as exceed,elpmsg.uco_rmk as ucoRmk,elpmsg.VER_NO as versionNo,elpmsg.TR_NO as trNo,
 	 elpmsg.BAGGAGE_NO as  baggageNo,elpmsg.load_plan_finalize AS finalized, to_char(elpmsg.RECEIVE_DATE,'DDMONYY HH24:MI') as reciveDate,elpmsg.trf_ind AS trfInd,elpmsg.finalize_ind as finalizedInd from flt_opr opr LEFT OUTER JOIN edi_elp_msg elpmsg  ON elpmsg.flt_key=opr.flt_key and to_char(elpmsg.flt_date, 'DDMONYY')=to_char(opr.sch_date, 'DDMONYY')   where
 	opr.flt_key=#fltKey# and opr.sch_date=TO_DATE(#fltDate#, 'DDMONYY') and opr.flt_type = 'D' order by to_number(elpmsg.tr_no)  desc) where rownum=1
 </select>
	
<select id="getEnqFlightAllotmentDetails" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG, 
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Transit' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Transit' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>	
	<isNotEmpty property="versionNo">
		AND elpmsg.ver_no = #versionNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG,
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Export Local B/U' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Export Local B/U' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	<isNotEmpty property="versionNo">
		AND elpmsg.ver_no = #versionNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG,
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Export Local Pre-Pack' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Export Local Pre-Pack'and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	<isNotEmpty property="versionNo">
		AND elpmsg.ver_no = #versionNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG,
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Transit PPK' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Transit PPK' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	<isNotEmpty property="versionNo">
		AND elpmsg.ver_no = #versionNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG, 
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Tarmac' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Tarmac' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	<isNotEmpty property="versionNo">
		AND elpmsg.ver_no = #versionNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG, 
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Courier' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Courier'  and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	<isNotEmpty property="versionNo">
		AND elpmsg.ver_no = #versionNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG,
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Mail' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Mail' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	<isNotEmpty property="versionNo">
		AND elpmsg.ver_no = #versionNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG, 
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Open' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Open'  and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	<isNotEmpty property="versionNo">
		AND elpmsg.ver_no = #versionNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG,
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'EIC' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='EIC'  and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	<isNotEmpty property="versionNo">
		AND elpmsg.ver_no = #versionNo#
	</isNotEmpty>
	UNION ALL
	select 
	elpallot.QTY_ZA as qtyZA, elpallot.QTY_ZB as qtyZB, elpallot.QTY_ZC as qtyZC, elpallot.QTY_PGA as qtyPGA, elpallot.QTY_H3 as qtyH3, elpallot.QTY_BULK as qtyBULK,
	elpallot.QTY_ALF as qtyALF, elpallot.QTY_PLA as qtyPLA, elpallot.QTY_Q7D as qtyQ7D, elpallot.QTY_W2 as qtyW2, elpallot.QTY_PAG as qtyPAG,
	elpallot.INSTRUCTION as instruction,'Y' as hardDelete, elpallot.QTY_Q7 as qtyQ7,elpallot.QTY_Q6 as qtyQ6,elpallot.QTY_X8 as qtyX8,elpallot.QTY_PEB as qtyPEB, 
	elpallot.QTY_H5 as qtyH5 ,elpallot.QTY_A2 as qtyA2 ,elpallot.QTY_LDC as qtyLDC ,elpallot.QTY_H2 as qtyH2 , 'Standby' as cgoType,elpallot.rmk as rmk,elpmsg.TR_NO as trNo,
  	elpport.DOC_LINE_NO as portDocLineNo,elpallot.DOC_LINE_NO as docLineNo,	elpallot.WT as wt,	elpallot.H5WT as h5Wt
	from edi_elp_msg elpmsg,edi_elp_port elpport,edi_elp_allot elpallot where  elpmsg.TR_NO=elpport.tr_no 
	and elpmsg.tr_no=elpallot.tr_no and elpallot.port_doc_line_no=elpport.DOC_LINE_NO
	and  elpallot.CGO_TYPE='Standby' and elpport.port=#unLdgPoint# and elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
	<isNotEmpty property="trNo">
		AND elpmsg.TR_NO = #trNo#
	</isNotEmpty>
	<isNotEmpty property="versionNo">
		AND elpmsg.ver_no = #versionNo#
	</isNotEmpty>
</select>
	
<select id="getEnqUnLdgPoints" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">
	    select off_point as unLdgPoint from flt_opr_seg where tr_no in (select tr_no from flt_opr where flt_key = #fltKey# and sch_date=to_date(#fltDate#,'dd-mon-yy') and flt_type = 'D') and brd_point='HKG' 
</select>


<select id="fetch_enq_edi_elp_allot_awb" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">   	
		select DOC_LINE_NO as awbDocLineNo,CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNo,PCS as awbPcs,WT as awbWt,INSTRUCTION as awbInstruction,TR_NO as trNo,C_DOC_LINE_NO as docLineNo,
		substr(AWB_NO,0,3) as awbNoPfx,substr(AWB_NO,4) as awbNoSfx from edi_elp_allot_awb	where tr_no=#trNo#
</select>

<select id="fetch_enq_edi_elp_allot_uld" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">   	
		select DOC_LINE_NO as uldDocLineNo,TR_NO as trNo,C_DOC_LINE_NO as docLineNo,
		ULD_KEY as uldKey from edi_elp_allot_uld where tr_no=#trNo#
</select>

<select id="getEnqVerNumber" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">
	   select * from (select elpmsg.VER_NO as versionNo from flt_opr opr LEFT OUTER JOIN edi_elp_msg elpmsg  ON elpmsg.flt_key=opr.flt_key and to_char(elpmsg.flt_date, 'DDMONYY')=to_char(opr.sch_date, 'DDMONYY')   where
 	opr.flt_key=#fltKey# and opr.sch_date=TO_DATE(#fltDate#, 'DDMONYY') and opr.flt_type = 'D' order by to_number(elpmsg.tr_no) asc)
 </select>
 
 
 
 <select id="fetch_enq_TtlandGDTtl_Allot" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">   	
		select (select (decode(sum(allot.qty_Q7 ), null, '', sum(allot.qty_Q7 ) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '', ','|| sum(allot.qty_X8 ) ||'X8')
               
               || decode(sum(allot.QTY_ZA ), null, '', ','|| sum(allot.QTY_ZA ) ||'ZA')
               || decode(sum(allot.QTY_ZB ), null, '', ','|| sum(allot.QTY_ZB ) ||'ZB')
               || decode(sum(allot.QTY_ZC ), null, '', ','|| sum(allot.QTY_ZC ) ||'ZC')
               || decode(sum(allot.QTY_PGA ), null, '', ','|| sum(allot.QTY_PGA ) ||'PGA')
               
               || decode( sum(allot.QTY_PEB ), null, '', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_H3 ), null, '', ','|| sum(allot.QTY_H3 ) ||'H3')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ALF ), null, '', ','|| sum(allot.QTY_ALF ) ||'ALF')
               || decode(sum(allot.QTY_PLA ), null, '', ','|| sum(allot.QTY_PLA ) ||'PLA')
               || decode(sum(allot.QTY_Q7D ), null, '', ','|| sum(allot.QTY_Q7D ) ||'Q7D')
               || decode(sum(allot.QTY_W2 ), null, '', ','|| sum(allot.QTY_W2 ) ||'W2')
               || decode(sum(allot.QTY_PAG ), null, '', ','|| sum(allot.QTY_PAG ) ||'PAG')
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )
                || decode(sum(allot.WT ), null, '', ' (' || sum(allot.WT )||')')) 
			FROM edi_elp_allot allot,edi_elp_port port,edi_elp_msg emsg
              WHERE allot.tr_no       = emsg.tr_no
              AND emsg.TR_NO         = port.tr_no
              AND port.doc_line_no= allot.port_doc_line_no
              AND port.port         = #unLdgPoint#
              AND emsg.ver_no     = #versionNo# 
              AND allot.CGO_TYPE in('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac','Courier','Mail','Open','EIC')
              AND emsg.flt_key= #fltKey#
              AND emsg.flt_date = TO_DATE(#fltDate#, 'DDMONYY')
              AND emsg.tr_no    = #trNo# )as portTotal ,
                (select (decode(sum(allot.qty_Q7 ), null, '', sum(allot.qty_Q7 ) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode(sum(allot.QTY_ZA ), null, '', ','|| sum(allot.QTY_ZA ) ||'ZA')
               || decode(sum(allot.QTY_ZB ), null, '', ','|| sum(allot.QTY_ZB ) ||'ZB')
               || decode(sum(allot.QTY_ZC ), null, '', ','|| sum(allot.QTY_ZC ) ||'ZC')
               || decode(sum(allot.QTY_PGA ), null, '', ','|| sum(allot.QTY_PGA ) ||'PGA')
               || decode( sum(allot.QTY_PEB ), null, '', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_H3 ), null, '', ','|| sum(allot.QTY_H3 ) ||'H3')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               || decode(sum(allot.QTY_ALF ), null, '', ','|| sum(allot.QTY_ALF ) ||'ALF')
               || decode(sum(allot.QTY_PLA ), null, '', ','|| sum(allot.QTY_PLA ) ||'PLA')
               || decode(sum(allot.QTY_Q7D ), null, '', ','|| sum(allot.QTY_Q7D ) ||'Q7D')
               || decode(sum(allot.QTY_W2 ), null, '', ','|| sum(allot.QTY_W2 ) ||'W2')
               || decode(sum(allot.QTY_PAG ), null, '', ','|| sum(allot.QTY_PAG ) ||'PAG')
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )
                || decode(sum(allot.WT ), null, '', ' (' || sum(allot.WT )||')')) 
			FROM edi_elp_allot allot , edi_elp_msg elpMsg                  
                WHERE allot.tr_no   = elpMsg.tr_no 
                AND elpMsg.flt_key = #fltKey#
                AND elpMsg.flt_date = TO_DATE(#fltDate#, 'DDMONYY')
                AND elpMsg.tr_no    = #trNo#  
                AND allot.CGO_TYPE in('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac','Courier','Mail','Open','EIC') ) as grandTotal                
           FROM DUAL
   	</select>
   	
   	<select id="fetch_enq_TtlandGDTtl_Allot_Pass_Flt" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">   	
		select (select (decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               
               || decode(sum(allot.QTY_H3 ), null, '', ','|| sum(allot.QTY_H3) ||'H3')
               || decode(sum(allot.QTY_PAG ), null, '', ','|| sum(allot.QTY_PAG) ||'PAG')
               || decode(sum(allot.QTY_PLA ), null, '', ','|| sum(allot.QTY_PLA) ||'PLA')
               || decode(sum(allot.QTY_ALF ), null, '', ','|| sum(allot.QTY_ALF) ||'ALF')
               || decode(sum(allot.QTY_BULK ), null, '', ','|| sum(allot.QTY_BULK) ||'BULK')
               
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )
                || decode(sum(allot.WT ), null, '', ' (' || sum(allot.WT )||')')) 
                FROM edi_elp_allot allot,
                edi_elp_port port,
                edi_elp_msg emsg
              WHERE allot.tr_no       = emsg.tr_no
              AND emsg.TR_NO         = port.tr_no
              AND port.doc_line_no= allot.port_doc_line_no
              AND port.port         = #unLdgPoint#
              AND emsg.ver_no     = #versionNo# 
              AND allot.CGO_TYPE   IN ('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac', 'Courier','Mail','Open','EIC')  
              AND emsg.flt_key= #fltKey#
              AND emsg.flt_date = TO_DATE(#fltDate#, 'DDMONYY')
              AND emsg.tr_no    = #trNo# ) as portTotal ,
                (select (decode(sum(allot.QTY_H2 ), null, '', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '', ','|| sum(allot.QTY_LDC ) ||'LDC')
               
               || decode(sum(allot.QTY_H3 ), null, '', ','|| sum(allot.QTY_H3 ) ||'H3')
               || decode(sum(allot.QTY_PAG ), null, '', ','|| sum(allot.QTY_PAG ) ||'PAG')
               || decode(sum(allot.QTY_PLA ), null, '', ','|| sum(allot.QTY_PLA ) ||'PLA')
               || decode(sum(allot.QTY_ALF ), null, '', ','|| sum(allot.QTY_ALF ) ||'ALF')
               || decode(sum(allot.QTY_BULK ), null, '', ','|| sum(allot.QTY_BULK ) ||'BULK')
               
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )
                || decode(sum(allot.WT ), null, '', ' (' || sum(allot.WT )||')')) from edi_elp_allot allot , edi_elp_msg elpMsg                  
                WHERE allot.tr_no   = elpMsg.tr_no 
                AND elpMsg.flt_key = #fltKey#
                AND elpMsg.flt_date = TO_DATE(#fltDate#, 'DDMONYY')
                AND elpMsg.tr_no    = #trNo# 
                AND allot.CGO_TYPE in('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac',
                'Courier','Mail','Open','EIC') ) as grandTotal                
                FROM DUAL
   	</select>
   	
   	
   	
   	
   <select id="getLatestVerNoAndTrNo" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">
   
    select elpmsg.tr_no as trNo,elpmsg.VER_NO as versionNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')  order by to_number(elpmsg.tr_no)  desc
   
	</select> 
	
	
		<select id="fetch_Enq_Allotment_Summary" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">   	
	select (select (decode(d.qtyQ7 , null, '',0,'',  d.qtyQ7 ||'Q7' )
               || decode(d.qtyQ6, null, '',0,'',','||  d.qtyQ6 ||'Q6')
               || decode(d.qtyX8, null, '',0,'',','|| d.qtyX8 ||'X8')
               || decode( d.qtyPEB, null, '',0,'',','|| d.qtyPEB ||'PEB')
               || decode(d.qtyH2, null, '',0,'',','||d.qtyH2 ||'H2')
               || decode(d.qtyA2, null, '',0,'',','|| d.qtyA2 ||'A2')
               || decode(d.qtyLDC, null, '',0,'',','|| d.qtyLDC ||'LDC')
               
               || decode(d.qtyZA, null, '',0,'',','||  d.qtyZA ||'ZA')
               || decode(d.qtyZB, null, '',0,'',','|| d.qtyZB ||'ZB')
               || decode(d.qtyZC, null, '',0,'', ','|| d.qtyZC ||'ZC')
               || decode(d.qtyPGA, null, '',0,'', ','||d.qtyPGA ||'PGA')
               || decode(d.qtyH3, null, '',0,'', ','|| d.qtyH3 ||'H3')
               || decode(d.qtyBULK, null, '',0,'', ','|| d.qtyBULK ||'BULK')
               || decode(d.qtyALF, null, '',0,'',','||  d.qtyALF ||'ALF')
               || decode(d.qtyPLA, null, '',0,'',','|| d.qtyPLA ||'PLA')
               || decode(d.qtyQ7D, null, '',0,'', ','|| d.qtyQ7D ||'Q7D')
               || decode(d.qtyW2, null, '',0,'', ','||d.qtyW2 ||'W2')
               || decode(d.qtyPAG, null, '',0,'', ','|| d.qtyPAG ||'PAG')
               
               ||  decode(d.countH5 , 0, '', ','||'H5' ))  from
              (select a.countH5,(a.totalQ6-b.totalQ6) as qtyQ6,(a.totalQ7-b.totalQ7) as qtyQ7,(a.totalX8-b.totalX8) as qtyX8,
              (a.totalPEB-b.totalPEB) as qtyPEB,(a.totalA2-b.totalA2) as qtyA2,(a.totalLDC-b.totalLDC) as qtyLDC,(a.totalH2-b.totalH2) as qtyH2,             
              
              (a.totalZA-b.totalZA) as qtyZA,(a.totalZB-b.totalZB) as qtyZB, (a.totalZC-b.totalZC) as qtyZC,(a.totalPGA-b.totalPGA) as qtyPGA,
              (a.totalH3-b.totalH3) as qtyH3,(a.totalBULK-b.totalBULK) as qtyBULK, (a.totalALF-b.totalALF) as qtyALF,(a.totalPLA-b.totalPLA) as qtyPLA,
              (a.totalQ7D-b.totalQ7D) as qtyQ7D,(a.totalW2-b.totalW2) as qtyW2, (a.totalPAG-b.totalPAG) as qtyPAG,
                     
              a.tr_no as tr_no 
              from (select count(QTY_H5 )as countH5, sum(qty_Q6 ) as totalQ6,sum(qty_Q7 ) as totalQ7,
               sum(QTY_X8 ) as totalX8,sum(QTY_PEB ) as totalPEB,sum(QTY_A2 ) as totalA2, sum(QTY_LDC ) as totalLDC,
                sum(QTY_H2 ) as totalH2,
                
              SUM(QTY_ZA) AS totalZA, SUM(QTY_ZB) AS totalZB, SUM(QTY_ZC) AS totalZC, SUM(QTY_PGA) AS totalPGA,
			  SUM(QTY_H3) AS totalH3, SUM(QTY_BULK) AS totalBULK, SUM(QTY_ALF) AS totalALF, SUM(QTY_PLA) AS totalPLA,
			  SUM(QTY_Q7D) AS totalQ7D, SUM(QTY_W2) AS totalW2, SUM(QTY_PAG) AS totalPAG, 
                
              tr_no from edi_elp_allot where CGO_TYPE in('Transit','Export Local B/U')   group by tr_no) a, 
              (select NVL(sum(qty_Q6 ),0) as totalQ6,NVL(sum(qty_Q7 ),0) as totalQ7,
              NVL(sum(QTY_X8 ),0) as totalX8,NVL(sum(QTY_PEB ),0) as totalPEB,NVL(sum(QTY_A2 ),0) as totalA2,NVL( sum(QTY_LDC ),0) as totalLDC,
                NVL(sum(QTY_H2 ),0) as totalH2,
                
                NVL(sum(QTY_ZA ),0) as totalZA,NVL(sum(QTY_ZB ),0) as totalZB,NVL(sum(QTY_ZC ),0) as totalZC, NVL(sum(QTY_PGA ),0) as totalPGA,NVL(sum(QTY_H3 ),0) as totalH3,NVL(sum(QTY_BULK),0) as totalBULK,
			    NVL(sum(QTY_ALF),0) as totalALF,NVL(sum(QTY_PLA),0) as totalPLA,NVL(sum(QTY_Q7D),0) as totalQ7D, NVL(sum(QTY_W2),0) as totalW2,NVL(sum(QTY_PAG),0) as totalPAG,
                
              tr_no from edi_elp_allot where CGO_TYPE in('Transit PPK')  group by tr_no) b
              where a.tr_no=b.tr_no )d where d.tr_no =msg.tr_no) as whBuildUpTotal, 
                (select (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               || decode(sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               || decode(sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               || decode(sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               || decode(sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               || decode(sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               || decode(sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               || decode(sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               || decode(sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               || decode(sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               || decode(sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Export Local Pre-Pack','Transit PPK') ) as ppkTotal,
                (select (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               || decode(sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               || decode(sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               || decode(sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               || decode(sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               || decode(sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               || decode(sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               || decode(sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               || decode(sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               || decode(sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               || decode(sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Tarmac') ) as tarmacTotal,
                (select (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               || decode(sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               || decode(sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               || decode(sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               || decode(sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               || decode(sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               || decode(sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               || decode(sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               || decode(sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               || decode(sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               || decode(sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Courier','Mail','Open','EIC') ) as othersTotal ,
                 (select 
               (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               || decode(sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               || decode(sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               || decode(sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               || decode(sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               || decode(sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               || decode(sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               || decode(sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               || decode(sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               || decode(sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               || decode(sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )
                || decode(sum(allot.WT ), null, '', ' (' || sum(allot.WT )||')')) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.CGO_TYPE in('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac',
                'Courier','Mail','Open','EIC') ) as grandTotal                
                from edi_elp_msg msg where  msg.flt_key=#fltKey#   and msg.flt_date=TO_DATE(#fltDate#, 'DDMONYY') and msg.tr_no in(
                SELECT b.trNO FROM (SELECT rownum r, a.trNo  FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')  and elpmsg.VER_NO=#versionNo# )a
                WHERE rownum &lt;=1) b WHERE r=1)
   	</select>
   	
   	
   	
  <select id="getTrNoPassingSelVerNo" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="java.lang.String">
   	 select 
		elpmsg.TR_NO as trNo
 	 	from flt_opr opr LEFT OUTER JOIN edi_elp_msg elpmsg  ON elpmsg.flt_key=opr.flt_key and to_char(elpmsg.flt_date, 'DDMONYY')=to_char(opr.sch_date, 'DDMONYY')   where
 		opr.flt_key=#fltKey# and opr.sch_date=TO_DATE(#fltDate#, 'DDMONYY') and 
  		opr.flt_type = 'D' AND elpmsg.VER_NO = #versionNo#
	</select>
	
	
	<select id="getEnqFlightAllotHeaderForSelVerNumber" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO">
	 select * from (select decode(opr.est_time,null,null,substr(lpad(opr.est_time,4,'0'),1,2)||':'||substr(lpad(opr.est_time,4,'0'),3)) as etd,opr.TR_NO as oprTrNo
 	,  elpmsg.CALL_SIGN as callSign, elpmsg.acft_type as acftType,elpmsg.exceed as exceed,elpmsg.uco_rmk as ucoRmk,elpmsg.VER_NO as versionNo,elpmsg.TR_NO as trNo,
 	 elpmsg.BAGGAGE_NO as  baggageNo,elpmsg.load_plan_finalize AS finalized, to_char(elpmsg.RECEIVE_DATE,'DDMONYY HH24:MI') as reciveDate,elpmsg.trf_ind AS trfInd,elpmsg.finalize_ind as finalizedInd from flt_opr opr LEFT OUTER JOIN edi_elp_msg elpmsg  ON elpmsg.flt_key=opr.flt_key and to_char(elpmsg.flt_date, 'DDMONYY')=to_char(opr.sch_date, 'DDMONYY')   where
 	opr.flt_key=#fltKey# and opr.sch_date=TO_DATE(#fltDate#, 'DDMONYY') and opr.flt_type = 'D' and elpmsg.VER_NO =#versionNo#) 
 </select>
 
 <select id="checkForValidDateToAndFromTime" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="java.lang.String">
	select (case
         when (SELECT TO_CHAR(TO_DATE(#fromFltDate#,'DDMONYY') - TO_DATE(#toFltDate#,'DD-MON-YY')) DAYDIFF FROM DUAL) >= 1
         then 'Y'
         ELSE 
          'N'      
         end) AS dateInd         
         FROM DUAL
 </select>
   	
   	<select id="checkUnladingPortValid" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	    	    SELECT COUNT(1) FROM FLT_OPR_LEG where off_point= #dest#
	</select>
	
	
		<select id="fetch_Enq_Allotment_Summary_Unldng_Port" parameterClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.EnqFlightAllotmentUnldngBO">   	
		select (select (decode(d.qtyQ7 , null, '',0,'',  d.qtyQ7 ||'Q7' )
               || decode(d.qtyQ6, null, '',0,'',','||  d.qtyQ6 ||'Q6')
               || decode(d.qtyX8, null, '',0,'',','|| d.qtyX8 ||'X8')
               || decode( d.qtyPEB, null, '',0,'',','|| d.qtyPEB ||'PEB')
               || decode(d.qtyH2, null, '',0,'',','||d.qtyH2 ||'H2')
               || decode(d.qtyA2, null, '',0,'',','|| d.qtyA2 ||'A2')
               || decode(d.qtyLDC, null, '',0,'',','|| d.qtyLDC ||'LDC')
               
               || decode(d.qtyZA, null, '',0,'',','||  d.qtyZA ||'ZA')
               || decode(d.qtyZB, null, '',0,'',','|| d.qtyZB ||'ZB')
               || decode(d.qtyZC, null, '',0,'', ','|| d.qtyZC ||'ZC')
               || decode(d.qtyPGA, null, '',0,'', ','||d.qtyPGA ||'PGA')
               || decode(d.qtyH3, null, '',0,'', ','|| d.qtyH3 ||'H3')
               || decode(d.qtyBULK, null, '',0,'', ','|| d.qtyBULK ||'BULK')
               || decode(d.qtyALF, null, '',0,'',','||  d.qtyALF ||'ALF')
               || decode(d.qtyPLA, null, '',0,'',','|| d.qtyPLA ||'PLA')
               || decode(d.qtyQ7D, null, '',0,'', ','|| d.qtyQ7D ||'Q7D')
               || decode(d.qtyW2, null, '',0,'', ','||d.qtyW2 ||'W2')
               || decode(d.qtyPAG, null, '',0,'', ','|| d.qtyPAG ||'PAG')
               
               ||  decode(d.countH5 , 0, '', ','||'H5' ))  from
              (select a.countH5,(a.totalQ6-b.totalQ6) as qtyQ6,(a.totalQ7-b.totalQ7) as qtyQ7,(a.totalX8-b.totalX8) as qtyX8,
              (a.totalPEB-b.totalPEB) as qtyPEB,(a.totalA2-b.totalA2) as qtyA2,(a.totalLDC-b.totalLDC) as qtyLDC,(a.totalH2-b.totalH2) as qtyH2,             
              
              (a.totalZA-b.totalZA) as qtyZA,(a.totalZB-b.totalZB) as qtyZB, (a.totalZC-b.totalZC) as qtyZC,(a.totalPGA-b.totalPGA) as qtyPGA,
              (a.totalH3-b.totalH3) as qtyH3,(a.totalBULK-b.totalBULK) as qtyBULK, (a.totalALF-b.totalALF) as qtyALF,(a.totalPLA-b.totalPLA) as qtyPLA,
              (a.totalQ7D-b.totalQ7D) as qtyQ7D,(a.totalW2-b.totalW2) as qtyW2, (a.totalPAG-b.totalPAG) as qtyPAG,
                           
              b.tr_no as tr_no ,b.PORT_DOC_LINE_NO as PORT_DOC_LINE_NO
              from (select count(QTY_H5 )as countH5, sum(qty_Q6 ) as totalQ6,sum(qty_Q7 ) as totalQ7,
               sum(QTY_X8 ) as totalX8,sum(QTY_PEB ) as totalPEB,sum(QTY_A2 ) as totalA2, sum(QTY_LDC ) as totalLDC,
                sum(QTY_H2 ) as totalH2,
                
              SUM(QTY_ZA) AS totalZA, SUM(QTY_ZB) AS totalZB, SUM(QTY_ZC) AS totalZC, SUM(QTY_PGA) AS totalPGA,
			  SUM(QTY_H3) AS totalH3, SUM(QTY_BULK) AS totalBULK, SUM(QTY_ALF) AS totalALF, SUM(QTY_PLA) AS totalPLA,
			  SUM(QTY_Q7D) AS totalQ7D, SUM(QTY_W2) AS totalW2, SUM(QTY_PAG) AS totalPAG, 
                
              tr_no,PORT_DOC_LINE_NO from edi_elp_allot where CGO_TYPE in('Transit','Export Local B/U')   group by tr_no,PORT_DOC_LINE_NO) a, 
              (select NVL(sum(qty_Q6 ),0) as totalQ6,NVL(sum(qty_Q7 ),0) as totalQ7,
              NVL(sum(QTY_X8 ),0) as totalX8,NVL(sum(QTY_PEB ),0) as totalPEB,NVL(sum(QTY_A2 ),0) as totalA2,NVL( sum(QTY_LDC ),0) as totalLDC,
                NVL(sum(QTY_H2 ),0) as totalH2,
                
                NVL(sum(QTY_ZA ),0) as totalZA,NVL(sum(QTY_ZB ),0) as totalZB,NVL(sum(QTY_ZC ),0) as totalZC, NVL(sum(QTY_PGA ),0) as totalPGA,NVL(sum(QTY_H3 ),0) as totalH3,NVL(sum(QTY_BULK),0) as totalBULK,
			    NVL(sum(QTY_ALF),0) as totalALF,NVL(sum(QTY_PLA),0) as totalPLA,NVL(sum(QTY_Q7D),0) as totalQ7D, NVL(sum(QTY_W2),0) as totalW2,NVL(sum(QTY_PAG),0) as totalPAG,
                
              tr_no,PORT_DOC_LINE_NO from edi_elp_allot where CGO_TYPE in('Transit PPK')  group by tr_no,PORT_DOC_LINE_NO) b
              where a.tr_no=b.tr_no and a.port_doc_line_no=b.port_doc_line_no )d where d.tr_no =msg.tr_no and d.PORT_DOC_LINE_NO=port.DOC_LINE_NO) as whBuildUpTotal,  
                (select  (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               || decode(sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               || decode(sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               || decode(sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               || decode(sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               || decode(sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               || decode(sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               || decode(sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               || decode(sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               || decode(sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               || decode(sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.PORT_DOC_LINE_NO=port.DOC_LINE_NO and
                allot.CGO_TYPE in('Export Local Pre-Pack','Transit PPK') ) as ppkTotal,
                (select (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               || decode(sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               || decode(sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               || decode(sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               || decode(sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               || decode(sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               || decode(sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               || decode(sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               || decode(sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               || decode(sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               || decode(sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.PORT_DOC_LINE_NO=port.DOC_LINE_NO and allot.CGO_TYPE in('Tarmac') ) as tarmacTotal,
                (select (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               || decode(sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               || decode(sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               || decode(sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               || decode(sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               || decode(sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               || decode(sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               || decode(sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               || decode(sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               || decode(sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               || decode(sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )) from edi_elp_allot allot
                where allot.tr_no= msg.tr_no and allot.PORT_DOC_LINE_NO=port.DOC_LINE_NO and allot.CGO_TYPE in('Courier','Mail','Open','EIC') ) as othersTotal ,
                 (select      
               (decode(sum(allot.qty_Q7 ), null, '',0,'', sum(allot.qty_Q7) ||'Q7')
               || decode(sum(allot.qty_Q6 ), null, '',0,'',','||  sum(allot.qty_Q6 ) ||'Q6')
               || decode(sum(allot.qty_X8 ), null, '',0,'', ','|| sum(allot.qty_X8 ) ||'X8')
               || decode( sum(allot.QTY_PEB ), null, '',0,'', ','|| sum(allot.QTY_PEB ) ||'PEB')
               || decode(sum(allot.QTY_H2 ), null, '',0,'', ','|| sum(allot.QTY_H2 ) ||'H2')
               || decode(sum(allot.QTY_A2 ), null, '',0,'', ','|| sum(allot.QTY_A2 ) ||'A2')
               || decode(sum(allot.QTY_LDC ), null, '',0,'', ','|| sum(allot.QTY_LDC ) ||'LDC')
               
               || decode(sum(allot.QTY_ZA ), null, '',0,'', ','|| sum(allot.QTY_ZA ) ||'ZA' )
               || decode(sum(allot.QTY_ZB ), null, '',0,'', ','|| sum(allot.QTY_ZB ) ||'ZB' )
               || decode(sum(allot.QTY_ZC ), null, '',0,'', ','|| sum(allot.QTY_ZC ) ||'ZC' )
               || decode(sum(allot.QTY_PGA ), null, '',0,'', ','|| sum(allot.QTY_PGA ) ||'PGA' )
               || decode(sum(allot.QTY_H3 ), null, '',0,'', ','|| sum(allot.QTY_H3 ) ||'H3' )
               || decode(sum(allot.QTY_BULK ), null, '',0,'', ','|| sum(allot.QTY_BULK ) ||'BULK' )
               || decode(sum(allot.QTY_ALF ), null, '',0,'', ','|| sum(allot.QTY_ALF ) ||'ALF' )
               || decode(sum(allot.QTY_PLA ), null, '',0,'', ','|| sum(allot.QTY_PLA ) ||'PLA' )
               || decode(sum(allot.QTY_Q7D ), null, '',0,'', ','|| sum(allot.QTY_Q7D ) ||'Q7D' )
               || decode(sum(allot.QTY_W2 ), null, '',0,'', ','|| sum(allot.QTY_W2 ) ||'W2' )
               || decode(sum(allot.QTY_PAG ), null, '',0,'', ','|| sum(allot.QTY_PAG ) ||'PAG' )
               
               ||  decode( count(allot.QTY_H5 ), 0, '', ','||'H5' )
                || decode(sum(allot.WT ), null, '', ' (' || sum(allot.WT )||')')) from edi_elp_allot allot
                where   allot.tr_no= msg.tr_no and allot.PORT_DOC_LINE_NO=port.DOC_LINE_NO and allot.CGO_TYPE in('Transit','Export Local B/U','Export Local Pre-Pack','Tarmac',
                'Courier','Mail','Open','EIC') ) as grandTotal                
                from edi_elp_msg msg,edi_elp_port port  where port.port=#unldgPt1# and port.TR_NO =msg.TR_NO  and  msg.flt_key=#fltKey#   and msg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')
                and msg.tr_no in(
                SELECT b.trNO FROM (SELECT rownum r, a.trNo  FROM (select elpmsg.tr_no as trNo from  edi_elp_msg elpmsg  where elpmsg.flt_key=#fltKey# and elpmsg.flt_date=TO_DATE(#fltDate#, 'DDMONYY')  and elpmsg.VER_NO=#versionNo#)a
                WHERE rownum &lt;=1) b WHERE r=1)
   	</select>
   	
   	
	
	<!-- Added by Surendra Gollapalli on 4th July 2011 for Enq Flight Allotment END -->
	
	<select id="checkValidExportFlight" parameterClass="map" resultClass="java.lang.Integer">	
		SELECT COUNT(1) FROM flt_opr   WHERE flt_key = #fltKey#    AND sch_date between   to_date(#fromDate#,'DDMONYY') AND  to_date(#toDate#,'DDMONYY') AND flt_type = 'D'            
    </select>
    
	<select id="datecomparisonTime" parameterClass="map" resultClass="java.lang.Double">	
		select 24 * (to_date(#ToDate#, 'DDMONYYHH24MI')  - to_date(#FromDate#, 'DDMONYYHH24MI')) diff_hours    from dual          
    </select>
    
    <!-- Undo Auto Buildup(UAB) :: Anup :: Starts -->
    <update id="sqlUABUpdateAwbInventory" parameterClass="java.util.HashMap">
    	UPDATE 
    		AWB_INVENTORY 
    	SET 
    		LOCN_PCS=(LOCN_PCS-#assignedPcs#), LOCN_WT=(LOCN_WT-#assignedWt#) 
    	WHERE 
    		FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND AWB_NO=#awbNo# 
    		AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
    </update>
    <select id="sqlUABFindExpPmnfstUldAwbTrNo" parameterClass="java.util.HashMap" resultClass="java.lang.String">
    	SELECT 
    		TR_NO as trNo 
    	FROM 
    		EXP_PMANIFEST_ULD_AWB 
    	WHERE 
    		FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND AWB_NO=#awbNo# 
    		AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND UNLDG_PT=#unldgPt#
    </select>
    <update id="sqlUABUpdateExpPmnfstUldAwb" parameterClass="java.util.HashMap">
    	UPDATE 
    		EXP_PMANIFEST_ULD_AWB 
    	SET TR_TYPE = 'COFFC',
    		ASSIGNED_PCS=(ASSIGNED_PCS-#assignedPcs#), ASSIGNED_WT=(ASSIGNED_WT-TO_CHAR(#assignedWt#,'9999990D99')) 
    	WHERE 
    		TR_NO=#trNo#
    </update>
    <select id="sqlUABFindAssignedPcWt" parameterClass="java.lang.String" resultClass="java.lang.Integer">
    	SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB WHERE ASSIGNED_PCS='0' AND ASSIGNED_WT='0' AND TR_NO=#trNo#
    </select>
    <delete id="sqlUABDeleteExpPmnfstUldAwb" parameterClass="java.lang.String">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB WHERE TR_NO=#trNo#
    </delete>
    <delete id="sqlUABDeleteExpPmnfstUldAwbHawb" parameterClass="java.lang.String">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB_HAWB WHERE TR_NO=#trNo#
    </delete>
    <delete id="sqlUABDeleteExpPmnfstUldAwbShc" parameterClass="java.lang.String">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO=#trNo#
    </delete>
    <delete id="sqlUABDeleteExpPmnfstUldAwbTag" parameterClass="java.lang.String">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB_TAG WHERE TR_NO=#trNo#
    </delete>
    <delete id="sqlUABDeleteExpPmnfstUldAwbDg" parameterClass="java.lang.String">
    	DELETE FROM EXP_PMANIFEST_ULD_AWB_UN WHERE TR_NO=#trNo#
    </delete>
    <update id="sqlUABUpdateExpPmnfstAwb" parameterClass="java.util.HashMap">
    	UPDATE 
    		EXP_PMANIFEST_AWB 
    	SET 
    		ASSIGNED_BULK_PCS=(ASSIGNED_BULK_PCS-NVL(#assignedPcs#, 0)), 
    		ASSIGNED_BULK_WT=(ASSIGNED_BULK_WT-NVL(#assignedWt#, 0)), 
    		UNASSIGNED_BULK_PCS=(UNASSIGNED_BULK_PCS+NVL(#assignedPcs#, 0)), 
    		UNASSIGNED_BULK_WT=(UNASSIGNED_BULK_WT+NVL(#assignedWt#, 0)) 
    	WHERE 
    		FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    		AND UNLDG_PT=#unldgPt#
    </update>
    
    <update id="sqlUABUpdateExpPmnfstAwbAmendFlight" parameterClass="java.util.HashMap">
    	UPDATE 
    		EXP_PMANIFEST_AWB
    	SET 
    		FLT_KEY = #newFltKey#, 
    		FLT_DATE = TO_DATE(#newFltDate#, 'DDMONYY'), 
    		UNLDG_PT=#newUnLdgPt#,
    		ASSIGNED_BULK_PCS=(ASSIGNED_BULK_PCS-NVL(#assignedPcs#, 0)), 
    		ASSIGNED_BULK_WT=(ASSIGNED_BULK_WT-NVL(#assignedWt#, 0)),
    		TR_TYPE = #trType#   		
    	WHERE 
    		FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    		AND UNLDG_PT=#unldgPt# 
    </update>
    
     <update id="updateExpPmnfstAwbAmendNewFlight" parameterClass="java.util.HashMap">
    	UPDATE 
    		EXP_PMANIFEST_AWB
    	SET     		
    		BULK_PCS = (BULK_PCS+NVL(#assignedPcs#, 0)), 
    		BULK_WT = (BULK_WT+NVL(#assignedWt#, 0)),
    		PMAN_PCS = (PMAN_PCS+NVL(#assignedPcs#, 0)), 
			PMAN_WT = (PMAN_WT+NVL(#assignedWt#, 0)),
			TR_TYPE = #trType#      		
    	WHERE 
    		FLT_KEY=#newFltKey# 
    		AND FLT_DATE=TO_DATE(#newFltDate#, 'DDMONYY') 
    		AND AWB_NO=#awbNo# 
    		AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    		AND UNLDG_PT=#newUnLdgPt#    	
    </update>       
    
    
      <update id="updateExpPmnfstAwbAmendNewFlight1" parameterClass="java.util.HashMap">
    	UPDATE 
    		EXP_PMANIFEST_AWB
    	SET     		
    		ASSIGNED_BULK_PCS = (ASSIGNED_BULK_PCS-NVL(#assignedPcs#, 0)), 
    		ASSIGNED_BULK_WT = (ASSIGNED_BULK_WT-NVL(#assignedWt#, 0)),
    		UNASSIGNED_BULK_PCS = (UNASSIGNED_BULK_PCS+NVL(#assignedPcs#, 0)), 
    		UNASSIGNED_BULK_WT = (UNASSIGNED_BULK_WT+NVL(#assignedWt#, 0)),
    		TR_TYPE = #trType# 
    	WHERE 
    		FLT_KEY=#newFltKey# 
    		AND FLT_DATE=TO_DATE(#newFltDate#, 'DDMONYY') 
    		AND AWB_NO=#awbNo# 
    		AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    		AND UNLDG_PT=#newUnLdgPt#    	
    </update>       
    
     <update id="updateExpPmnfstAwbUnAssignAmendNewFlight" parameterClass="java.util.HashMap">
    	UPDATE 
    		EXP_PMANIFEST_AWB
    	SET     		
    		UNASSIGNED_BULK_PCS = (UNASSIGNED_BULK_PCS+NVL(#unassignedPcs#, 0)), 
    		UNASSIGNED_BULK_WT = (UNASSIGNED_BULK_WT+NVL(#unassignedWt#, 0)),
    		BULK_PCS = (BULK_PCS+NVL(#unassignedPcs#, 0)), 
    		BULK_WT = (BULK_WT+NVL(#unassignedWt#, 0)),
    		PMAN_PCS = (PMAN_PCS+NVL(#unassignedPcs#, 0)), 
			PMAN_WT = (PMAN_WT+NVL(#unassignedWt#, 0)),
			TR_TYPE = #trType#  		
    	WHERE 
    		FLT_KEY=#newFltKey# 
    		AND FLT_DATE=TO_DATE(#newFltDate#, 'DDMONYY') 
    		AND AWB_NO=#awbNo# 
    		AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    		AND UNLDG_PT=#newUnLdgPt#    	
    </update>         
    
    <insert id="insertExpPmnfstAwbAmendNewFlight" parameterClass="java.util.HashMap">	
		INSERT INTO EXP_PMANIFEST_AWB (
		   AWB_NO, AWB_DATE, FLT_KEY, 
		   FLT_DATE, UNLDG_PT,  
		   BULK_PCS, BULK_WT, CR_USER_ID, CR_DATE, 
		   LM_USER_ID, LM_DATE,FLT_TYPE,
		   PMAN_PCS,PMAN_WT,ASSIGNED_BULK_PCS,ASSIGNED_BULK_WT,TR_TYPE)
		   VALUES
		   (#awbNo#,to_date(#awbDate#,'DDMONYY'),#newFltKey#,
		   to_date(#newFltDate#,'DDMONYY'), #newUnLdgPt#,
		   #assignedPcs#, #assignedWt#,#userId#,sysdate,
		   #userId#,sysdate, 'E',
		   #pmanPcs#,#pmanWt#,#assignedPcs#,#assignedWt#,#trType#)
	</insert>   
	
	 <insert id="insertExpPmnfstAwbUnAssignAmendNewFlight" parameterClass="java.util.HashMap">	
		INSERT INTO EXP_PMANIFEST_AWB (
		   AWB_NO, AWB_DATE, FLT_KEY, 
		   FLT_DATE, UNLDG_PT,  
		   BULK_PCS, BULK_WT, CR_USER_ID, CR_DATE, 
		   LM_USER_ID, LM_DATE,FLT_TYPE,
		   PMAN_PCS,PMAN_WT,UNASSIGNED_BULK_PCS,UNASSIGNED_BULK_WT,TR_TYPE)
		   VALUES
		   (#awbNo#,to_date(#awbDate#,'DDMONYY'),#newFltKey#,
		   to_date(#newFltDate#,'DDMONYY'), #newUnLdgPt#,
		   #unassignedPcs#, #unassignedWt#,#userId#,sysdate,
		   #userId#,sysdate, 'E',
		   #pmanPcs#,#pmanWt#,#unassignedPcs#,#unassignedWt#,#trType#)
	</insert>    
    
     <update id="updateExpPmnfstAwbUnAssignAmendOldFlight" parameterClass="java.util.HashMap">
    	UPDATE 
    		EXP_PMANIFEST_AWB
    	SET     		
    		UNASSIGNED_BULK_PCS = (UNASSIGNED_BULK_PCS-NVL(#unassignedPcs#, 0)), 
    		UNASSIGNED_BULK_WT = (UNASSIGNED_BULK_WT-NVL(#unassignedWt#, 0)),
    		BULK_PCS = (BULK_PCS-NVL(#unassignedPcs#, 0)), 
    		BULK_WT = (BULK_WT-NVL(#unassignedWt#, 0)),
    		PMAN_PCS = (PMAN_PCS-NVL(#unassignedPcs#, 0)), 
			PMAN_WT = (PMAN_WT-NVL(#unassignedWt#, 0)),
			TR_TYPE = #trType#  		    		
    	WHERE 
    		FLT_KEY=#fltKey# 
    		AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') 
    		AND AWB_NO=#awbNo# 
    		AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    		AND UNLDG_PT=#unldgPt#
    </update>   
    
      <update id="updateExpPmnfstAwbAmendOldFlight" parameterClass="java.util.HashMap">
    	UPDATE 
    		EXP_PMANIFEST_AWB
    	SET     		
    		UNASSIGNED_BULK_PCS = (UNASSIGNED_BULK_PCS-NVL(#assignedPcs#, 0)), 
    		UNASSIGNED_BULK_WT = (UNASSIGNED_BULK_WT-NVL(#assignedWt#, 0)),
    		BULK_PCS = (BULK_PCS-NVL(#assignedPcs#, 0)), 
    		BULK_WT = (BULK_WT-NVL(#assignedWt#, 0)),
    		PMAN_PCS = (PMAN_PCS-NVL(#assignedPcs#, 0)), 
			PMAN_WT = (PMAN_WT-NVL(#assignedWt#, 0)),
			TR_TYPE = #trType#  		    		
    	WHERE 
    		FLT_KEY=#fltKey# 
    		AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') 
    		AND AWB_NO=#awbNo# 
    		AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    		AND UNLDG_PT=#unldgPt#
    </update>   
    
     <delete id="deleteExpPmnfstAwbAmendOldFlight" parameterClass="java.util.HashMap">
     	DELETE 
    		FROM EXP_PMANIFEST_AWB     			
    	WHERE 
    		FLT_KEY=#fltKey# 
    		AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') 
    		AND AWB_NO=#awbNo# 
    		AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    		AND UNLDG_PT=#unldgPt#
    		AND UNASSIGNED_BULK_PCS = 0
    		AND ASSIGNED_BULK_PCS = 0		
    </delete>      
    
     <delete id="deleteExpPmnfstAwbUnAssignAmendOldFlight" parameterClass="java.util.HashMap">
     	DELETE 
    		FROM EXP_PMANIFEST_AWB     			
    	WHERE 
    		FLT_KEY=#fltKey# 
    		AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') 
    		AND AWB_NO=#awbNo# 
    		AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    		AND UNLDG_PT=#unldgPt#    		
    </delete>
    
     <select id="getExpPmnfstAwbPcWtAmendOldFlight" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
    	SELECT 
    		COUNT(1) 
    	FROM 
    		EXP_PMANIFEST_AWB 
    	WHERE 
			FLT_KEY=#fltKey# AND 
			FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND 
			AWB_NO=#awbNo# AND 
			AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND
			UNLDG_PT=#unldgPt# AND 
			FLT_TYPE = 'E' AND
			UNASSIGNED_BULK_PCS-NVL(#assignedPcs#, 0) = 0 AND
    		UNASSIGNED_BULK_WT-NVL(#assignedWt#, 0) = 0
			
	</select>
	
	 <select id="getExpPmnfstAwbPcWtAmendOldFlightUnAssign" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT 
    		PMAN_PCS,PMAN_WT 
    	FROM 
    		EXP_PMANIFEST_AWB 
    	WHERE 
			FLT_KEY=#fltKey# AND 
			FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND 
			AWB_NO=#awbNo# AND 
			AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND
			UNLDG_PT=#unldgPt# AND 
			FLT_TYPE = 'E' 			
	</select>
    
    <select id="getCountExpPmnfstAwbAmendFlightNewFlight" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
    	SELECT 
    		COUNT(1) 
    	FROM 
    		EXP_PMANIFEST_AWB 
    	WHERE 
			FLT_KEY=#newFltKey# AND 
			FLT_DATE=TO_DATE(#newFltDate#, 'DDMONYY') AND 
			AWB_NO=#awbNo# AND 
			AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND
			UNLDG_PT=#newUnLdgPt# AND 
			FLT_TYPE = 'E'
	</select>
			    		
     <select id="sqlUABFindExpPmnfstAwbPcWt" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.buildup.bo.AutoBuildUpULDBO">
    	SELECT 
    		SUM(ASSIGNED_PCS) as assignedPc, SUM(ASSIGNED_WT) as assignedWt 
    	FROM 
    		EXP_PMANIFEST_ULD_AWB 
    	WHERE 
    		FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND UNLDG_PT=#unldgPt# AND ULD_BT_NO=#uldKey#
    </select>
    <update id="sqlUABUpdateExpFltUld" parameterClass="java.util.HashMap">
    	UPDATE 
    		EXP_FLT_ULD 
    	SET 
    		MAN_PCS=(MAN_PCS-#assignedPc#), MAN_WT=(MAN_WT-#assignedWt#) 
    	WHERE 
    		FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND UNLDG_PT=#unldgPt#
    </update>
    <select id="sqlUABFindAwbInventoryPcWt" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
    	SELECT 
    		COUNT(1) 
    	FROM 
    		AWB_INVENTORY 
    	WHERE 
    		LOCN_PCS='0' AND LOCN_WT='0' AND FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND 
    		ULD_KEY=#uldKey# AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
    </select>
    <delete id="sqlUABDeleteAwbInventory" parameterClass="java.util.HashMap">
    	DELETE 
    	FROM AWB_INVENTORY 
    	WHERE 
    	FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND AWB_NO=#awbNo# 
    	AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
    </delete>
    <update id="sqlUABUpdateUldInventory" parameterClass="java.lang.String">
    	UPDATE ULD_INVENTORY SET CARR_CODE='', FLT_NO='', FLT_DATE='', FLT_TYPE='', FLT_KEY='', EMPTY_FLG='Y' WHERE ULD_KEY=#uldKey#
    </update>
    <delete id="sqlUABDeleteExpCheckOutDtl" parameterClass="java.util.HashMap">
    	DELETE FROM EXP_CHKOUT_DTL WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey#
    </delete>
    <delete id="sqlUABDeleteExpFltUld" parameterClass="java.util.HashMap">
    	DELETE FROM EXP_FLT_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND UNLDG_PT=#unldgPt# AND FLT_TYPE='E'
    </delete>
    <update id="sqlUABUpdateExpUldAcc" parameterClass="java.util.HashMap">
    	UPDATE EXP_ULD_ACC SET ULD_KEY=#newUldKey# WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE='E' AND ACTIVITY='BUILDUP' AND ULD_KEY=#uldKey#
    </update>
    <select id="sqlcheckaccessoryexistsornot" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
    SELECT COUNT(1) FROM EXP_ULD_ACC WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE='E' AND ACTIVITY='BUILDUP' AND ULD_KEY=#newUldKey#
    </select>
     <update id="sqlUABUpdateExpUldAccAmendFlight" parameterClass="java.util.HashMap">
    	UPDATE EXP_ULD_ACC SET ULD_KEY=#newUldKey#, FLT_KEY=#newFltKey#,  FLT_DATE=TO_DATE(#newFltDate#, 'DDMONYY') WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE='E' AND ACTIVITY='BUILDUP' AND ULD_KEY=#uldKey#
    </update>
    <select id="sqlUABFindUldPmnfstHawbDtls" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
    	SELECT 
    		B.HAWB_NO as hawbNo, B.PC as pc, B.WT as wt 
    	FROM 
    		EXP_PMANIFEST_ULD_AWB A, EXP_PMANIFEST_ULD_AWB_HAWB B 
    	WHERE 
    		B.TR_NO=A.TR_NO AND A.FLT_KEY=#fltNo# AND A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND A.ULD_BT_NO=#uldKey# AND A.UNLDG_PT=#unLdgPt# 
    		AND A.AWB_NO=#awbNo# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
    </select>
    <select id="sqlUABFindUldPmnfstTagDtlsforAmdULD" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
    	SELECT 
    		B.TAG_NO as tagNo, B.WT as wt, B.PC as pc , 'AMDULD' as  loadedPc 
    	FROM 
    		EXP_PMANIFEST_ULD_AWB A, EXP_PMANIFEST_ULD_AWB_TAG B  
    	WHERE 
      		B.TR_NO=A.TR_NO AND A.FLT_KEY=#fltNo# AND A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND A.ULD_BT_NO=#uldKey# 
        	AND A.UNLDG_PT=#unLdgPt# AND A.AWB_NO=#awbNo# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
    </select>
    <select id="sqlUABFindUldPmnfstTagDtls" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
    	SELECT 
    		B.TAG_NO as tagNo, D.TAG_PCS as pc, D.TAG_WT as wt, B.PC as loadedPc 
    	FROM 
    		EXP_PMANIFEST_ULD_AWB A, EXP_PMANIFEST_ULD_AWB_TAG B, EXP_RCL_HD C, EXP_RCL_OBC D 
    	WHERE 
      		D.RCL_NO=C.RCL_NO AND D.TAG_NO=B.TAG_NO AND C.AWB_NO=A.AWB_NO AND C.AWB_DATE=A.AWB_DATE AND 
      		B.TR_NO=A.TR_NO AND A.FLT_KEY=#fltNo# AND A.FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND A.ULD_BT_NO=#uldKey# 
        	AND A.UNLDG_PT=#unLdgPt# AND A.AWB_NO=#awbNo# AND A.AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
    </select>
    <select id="sqlUABFindPmnfstDGOPDtls" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
    	SELECT OVERPACK_ID as overpackApioUnid, APIO_ID as apioUnid, UN_TR_NO as unid, LOAD_QTY as loadPkg FROM EXP_PMANIFEST_ULD_AWB_UN WHERE TR_NO=#trNo#
    </select>
    <select id="sqlUABFindPmnfstSHCDtls" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
    	SELECT B.SHC    AS shcOne,
			  B.SHC2        AS shcTwo,
			  B.SHC3        AS shcThree,
			  B.SHC4        AS shcFour,
			  B.SHC5        AS shcFive,
			  B.SHC6        AS shcSix,
			  B.SHC7        AS shcSeven,
			  B.SHC8        AS shcEight,
			  B.SHC9        AS shcNine,
			  B.DOC_LINE_NO AS docLine,
			  B.PCS         AS pc,
			  B.REMARKS     AS shcRemarks,
			  B.REMARKS     AS oldShcRemarks,
			  B.tr_no       AS preManfTrNo,
			 (select DECODE(COUNT(1),'0','N','Y') from CUST_AIRL_SPL_CODE where spl_type ='SPL_DANG' and carr_code = 
			    (select carr_code from awb where AWB_NO   = A.AWB_NO AND AWB_DATE = A.AWB_DATE ) and spl_code in
			        (b.SHC,b.SHC2,b.SHC3,b.SHC4,b.SHC5,b.SHC6,b.SHC7,b.SHC8,b.SHC9) ) as awbDgInd
			FROM EXP_PMANIFEST_ULD_AWB A,
			  EXP_PMANIFEST_ULD_AWB_SHC B
			WHERE B.TR_NO  =A.TR_NO AND B.TR_NO = #trNo#
			
    </select>
    <delete id="sqlUABDeleteExpPmnfstUld" parameterClass="java.util.HashMap">
    	DELETE FROM EXP_PMANIFEST_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE='E' AND ULD_BT_NO=#uldKey#
    </delete>
    <delete id="sqlUABDeleteExpUldAcc" parameterClass="java.util.HashMap">
    	DELETE FROM EXP_ULD_ACC WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND FLT_TYPE='E' AND ULD_KEY=#uldKey#
    </delete>
    <select id="sqlFetchAwbStorageDetailsForUndoBuildup" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  resultClass="cargo.cms.export.bo.StorageBO">
		SELECT AWB_NO as awbNo , CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,
				to_char(AWB_DATE,'DDMONYY') as awbDate,LOC_CODE as whDest,SEQ_NO as seqNo,
				LSP_NO as lspno,LOCN_PCS as strgPcs,LOCN_WT as strgWt,CARR_CODE as carrCode, ULD_KEY as uldKey
		 FROM AWB_INVENTORY 
 			WHERE AWB_NO = #awbNo#
 			AND AWB_DATE=to_date(#awbDate#,'DDMONYY')
 			AND ULD_KEY = #uldKey#
 			AND FLT_KEY IS NOT NULL
	</select>
	<select id="getAWBAmendStorageDetails" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  resultClass="cargo.cms.export.bo.StorageBO">
		SELECT AWB_NO as awbNo , CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,
				to_char(AWB_DATE,'DDMONYY') as awbDate,LOC_CODE as whDest,SEQ_NO as seqNo,
				LSP_NO as lspno,LOCN_PCS as strgPcs,LOCN_WT as strgWt,CARR_CODE as carrCode, ULD_KEY as uldKey
		 FROM AWB_INVENTORY 
 			WHERE AWB_NO = #awbNo#
 			AND AWB_DATE=to_date(#awbDate#,'DDMONYY')
 			AND ULD_KEY = #uldKey#
 			AND FLT_KEY IS NOT NULL
 			and flt_type = 'E'
	</select>
	<select id="sqlFetchExpUldAwbDtlsExists" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO = #uldKey#
	</select>
	<select id="sqlUABFetchOldExpPmnfstUldAwbRecrd" parameterClass="java.lang.String" resultClass="java.util.HashMap">
		SELECT 
			ASSIGNED_PCS, ASSIGNED_WT, FLT_KEY, TO_CHAR(FLT_DATE, 'DDMONYY') AS FLT_DATE, ULD_BT_NO, UNLDG_PT, AWB_NO, 
			TO_CHAR(AWB_DATE, 'DDMONYY') AS AWB_DATE, PPK_TYPE 
		FROM 
			EXP_PMANIFEST_ULD_AWB 
		WHERE 
			TR_NO=#trNo#
	</select>
	<select id="sqlUABFetchOldExpPmanUldRecrd" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			FLT_KEY, TO_CHAR(FLT_DATE, 'DDMONYY') AS FLT_DATE, ULD_BT_NO, RCL_NO, UNLDG_PT, PPK_TYPE 
		FROM 
			EXP_PMANIFEST_ULD 
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND FLT_TYPE='E'
	</select>
	<select id="sqlUABFetchOldExpFltUldRcrd" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			BB_IND, SOURCE, EIC_YN, PPK_TYPE, TARE_WT, ULD_KEY, CR_DATE, FLT_KEY, TO_CHAR(FLT_DATE, 'DDMONYY') AS FLT_DATE 
		FROM 
			EXP_FLT_ULD 
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND UNLDG_PT=#unldgPt# AND FLT_TYPE='E'
	</select>
	<select id="sqlUABFetchExpPManAwbRcrd" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			BULK_PCS, BULK_WT, PPK_PCS, PPK_WT, MIX_PCS, MIX_WT, AWB_NO, TO_CHAR(AWB_DATE, 'DDMONYY') 
		FROM 
			EXP_PMANIFEST_AWB 
		WHERE 
			FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    		AND UNLDG_PT=#unldgPt#
	</select>
	<update id="sqlUABUpdateDummyHIndInAwbInv" parameterClass="java.util.HashMap">
    	UPDATE AWB_INVENTORY SET ULD_KEY=(SELECT RULE_VALUE as ruleValue FROM CMSRULES WHERE RULE_CODE = 'Dummy_H_Container') 
    	WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY = #uldKey#
    </update>
    <select id="sqlUABFindExpUldAccessoryDtls" parameterClass="cargo.cms.export.bo.AccessoryBO" resultClass="java.lang.Integer">
    	SELECT 
    		COUNT(1) 
    	FROM 
    		EXP_ULD_ACC 
    	WHERE 
    		FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND ACTIVITY=#activity# 
    		AND EQUIP_TYPE=#equipType#
    </select>
    <update id="sqlUABUpdateExpUldAccessory" parameterClass="cargo.cms.export.bo.AccessoryBO">
    	UPDATE 
    		EXP_ULD_ACC 
    	SET 
    		QTY=NVL(#qty#, 0) 
    	WHERE 
    		FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND ACTIVITY=#activity# 
    		AND EQUIP_TYPE=#equipType#
    </update>
    <insert id="sqlUABInsertExpUldAccessory" parameterClass="cargo.cms.export.bo.AccessoryBO">
    	INSERT INTO EXP_ULD_ACC 
    		(FLT_KEY, 
    		 FLT_DATE, 
    		 FLT_TYPE,
    		 FLT_NO, 
    		 FLT_CARR, 
    		 ULD_KEY, 
    		 EQUIP_TYPE, 
    		 ACTIVITY, 
    		 QTY,
    		 LM_DATE,
    		 LM_USER_ID,
    		 CR_DATE,
    		 CR_USER_ID) 
    	VALUES
    		(#fltKey#, 
    		TO_DATE(#fltDate#, 'DDMONYY'),
    		'E',
    		#fltNo#,
    		#fltCarr#, 
    		#uldKey#, 
    		#equipType#, 
    		#activity#, 
    		#qty#,
    		sysdate,
    		#lastModUserId#,
    		sysdate,
    		#lastModUserId#)    	
    </insert>
    <select id="sqlUABFetchDummyHContainer" parameterClass="java.lang.String" resultClass="java.lang.String">
    	SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='Dummy_H_Container' 	
    </select>
    <select id="sqlUABFetchAwbInvSeqNo" parameterClass="java.lang.String" resultClass="java.lang.String">
    	SELECT AWB_INV_SEQ.NEXTVAL FROM DUAL
    </select>
    <select id="sqlFetchLspNoFromAwbInv" parameterClass="java.util.HashMap" resultClass="java.lang.String">
    	SELECT LSP_NO as lspNo FROM AWB_INVENTORY WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
    </select>
    
    <update id="updateEmptyFlgInLspInvForAutoBU" parameterClass="java.lang.String">
    	UPDATE LSP_INVENTORY SET EMPTY_FLG='Y' WHERE LSP_NO=#lspNo#
    </update>
    <!-- Undo Auto Buildup :: Anup :: Ends -->
    
<!--Queries for Enquire Tow Order Added by Mahesh BN from 15.07.2011 to Starts-->
	<select id="sqlGetToLists" parameterClass="cargo.cms.export.bo.EnquiryTowOrderSearchBO"  resultClass="cargo.cms.export.bo.EnquiryTowOrderBO">
	<![CDATA[
	   select (SELECT CODE_DESC FROM CUST_COMPANY WHERE code = t2.rho_id) rhoDesc,
       t1.TO_NO toNo,t1.FLT_KEY fltKey,TO_CHAR(t1.FLT_DATE,'DDMONYY') fltDate ,t2.RHO_ID rhoId,
       t1.FLT_KEY||'/'||TO_CHAR(t1.FLT_DATE,'DDMONYY') fltNoDate, 
       to_char(t1.est_time,'DDMONYY HH24MI') estHoTime,t1.ho_area hoArea,t1.ho_area2 hoArea2,
	   'N' osStatus,t1.status toStatus ,
	   t1.remarks as remarks,
	   NVL(t1.print_ind,'N') printerInd,
	   PKG_COMMON.GET_FLT_ETA(t1.FLT_KEY,t2.SCH_DATE, 'D') as etd,
	   SUBSTR(TRIM(TO_CHAR(t2.SCH_TIME,'0000')),0,2) ||':'|| SUBSTR(TRIM(TO_CHAR(t2.SCH_TIME,'0000')),3,4) as std,t1.CR_USER_ID as crUserId,t1.SOURCE as source,
	   (SELECT CODE_DESC FROM SEC_USER SECUSER WHERE SECUSER.CODE=t1.shift_user AND ROWNUM=1) as collectBy,t1.manual_assign as manualAssign,
	   (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM(SELECT DISTINCT CODE FROM (SELECT B.CODE FROM V_EXP_ULD_SHC A,  MAST_SPL_HAND_CODE B , TOW_ORDER_OUT_DTL OUTDTL   WHERE B.CODE = A.CODE AND A.ULD_KEY=OUTDTL.ULD_KEY   AND OUTDTL.TO_NO = T1.TO_NO ORDER BY PRIORITY DESC)) WHERE ROWNUM <4) as shc,
	    (CASE WHEN (SELECT COUNT(1) FROM EXP_ULD_HOVER_DTL HOVERDTL WHERE HOVERDTL.FLT_KEY = t1.flt_key AND HOVERDTL.flt_date=t1.flt_date
		AND HOVERDTL.ULD_KEY IN (SELECT ULD_KEY FROM TOW_ORDER_OUT_DTL TODTL WHERE TODTL.TO_NO=t1.to_no)) = 0 THEN 
		(CASE WHEN (ROUND(((SELECT TO_DATE(TO_CHAR(NVL(FLT.EST_DATE, FLT.SCH_DATE), 'DDMONYY') ||' '||SUBSTR(TRIM(TO_CHAR(NVL(FLT.EST_TIME, FLT.SCH_TIME),'0000')),1,2)
				|| NVL2(NVL(FLT.EST_TIME, FLT.SCH_TIME), ':', '')
				|| SUBSTR(TRIM(TO_CHAR(NVL(FLT.EST_TIME, FLT.SCH_TIME),'0000')),3,4),'DDMONYY HH24:MI') FROM FLT_OPR FLT
        WHERE FLT.FLT_KEY=t1.flt_key AND FLT.SCH_DATE=t1.flt_date AND FLT.FLT_TYPE='D')-SYSDATE)*24*60) < TO_NUMBER((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='TO_RED_COLOR_CONFIG')))
        THEN 'RED' ELSE 
        (CASE WHEN (ROUND(((SELECT TO_DATE(TO_CHAR(NVL(FLT.EST_DATE, FLT.SCH_DATE), 'DDMONYY') ||' '||SUBSTR(TRIM(TO_CHAR(NVL(FLT.EST_TIME, FLT.SCH_TIME),'0000')),1,2)
				|| NVL2(NVL(FLT.EST_TIME, FLT.SCH_TIME), ':', '')
				|| SUBSTR(TRIM(TO_CHAR(NVL(FLT.EST_TIME, FLT.SCH_TIME),'0000')),3,4),'DDMONYY HH24:MI') FROM FLT_OPR FLT
        WHERE FLT.FLT_KEY=t1.flt_key AND FLT.SCH_DATE=t1.flt_date AND FLT.FLT_TYPE='D')-SYSDATE)*24*60) < TO_NUMBER((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='TO_ORANGE_COLOR_CONFIG'))) THEN 'ORANGE' ELSE 'DEFAULT' END)
        END)
		ELSE 'N' END) AS indicator
      from tow_order_out t1
      join flt_opr t2 on t1.flt_key=t2.flt_key and t1.flt_date=t2.sch_date and t2.flt_type = 'D'
      ]]>
      Where
      <isNotEqual property="callerFun" compareValue="RAMPMNTR"> 
      TO_DATE(to_char(t1.FLT_DATE,'DDMONYY')|| ' ' || TO_CHAR(NVL(t2.sch_time,0),'0000'),'DDMONYY HH24MI')  &gt;= TO_DATE(#arrDateHm#,'DDMONYY HH24MI') 
      and  TO_DATE(to_char(t1.FLT_DATE,'DDMONYY')|| ' ' || TO_CHAR(NVL(t2.sch_time,0),'0000'),'DDMONYY HH24MI')  &lt;=	to_Date(#arrDateToHm#,'DDMONYY HH24MI')  
      and t1.status !='VOID'
      <isNotEmpty property="rhoId">
	    	AND t2.rho_id = #rhoId#
	    </isNotEmpty>
	    <isNotEmpty property="toNo">
	        AND t1.to_no = #toNo#
	    </isNotEmpty>
	    <isNotEmpty property="fltKey">
	        AND t1.flt_key = #fltKey#
	    </isNotEmpty>
        <isNotEmpty property="carrCode">
	        AND t2.carr_code=#carrCode#
        </isNotEmpty>
         <isNotEmpty property="collectBy">
	        AND t1.SHIFT_USER=#collectBy#
        </isNotEmpty>
	    <isNotEmpty property="searchToStatus">
	        AND t1.status=(select distinct upper(code_desc) from mast_code_dtl where group_code=38 and code_type='TOW_ORDER_STATUS' and code=#searchToStatus#)
       </isNotEmpty>
       <isEqual property="outStanding" compareValue="Y">
       AND t1.status in (select distinct upper(code_desc) from mast_code_dtl where group_code=38 and code_type='TOW_ORDER_STATUS' and upper(code) not in ('COMPLETE','FORCE COMPLETE'))
       </isEqual>
       <isEqual property="outStanding" compareValue="N">
       AND t1.status in (select distinct upper(code_desc) from mast_code_dtl where group_code=38 and code_type='TOW_ORDER_STATUS')
       </isEqual>
       <isEqual property="manualAssign" compareValue="N">
       and t1.PRINT_IND = 'N' AND t1.PRINT_IND IS NOT NULL
       </isEqual>
       <isEqual property="manualAssign" compareValue="Y">
       and t1.PRINT_IND = 'Y' AND t1.PRINT_IND IS NOT NULL
       </isEqual>
       
       <isEqual property="printInd" compareValue="N">
       and t1.PRINT_IND = 'N'
       </isEqual>
       <isEqual property="printInd" compareValue="Y">
       and t1.PRINT_IND = 'Y'
       </isEqual>
       <isEqual property="printInd" compareValue="ALL">
       and t1.PRINT_IND in ('Y','N')
       </isEqual>
      </isNotEqual>
      <isEqual property="callerFun" compareValue="RAMPMNTR"> 
      		t1.flt_key=#fltKey# and to_char(t1.flt_date,'DDMONYY') = #fltDate# 
      		<isNotEmpty property="towNo">
      			and t1.to_no = #towNo#
      		</isNotEmpty>
      		<isEmpty property="towNo">
      			and t1.status = 'ISSUED'
      		</isEmpty>      		
      </isEqual>
      <isNotEmpty property="searchTo1stReminder">
	        AND t1.rem_1_date is not null AND t1.status='ISSUED' 
        </isNotEmpty>
         <isNotEmpty property="searchTo2ndReminder">
	        AND t1.rem_2_date is not null  AND t1.status='ISSUED' 
        </isNotEmpty>
         order by t2.sch_DATE,t2.SCH_TIME,t2.FLT_KEY 
	</select>
	<select id="sqlGetURFToLists" parameterClass="cargo.cms.export.bo.EnquiryTowOrderSearchBO"  resultClass="cargo.cms.export.bo.EnquiryTowOrderURFBO">		  
			  select distinct (SELECT CODE_DESC FROM CUST_COMPANY WHERE code = #rhoId#) rhoDesc,
              T4.TO_NO toNo,T4.FLT_KEY fltKey,TO_CHAR(T4.FLT_DATE,'DDMONYY') fltDate ,T4.RHO_ID rhoId,
              T4.FLT_KEY||'/'||TO_CHAR(T4.FLT_DATE,'DDMONYY') fltNoDate,
              to_char(T4.est_time,'DDMONYY HH24MI') estHoTime,T4.ho_area hoArea,
              'N' osStatus,T4.status toStatus,t4.print_ind printerInd,T4.dest_code dest,T4.URF_NO urfNo,t4.CR_USER_ID as crUserId,t2.sch_DATE, t2.SCH_TIME, t2.FLT_KEY
              FROM TOW_ORDER_OUT_DTL T3			  
			  <isNotEqual property="callerFun" compareValue="RAMPMNTR"> 
			  	 JOIN TOW_ORDER_OUT T4	ON T4.TO_NO = T3.TO_NO AND t4.type!='Adhoc'
			  </isNotEqual>
			  <isEqual property="callerFun" compareValue="RAMPMNTR"> 
			   JOIN TOW_ORDER_OUT T4 ON T4.TO_NO in (select to_no from TOW_ORDER_OUT_DTL where uld_key in (SELECT uld_key FROM ULD_REL_DTL T1 WHERE	T1.EIR_NO = #urfNo# AND T1.ULD_KEY IS NOT NULL) group by to_no) AND t4.type!='Adhoc'
			  </isEqual>
			  left join flt_opr t2 on t2.flt_key=T4.FLT_KEY and T4.FLT_DATE=t2.sch_date and t2.flt_type = 'D'
              WHERE
              <isNotEqual property="callerFun" compareValue="RAMPMNTR"> 
              T3.TO_NO IS NOT NULL
              and t4.est_time between TO_DATE(#arrDateHm#,'DDMONYY HH24MI')  and to_Date( #arrDateToHm#,'DDMONYY HH24MI') 
              and t4.status !='VOID'
              and T4.URF_NO is not null
              <isNotEmpty property="rhoId">
	            AND T4.rho_id = #rhoId#
	          </isNotEmpty> 
	          <isNotEmpty property="toNo">
	              AND T4.to_no = #toNo#
	          </isNotEmpty>
	          <isNotEmpty property="fltKey">
	              AND T4.flt_key = #fltKey#
	          </isNotEmpty>
	          <isNotEmpty property="carrCode">
	        	AND substr(T4.flt_key,1,2)=#carrCode#
	         </isNotEmpty>
		     <isNotEmpty property="searchToStatus">
		        AND T4.status=(select distinct upper(code_desc) from mast_code_dtl where group_code=38 and code_type='TOW_ORDER_STATUS' and code=#searchToStatus#)
	        </isNotEmpty>
	         <isEqual property="outStanding" compareValue="Y">
       		AND t4.status in (select distinct upper(code_desc) from mast_code_dtl where group_code=38 and code_type='TOW_ORDER_STATUS' and upper(code) not in ('COMPLETE','FORCE COMPLETE'))
       		</isEqual>
       		<isEqual property="outStanding" compareValue="N">
       		AND t4.status in (select distinct upper(code_desc) from mast_code_dtl where group_code=38 and code_type='TOW_ORDER_STATUS')
       		</isEqual>
       		<isEqual property="printInd" compareValue="N">
       		and t4.PRINT_IND = 'N'
       		</isEqual>
       		<isEqual property="printInd" compareValue="Y">
       		and t4.PRINT_IND = 'Y'
       		</isEqual>
       		<isEqual property="printInd" compareValue="ALL">
       		and t4.PRINT_IND in ('Y','N')
       		</isEqual>
	        </isNotEqual>
	        <isEqual property="callerFun" compareValue="RAMPMNTR"> 
      			T4.URF_NO=#urfNo# and t4.status !='VOID'
      		</isEqual>
      		<isNotEmpty property="searchTo1stReminder">
		        AND t4.rem_1_date is not null AND T4.status='ISSUED' 
	        </isNotEmpty>
	         <isNotEmpty property="searchTo2ndReminder">
		        AND t4.rem_2_date is not null AND T4.status='ISSUED' 
	        </isNotEmpty>
			order by t2.sch_DATE,t2.SCH_TIME,t2.FLT_KEY 
	</select>
	<select id="sqlGetAdhocToLists" parameterClass="cargo.cms.export.bo.EnquiryTowOrderSearchBO"  resultClass="cargo.cms.export.bo.EnquiryTowOrderAdhocBO">
		  select (SELECT CODE_DESC FROM CUST_COMPANY WHERE code = #rhoId#) rhoDesc,
          t1.TO_NO toNo,t1.FLT_KEY fltKey,TO_CHAR(t1.FLT_DATE,'DDMONYY') fltDate ,t1.RHO_ID rhoId,
          t1.FLT_KEY||'/'||TO_CHAR(t1.FLT_DATE,'DDMONYY') fltNoDate, 
          to_char(t1.est_time,'DDMONYY HH24MI') estHoTime,t1.ho_area hoArea,
          'N' as osStatus,t1.status toStatus,t1.print_ind printerInd,t1.dest_code destLoc,t1.CR_USER_ID as crUserId 
          from tow_order_out t1 left join flt_opr t2 on t1.flt_key= t2.flt_key and t2.flt_type='D'
          Where t1.type='Adhoc'
          and t1.est_time between TO_DATE(#arrDateHm#,'DDMONYY HH24MI')  and to_Date(#arrDateToHm#,'DDMONYY HH24MI') 
          and t1.status !='VOID'
          <isNotEmpty property="rhoId">
            AND t1.rho_id = #rhoId#
          </isNotEmpty>
          <isNotEmpty property="toNo">
              AND t1.to_no = #toNo#
          </isNotEmpty>
          <isNotEmpty property="fltKey">
              AND t1.flt_key = #fltKey#
          </isNotEmpty>
          <isNotEmpty property="carrCode">
	        AND t2.carr_code=#carrCode#
         </isNotEmpty>
	     <isNotEmpty property="searchToStatus">
	        AND t1.status=(select distinct upper(code_desc) from mast_code_dtl where group_code=38 and code_type='TOW_ORDER_STATUS' and code=#searchToStatus#)
        </isNotEmpty>
         <isNotEmpty property="searchTo1stReminder">
	        AND t1.rem_1_date is not null
        </isNotEmpty>
         <isNotEmpty property="searchTo2ndReminder">
	        AND t1.rem_2_date is not null
        </isNotEmpty>
        <isEqual property="outStanding" compareValue="Y">
       AND t1.status in (select distinct upper(code_desc) from mast_code_dtl where group_code=38 and code_type='TOW_ORDER_STATUS' and upper(code) not in ('COMPLETE','FORCE COMPLETE'))
       </isEqual>
       <isEqual property="outStanding" compareValue="N">
       AND t1.status in (select distinct upper(code_desc) from mast_code_dtl where group_code=38 and code_type='TOW_ORDER_STATUS')
       </isEqual>
       <isEqual property="printInd" compareValue="N">
       and t1.PRINT_IND = 'N'
       </isEqual>
       <isEqual property="printInd" compareValue="Y">
       and t1.PRINT_IND = 'Y'
       </isEqual>
       <isEqual property="printInd" compareValue="ALL">
       and t1.PRINT_IND in ('Y','N')
       </isEqual>
       order by t2.sch_DATE,t2.SCH_TIME,t2.FLT_KEY 
	</select>
<select id="sqlGetTowOrderDetails" parameterClass="cargo.cms.export.bo.EnquiryTowOrderSearchBO"  resultClass="cargo.cms.export.bo.EnquiryTowOrderTODetailsBO">	
		select (SELECT CODE_DESC FROM CUST_COMPANY WHERE code = t3.rho_id) rhoDesc,
		t1.dest_code as dest,		
		t1.to_no as toNo,t3.rho_id as rho,t1.ho_area as hoArea,	t1.ho_area2 as hoArea2,	
		t1.FLT_KEY||'/'||TO_CHAR(t1.FLT_DATE,'DDMONYY') fltNoDate,		
		'N' as osStatus,t1.status as toStatus, 
		to_char(t1.est_time,'DDMONYY HH24MI') as estHOTime,
		to_char(t1.cr_date,'DDMONYY HH24MI') as toSendDateTime,
		to_char(t1.rem_1_date,'DDMONYY HH24MI') as rem1Date,
		to_char(t1.rem_2_date,'DDMONYY HH24MI') as rem2Date,t1.remarks as toRemarks,
		SUBSTR(TRIM(TO_CHAR(t3.SCH_TIME,'0000')),0,2) ||':'|| SUBSTR(TRIM(TO_CHAR(t3.SCH_TIME,'0000')),3,4) as std,
		t3.acft_prk_bay as parkingBay,
		t1.CR_USER_ID as crUserId,
		t1.ho_zone as handoverZone,
		t1.ho_zone as oldhandoverZone 
		from tow_order_out t1		
		<!-- left join tow_order_out_dtl t2	on t1.to_no=t2.to_no-->
		join flt_opr t3 on t1.flt_key=t3.flt_key and t1.flt_date=t3.sch_date and t3.flt_type='D'
		where t1.to_no=#towNo# and rownum=1
	 </select>
	 <!-- Changed for QR -->
	 <select id="sqlGetUrfAdhocTowOrderDetails" parameterClass="cargo.cms.export.bo.EnquiryTowOrderSearchBO"  resultClass="cargo.cms.export.bo.EnquiryTowOrderTODetailsBO">	
		select (SELECT CODE_DESC FROM CUST_COMPANY WHERE code = #rhoId#) rhoDesc,
		t1.dest_code as dest,		
		t1.to_no as toNo,t1.rho_id as rho,t1.ho_area as hoArea,	
		t1.FLT_KEY||'/'||TO_CHAR(t1.FLT_DATE,'DDMONYY') fltNoDate,		
		'N' as osStatus,t1.status as toStatus, 
		to_char(t1.est_time,'DDMONYY HH24MI') as estHOTime,
		to_char(t1.notf_send_date,'DDMONYY HH24MI') as toSendDateTime,
		to_char(t1.rem_1_date,'DDMONYY HH24MI') as rem1Date,
		to_char(t1.rem_2_date,'DDMONYY HH24MI') as rem2Date,t1.remarks as toRemarks,
		t1.CR_USER_ID as crUserId 
		from tow_order_out t1		
		where t1.to_no=#towNo#
	 </select>
	 <!-- Changed for QR -->
	<select id="sqlGetExportUldDetails" parameterClass="cargo.cms.export.bo.EnquiryTowOrderSearchBO"  resultClass="cargo.cms.export.bo.EnquiryTowOrderExportUldBO">
		select 
		toDtl.to_no as toNo,
    	toDtl.uld_key as uldKey,
		toOut.flt_key as fltKey,
		to_char(toOut.flt_date,'DDMONYY') as fltDate,
		pmani.gross_wt as grossWt,
		pmani.tare_wt as tareWt,
    	pmani.net_wt as netWt,
    	inv.contr_code as contour,
		pmani.eic_yn as eicFlag,
		pmani.empty_yn as emptyFlag,
		(select stragg(stringdelim(code,',')) from v_exp_uld_shc where uld_key =toDtl.uld_key  AND ROWNUM &lt; 10 )AS spl,
		inv.gen_rmk as remarks,
    	EXPHOVER.print_HandOver_Date as printHandOverDate,
    	<!--decode(substr(lpad(exp.chkout_time,4,0),0,2)||':'|| substr(lpad(exp.chkout_time,4,0),3),':',null,substr(lpad(exp.chkout_time,4,0),0,2)||':'|| substr(lpad(exp.chkout_time,4,0),3)) as checkOutTime,-->
    	<!-- to_char(chkout_date,'DDMONYY') ||	nvl(decode(substr(lpad(exp.chkout_time,4,0),0,2)||':'|| substr(lpad(exp.chkout_time,4,0),3),':',null,' '||substr(lpad(exp.chkout_time,4,0),0,2)||':'|| substr(lpad(exp.chkout_time,4,0),3))
      	,to_char(remove_date,'DDMONYY HH24:MI') )  as checkOutTime,-->
      	to_char(toDtl.remove_date,'DDMONYY HH24:MI') checkOutTime,
		exp.chk_flg as chkFlg,
		(case when inv.FINAL_WEIGHT ='Y' and inv.FIRST_WT != inv.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff
	    from tow_order_out toOut 
	    join tow_order_out_dtl toDtl on toDtl.to_no=toOut.to_no
	    left join exp_flt_uld pmani on toDtl.uld_key = pmani.uld_key AND toOut.flt_key = pmani.flt_key and toOut.flt_date = pmani.flt_date	    
	    left join exp_chkout_dtl exp on exp.uld_key = pmani.uld_key AND toOut.flt_key = exp.flt_key and toOut.flt_date = exp.flt_date	
     	left join uld_inventory inv on inv.uld_key = pmani.uld_key
     	LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = exp.HO_FORM_NO AND EXPHOVER.ULD_KEY = exp.ULD_KEY
	    where toDtl.to_no=#towNo# 
	    <isNotEmpty property="enqFltKey">
			AND toOut.flt_key = #enqFltKey#
		</isNotEmpty>
		<isNotEmpty property="enqFltDate">
			AND toOut.flt_date = #enqFltDate#
		</isNotEmpty>
   	</select>
   	
   	<select id="sqlGetExportUldDetailsTotalGrossWt" parameterClass="cargo.cms.export.bo.EnquiryTowOrderSearchBO"  resultClass="java.lang.String">
		select TRIM(TO_CHAR(sum(pmani.gross_wt),'999999999.99')) as totalGrossWt		 
		from tow_order_out toOut 
	    join tow_order_out_dtl toDtl on toDtl.to_no=toOut.to_no
	    left join exp_flt_uld pmani on toDtl.uld_key = pmani.uld_key AND toOut.flt_key = pmani.flt_key and toOut.flt_date = pmani.flt_date	    
	    left join exp_chkout_dtl exp on exp.uld_key = pmani.uld_key AND toOut.flt_key = exp.flt_key and toOut.flt_date = exp.flt_date	
     	left join uld_inventory inv on inv.uld_key = pmani.uld_key
     	LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = exp.HO_FORM_NO AND EXPHOVER.ULD_KEY = exp.ULD_KEY
     	where toDtl.to_no=#towNo# 
	    <isNotEmpty property="enqFltKey">
			AND toOut.flt_key = #enqFltKey#
		</isNotEmpty>
		<isNotEmpty property="enqFltDate">
			AND toOut.flt_date = #enqFltDate#
		</isNotEmpty>
   	</select>
   	
   	<select id="sqlGetExportUldDetails_count" parameterClass="cargo.cms.export.bo.EnquiryTowOrderSearchBO"  resultClass="java.lang.Integer">
		select count(1) from (
		select 
		to_char(chkout_date,'DDMONYY') ||	nvl(decode(substr(lpad(exp.chkout_time,4,0),0,2)||':'|| 
		substr(lpad(exp.chkout_time,4,0),3),':',null,' '||substr(lpad(exp.chkout_time,4,0),0,2)||':'|| 
		substr(lpad(exp.chkout_time,4,0),3))
      	,to_char(remove_date,'DDMONYY HH24:MI') )  as checkOutTime
		from tow_order_out toOut 
	    join tow_order_out_dtl toDtl on toDtl.to_no=toOut.to_no
	    left join exp_pmanifest_uld pmani on toDtl.uld_key = pmani.uld_bt_no AND toOut.flt_key = pmani.flt_key and toOut.flt_date = pmani.flt_date	    
	    left join exp_chkout_dtl exp on exp.uld_key = pmani.uld_bt_no AND toOut.flt_key = exp.flt_key and toOut.flt_date = exp.flt_date	
     	left join uld_inventory inv on inv.uld_key = pmani.uld_bt_no
	    where toDtl.to_no=#towNo# ) where checkOutTime is not null
   	</select>
   	
	 <select id="sqlGetAllot" parameterClass="java.lang.String"  resultClass="java.lang.String">					
 		select ALLOT.ULD_ALLOT uldAllot
        FROM ULD_GROUP_TYPE GRP, MAST_ULD_ALLOT_GROUP ALLOT 
        where GRP.ULD_GROUP=ALLOT.ULD_GROUP 
        and GRP.ULD_TYPE = #uldType#
	</select>
		<update id="sqlUpdateTowOrder" parameterClass="cargo.cms.export.bo.EnquiryTowOrderBO">
		UPDATE tow_order_out
		SET    shift_time = #shift#,
    		   shift_user = #user#,
    		   remarks = #remarks#,
      			manual_assign = 'Y',
      			MAN_ASSIGN_DATE = SYSDATE
		WHERE  to_no = #toNo#
		</update>
 		<update id="sqlUpdateTowOrderToComplete" parameterClass="cargo.cms.export.bo.EnquiryTowOrderTODetailsBO">
	 		update tow_order_out
			set  status=NVL(#status#,'COMPLETE'),LM_DATE=sysdate,LM_USER_ID=#userID# 
			where to_no=#toNo#
		</update>
		<update id="sqlUpdateTowOrderToVoid" parameterClass="cargo.cms.export.bo.EnquiryTowOrderTODetailsBO">
	 		update tow_order_out
			set  status='VOID',LM_DATE=sysdate,LM_USER_ID=#userID# 
			where to_no=#toNo#
		</update>
		<update id="sqlUpdateURFTowOrderToVoid" parameterClass="cargo.cms.export.bo.EnquiryTowOrderTODetailsBO">
	 		update tow_order_out 
			set status='VOID',LM_DATE=sysdate ,LM_USER_ID=#userID# 
			where to_no=#toNo#
    </update>
		<select id="sqlGetCarrCode" parameterClass="java.lang.String"  resultClass="java.lang.String">	
			select code  from mast_carrier
			where code=#carrCode#
	</select>
	<select id="sqlGetOSStatus" parameterClass="java.lang.String"  resultClass="java.lang.String">
			<![CDATA[ 
				SELECT DECODE(COUNT(*),0,'N','Y') osStatus
				FROM tow_order_out_dtl dtl
				JOIN tow_order_out tow
				ON tow.to_no = dtl.to_no
				WHERE tow.to_no  =#toNo#
				and dtl.remove_date is null
			 ]]>
	</select>
	<select id="sqlGetOSStatus1" parameterClass="java.lang.String"  resultClass="java.lang.String">
	  select decode(COUNT(1),0,'N','Y') from tow_order_out_dtl dtl 
      join tow_order_out tow on tow.to_no = dtl.to_no
      join exp_chkout_dtl chk on chk.uld_key = dtl.uld_key 
      and tow.flt_key = chk.flt_key
      and tow.flt_date = chk.flt_date
      where tow.to_no=#toNo#
	</select>
	
	<select id="sqlGetRSOUsr" parameterClass="java.lang.String"  resultClass="java.lang.String">
			SELECT distinct b.code AS codeId,b.CODE_DESC AS codeDesc 
			FROM CUST_COMPANY b,TOW_ORDER_OUT a WHERE b.code=a.rho_id
			and  b.code in (select cust_no from sec_user where code=#usrId#)  
	</select>	
	<update id="sqlUpdateTOStatusToComplete" parameterClass="java.lang.String">
		update tow_order_out
		set status='COMPLETE'
		where to_no=#toNo#	
	</update>	
<!--Queries for Enquire Tow Order Added by Mahesh BN from 15.07.2011 to End-->	
<!-- Queries for Maintain Airside Breakdown starts -->
	<select id="unLdgPoints" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO"  resultClass="java.lang.String">
	    select stragg(stringdelim(off_point,'/'))  as portOfCall from flt_opr_seg where tr_no in (select tr_no from flt_opr where flt_key = #fltKey# and sch_date=to_date(#fltDate#,'dd-mon-yy') and flt_type = 'D') and brd_point='HKG' 
	 </select>
	 <select id="etdandStd" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" resultClass="java.lang.String">	
   	 select PKG_COMMON.get_flt_eta(flt_opr.FLT_KEY, flt_opr.SCH_DATE, 'D')  as etd
 	from flt_opr where flt_key = #fltKey# and sch_date = TO_DATE(#fltDate#, 'DDMONYY') and flt_type = 'D'
   	</select>
	<select id="fetchPmanAssignedPCwt" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >	
	select sum(assigned_pcs) as loadedPcs ,sum(assigned_wt) as loadedWt from exp_pmanifest_uld_awb where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldNumber#
	</select>
   	<update id="checkOutUld" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >	
   	update exp_chkout_dtl
		set 
			chkout_date = to_char(sysdate,'DDMONYY'),
			chkout_user = #lmUserId#,
			chk_flg = 'Y',
			chkout_time = to_char(sysdate, 'HH24MI'),
			chkout_rmk = #checkoutRemark#,
			LOC_CODE = #checkoutLocation#,
			chkout_locn = #checkoutLocation#,
			IU_FROM_IND = 'D', 
			TR_TYPE='CKULD'
		where 
			uld_key = #uldNumber# and 
			flt_key = #fltKey# and 
			flt_date = to_date(#fltDate#, 'DDMONYY')
   	</update>
   	<update id="checkOut_update_ULD_INVENTORY" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO">
		update 
	    	uld_inventory 
		set
			loc_code = #checkoutLocation#,
			owned_inv = 'N'
			
		where 
			uld_key = #uldNumber# and flt_key = #fltKey# and flt_date = to_date(#fltDate#, 'DDMONYY')
	</update>
   	<update id="saveCheckOutHdrUpdate" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >
		update exp_chkout_hd set
			OSI_RMK    =   #checkoutRemark#,
			LM_USER_ID =   #lmUserId#,
			LM_DATE    =   sysdate
		where
			FLT_KEY	   =   #fltKey# and
			FLT_DATE   =   #fltDate#
	</update>
	<insert id="checkOutdtlULDInsert" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO">
		insert into exp_chkout_dtl(
			FLT_KEY,FLT_DATE,CARR_CODE,ULD_KEY,CONTR_CODE,EIC_IND,EMPTY_IND,CHKOUT_USER,
			CHKOUT_DATE,CHKOUT_TIME,CHKOUT_RMK,LOC_CODE,CHK_FLG,CR_USER_ID,CR_DATE,
			LM_USER_ID,LM_DATE,IU_FROM_IND, CHKOUT_LOCN)
		values (#fltKey#,#fltDate#,substr(#fltKey#,0,2),#uldNumber#,#contrCode#,'N','N',#lmUserId#,
			sysdate,to_char(sysdate, 'HH24MI'),#checkoutRemark#,#checkoutLocation#,'Y',#lmUserId#,sysdate,
			#lmUserId#,sysdate,'D', (SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY = #uldNumber#))
	</insert>
	<insert id="saveCheckOutHdrInsert" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO">
		insert into exp_chkout_hd(
			FLT_KEY,FLT_DATE,FLT_TYPE,CARR_CODE,OSI_RMK,CR_USER_ID,CR_DATE,
			LM_USER_ID,LM_DATE)
		values(#fltKey#,#fltDate#,'E',substr(#fltKey#,0,2), #checkoutRemark#,#lmUserId#,sysdate,
		#lmUserId#,sysdate)
	</insert>
	<select id="getMaintainBrkBulkList" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" resultClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >	
	
		select  decode(a.bb_ind,'Y','BULK',decode(trunc((length(a.uld_bt_no)+9)/9),1,'BULK',decode(b.H_CONT_IND , 'Y','BULK',decode(b.BT_IND,'Y','BULK',a.uld_bt_no ))))as uldNo,
		a.uld_bt_no as uldBtNo,a.UNLDG_PT as unLdgPoint,null as awbNo,null as loadedPcs,null as loadedWt,BB_IND as bbInd,AIRSIDE_BRKDN as airsideBrkdnInd,
		ppk_type as pkgInd,'header' as headerOrDetail
		from exp_pmanifest_uld a LEFT OUTER JOIN mast_uld_type b ON substr(a.uld_bt_no,1,3)=b.code 
		where  a.FLT_KEY=#fltKey# and a.FLT_DATE=#fltDate#  and a.flt_type ='E' and exists (select null from exp_pmanifest_uld_awb where uld_bt_no = a.uld_bt_no )
		union all
		select a.uld_bt_no as uldNo,a.uld_bt_no as uldBtNo,a.UNLDG_PT as unLdgPoint,b.AWB_NO as awbNo,b.ASSIGNED_PCS as loadedPcs,b.ASSIGNED_WT as loadedWt,null as bbInd,null as airsideBrkdnInd,
		null as pkgInd,'detail' as headerOrDetail 
		from exp_pmanifest_uld a, exp_pmanifest_uld_awb b
		where a.FLT_KEY=#fltKey# and a.FLT_DATE=#fltDate#  and a.flt_type ='E'
		and a.flt_key = b.flt_key and a.flt_Date = b.flt_date and a.uld_bt_no = b.uld_bt_no
		order by 1
	
	</select>
	<update id="updateExpPmanUld" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >
	UPDATE exp_pmanifest_uld
	SET    BRK_RMK = #brkRmk#,	
		   MAN_RMK =#manRmk#,
		   AIRSIDE_BRKDN=#airsideBrkdnInd#,
		   AIRSIDE_BRK_USER=#airsideBrkBy#,
		   AIRSIDE_BRK_DATE=#airsideBrkDate#,
		   TR_TYPE=#trType#,
		   TR_TYPE_EVT =#trtypeEvt#,
		   LM_USER_ID  = #lmUserId#,
		   LM_DATE     = #lmDate#
	WHERE  FLT_KEY=#fltKey# and FLT_DATE=#fltDate# and flt_type='E' and ULD_BT_NO=#uldBtNo#
    </update>
<select id="fetchDLSInd" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >	
	SELECT NVL(t2.dls_ind, 'N') as dlsInd
  FROM flt_opr t1,
    flt_opr_events t2
  WHERE t1.tr_no  = t2.tr_no
  AND t1.flt_key  = #fltKey#
  AND t1.sch_date = #fltDate#
  AND t1.flt_type = 'D'
	</select>
    
    <select id="validateULD" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" resultClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >	
	select decode(uld.EMPTY_FLG,'N','N','Y') as emptyFlag,(select decode(count(1),0,'N','Y')  from uld_inventory 
	where EIC_FLG ='Y' and EMPTY_FLG='Y' and BASE_PAL_FLG='N' and BASE_PLT=uld.uld_key and uld.EIC_FLG='Y') as topPalletsEmpty , 
	(select decode(count(1),0,'N','Y') from exp_chkout_dtl chkDtl where chkDtl.ULD_KEY=uld.ULD_KEY and chkDtl.FLT_KEY=#fltKey# and chkDtl.FLT_DATE=#fltDate# AND chkDtl.CHK_FLG = 'Y' AND chkdtl.chkout_date IS NOT NULL)
	as uldCheckedOut from uld_inventory uld where uld.uld_key=#uldBtNo# 	
	</select>
	<select id="isNewUldinInventory" parameterClass="map" resultClass="java.lang.Integer" >	
	select count(1) from uld_inventory uld where uld.uld_key=#uldNo# 	
	</select>
	<select id="fetchDummyHContainer" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" resultClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >	
	select cms.RULE_VALUE as dummyUldKey,uldInv.loc_code as dummyLoc  from cmsrules cms, uld_inventory uldInv where cms.RULE_CODE='Dummy_H_Container' and
	cms.RULE_VALUE=uldInv.uld_key
	</select>
	<select id="fetchAutoBuildUpDtl" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >	
	select decode(EIC_FLG,null,'N',EIC_FLG) as uldEicYN,CONTR_CODE as uldContrCode,GROSS_WEIGHT as uldGrossWeight,TARE_WEIGHT as uldTareWt,EMPTY_FLG as uldEmptyFlg, decode(ppk_ind,'Y','P',decode(mix_ppk_ind,'Y','M','B')) as uldPpkInd,ULD_KEY as uldNumber,LOC_CODE as locCode from uld_inventory where ULD_KEY=#uldNumber# 	
	</select>
	<select id="fetchTareandGrossWt" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >	
	select decode(NVL(TARE_WEIGHT,0),0,NVL((select max(TARE_WEIGHT) as tareWeight  from uld_type_carr_tare_wt where ULD_CARR=#carrCode# and ULD_TYPE=SUBSTR(#uldNumber#, 1, 3)),0),TARE_WEIGHT ) as tareWeight ,gross_weight as grossWt from uld_inventory where ULD_KEY=#uldNumber#
	</select>	   
		
      <update id="updateUldInvForNewUld" parameterClass="map" >
	UPDATE uld_inventory
	SET    GROSS_WEIGHT = decode(TARE_WEIGHT,'0', #manWt#+#tareWeight#,#manWt#+TARE_WEIGHT),
	TARE_WEIGHT = decode(TARE_WEIGHT,'0', #tareWeight#,TARE_WEIGHT),
	EMPTY_FLG='N',
	FIRST_WT = decode(#emptyFlag#,'Y', null,decode(TARE_WEIGHT,'0', #manWt#+#tareWeight#,#manWt#+TARE_WEIGHT)) ,
	SECOND_WT = decode(#emptyFlag#,'Y', null,decode(TARE_WEIGHT,'0', #manWt#+#tareWeight#,#manWt#+TARE_WEIGHT)),FINAL_WEIGHT=decode(#emptyFlag#,'Y', 'N','Y')	   
	WHERE  ULD_KEY=#uldNumber# 
    </update>

     <update id="updateUldInvForOldBulk" parameterClass="map" >
	UPDATE uld_inventory
	SET    GROSS_WEIGHT = decode(#emptyFlag#,'Y', '0',decode(TARE_WEIGHT,'0', #manWt#+#tareWeight#,#manWt#+TARE_WEIGHT)),		
		 EMPTY_FLG=#emptyFlag#,flt_key=decode(#emptyFlag#,'Y', null,flt_key),flt_date=decode(#emptyFlag#,'Y', null,flt_date),
		 FIRST_WT = decode(#emptyFlag#,'Y', null,decode(TARE_WEIGHT,'0', #manWt#+#tareWeight#,#manWt#+TARE_WEIGHT))  ,
		 SECOND_WT = decode(#emptyFlag#,'Y', null,decode(TARE_WEIGHT,'0', #manWt#+#tareWeight#,#manWt#+TARE_WEIGHT)),FINAL_WEIGHT=decode(#emptyFlag#,'Y', 'N','Y')  
	WHERE  ULD_KEY=#uldNumber#  
    </update>
     <update id="updateInv" parameterClass="map" >
	UPDATE uld_inventory
	SET    loc_code=decode(loc_code,null, ( select rule_value from cmsrules where rule_code='DUMMY_LOC'),loc_code),owned_inv = 'Y'	
		 
	WHERE  ULD_KEY=#uldNumber#  
    </update>
    

 <update id="updateexpfltuldOld" parameterClass="map" >
	UPDATE exp_flt_uld
	SET    man_pcs=#manPcs#,man_wt=#manWt#,GROSS_WT = decode(GROSS_WT,'0', (#manWt#+#tareWeight#),(#manWt#+TARE_WT)),NET_WT=#manWt#,REMARKS=#manRmk#
	WHERE  ULD_KEY=#uldNumber# and  flt_key=#fltKey# and flt_date=#fltDate#
    </update>
       <update id="updateexpfltuldNew" parameterClass="map" >
	UPDATE exp_flt_uld
	SET    man_pcs=#manPcs#,man_wt=#manWt#,GROSS_WT = decode(GROSS_WT,'0', (#manWt#+#tareWeight#),(#manWt#+TARE_WT)),
	TARE_WT=#tareWeight#,NET_WT=#manWt#,
	REMARKS=#manRmk#
	WHERE  ULD_KEY=#uldNumber# and  flt_key=#fltKey# and flt_date=#fltDate#
    </update>
   <update id="updateexpfltuldOldPPk" parameterClass="map" >
	UPDATE exp_flt_uld
	SET    man_pcs=#manPcs#,man_wt=#manWt#,GROSS_WT = (GROSS_WT-#grossWt#),NET_WT=(NET_WT-#netWt#),REMARKS=#manRmk#
	WHERE  ULD_KEY=#uldNumber# and  flt_key=#fltKey# and flt_date=#fltDate#
    </update>
    <update id="updateexpfltuldNewPPk" parameterClass="map" >
	UPDATE exp_flt_uld
	SET    man_pcs=#manPcs#,man_wt=#manWt#,GROSS_WT = (GROSS_WT+#grossWt#),
	TARE_WT=#tareWeight#,NET_WT=(GROSS_WT+#grossWt#-#tareWeight#),REMARKS=#manRmk#
	WHERE  ULD_KEY=#uldNumber#  and  flt_key=#fltKey# and flt_date=#fltDate#
    </update>
    <update id="updatepmanuldOld" parameterClass="map" >
	UPDATE exp_pmanifest_uld
	SET    TARE_WT =#tareWeight#, GROSS_WT = (GROSS_WT-#grossWt#)
	WHERE  uld_bt_no=#uldNumber#  and  flt_key=#fltKey# and flt_date=#fltDate#
    </update>
    <update id="updatepmanuldNew" parameterClass="map" >
	UPDATE exp_pmanifest_uld
	SET   TARE_WT =#tareWeight#,GROSS_WT =  decode(GROSS_WT,'0', (GROSS_WT+#grossWt#+#tareWeight#),(GROSS_WT+#grossWt#)) 
	WHERE  uld_bt_no=#uldNumber#  and  flt_key=#fltKey# and flt_date=#fltDate#
    </update>
       

       <update id="updatingAwb" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >
	UPDATE 	AWB	SET BLDUP_BULK_PCS = #buildUpPcs#,	BLDUP_BULK_WT = #buildUpWt#	WHERE AWB_NO = #awbNo#	AND AWB_DATE=to_date(#awbDate#,'DDMONYY')					
    </update>
      <update id="updateAwbInventory1" parameterClass="map" >
	UPDATE 	awb_inventory SET ULD_KEY = #uldNumber#, FLT_KEY=#fltkey#,FLT_DATE=TO_DATE(#fltdate#, 'DDMONYY') WHERE AWB_NO = #awbNo#	AND AWB_DATE=to_date(#awbDate#,'DDMONYY')					
    </update>

     
	<select id="sqlInvPcWt" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO">
    	SELECT 
				sum(assigned_pcs) as buildUpPcs,sum(assigned_wt) as buildUpWt,AWB_NO as awbNo,TO_CHAR(AWB_DATE,'DDMONYY') as awbDate
		 FROM exp_pmanifest_uld_awb
    	WHERE 
    		FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND AWB_NO = #awbNo#
 			AND AWB_DATE =to_date(#awbDate#,'DDMONYY') group by AWB_NO,AWB_DATE
    </select>
		    <update id="updateExpPmanUldNew" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >
	UPDATE exp_pmanifest_uld
	SET    READY_DISP = 'Y',	
		   BLDUP_COMPLETE ='Y',
		   BLDUP_COMPLETE_USER_ID=#lmUserId#,
		   BLDUP_COMPLETE_DATE=SYSDATE,		   
		   LM_USER_ID  = #lmUserId#,
		   LM_DATE     = SYSDATE,
		   BLDUP_START = 'Y',
		   BLDUP_START_USER_ID=#lmUserId#,
		   BLDUP_START_DATE=SYSDATE,
		   READY_DISP_DATE = SYSDATE,READY_DISP_TIME = TO_CHAR(SYSDATE,'HH24MI')
	WHERE  FLT_KEY=#fltKey# and FLT_DATE=#fltDate# and flt_type='E' and ULD_BT_NO=#uldNumber#
    </update>
    <update id="updCheckOutDtl" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >
	UPDATE exp_chkout_dtl
	SET    CHKOUT_USER = #lmUserId#,	
		   CHKOUT_DATE =#lmDate#,
		   CHKOUT_TIME=#lmTime#,
		   CHKOUT_RMK='Airside Check out',		   
		   LM_USER_ID  = #lmUserId#,
		   LM_DATE     = #lmDate#,
		   CHK_FLG = 'Y',
		   CHKOUT_LOCN=#locCode#		   
	WHERE  FLT_KEY=#fltKey# and FLT_DATE=#fltDate#  and ULD_KEY=#uldNumber#
    </update>
     <update id="updManifestDtl" parameterClass="cargo.cms.export.buildup.bo.AirsideBreakdownBO" >
	UPDATE flt_opr_events 
	SET    FINAL_MANF_USER_ID  = #lmUserId#,	
		   FINAL_MANF_DATE  =#lmDate#,
		   FINAL_MANF_IND='Y',
		   DLS_IND='Y',
		   DLS_FINAL_DATE=#lmDate#,
		   DLS_FINAL_TIME=#lmTime#	  		   
	WHERE  FLT_KEY=#fltKey# and SCH_DATE=#fltDate# and FLT_TYPE = 'D'
    </update>
<!-- Queries for Maintain Airside Breakdown ends -->
	<select id="offloadFetchInventoryData" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.StorageBO">
		SELECT AWB_NO as awbNo , CONCAT(CONCAT(SUBSTR(AWB_NO,0,3),'-'),SUBSTR(AWB_NO,4)) as awbNoDisplay,
				to_char(AWB_DATE,'DDMONYY') as awbDate,LOC_CODE as whDest,SEQ_NO as seqNo,
				LSP_NO as lspno,LOCN_PCS as strgPcs,LOCN_WT as strgWt,CARR_CODE as carrCode
		 FROM AWB_INVENTORY 
 			WHERE AWB_NO = #AWB_NO#
 			AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
 			AND ULD_KEY = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = #FLT_DATE#
	</select>
	<delete id="sqlDeleteAwbInventoryForOffload" parameterClass="java.util.HashMap">
		DELETE FROM AWB_INVENTORY WHERE ULD_KEY = #ULD_KEY# AND LOCN_PCS &lt;= 0
	</delete>
	<select id="tarmacBBRemainList" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	 Select R.Awb_No Awbno,To_Char(R.Awb_Date,'DDMONYY') Awbdate,
        R.Flt_Key Fltkey,To_Char(R.Flt_Date,'DDMONYY') Fltdate,
        R.Uld_Bt_No As Uldkey,
        'B' As Pkgtype,R.Assigned_Pcs,R.Assigned_Wt,
        r.unldg_pt From 
  Exp_Pman_Tarmac_Uld_Awb R,Exp_Pman_Tarmac_Uld S,Exp_Pmanifest_Uld T 
  where
  R.Flt_Key = S.Flt_Key And 
  R.Flt_Date = S.Flt_Date And
  R.Uld_Bt_No = S.Uld_Bt_No And
  T.Flt_Key(+) = R.Flt_Key And 
  T.Flt_Date(+) = R.Flt_Date And
  T.uld_bt_no(+) = R.uld_bt_no and
  r.FLT_KEY = #fltKey# AND
  R.Flt_Date = To_Date(#fltDate#,'DDMONYY') And 
  ((Select Bb_Ind From Exp_Flt_Uld Where Flt_Key=#fltKey# And Flt_Date=To_Date(#fltDate#,'DDMONYY') And Uld_Key=R.Uld_Bt_No And Rownum=1) = 'Y' Or T.New_Checkin_Uld='Y' Or (Select H_Cont_Ind From Mast_Uld_Type Where Code = Substr(R.Uld_Bt_No, 1, 3)) = 'Y')
  AND S.ULD_BT_NO NOT IN (#uldBtNo#)
	</select>
	
	
<!--  Accept Transfer Cargo :: Ranjith :: Starts -->	
	  
	<select id="accept_transfer_cargo_import_validate_withoutuld"
		parameterClass="map"
		resultClass="java.lang.String">
		SELECT PKG_EXP_ACPT.val_tran_cargo(#carr#,#transCarr#) FROM DUAL
	</select>

	<!--<select id="accept_transfer_cargo_import_validate_dummy"
		parameterClass="map"
		resultClass="java.lang.String">
		SELECT PKG_EXP_ACPT.val_tran_cargo_dummy(#carr#,#transCarr#,#dummy#) FROM DUAL
	</select>-->

	<parameterMap id="hmGenerateDummyAWBNoMap" class="map" >
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	    <parameter property="awbPrefix" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>

	<procedure id="generatedummyawbnoforTrfCargo" parameterMap="hmGenerateDummyAWBNoMap" >
		{? = call FUN_GEN_DUMMY_AWB(?)}
	</procedure>

	<parameterMap id="accept_transfer_cargo_import_validate_dummy" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="carr"	jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbNo5"	jdbcType="VARCHAR"	javaType="java.lang.String"	mode="INOUT"/>	
		<parameter property="dummy" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>

	<procedure id="accept_transfer_cargo_import_validate_dummy" 
		parameterMap="accept_transfer_cargo_import_validate_dummy" >
		{? = call PKG_EXP_ACPT.val_tran_cargo_dummy(?,?,?)}
	</procedure>

	<!--<select id="accept_transfer_cargo_import_validate_withuld"
		parameterClass="map"
		resultClass="java.lang.String">
		SELECT PKG_EXP_ACPT.val_tran_cargo(#uldKey#,#carr#,#transCarr#, #tareWt#) FROM DUAL
	</select>-->

	<parameterMap id="accept_transfer_cargo_import_validate_withuld" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="uldKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="carr"	jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="transCarr"	jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>		
		<parameter property="tareWt" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	</parameterMap>

	<procedure id="accept_transfer_cargo_import_validate_withuld" 
		parameterMap="accept_transfer_cargo_import_validate_withuld" >
		{? = call PKG_EXP_ACPT.val_tran_cargo(?,?,?,?)}
	</procedure>

	
	<parameterMap id="accept_transfer_cargo_import_update_awb_map" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="carr" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="transCarr" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="acceptMode" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="whDest" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="locn" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="pc" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="netWt" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="lspNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="uldKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="user" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>

	<procedure id="accept_transfer_cargo_import_update_awb" 
		parameterMap="accept_transfer_cargo_import_update_awb_map" >
		{? = call PKG_EXP_ACPT.accpt_tran_cargo_awb(?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<parameterMap id="accept_transfer_cargo_import_update_uld_map" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="uldKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="carr" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="transCarr" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="acceptMode" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="uldWhDest" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="uldLocn" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="uldPc" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="uldNetWt" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="uldTareWt" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="uldContrCode" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="user" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>

	<procedure id="accept_transfer_cargo_import_update_uld" 
		parameterMap="accept_transfer_cargo_import_update_uld_map" >
		{? = call PKG_EXP_ACPT.accpt_tran_cargo_uld(?,?,?,?,?,?,?,?,?,?,?,?)  }
	</procedure>
	
	<select id="accept_transfer_cargo_import_update_awb_temp"
		parameterClass="map">
		SELECT PKG_EXP_ACPT.accpt_tran_cargo_awb(
		#awbNo#,#carr#,#transCarr#,#acceptMode#,
		#whDest#,#locn#,#pc#,#netWt#,#lspNo#,#uldKey#,#user#) FROM DUAL
	</select>
	
	<select id="accept_transfer_cargo_import_get_seq"
		resultClass="java.lang.String">
	SELECT EXP_REBUILT_ADVICE_SEQ.nextval FROM dual
	</select>

	
	
		<select id="isCarCreatedBeforeAcptTrfCrgo" parameterClass="java.lang.String" resultClass="java.lang.Integer">
			SELECT COUNT(1) from EXP_CAR WHERE AWB_NO = #awbNum# AND AWB_DATE = pkg_common.get_awb_date(#awbNum#, 'E')
		</select>
		
		<select id="isAwbAcptdDiffAcptMode" parameterClass="map" resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(1) from EXP_RCL_HD WHERE AWB_NO = #awbNum# AND AWB_DATE = pkg_common.get_awb_date(#awbNum#, 'E') AND ACCPT_MODE <> #acptMode#
			]]>
		</select>
		
		<select id="getAcptAwbDestination" parameterClass="java.lang.String" resultClass="java.util.HashMap">
			SELECT ORIG ORIG , DEST DEST from AWB WHERE AWB_NO = #awbNo# AND AWB_DATE = pkg_common.get_awb_date(#awbNo#, 'E')
		</select>
		
		
	<!--  Accept Transfer Cargo :: Ranjith :: Ends -->	
	<select id="getPpkTypeForPmanUld" parameterClass="map" resultClass="java.lang.String">
		select ppk_type from exp_uld_awb WHERE uld_key = #ULD_KEY# and awb_no = #AWB_NO# and awb_date = #AWB_DATE#
	</select>
	
	<select id="getPpkForPmanUld" parameterClass="map" resultClass="java.lang.String">
		SELECT PPK_TYPE FROM EXP_RCL_HD WHERE RCL_NO = #RCL_NO# 
	</select>
	<select id="checkIfUldAwbExists" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') AND ULD_BT_NO = #uldKey#
	</select>
	<select id="fetchBuildupStartIndicator" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT BLDUP_START FROM EXP_PMANIFEST_ULD WHERE FLT_KEY = #fltKey# AND FLT_DATE  = TO_DATE(#fltDate#,'DDMONYY') AND ULD_BT_NO = #uldKey#
	</select>
	<select id="fetchULDInventoryDetails" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT DECODE(PPK_IND,'Y','P',DECODE(MIX_PPK_IND,'Y','M','B')) AS PPK_IND,LOC_CODE,ULD_CARR, TRIM(TO_CHAR(gross_weight,'999999999.99')) as GROSS_WT FROM ULD_INVENTORY WHERE ULD_KEY = #uldKey#
	</select>
	<select id="fetchAWBInventoryData" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT count(1)
		 FROM AWB_INVENTORY 
 			WHERE 
 			ULD_KEY = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = #FLT_DATE#
	</select>
	<insert id="acptTrfCargo_RCLHouseMnfstDtls" parameterClass="java.util.HashMap">
	INSERT INTO EXP_RCL_ULD_MANF (
 	  RCL_NO,ULD_KEY,AWB_NO,HAWB_NO,
		PC,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
	VALUES (#rclNo#,#uldNo#,#houseAwbNo#,#hawbNo#,#newBUPcs#,#newBUWt#,#createdUserId#,sysdate,#lastModifiedBy#,sysdate)
	</insert>
	
	<insert id="insertErcLDetailsFromAcptTfCargo" parameterClass="java.util.HashMap">
		insert into exp_rcl_brkdn(rcl_no, awb_no,awb_date, uld_key, pcs, weight, dest, cr_user_id, cr_date, lm_user_id, lm_date,CONTENT,tr_type_evt)
		        values (#RCL_NO#, #AWB_NO#,pkg_common.get_awb_date(#AWB_NO#, 'E'),#ULD_KEY#, NVL(#PCS#,0), NVL(#WT#,0), #DEST#, #LM_USER_ID#, 
		        sysdate, #LM_USER_ID#, sysdate,#awbContent#,'ATMIX')                
	</insert>
	
	<select id="sqlGetTrfAwbDate" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT pkg_common.get_awb_date(#awbNo#, 'E') FROM DUAL
	</select>
	
	<update id="sqlUpdateTransferCarrier" parameterClass="java.util.HashMap">
		update exp_rcl_hd
		set trans_carr_code = #TRANS_CARR#, TRANSITION_YN = #TRANSITION#
		where RCL_NO=#RCL_NO#               
	</update>
	
	<update id="sqlUpdateTrfHdlgMode" parameterClass="java.util.HashMap">
		update uld_inventory
		set handling_mode = #HDLG_MODE#,
		owner_id = #CARR#
		where ULD_KEY=#ULD_KEY#               
	</update>
	
	<update id="sqlUpdateTransferAwb" parameterClass="java.util.HashMap">
		update awb
		set orig = #AWB_ORIGIN#,
		dest = #AWB_DEST#
		where awb_no=#AWB_NO#   
		and awb_date = get_awb_date(#AWB_NO#, 'E')
		and awb_type = 'E' 
	</update>
	
	<update id="sqlUpdateTrfAwbDetails" parameterClass="java.util.HashMap">
		update awb
		set orig = #ORIGIN#,
		dest = NVL(#DESTINATION#,dest)
		where awb_no=#AWB_NO#   
		and awb_date = #AWB_DATE#
		and	awb_type = 'E' 		
	</update>
	
	<update id="sqlUpdateATCARCatalog" parameterClass="java.util.HashMap">
		update EXP_CAR
		set catalog = 'EG'	,
		lm_user_id = NVL(#USER#,'SYSUSER'),
		lm_date = SYSDATE	
		where awb_no=#AWB_NO#   
		and awb_date = #AWB_DATE#
	</update>	
	
	<update id="sqlUpdateATCawbType" parameterClass="java.util.HashMap">
		update awb
		set awb_type = 'E',
		catalog = 'EG',
		lm_user_id = NVL(#USER#,'SYSUSER'),
		lm_date = SYSDATE			
		where awb_no=#AWB_NO#   
		and awb_date = #AWB_DATE#
		and	awb_type = 'T' 		
	</update>	
	
	<insert id="acptTrfCgoInsertAwbImage" parameterClass="java.util.HashMap">
		INSERT INTO 
			AWB_IMAGE 
			(SEQ_NO, AWB_IMAGE_NAME, AWB_NO, AWB_DATE) 
		VALUES 
			(AWB_IMAGE_SEQ.NEXTVAL, #TRNS_ID#, #AWB_NO#, TO_DATE(#AWB_DATE#, 'DDMONYY'))
	</insert>	
	
	<insert id="acptTrfInsertUldImage" parameterClass="map" >
			insert into ULD_IMAGE (ULD_TYPE,
				ULD_NO,
				ULD_CARR,
				ULD_KEY,
				ULD_IMAGE_NAME,ULD_IMAGE)			
				values(
				#uld_type#,
				#uld_no#,
				#uld_carr#,
				#uld_key#,
				#transactionId#,
				null)		   
	</insert>
	
	
		
	<select id="validateFltCarrier"  parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
 	  select COUNT(1) from   mast_carrier where  code = #fltPfx# 
   	</select>
	<select id="sqlFetchUldDetails" parameterClass="java.lang.Object" resultClass="cargo.cms.export.buildup.bo.FlightControlBO">
		SELECT ULD.FLT_KEY as fltKey,TO_CHAR(ULD.FLT_DATE,'DDMONYY') as fltdate,ULD.ULD_BT_NO as uldKey,(SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB A ,V_CST_EXP_CC_CODE B
			WHERE A.FLT_KEY = B.FLT_KEY AND A.FLT_DATE = B.FLT_DATE AND A.AWB_NO = B.AWB_NO AND A.ULD_BT_NO = ULD.ULD_BT_NO
			AND A.FLT_KEY = ULD.FLT_KEY AND A.FLT_DATE = ULD.FLT_DATE
			AND EXISTS(SELECT NULL FROM MAST_CONSTRAINT_CODE WHERE CODE = B.CC_CODE AND CONSTRAINT = 'Y')) AS restrictCc FROM EXP_PMANIFEST_ULD ULD 
	              WHERE ULD.BLDUP_COMPLETE = 'Y' AND NVL(ULD.READY_DISP ,'N') = 'N' and uld.ready_man_id is null
			AND NOT EXISTS(SELECT NULL FROM EXP_PMANIFEST_ULD_AWB A,AWB B
	    WHERE A.AWB_NO = B.AWB_NO AND A.AWB_DATE = B.AWB_DATE AND A.ULD_BT_NO = ULD.ULD_BT_NO AND
	    	B.DOCACC_USER IS  NULL  and b.awb_type = 'E' )
	</select>
	<select id="getAcType" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="cargo.cms.export.bo.ExportULDBO">
	select ACFT_TYPE acType,carr_code carr from FLT_OPR where FLT_KEY=#fltKey# and SCH_DATE=#fltDepDate# and flt_type='D'
	</select>	
	<select id="chkULDTypeProhbCount" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="java.lang.Integer">
	select count(1) from ULD_TYPE_PROH_ACFT where uld_Type=substr(#uldNo#,0,3)
        and contr_code=#contrCode# and acft_type=#acType# and carr_code=#carr#
	</select>
<select id="getAcTypeOfAssignULD" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.FlightSearchBO">
	select ACFT_TYPE acType,carr_code fltCarr from FLT_OPR where FLT_KEY=#fltNo# and SCH_DATE=#fltDate# and flt_type='D'
	</select>	
	<select id="chkULDTypeProhbCountAssign" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="java.lang.Integer">
	select count(1) from ULD_TYPE_PROH_ACFT where uld_Type=substr(#uldNo#,0,3)
    and contr_code=#contourCode# and acft_type=#acType# and carr_code=#fltCarr#
	</select>
	<select id="fetchContrCode" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="java.lang.String">
	select CONTR_CODE contourCode from uld_type_contr where uld_Type=substr(#uldNo#,0,3) and rownum = 1
	</select>
	<insert id="InsertUldInventoryForAcceptTransferCargo"  parameterClass="cargo.cms.export.bo.IssueRCLDetailBO">
		INSERT INTO ULD_INVENTORY(ULD_KEY,OWNER_ID,STRG_DATE,LM_DATE,LM_USER_ID,SOURCE_CODE,TARE_WEIGHT,GROSS_WEIGHT,ULD_NO,ULD_TYPE,ULD_CARR) 
			values(#uldNum#,#transCarr#,sysdate,sysdate,#userID#,'ATC',NVL(#uldTareWt#,0),NVL(#uldGrossWt#,0),#trfUldNo#,#trfUldType#,#trfUldCarr#) 
	</insert>
	<update id="UpdateUldInventoryForAcceptTransferCargo"  parameterClass="cargo.cms.export.bo.IssueRCLDetailBO">
		UPDATE ULD_INVENTORY
		SET  SOURCE_CODE = 'ATC',
		TARE_WEIGHT = #uldTareWt#,
		GROSS_WEIGHT = NVL(GROSS_WEIGHT,0)+NVL(#uldGrossWt#,0) - NVL(#uldTareWt#,0),
		LM_DATE = SYSDATE,
		LM_USER_ID = #userID#
		where ULD_KEY = #uldNum#
	</update>
	
	
	
	<select id="checkEndorsePman" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM AWB, MAST_SPL_HAND_CODE WHERE 
			(MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE1 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE2 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE3 OR 
			MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE4 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE5 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE6 OR 
			MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE7 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE8 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE9)
		AND AWB.AWB_NO = #awbNo1# AND AWB.AWB_DATE = #awbDate# AND MAST_SPL_HAND_CODE.ENDR_PMAN = 'Y'
	</select>
	<!--<select id="sqlValidatFltCarrForUldCheckOut" parameterClass="java.lang.String" resultClass="java.lang.String">	
		select DISTINCT code from mast_carrier where code=#fltPfx#
	</select>
	<select id="sqlValidatFltNoForUldCheckOut" parameterClass="java.lang.String" resultClass="java.lang.String">
		select DISTINCT flt_no from flt_opr where flt_no=#fltSfx#
	</select>
	--><select id="sqlFetchIATACode" parameterClass="cargo.cms.export.bo.CargoStorageBO" resultClass="java.lang.String">
		SELECT CO_IATA_CODE FROM CUST_COMPANY WHERE CODE_DESC = UPPER(#agtName#)
	</select>
	<select id="getSpecialHandlingCodes" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.SIDBO">
		select SPL_CODE1 AS splCode1,SPL_CODE2 AS splCode2,SPL_CODE3 AS splCode3,SPL_CODE4 AS splCode4,SPL_CODE5 AS splCode5,
		SPL_CODE6 AS splCode6,SPL_CODE7 AS splCode7,SPL_CODE8 AS splCode8,SPL_CODE9 AS splCode9 from awb where AWB_NO = #awbNo# and awb_date = TO_DATE(#awbDate#, 'DDMONYY')
	</select>	
	<select id="validateFlightForPrintCargo" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		select COUNT(1) from FLT_OPR where FLT_KEY=#fltKey# and SCH_DATE=TO_DATE(#fltDate#,'DDMONYY') and FLT_TYPE='D'
	</select>
	<select id="checkforPremanfFlight" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">	
		select COUNT(1)
	         from   exp_pman_tarmac_awb
	            where  FLT_KEY=#fltKey# 
              and  flt_date = TO_DATE(#fltDate#,'DDMONYY')
             
	</select>
	<select id="checkforPremanfFlightGtd" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	SELECT count(b.FINAL_MANF_IND) 
		from flt_opr a, flt_opr_events b
		WHERE a.tr_no = b.tr_no 
			AND b.flt_type='D' 
      and b.FINAL_MANF_IND='Y'
			AND a.flt_key = #fltKey#
			AND a.sch_date = TO_DATE(#fltDate#,'DDMONYY')
	</select>		
	<select id = "fetchTowOrderDetails" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.SuperUrgentResultBO">
	select ver_no verNo,TO_NO towOrderNo,CR_USER_ID createdUserId
from tow_order_out
where TO_NO = #PARAM#
	</select>

		
	<select id="isPassengerFlight" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	SELECT TO_CHAR(COUNT(1)) FROM flt_opr
		WHERE flt_key = #flightNumber#
			AND sch_date =  to_date(#flightDate#,'DDMONYY')
			AND flt_type = 'D'
			AND CGO_ACFT_TYPE = 'PSR'
	</select>
	<select id="isShipmentContainsSHC" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) as cont FROM AWB, MAST_SPL_HAND_CODE WHERE 
         MAST_SPL_HAND_CODE.CODE in( AWB.SPL_CODE1 , AWB.SPL_CODE2 ,AWB.SPL_CODE3 , AWB.SPL_CODE4 ,AWB.SPL_CODE5 , AWB.SPL_CODE6 ,AWB.SPL_CODE7 , AWB.SPL_CODE8 , AWB.SPL_CODE9)
         AND AWB.AWB_NO = #awbNo# AND AWB.AWB_DATE = to_date(#awbDate#,'DDMONYY') AND MAST_SPL_HAND_CODE.PMAN_PAX = 'N'
	 </select> 
	 <select id="isFBLShipmentContainsSHC" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) as cont FROM edi_fbl_shp awb, MAST_SPL_HAND_CODE WHERE
			MAST_SPL_HAND_CODE.CODE in( AWB.SPL_CODE1 , AWB.SPL_CODE2) AND AWB.AWB_NO = #awbNo# 
			AND AWB.AWB_DATE = to_date(#awbDate#,'DDMONYY') AND MAST_SPL_HAND_CODE.PMAN_PAX = 'N'
	 </select> 
	 <select id="isShipmentInAWB" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	 SELECT COUNT(1) FROM AWB WHERE AWB_NO = #AWB_NO# AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
	 </select>
<select id="selectfwbforexpcar"  parameterClass="java.util.HashMap"    resultClass="cargo.cms.common.ext.bo.FWBBO">
	SELECT 
            NVL( a.AWB_NO , ' ')  as awbNo,
			NVL( TO_CHAR(a.AWB_DATE, 'DDMON') , ' ')  as awbDt,
			NVL( TO_CHAR(a.AWB_DATE, 'DDMONYY') , ' ')  as awbDate,
			NVL( a.ORIGIN , ' ')  as origin,
			NVL( a.DEST , ' ')  as destination,
			'T'  as shpmDescCode,
			NVL( a.PCS , 0)  as totalPieces,
			'K'  as weightCode,
			ROUND(NVL( a.WT , 0),3)  as totalWeight,
			NVL(c.AGENT_IATA_CODE,'0') as agentIATACode,
	c.AGENT_IATA_ADDR  as agentIATAAddr,
      		c.AGENT_ACC_NO as agentIATAAcctNo,
			NVL( FUN_CONVERT_CONTENT(SHPR_ACC_NO) , ' ')  as shipperAcctNo,
			NVL( FUN_CONVERT_CONTENT(a.shpr_name) , ' ')  as shipperName,
			NVL( FUN_CONVERT_CONTENT(a.SHPR_ADDR) , ' ')  as shipperAddr,
			NVL( FUN_CONVERT_CONTENT(a.SHPR_ADDR2) , ' ')  as shipperAddr2,
			NVL( FUN_CONVERT_CONTENT(a.SHPR_PLACE) , ' ')  as shipperPlace,					
			NVL( a.SHPR_CTRY_CODE , ' ')  as shipperCountryCode,
			NVL( FUN_CONVERT_CONTENT(a.SHPR_PIN_CODE) , ' ')  as shipperPostalCode,				
			NVL( FUN_CONVERT_CONTENT(CSGNE_ACC_NO) , ' ')  as consigneeAcctNo,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_NAME) , ' ')  as consigneeName,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_ADDR) , ' ')  as consigneeAddr,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_ADDR2) , ' ')  as consigneeAddr2,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_PLACE) , ' ')  as consigneePlace,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_CTRY_CODE) , ' ')  as consigneeCountryCode,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_PIN_CODE) , ' ')  as consigneePostalCode,
			NVL( FUN_CONVERT_CONTENT(a.agent_code) , ' ')  as agentAcctNo,
			NVL( FUN_CONVERT_CONTENT(a.agent_name) , ' ')  as agentName,
			( select NVL(SPL_CODE1,'') from AWB awb  left join MAST_CARR_SPL_HAND_CODE spl ON CARRIER = awb.carr_code
			  where awb_no = a.AWB_NO and AWB_date = a.AWB_DATE and ( spl.SPL_CODE is null OR ( spl.SPL_CODE is not null AND instr(spl.SPL_CODE,spl_code1) = 0 ) ) ) as specialHandCode,
			( select NVL(SPL_CODE2,'') from AWB awb  left join MAST_CARR_SPL_HAND_CODE spl ON CARRIER = awb.carr_code
			  where awb_no = a.AWB_NO and AWB_date = a.AWB_DATE and ( spl.SPL_CODE is null OR ( spl.SPL_CODE is not null AND instr(spl.SPL_CODE,spl_code2) = 0 ) ) ) as specialHandCode2,
			( select NVL(SPL_CODE3,'') from AWB awb  left join MAST_CARR_SPL_HAND_CODE spl ON CARRIER = awb.carr_code
			  where awb_no = a.AWB_NO and AWB_date = a.AWB_DATE and ( spl.SPL_CODE is null OR ( spl.SPL_CODE is not null AND instr(spl.SPL_CODE,spl_code3) = 0 ) ) ) as specialHandCode3,
			( select NVL(SPL_CODE4,'') from AWB awb  left join MAST_CARR_SPL_HAND_CODE spl ON CARRIER = awb.carr_code
			  where awb_no = a.AWB_NO and AWB_date = a.AWB_DATE and ( spl.SPL_CODE is null OR ( spl.SPL_CODE is not null AND instr(spl.SPL_CODE,spl_code4) = 0 ) ) ) as specialHandCode4,
			( select NVL(SPL_CODE5,'') from AWB awb  left join MAST_CARR_SPL_HAND_CODE spl ON CARRIER = awb.carr_code
			 where awb_no = a.AWB_NO and AWB_date = a.AWB_DATE and ( spl.SPL_CODE is null OR ( spl.SPL_CODE is not null AND instr(spl.SPL_CODE,spl_code5) = 0 ) ) ) as specialHandCode5,
			( select NVL(SPL_CODE6,'') from AWB awb  left join MAST_CARR_SPL_HAND_CODE spl ON CARRIER = awb.carr_code
			 where awb_no = a.AWB_NO and AWB_date = a.AWB_DATE and ( spl.SPL_CODE is null OR ( spl.SPL_CODE is not null AND instr(spl.SPL_CODE,spl_code6) = 0 ) ) ) as specialHandCode6,
			( select NVL(SPL_CODE7,'') from AWB awb  left join MAST_CARR_SPL_HAND_CODE spl ON CARRIER = awb.carr_code
			 where awb_no = a.AWB_NO and AWB_date = a.AWB_DATE and ( spl.SPL_CODE is null OR ( spl.SPL_CODE is not null AND instr(spl.SPL_CODE,spl_code7) = 0 ) ) ) as specialHandCode7,
			( select NVL(SPL_CODE8,'') from AWB awb  left join MAST_CARR_SPL_HAND_CODE spl ON CARRIER = awb.carr_code
			 where awb_no = a.AWB_NO and AWB_date = a.AWB_DATE and ( spl.SPL_CODE is null OR ( spl.SPL_CODE is not null AND instr(spl.SPL_CODE,spl_code8) = 0 ) ) ) as specialHandCode8,
			( select NVL(SPL_CODE9,'') from AWB awb  left join MAST_CARR_SPL_HAND_CODE spl ON CARRIER = awb.carr_code
			 where awb_no = a.AWB_NO and AWB_date = a.AWB_DATE and ( spl.SPL_CODE is null OR ( spl.SPL_CODE is not null AND instr(spl.SPL_CODE,spl_code9) = 0 ) ) ) as specialHandCode9, 	
			NVL( c.PPD_TOTAL_WT_AMT , 0)  as ppccWeightChrg,
			NVL( c.PPD_VALUE_VC_AMT , 0)  as ppccValnChrg,
			NVL( c.PPD_TAXES_TX_AMT , 0)  as ppccTaxes,
			NVL( c.PPD_TOTAL_OA_AMT , 0)  as ppccOtherChrgDueAgent,
			NVL( c.PPD_TOTAL_OC_AMT , 0)  as ppccOtherChrgDueCarrier,
			NVL( c.COL_TOTAL_WT_AMT , 0)  as colWeightChrg,
			NVL( c.COL_VALUE_VC_AMT , 0)  as colValnChrg,
			NVL( c.COL_TAXES_TX_AMT , 0)  as colTaxes,
			NVL( c.COL_TOTAL_OA_AMT , 0)  as colOtherChrgDueAgent,
			NVL( c.COL_TOTAL_OC_AMT , 0)  as colOtherChrgDueCarrier,
			NVL( d.FLT_CARR1 , ' ')  as carrier1,
			NVL( d.FLT_NO1 , ' ')  as flightNo,
			NVL( d.FLT_CARR1||d.FLT_NO1 , ' ')  as flightKey1,
			NVL(LPAD(d.FLT_DATE1,2,0), ' ')  as flightDate, 
			NVL( d.FLT_CARR2 , ' ')  as carrier2,
			NVL( d.FLT_NO2 , ' ')  as flightNo2,
			NVL( a.CARR_CODE||FLT_NO2 , ' ')  as flightKey2,
			NVL(LPAD(d.FLT_DATE2,2,0), ' ')  as flightDate2, 
			NVL( d.ROUTE_AIRP_CODE , ' ')  as routeAirportCode,
			NVL( a.CARR_CODE , ' ')  as routeCarrierCode,
			NVL( d.ONW_AIRP_CODE , ' ')  as onwardAirportCode,
			NVL( d.ONW_CARR_CODE , ' ')  as onwardCarrierCode,
			NVL( d.AGENT_CASS_ADDR , 0)  as agentCASSAddr,
			NVL( FUN_CONVERT_CONTENT(d.AGENT_PARTI_C) , ' ')  as agentParticipantCode,
			NVL( FUN_CONVERT_CONTENT(d.SPL_SVC_REQ1) , ' ')  as specialServiceRequest,
			NVL( FUN_CONVERT_CONTENT(d.SPL_SVC_REQ2) , ' ')  as specialServiceRequest2,
			NVL( FUN_CONVERT_CONTENT(d.SPL_SVC_REQ3) , ' ')  as specialServiceRequest3,
			NVL( FUN_CONVERT_CONTENT(d.OTHER_SVC_INFO1) , ' ')  as specialServiceRequest4,
			NVL( FUN_CONVERT_CONTENT(d.OTHER_SVC_INFO2) , ' ')  as specialServiceRequest5, 
		   
		    NVL( FUN_CONVERT_CONTENT(C.NOTIFY_NAME) , ' ')  as notifyName,
		    NVL( FUN_CONVERT_CONTENT(C.NOTIFY_ADDR) , ' ')  as notifyAddr,		    
		    NVL( FUN_CONVERT_CONTENT(C.NOTIFY_PLACE) , ' ')  as notifyPlace,
		    NVL( FUN_CONVERT_CONTENT(C.NOTIFY_CTRY_CODE) , ' ')  as notifyCountryCode,
		    NVL( FUN_CONVERT_CONTENT(C.NOTIFY_PIN_CODE) , ' ')  as notifyPostalCode,
		    
		    NVL( FUN_CONVERT_CONTENT(C.NOTIFY_ADDR2) , ' ')  as notifyAddr2,
		    NVL( FUN_CONVERT_CONTENT(C.NOTIFY_CTRY_CODE) , ' ')  as notifyCtryCode,
		    NVL( FUN_CONVERT_CONTENT(C.NOTIFY_STATE_PROVINCE) , ' ')  as notifyStateProvince,
		    NVL( FUN_CONVERT_CONTENT(C.NOTIFY_PIN_CODE) , ' ')  as notifyPinCode,
		    (SELECT  NVL(STRAGG(STRINGDELIM(cont_id  ||  ' ' ||  cont_name, ' ')),'')   FROM   EDI_FWB_CONTACT WHERE tr_no= C.tr_no AND edi_fwb_contact.cont_type = 'NFY') as notifyContInfo,  
		    
			NVL( d.SHPR_CERTN , ' ')  as shprCertification,
			NVL(TO_CHAR(d.EXECN_DATE,'DD'), 0) AS carDay,
			NVL(TO_CHAR(d.EXECN_DATE,'MON'), ' ') AS carMonth,
			NVL(TO_CHAR(d.EXECN_DATE,'YY'), 0) AS carYear,
			NVL( TO_CHAR(d.EXECN_DATE, 'DDMON') , ' ')  as awbIssuedDate,
			NVL( FUN_CONVERT_CONTENT(d.EXECN_PLACE) , ' ')  as carPlace,
			NVL( d.EXECN_SIGN , ' ')  as carSignature,
			NVL( FUN_CONVERT_CONTENT(d.OTHER_SVC_INFO1) , ' ')  as otherServiceInfo,
			NVL( FUN_CONVERT_CONTENT(d.OTHER_SVC_INFO2) , ' ')  as otherServiceInfo2,
			NVL( FUN_CONVERT_CONTENT(d.OTHER_SVC_INFO3) , ' ')  as otherServiceInfo3,
			NVL( SENDR_OFF_AIRP_C , ' ')  as sendrOffAirpC,
			NVL( d.SENDR_OFF_FUNC_DESG , ' ')  as sendrOffFuncDesg,
			NVL( d.SENDR_OFF_CO_DESG , ' ')  as sendrOffCoDesg,
			NVL( d.SENDR_OFF_FILE_REF , ' ')  as sendrOffFileRefNo,
			NVL( d.SENDR_PARTI_I , ' ')  as sendrPartiI,
			NVL( d.SENDR_PARTI_C , ' ')  as sendrPartiC,
			NVL( d.SENDR_AIRP_CODE , ' ')  as sendrAirpC,
			NVL( FUN_CONVERT_CONTENT(d.REF_NO) , ' ')  as shipRefNumber,
			NVL( FUN_CONVERT_CONTENT(d.SPL_CUST_INFO1) , ' ')  as shipSupplementaryInfo1,
			NVL( FUN_CONVERT_CONTENT(d.SPL_CUST_INFO1) , ' ')  as shipSupplementaryInfo2,
			' '  as ctmOrgCode,
			' '  as caasIndicator,
			0  as caasSettlement,
			0  as cassCommPerc,
			0  as salesChrgAmt,
			' '  as salesCaasIndicator,
			' '  as agFileRef,
			' '  as nomName,
			' '  as nomPlace,
			0  as colTotalChrg, 
			0  as ppccTotalChrg,
			' '  as ccCurrCode,
		    0  as ccCurrConverExchangeRate,
			0  as ccCurrConverDestChrg,
			0  as ccCurrConverTotalDestChrg,
			0  as ccCurrConverTotalChrg,
			NVL(c.CVD_ISO_CURR_CODE,'HKD')  as declnCurrCode,
			'PP'  as declnChargeCode,
			'P'  as declnWtValnInd,
			'P'  as declnOtherChrgInd,
			0  as declnCarrier,
			'NVD'  as declnCarrierInd,
			0  as declnCustom,
			'NCV'  as declnCustomInd,
			0  as declnInsurance,
			'XXX'  as declnInsuranceInd,	 
			NVL( a.CONTENT , ' ')  as content,
			c.SHPR_STATE_PROVINCE as shprState,
		      decode(c.SHPR_CONT_ID,null,
				(SELECT STRAGG(STRINGDELIM(EDI_FWB_CONTACT.cont_name,'/')) FROM
				EDI_FWB_CONTACT WHERE EDI_FWB_CONTACT.tr_no=c.tr_no and cont_id =
				'TE' and cont_type = 'SHP' ),
				c.SHPR_CONT_ID) as shpTelNo,
				decode(c.SHPR_CONT_ID,null,
				(SELECT STRAGG(STRINGDELIM(EDI_FWB_CONTACT.cont_name,'/')) FROM
				EDI_FWB_CONTACT WHERE EDI_FWB_CONTACT.tr_no=c.tr_no and cont_id =
				'FX' and cont_type = 'SHP' ),
				c.SHPR_CONT_ID) as shpFax,
				decode(c.SHPR_CONT_ID,null,
				(SELECT STRAGG(STRINGDELIM(EDI_FWB_CONTACT.cont_name,'/')) FROM
				EDI_FWB_CONTACT WHERE EDI_FWB_CONTACT.tr_no=c.tr_no and cont_id =
				'TL' and cont_type = 'SHP' ),
				c.SHPR_CONT_ID) as shpTelexNO,
				decode(c.SHPR_CONT_ID,null,
				(SELECT STRAGG(STRINGDELIM(EDI_FWB_CONTACT.cont_name,'/')) FROM
				EDI_FWB_CONTACT WHERE EDI_FWB_CONTACT.tr_no=c.tr_no and cont_id =
				'TE' and cont_type = 'CNE' ),
				c.SHPR_CONT_ID) as csgnTelNo,
				decode(c.SHPR_CONT_ID,null,
				(SELECT STRAGG(STRINGDELIM(EDI_FWB_CONTACT.cont_name,'/')) FROM
				EDI_FWB_CONTACT WHERE EDI_FWB_CONTACT.tr_no=c.tr_no and cont_id =
				'FX' and cont_type = 'CNE' ),
				c.SHPR_CONT_ID) as csgnFax,
				decode(c.SHPR_CONT_ID,null,
				(SELECT STRAGG(STRINGDELIM(EDI_FWB_CONTACT.cont_name,'/')) FROM
				EDI_FWB_CONTACT WHERE EDI_FWB_CONTACT.tr_no=c.tr_no and cont_id =
				'TL' and cont_type = 'CNE' ),
				c.SHPR_CONT_ID) as csgnTelexNO,
		    (select code_desc from cust_company where carr_code = (select carr_code from mast_awb_prefix where code=SUBSTR(SUBSTR(c.AWB_NO,1,3),1,3) and rownum=1)) as compName,
		    c.CSGNE_STATE_PROVINCE as csgnState,
		    c.AGENT_PLACE as agentCity,
		    NVL(c.RTG_APT_CODE,a.DEST) as depAportName,
		    c.RTG_DES_CARR as carrAgent,
		        c.RTG_ONWARD_CODE1 as rtgOnwardCode1,
				c.RTG_ONWARD_CARR1 as rtgOnwardCarr1,
				c.RTG_ONWARD_CODE2 as rtgOnwardCode2,
				c.RTG_ONWARD_CARR2 as rtgOnwardCarr2,
		    	decode(PPD_TOTAL_WT_AMT,'',decode(PPD_VALUE_VC_AMT,0,'','','','P'),0,decode(PPD_VALUE_VC_AMT,0,'','','','P'),'P')
				pcsWtPP,
          		decode(COL_TOTAL_WT_AMT,'',decode(COL_VALUE_VC_AMT,0,'','','','C'),0,decode(COL_VALUE_VC_AMT,0,'','','','C'),'C')
				pcsWtColl,
				decode(PPD_TOTAL_OA_AMT,'',decode(PPD_TOTAL_OC_AMT,0,'','','','P'),0,decode(PPD_TOTAL_OC_AMT,0,'','','','P'),'P')
				pcsOtherPP,
				decode(COL_TOTAL_OA_AMT,'',decode(COL_TOTAL_OC_AMT,0,'','','','C'),0,decode(COL_TOTAL_OC_AMT,0,'','','','C'),'C')
				pcsOtherColl,
		    (case when nvl(c.CVD_CHG_CARR_VAL,0)>0 then
				trim(c.CVD_CHG_CARR_VAL) else 'NVD' end) as declValCarr,
		    (case when nvl(c.CVD_CHG_CUST_VAL,0)>0 then
				trim(c.CVD_CHG_CUST_VAL) else 'NCV' end)as declValCustoms,
		    (select code_desc from mast_city where code = c.DES) as		finalAirportName,
		    c.FLT_CARR1||c.FLT_NUM1 ||'/'||c.FLT_DATE1 as finalFltCarr1,
				c.FLT_CARR2||c.FLT_NUM2 ||'/'||c.FLT_DATE2 as finalFltCarr2,
		    (case when nvl(c.CVD_CHG_INSUR_VAL,0)>0 then
				trim(c.CVD_CHG_INSUR_VAL) else 'XXX' end) as insuranceAmt,
		    c.CDC_CC_INDES_AMT cdeCcIndesAmt,
				c.CDC_CC_ATDES_AMT cdeCcAtdesAmt,
		    NVL(c.CER_SIGNATURE,c.agent_name) as shpSign,
		    to_char(c.isu_awb_iss_date,'DDMONYY') as execnDate,
		    c.ISU_AWB_ISS_PLACE as place,
		    NVL(c.ISU_SIGNATURE,c.agent_name) as carrSign,
		    c.AGENT_SPL_SERV1 as hndlgInfo1,
			c.AGENT_SPL_SERV2 hndlgInfo2,
			c.AGENT_SPL_SERV3 hndlgInfo3,
			c.OSI_SERVICE_INFO1 osiServiceInfo1,
			c.OSI_SERVICE_INFO2 osiServiceInfo2 ,
			c.OSI_SERVICE_INFO3 osiServiceInfo3,
			pkg_common.get_awb_splcodes(a.AWB_NO,a.AWB_DATE) splCodes,
			c.tr_no trNo,
			(SELECT upper(CODE_DESC) FROM MAST_AWB_PREFIX where  CARR_CODE = A.CARR_CODE and ROWNUM = 1) as carrName,
        	nvl(A.SEC_RC_CODE,c.ra_no) as raNum
		FROM EXP_CAR a
		left join v_edi_fwb c
    	on  a.AWB_NO = c.AWB_NO	and a.AWB_DATE = c.AWB_DATE 
		left join exp_sid d
		on  a.AWB_NO = d.AWB_NO	and a.AWB_DATE = d.AWB_DATE 
		WHERE a.AWB_NO= #AWB_NO#
		AND a.AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
	
	</select>

	
	<select id="getOCIDetails"  parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.ext.bo.FWBBO">	
		select iso_ctry_code||'/'||info_identifier||'/'||cust_info_identifier||'/'||supp_cust_info as ociInfo from edi_fwb_oci 
 			where tr_no= (select max(to_number(a.tr_no)) from edi_fwb a where a.awb_no = #AWB_NO# and a.AWB_DATE = to_date(#AWB_DATE#,'DDMONYY'))
	</select>
	

	<select id="checkAWBInExpCarLocked" parameterClass="cargo.cms.export.buildup.bo.ManifestAWBBO" resultClass="java.lang.Integer">		
		select DECODE(awb.exp_awb_lock, 'Y', 1, DECODE(exp_car.lock_ind, 'Y',1,0)) as ctr  from awb left join exp_car on
		awb.awb_no = exp_car.awb_no and awb.awb_date = exp_car.awb_date
		where awb.awb_no = #awbNo# and awb.awb_date = to_date(#awbDate#,'DDMONYY')
	</select>

	
<!-- Cargo Booking List - starts -->
	
	
	<select id="CBLSearch" parameterClass="cargo.cms.export.bo.CargoBookingListBO" resultClass="cargo.cms.export.bo.CargoBookingListBO">	
  select t1.FLT_key as fltKey ,
  		 t1.CARR_CODE as fltPrxNo,
         t1.FLT_NO as fltSfxNo,
         TO_CHAR(t1.FLT_DATE,'DDMONYY') as depDate , 
         PKG_COMMON.get_flt_eta(t1.FLT_key, T1.FLT_DATE, 'D') AS etd,
         DECODE(T2.SCH_TIME, NULL,NULL,SUBSTR(TRIM(TO_CHAR(NVL(t2.SCH_TIME,0),'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(NVL(T2.SCH_TIME,0),'0000')),3,4)) AS std,
         T2.ACFT_REG_NO AS acftRegNo,
         (select max(decode(edi_fbl_shp.nil_ind,'Y','Y','N')) from	
         edi_fbl_shp where edi_fbl_shp.tr_no = t1.tr_no
         and edi_fbl_shp.unldg_pt =#unldgPt#) as nilInd,
         t1.LDG_PT as brdPoint,
         t1.UNLDG_PT AS unldgPt ,
         t2.rmk as fltRmk,
         (SELECT CODE_DESC FROM MAST_CODE_DTL WHERE CODE = T2.CGO_ACFT_TYPE AND CODE_TYPE = 'CGO_ACFT_TYPE') AS paxFrtr	
         from edi_fbl T1 LEFT join FLT_OPR T2 ON t1.FLT_KEY = t2.FLT_KEY AND T1.FLT_DATE = T2.SCH_DATE	and t2.flt_type = 'D' 
         join edi_fbl_shp on edi_fbl_shp.tr_no = T1.tr_no 
         where
         T1.flt_key=#fltKey# and 
         T1.FLT_DATE=TO_DATE(#depDate#,'DDMONYY') and 
         t1.fbl_status='P' and 
         t1.unldg_pt = UPPER(#unldgPt#)
			<isNotEmpty property="loginCarrier">
			   AND (  t1.CARR_CODE = #loginCarrier#
                       OR   t1.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                       WHERE GRP_CARR_CODE  = #loginCarrier#))             
           	</isNotEmpty>
         AND ROWNUM=1
	</select>
	
	<select id="outbound_exp_flt_validateCBL"  parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		SELECT NVL(count(1),0) FROM FLT_OPR WHERE 
		<isNotEmpty property="fltKey">
			FLT_KEY = UPPER(#fltKey#)
		</isNotEmpty>
		AND SCH_DATE= TO_DATE(#flightDate#,'DDMONYY') AND FLT_TYPE='D'
   	</select>
   	
   	<select id="DLSFinalizevalidateCBL" parameterClass="cargo.cms.export.bo.CargoBookingListBO" resultClass="java.lang.String">
		select nvl(t2.dls_ind, 'N') from   flt_opr t1, flt_opr_events t2
	   	where  t1.tr_no = t2.tr_no and    t1.flt_key =  UPPER(#fltKey#)
	   	and    t1.sch_date = TO_DATE( #depDate#,'DDMONYY') and    t1.flt_type = 'D'
	</select>
	
	<select id="CBLawbList" parameterClass="cargo.cms.export.bo.CargoBookingListBO" resultClass="cargo.cms.export.bo.CargoBookingListBO">

	select edi_fbl_shp.tr_no as trNo,	
	edi_fbl_shp.doc_line_no as docLineNo,
	concat(concat(substr(edi_fbl_shp.awb_no,0,3),'-'),substr(edi_fbl_shp.awb_no,4))as awbNo,	
	edi_fbl_shp.awb_no as awbKey,
	edi_fbl_shp.org as org,		
	edi_fbl_shp.dest as dest,	
	edi_fbl.flt_key as fltKey,	
    NULL as pmanPcs,
	NULL as pmanWt,
 	TO_CHAR(edi_fbl.flt_date,'DDMONYY') as depDate,	
	edi_fbl_shp.shmpt_code as shmptCode,
	nvl(edi_fbl_shp.pcs,0) as pcs,	
	nvl(edi_fbl_shp.net_wt,0) as netWt,		
	edi_fbl_shp.man_desc as cont,			
	nvl(edi_fbl_shp.total_pcs,0) as totalPcs,		
	edi_fbl_shp.spl_code1 as splCode1,		
	edi_fbl_shp.spl_code2 as splCode2,	
	edi_fbl_shp.ldg_pt as brdPoint,     
	edi_fbl_shp.unldg_pt as unldgPt1,   
	edi_fbl_shp.nil_ind as nilInd, 		
	nvl((select sum (LOCN_PCS) from awb_inventory		where awb_inventory.awb_no = edi_fbl_shp.awb_No and awb_inventory.awb_date=edi_fbl_shp.awb_date ),0) as invPcs, 	
	nvl((select sum (LOCN_WT) from awb_inventory		where awb_inventory.awb_no = edi_fbl_shp.awb_No		and awb_inventory.awb_date=edi_fbl_shp.awb_date ),0) as invWt,
	<!-- (select decode(count(edi_fbl_uld.tr_no),0,'N','Y') 		from edi_fbl_uld where edi_fbl_uld.tr_no = edi_fbl_shp.tr_no		and edi_fbl_uld.sdoc_line_no = edi_fbl_shp.doc_line_no ) as osiRmk, -->
	decode(ORG_AGENT_NAME,null,decode(ORG_MOVT_PRTY_C,null,decode(SPL_SVC_REQ1,null,decode(SPL_SVC_REQ2,null,decode(OTHER_SVC_INFO1,null,decode(OTHER_SVC_INFO2,null,
  	decode(ORG_FLT_NO,null,decode(ORG_FLT_CARR,null,decode(ORG_FLT_DATE,null,'N','Y'),'Y'),'Y'),'Y'),'Y'),'Y'),'Y'),'Y'),'Y') as osiRmk,
  	edi_fbl_shp.ORG_AGENT_NAME orgAgentName,
  	edi_fbl_shp.ORG_MOVT_PRTY_C orgMovtPrtyC,
  	edi_fbl_shp.SPL_SVC_REQ1 splSvcReq1,
  	edi_fbl_shp.SPL_SVC_REQ2 splSvcReq2,
  	edi_fbl_shp.OTHER_SVC_INFO1 otherSvcInfo1,
  	edi_fbl_shp.OTHER_SVC_INFO2 otherSvcInfo2,
  	edi_fbl_shp.ORG_FLT_CARR orgFltCarr,
  	edi_fbl_shp.ORG_FLT_NO orgFltNo,
  	TO_CHAR(edi_fbl_shp.ORG_FLT_DATE,'DDMONYY') orgFltDate,	
    TO_CHAR(edi_fbl_shp.awb_date,'DDMONYY') AS awbDate,
     (SELECT UPPER(lgt.LIGHT_SIGNAL) FROM EXP_AWB_LIGHT_SIGNAL_DTL lgt 
     INNER JOIN EXP_AWB_LIGHT_SIGNAL_HD lhd ON lhd.FLT_KEY = lgt.FLT_KEY AND lhd.FLT_DATE = lgt.FLT_DATE AND lhd.UNLDG_PT = lgt.UNLDG_PT
     WHERE lgt.AWB_NO = edi_fbl_shp.AWB_NO 
	  AND edi_fbl_shp.AWB_DATE = lgt.AWB_DATE AND edi_fbl_shp.UNLDG_PT = lgt.UNLDG_PT AND lgt.FLT_KEY = edi_fbl.FLT_KEY
	  AND lgt.FLT_DATE = edi_fbl.FLT_DATE
	 ) as lightColor
	from edi_fbl, edi_fbl_shp,AWB A
 	where edi_fbl.fbl_status = 'P' and edi_fbl.tr_no = edi_fbl_shp.tr_no 
	and edi_fbl.flt_key =#fltKey#
	and edi_fbl.flt_date = TO_DATE( #depDate#,'DDMONYY')	
    AND edi_fbl_shp.unldg_pt =  #unldgPt# 
    AND   NOT exists(select null from exp_pmanifest_awb awb where 
    FLT_KEY=edi_fbl.flt_key and FLT_DATE=edi_fbl.flt_date AND unldg_pt = edi_fbl_shp.unldg_pt
    AND  awb.awb_no = edi_fbl_shp.awb_No 
    and  awb.awb_date = edi_fbl_shp.awb_date)
    AND edi_fbl_shp.awb_no IS NOT NULL
    AND edi_fbl_shp.AWB_NO=A.AWB_NO AND edi_fbl_shp.AWB_DATE=A.AWB_DATE
    
    <isNotEqual property="cargoType" compareValue="ALL">
		<isEqual property="cargoType" compareValue="MAIL">
			 AND A.CATALOG='TM'
		 </isEqual>
		 <isEqual property="cargoType" compareValue="CARGO">
			 AND A.CATALOG!='TM'
		 </isEqual>
	</isNotEqual>
    
 UNION
 
    select edi_fbl_shp.tr_no as trNo,	
	edi_fbl_shp.doc_line_no as docLineNo,
	concat(concat(substr(edi_fbl_shp.awb_no,0,3),'-'),substr(edi_fbl_shp.awb_no,4))as awbNo,	
	edi_fbl_shp.awb_no as awbKey,
	edi_fbl_shp.org as org,		
	edi_fbl_shp.dest as dest,	
	edi_fbl.flt_key as fltKey,	
    awb.PMAN_PCS   as pmanPcs,
	awb.PMAN_WT  as pmanWt,
	TO_CHAR(edi_fbl.flt_date,'DDMONYY') as depDate,	
	edi_fbl_shp.shmpt_code as shmptCode,
	nvl(edi_fbl_shp.pcs,0) as pcs,	
	nvl(edi_fbl_shp.net_wt,0) as netWt,		
	edi_fbl_shp.man_desc as cont,			
	nvl(edi_fbl_shp.total_pcs,0) as totalPcs,		
	edi_fbl_shp.spl_code1 as splCode1,		
	edi_fbl_shp.spl_code2 as splCode2,	
	edi_fbl_shp.ldg_pt as brdPoint,     
	edi_fbl_shp.unldg_pt as unldgPt1,   
	edi_fbl_shp.nil_ind as nilInd, 		
	nvl((select sum (LOCN_PCS) from awb_inventory		where awb_inventory.awb_no = edi_fbl_shp.awb_No and awb_inventory.awb_date=edi_fbl_shp.awb_date ),0) as invPcs, 	
	nvl((select sum (LOCN_WT) from awb_inventory		where awb_inventory.awb_no = edi_fbl_shp.awb_No		and awb_inventory.awb_date=edi_fbl_shp.awb_date ),0) as invWt,
	<!--(select decode(count(edi_fbl_uld.tr_no),0,'N','Y') 		from edi_fbl_uld where edi_fbl_uld.tr_no = edi_fbl_shp.tr_no		and edi_fbl_uld.sdoc_line_no = edi_fbl_shp.doc_line_no ) as osiRmk	, -->
	decode(ORG_AGENT_NAME,null,decode(ORG_MOVT_PRTY_C,null,decode(SPL_SVC_REQ1,null,decode(SPL_SVC_REQ2,null,decode(OTHER_SVC_INFO1,null,decode(OTHER_SVC_INFO2,null,
  	decode(ORG_FLT_NO,null,decode(ORG_FLT_CARR,null,decode(ORG_FLT_DATE,null,'N','Y'),'Y'),'Y'),'Y'),'Y'),'Y'),'Y'),'Y'),'Y') as osiRmk,
  	edi_fbl_shp.ORG_AGENT_NAME orgAgentName,
  	edi_fbl_shp.ORG_MOVT_PRTY_C orgMovtPrtyC,
  	edi_fbl_shp.SPL_SVC_REQ1 splSvcReq1,
  	edi_fbl_shp.SPL_SVC_REQ2 splSvcReq2,
  	edi_fbl_shp.OTHER_SVC_INFO1 otherSvcInfo1,
  	edi_fbl_shp.OTHER_SVC_INFO2 otherSvcInfo2,
  	edi_fbl_shp.ORG_FLT_CARR orgFltCarr,
  	edi_fbl_shp.ORG_FLT_NO orgFltNo,
  	TO_CHAR(edi_fbl_shp.ORG_FLT_DATE,'DDMONYY') orgFltDate,
	TO_CHAR(edi_fbl_shp.awb_date,'DDMONYY') AS awbDate,
	 (SELECT UPPER(lgt.LIGHT_SIGNAL) FROM EXP_AWB_LIGHT_SIGNAL_DTL lgt 
	  INNER JOIN EXP_AWB_LIGHT_SIGNAL_HD lhd ON lhd.FLT_KEY = lgt.FLT_KEY AND lhd.FLT_DATE = lgt.FLT_DATE AND lhd.UNLDG_PT = lgt.UNLDG_PT
	  WHERE lgt.AWB_NO = edi_fbl_shp.AWB_NO 
	  AND edi_fbl_shp.AWB_DATE = lgt.AWB_DATE AND edi_fbl_shp.UNLDG_PT = lgt.UNLDG_PT AND lgt.FLT_KEY = edi_fbl.FLT_KEY
	  AND lgt.FLT_DATE = edi_fbl.FLT_DATE
	  ) as lightColor
	from edi_fbl  , edi_fbl_shp ,
	exp_pmanifest_awb awb,AWB A
 	where edi_fbl.fbl_status = 'P' and edi_fbl.tr_no = edi_fbl_shp.tr_no 
	and edi_fbl.flt_key =#fltKey#
	and edi_fbl.flt_date = TO_DATE( #depDate#,'DDMONYY')	
    AND edi_fbl_shp.unldg_pt =  #unldgPt# 
	and awb.awb_no = edi_fbl_shp.awb_No 
	and  awb.FLT_KEY = edi_fbl.FLT_KEY
	AND awb.FLT_DATE = edi_fbl.FLT_DATE
    AND awb.PMAN_PCS &lt; edi_fbl_shp.PCS 
	AND AWB.FLT_KEY=edi_fbl.flt_key AND AWB.FLT_DATE= edi_fbl.flt_date
    AND AWB.unldg_pt=edi_fbl_shp.unldg_pt
    AND edi_fbl_shp.awb_no IS NOT NULL
    AND awb.AWB_NO=A.AWB_NO AND awb.AWB_DATE=A.AWB_DATE
    
    <isNotEqual property="cargoType" compareValue="ALL">
		<isEqual property="cargoType" compareValue="MAIL">
			 AND A.CATALOG='TM'
		 </isEqual>
		 <isEqual property="cargoType" compareValue="CARGO">
			 AND A.CATALOG!='TM'
		 </isEqual>
	</isNotEqual>
    
    ORDER BY dest
		
   </select>
   <select id="CBLpreULDList" parameterClass="cargo.cms.export.bo.CargoBookingListBO" resultClass="cargo.cms.export.bo.CargoBookingListBO">
   		select uld_key as uldKey from EXP_RCL_BRKDN where awb_no=#awbKey# and awb_date=TO_DATE( #awbDate#,'DDMONYY')
   </select>
   <select id="CBLuldList" parameterClass="cargo.cms.export.bo.CargoBookingListBO" resultClass="cargo.cms.export.bo.CargoBookingListBO">
		select a.uld_key AS uldKey,
		 b.dest as unldgPtUld,
		c.contr_code as cntrCode   ,
		b.AWB_NO as awbKey1, 
		to_char(a.awb_date,'DDMONYY') as awbDate1,
		nvl(b.pcs,0) as awbPcs,
		nvl(b.wt,0) as awbWt,
     c.EMPTY_FLG as emptyIndicator,
    	c.EIC_FLG  as eicIndicator,
    	c.BB_IND  as bbInd
		from  awb_inventory a,awb b	
		,uld_inventory c 
		where b.awb_no=a.awb_no 
    and a.uld_key=c.uld_key and a.awb_no=#awbKey#
    and a.awb_date=pkg_common.get_awb_date(#awbKey#,b.awb_type) 
		and (select count(flt_key) from exp_FLT_ULD d where d.uld_KEY=a.uld_key)=0
		and (c.uld_key = a.uld_key AND c.LOC_CODE is not null)
		and c. RESV_FLG ='N'
		and (c.uld_key = a.uld_key AND (c.MIX_PPK_IND='Y' OR c.ppk_ind = 'Y'))
   </select>
   
   <select id="CBLunldgList" parameterClass="cargo.cms.export.bo.CargoBookingListBO" resultClass="cargo.cms.export.bo.CargoBookingListBO">		
	 select upper(off_point) as offPoint,TO_CHAR(SCH_DATE,'DDMONYY') as depDate, upper(FLT_KEY)  as fltKey from flt_opr_seg where tr_no in 
     (select tr_no from flt_opr where flt_key = #fltKey#  and 	sch_date=to_date(#depDate#,'DDMONYY') and flt_type = 'D')   and brd_point='HKG'
   </select>
   
   <select id="cblUldquery" resultClass="cargo.cms.export.bo.CBLuldBO" parameterClass="java.util.HashMap">  
		 <![CDATA[
  		    select edi_fbl_uld.tr_no as trNo,
		           edi_fbl_uld.doc_line_no as docLineNo,
			       edi_fbl_uld.sdoc_line_no as docLine,
			       edi_fbl_uld.uld_total as uldTotal,
			       edi_fbl_uld.uld_type as uldType,
			       edi_fbl_uld.uld_no as uldNo,
			       edi_fbl_uld.uld_carr as uldCarr,
			       edi_fbl_uld.uld_key as  uldKey, 
			       edi_fbl_uld.uld_flg as uldFlg,
			       edi_fbl_uld.load_ind as loadInd,
			       edi_fbl_uld.uld_wt_c as uldWtC,
			       edi_fbl_uld.uld_wt as uldWt,
			       edi_fbl_uld.rmk as rmk
            from edi_fbl_uld
			where
		    edi_fbl_uld.tr_no = #trNo#
			and edi_fbl_uld.sdoc_line_no = #docLineNo#
		   ]]>
	</select>
	
	
      <select id="isULDOwnerSameAsCarrierCBL" parameterClass="map" resultClass="java.lang.String">
		select to_char(count(1)) from dual where (select  FUN_GET_PARENT_CARR (#ownerID#) from dual) = (select  FUN_GET_PARENT_CARR (#carrierCode#) from dual)
		</select>
     
	
	<select id="get_owner_for_uld_CBL"  parameterClass="java.lang.String" resultClass="java.lang.String">	
	    SELECT  OWNER_ID 
		  FROM uld_inventory 
		  where uld_key = #PARAM#
	</select>
	<select id="isULDContourCompatibleWithFlightCBL" parameterClass="map" resultClass="java.lang.String">
		select to_char(COUNT(1)) from uld_type_proh_acft a, uld_inventory b
		where a.uld_type = b.uld_type
		and a.contr_code = b.contr_code
		and b.uld_key = #uldKey#
		and a.acft_type = (select acft_type
						  from flt_opr
						  where flt_key = UPPER(#flightKey#) 
						  and sch_date = TO_DATE( #flightDate#,'DDMONYY') 
						  and flt_type = 'D')
	</select>
	<select id="checkUldIsLockedCBL"  parameterClass="java.util.HashMap" resultClass="java.lang.String">
		    SELECT LOCK_IND FROM EXP_CAR WHERE AWB_NO=#awbKey#  AND AWB_DATE=#awbDate#
	</select>
	<select id="checkAWBCBL"  parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		SELECT COUNT(uld_key) FROM awb_inventory where awb_no=#awbKey# and awb_date=TO_DATE(#awbDate#,'DDMONYY')
	</select>
		<!-- Cargo Booking List - Ends -->

<select id="selectedifwbaccntinfoforcar" parameterClass="java.util.HashMap"	resultClass="cargo.cms.common.ext.bo.FWBAccountInfoBO">
		<![CDATA[
			SELECT 
				ACTG_I  as accountingInfoIndicator,
				ACTG_INFO  as accountingInfo
			FROM EXP_SID_ACCT_INFO
			WHERE 
				SID_NO in (select sid_no from exp_sid where  AWB_NO= #AWB_NO#
				AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY'))
	 	]]>
	</select>
	<select id="selectedifwbshprcontactforcar" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.SIDBO">
		<![CDATA[
			SELECT 
				SHPR_CONT_N1 AS shipperContact,
				SHPR_TEL AS shipperTelephoneNumber,
				SHPR_FAX AS shipperFaxNumber,
				CSGNE_CONT_N1 AS consigneeContact,
				CSGNE_TEL AS consigneeTelephoneNumber,
				CSGNE_FAX AS consigneeFaxNumber
			FROM EXP_SID
			WHERE 
				SID_NO in (select sid_no from exp_sid where  AWB_NO= #AWB_NO#
				AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY'))
		 ]]>
	</select>
	
	
	<select id="selectedifwbshprcontactforFWB" parameterClass="java.util.HashMap" resultClass="cargo.cms.edi.ei.bo.SidInfoBO">
		<![CDATA[
			SELECT 
				SHPR_CONT_N1 AS shipperContact,
				SHPR_TEL AS shipperTelephoneNumber,
				SHPR_FAX AS shipperFaxNumber,
				CSGNE_CONT_N1 AS consigneeContact,
				CSGNE_TEL AS consigneeTelephoneNumber,
				CSGNE_FAX AS consigneeFaxNumber
			FROM EXP_SID
			WHERE 
				SID_NO in (select sid_no from exp_sid where  AWB_NO= #AWB_NO#
				AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY'))
		 ]]>
	</select>
	
	<select id="selectedifwbrateforCAR"
		parameterClass="java.util.HashMap"
		resultClass="cargo.cms.common.ext.bo.FWBRatesBO">
		SELECT NVL( RATE_PCS, 0) as ratePieces,
			NVL( RATE_GORSS_WT_C, ' ') as rateGrossWeightCode,
			NVL( RATE_GROSS_WT, 0) as rateGrossWeight,
			NVL( RATE_CLASS_C, ' ') as rateClassCode,
			NVL( RATE_COMM_N, ' ') as rateCommodityName,
			NVL( RATE_CHRGBLE_WT, 0) as rateChargeableWeight,
			NVL( RATE_CHRG_RATE, 0) as rateChargeRate,
			NVL( ROUND(RATE_CHRGBLE_WT*RATE_CHRG_RATE,2), 0) as rateChargeAmt,
      		NVL( FUN_CONVERT_CONTENT(substr(RATE_GOODS_NATR,1,20)), ' ') as rateGoodsNatureDesc ,
      		NVL( RATE_GOODS_DATA_I, ' ') as rateGoodsDataIdentifier 
      FROM EXP_SID_RATE WHERE 
			SID_NO in (select sid_no from exp_sid where  AWB_NO= #AWB_NO#
			AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY'))
	</select>
	
	<!-- BugFix:: 10433 -->
	<select id="fetchAwbPcWtForFwbRate" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT PCS, WT FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY')
	</select>
	
	<select id="FETCH_PREOFFLOAD_ULDS" parameterClass="cargo.cms.export.bo.FlightSearchBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		SELECT * FROM   (SELECT  T1.UNLDG_PT unldgpt, T3.gross_weight grossWt,T1.ULD_BT_NO as uldKey,    
		CASE WHEN (select COUNT(1) from uld_inventory where uld_key=T1.ULD_BT_NO and (PPK_IND='Y' OR MIX_PPK_IND='Y' OR HANDLING_MODE IN ('PPK'))) >0 THEN 'P'                                 
		ELSE 'B' END as pkgInd,       
   		DECODE((SELECT OFFLOAD_ULD_YN FROM EXP_OFFLOAD_ULD WHERE ULD_BT_NO= T1.ULD_BT_NO AND FLT_KEY=#flightKey#  AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY') AND ROWNUM=1),'Y','Y','N')   as poInd         
		FROM   EXP_PMANIFEST_ULD T1, EXP_CHKOUT_DTL T2,uld_inventory T3        
		WHERE  T1.FLT_KEY = T2.FLT_KEY             AND    T1.FLT_DATE = T2.FLT_DATE           
		AND    T1.ULD_BT_NO = T2.ULD_KEY             AND    T1.FLT_KEY = #flightKey#             AND    T1.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')                  
		AND    T2.CHKOUT_DATE IS NOT NULL             AND     T1.ULD_BT_NO = T3.uld_key)        
		UNION        
		( SELECT  T3.UNLDG_PT unldgpt, T5.gross_weight grossWt,t3.uld_bt_no as uldKey,      
		CASE WHEN (select COUNT(1) from uld_inventory where uld_key=t3.uld_bt_no and (PPK_IND='Y' OR MIX_PPK_IND='Y' OR HANDLING_MODE IN ('PPK'))) >0 THEN 'P'                                 
		ELSE 'B' END as pkgInd,        
		DECODE((SELECT OFFLOAD_ULD_YN FROM EXP_OFFLOAD_ULD WHERE ULD_BT_NO=t3.uld_bt_no AND FLT_KEY=#flightKey#  AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY') AND ROWNUM=1),'Y','Y','N')  as poInd         
		from  uld_inventory T5, exp_pman_tarmac_uld t3 left join exp_chkout_dtl t4 On       
		t3.flt_key = t4.flt_key             and    t3.flt_date = t4.flt_date             and  
		t3.uld_bt_no = t4.uld_key             and    t4.chkout_date is not null          
		where  t3.flt_key = #flightKey#              and    t3.flt_date = TO_DATE(#fltDate#,'DDMONYY')        
		and t3.uld_bt_no = t5.uld_key) 
    </select>
	<select id="sqlGetPpkTypeforUldTag"  parameterClass="java.lang.String" resultClass="java.lang.String">
	  		select handling_mode as ppkType from uld_inventory where uld_key=#uldKey#
	  </select>

	  
	  <!-- ##################### Added by Surendra Gollapalli Export Consignment   :   Start    #####################################-->		
	
	<select id="sqlexportconsignmentvalidateawb" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.ExportConsignmentBO">	
		
		SELECT AWB_NO as awbNo,to_char(AWB_DATE,'DDMONYY')  as awbDate
			FROM   AWB
			WHERE  AWB_NO = #awbno#
			AND    AWB_TYPE = 'E'
	</select>

	
	<select id="sqlexportconsignmentvalidateawbCount" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		SELECT count(1)
			FROM   AWB
			WHERE  AWB_NO = #AWBNO# AND AWB_DATE = TO_DATE(#AWBDATE#,'DDMONYY') 
			AND    AWB_TYPE = 'E'
	</select>
	
	<select id="sqlexportconsignmentawblist" parameterClass="map"  resultClass="cargo.cms.export.bo.ExportConsignmentBO">	
		SELECT	A.AWB_CLOSED_YN as closeStatus, 
				TO_CHAR(A.AWB_DATE, 'DDMONYY') as awbDate,
				A.AWB_NO as awbNo 
					FROM AWB A 
			WHERE	
				A.AWB_NO = #awbNo# AND A.AWB_DATE = nvl(#awbDate#,A.AWB_DATE) AND AWB_TYPE = 'E'
			ORDER BY
				A.AWB_CLOSED_YN ASC , A.AWB_DATE desc
	</select>
	
	<select id="sqlexportgetCloseUnCloseAWB"  parameterClass="map"  
		resultClass="cargo.cms.export.bo.ExportConsignmentBO">
		SELECT AWB_CLOSED_YN as closeStatus, 
			TO_CHAR(AWB_DATE, 'DDMONYY') as awbDate FROM AWB WHERE AWB_NO = #awbNo#
	</select>
				
	<select id="sqlexportconsignmentawbdetails" parameterClass="cargo.cms.export.bo.ExportConsignmentBO"  resultClass="cargo.cms.export.bo.ExportConsignmentBO">	
		SELECT T1.AWB_NO as awbNo, to_char(T1.AWB_DATE,'DDMONYY') as awbDate, 
			   T1.CATALOG as catalog,
			   (SELECT 
		          (CASE WHEN decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
		          (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = C.CARR_CODE AND (SPLCODE.SPL_CODE = c.SPL_CODE1 OR SPLCODE.SPL_CODE = c.SPL_CODE2 OR SPLCODE.SPL_CODE = c.SPL_CODE3 OR SPLCODE.SPL_CODE = c.SPL_CODE4 OR SPLCODE.SPL_CODE = c.SPL_CODE5 OR SPLCODE.SPL_CODE = c.SPL_CODE6 OR SPLCODE.SPL_CODE = c.SPL_CODE7 OR SPLCODE.SPL_CODE = c.SPL_CODE8 OR SPLCODE.SPL_CODE = c.SPL_CODE9)) > 0
		          THEN 'Q' ELSE decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END)
		          ELSE decode(c.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType	  
		       FROM AWB C WHERE  C.AWB_NO=T1.AWB_NO AND C.AWB_DATE=T1.AWB_DATE) as cargoType,
			   CONCAT(CONCAT(SUBSTR(T1.AWB_NO,0,3),'-'),SUBSTR(T1.AWB_NO,4)) as awbNoDispaly,
			   T2.HANDLER_CODE as ectHandler, T1.ORIG as orig, T1.DEST as dest,
			   T1.CONTENT as cont,
			   T1.PCS as awbPc, T1.WT as awbWt, T1.NON_PMAN_PCS as nonPreManifestPc,
			   T1.NON_PMAN_WT as nonPreManifestWt, T1.CARR_CODE as carr, 
			   T2.SHPR_NAME as shipper, T2.EDI_CSGNE_NAME as consignee,
			   T1.CC_CODE as ccode, T1.AGENT_CODE as agentCode, T1.SHPR_CODE as shipperCode,
			   T2.AGENT_NAME as  apptdAgent, 
			   T1.AWB_CLOSED_YN as closeStatus, T1.CON_CLOSED_RMK as closeRemarks, T2.RMK  as awbRemarks
		FROM   AWB T1, EXP_CAR T2
		WHERE  T1.AWB_NO = T2.AWB_NO (+)
		AND    T1.AWB_DATE = T2.AWB_DATE (+)
		AND    T1.AWB_NO = #awbNo#
		AND    T1.AWB_DATE = to_date(#awbDate#,'DDMONYY')
		and    t1.awb_type = 'E'
		
		
	</select>
	
	<select id="sqlexportconsignrclinfo" parameterClass="cargo.cms.export.bo.ExportConsignmentBO"  resultClass="cargo.cms.export.bo.RCLBO">	
	SELECT T1.RCL_NO as rclno, T1.PPK_TYPE as pkg, T1.ACCPT_MODE as type, 
		T2.TRNS_CARR_CODE as transfCarr, T1.RCL_PCS as pc, T1.RCL_WT as wt,
		0 as volAmt, T1.RTN_PCS as retPc, T1.RTN_WT as retWt, T1.STATUS as status
		FROM   EXP_RCL_HD T1, EXP_CAR T2
		WHERE  T1.AWB_NO = T2.AWB_NO
				AND    T1.AWB_DATE = T2.AWB_DATE
				AND    T1.AWB_NO = #awbNo#
				AND    T1.AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	
	<parameterMap id="manifestListMap" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="AWBNO" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="AWBDATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>
	<procedure id="sqlexportconsignmentpmanifestlist" parameterMap="manifestListMap" >
		{? = call PKG_EXP_RPT.CLOSE_CON_MANIFEST(?,?)  }
	</procedure>
		
	<select id="sqlexportconsignmanifestinfo" parameterClass="cargo.cms.export.bo.ExportConsignmentBO"  resultClass="cargo.cms.export.bo.PreManifestAWBBO">	
	SELECT FLT_TR_NO as trNo,AWB_NO as awbNo,AWB_DATE as awbDate,FLT_KEY as fltNo,to_char(FLT_DATE,'DDMONYY') as fltDate, CC_CODE as consCode,
	      EST_DATE as fltEstDate, SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),0,2)|| ':'||  SUBSTR(TRIM(TO_CHAR(NVL(EST_TIME,0),'0000')),3,4) as  fltEstTime,
	      FLT_PORT as fltPort,PMAN_PCS as preManfBulkPc,PMAN_WT as preManfBulkWt,ASSIGNED_PCS as assignedPcs,
	      ASSIGNED_WT as assignedWt,OFFLOAD_PCS as offloadPcs,OFFLOAD_WT  as offloaddWt
	FROM GT_CLOSE_CONS_MAN_LIST
	</select>


	<update id="sqlexportconsignupdatestatus" parameterClass="cargo.cms.export.bo.ExportConsignmentBO" >	
	UPDATE AWB SET
	    CON_CLOSED_YN = #closeStatus#,
    	CON_CLOSED_DATE = DECODE(#closeStatus#, 'Y', sysdate, NULL),
    	CON_CLOSED_RMK = #closeRemarks#,
		LM_USER_ID = #userId#, LM_DATE =sysdate
		WHERE  AWB_NO = #awbNo#
			AND    AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</update>		
	<update id="sqlexportconsignawbclosedupdatestatus" parameterClass="cargo.cms.export.bo.ExportConsignmentBO" >	
	UPDATE AWB SET
	    AWB_CLOSED_YN = #closeStatus#,
     	CON_CLOSED_RMK = #closeRemarks#,
     	AWB_RMK = #closeRemarks#,
		LM_USER_ID = #userId#, LM_DATE =sysdate,
		TR_TYPE ='CUAWB'			
		WHERE  AWB_NO = #awbNo#
			AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</update>
	 <select id ="sqlexportconsignmentvalidate" parameterClass="map" resultClass="java.lang.Integer">
	 select count(1) from awb_inventory where awb_no=#AWBNO# and awb_date = to_date(#AWBDATE#,'ddmonyy')
 </select>
	<!-- ##################### Added by Surendra Gollapalli Export Consignment   :   End   #####################################-->
	
	<update id="declare_bbind_exp_flt_uld_update" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteItemBO">
    	UPDATE EXP_FLT_ULD SET BB_IND = #bbInd# WHERE FLT_KEY = #fltNo# AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') AND ULD_KEY = #uldBtNo# 
    </update>
    
    <update id="updateMixSecChkInRclBrkdwn" parameterClass="map">	
    	UPDATE EXP_RCL_BRKDN SET SEC_CHECK='Y' WHERE AWB_NO=#awbNo#	and RCL_NO=#rclNum#    
    </update>
    
    <update id="updateMixSecChkInBrkDn" parameterClass="java.lang.String">	
    	UPDATE EXP_RCL_BRKDN SET SEC_CHECK='Y' WHERE RCL_NO=#rclNumber#    
    </update>
    
    <select id="fetchrclbrkdtl" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLBulkDim">
    	<![CDATA[
		select  awb_no as awbNum,to_char(AWB_DATE,'DDMONYY') as awbDate,SEC_CHECK as secChk  from EXP_RCL_BRKDN WHERE RCL_NO = #rclNum#
		]]>
	</select>
		
		<select id="fetchPreRclBrkdtl" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLBulkDim">
    	<![CDATA[
		select  awb_no as awbNum,to_char(AWB_DATE,'DDMONYY') as awbDate,dest as destination,QCP_IND as secChk from EXP_PRE_RCL_BRKDN WHERE PRE_RCL_NO = #preRclNo#
		]]>
    </select>
    
 	<select id="fetchtowOrderforAwb" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="java.lang.Integer">    	
		select COUNT(1) from exp_pmanifest_uld_awb awb,tow_order_out_dtl tow,tow_order_out ou where awb.awb_no=#awbNo# and 
      awb.uld_bt_no= tow.uld_key and tow.to_no= ou.to_no and ou.flt_key= #fltNo# and ou.flt_date= to_date(#fltDate#,'DDMONYY')
       and awb.flt_key= #fltNo# and awb.flt_date= to_date(#fltDate#,'DDMONYY') AND ou.STATUS='ISSUED'		
	</select>
	
	<select id="fetchtowOrderforuld" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="java.lang.Integer">    	
	  select COUNT(1) from exp_pmanifest_uld uld,tow_order_out_dtl tow,tow_order_out ou where  
      uld.uld_bt_no= tow.uld_key and tow.to_no= ou.to_no and ou.flt_key = #fltNo# and ou.flt_date= to_date(#fltDepDate#,'DDMONYY')
      and  uld.uld_bt_no=#uldNo# AND ou.STATUS='ISSUED'
    </select>
    
    <select id="fetchcheckOutforuld" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="java.lang.Integer">    	
	  select COUNT(1) from exp_chkout_dtl  where ULD_KEY=#uldNo# and FLT_KEY=#fltNo# and FLT_DATE=to_date(#fltDepDate#,'DDMONYY') and CHKOUT_USER is not null
    </select>
     <select id="fetchcheckinoffloadforuld" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="java.lang.Integer">    	
	  SELECT COUNT(1) FROM EXP_OFFLOAD_ULD WHERE FLT_KEY=#fltNo# AND FLT_DATE=#fltDepDate# AND ULD_BT_NO=#uldNo# AND CHECKED_IN_FLAG='Y'
    </select>
    
     <select id="fetchcheckOutforawb" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="java.lang.Integer">    	
	  select COUNT(1) from exp_pmanifest_uld_awb awb,exp_chkout_dtl chk where awb.awb_no=#awbNo# and 
	  awb.uld_bt_no= chk.uld_key and chk.flt_key= #fltNo# and chk.flt_date= to_date(#fltDate#,'DDMONYY')
	   and awb.flt_key= #fltNo# and awb.flt_date= to_date(#fltDate#,'DDMONYY') and chk.CHKOUT_USER is not null
    </select>
    
 <select id="checkcheckinoffloadExistsForPPKULD" parameterClass="cargo.cms.export.bo.PrePackCargoBO" resultClass="java.lang.Integer">    	
	  SELECT COUNT(1) FROM EXP_OFFLOAD_ULD WHERE FLT_KEY=#fltNo# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldNo# AND CHECKED_IN_FLAG='Y'
    </select>
    <insert id="insertEXPOBCCAR_AWBOwner" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
		Insert into AWB_OWNER (AWB_NO,AWB_DATE,CARR_CODE,PCS,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,BU_PCS,OFFLOAD_PCS) 
		values (#awbNo#,to_date(#awbDate#,'DDMONYY'),#carrCode#,#secTotPcs#,#secTotWt#,#user#,sysdate,#user#,sysdate,null,null)
	</insert>
	<select id="checkAWBExistsEXPOBCCAR_AWBOwner" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) 
		FROM AWB_OWNER 
		WHERE awb_no=#awbNo# 
		   AND AWB_DATE =  to_date(#awbDate#,'DDMONYY')
	</select>
	
	<select id="getUldShipmentListWithDocAccpt" parameterClass="map" resultClass="cargo.cms.export.bo.AWBBO">
		SELECT 
		AWB.AWB_NO AS awbNo,
		TO_CHAR(AWB.AWB_DATE,'DDMONYY') AS awbDate,
		AWB1.AWB_TYPE AWBTYPE,AWB1.CATALOG catalog
		FROM
		EXP_PMANIFEST_ULD ULD,EXP_PMANIFEST_ULD_AWB AWB,AWB AWB1
		WHERE 
		ULD.FLT_KEY = NVL(#fltKey#,ULD.FLT_KEY) 
		AND ULD.FLT_DATE = NVL(TO_DATE(#fltDate#,'DDMONYY'),ULD.FLT_DATE)
		AND ULD.ULD_BT_NO = AWB.ULD_BT_NO	
		AND AWB.FLT_KEY = ULD.FLT_KEY 
		AND AWB.FLT_DATE = ULD.FLT_DATE
		AND AWB.ULD_BT_NO = ULD.ULD_BT_NO
		AND AWB1.AWB_NO=AWB.AWB_NO AND AWB1.AWB_DATE=AWB.AWB_DATE
		AND ULD.ULD_BT_NO =#uldKey#		
	</select>
	
	<select id="getPmanUldFlightDetailsForAWB" parameterClass="map" resultClass="cargo.cms.export.bo.AWBBO">
		SELECT 
		uld.ULD_BT_NO uldKey,
		uld.FLT_KEY fltKey,
		to_char(uld.FLT_DATE,'DDMONYY') as fltDate
		FROM EXP_PMANIFEST_ULD uld
		JOIN EXP_PMANIFEST_ULD_AWB awb
		ON uld.FLT_KEY = awb.FLT_KEY
		AND uld.FLT_DATE = awb.FLT_DATE
		AND uld.ULD_BT_NO = awb.ULD_BT_NO	
		WHERE
		awb.AWB_NO = #awbNo#		
		AND awb.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')		
	</select>
	
	 <select id="getPmanUldDetailsForAWB" parameterClass="map" resultClass="cargo.cms.export.bo.AWBBO">
		SELECT 
		uld.ULD_BT_NO uldKey
		FROM EXP_PMANIFEST_ULD uld
		JOIN EXP_PMANIFEST_ULD_AWB awb
		ON uld.FLT_KEY = awb.FLT_KEY
		AND uld.FLT_DATE = awb.FLT_DATE
		AND uld.ULD_BT_NO = awb.ULD_BT_NO		
		WHERE
		awb.AWB_NO = #awbNo#		
		AND awb.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		AND awb.FLT_KEY = #fltKey#
		AND awb.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')			
	</select>
	
	 <select id="getPmanUldDetailsForAWBCCCode" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AWBBO">
		SELECT 
		uld.ULD_BT_NO uldKey
		FROM EXP_PMANIFEST_ULD uld
		JOIN EXP_PMANIFEST_ULD_AWB awb
		ON uld.FLT_KEY = awb.FLT_KEY
		AND uld.FLT_DATE = awb.FLT_DATE
		AND uld.ULD_BT_NO = awb.ULD_BT_NO		
		WHERE
		awb.AWB_NO = #awbNo#		
		AND awb.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		AND awb.FLT_KEY = #fltKey#
		AND awb.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')			
	</select>	
	 <select id="getInventoryDetailsForCCCode" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AWBBO">
		 select flt_key fltKey,to_char(flt_date,'DDMONYY') fltDate ,uld_key uldKey from awb_inventory where awb_no=#awbNo# and awb_date=to_date(#awbDate#,'DDMONYY') and flt_type='E' and flt_key is not null	
	</select>
	<select id="getDDTDetailsForCCCode" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AWBBO">
		   select cntg_flt_key fltKey,to_char(cntg_flt_date,'DDMONYY') fltDate,uld_key uldKey from v_ddt_dtl where flt_key=#fltKey# and flt_date=to_date(#fltDate#,'DDMONYY') and awb_no=#awbNo# and awb_date=to_date(#awbDate#,'DDMONYY')	and shp_trf_type='IF'	
	</select>
	<select id="getUldShipmentListWithDocAccptCommFunc" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AWBBO">
		SELECT DECODE((SELECT A1.AWB_TYPE FROM AWB A1 WHERE A1.AWB_NO = AWB.AWB_NO  AND A1.AWB_DATE = AWB.AWB_DATE),NULL,'N','T','NA','') AS docAccYn,
		ULDAWB.AWB_NO AS awbNo,
		TO_CHAR(ULDAWB.AWB_DATE,'DDMONYY') AS awbDate, AWB.AWB_TYPE awbType,AWB.CATALOG catalog
		FROM
		EXP_PMANIFEST_ULD ULD,EXP_PMANIFEST_ULD_AWB ULDAWB, AWB AWB
		WHERE 
		ULD.FLT_KEY = NVL(#fltKey#,ULD.FLT_KEY) AND ULDAWB.awb_no=AWB.awb_no and  ULDAWB.awb_date=AWB.awb_date
		AND ULD.FLT_DATE = NVL(TO_DATE(#fltDate#,'DDMONYY'),ULD.FLT_DATE)
		AND ULDAWB.ULD_BT_NO = ULD.ULD_BT_NO
		AND ULDAWB.FLT_KEY = ULD.FLT_KEY 
		AND ULDAWB.FLT_DATE = ULD.FLT_DATE
		AND ULD.ULD_BT_NO =#uldKey#		
	</select>
	
	<select id="getUldIFShipmentList" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AWBBO">
		SELECT DECODE((SELECT A1.AWB_TYPE FROM AWB A1 WHERE A1.AWB_NO = C.AWB_NO  AND A1.AWB_DATE = C.AWB_DATE),NULL,'N','T','NA','') AS docAccYn,
		B.AWB_NO AS awbNo,
		TO_CHAR(B.AWB_DATE,'DDMONYY') AS awbDate, C.AWB_TYPE awbType
		FROM
			EXP_PMAN_TARMAC_ULD A
            JOIN EXP_PMAN_TARMAC_ULD_AWB B on B.ULD_BT_NO = A.ULD_BT_NO AND B.FLT_KEY = A.FLT_KEY AND B.FLT_DATE = A.FLT_DATE 
            JOIN EXP_PMAN_TARMAC_AWB P on P.FLT_KEY=A.FLT_KEY AND P.FLT_DATE=A.FLT_DATE AND P.AWB_NO = B.AWB_NO AND P.UNLDG_PT = B.UNLDG_PT
            LEFT JOIN AWB C ON  C.AWB_NO = B.AWB_NO AND C.AWB_DATE = B.AWB_DATE
		WHERE 
			A.FLT_KEY = #fltKey# AND
             A.FLT_DATE = #fltDate# AND
             A.ULD_BT_NO = #uldNo#	
	</select>
	
	<select id="checkawblocked" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.AWBBO">
		select dest,awb_closed_yn as awbFrzFlg from AWB where awb_no=#AWBNO# and awb_date=to_date(#AWBDATE#,'DDMONYY')
	</select>
		<select id="checkULDExitInAWBInv" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM awb_inventory WHERE  (ULD_KEY=#uldKey# or lsp_no=#lspNum#)
		</select>
		
		<update id="updateEmptyFlagForULD" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
			UPDATE uld_inventory SET empty_flg=#emptyYN#, lm_date=sysdate, lm_user_id=#userID# WHERE ULD_KEY=#uldKey#
		</update>
		
		<update id="updateEmptyFlagForLSP" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
			UPDATE lsp_inventory SET empty_flg=#emptyYN#, lm_date=sysdate, lm_user_id=#userID# WHERE lsp_no=#lspNum#
		</update>

	<select id="sqlFetchWtsExpPmanUld" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT TRIM(TO_CHAR(TARE_WT,'9999999.99')) AS TARE_WT, TRIM(TO_CHAR(GROSS_WT,'9999999.99')) AS GROSS_WT FROM EXP_PMANIFEST_ULD WHERE 
		FLT_KEY = #flightKey# AND FLT_DATE = TO_DATE(#flightDate#, 'DDMONYY') AND ULD_BT_NO = #uldKey# AND ROWNUM = 1
	</select>
	<update id="sqlUpdateWtUldInventory" parameterClass="java.util.HashMap">
		UPDATE ULD_INVENTORY SET GROSS_WEIGHT = DECODE(#grossWt#,0,GROSS_WEIGHT,0.00,GROSS_WEIGHT,NULL,GROSS_WEIGHT,#grossWt#), 
		TARE_WEIGHT = DECODE(#tareWt#,0,TARE_WEIGHT,0.00,TARE_WEIGHT,NULL,TARE_WEIGHT,#tareWt#) WHERE ULD_KEY = #uldKey#
	</update>
	<update id="updateUldInvReadyForWarehouse" parameterClass="java.util.HashMap">
		UPDATE ULD_INVENTORY SET READY_WH = 'Y' WHERE ULD_KEY = #uldKey#
	</update>
	<update id="updatePmanReadyForWarehouse" parameterClass="java.util.HashMap">
		UPDATE EXP_PMANIFEST_ULD SET READY_WH = 'Y' WHERE FLT_KEY = #flightKey# AND FLT_DATE = #flightDate# AND ULD_BT_NO = #uldKey#
	</update>
	<select id="checkSecCheckChargeCreated"  parameterClass="cargo.cms.export.bo.JobOrderBO"  resultClass="java.lang.Integer">
		select COUNT(1) from bill_charge_dtl where awb_no=#awbNo# and awb_date=to_date(#awbDate#,'DDMONYY') and itm_code='SECJCHEK'
	</select>
	<select id="checkAllUldsAddedInRCL" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	 	SELECT COUNT(1) FROM EXP_PRE_RCL_DTL WHERE PRE_RCL_NO = #preRclNo# AND ULD_KEY NOT IN (
  		(SELECT EXP_RCL_DTL.ULD_KEY FROM EXP_RCL_HD,EXP_RCL_DTL WHERE EXP_RCL_HD.RCL_NO = EXP_RCL_DTL.RCL_NO AND EXP_RCL_HD.PRE_RCL_NO = #preRclNo# AND STATUS IN ('S','P')))
	</select>
<select id="sqlgetSHCforPPKandBulkAWB" parameterClass="java.util.HashMap" resultClass="java.lang.String">	
		SELECT RTRIM(LTRIM
  ( awb.spl_code1 ||
      NVL2( awb.spl_code2, ',' || awb.spl_code2  , null ) ||
      NVL2( awb.spl_code3, ',' || awb.spl_code3 , null ) || 
       NVL2( awb.spl_code4, ',' || awb.spl_code4 , null )|| 
        NVL2( awb.spl_code5, ',' || awb.spl_code5 , null )|| 
         NVL2( awb.spl_code6, ',' || awb.spl_code6 , null )|| 
          NVL2( awb.spl_code7, ',' || awb.spl_code7 , null )||
           NVL2( awb.spl_code8, ',' || awb.spl_code8 , null )||
            NVL2( awb.spl_code9, ',' || awb.spl_code9 , null )
      ,
    ','
  )) as shc FROM AWB WHERE 
         AWB.AWB_NO =#awbNo# AND AWB.AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	<select id="chkBUPPManPcsforFinalize" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMANIFEST_AWB WHERE AWB_NO=#AWB_NO# and AWB_DATE = to_date(#AWB_DATE#,'DDMONYY') 
		AND FLT_KEY=#FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#,'DDMONYY') AND (UNASSIGNED_BULK_PCS>0 OR UNASSIGNED_BULK_WT > 0)
	</select>
	<select id="fetchUldStateTrfTypeChkOut" parameterClass="map" resultClass="java.util.HashMap">
		select fun_get_uld_state(#uldKey#) uldState,DECODE(TRANSIT_TYPE,'QT','Y','N') qtInd from uld_inventory where uld_key=#uldKey# 
	</select>
	<update id="updateUldStateTrfTypeChkOut" parameterClass="map">
		UPDATE
			EXP_FLT_ULD
		SET
			ULD_STATE=#uldState#, QT_IND=#qtInd#,LM_USER_ID=#userId#, LM_DATE=SYSDATE , CHECK_OUT_SHC =  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM(SELECT B.CODE FROM V_EXP_ULD_SHC A,  MAST_SPL_HAND_CODE B WHERE B.CODE = A.CODE AND ULD_KEY  = #uldKey# ORDER BY PRIORITY DESC) WHERE ROWNUM &lt;=9)
			
		WHERE 
			FLT_KEY=#fltKey# AND TRUNC(FLT_DATE)=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# 
	</update>
	<delete id="deleteConfirmOffloadAwbInvData" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		DELETE FROM AWB_INVENTORY WHERE ULD_KEY = #uldBtNo# AND FLT_KEY = #fltKey# and FLT_DATE = #fltDate#
	</delete>
	<delete id="deleteDummyDataInExpPmanUldAwb" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">
		DELETE FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY = #fltKey# and FLT_DATE = to_date(#fltDate#,'DDMONYY') AND ULD_BT_NO=#dummyUld# AND AWB_NO=#awbNo# AND AWB_DATE=to_date(#awbDate#,'DDMONYY')
	</delete>
	<delete id="deleteDummyDataInExpPmanUld" parameterClass="java.util.HashMap">
		DELETE FROM EXP_PMANIFEST_ULD WHERE FLT_KEY = #flt_key# and FLT_DATE = to_date(#flt_date#,'DDMONYY') AND ULD_BT_NO=#uld_bt_no#
	</delete>
	<delete id="deleteDummyDataInExpFltUld" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">
		DELETE FROM EXP_FLT_ULD WHERE FLT_KEY = #fltKey# and FLT_DATE = #fltDate# AND ULD_KEY=#dummyUld#
	</delete>
	<select id="fetchDummyUldAwbList" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	SELECT 
		AWB_NO AS awbNo,
		TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate,
		ASSIGNED_PCS AS assignedPc,
		ASSIGNED_WT AS assignedWt,
		ULD_BT_NO AS dummyUld,
		PPK_TYPE AS type
	FROM
	EXP_PMANIFEST_ULD_AWB
	WHERE
		FLT_KEY=#fltKey# AND
		FLT_DATE=to_date(#fltDate#,'DDMONYY') AND
		ULD_BT_NO=(Select Rule_Value From Cmsrules Where Rule_Code='Dummy_H_Container') AND
		AWB_NO = #awbNo# AND
		AWB_DATE = to_date(#awbDate#,'DDMONYY') AND
		unldg_pt = #unldgpt#
	</select>
	<select id="fetchTotalAssignDetails" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	select offload_pcs as assignedPc,offload_wt as assignedWt from exp_offload_uld_awb where flt_key=#fltKey# and flt_date=to_date(#fltDate#,'DDMONYY') and uld_bt_no=#uldBtNo# and awb_no=#awbNo# and awb_date=to_date(#awbDate#,'DDMONYY')
	</select>
	<select id="getDummyUldOffloadPcsInExpOffloadUldAwb" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	Select sum(ASSIGNED_PCS) As Assignedpc,sum(ASSIGNED_Wt) As Assignedwt From Exp_Offload_Uld_Awb 
    Where Flt_Key=#fltKey# And Flt_Date=To_Date(#fltDate#,'DDMONYY') And Uld_Bt_No=(Select Rule_Value From Cmsrules Where Rule_Code='Dummy_H_Container') 
	And Awb_No=#awbNo# And Awb_Date=To_Date(#awbDate#,'DDMONYY') AND CONFIRMED_YN = 'Y' AND CONFIRMED_DATE IS NOT NULL
	</select>
	
	<select id="getDummyContrCode" parameterClass="java.lang.String" resultClass="java.lang.String">
	select CONTR_CODE from uld_type_contr where uld_type = SUBSTR(#PARAM#,0,3) AND ROWNUM=1
	</select>
	
	<select id="sqlGetChrgTrNoForRtnCgo" parameterClass="java.lang.String" resultClass="java.lang.String">
	select BILL_CHARGE_DTL_SEQ.nextval from dual
	</select>
	
	
	
	
		<select id="FETCH_ERCL_STATUS" parameterClass="java.lang.String" resultClass="java.lang.String">
		select status from exp_pre_rcl_hd where pre_rcl_no=#erclNo#
		</select>
		
	<!-- Added for SRF Generation for Return Cargo :: Ranjith  -->
	
	
	  <update id="sqlReducInventoryForReturnCargo" parameterClass="cargo.cms.export.bo.CargoStorageBO">
     UPDATE AWB_INVENTORY
     SET	LOCN_PCS = NVL(LOCN_PCS,0)-NVL(#retPc#,0),
     		LOCN_WT = NVL(LOCN_WT,0)-NVL(#retWt#,0),
     		LM_USER_ID = #userID#,
     		LM_DATE = sysdate
     WHERE SEQ_NO = #seqNo#
     </update>
     
     <delete id="sqlDeleteInventoryForReturnCargo" parameterClass="cargo.cms.export.bo.CargoStorageBO">
     DELETE FROM  AWB_INVENTORY WHERE SEQ_NO = #seqNo# and NVL(LOCN_PCS,0) = 0 AND NVL(LOCN_WT,0) = 0
     </delete>
     
       
      <update id="sqlUpdateIneventoryForReturnCargo" parameterClass="cargo.cms.export.bo.CargoStorageBO">
     UPDATE AWB_INVENTORY
     SET	LOCN_PCS = NVL(LOCN_PCS,0)+NVL(#retPc#,0),
     		LOCN_WT = NVL(LOCN_WT,0)+NVL(#retWt#,0),
     		LM_USER_ID = #userID#,
     		LM_DATE = sysdate
     WHERE  AWB_NO = #awbNo#
       AND	AWB_DATE = #awbDate#
       AND	LOC_CODE = 	#locCode#
       AND	NVL(ULD_KEY,'**')  = NVL(#uldKey#,'**')
       AND	NVL(LSP_NO,'**') = NVL(#lspNo#,'**')
       AND	NVL(RTN_NO,'**') = NVL(#returnNum#,'**')
     </update>
     
     <insert id="sqlInsertInventoryForReturnCargo" parameterClass="cargo.cms.export.bo.CargoStorageBO">
	INSERT INTO AWB_INVENTORY
	 (AWB_NO, AWB_DATE,LOC_CODE,
	 LOCN_PCS, LOCN_WT,STRG_DATE,CR_USER_ID, CR_DATE,BUP_WT,BULK_WT,
	 LM_USER_ID, LM_DATE,SEQ_NO,RTN_NO,CARR_CODE,LSP_NO,ULD_KEY)
	 VALUES
	 (#awbNo#,#awbDate#,#locCode# ,
	 #retPc#,#retWt#,sysdate, #userID#, sysdate,0,0,
	 #userID#, sysdate,AWB_INV_SEQ.NEXTVAL,#returnNum#,#carrCode#,#lspNo#,#uldKey#)
	</insert>
	
	
	
	<update id="sqlUpdateInventoryForReturnCargoSRF" parameterClass="cargo.cms.imprt.bo.IssueConsSrfInfoBO">
		UPDATE AWB_INVENTORY inv 
		SET inv.SRF_NO = #srfNo# ,
		    inv.LM_USER_ID = #crUserId# , 
		    inv.LM_DATE = sysdate
		WHERE inv.AWB_NO = #awbNo# 
		  AND inv.AWB_DATE =  TO_DATE(#awbDate#,'DDMONYY')
		  AND inv.RTN_NO = #returnNo#
		  AND exists (select null from awb where  awb_no = inv.awb_no and awb_date = inv.awb_date and  awb_type = 'E')  
	</update>
	
	 <select  id="sqlGetReturnCargoInventory" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.CargoStorageBO">
	SELECT AWB_NO awbNo, 
		   to_char(AWB_DATE,'DDMONYY') awbDate,
		   CARR_CODE carrCode,
		   LOC_CODE locCode,
		   LOCN_PCS retPc, 
		   LOCN_WT retWt,
	  	   SEQ_NO seqNo,
	  	   RTN_NO rtnNo,
	  	   LSP_NO lspNo,
	  	   ULD_KEY  uldKey 
	 FROM  AWB_INVENTORY
	 WHERE RTN_NO = #rtnNo#
	</select>
	
	  
     <update id="sqlUpdateIneventoryForReturnCargoDelete" parameterClass="cargo.cms.export.bo.CargoStorageBO">
     UPDATE AWB_INVENTORY
     SET	LOCN_PCS = NVL(LOCN_PCS,0)+NVL(#retPc#,0),
     		LOCN_WT = NVL(LOCN_WT,0)+NVL(#retWt#,0),
     		LM_USER_ID = #userID#,
     		LM_DATE = sysdate
     WHERE  AWB_NO = #awbNo#
       AND	AWB_DATE = #awbDate#
       AND	LOC_CODE = 	#locCode#
       AND	NVL(ULD_KEY,'**')  = NVL(#uldKey#,'**')
       AND	NVL(LSP_NO,'**') = NVL(#lspNo#,'**')
       AND	RTN_NO is null
     </update>
     
      <insert id="sqlInsertInventoryForReturnCargoDelete" parameterClass="cargo.cms.export.bo.CargoStorageBO">
		INSERT INTO AWB_INVENTORY
	 (AWB_NO, AWB_DATE,LOC_CODE,
	 LOCN_PCS, LOCN_WT,STRG_DATE,CR_USER_ID, CR_DATE,BUP_WT,BULK_WT,
	 LM_USER_ID, LM_DATE,SEQ_NO,CARR_CODE,LSP_NO,ULD_KEY)
	 VALUES
	 (#awbNo#,#awbDate#,#locCode# ,
	 #retPc#,#retWt#,sysdate, #userID#, sysdate,0,0,
	 #userID#, sysdate,AWB_INV_SEQ.NEXTVAL,#carrCode#,#lspNo#,#uldKey#)
	</insert>
	
	 <delete id="deleteReturnCargoInventory" parameterClass="java.lang.String">
   		delete from awb_inventory where seq_no = #seqNo#
     </delete>
	
	
	<select id="find_awb_inv_dtls_wit_td_exp" parameterClass="java.util.HashMap" 
		resultClass="cargo.cms.imprt.bo.ImpXomBO">
		SELECT 
			AWB_NO as awbNo, TO_CHAR(AWB_DATE, 'DDMONYY') as awbDate, FLT_KEY as fltKey, 
			TO_CHAR(FLT_DATE, 'DDMONYY') as fltDate, ULD_KEY as uldKey, LOC_CODE as locn, 
			LOCN_PCS as locnPc, LOCN_WT as locnWt, CARR_CODE as carrCode, SRF_NO as srfNo, 
			LSP_NO as lspNo, SEQ_NO as seqNo, CC_CODE as ccCode, FLT_TYPE as fltType, RTN_NO rtnNo 
		FROM 
			AWB_INVENTORY 
		WHERE 
			AWB_NO=#awbNo# 
			AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
			AND DLV_YN='Y' AND SRF_NO=#srfNo# 
			AND LOC_CODE=#locCode#
			
			<!--  commented by srinivas for bug fix for inserting duplicate record --> 
			<!--<isNotEmpty prepend="AND" property="lspNo">
				LSP_NO=#lspNo#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="uldNo">
				ULD_KEY=#uldNo#
			</isNotEmpty>
			<isEmpty prepend="AND" property="lspNo">
				<isEmpty property="uldNo">
				LSP_NO IS NULL AND ULD_KEY IS NULL
				</isEmpty>
			</isEmpty>-->
			</select>
			
		<select id="find_awb_inv_dtls_witot_td_exp" parameterClass="java.util.HashMap" 
		resultClass="cargo.cms.imprt.bo.ImpXomBO">
		SELECT 
			AWB_NO as awbNo, TO_CHAR(AWB_DATE, 'DDMONYY') as awbDate, FLT_KEY as fltKey, 
			TO_CHAR(FLT_DATE, 'DDMONYY') as fltDate, ULD_KEY as uldKey, LOC_CODE as locn, 
			LOCN_PCS as locnPc, LOCN_WT as locnWt, CARR_CODE as carrCode, SRF_NO as srfNo, 
			LSP_NO as lspNo, SEQ_NO as seqNo, CC_CODE as ccCode, FLT_TYPE as fltType ,RTN_NO rtnNo
		FROM 
			AWB_INVENTORY 
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')  AND DLV_YN='N' AND SRF_NO=#srfNo# 
			<!-- AND LOC_CODE!=#locCode# --> 
			<!--<isNotEmpty prepend="AND" property="lspNo">
				LSP_NO=#lspNo#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="uldNo">
				ULD_KEY=#uldNo#
			</isNotEmpty>
			<isEmpty prepend="AND" property="lspNo">
				<isEmpty property="uldNo">
				LSP_NO IS NULL AND ULD_KEY IS NULL
				</isEmpty>
			</isEmpty>-->
	</select>
	
	<select id="findAwbInvSeqNoByLocCodeExp" resultClass="java.lang.String" parameterClass="java.util.HashMap">
		SELECT 
			SEQ_NO 
		FROM 
			AWB_INVENTORY 
		WHERE 
			AWB_NO=#awbNo# 
			AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
			AND DLV_YN='N' 
			AND SRF_NO=#srfNo# 
			AND LOC_CODE=#locCode# 
			<isNotEmpty prepend="AND" property="lspNo">
				LSP_NO=#lspNo#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="uldNo">
				ULD_KEY=#uldNo#
			</isNotEmpty>
			<isEmpty prepend="AND" property="lspNo">
				<isEmpty property="uldNo">
				LSP_NO IS NULL AND ULD_KEY IS NULL
				</isEmpty>
			</isEmpty>
	</select>
	
	<select id="findAwbInvlocPcsByLocCodeExp" resultClass="java.lang.String" parameterClass="java.util.HashMap">
		SELECT 
			LOCN_PCS 
		FROM 
			AWB_INVENTORY 
		WHERE 
			AWB_NO=#awbNo# 
			AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
			AND DLV_YN='N' 
			AND SRF_NO=#srfNo# 
			AND LOC_CODE=#locCode# 
			<isNotEmpty prepend="AND" property="lspNo">
				LSP_NO=#lspNo#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="uldNo">
				ULD_KEY=#uldNo#
			</isNotEmpty>
			<isEmpty prepend="AND" property="lspNo">
				<isEmpty property="uldNo">
				LSP_NO IS NULL AND ULD_KEY IS NULL
				</isEmpty>
			</isEmpty>
	</select>
	
	<update id="update_srf_dlv_flt_exp" parameterClass="java.util.HashMap">	
		UPDATE 
			IMP_SRF_FLT 
		SET 
			DLV_PCS = NVL(DLV_PCS, 0) + #dlvPc#, 
			DLV_WT = NVL(DLV_WT, 0) + #dlvWt#, 
			LM_USER_ID=#userID#, 
			LM_DATE=SYSDATE 
		WHERE 
			SRF_NO=#srfNo# 
			<isNotEmpty property="refCdifNo">
				AND FLT_KEY=#refCdifNo# 
			</isNotEmpty>
	</update>
	
	<select id="imp_maintainCdif_query_exp"  parameterClass="cargo.cms.imprt.bo.CDIFBO"  resultClass="cargo.cms.imprt.bo.CDIFSearchBO">
		SELECT
			A.AWB_NO awbNo,
			SUBSTR(A.AWB_NO,1,3)  awbNoPrefix , 
			SUBSTR(A.AWB_NO,4)  awbNoSuffix , 
			SUBSTR(A.AWB_NO,1,3)||'-'||SUBSTR(A.AWB_NO,4) as awbNoDisp ,
			TO_CHAR(A.AWB_DATE, 'DDMONYY') awbDate,
			A.SRF_NO srfNo,
			SUBSTR(A.SRF_NO,1,8)  srfNoPrefix , 
			SUBSTR(A.SRF_NO,1,8) as srfNoDisp , 
			A.CDIF_NO cdifNo,
			SUBSTR(A.CDIF_NO,1,8)  cdifNoPrefix , 
			SUBSTR(A.CDIF_NO,9)  cdifNoSuffix , 
			SUBSTR(A.CDIF_NO,1,8)||'-'||SUBSTR(A.CDIF_NO,9) as cdifNoDisp 
		FROM IMP_CDIF A 
		WHERE 1 = 1
			<isNotEmpty property="cdifNo">
				AND A.CDIF_NO	 = #cdifNo# 		
			</isNotEmpty>
	
			<isNotEmpty property="srfNo">		   
				AND A.SRF_NO   = #srfNo#
			</isNotEmpty>	
	</select>
	
	
	<select id="revertDlvFetchAwbInvDtlsExp" parameterClass="java.util.HashMap" resultClass="cargo.cms.imprt.bo.CapSRFDlvByLocDtlsBO">
		SELECT 
			SRF_NO as srfNo, AWB_NO as awbNo, TO_CHAR(AWB_DATE, 'DDMONYY') as awbDate, CARR_CODE as carrCode, CATALOG as catalog, CC_CODE as ccCode, 
			SCH_COLL_DATE as schCollDate, ULD_KEY as uldKey, LSP_NO as lspNo, LOC_CODE as locCode, LOCN_PCS as locPc, LOCN_WT as locWt, 
			TO_CHAR(FLT_DATE, 'DDMONYY') as fltDate, FLT_KEY as fltNo, DAM_IND as damYN, REF_RMK as refRmk, CDIF_NO as cdifNo, SEQ_NO as seqNo 
		FROM 
			AWB_INVENTORY 
		WHERE 
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')  AND SRF_NO = #srfNo#
	</select>
	
	<delete id="sqlQueryDeleteReturnUldInventory" parameterClass="cargo.cms.export.bo.CargoStorageBO">
   	 	DELETE FROM AWB_INVENTORY WHERE ULD_KEY = #uldKey#
    </delete>
    <update id="sqlQueryRemoveReturnUldInventory" parameterClass="cargo.cms.export.bo.CargoStorageBO">
		UPDATE ULD_INVENTORY SET 
			LM_USER_ID=#userID#, 
			LM_DATE=SYSDATE,
			LOC_CODE=NULL,
			CONTR_CODE=null,
			GEN_RMK	 = null, 
			RESV_RMK = null, 
			DAM_RMK	 = null,
			EMPTY_FLG = 'Y',
			EIC_FLG = 'N',
			AGENT_ID = NULL,
			OWNED_INV = 'N',
			BASE_PLT = null,
			EIC_TYPE = null,
			ASV_INV = 'N'
		WHERE ULD_KEY=#uldKey# 
	</update>
	
	   <update id="sqlUpdateReturnConfirmInd" parameterClass="cargo.cms.export.bo.CargoStorageBO">
		UPDATE EXP_RTN_HD
		 SET CONFIRM_YN = 'Y',
			LM_USER_ID=#userID#, 
			LM_DATE=SYSDATE
		WHERE RTN_NO=#rtnNo# 
	</update>
	
	<select id="getAgentAndCatalogForAwb" parameterClass="cargo.cms.imprt.bo.IssueConsSrfInfoBO" resultClass="cargo.cms.export.bo.AWBBO">
		select AGENT_CODE agentId , CATALOG catalog from awb where awb_no = #awbNo# and awb_date = to_date(#awbDate#,'DDMONYY')
	</select>
	
	<select id="getCpctCreditForReturnCargo" parameterClass="map" resultClass="java.lang.String" >
		SELECT sum(CR_BAL) value
		FROM CUST_AGENT_CREDIT 
		WHERE 
			CUST_NO=UPPER(#CUST_NO#) 
			AND CR_TYPE= decode(UPPER(#CATALOG#),'IG','IMPORT_GEN','EG','EXPORT_GEN','IO','IMPORT_OBC','EO','EXPORT_OBC','')
			AND (TO_DATE(TO_CHAR(CR_EFF_DATE_FROM,'DDMONYY'),'DDMONYY') 
			&lt;= TO_DATE(TO_CHAR(SYSDATE,'DDMONYY'),'DDMONYY') AND TO_DATE(TO_CHAR(CR_EFF_DATE_TO,'DDMONYY'),'DDMONYY') 
			&gt;= TO_DATE(TO_CHAR(SYSDATE,'DDMONYY'),'DDMONYY') )
			AND nvl(upper(Status),'**') &lt;&gt; 'VOID'
	</select>
	
	
	<select id="getChargeStatusForReturnCargo" parameterClass="cargo.cms.export.bo.CargoStorageBO" resultClass="java.lang.Integer">
		SELECT count(1) FROM BILL_CHARGE_DTL bill
							 WHERE	
							 NVL(bill.AWB_NO,'*') = NVL(#awbNo#,'*') 
							 and NVL(bill.AWB_DATE,'12JAN2000') = NVL(#awbDate#,'12JAN2000') 
							 and NVL(bill.ULD_KEY,'*') = NVL(#uldKey#,'*') 
							 AND bill.STATUS = 'PENDING'
	</select>
	
	<insert id="createInvoiceForReturnCargo" parameterClass="map">
		INSERT INTO BILL_INV_HD (
			INV_NO,
			INV_DATE,				
			INV_TYPE,          
			CUST_NO,
			CUST_NAME,        
			CHARGE_AMT,
			CR_USER_ID,
			CR_DATE,            
			LM_USER_ID,         
			LM_DATE) 
		VALUES ( 
            #INV_NO#,
            sysdate,
            'CRD',
            #CUST_NO#,
			#CUST_NAME#,
            #CHRG_AMT#,
            #CR_USER_ID#,
            sysdate,
            #LM_USER_ID#,
            sysdate)
	</insert>
	
	<insert id="createInvoiceDtlForReturnCargo" parameterClass="map">
		INSERT INTO BILL_INV_DTL (
			INV_NO,
			DOC_LINE_NO,				
			CHRG_TR_NO,				
			ITM_CODE,				
			ITM_CODE_SFX,        
			REV_IND,          
			CASH_IND,          
			CHARGE_AMT,
			CR_USER_ID,
			CR_DATE,            
			LM_USER_ID,         
			LM_DATE) 
		SELECT 
			#INV_NO#,
			1,
			TR_NO,
			ITM_CODE,
			ITM_CODE_SFX,
			REV_IND,
			CASH_IND,
			CHRG_AMT,
			CR_USER_ID,
			SYSDATE,
			LM_USER_ID,
			SYSDATE 
			FROM 
			BILL_CHARGE_DTl
			WHERE AWB_NO = #AWB_NO#
			  AND AWB_DATE = #AWB_DATE#
			  AND ITM_CODE = 'SCEXPO'
			  AND SRF_NO = #SRF_NO#
			  AND NVL(VOID_IND,'N') = 'N'
	</insert>
	
	
	<select id="geStorageCharges" parameterClass="cargo.cms.imprt.bo.IssueConsSrfInfoBO" resultClass="java.lang.String">
		select  pkg_exp_billing.get_return_storage_amt(#returnNo#,NULL)strgAmt from dual
	</select>
	
	<select id="geAdvanceWaiveCharges" parameterClass="cargo.cms.imprt.bo.IssueConsSrfInfoBO" resultClass="java.util.HashMap">
	SELECT TO_CHAR(WAVR_AMT)  WAVR_AMT, CR_USER_ID CR_USER_ID, TO_CHAR(CR_DATE ,'DDMONYY HH24:MI:SS') CR_DATE , WAVR_FORM_NO WAVR_FORM_NO , WAVR_RMK WAVR_RMK  FROM bill_waive_charge bill
							 WHERE	
							 NVL(bill.AWB_NO,'*') = NVL(#awbNo#,'*') 
							 and NVL(bill.AWB_DATE,'12JAN2000') = NVL(#awbDate#,'12JAN2000') 
							 and bill.ITM_CODE = 'SCEXPO'
							 and NVL(CHARGE_CREATED,'N') = 'N'
	</select>
	
	<update id="sqlUpdateReturnWaiveCharges" parameterClass="java.util.HashMap">
	UPDATE  bill_waive_charge 
			set CHARGE_CREATED = 'Y'
	where awb_no = #AWB_NO#
	and awb_date = #AWB_DATE#
	and ITM_CODE =  'SCEXPO'
	</update>
	
	<select id="getReturnTotalCharges" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	SELECT SUM(CHRG_AMT) FROM BILL_CHARGE_DTL bill
				LEFT JOIN IMP_SRF S ON S.SRF_NO=bill.SRF_NO
			  WHERE NVL(bill.AWB_NO,'*') = NVL(#awbNo#,'*') 
			  and NVL(bill.AWB_DATE,'12JAN2000') = NVL(#awbDate#,'12JAN2000') 
			  AND bill.STATUS='PENDING'
			  AND bill.VOID_IND='N'
			  AND NVL(S.SRF_EXPY_DATE,sysdate) >= sysdate
	</select>
	
	<select id="getReturnTotalChargesList" parameterClass="java.util.HashMap" resultClass="cargo.cms.imprt.bo.IssueConsSrfInfoBO">
	SELECT TR_NO chrgTrNo, 
		   CHRG_AMT chrgAmt, 
		   ITM_CODE itmCode,
		   ITM_DESC itmCodeSfx, 
		   REV_IND revInd 
		   		FROM BILL_CHARGE_DTL bill
			  LEFT JOIN IMP_SRF S ON S.SRF_NO=bill.SRF_NO
			  WHERE NVL(bill.AWB_NO,'*') = NVL(#awbNo#,'*') 
			  and NVL(bill.AWB_DATE,'12JAN2000') = NVL(#awbDate#,'12JAN2000') 
			  AND bill.STATUS='PENDING'
			  AND bill.VOID_IND='N'
			  AND NVL(S.SRF_EXPY_DATE,sysdate) >= sysdate
	</select>
	
	
	<update id="payReturnCargoCharges" parameterClass="cargo.cms.imprt.bo.IssueConsSrfInfoBO">
	UPDATE  bill_charge_dtl
	set paid_amt_credit = #paidAmtCredit#,
		STATUS = 'PAID',
		paid_amt_dm = #paidAmtDm#
	where tr_no = #chrgTrNo#	
	</update>
	
	<update id="updateReturnRclStrgCharge" parameterClass="cargo.cms.export.bo.CargoStorageBO">
	UPDATE  EXP_RTN_RCL
	set STRG_AMT = NVL(#storageAmt#,0)
		where RTN_NO =  #rtnNo#
		and RCL_NO = #rclNo# 
	</update>
	
	<select id="sqlGetUldReleaseAgentNo" parameterClass="java.lang.String" resultClass="java.lang.String">
		select agent_cust_no
	          from   uld_rel_hd
	          where  tr_no = (select max (to_number(b.tr_no))
	                                    from   uld_rel_dtl b
	                                    where  b.uld_key = #uldKey#)   
	</select>
	
	<select id="sqlGetOrgOwnedInvForUld" parameterClass="cargo.cms.export.bo.CargoStorageBO" resultClass="java.lang.String">
    	   select decode(count(case when NVL(org_owned_inv,'N') = 'Y' then 1 else null end), 0 ,'N','Y') org_owned_inv
	            from   service_err_log
	            where  tr_no in (SELECT RCL_NO from EXP_RTN_RCL where RTN_NO = #rtnNo#)  and    uld_key = #uldKey#
    </select>
    
     <update id="sqlUpdateReturnCargoUldInv" parameterClass="cargo.cms.export.bo.CargoStorageBO">
  	 update uld_inventory
         set cfm_status = decode (#releaseInv#,'Y', 'CONFIRMED','RELEASED'),
                            carr_code = null,
                            flt_no = null,
                            flt_date = null,
                            flt_key = null,
                            flt_type = null,
                            agent_inv = decode (#releaseInv#, 'Y','N', 'Y'),
                            owned_inv = decode (#releaseInv#, 'Y', 'Y', 'N'),                          
                            loc_code = decode (#releaseInv#,'Y', loc_code,null),
                            contr_code = null,
                            gross_weight = 0,
                            tare_weight = 0,
                            lm_user_id = #userID#,
                            lm_date = sysdate,
                            empty_flg = 'Y',
                            agent_id = decode (#releaseInv#,'Y', null,#releaseAgent#),
                            PPK_IND = 'N',
                            MIX_PPK_IND = 'N',
                            first_wt = 0,
                            ULDENTRY_MSG_RCVD_YN = decode (#releaseInv#,'Y', ULDENTRY_MSG_RCVD_YN,'N')
                            <isEqual property="releaseInv" compareValue="Y">		
 								,ENTRY_TIME = sysdate
							</isEqual>
                        where  uld_key = #uldKey#
   </update>
   
   
	<update id="sqlRegenerateReturnCargoSrf" parameterClass="map">
	UPDATE  EXP_RTN_HD
	set SRF_NO = NVL(#NEW_SRF_NO#,0)
		where SRF_NO =  NVL(#OLD_SRF_NO#,'***')
	</update>
	
	
	<delete id="deleteExpUldAwbOnConfirm" parameterClass="cargo.cms.export.bo.CargoStorageBO">
  	 delete from exp_uld_awb where  rcl_no = #rclNo# and  uld_key = #uldKey#	 
  	</delete>
	
		<!-- Added for SRF Generation for Return Cargo :: Ranjith  -->
	
	
	<select id="checkUldIsExistOrNotInExpPmanUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
	</select>
	<delete id="deleteOffloadUldInExpPmanUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
    DELETE FROM EXP_PMANIFEST_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
    </delete>
    <update id="updateOffloadUldInExpOffloadUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	UPDATE EXP_OFFLOAD_ULD SET CONFIRMED_YN='Y', CONFIRMED_RMK=#remark#,LM_USER_ID = #user#,LM_DATE = SYSDATE,TR_TYPE=NVL(#trtype#,'COFFC') WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
	</update>
	<update id="updateGrossandTareDummyWts" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	update exp_pmanifest_uld set GROSS_WT=#grossWt#,TARE_WT=#tareWt# where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#dummyUld#
	</update>
	<update id="updateGrossNetandTareDummyWts" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	update exp_flt_uld set GROSS_WT=#grossWt#,TARE_WT=#tareWt#,NET_WT=#netWt# where flt_key=#fltKey# and flt_date=#fltDate# and uld_key=#dummyUld#
	</update>
	<update id="updateGrossNetFirstandTareDummyWts" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	update uld_inventory set GROSS_WEIGHT=#grossWt#,TARE_WEIGHT=#tareWt#,FIRST_WT=#grossWt#,SECOND_WT=#grossWt# where uld_key=#dummyUld#
	</update>
	<update id="updateOfldDummyChkOutULDDetails" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	UPDATE EXP_CHKOUT_DTL SET CHK_FLG='Y',chkout_date = to_char(sysdate,'DDMONYY'),chkout_time = to_char(sysdate, 'HH24MI'),CHKOUT_USER=#user# WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_KEY=#dummyUld#
	</update>
	<select id="CHECK_DEL_OFFLD_LSP_DATA_IN_AWB_INV" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="java.lang.Integer">
	select COUNT(1) from awb_inventory where lsp_no=#lspNo#
	</select>
	<select id="CHECK_DEL_OFFLD_DATA_ULD_IN_AWB_INV" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="java.lang.Integer">
	select COUNT(1) from awb_inventory where ULD_KEY=#uldBtNo#
	</select>
	<update id="updateDelEmptyIndLspInv" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	update lsp_inventory set EMPTY_FLG=#lspInd# where lsp_NO=#lspNo#
	</update>
	<update id="updateDelEmptyIndUldInv" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	update uld_inventory set EMPTY_FLG=#uldInd# where uld_key=#uldBtNo#
	</update>
	<update id="updateDelGrossTarewtInExpTarmacUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	update exp_pman_tarmac_uld set gross_wt=#grossWt#,tare_wt=#tareWt# where uld_bt_no=#uldBtNo# and flt_key=#fltKey# and flt_date=#fltDate#
	</update>
	<update id="updateDelGrossTarewtInExpFltUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	update exp_flt_uld set gross_wt=#grossWt#,tare_wt=#tareWt#,net_wt=#grossWt#-#tareWt#,bb_ind=#bbInd# where uld_key=#uldBtNo# and flt_key=#fltKey# and flt_date=#fltDate#
	</update>
	<update id="updateSecThirdWtInUldInv" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	update uld_inventory set FIRST_WT=NVL(FIRST_WT,#secondWt#),second_wt=#secondWt#,third_wt=#thirdWt#,GROSS_WEIGHT=#grossWt#,OFLD_FLG='N',FINAL_WEIGHT=#finalWt# where uld_key=#uldBtNo#
	</update>
	<update id="updateFltDetailsInULD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	update uld_inventory set flt_type='E',flt_key=#fltKey#, flt_date=#fltDate# where uld_key=#uldBtNo#
	</update>
	<select id="getDummyDataInExpPmanUld" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	select count(1) from exp_pmanifest_uld_awb where flt_key=#flt_key# and flt_date=#flt_date# and uld_bt_no=#uld_bt_no#
	</select>
	<select id="fetchTransShipStstus" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	select count(1) from awb where awb_no =#awbNo# and awb_date=#awbDate# and catalog='TM'
	</select>
	<select id="fetchConfirmOffloadFSUList" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	SELECT
                              FLT_KEY AS fltKey,
                              TO_CHAR(FLT_DATE,'DDMONYY') AS fltDate,
                              AWB_NO AS awbNo,
                              TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate,
                              (CASE WHEN OFFLOAD_PCS > ASSIGNED_PCS THEN ASSIGNED_PCS
                              ELSE OFFLOAD_PCS
                              END) AS assignedPcs
                              FROM EXP_OFFLOAD_ULD_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND CONFIRMED_YN='Y'
	</select>
	<select id="sumofdummyuld_netwt" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="java.lang.String">
	select sum(assigned_wt) from exp_pmanifest_uld_awb where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#dummyUld#
	</select>
	<!-- Added for SRF Generation for Return Cargo :: Ranjith  -->
	<update id="sqlUpdateUldInvWarehouseBuildup" parameterClass="java.util.HashMap">
		UPDATE ULD_INVENTORY SET PPK_IND='N', MIX_PPK_IND = 'N' WHERE ULD_KEY=#uldKey#
	</update>
  <update id="sqlUpdateExpPmanifestUldAmendUldNo" parameterClass="java.util.HashMap">
		UPDATE EXP_PMANIFEST_ULD SET BLDUP_COMPLETE = 'N', BLDUP_COMPLETE_DATE = NULL, BLDUP_COMPLETE_USER_ID = NULL,READY_DISP = 'N',
		READY_DISP_DATE = NULL,READY_DISP_TIME = NULL
		WHERE FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') AND ULD_BT_NO = #uldKey#
	</update>
	<update id="updateExpPmanAwbPpk" parameterClass="java.util.HashMap">
		UPDATE EXP_PMANIFEST_AWB 
		SET 
			BULK_PCS=#BULK_PCS#, BULK_WT=#BULK_WT#, PMAN_PCS=#PMAN_PCS#, PMAN_WT=#PMAN_WT#, UNASSIGNED_BULK_PCS=#UNASSIGNED_BULK_PCS#, 
			UNASSIGNED_BULK_WT=#UNASSIGNED_BULK_WT#,LM_USER_ID=#LM_USER_ID#, LM_DATE=SYSDATE
		WHERE 
			FLT_KEY=#FLT_KEY# AND FLT_DATE=TO_DATE(#FLT_DATE#,'DDMONYY') AND AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY') AND UNLDG_PT=#UNLDG_PT#
	</update>
	<select id="sqlUpdateULDCOInTowOutChkOut" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) from TOW_ORDER_OUT_DTL WHERE ULD_KEY=#uldKey# AND TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT WHERE STATUS = 'ISSUED' AND FLT_KEY=#flightKey# AND FLT_DATE = TO_DATE(#flightDate#,'DDMONYY'))
		AND REMOVE_DATE IS NULL
	</select>
	<update id="sqlUpdateULDStatusCOInTowOut" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		<![CDATA[
			UPDATE TOW_ORDER_OUT  
			SET STATUS = 'COMPLETE', 
			LM_DATE = SYSDATE, LM_USER_ID = #currentUserID# 
			WHERE STATUS = 'ISSUED' 
			AND FLT_KEY=#flightKey# AND FLT_DATE = TO_DATE(#flightDate#,'DDMONYY')
			AND TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT_DTL WHERE ULD_KEY = #uldKey#)
		]]>
	</update>
	<!-- BUG NO :: 3967 :: RANJITH :: 09MAR12  -->
	<select id="isRclPcsGreaterThanCarPcs" parameterClass="cargo.cms.export.bo.IssueRCLBulkDim" resultClass="java.lang.Integer">
	<![CDATA[
		SELECT COUNT(1) from AWB WHERE AWB_NO = #validateAwbNo# AND AWB_DATE = (pkg_common.get_awb_date(#awbNo#,'E')) and (PCS < (NVL(RCL_PCS,0) + NVL(#pieces#,0)) OR WT < (NVL(RCL_WT,0) + NVL(#netWeight#,0))) AND NVL(EXPCAR_YN,'N') = 'Y'
		]]>
	</select>
	
	<!-- BUG NO :: 3967 :: RANJITH :: 09MAR12 :::::: -->
	<select id="findGrossWtInExpTarmacUld" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="java.lang.String">
	select gross_wt from exp_pman_tarmac_uld WHERE ULD_BT_NO=#uldNo# and flt_key=#fltKey# and flt_date=#fltEstDate#
	</select>
	<select id="sqlCheckULDUldChkOutTowOut" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) from TOW_ORDER_OUT_DTL WHERE TO_NO IN (
		SELECT TO_NO from TOW_ORDER_OUT_DTL 
		WHERE ULD_KEY=#uldKey# AND TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT WHERE STATUS = 'ISSUED' AND FLT_KEY=#flightKey# AND FLT_DATE = TO_DATE(#flightDate#,'DDMONYY')))
		AND REMOVE_DATE IS NULL 
	</select>
	<update id="sqlUpdateULDStatusUldChkOutTowOut" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO">
		<![CDATA[
			UPDATE TOW_ORDER_OUT  
			SET STATUS = 'COMPLETE', 
			LM_DATE = SYSDATE, LM_USER_ID = #currentUserID# 
			WHERE STATUS = 'ISSUED' 
			AND TO_NO IN (SELECT TO_NO FROM TOW_ORDER_OUT_DTL WHERE ULD_KEY = #uldKey#)
			AND FLT_KEY=#flightKey# AND FLT_DATE = TO_DATE(#flightDate#,'DDMONYY')
		]]>
	</update>
	<select id="getPmanAwbEndorseSplCodesforFBL" parameterClass="cargo.cms.export.bo.PreManifestFBLDetailsBO" resultClass="java.lang.String">
   		SELECT STRAGG(STRINGDELIM(splCode,',')) from
   		(SELECT CODE AS splCode
		FROM AWB A
		LEFT JOIN MAST_SPL_HAND_CODE M
		ON (M.CODE =A.SPL_CODE1	OR M.CODE =A.SPL_CODE2 OR M.CODE =A.SPL_CODE3 OR M.CODE =A.SPL_CODE4
		OR M.CODE =A.SPL_CODE5 	OR M.CODE =A.SPL_CODE6 OR M.CODE =A.SPL_CODE7 OR M.CODE =A.SPL_CODE8
		OR M.CODE =A.SPL_CODE9)	AND M.ENDR_PMAN = 'Y' WHERE A.AWB_NO =#awbNo# AND A.AWB_DATE =TO_DATE(#awbDate#,'DDMONYY')
		UNION
		SELECT CODE AS splCode
		FROM EDI_FBL_SHP A
		LEFT JOIN MAST_SPL_HAND_CODE M
		ON (M.CODE =A.SPL_CODE1	OR M.CODE =A.SPL_CODE2)	AND M.ENDR_PMAN = 'Y' WHERE A.AWB_NO =#awbNo# AND A.AWB_DATE =TO_DATE(#awbDate#,'DDMONYY')
		AND NOT EXISTS (SELECT NULL FROM AWB WHERE AWB_NO =#awbNo# AND AWB_DATE =TO_DATE(#awbDate#,'DDMONYY')))
   	</select>
   	
   	 <select id="get_exp_car_awb_cont_info" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.ExpCarBO">
    	select contact.cont_id contId,contact.cont_name contName,contact.cont_type contType,DOC_LINE_NO docLineNo FROM CAR_AWB_CONTACT_INFO contact WHERE contact.AWB_NO = #awb# AND
	  	contact.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')  
    	order by contact.cont_type desc,DOC_LINE_NO 
    </select>
    <insert id="insertExpAWBContInfo" parameterClass="cargo.cms.export.bo.ExpCarBO">
    	insert into CAR_AWB_CONTACT_INFO 
			(AWB_NO,AWB_DATE,DOC_LINE_NO,CONT_ID,CONT_NAME,CONT_TYPE)
		values
			(#awb#,TO_DATE(#awbDate#,'DDMONYY'),#docLineNo#,#contId#,#contName#,#contType#)
    </insert>
    <update id="updateExpAWBContInfo" parameterClass="cargo.cms.export.bo.ExpCarBO">
    	update CAR_AWB_CONTACT_INFO set CONT_ID=#contId#,CONT_NAME=#contName#,CONT_TYPE=#contType# 
    	where AWB_NO=#awb# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') AND DOC_LINE_NO=#docLineNo#
    </update>
    <select id="getMaxDocLineNoEXPAWBContInfo" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="java.lang.String">
		SELECT NVL(MAX(DOC_LINE_NO)+1,1) FROM CAR_AWB_CONTACT_INFO WHERE AWB_NO =#awb# AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
   	</select>
   	<update id="updateExpFltUldforPMAB" parameterClass="java.util.HashMap">
   		UPDATE EXP_FLT_ULD SET PMAN_YN='Y' WHERE ULD_KEY=#ULDNO# AND FLT_KEY=#FLTKEY# AND FLT_DATE=TO_DATE(#FLTDATE#,'DDMONYY')
   	</update>
   	<select id="check_housebldup_config"  parameterClass="map" resultClass="java.lang.String" >
		SELECT PKG_FLT.CHECK_HOUSE_BU_DIS(#fltNo#,#fltDate#,#uldNo#,#P_AWB_NO#) FROM DUAL
	</select>
	<select id="get_car_edi_awb_cont_info_exp" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.ExpCarBO">
    	SELECT distinct contId,contName,contType,docLineNo from (
    	select contact.cont_id contId,contact.cont_name contName,contact.cont_type contType,DOC_LINE_NO docLineNo FROM CAR_AWB_CONTACT_INFO contact WHERE contact.AWB_NO = #awb# AND
	  	contact.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')  
    	UNION 
   		select contact.cont_id contId,contact.cont_name contName,contact.cont_type contType, null docLineNo FROM v_edi_fwb EDI,EDI_FWB_CONTACT contact WHERE EDI.AWB_NO = #awb# AND
	  	EDI.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') AND EDI.tr_no=contact.tr_no AND (contact.CONT_TYPE='SHP' OR contact.CONT_TYPE='CNE') AND 
    	not exists (select 1 from CAR_AWB_CONTACT_INFO where AWB_NO = #awb# AND  AWB_DATE = TO_DATE(#awbDate#,'DDMONYY'))) order by contType desc,docLineNo
    </select>
    <update id="sqlUpdateMHCSCheckOutTime" parameterClass="java.util.HashMap">
		UPDATE EXP_CHKOUT_DTL SET MHCS_CHKOUT_TIME = SYSDATE, LM_USER_ID='MHCS', LM_DATE = SYSDATE where	uld_key = #uldKey# and	flt_key = #flightKey# and	flt_date = to_date(#flightDate#, 'DDMONYY')
	</update>
<select id="checkULDisAssignedornotmhcs" parameterClass="map" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey# AND FLT_KEY=#flightKey# AND FLT_DATE=to_date(#flightDate#, 'DDMONYY') AND FLT_TYPE='E'
</select>
<update id="sqlUpdateMHCSExitTime" parameterClass="java.util.HashMap">
		UPDATE EXP_PMANIFEST_ULD SET MHCS_EXIT_TIME = SYSDATE, LM_USER_ID='MHCS', LM_DATE = SYSDATE where	ULD_BT_NO = #uldKey# and	flt_key = #flightKey# and	flt_date = to_date(#flightDate#, 'DDMONYY')
</update>
	<update id="sqlUpdateMHCSReason" parameterClass="java.util.HashMap">
		UPDATE EXP_CHKOUT_DTL SET REASON = #reason#, LM_USER_ID='MHCS', LM_DATE = SYSDATE WHERE	uld_key = #uldKey# and	flt_key = #flightKey# and	flt_date = to_date(#flightDate#, 'DDMONYY')
	</update>
	<select id="validate_contrcode_master" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_CONTR_IND WHERE CODE=#PARAM#
	</select>
	<update id="updateAWBWareHouseRemarksCAR" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  >
		UPDATE IMP_CAR_AWB 
			SET WH_RMK = #whRmk# , LM_USER_ID = NVL(#crUserId#,LM_USER_ID), LM_DATE = SYSDATE
			WHERE
			     AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#						
	</update>
	<update id="updateGrpNoforOBC" parameterClass="java.util.HashMap"  >
		UPDATE EXP_PMANIFEST_AWB 
			SET GROUP_NO = '97'
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE=#AWB_DATE#	AND FLT_KEY=#FLT_KEY# AND FLT_DATE=#FLT_DATE# AND UNLDG_PT=#UNLADING_POINT#					
	</update>
	<update id="updateAWBWareHouseRemarksExpCAR" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  >
		UPDATE EXP_CAR 
			SET WH_RMK = #whRmk# , LM_USER_ID = NVL(#crUserId#,LM_USER_ID), LM_DATE = SYSDATE
			WHERE
			     AWB_NO = #awbNo#
			    AND AWB_DATE=#awbDate#						
	</update>
	<select id="chkBldupComplUnchk" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select COUNT(1) from exp_pmanifest_uld  where  
		uld_bt_no= #ULD_KEY# and flt_key=#FLT_KEY# and flt_date=#FLT_DATE# and bldup_complete = 'N'   
	</select>
	<update id="Export_UpdateAWBRemarksAWB"  parameterClass="java.util.HashMap">
		UPDATE  AWB 
		SET	 LOCKED_YN = #lockind#,lm_date = sysdate 
		WHERE  AWB_NO=#awbNo# AND AWB_DATE = #awbDate# 
	</update>
	
	
	<select id="validateCurrentDateDiffence" parameterClass="java.lang.String" resultClass="java.lang.Integer">
    	select count(1) from dual where to_date(#dateString#,'DDMONYY') > sysdate
    </select>
    
    <select id="returnCargoConstrained" parameterClass="java.lang.String" resultClass="java.lang.Integer">
    	select count(1) from mast_constraint_code where code = #code# and  constraint = 'Y'
    </select>
    <select id="getEndrShcListforPman" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.String">
      SELECT STRAGG(STRINGDELIM(splCode,',')) from
   		(SELECT CODE AS splCode FROM
		AWB, MAST_SPL_HAND_CODE WHERE 
			(MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE1 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE2 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE3 OR 
			MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE4 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE5 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE6 OR 
			MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE7 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE8 OR MAST_SPL_HAND_CODE.CODE = AWB.SPL_CODE9)
		AND AWB.AWB_NO = #awbNo1# AND AWB.AWB_DATE = #awbDate# AND MAST_SPL_HAND_CODE.ENDR_PMAN = 'Y')
	</select>
	<select id="getEndorseSplCodesforBldup" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		<![CDATA[
   	SELECT CODE AS endorseShc,MAST_SPL_HAND_CODE.ENDR_BLDUP as endorseLevel,#pc# as endorsePc,((nvl(#assignedPcs#,0)/nvl(#assignedWt#,0))*nvl(#pc#,0)) as endorseWt FROM MAST_SPL_HAND_CODE WHERE 
			(MAST_SPL_HAND_CODE.CODE = #shcOne# OR MAST_SPL_HAND_CODE.CODE = #shcTwo# OR MAST_SPL_HAND_CODE.CODE = #shcThree# OR 
			MAST_SPL_HAND_CODE.CODE = #shcFour# OR MAST_SPL_HAND_CODE.CODE = #shcFive# OR MAST_SPL_HAND_CODE.CODE = #shcSix# OR 
			MAST_SPL_HAND_CODE.CODE = #shcSeven# OR MAST_SPL_HAND_CODE.CODE = #shcEight# OR MAST_SPL_HAND_CODE.CODE = #shcNine#)
		AND MAST_SPL_HAND_CODE.ENDR_BLDUP IS NOT NULL AND MAST_SPL_HAND_CODE.ENDR_BLDUP <> '0' ORDER BY MAST_SPL_HAND_CODE.ENDR_BLDUP DESC
		]]>
   	</select>
   	<select id="getEndorseSplCodesforBldup1" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
   		<![CDATA[
   	 SELECT CODE AS endorseShc,MAST_SPL_HAND_CODE.ENDR_BLDUP as endorseLevel,#assignedPcs# as endorsePc,#assignedWt# as endorseWt FROM AWB awb ,MAST_SPL_HAND_CODE WHERE 
      		awb.awb_no=#awbNo# and awb.awb_date=#awbDate# and 
			(MAST_SPL_HAND_CODE.CODE = awb.spl_code1 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code2 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code3 OR 
			MAST_SPL_HAND_CODE.CODE = awb.spl_code4 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code5 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code6 OR 
			MAST_SPL_HAND_CODE.CODE = awb.spl_code7 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code8 OR MAST_SPL_HAND_CODE.CODE = awb.spl_code9)
		AND MAST_SPL_HAND_CODE.ENDR_BLDUP IS NOT NULL AND MAST_SPL_HAND_CODE.ENDR_BLDUP <> '0' ORDER BY MAST_SPL_HAND_CODE.ENDR_BLDUP DESC
		]]>
   	</select>
   	<select id="sqlGetRHOUsr" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
			SELECT COUNT(1) 
			FROM CUST_COMPANY WHERE (code=#usrId#
			OR  code in (select cust_no from sec_user where code=#usrId#)) and rho_yn='Y'
	</select>
	<select id="checkPmanforAWBLock" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
	<![CDATA[
		SELECT COUNT(1) FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND (PMAN_PCS>0 OR PMAN_WT>0)
		]]>
	</select>
	<select id="getOwnedTarPcsWt" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	  	select to_char(sum(p.bulk_pcs+p.ppk_pcs),'99999') PCS,to_char(sum(p.bulk_wt+p.ppk_wt),'9999990D99') WT from exp_pman_tarmac_awb p
		join flt_opr f on f.flt_key = p.flt_key and f.sch_date = p.flt_date and f.flt_type = 'D' 
		where (select  FUN_GET_PARENT_CARR (f.carr_code) from dual) = (select  FUN_GET_PARENT_CARR (#FLT_CARR#) from dual)
		and p.awb_no=#AWB_NO# and p.awb_date=#AWB_DATE#
 	</select>
 	
 	<select id="validateLspLocked" parameterClass="java.lang.String"  resultClass="java.lang.String">
 		SELECT Count(1) From Lsp_Inventory Where Lsp_No = #lspno# And Locked = 'Y'
 	</select>
 	
 	<select id="validateUldLocked" parameterClass="java.lang.String"  resultClass="java.lang.String">
 		SELECT Count(1) FROM uld_inventory where ULD_KEY = #uldNo# and Locked = 'Y'
 	</select>
 	
 	<update id="updateLspEmptyFlag" parameterClass="java.lang.String">
		UPDATE LSP_INVENTORY SET EMPTY_FLG = 'N' WHERE LSP_NO = #lspNum# AND EMPTY_FLG = 'Y'
	</update>
	
	<update id="updateUldEmptyFlag" parameterClass="java.lang.String">
		UPDATE ULD_INVENTORY SET EMPTY_FLG = 'N',ULD_FLOW = 'E' WHERE ULD_KEY = #uldKey# AND EMPTY_FLG = 'Y'
	</update>
	
	<select id="getPmanifestUldList" parameterClass="map" resultClass="cargo.cms.export.bo.PmanInfoBO">
		SELECT uld_bt_no as uldKey, flt_key as fltKey, TO_CHAR(flt_date,'DDMONYY')  as fltDate FROM exp_pmanifest_uld_awb where awb_no = #AWBNO# and awb_date = TO_DATE(#AWBDATE#,'DDMONYY') 
	</select>
	
	<select id="sqlCheckRHOUser" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
	    SELECT COUNT(1) FROM CUST_COMPANY WHERE code = #custCode# and RHO_YN = 'Y'
	</select>
	
		<select id="fetchExportULDtoUpdateSHC" parameterClass="map" resultClass="cargo.cms.export.bo.ExpCarBO">				   
		SELECT eua.ppk_type               AS ppkType,
		  eua.uld_key                     AS uldKey,
		  eua.rcl_no                      AS rclNum,
		  eua.awb_no                      AS awb,
		  TO_CHAR(eua.awb_date,'DDMONYY') AS awbDate,
		  rclDtl.DOC_SHC1                 AS splCode1,
		  rclDtl.DOC_SHC2                 AS splCode2,
		  rclDtl.DOC_SHC3                 AS splCode3,
		  rclDtl.DOC_SHC4                 AS splCode4,
		  rclDtl.DOC_SHC5                 AS splCode5,
		  rclDtl.DOC_SHC6                 AS splCode6,
		  rclDtl.DOC_SHC7                 AS splCode7,
		  rclDtl.DOC_SHC8                 AS splCode8,
		  rclDtl.DOC_SHC9                 AS splCode9,
      	  rclDtl.DOC_SHC1                 AS splCode1old,
		  rclDtl.DOC_SHC2                 AS splCode2old,
		  rclDtl.DOC_SHC3                 AS splCode3old,
		  rclDtl.DOC_SHC4                 AS splCode4old,
		  rclDtl.DOC_SHC5                 AS splCode5old,
		  rclDtl.DOC_SHC6                 AS splCode6old,
		  rclDtl.DOC_SHC7                 AS splCode7old,
		  rclDtl.DOC_SHC8                 AS splCode8old,
		  rclDtl.DOC_SHC9                 AS splCode9old,
		  eua.REMARKS                     AS oldRemarks,
		  eua.REMARKS                     AS shcRemarks,
		  eua.DOC_SHC_YN                  AS docShcYN,		  
			 (      
		        SELECT STRAGG(STRINGDELIM(s.CODE,','))
		        FROM AWB awb	
		        LEFT JOIN (SELECT ELI_YN , ELM_YN , uld_key  FROM exp_pre_rcl_dtl where PRE_RCL_NO =  rclHd.PRE_RCL_NO2 ) ercl ON ercl.uld_key = rclDtl.uld_key
		        JOIN MAST_SPL_HAND_CODE s	ON DLS_YN = 'Y' AND s.code IN (awb.Spl_Code1,awb.Spl_Code2,awb.Spl_Code3,awb.Spl_Code4,awb.Spl_Code5,awb.Spl_Code6,awb.Spl_Code7,awb.Spl_Code8,awb.Spl_Code9,DECODE(ercl.ELI_YN,'Y','ELI',''),DECODE(ercl.ELM_YN,'Y','ELM',''))
		        WHERE awb.AWB_NO = eua.awb_no AND awb.AWB_DATE = eua.awb_date
		     ) AS getShc
		FROM exp_uld_awb eua
		JOIN EXP_RCL_DTL rclDtl ON rclDtl.rcl_no   = eua.rcl_no AND rclDtl.uld_key = eua.uld_key and rclDtl.ppk_type = 'P'
		JOIN EXP_RCL_HD rclHd ON rclHd.RCL_NO = rclDtl.RCL_NO
		WHERE eua.awb_no = #AWBNO# and eua.awb_date = TO_DATE(#AWBDATE#,'DDMONYY') AND eua.ppk_type = 'P' AND rclHd.void_user_id IS NULL
		UNION
		SELECT eua.ppk_type               AS ppkType,
		  eua.uld_key                     AS uldKey,
		  eua.rcl_no                      AS rclNum,
		  eua.awb_no                      AS awb,
		  TO_CHAR(eua.awb_date,'DDMONYY') AS awbDate,
		  rclBrk.DOC_SHC1                 AS splCode1,
		  rclBrk.DOC_SHC2                 AS splCode2,
		  rclBrk.DOC_SHC3                 AS splCode3,
		  rclBrk.DOC_SHC4                 AS splCode4,
		  rclBrk.DOC_SHC5                 AS splCode5,
		  rclBrk.DOC_SHC6                 AS splCode6,
		  rclBrk.DOC_SHC7                 AS splCode7,
		  rclBrk.DOC_SHC8                 AS splCode8,
		  rclBrk.DOC_SHC9                 AS splCode9,
          rclBrk.DOC_SHC1                 AS splCode1old,
		  rclBrk.DOC_SHC2                 AS splCode2old,
		  rclBrk.DOC_SHC3                 AS splCode3old,
		  rclBrk.DOC_SHC4                 AS splCode4old,
		  rclBrk.DOC_SHC5                 AS splCode5old,
		  rclBrk.DOC_SHC6                 AS splCode6old,
		  rclBrk.DOC_SHC7                 AS splCode7old,
		  rclBrk.DOC_SHC8                 AS splCode8old,
		  rclBrk.DOC_SHC9                 AS splCode9old,
		  eua.REMARKS                     AS oldRemarks,
		  eua.REMARKS                     AS shcRemarks,
		  eua.DOC_SHC_YN                  AS docShcYN,
		  (      
	        SELECT STRAGG(STRINGDELIM(SHC,',')) FROM 
          (
          SELECT SHC FROM (
          SELECT s.CODE AS SHC FROM AWB awb	
	          LEFT JOIN (SELECT ELI_YN , ELM_YN , uld_key  FROM exp_pre_rcl_hd where PRE_RCL_NO =  rclHd.PRE_RCL_NO2 ) ercl ON ercl.uld_key = rclHd.uld_key
	        JOIN MAST_SPL_HAND_CODE s	ON DLS_YN = 'Y' 
          AND s.code IN (awb.Spl_Code1,awb.Spl_Code2,awb.Spl_Code3,awb.Spl_Code4,awb.Spl_Code5,awb.Spl_Code6,awb.Spl_Code7,awb.Spl_Code8,awb.Spl_Code9,DECODE(ercl.ELI_YN,'Y','ELI',''),DECODE(ercl.ELM_YN,'Y','ELM',''),
          rclHd.SPL_CODE1,rclHd.SPL_CODE2,rclHd.SPL_CODE3,rclHd.SPL_CODE4,rclHd.SPL_CODE5,rclHd.SPL_CODE6,rclHd.SPL_CODE7,rclHd.SPL_CODE8,rclHd.SPL_CODE9)
	        WHERE awb.AWB_NO = eua.awb_no AND awb.AWB_DATE = eua.awb_date ORDER BY s.priority DESC) WHERE ROWNUM &lt; 10
         )	        
	     ) AS getShc
		FROM exp_uld_awb eua
		JOIN exp_rcl_brkdn rclBrk ON rclBrk.rcl_no    = eua.rcl_no AND rclBrk.uld_key  = eua.uld_key AND rclbrk.awb_no = eua.awb_no AND rclbrk.awb_date = eua.awb_date
		JOIN EXP_RCL_HD rclHd ON rclHd.RCL_NO         = rclBrk.RCL_NO
		WHERE eua.awb_no = #AWBNO# and eua.awb_date = TO_DATE(#AWBDATE#,'DDMONYY') AND eua.ppk_type = 'M' AND rclHd.void_user_id IS NULL  	
	</select>
	
	<update id="saveExportPrepackSHC" parameterClass="cargo.cms.export.bo.ExpCarBO">
		update EXP_RCL_DTL set DOC_SHC1 = #splCode1#, DOC_SHC2 = #splCode2#, DOC_SHC3 = #splCode3#, DOC_SHC4 = #splCode4#, DOC_SHC5 = #splCode5#, DOC_SHC6 = #splCode6#,
		 DOC_SHC7 = #splCode7#, DOC_SHC8 = #splCode8#, DOC_SHC9 = #splCode9#, LM_USER_ID = #crUserId# , LM_DATE = SYSDATE where rcl_no = #rclNum# and uld_key = #uldKey#
	</update>
	
	<update id="saveExportMixPrepackSHC" parameterClass="cargo.cms.export.bo.ExpCarBO">
		update exp_rcl_brkdn set DOC_SHC1 = #splCode1#, DOC_SHC2 = #splCode2#, DOC_SHC3 = #splCode3#, DOC_SHC4 = #splCode4#, DOC_SHC5 = #splCode5#, DOC_SHC6 = #splCode6#,
		 DOC_SHC7 = #splCode7#, DOC_SHC8 = #splCode8#, DOC_SHC9 = #splCode9#,LM_USER_ID = #crUserId# , LM_DATE = SYSDATE where rcl_no = #rclNum# and uld_key = #uldKey# and awb_no = #awb# and awb_date = TO_DATE(#awbDate#,'DDMONYY')
	</update>
	
	<update id="updateDocumentShcInd" parameterClass="cargo.cms.export.bo.ExpCarBO">
		update exp_uld_awb set DOC_SHC_YN = 'Y', REMARKS = #shcRemarks# where rcl_no = #rclNum# and uld_key = #uldKey# and awb_no = #awb# and awb_date = TO_DATE(#awbDate#,'DDMONYY')
	</update>
	
	<update id="updateDocumentAirLineRmk" parameterClass="map">
		update exp_car set AIRL_RMK = #RMKS#, LM_USER_ID = #USER_ID# , LM_DATE = SYSDATE where awb_no = #AWBNO# and awb_date = TO_DATE(#AWBDATE#,'DDMONYY')
	</update>
        <select id="getFBLOldAirLineRemarks" parameterClass="map" resultClass="java.lang.String">
		<![CDATA[
				SELECT DECODE ( (SELECT COUNT(1) FROM awb WHERE AWB_NO = #AWBNO# and awb_date = TO_DATE(#AWBDATE#,'DDMONYY')),0,
				(select rmk from (SELECT rmk FROM awb_rmk WHERE AWB_NO = #AWBNO# order by cr_date desc) where rownum =1) , 
				(SELECT AIRLN_RMK FROM awb WHERE AWB_NO = #AWBNO# and awb_date = TO_DATE(#AWBDATE#,'DDMONYY') ) ) FROM DUAL		 
		]]>  	
	</select>
<select id="uldCloserIndCheck" parameterClass="java.lang.String" resultClass="java.lang.Integer">
			SELECT count(1)
			FROM EXP_PMANIFEST_ULD epu,
			  uld_inventory ui
			WHERE ui.flt_key  = epu.flt_key
			AND ui.flt_date   = epu.flt_date
			AND ui.uld_key    = epu.uld_bt_no
			AND epu.ULD_CLOSE = 'Y'
			AND epu.uld_bt_no = #uldKey#
	</select>
	<select id="checkDLSSHCULDPremanifest" parameterClass="map" resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EXP_PMANIFEST_ULD ULD,EXP_PMANIFEST_ULD_AWB ULDAWB WHERE ULDAWB.ULD_BT_NO = ULD.ULD_BT_NO AND ULDAWB.FLT_KEY=ULD.FLT_KEY 
	AND ULDAWB.FLT_DATE=ULD.FLT_DATE AND ULDAWB.AWB_NO=#awbNo# AND ULDAWB.AWB_DATE=#awbDate# AND ULDAWB.ULD_BT_NO=#uldKey#
	</select>
	<update id="updateAirlineRemarks_IMP_CAR_AWB" parameterClass="map" >
		update imp_car_awb set AIRLN_RMK = #RMKS#, LM_USER_ID = #USER_ID# , LM_DATE = SYSDATE 
			where awb_no = #AWBNO# and awb_date = TO_DATE(#AWBDATE#,'DDMONYY')		
	</update>
	<update id="updateAirlineRemarks_IMP_CAR_SHP" parameterClass="map" >
		update imp_car_shp set AIRL_RMK = #RMKS#, LM_USER_ID = #USER_ID# , LM_DATE = SYSDATE 
			where awb_no = #AWBNO# and awb_date = TO_DATE(#AWBDATE#,'DDMONYY')	
			and FLT_KEY =#FLT_KEY# and FLT_DATE=#FLT_DATE#	
	</update>
	<!-- FLIGHT Allotment Concurrency Issue Resolving Queries Added on 28MAY2012 By Asha Joshi-->
	<insert id="sqlInsertFlightAllotLock" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
		INSERT INTO EDI_ELP_MSG_LOCK(FLT_KEY, FLT_DATE, VER_NO) VALUES(#fltKey#, TO_DATE(#fltDate#,'DDMONYY'),1)
	</insert>
	<select id="sqlSelectFlightAllotLockForUpdate" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO" resultClass="java.util.HashMap">
		SELECT FLT_KEY, FLT_DATE, VER_NO FROM EDI_ELP_MSG_LOCK WHERE FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
		FOR UPDATE OF VER_NO
	</select>
	<update id="sqlUpdateFlightAllotLock" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
		UPDATE EDI_ELP_MSG_LOCK SET VER_NO = #versionNo# WHERE FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
	</update>
	
	<select id="sqlGetReturnAgentCode" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #codeDesc# 
	</select>
	<update id="chkOutULDReadyStatus" parameterClass="java.util.HashMap">
		update exp_pmanifest_uld
	    set ready_disp='Y',TR_TYPE_EVT = #TR_TYPE#,LM_USER_ID = #CR_USER_ID#,LM_DATE=sysdate,
	    READY_DISP_DATE = SYSDATE,READY_DISP_TIME = TO_CHAR(SYSDATE,'HH24MI')
	    where uld_bt_no=#ULDKEY# 
	    and flt_key = #FLIGHTKEY# 
	    and flt_date = to_date(#FLIGHTDATE#, 'DDMONYY')
	</update>
	<select id="chkNotocAWBULdInfo" parameterClass="cargo.cms.export.bo.NOTOCWorksheetBO" resultClass="java.lang.Integer">
		select count(1) from EXP_NOTOC_AWB_ULD 
		where TR_NO = #trNo#
		and ULD_KEY = #uldNo#			
	</select>
	
	<parameterMap id="hParam" class="map">
		<parameter property="awbDate" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT" />
	 	<parameter property="awbNo" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>  
	 	<parameter property="awbType" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>	 	 	             
	</parameterMap>
	<procedure id="fetchAwbDateForExport" parameterMap="hParam">
			{? = call PKG_COMMON.get_awb_date(?,?)}
	</procedure>
	
	
	<select id="chkPassengerFlight" parameterClass="map" resultClass="java.lang.String">
	 	Select DECODE(COUNT(*),0,'Y','N') From Flt_Opr Where Flt_Key = #finalFltKey# 
	 		And Sch_Date = To_Date(#finalFltDate#,'DDMONYY') And Cgo_Acft_Type = 'PSR'	
	</select>
	
	<select id="chkSecCheckCompletedForShipment" parameterClass="map" resultClass="java.lang.String">
	 		select pkg_exp_rpt.fun_get_sc(#awbNo#, #awbDate#,'SC') from dual
	</select>
	<select id="checkRcvPcswithCARPcs" parameterClass="map"  resultClass="java.lang.Integer">
		<![CDATA[
			SELECT count(1) FROM AWB WHERE AWB_NO = UPPER(#awbNo#) AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') AND pcs >= (RCL_PCS - NVL(RTN_PCS,'0'))  and wt >= (RCL_WT - NVL(RTN_WT,'0'))
		]]>      
	</select>
	<select id="checkRecordinAWBowner" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.Integer">
		<![CDATA[
			SELECT COUNT(DISTINCT(CARR_CODE)) FROM AWB_OWNER WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate# AND PCS>0 
		]]>      
	</select>
	<delete id="deleteRecordinAWBowner" parameterClass="cargo.cms.export.bo.ExpCarBO" >
			DELETE FROM AWB_OWNER WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate# 
	</delete>
	
		
	<select id="sqlAmendUldAssgnUldTareWeight" parameterClass="java.lang.String" resultClass="java.lang.String">
	 		select NVL(tare_weight,0) from uld_inventory where uld_key= #uldNum#
	</select>
	<select id="chkSidDategtFWBdate" parameterClass="map" resultClass="java.lang.Integer">
		select count(1) from v_edi_fwb fwb, EXP_SID sid                                 
		WHERE fwb.awb_no=sid.awb_no and fwb.awb_date=sid.awb_date and sid.AWB_NO = #awbNumber# 
		and sid.AWB_DATE = to_date(#awbDate#,'DDMONYY') and fwb.lm_date&gt;sid.lm_date
	</select>
	<select id="sqlMicSecAgentDetails" parameterClass="map" resultClass="cargo.cms.export.bo.SecurityCheckBO">
		select agent_Name secAgentName, agent_code secAgentNum , carr_code carrCode from awb where awb_no = #AWBNO# and awb_date = #AWBDATE#	
	</select>
	<select id="fetchSecurityTypeInfoCAR" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT SECURITY_OPTION FROM EXP_CAR WHERE AWB_NO=#AWB_NO# AND AWB_DATE=TO_DATE(#AWB_DATE#,'DDMONYY')
	</select>
	<select id="fetchFlightTypeInfoPMAN" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT cgo_acft_type from flt_opr where flt_key= #FLT_KEY# and sch_date=#FLT_DATE# AND flt_type='D' 
	</select>
	<update id="sqlUpdateBillChrgDtlforReturnCargoSRF" parameterClass="java.util.HashMap">
		UPDATE BILL_CHARGE_DTL 
        SET STATUS   ='VOID',
        LM_USER_ID =#userId#,
        LM_DATE    =SYSDATE
        WHERE TR_NO IN (
        WITH TEMP AS  (
        SELECT CHRG_TR_NO CTR_NO from EXP_RTN_HD WHERE RTN_NO= #rtnNo#
        )
        SELECT TRIM(REGEXP_SUBSTR(CTR_NO, '[^,]+', 1, LEVEL)) CTR_NO
        FROM (SELECT CTR_NO FROM TEMP) T
        CONNECT BY INSTR(CTR_NO, ',', 1, LEVEL - 1) > 0)
        AND STATUS NOT IN ('PAID','VOID')  
	</update>
	<select id="fetchSSRforshc" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT SSR FROM MAST_SPL_HAND_CODE WHERE CODE=#PARAM#
	</select>
	<update id="updateUldInventoryImpClear" parameterClass="cargo.cms.export.bo.IssueRCLBulkLocBO">
		UPDATE ULD_INVENTORY SET CARR_CODE=NULL,FLT_NO=NULL,FLT_TYPE=NULL,FLT_DATE=NULL,FLT_KEY=NULL,LM_USER_ID=#lmUSerID#,LM_DATE=SYSDATE WHERE ULD_KEY=#uldKey#
	</update>
	<select id="getFlightDtlsforExpUldcnsgn"  parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.AWBBO">
		SELECT FLT_KEY fltKey,TO_CHAR(FLT_DATE,'DDMONYY') fltDate FROM ULD_INVENTORY WHERE ULD_KEY=#PARAM#	
	</select>	
	<select id="getDLSNumberHACTL" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select DLS_NO from exp_dls_hd where  flt_key = #FLT_KEY# and flt_date = TO_DATE(#FLT_DATE#,'DDMONYY')
	</select>
	<select id="checkDlsAllotHACTL_IND" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select COUNT(1) from exp_dls_allotment where dls_no = #DLS_NO# and uld_key = #ULD_KEY# AND HACTL_ULD_IND = 'Y'
	</select>
	<update id="updateDLSAllotHACTL_IND" parameterClass="java.util.HashMap">
	    UPDATE exp_dls_allotment SET HACTL_ULD_IND = 'N', ALLOT_TYPE = '', SOURCE = 'S' WHERE dls_no = #DLS_NO# and uld_key = #ULD_KEY#
	</update>	
	
	<select id="exp_dls_uldSequence" parameterClass="java.lang.String" resultClass="java.lang.String">	   	 
	   	 select substr(to_char(EXP_DLS_ULD_SEQ.nextval,'00000000000000000009'),-10) from dual
   	</select>
	<select id="isShipmentSCPending" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_SEC_CHK_JO_DTL WHERE JO_NO IN 
		(SELECT JO_NO FROM EXP_SEC_CHK_JO WHERE AWB_NO=#awbNo# AND AWB_DATE=to_date(#awbDate#,'DDMONYY')) AND (RESULT='Fail' or RESULT is null) 
	</select> 
	<select id="isShipmentSCInProgress" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_SEC_CHK_JO WHERE AWB_NO=#awbNo# AND AWB_DATE=to_date(#awbDate#,'DDMONYY') AND STATUS='InProgress' 
	</select> 
	<update id="sqlChangeAccModeToDSAWB" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE AWB SET ACCEPT_MODE='LDS',LM_DATE=SYSDATE,LM_USER_ID=#lastModUserId#,TR_TYPE='CHTDS' where awb_no=#awb# and awb_date=to_date(#awbDate#,'DDMONYY')
	</update>
	<update id="sqlChangeAccModeToDSCAR" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE EXP_CAR SET ACCEPT_MODE='LDS',LM_DATE=SYSDATE,LM_USER_ID=#lastModUserId#,TR_TYPE='CHTDS' where awb_no=#awb# and awb_date=to_date(#awbDate#,'DDMONYY')
	</update>
	<select id="checkPaymentDoneforCAR" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM BILL_CHARGE_DTL WHERE awb_no = #awbNumber# AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') and (itm_code!='SECJCHEK' and itm_code!='SECRCHEK') 
		and itm_code = (select item_code from fwb_charge_map where fwb_charge_code=#chargeCode#) AND STATUS='PAID'
	</select>
	<select id="checkRevChargeDtlsPaid" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT ITM_CODE chargeCode,PREPAID_AMT prepaidAmount,COLLECT_AMT collectAmount FROM EXP_AWB_REV_CHARGES WHERE awb_no=#awb# and awb_date=to_date(#awbDate#,'DDMONYY') 
	</select>
	<select id="checkNonRevChargeDtlsPaid" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.RateChargeBO">
		SELECT ITM_CODE chargeCode,CHRG_AMT esAmount,PAYMENT_MODE esChargeMode,PAYMENT_AC_NO esAccNo FROM EXP_AWB_NONREV_CHARGES WHERE awb_no=#awb# and awb_date=to_date(#awbDate#,'DDMONYY') 
	</select>
	<update id="sqlUpdateReturnAgentInfoForAwb" parameterClass="cargo.cms.imprt.bo.IssueConsSrfInfoBO">
	    UPDATE AWB SET AGENT_NAME = #retrnAgt#, AGENT_CODE = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #retrnAgt#) WHERE AWB_NO  = #awbNo# and AWB_DATE = #awbDate#
	</update>	
	
	<select id="getManifestAndNetWeightForDLS" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT To_char(NVL(MAN_WT,0)) MAN_WT, To_char(NVL(NET_WT,0)) NET_WT
         FROM exp_flt_uld 
          WHERE uld_key = #uld_key#
          AND flt_key   = #flt_key#
          AND flt_date  = #flt_date#
	</select>
	<select id="getTrnsferTypeForDlsUld" parameterClass="java.util.HashMap" resultClass="java.lang.String">
			select trf_type from  v_ddt_dtl
			where cntg_flt_date   = #flt_date#
			AND cntg_flt_key  = #flt_key#
				AND uld_key = #uld_key# and rownum = 1 
	</select>
	<select id="sqlFetchDLSTarmacBulkAWB" parameterClass="cargo.cms.export.bo.CargoManifestDetailsBO" resultClass="java.util.HashMap">			
				SELECT SUM(PCS) AS PCS,  SUM(WT) AS WT, MIN(PRIORITY) as PRIORITY , UNLDG_PT AS UNLDG_PT, FLT_KEY AS FLT_KEY, FLT_DATE AS FLT_DATE, ULD_TYPE AS ULD_TYPE, STRAGG(STRINGDELIM(SHC, ',')) AS SHC,
				STRAGG(STRINGDELIM(AWBNO, ',')) AS AWBNO
						FROM
						  (SELECT TARMAC.AWB_NO                                                                                      AS AWBNO,
						    TO_CHAR(TARMAC.AWB_DATE,'DDMONYY')                                                                       AS AWBDATE,
						    DDT.SHP_TRF_PC                                                                                           AS PCS,
						    DDT.SHP_TRF_WT                                                                                           AS WT,
						    DDT.SHP_UNLDG_PT                                                                                         AS UNLDG_PT,
						    DDT.FLT_KEY                                                                                              AS FLT_KEY,
						    TO_CHAR(DDT.FLT_DATE,'DDMONYY')                                                                          AS FLT_DATE,
						    (CASE WHEN decode(awb.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
                			(CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' 
                			AND SPLCODE.CARR_CODE = AWB.CARR_CODE AND (SPLCODE.SPL_CODE = awb.SPL_CODE1 OR SPLCODE.SPL_CODE = awb.SPL_CODE2 OR SPLCODE.SPL_CODE = awb.SPL_CODE3 OR SPLCODE.SPL_CODE = awb.SPL_CODE4 
                 			OR SPLCODE.SPL_CODE = awb.SPL_CODE5 OR SPLCODE.SPL_CODE = awb.SPL_CODE6 OR SPLCODE.SPL_CODE = awb.SPL_CODE7 OR SPLCODE.SPL_CODE = awb.SPL_CODE8 OR SPLCODE.SPL_CODE = awb.SPL_CODE9)) > 0
                			THEN 'Q' ELSE decode(awb.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) ELSE decode(awb.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as ULD_TYPE,
						    (SELECT STRAGG(STRINGDELIM(MAST_SPL_HAND_CODE.CODE,','))
						    FROM AWB,
						      MAST_SPL_HAND_CODE
						    WHERE AWB.AWB_NO              = DDT.AWB_NO
						    AND AWB.AWB_DATE              = DDT.AWB_DATE
						    AND (MAST_SPL_HAND_CODE.CODE  = AWB.SPL_CODE1
						    OR MAST_SPL_HAND_CODE.CODE    = AWB.SPL_CODE2
						    OR MAST_SPL_HAND_CODE.CODE    = AWB.SPL_CODE3
						    OR MAST_SPL_HAND_CODE.CODE    = AWB.SPL_CODE4
						    OR MAST_SPL_HAND_CODE.CODE    = AWB.SPL_CODE5
						    OR MAST_SPL_HAND_CODE.CODE    = AWB.SPL_CODE6
						    OR MAST_SPL_HAND_CODE.CODE    = AWB.SPL_CODE7
						    OR MAST_SPL_HAND_CODE.CODE    = AWB.SPL_CODE8
						    OR MAST_SPL_HAND_CODE.CODE    = AWB.SPL_CODE9)
						    AND MAST_SPL_HAND_CODE.DLS_YN = 'Y'
						    ) AS SHC,
                		  FUN_GET_AWB_UPLIFT_PRIORITY(AWB.AWB_NO,AWB.AWB_DATE) as PRIORITY
						  FROM EXP_PMAN_TARMAC_AWB TARMAC,	 V_DDT_DTL DDT,  AWB
						  WHERE TARMAC.FLT_KEY = DDT.SHP_CNTG_FLT_KEY AND TARMAC.FLT_DATE  = DDT.SHP_CNTG_FLT_DATE
						  AND TARMAC.AWB_NO    = DDT.AWB_NO AND AWB.AWB_NO = DDT.AWB_NO AND AWB.AWB_DATE     = DDT.AWB_DATE
						  AND TARMAC.FLT_KEY   = #flightNo# AND TARMAC.FLT_DATE  = TO_DATE(#flightDate#,'DDMONYY')
						  AND DDT.SHP_TRF_TYPE = 'TT' AND DDT.TRF_TYPE    IS NULL
						  )
						GROUP BY FLT_KEY, FLT_DATE, UNLDG_PT, ULD_TYPE
		</select>

	<select id="getTrnsferTypeForBULK" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select count(*) from exp_pmanifest_uld_awb where (awb_no,awb_date) 
			in (select awb_no,awb_date from  v_ddt_dtl	where shp_cntg_flt_key  = #flt_key# and shp_cntg_flt_date = #flt_date# and shp_trf_type = 'IF') and uld_bt_no = #uld_key# 
			and  flt_key = #flt_key#  and flt_date  = #flt_date#
	</select>
	<update id="callBldupbulkFun" parameterClass="cargo.cms.export.bo.PreManifestAWBBO">
    	UPDATE AWB 
    		SET bldup_bulk_pcs=bldup_bulk_pcs-NVL(#oldStoredPc#, 0), bldup_bulk_wt=bldup_bulk_wt-NVL(#oldStoredWt#, 0) 
    	WHERE 
    		awb_no=#awbNo# and awb_date=#awbDate#
    </update>
	 <select id="getStationDailyList" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">    
    	SELECT arpt_region_name,
			  arpt_country_name,
			  arpt_station_name,
			  DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'999999999.99'))),0,0
			          || TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'999999999.99')), TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'999999999.99'))) impRegionTonn,
			  DECODE(TRUNC(TRIM(TO_CHAR((SUM(IMP_ARPT_DEV)/DECODE((SUM(DECODE(IMP_ARPT_DEV,0,0,1))),0,1,SUM(DECODE(IMP_ARPT_DEV,0,0,1)))),'999999999.99'))),0,0
			        || TRIM(TO_CHAR((SUM(IMP_ARPT_DEV)          /DECODE((SUM(DECODE(IMP_ARPT_DEV,0,0,1))),0,1,SUM(DECODE(IMP_ARPT_DEV,0,0,1)))),'999999999.99')), 
			           TRIM(TO_CHAR((SUM(IMP_ARPT_DEV)/DECODE((SUM(DECODE(IMP_ARPT_DEV,0,0,1))),0,1,SUM(DECODE(IMP_ARPT_DEV,0,0,1)))),'999999999.99'))) impRegionDev,
			  DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'999999999.99')),
			          TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'999999999.99'))) expRegionTonn,
			  DECODE(TRUNC(TRIM(TO_CHAR((SUM(EXP_ARPT_DEV)/DECODE((SUM(DECODE(EXP_ARPT_DEV,0,0,1))),0,1,SUM(DECODE(EXP_ARPT_DEV,0,0,1)))),'999999999.99'))),0,0
			        || TRIM(TO_CHAR((SUM(EXP_ARPT_DEV)/DECODE((SUM(DECODE(EXP_ARPT_DEV,0,0,1))),0,1,SUM(DECODE(EXP_ARPT_DEV,0,0,1)))),'999999999.99')), 
			        TRIM(TO_CHAR((SUM(EXP_ARPT_DEV)/DECODE((SUM(DECODE(EXP_ARPT_DEV,0,0,1))),0,1,SUM(DECODE(EXP_ARPT_DEV,0,0,1)))),'999999999.99'))) expRegionDev,
			  DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_INB_TONN),'999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_INB_TONN),'999999999.99')), 
			          TRIM(TO_CHAR(SUM(TRN_INB_TONN),'999999999.99'))) transInbTonn,
			  DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_OUTB_CPCT_TONN),'999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_OUTB_CPCT_TONN),'999999999.99')),
			          TRIM(TO_CHAR(SUM(TRN_OUTB_CPCT_TONN),'999999999.99'))) transExpCpctTonn,
			  DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_OUTB_HACTL_TONN),'999999999.99'))),0,0
			          || TRIM(TO_CHAR(SUM(TRN_OUTB_HACTL_TONN),'999999999.99')), TRIM(TO_CHAR(SUM(TRN_OUTB_HACTL_TONN),'999999999.99'))) transExpHactlTonn,
			  DECODE(TRUNC(TRIM(TO_CHAR((SUM(TRN_ARPT_DEV) / DECODE((SUM(DECODE(TRN_ARPT_DEV,0,0,1))),0,1,SUM(DECODE(TRN_ARPT_DEV,0,0,1)))),'999999999.99'))),0,0
			          || TRIM(TO_CHAR((SUM(TRN_ARPT_DEV) / DECODE((SUM(DECODE(TRN_ARPT_DEV,0,0,1))),0,1,SUM(DECODE(TRN_ARPT_DEV,0,0,1)))),'999999999.99')), 
			            TRIM(TO_CHAR((SUM(TRN_ARPT_DEV)/DECODE((SUM(DECODE(TRN_ARPT_DEV,0,0,1))),0,1,SUM(DECODE(TRN_ARPT_DEV,0,0,1)))),'999999999.99'))) transRegionDev
			FROM AA_STATION_ROLLING_REPT			
			GROUP BY arpt_region_name, arpt_country_name, arpt_station_name
			ORDER BY arpt_region_name ,  arpt_country_name,  arpt_station_name    	
    </select>
	<parameterMap id="stationReptParam" class="map" >
		<parameter property="START_DATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="END_DATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>		
		<parameter property="AIRLINE_YN" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>		
		<parameter property="CARR_CODE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>		
		<parameter property="GRP_CARR_CODE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>		
	    <parameter property="LOGIN_CARR_CODE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>	
	</parameterMap>
	<procedure id="pkg_rolling_station_list" parameterMap="stationReptParam" >
		{call PKG_DAILY_ROLLING_REPT.SP_STATION_ROLLING(?,?,?,?,?,?)}
	</procedure>
	<select id="getExportCuttOffList" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">    
    	 SELECT
			  A.AWB_NO                                                AS awbNo,
			  A.FLT_KEY                                               AS fltNo,
			  A.FLT_DATE                                               AS fltDate,
			  PKG_COMMON.GET_FLT_STA(A.FLT_KEY,A.FLT_DATE, 'D', 'DD') AS std,
			  PKG_COMMON.GET_FLT_ETA(A.FLT_KEY,A.FLT_DATE, 'D', 'DD') AS etd,
			  PKG_COMMON.GET_FLT_ATA(A.FLT_KEY,A.FLT_DATE, 'D', 'DD') AS ata,
			  TO_CHAR(RCL.RCLDATE,'DDMONYY HH24:MI')                  AS cargoAcceptence,
			  (SELECT TO_CHAR(RECD_DATE,'DDMONYY HH24:MI') FROM  exp_doc_recd  WHERE recd_status = 'Confirmed' and AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE and rownum = 1 ) AS documentAccepted,
			  (SELECT TO_CHAR(POUCH_SCAN_TIME,'DDMONYY HH24:MI') FROM  AWB_POUCH  WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE and rownum = 1 ) AS pouchAccepted,
			  TO_CHAR(A.CR_DATE,'DDMONYY HH24:MI') preManifested,
			  TO_CHAR(BULD.BDATE,'DDMONYY HH24:MI') buCompleted,
			  (SELECT TO_CHAR(MIN(CR_DATE),'DDMONYY HH24:MI')  FROM  AWB_SHP_STS t WHERE  AWB_NO = A.AWB_NO   AND AWB_DATE = A.AWB_DATE 
			          AND FLT_NO = A.FLT_KEY AND FLT_DATE = A.FLT_DATE AND COD_FSU_STS = 'DEP') AS fsuDep,
			  e.ofld_cfm_date AS confirmOffload
			FROM EXP_PMANIFEST_AWB A
			JOIN AWB on awb.awb_no = a.awb_no and awb.awb_date = a.awb_date and awb_type = 'E'
			JOIN FLT_OPR F on F.FLT_KEY = A.FLT_KEY AND F.SCH_DATE = A.FLT_DATE AND F.FLT_TYPE = 'D'
			JOIN FLT_OPR_EVENTS E on E.TR_NO = F.TR_NO
			LEFT JOIN
			  (
			    select AWB_NO, AWB_DATE, MAX(RCL_DATE) AS RCLDATE from
			    (SELECT RCL_DATE, AWB_NO, AWB_DATE FROM EXP_RCL_HD WHERE VOID_DATE IS NULL
			    UNION ALL
			    SELECT RCL_DATE, AWB_NO, AWB_DATE FROM EXP_ULD_AWB WHERE RCL_NO IN (SELECT RCL_NO FROM EXP_RCL_HD WHERE VOID_DATE IS NULL))
			    GROUP BY AWB_NO, AWB_DATE )  RCL ON   A.AWB_NO = RCL.AWB_NO AND A.AWB_DATE = RCL.AWB_DATE
			LEFT JOIN
			  (
			    SELECT MAX(BLDUP_COMPLETE_DATE) AS BDATE , AWB_NO, AWB_DATE, B.FLT_KEY, B.FLT_DATE
			          FROM  EXP_PMANIFEST_ULD B, EXP_PMANIFEST_ULD_AWB C
			          WHERE B.FLT_KEY = C.FLT_KEY  AND B.FLT_DATE  = C.FLT_DATE AND B.ULD_BT_NO = C.ULD_BT_NO
			          GROUP BY AWB_NO, AWB_DATE, B.FLT_KEY, B.FLT_DATE
			  )  BULD ON  A.AWB_NO = BULD.AWB_NO AND A.AWB_DATE = BULD.AWB_DATE AND A.FLT_KEY  = BULD.FLT_KEY AND A.FLT_DATE = BULD.FLT_DATE
			WHERE  f.act_date BETWEEN TO_DATE(#START_DATE#,'DDMONYY') AND TO_DATE(#END_DATE#,'DDMONYY')
			UNION ALL
			SELECT
			  A.AWB_NO                                                AS awbNo,
			  A.FLT_KEY                                               AS fltNo,
			  A.FLT_DATE                                               AS fltDate,
			  PKG_COMMON.GET_FLT_STA(A.FLT_KEY,A.FLT_DATE, 'D', 'DD') AS std,
			  PKG_COMMON.GET_FLT_ETA(A.FLT_KEY,A.FLT_DATE, 'D', 'DD') AS etd,
			  PKG_COMMON.GET_FLT_ATA(A.FLT_KEY,A.FLT_DATE, 'D', 'DD') AS ata,
			  TO_CHAR(RCL.RCLDATE,'DDMONYY HH24:MI')                  AS cargoAcceptence,
			  (SELECT TO_CHAR(RECD_DATE,'DDMONYY HH24:MI') FROM  exp_doc_recd  WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE and rownum = 1 ) AS documentAccepted,
			  (SELECT TO_CHAR(POUCH_SCAN_TIME,'DDMONYY HH24:MI') FROM  AWB_POUCH  WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE ) AS pouchAccepted,
			  '' preManifested,
			  '' buCompleted,
			  (SELECT TO_CHAR(MAX(CR_DATE),'DDMONYY HH24:MI')  FROM  AWB_SHP_STS WHERE  AWB_NO = A.AWB_NO   AND AWB_DATE = A.AWB_DATE 
			          AND FLT_NO = A.FLT_KEY AND FLT_DATE = A.FLT_DATE    AND COD_FSU_STS = 'DEP') AS fsuDep,
			  e.ofld_cfm_date AS confirmOffload
			FROM
			EXP_OFFLOAD_AWB A
			JOIN AWB on awb.awb_no = a.awb_no and awb.awb_date = a.awb_date and awb_type = 'E'
			JOIN FLT_OPR F on F.FLT_KEY = A.FLT_KEY AND F.SCH_DATE = A.FLT_DATE AND F.FLT_TYPE = 'D'
			JOIN FLT_OPR_EVENTS E on E.TR_NO = F.TR_NO
			LEFT JOIN
			  (
			    select AWB_NO, AWB_DATE, MAX (RCL_DATE) AS RCLDATE from
			    (SELECT RCL_DATE, AWB_NO, AWB_DATE FROM EXP_RCL_HD WHERE VOID_DATE IS NULL
			    UNION ALL
			    SELECT RCL_DATE, AWB_NO, AWB_DATE FROM EXP_ULD_AWB WHERE RCL_NO IN (SELECT RCL_NO FROM EXP_RCL_HD WHERE VOID_DATE IS NULL))
			    GROUP BY AWB_NO, AWB_DATE )  RCL ON   A.AWB_NO = RCL.AWB_NO AND A.AWB_DATE = RCL.AWB_DATE
			WHERE NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_AWB WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE AND FLT_KEY = A.FLT_KEY AND FLT_DATE = A.FLT_DATE
			                     UNION
			                   SELECT NULL FROM EXP_PMAN_TARMAC_AWB WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE AND FLT_KEY = A.FLT_KEY AND FLT_DATE = A.FLT_DATE)
			AND f.act_date BETWEEN TO_DATE(#START_DATE#,'DDMONYY') AND TO_DATE(#END_DATE#,'DDMONYY') 	 	
    </select>
    
	
	<select id="getGrandTotalStationRept" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">    
    	SELECT totImpTonn,
			  totExpTonn,
			  totTransInbTonn,
			  totTransExpCpctTonn,
			  totTransExpHactlTonn,
			  TRIM(TO_CHAR(SUM(totImpTonn+totExpTonn+totTransInbTonn+totTransExpCpctTonn+totTransExpHactlTonn),'999999999.99')) AS grandTotal
			FROM
			  (SELECT DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'999999999.99'))),0,0
			    || TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'999999999.99')), TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'999999999.99'))) totImpTonn,
			    DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'999999999.99'))),0,0
			    || TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'999999999.99')), TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'999999999.99'))) totExpTonn,
			    DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_INB_TONN),'999999999.99'))),0,0
			    || TRIM(TO_CHAR(SUM(TRN_INB_TONN),'999999999.99')), TRIM(TO_CHAR(SUM(TRN_INB_TONN),'999999999.99'))) totTransInbTonn,
			    DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_OUTB_CPCT_TONN),'999999999.99'))),0,0
			    || TRIM(TO_CHAR(SUM(TRN_OUTB_CPCT_TONN),'999999999.99')), TRIM(TO_CHAR(SUM(TRN_OUTB_CPCT_TONN),'999999999.99'))) totTransExpCpctTonn,
			    DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_OUTB_HACTL_TONN),'999999999.99'))),0,0
			    || TRIM(TO_CHAR(SUM(TRN_OUTB_HACTL_TONN),'999999999.99')), TRIM(TO_CHAR(SUM(TRN_OUTB_HACTL_TONN),'999999999.99'))) totTransExpHactlTonn
			  FROM AA_STATION_ROLLING_REPT
			  )
			GROUP BY totImpTonn,
			  totExpTonn,
			  totTransInbTonn,
			  totTransExpCpctTonn,
			  totTransExpHactlTonn  	
    </select>
   
    <select id="chkValidCounterCode" parameterClass="java.lang.String" resultClass="java.lang.String">
    	select count(1) from MAST_CONTR_IND where code = #counterCode#
    </select>
	<select id="sqluldnonpremanfassignmentforTppk" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.AWBBO">
		SELECT t1.uld_key,
		    t1.awb_no awbNo,
		    CONCAT(CONCAT(SUBSTR(t1.AWB_NO,0,3),'-'),SUBSTR(t1.AWB_NO,4)) as awbNoDisplay,
		    pkg_exp_val.get_exp_awb_cc_code(t1.flt_key, t1.flt_date, t1.awb_no) as cccode, 
		    case when T2.awb_type='T' and T2.CATALOG !='TM' and (select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(t1.awb_no) from dual )) is null then 'Y' else 'N' end as transCCExists,			 
			 case when (select restrict_ready_for_dispatch from mast_constraint_code where code in(select pkg_exp_val.get_exp_awb_cc_code(t1.awb_no) from dual )) ='Y' and T2.CATALOG !='TM'  then 'Y' else 'N' end  as ccAllowYn,
		    to_char(t1.AWB_DATE,'DDMONYY') as awbDate,
		    t2.catalog,
		    (SELECT V.CC_CODE FROM V_CST_LATEST_CC_CODE V
					WHERE V.FLT_KEY = t1.FLT_KEY AND V.FLT_DATE = t1.FLT_DATE AND V.AWB_NO = t1.AWB_NO 
						  AND NVL(V.HAWB_NO, '000000000000000000') =  '000000000000000000' AND ROWNUM = 1) as contrcode,
		    (SELECT STRAGG(STRINGDELIM(SHC, '/')) AS SHCS 
		    FROM (SELECT DISTINCT SHC, FLT_KEY, ULD_KEY,FLT_DATE, PRIORITY, AWB_NO FROM V_IMP_FLT_ULD_SHC ORDER BY PRIORITY DESC) 
		    WHERE ULD_KEY = t1.ULD_KEY AND FLT_KEY = t1.FLT_KEY AND FLT_DATE = t1.FLT_DATE AND AWB_NO = T2.AWB_NO) splCode,
		    t2.dest,
		    t1.locn_pcs rclPcs,
		    t1.locn_wt rclWt  
		  FROM awb_inventory t1,
		    awb t2
		  WHERE t1.uld_key=#uldNo# and t1.awb_no = t2.awb_no (+)
		  AND t1.awb_date = t2.awb_date (+)
		  AND t1.uld_key IS NOT NULL
		  AND NOT EXISTS
		    (SELECT NULL
		    FROM exp_pmanifest_uld_awb
		    WHERE awb_no = t1.awb_no
		    AND awb_date = t1.awb_date
		     AND uld_bt_no= t1.uld_key 
		    )
   </select>
	<insert id="insertSecJOHdr_MaintainSCJO" parameterClass="cargo.cms.export.bo.JobOrderBO">
		Insert into EXP_SEC_CHK_JO (JO_NO,AWB_NO,AWB_DATE,JO_TYPE,PC,WT,STATUS,CHARGE_TO,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,FLT_KEY,FLT_DATE,TR_TYPE,ORIG,BSB_IND) values 
		(lpad(EXP_SEC_CHK_JO_SEQ.nextVal,7,'0'),#awbNo#,to_char((SELECT AWB_DATE FROM AWB WHERE AWB_NO =#awbNo# AND AWB_CLOSED_YN='N'),'DDMONYY'),
		#jobOrderType#,#pc#,#wt#,'NEW',#chargeTo#,#lmUserId#,sysdate,#lmUserId#,sysdate,#fltKey#,to_date(#fltDate#,'DDMONYY'),'CSCJO',#orig#,#bsbInd#)
	</insert>
	<select id="validateAWB_MaintainSCJO" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
		select COUNT(1) from   awb where  awb_no = #awbNo#	and awb_closed_yn = 'N'
	</select>
	<update id="voidSCJO_MaintainSCJO" parameterClass="cargo.cms.export.bo.JobOrderBO">
		UPDATE EXP_SEC_CHK_JO SET STATUS = 'VOID',LM_USER_ID=#lmUserId#,LM_DATE=sysdate, TR_TYPE ='VSCJO' WHERE JO_NO = #joNumber#
	</update>
<select id="sqlGetLoggedInCustNo" parameterClass="java.lang.String"  resultClass="java.lang.String">
		SELECT CUST_NO FROM SEC_USER WHERE CODE = #userId#
	</select>
	<select id="sqlGetEmptyIndFromImpRampChkDtlLS" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
    	select empty_ind from imp_ramp_chk_dtl where flt_key=#FLT_KEY# AND flt_date=#FLT_DATE# and uld_key=#ULD_KEY# and BRKDN_COMPL_YN ='N'
	</select>
	<select id="sqlGetULDDtlsForLS" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.PreManifestAWBBO" >
    	select flt_type fltType,flt_key fltKey,to_char(flt_date,'DDMONYY') fltDate from uld_inventory where uld_key=#PARAM# 
	</select>
	
<select id="chkULDOwnedInventory"  parameterClass="java.lang.String" resultClass="java.lang.String">
		select COUNT(1) from  uld_inventory where  uld_key = #uldKey#  and owned_inv = 'Y' and loc_code is not null
	</select>
<!-- Common Validation -->
	<select id="sqlFetchIfBasePalletIsEmpty" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE EIC_FLG='Y' AND EMPTY_FLG='N' AND BASE_PLT=#uldKey#
	</select>
	
	<select id="sqlFetchIfULDisEIC" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_INVENTORY WHERE EIC_FLG='Y' AND ULD_KEY = #uldKey# and owned_inv = 'Y'
	</select>
	<select id="fetchHcontainerDummyList" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
    select  p.uld_bt_no AS uldBtNo,
            p.assigned_pcs AS assignedPc,
            P.assigned_wt AS assignedWt,
            P.awb_no as awbNo,
            to_char(p.awb_date,'DDMONYY') as awbDate,
            P.PPK_TYPE AS pkgType,
            contr_code AS contrCode,
            CONCAT(CONCAT(SUBSTR(P.awb_no,0,3),'-'),SUBSTR(P.awb_no,4)) as awbNoDisplay,
            p.unldg_pt as unldgpt
      from 
            exp_pmanifest_uld_awb p,
            exp_pmanifest_uld q 
   where
			  p.flt_key = q.flt_key and 
			  p.flt_date = q.flt_date and
			  p.uld_bt_no = q.uld_bt_no and
			  p.FLT_KEY = #fltKey# AND
			  p.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
              p.awb_no=#awbNo# AND
              P.AWB_DATE=to_date(#awbDate#,'DDMONYY')
        AND P.ULD_BT_NO IN (select RULE_VALUE from cmsrules where RULE_CODE='Dummy_H_Container') ORDER BY uldBtNo
        </select>
		 <select id="fetchHcontainerRemainList" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
    select  p.uld_bt_no AS uldBtNo,
            p.assigned_pcs AS assignedPc,
            P.assigned_wt AS assignedWt,
            P.awb_no as awbNo,
            to_char(p.awb_date,'DDMONYY') as awbDate,
            P.PPK_TYPE AS pkgType,
            contr_code AS contrCode,
            CONCAT(CONCAT(SUBSTR(P.awb_no,0,3),'-'),SUBSTR(P.awb_no,4)) as awbNoDisplay,
            p.unldg_pt as unldgpt
      from 
            exp_pmanifest_uld_awb p,
            exp_pmanifest_uld q 
   where
			  p.flt_key = q.flt_key and 
			  p.flt_date = q.flt_date and
			  p.uld_bt_no = q.uld_bt_no and
			  p.FLT_KEY = #fltKey# AND
			  p.FLT_DATE = to_date(#fltDate#,'DDMONYY') and 
              p.awb_no=#awbNo# AND
              P.AWB_DATE=to_date(#awbDate#,'DDMONYY') AND
			  	 ((q.bb_ind = 'Y' or q.new_checkin_uld='Y' 
			  or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(p.uld_bt_no, 1, 3)) = 'Y'))
        AND P.ULD_BT_NO NOT IN (select RULE_VALUE from cmsrules where RULE_CODE='Dummy_H_Container') ORDER BY uldBtNo
        </select>
<select id="sqlFetchAwbInvPcsWtForAutoPreman" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT SUM(LOCN_PCS) INV_PCS, SUM(LOCN_WT) INV_WT FROM AWB_INVENTORY WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND ULD_KEY=#uldKey#
	</select>      
	<!-- AWB/ULD Remarks :: Common Component :: Begins -->
   		<select id="sqlFetchRemarkFrmAwbRmk" parameterClass="java.util.HashMap" resultClass="java.lang.String">
   			SELECT RMK FROM AWB_RMK WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND RMK_TYPE=#rmkType#
   		</select>
   		
   		<update id="sqlUpdateAwbRmkInAWB" parameterClass="java.util.HashMap">
   			UPDATE AWB SET AWB_RMK=#remarks# WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY')
   		</update>
   		
   		<select id="sqlFetchRemarkFrmUldInv" parameterClass="java.util.HashMap" resultClass="java.lang.String">
   			SELECT GEN_RMK FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey#
   		</select>   		
   		<update id="sqlUpdateUldRmk" parameterClass="java.util.HashMap">
   			UPDATE ULD_INVENTORY SET GEN_RMK=#remarks# WHERE ULD_KEY=#uldKey#
   		</update>
		<select id="fetchSecSerialNoForPPKCargoRCL" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT securenet_serial_no FROM EXP_PRE_RCL_DTL WHERE PRE_RCL_NO=#preRCLNo# AND ULD_KEY=#uldKey#
	</select>
	
	<select id="fetchSecSerialNoForMixCargoRCL" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT securenet_serial_no FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRCLNo# AND ULD_KEY=#uldKey#
	</select>
   <!-- AWB/ULD Remarks :: Common Component :: Ends -->
   <select id="getUAFUldWeights"  parameterClass="cargo.cms.export.bo.UAFBO" resultClass="cargo.cms.export.bo.UAFBO">	
		 select tare_weight as tareWt, gross_weight as grossWt from uld_inventory where uld_key = #uldNumber#
	</select>
	<!--  -->
	<!-- e-Pouch -->
	<!--  -->
	<!-- Is Valid Departure Flight -->
	<select id="sqlGetIsValidDepartureFlt" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM FLT_OPR
			WHERE FLT_TYPE = 'D' AND FLT_KEY = #FLT_KEY# AND SCH_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
		]]>
	</select>	
	<!-- Is AWB Scan Record Exist -->
	<select id="sqlGetIsScanRecordExist" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM AWB_POUCH
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</select>
	<!-- Create a New AWB Scan Record -->
	<insert id="sqlInsertCreateScanRecord" parameterClass="java.util.Map">
		<![CDATA[
			INSERT INTO AWB_POUCH
			  (
			    TR_NO, AWB_NO, AWB_DATE,
			    CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
			  )
			  VALUES
			  (
			    AWB_POUCH_SEQ.NEXTVAL, #AWB_NO#, TO_DATE(#AWB_DATE#, 'DDMONYY'), 
			    #USER_ID#, SYSDATE, #USER_ID#, SYSDATE
			  )
		]]>
	</insert>
	<!-- Update AWB/Pouch Scan Time -->
	<update id="sqlUpdateAWBPouchScanTime" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB_POUCH
			SET 
			AWB_SCAN_TIME = SYSDATE, AWB_SCAN_USER_ID = #USER_ID#,
			POUCH_SCAN_TIME = SYSDATE, POUCH_SCAN_USER_ID = #USER_ID#,
			TR_TYPE = 'SCNPOAW', SCAN_STATE = DECODE(SCAN_STATE,'SUCCESS','SUCCESS',NULL), COMMENTS = NULL, SCAN_PIECES = #SCAN_PIECES#,
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>	
	<!-- Update AWB Scan Time -->
	<update id="sqlUpdateAWBScanTime" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB_POUCH
			SET AWB_SCAN_TIME = SYSDATE, AWB_SCAN_USER_ID = #USER_ID#,
			TR_TYPE = 'SCNAWB', SCAN_STATE = DECODE(SCAN_STATE,'SUCCESS','SUCCESS',NULL), COMMENTS = NULL,
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>
	<!-- Update Pouch Scan Time -->
	<update id="sqlUpdatePouchScanTime" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB_POUCH
			SET POUCH_SCAN_TIME = SYSDATE, POUCH_SCAN_USER_ID = #USER_ID#,
			TR_TYPE = 'SCNPOU', SCAN_STATE = DECODE(SCAN_STATE,'SUCCESS','SUCCESS',NULL), COMMENTS = NULL, SCAN_PIECES = #SCAN_PIECES#,
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>


	<!-- Update AWB/Pouch Scan Failure -->
	<update id="sqlUpdateAWBPouchScanFailure" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB_POUCH
			SET SCAN_STATE = 'FAILURE',
		]]>
		<isEqual property="TYPE" compareValue="AWB">
			TR_TYPE = 'SCNAWB',
		</isEqual>
		<isEqual property="TYPE" compareValue="POUCH">
			TR_TYPE = 'SCNPOU',
		</isEqual>
		<![CDATA[
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>

	<update id="sqlUpdateAWBPouchScanSUCCESS" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB_POUCH
			SET SCAN_STATE = 'SUCCESS',
		]]>
		<isEqual property="TYPE" compareValue="AWB">
			TR_TYPE = 'SCNAWB',
		</isEqual>
		<isEqual property="TYPE" compareValue="POUCH">
			TR_TYPE = 'SCNPOU',
		</isEqual>
		<![CDATA[
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>

	<!-- Update Uplift Status On Finalise -->
	<update id="sqlUpdateUpliftStatusOnFinalize" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB_POUCH POUCH
			SET 
			AWB_UPLIFT_STATUS = 
				CASE
					WHEN FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') THEN
						DECODE(AWB_UPLIFT_STATUS, 'TOUPLIFT', 'UPLIFTED', AWB_UPLIFT_STATUS)
					ELSE AWB_UPLIFT_STATUS
				END,
			POUCH_UPLIFT_STATUS = 
				CASE
					WHEN POUCH_FLT_KEY = #FLT_KEY# AND POUCH_FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') THEN
						DECODE(POUCH_UPLIFT_STATUS, 'TOUPLIFT', 'UPLIFTED', POUCH_UPLIFT_STATUS)
					ELSE POUCH_UPLIFT_STATUS
				END,
			TR_TYPE = 'FINPOU', COMMENTS = NULL,
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE (FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY'))
			OR (POUCH_FLT_KEY = #FLT_KEY# AND POUCH_FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY'))
		]]>
	</update>
	<!-- Update Uplift Status On Un-Finalise -->
	<update id="sqlUpdateUpliftStatusOnUnFinalize" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB_POUCH
			SET
			AWB_UPLIFT_STATUS = 
				CASE
					WHEN FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') THEN
						DECODE(AWB_UPLIFT_STATUS, 'UPLIFTED', 'TOUPLIFT', AWB_UPLIFT_STATUS)
					ELSE AWB_UPLIFT_STATUS
				END,
			POUCH_UPLIFT_STATUS = 
				CASE
					WHEN POUCH_FLT_KEY = #FLT_KEY# AND POUCH_FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') THEN
						DECODE(POUCH_UPLIFT_STATUS, 'UPLIFTED', 'TOUPLIFT', POUCH_UPLIFT_STATUS)
					ELSE POUCH_UPLIFT_STATUS
				END, 
			TR_TYPE = 'NFINPOU', COMMENTS = NULL,
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE (FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY'))
			OR (POUCH_FLT_KEY = #FLT_KEY# AND POUCH_FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY'))
		]]>
	</update>	
	<!-- Get AWB Type (Import/Export/Transit) -->
	<select id="sqlGetAWBType" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT
			CASE
			  WHEN ORIG <> 'HKG' AND DEST <> 'HKG' THEN 'T'
			  WHEN ORIG = 'HKG' THEN 'E'
			  WHEN DEST = 'HKG' THEN 'I'
			  ELSE 'T'
			END
			FROM AWB
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</select>
	<!-- Get AWB Date -->
	<select id="sqlGetAWBDate" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT PKG_COMMON.GET_AWB_DATE(#PARAM#) FROM DUAL
		]]>
	</select>
	<!-- Get AWB Date -->
	<select id="sqlGetScanAWBDate" parameterClass="java.lang.String"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT PKG_COMMON.GET_AWB_DATE_FOR_SCAN(#PARAM#) FROM DUAL
		]]>
	</select>		
	<!-- Get AWB Direct Shipper Flag -->
	<select id="sqlGetIsDirectShipper" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM AWB
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
			AND ACCEPT_MODE = 'LDS'
		]]>
	</select>
	<!-- Verify whether Any Scanning Done -->
	<select id="sqlGetIsAWBPouchScanned" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM AWB_POUCH
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
			AND (
				AWB_SCAN_TIME IS NOT NULL OR AWB_UPLIFT_TIME IS NOT NULL OR 
				POUCH_SCAN_TIME IS NOT NULL OR POUCH_UPLIFT_TIME IS NOT NULL
			)
		]]>
	</select>	
	<!-- Get AWB/Pouch Data -->
	<select id="sqlGetAWBPouchData" parameterClass="java.util.Map"
		resultClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			SELECT
			AWB_NO awbNo, TO_CHAR(AWB_DATE, 'DDMONYY') awbDate,
			FLT_KEY awbFlt, TO_CHAR(FLT_DATE, 'DDMONYY') awbFltDate,
			POUCH_FLT_KEY POUCHFlt, TO_CHAR(POUCH_FLT_DATE, 'DDMONYY') pouchFltDate,
			TO_CHAR(AWB_SCAN_TIME, 'DDMONYY HH24:MI') awbScanTime, 
			TO_CHAR(POUCH_SCAN_TIME, 'DDMONYY HH24:MI') pouchScanTime,
			TO_CHAR(AWB_UPLIFT_TIME, 'DDMONYY HH24:MI') awbUpliftTime, 
			TO_CHAR(POUCH_UPLIFT_TIME, 'DDMONYY HH24:MI') pouchUpliftTime		
			FROM AWB_POUCH
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</select>	
	<!-- Get AWB Uplift Data -->
	<select id="sqlGetAWBUpliftData" parameterClass="java.util.Map"
		resultClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			SELECT 
			FLT_KEY fltKey, TO_CHAR(AWB_SCAN_TIME, 'DDMONYY HH24:MI') awbScanTime,
			AWB_UPLIFT_STATUS awbUpliftStatus
			FROM AWB_POUCH
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
			AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND DESTINATION = #PORT#
		]]>
	</select>
	<!-- Get AWB Another Flight Uplift Data -->
	<select id="sqlGetAWBAnotherUpliftData" parameterClass="java.util.Map"
		resultClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			WITH PMANFLT AS (
				SELECT FLT_KEY || NVL2(FLT_KEY, '/', '') || TO_CHAR(FLT_DATE, 'DDMONYY') AS PREMANFLT
				FROM EXP_PMANIFEST_AWB
				WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
				UNION
				SELECT FLT_KEY || NVL2(FLT_KEY, '/', '') || TO_CHAR(FLT_DATE, 'DDMONYY') AS PREMANFLT
				FROM EXP_PMAN_TARMAC_AWB
				WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')      
			)		
			SELECT
			FLT_KEY fltKey, TO_CHAR(FLT_DATE, 'DDMONYY') fltDate, DESTINATION port,
			TO_CHAR(AWB_SCAN_TIME, 'DDMONYY HH24:MI') awbScanTime,
			AWB_UPLIFT_STATUS awbUpliftStatus, (
        		SELECT
        		STRAGG(STRINGDELIM(PREMANFLT, ', '))
        		FROM PMANFLT
      		) preManFlt
			FROM AWB_POUCH
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</select>
	<!-- Get AWB pre-manifest Data -->
	<select id="sqlGetAWBPremanifestData" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			WITH PMANFLT AS (
				SELECT FLT_KEY || NVL2(FLT_KEY, '/', '') || TO_CHAR(FLT_DATE, 'DDMONYY') 
					|| NVL2(FLT_KEY, ' (', '') || NVL2(FLT_KEY, UNLDG_PT, '') || NVL2(FLT_KEY, ')', '') AS PREMANFLT
				FROM EXP_PMANIFEST_AWB
				WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
				UNION
				SELECT FLT_KEY || NVL2(FLT_KEY, '/', '') || TO_CHAR(FLT_DATE, 'DDMONYY') 
					|| NVL2(FLT_KEY, ' (', '') || NVL2(FLT_KEY, UNLDG_PT, '') || NVL2(FLT_KEY, ')', '') AS PREMANFLT
				FROM EXP_PMAN_TARMAC_AWB
				WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')    
			)
			SELECT
        	STRAGG(STRINGDELIM(PREMANFLT, ', ')) preManFlt
        	FROM PMANFLT			
		]]>
	</select>	
	<!-- Get AWB Pouch Uplift Data -->
	<select id="sqlGetPouchUpliftData" parameterClass="java.util.Map"
		resultClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			SELECT 
			POUCH_FLT_KEY fltKey, TO_CHAR(POUCH_SCAN_TIME, 'DDMONYY HH24:MI') pouchScanTime,
			POUCH_UPLIFT_STATUS pouchUpliftStatus
			FROM AWB_POUCH
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
			AND POUCH_FLT_KEY = #FLT_KEY# AND POUCH_FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND POUCH_DESTINATION = #PORT#
		]]>
	</select>
	<!-- Get AWB Pouch Another Flight Uplift Data -->
	<select id="sqlGetPouchAnotherUpliftData" parameterClass="java.util.Map"
		resultClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			WITH PMANFLT AS (
				SELECT FLT_KEY || NVL2(FLT_KEY, '/', '') || TO_CHAR(FLT_DATE, 'DDMONYY') AS PREMANFLT
				FROM EXP_PMANIFEST_AWB
				WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
				UNION
				SELECT FLT_KEY || NVL2(FLT_KEY, '/', '') || TO_CHAR(FLT_DATE, 'DDMONYY') AS PREMANFLT
				FROM EXP_PMAN_TARMAC_AWB
				WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')      
			)		
			SELECT
			POUCH_FLT_KEY fltKey, TO_CHAR(POUCH_FLT_DATE, 'DDMONYY') fltDate, POUCH_DESTINATION port,
			TO_CHAR(POUCH_SCAN_TIME, 'DDMONYY HH24:MI') pouchScanTime,
			POUCH_UPLIFT_STATUS pouchUpliftStatus, (
        		SELECT
        		STRAGG(STRINGDELIM(PREMANFLT, ', '))
        		FROM PMANFLT
      		) preManFlt
			FROM AWB_POUCH
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</select>	
	<!-- Update AWB/Pouch Uplift Status -->
	<update id="sqlUpdateUpliftStatus" parameterClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			UPDATE AWB_POUCH
			SET SCAN_FLT_STATE = #indicator#, 
			COMMENTS = NULL,
		]]>
		<isNotEmpty property="awbUpliftStatus">
			<isEmpty property="pouchUpliftStatus">
				TR_TYPE = 'UPLAWB',
			</isEmpty>
			<isNotEmpty property="pouchUpliftStatus">
				TR_TYPE = 'UPLPOAW', SCAN_PIECES = #scanPieces#,
			</isNotEmpty>
		</isNotEmpty>
		<isNotEmpty property="pouchUpliftStatus">
			<isEmpty property="awbUpliftStatus">
				TR_TYPE = 'UPLPOU', SCAN_PIECES = #scanPieces#,
			</isEmpty>
		</isNotEmpty>
		<isNotEmpty property="awbUpliftStatus">
			FLT_KEY = #awbFlt#, FLT_DATE = TO_DATE(#awbFltDate#, 'DDMONYY'),
			DESTINATION = #awbPort#,
			AWB_UPLIFT_STATUS = #awbUpliftStatus#,
			AWB_UPLIFT_USER_ID = #userID#, AWB_UPLIFT_TIME = SYSDATE,
		</isNotEmpty>
		<isNotEmpty property="pouchUpliftStatus">
			POUCH_FLT_KEY = #pouchFlt#, POUCH_FLT_DATE = TO_DATE(#pouchFltDate#, 'DDMONYY'),
			POUCH_DESTINATION = #pouchPort#,
			POUCH_UPLIFT_STATUS = #pouchUpliftStatus#,
			POUCH_UPLIFT_USER_ID = #userID#, POUCH_UPLIFT_TIME = SYSDATE,
		</isNotEmpty>
		<![CDATA[
			LM_DATE = SYSDATE, LM_USER_ID = #userID#
			WHERE AWB_NO = #awbNo# AND AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')
		]]>
	</update>
	<!-- Update AWB/Pouch Uplift Status -->
	<update id="sqlUpdateUpliftFailure" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB_POUCH
			SET SCAN_FLT_STATE = #INDICATOR#, COMMENTS = #COMMENTS#, 
		]]>
		<isEqual property="TYPE" compareValue="AWB">
			TR_TYPE = 'UPLAWB',
		</isEqual>
		<isEqual property="TYPE" compareValue="POUCH">
			TR_TYPE = 'UPLPOU',
		</isEqual>
		<isEqual property="TYPE" compareValue="BOTH">
			TR_TYPE = 'UPLPOAW',
		</isEqual>				
		<![CDATA[
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>	
	<!-- Remove AWB/Pouch Uplift Status -->
	<update id="sqlUpdateRemoveUpliftStatus" parameterClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			UPDATE AWB_POUCH
			SET
			TR_TYPE = 'REMPOAW',
			AWB_UPLIFT_STATUS = NULL, AWB_UPLIFT_TIME = NULL, AWB_UPLIFT_USER_ID = NULL,
			POUCH_UPLIFT_STATUS = NULL, POUCH_UPLIFT_TIME = NULL, POUCH_UPLIFT_USER_ID = NULL,
			FLT_KEY = NULL, FLT_DATE = NULL, POUCH_FLT_KEY = NULL, POUCH_FLT_DATE = NULL,
			DESTINATION = NULL, POUCH_DESTINATION = NULL, SCAN_PIECES = 0, COMMENTS = NULL,
			LM_DATE = SYSDATE, LM_USER_ID = #userID#
			WHERE AWB_NO = #awbNo# AND AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')
			AND FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
		]]>
	</update>	
	<!-- Remove AWB Uplift Status -->
	<update id="sqlUpdateRemoveAWBUpliftStatus" parameterClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			UPDATE AWB_POUCH
			SET
			TR_TYPE = 'REMAWB',
			AWB_UPLIFT_STATUS = NULL, AWB_UPLIFT_TIME = NULL, AWB_UPLIFT_USER_ID = NULL,
			FLT_KEY = NULL, FLT_DATE = NULL, 
			DESTINATION = NULL, COMMENTS = NULL,
			LM_DATE = SYSDATE, LM_USER_ID = #userID#
			WHERE AWB_NO = #awbNo# AND AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')
			AND FLT_KEY = #awbFlt# AND FLT_DATE = TO_DATE(#awbFltDate#, 'DDMONYY')
		]]>
	</update>
	<!-- Remove Pouch Uplift Status -->
	<update id="sqlUpdateRemovePouchUpliftStatus" parameterClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			UPDATE AWB_POUCH
			SET
			TR_TYPE = 'REMPOU',
			POUCH_UPLIFT_STATUS = NULL, POUCH_UPLIFT_TIME = NULL, POUCH_UPLIFT_USER_ID = NULL,
			POUCH_FLT_KEY = NULL, POUCH_FLT_DATE = NULL,
			POUCH_DESTINATION = NULL, SCAN_PIECES = 0, COMMENTS = NULL,
			LM_DATE = SYSDATE, LM_USER_ID = #userID#
			WHERE AWB_NO = #awbNo# AND AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')
			AND POUCH_FLT_KEY = #pouchFlt# AND POUCH_FLT_DATE = TO_DATE(#pouchFltDate#, 'DDMONYY')
		]]>
	</update>
	<!-- Remove AWB Receive Data -->
	<update id="sqlUpdateRemoveAWBReceiveData" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB_POUCH
			SET
			TR_TYPE = 'REMAWRE',
			AWB_SCAN_TIME = NULL, AWB_SCAN_USER_ID = NULL,
			COMMENTS = NULL,
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')			
		]]>
	</update>
	<!-- Remove Pouch Receive Data -->
	<update id="sqlUpdateRemovePouchReceiveData" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB_POUCH
			SET
			TR_TYPE = 'REMPORE',
			POUCH_SCAN_TIME = NULL, POUCH_SCAN_USER_ID = NULL,
			COMMENTS = NULL,
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>		
	<!-- Is Pre-manifest Finalised -->
	<select id="sqlGetIsManifestFinalised" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM FLT_OPR_EVENTS
			WHERE FLT_TYPE = 'D' AND FLT_KEY = #FLT_KEY# AND SCH_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND FINAL_MANF_IND = 'Y'
		]]>
	</select>	
	<!-- Verify whether Pre-manifest Associated to a Flight Exist or Not -->
	<select id="sqlGetIsCurrentFlightPreManifestExist" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(SUM(CNT), 0, 'N', 'Y')
			FROM (
			  SELECT COUNT(1) CNT
			  FROM EXP_PMANIFEST_AWB
			  WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
			  AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND UNLDG_PT = #PORT#
			  UNION
			  SELECT COUNT(1) CNT
			  FROM EXP_PMAN_TARMAC_AWB
			  WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
			  AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND UNLDG_PT = #PORT#
			)
		]]>
	</select>
	<!-- Verify whether Pre-manifest Associated to a Any Other Flight Exist or Not -->
	<select id="sqlGetIsOtherFlightPreManifestExist" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			WITH PMAN_AWB_CNT AS (
				SELECT SUM(CNT) CNT
				FROM (
				  SELECT COUNT(1) CNT
				  FROM EXP_PMANIFEST_AWB
				  WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
				  UNION
				  SELECT COUNT(1) CNT
				  FROM EXP_PMAN_TARMAC_AWB
				  WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
				)
			),
			PMAN_FLT_CNT AS (	
				SELECT SUM(CNT) CNT
				FROM (
				  SELECT COUNT(1) CNT
				  FROM EXP_PMANIFEST_AWB
				  WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
				  AND (FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND UNLDG_PT = #PORT#)
				  UNION
				  SELECT COUNT(1) CNT
				  FROM EXP_PMAN_TARMAC_AWB
				  WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
				  AND (FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND UNLDG_PT = #PORT#)
				)
			)
			SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM DUAL
			WHERE ((SELECT CNT FROM PMAN_AWB_CNT) - (SELECT CNT FROM PMAN_FLT_CNT)) > 0
		]]>
	</select>	
	<!-- Verify whether Pre-manifest Exist or Not -->
	<select id="sqlGetIsPreManifestExist" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			SELECT DECODE(SUM(CNT), 0, 'N', 'Y')
			FROM (
			  SELECT COUNT(1) CNT
			  FROM EXP_PMANIFEST_AWB
			  WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
			  UNION
			  SELECT COUNT(1) CNT
			  FROM EXP_PMAN_TARMAC_AWB
			  WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
			)
		]]>
	</select>
	<!-- Verify whether Unloading Port is valid Flight Off Point -->
	<select id="sqlGetIsFlightPort" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
			 SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			 FROM FLT_OPR_LEG
			 WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND OFF_POINT = #PORT#
		]]>
	</select>					
	<!-- Get AWB SHC -->
	<select id="sqlGetAWBSHCs" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT 
			AWB_NO,
			SPL_CODE1, SPL_CODE2, SPL_CODE3,
			SPL_CODE4, SPL_CODE5, SPL_CODE6,
			SPL_CODE7, SPL_CODE8, SPL_CODE9
			FROM AWB
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY') 
			AND ROWNUM = 1
		]]>
	</select>
	<!-- Get Export CAR AWB SHC -->
	<select id="sqlGetExportCARAWBSHCs" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT 
			AWB_NO,
			SPL_CODE1, SPL_CODE2, SPL_CODE3,
			SPL_CODE4, SPL_CODE5, SPL_CODE6,
			SPL_CODE7, SPL_CODE8, SPL_CODE9
			FROM EXP_CAR
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY') 
			AND ROWNUM = 1
		]]>
	</select>
	<!-- Get Import CAR AWB SHC -->
	<select id="sqlGetImportCARAWBSHCs" parameterClass="java.util.Map"
		resultClass="java.util.HashMap">
		<![CDATA[
			SELECT 
			AWB_NO,
			SPL_CODE1, SPL_CODE2, SPL_CODE3,
			SPL_CODE4, SPL_CODE5, SPL_CODE6,
			SPL_CODE7, SPL_CODE8, SPL_CODE9
			FROM IMP_CAR_AWB
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY') 
			AND ROWNUM = 1
		]]>
	</select>	
	<!-- Replace AWB SHC 'EAW', 'EAP' to NULL -->
	<update id="sqlUpdateReplaceAWBSHCForPouch" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB
			SET 
			SPL_CODE1 = DECODE(SPL_CODE1, 'EAW', NULL, 'EAP', NULL, SPL_CODE1),
			SPL_CODE2 = DECODE(SPL_CODE2, 'EAW', NULL, 'EAP', NULL, SPL_CODE2),
			SPL_CODE3 = DECODE(SPL_CODE3, 'EAW', NULL, 'EAP', NULL, SPL_CODE3),
			SPL_CODE4 = DECODE(SPL_CODE4, 'EAW', NULL, 'EAP', NULL, SPL_CODE4),
			SPL_CODE5 = DECODE(SPL_CODE5, 'EAW', NULL, 'EAP', NULL, SPL_CODE5),
			SPL_CODE6 = DECODE(SPL_CODE6, 'EAW', NULL, 'EAP', NULL, SPL_CODE6),
			SPL_CODE7 = DECODE(SPL_CODE7, 'EAW', NULL, 'EAP', NULL, SPL_CODE7),
			SPL_CODE8 = DECODE(SPL_CODE8, 'EAW', NULL, 'EAP', NULL, SPL_CODE8),
			SPL_CODE9 = DECODE(SPL_CODE9, 'EAW', NULL, 'EAP', NULL, SPL_CODE9),
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>
	<!-- Replace Export CAR AWB SHC 'EAW', 'EAP' to NULL -->
	<update id="sqlUpdateReplaceExportCARAWBSHCForPouch" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE EXP_CAR
			SET 
			SPL_CODE1 = DECODE(SPL_CODE1, 'EAW', NULL, 'EAP', NULL, SPL_CODE1),
			SPL_CODE2 = DECODE(SPL_CODE2, 'EAW', NULL, 'EAP', NULL, SPL_CODE2),
			SPL_CODE3 = DECODE(SPL_CODE3, 'EAW', NULL, 'EAP', NULL, SPL_CODE3),
			SPL_CODE4 = DECODE(SPL_CODE4, 'EAW', NULL, 'EAP', NULL, SPL_CODE4),
			SPL_CODE5 = DECODE(SPL_CODE5, 'EAW', NULL, 'EAP', NULL, SPL_CODE5),
			SPL_CODE6 = DECODE(SPL_CODE6, 'EAW', NULL, 'EAP', NULL, SPL_CODE6),
			SPL_CODE7 = DECODE(SPL_CODE7, 'EAW', NULL, 'EAP', NULL, SPL_CODE7),
			SPL_CODE8 = DECODE(SPL_CODE8, 'EAW', NULL, 'EAP', NULL, SPL_CODE8),
			SPL_CODE9 = DECODE(SPL_CODE9, 'EAW', NULL, 'EAP', NULL, SPL_CODE9),
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')			
		]]>
	</update>
	<!-- Replace Import CAR AWB SHC 'EAW', 'EAP' to NULL -->
	<update id="sqlUpdateReplaceImportCARAWBSHCForPouch" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE IMP_CAR_AWB CAR
			SET 
			SPL_CODE1 = DECODE(SPL_CODE1, 'EAW', NULL, 'EAP', NULL, SPL_CODE1),
			SPL_CODE2 = DECODE(SPL_CODE2, 'EAW', NULL, 'EAP', NULL, SPL_CODE2),
			SPL_CODE3 = DECODE(SPL_CODE3, 'EAW', NULL, 'EAP', NULL, SPL_CODE3),
			SPL_CODE4 = DECODE(SPL_CODE4, 'EAW', NULL, 'EAP', NULL, SPL_CODE4),
			SPL_CODE5 = DECODE(SPL_CODE5, 'EAW', NULL, 'EAP', NULL, SPL_CODE5),
			SPL_CODE6 = DECODE(SPL_CODE6, 'EAW', NULL, 'EAP', NULL, SPL_CODE6),
			SPL_CODE7 = DECODE(SPL_CODE7, 'EAW', NULL, 'EAP', NULL, SPL_CODE7),
			SPL_CODE8 = DECODE(SPL_CODE8, 'EAW', NULL, 'EAP', NULL, SPL_CODE8),
			SPL_CODE9 = DECODE(SPL_CODE9, 'EAW', NULL, 'EAP', NULL, SPL_CODE9),
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
			AND (
				SELECT MAX(AWB_TYPE) FROM AWB WHERE AWB.AWB_NO = CAR.AWB_NO AND AWB.AWB_DATE = CAR.AWB_DATE
			) = 'T'
		]]>
	</update>	
	<!-- Update AWB SHC -->
	<update id="sqlUpdateAWBSHCForPouch" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE AWB
			SET
			SPL_CODE1 = #SPL_CODE1#, SPL_CODE2 = #SPL_CODE2#, SPL_CODE3 = #SPL_CODE3#,
			SPL_CODE4 = #SPL_CODE4#, SPL_CODE5 = #SPL_CODE5#, SPL_CODE6 = #SPL_CODE6#,
			SPL_CODE7 = #SPL_CODE7#, SPL_CODE8 = #SPL_CODE8#, SPL_CODE9 = #SPL_CODE9#,
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>
	<!-- Update Export CAR AWB SHC -->
	<update id="sqlUpdateExportCARAWBSHCForPouch" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE EXP_CAR
			SET
			SPL_CODE1 = #SPL_CODE1#, SPL_CODE2 = #SPL_CODE2#, SPL_CODE3 = #SPL_CODE3#,
			SPL_CODE4 = #SPL_CODE4#, SPL_CODE5 = #SPL_CODE5#, SPL_CODE6 = #SPL_CODE6#,
			SPL_CODE7 = #SPL_CODE7#, SPL_CODE8 = #SPL_CODE8#, SPL_CODE9 = #SPL_CODE9#,
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY')
		]]>
	</update>
	<!-- Update Import CAR AWB SHC -->
	<update id="sqlUpdateImportCARAWBSHCForPouch" parameterClass="java.util.Map">
		<![CDATA[
			UPDATE IMP_CAR_AWB CAR
			SET
			SPL_CODE1 = #SPL_CODE1#, SPL_CODE2 = #SPL_CODE2#, SPL_CODE3 = #SPL_CODE3#,
			SPL_CODE4 = #SPL_CODE4#, SPL_CODE5 = #SPL_CODE5#, SPL_CODE6 = #SPL_CODE6#,
			SPL_CODE7 = #SPL_CODE7#, SPL_CODE8 = #SPL_CODE8#, SPL_CODE9 = #SPL_CODE9#,
			LM_DATE = SYSDATE, LM_USER_ID = #USER_ID#
			WHERE AWB_NO = #AWB_NO# AND AWB_DATE = TO_DATE(#AWB_DATE#, 'DDMONYY') 
			AND (
				SELECT MAX(AWB_TYPE) FROM AWB WHERE AWB.AWB_NO = CAR.AWB_NO AND AWB.AWB_DATE = CAR.AWB_DATE
			) = 'T'
		]]>
	</update>		
	<!-- Get Pre-manifested AWBs -->
	<select id="sqlGetPreManifestedAWBsForPouch" parameterClass="java.util.Map"
		resultClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			WITH CODE AS (
			  SELECT CODE, CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE = 'EXP_EPOUCH_STATUS'
			),
			SHC_MASTER AS (
			  SELECT CODE FROM MAST_SPL_HAND_CODE WHERE AWB_POUCH_UPLIFT = 'Y'
			),			
			PMAN_INIT AS (
			  SELECT PMAN.AWB_NO, PMAN.AWB_DATE, PMAN.FLT_KEY, PMAN.FLT_DATE,
			  PMAN.PMAN_PCS, PMAN.PMAN_WT, PMAN.UNLDG_PT, (
			  	SELECT NVL(MAX(AWB_PRINT_ORIGIN), 'N') PRINT
			  	FROM MAST_CITY
			  	WHERE CODE = AWB.DEST
			  ) PRINT,
			  DECODE(AWB.ACCEPT_MODE, 'LDS', 'Y', 'N') DIRECT_SHIPPER,
			  DECODE(AWB.AWB_TYPE, 'T', 'Y', 'N') TRANSIT, (
          	  	SELECT FUN_GET_PARENT_CARR(CARR_CODE) FROM MAST_AWB_PREFIX WHERE CODE = SUBSTR(PMAN.AWB_NO, 1, 3) AND DEF_YN = 'Y'
			  ) AWB_CARR_GROUP	  
			  FROM EXP_PMANIFEST_AWB PMAN
			  JOIN AWB AWB
			  ON PMAN.AWB_NO = AWB.AWB_NO AND PMAN.AWB_DATE = AWB.AWB_DATE
			  WHERE FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')			
			),
			AWB_FULL AS (
			  SELECT AWB.AWB_NO, AWB.AWB_DATE,
			  SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9
			  FROM AWB
			  JOIN PMAN_INIT PMAN
			  ON PMAN.AWB_NO = AWB.AWB_NO AND PMAN.AWB_DATE = AWB.AWB_DATE
			  UNION
			  SELECT AWB.AWB_NO, AWB.AWB_DATE,
			  SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9
			  FROM EXP_CAR AWB
			  JOIN PMAN_INIT PMAN
			  ON PMAN.AWB_NO = AWB.AWB_NO AND PMAN.AWB_DATE = AWB.AWB_DATE
			  UNION
			  SELECT AWB.AWB_NO, AWB.AWB_DATE,
			  SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9
			  FROM IMP_CAR_AWB AWB
			  JOIN PMAN_INIT PMAN
			  ON PMAN.AWB_NO = AWB.AWB_NO AND PMAN.AWB_DATE = AWB.AWB_DATE						
			),
			AWB_SHC AS (
			  SELECT AWB_NO, AWB_DATE, 
			  CASE
			  WHEN 'ECC' IN(SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9) THEN 'Y'
		      ELSE 'N'
			  END ECC,
			  CASE
			  WHEN 'EAW' IN(SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9) THEN 'Y'
			  ELSE 'N'
			  END EAW,
			  CASE
			  WHEN 'EAP' IN(SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9) THEN 'Y'
			  ELSE 'N'
			  END EAP,
			  CASE
			  WHEN (
			  	SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			    FROM SHC_MASTER 
			     WHERE CODE IN(SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9)
			    ) = 'Y' THEN 'Y'
			  ELSE 'N'
			  END SHC_INDICATOR
			  FROM AWB_FULL
			),
	        AWB_SHC_FINAL AS (
	          SELECT
	          AWB.AWB_NO, AWB.AWB_DATE,
	          INSTR(STRAGG(STRINGDELIM(EAP, ';')), 'Y') EAP,
	          INSTR(STRAGG(STRINGDELIM(EAW, ';')), 'Y') EAW,
	          INSTR(STRAGG(STRINGDELIM(ECC, ';')), 'Y') ECC,
	          INSTR(STRAGG(STRINGDELIM(SHC_INDICATOR, ';')), 'Y') SHC_INDICATOR
	          FROM AWB_SHC AWB
	          GROUP BY AWB.AWB_NO, AWB.AWB_DATE
	        ),
			PMAN AS (
		      SELECT
		      AWB.AWB_NO, AWB.AWB_DATE, PMAN.AWB_CARR_GROUP,
		      PMAN.FLT_KEY, PMAN.FLT_DATE,
		      PMAN.PMAN_PCS, PMAN.PMAN_WT, PMAN.UNLDG_PT,
			  PMAN.PRINT, PMAN.DIRECT_SHIPPER, PMAN.TRANSIT,	      
		      DECODE(EAP, 0, 'N', 'Y') EAP,
		      DECODE(ECC, 0, 'N', 'Y') ECC,
		      DECODE(EAW, 0, 'N', 'Y') EAW,
		      DECODE(SHC_INDICATOR, 0, 'N', 'Y') SHC_INDICATOR
		      FROM AWB_SHC_FINAL AWB
		      JOIN PMAN_INIT PMAN
		      ON AWB.AWB_NO = PMAN.AWB_NO AND AWB.AWB_DATE = PMAN.AWB_DATE
			),
			FINAL AS (	
				SELECT PMAN.AWB_NO, PMAN.AWB_NO awbNo, PMAN.AWB_DATE, TO_CHAR(PMAN.AWB_DATE, 'DDMONYY') awbDate, 
				PMAN.UNLDG_PT port, AWB.ORIG origin, AWB.DEST destination,
				PMAN.PMAN_PCS preManifestPcs, PMAN.PMAN_WT preManifestWt, (
					SELECT SUM(ASSIGNED_PCS) FROM EXP_PMANIFEST_ULD_AWB ULD
					WHERE ULD.FLT_KEY = PMAN.FLT_KEY AND ULD.FLT_DATE = PMAN.FLT_DATE 
					AND ULD.AWB_NO = PMAN.AWB_NO AND ULD.AWB_DATE = PMAN.AWB_DATE
				) buildUpPcs, (
					SELECT SUM(ASSIGNED_WT) FROM EXP_PMANIFEST_ULD_AWB ULD
					WHERE ULD.FLT_KEY = PMAN.FLT_KEY AND ULD.FLT_DATE = PMAN.FLT_DATE 
					AND ULD.AWB_NO = PMAN.AWB_NO AND ULD.AWB_DATE = PMAN.AWB_DATE
				) buildUpWt, (
				  SELECT CODE_DESC FROM CODE
				  WHERE CODE = (
		            CASE
		            WHEN POUCH.AWB_UPLIFT_STATUS IN('TOUPLIFT', 'UPLIFTED')
		              AND (
		            	PMAN.FLT_KEY <> POUCH.FLT_KEY OR PMAN.FLT_DATE <> POUCH.FLT_DATE OR PMAN.UNLDG_PT <> POUCH.DESTINATION
		              ) THEN 'NOTUPLIFTED'
		            WHEN POUCH.AWB_UPLIFT_STATUS IS NOT NULL THEN POUCH.AWB_UPLIFT_STATUS
		            ELSE
		              CASE
                    	WHEN PMAN.SHC_INDICATOR = 'Y' THEN 'NOTUPLIFTED'
                    	WHEN PMAN.AWB_CARR_GROUP <> 'CX' AND (
		                	  	SELECT FUN_GET_PARENT_CARR(MAX(OPR.CARR_CODE)) 
		                	  	FROM FLT_OPR OPR WHERE OPR.FLT_KEY = PMAN.FLT_KEY AND OPR.SCH_DATE = PMAN.FLT_DATE
		                	) = 'CX' THEN 'NOTUPLIFTED'		              
		                WHEN PMAN.DIRECT_SHIPPER = 'Y' THEN 'NOTUPLIFTED'
		                WHEN PMAN.TRANSIT = 'Y' THEN
		                CASE
		                  WHEN PMAN.PRINT = 'Y' THEN 'NOTUPLIFTED'
		                  ELSE
		                    CASE
		                      WHEN PMAN.EAP = 'N' AND PMAN.EAW = 'N' AND PMAN.ECC = 'N' THEN 'NOTUPLIFTED'
		                      WHEN PMAN.EAP = 'Y' THEN 'NOTUPLIFTED'
		                      WHEN PMAN.EAW = 'Y' THEN 'NOTREQUIRED'
		                      ELSE 'NOTREQUIRED'
		                    END
		                END
		                WHEN PMAN.TRANSIT = 'N' THEN
		                  CASE
		                    WHEN PMAN.PRINT = 'Y' THEN 'NOTUPLIFTED'
		                    ELSE
		                      CASE
		                        WHEN PMAN.EAP = 'N' AND PMAN.EAW = 'N' AND PMAN.ECC = 'N' THEN 'NOTUPLIFTED'
		                        ELSE 'NOTREQUIRED'
		                      END
		                  END              
		              END
		            END
		          )
		        ) awbUpliftStatus, (
				  SELECT CODE_DESC FROM CODE
				  WHERE CODE = (
		            CASE
		            WHEN POUCH.POUCH_UPLIFT_STATUS IN('TOUPLIFT', 'UPLIFTED') 
		              AND (
		              	PMAN.FLT_KEY <> POUCH.POUCH_FLT_KEY OR PMAN.FLT_DATE <> POUCH.POUCH_FLT_DATE OR PMAN.UNLDG_PT <> POUCH.POUCH_DESTINATION
		              ) THEN 'NOTUPLIFTED'
		            WHEN POUCH.POUCH_UPLIFT_STATUS IS NOT NULL THEN POUCH.POUCH_UPLIFT_STATUS
		            ELSE
		              CASE
                    	WHEN PMAN.SHC_INDICATOR = 'Y' THEN 'NOTUPLIFTED'
                    	WHEN PMAN.AWB_CARR_GROUP <> 'CX' AND (
		                	  	SELECT FUN_GET_PARENT_CARR(MAX(OPR.CARR_CODE)) 
		                	  	FROM FLT_OPR OPR WHERE OPR.FLT_KEY = PMAN.FLT_KEY AND OPR.SCH_DATE = PMAN.FLT_DATE
		                	) = 'CX' THEN 'NOTUPLIFTED'		              
		                WHEN PMAN.DIRECT_SHIPPER = 'Y' THEN 'NOTUPLIFTED'
		                WHEN PMAN.TRANSIT = 'Y' THEN
		                CASE
		                  WHEN PMAN.PRINT = 'Y' THEN 'NOTUPLIFTED'
		                  ELSE
		                    CASE
		                      WHEN PMAN.EAP = 'N' AND PMAN.EAW = 'N' AND PMAN.ECC = 'N' THEN 'NOTUPLIFTED'
		                      WHEN PMAN.EAP = 'Y' THEN 'NOTUPLIFTED'
		                      WHEN PMAN.EAW = 'Y' THEN 'NOTREQUIRED'
		                      ELSE 'NOTREQUIRED'
		                    END
		                END
		                WHEN PMAN.TRANSIT = 'N' THEN
		                  CASE
		                    WHEN PMAN.EAP = 'Y' THEN 'NOTUPLIFTED'
		                    ELSE 'NOTREQUIRED'
		                  END             
		              END
		            END
		          )
				) pouchUpliftStatus,
				POUCH.FLT_KEY awbFlt, TO_CHAR(POUCH.FLT_DATE, 'DDMONYY') awbFltDate,
				POUCH.POUCH_FLT_KEY pouchFlt, TO_CHAR(POUCH.POUCH_FLT_DATE, 'DDMONYY') pouchFltDate , TO_CHAR(POUCH.pouch_scan_time, 'DDMONYY HH24:MI') as pouchScanTime
				FROM PMAN
				JOIN AWB
				ON PMAN.AWB_NO = AWB.AWB_NO AND PMAN.AWB_DATE = AWB.AWB_DATE
				LEFT OUTER JOIN AWB_POUCH POUCH
				ON PMAN.AWB_NO = POUCH.AWB_NO AND PMAN.AWB_DATE = POUCH.AWB_DATE
				WHERE PMAN.FLT_KEY = #FLT_KEY# AND PMAN.FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
					]]>
				<isNotEmpty property="LOGIN_CARRIER">
				   AND ( AWB.CARR_CODE = #LOGIN_CARRIER#
                        OR  AWB.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #LOGIN_CARRIER#))             
            	</isNotEmpty>
			)
	
		<![CDATA[
			SELECT * FROM FINAL
			WHERE 1 = 1
		]]>
		<isEqual property="OS_FLAG" compareValue="Y">
			<![CDATA[
				AND (
					awbUpliftStatus IN((SELECT CODE_DESC FROM CODE WHERE CODE IN('NOTUPLIFTED'))) OR 
					pouchUpliftStatus IN((SELECT CODE_DESC FROM CODE WHERE CODE IN('NOTUPLIFTED')))
				) AND NOT EXISTS (
					SELECT NULL
				  	FROM V_DDT_DTL DDT
				  	WHERE DDT.AWB_NO = FINAL.AWB_NO AND DDT.AWB_DATE = FINAL.AWB_DATE
				  	AND DDT.SHP_TRF_TYPE = 'IF'
				)		
			]]>
		</isEqual>
		<![CDATA[
			ORDER BY port, awbNo
		]]>				
	</select>
	<!-- Get Non Pre-manifested AWBs -->
	<select id="sqlGetNonPreManifestedAWBsForPouch" parameterClass="java.util.Map"
		resultClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			WITH CODE AS (
			  SELECT CODE, CODE_DESC FROM MAST_CODE_DTL WHERE CODE_TYPE = 'EXP_EPOUCH_STATUS'
			),
			SHC_MASTER AS (
			  SELECT CODE FROM MAST_SPL_HAND_CODE WHERE AWB_POUCH_UPLIFT = 'Y'
			),			
			PMAN AS (
			  SELECT AWB_NO, AWB_DATE, FLT_KEY, FLT_DATE, UNLDG_PT
			  FROM EXP_PMANIFEST_AWB
			  WHERE FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
			  UNION
			  SELECT AWB_NO, AWB_DATE, FLT_KEY, FLT_DATE, UNLDG_PT
			  FROM EXP_PMAN_TARMAC_AWB
			  WHERE FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') 
			),			
			POUCH AS (
			  SELECT POUCH.AWB_NO, POUCH.AWB_DATE, (
          	  	SELECT FUN_GET_PARENT_CARR(CARR_CODE) FROM MAST_AWB_PREFIX WHERE CODE = SUBSTR(POUCH.AWB_NO, 1, 3) AND DEF_YN = 'Y'
			  ) AWB_CARR_GROUP,
			  POUCH.FLT_KEY, POUCH.FLT_DATE, (
			  	SELECT FUN_GET_PARENT_CARR(MAX(OPR.CARR_CODE)) 
			  	FROM FLT_OPR OPR WHERE OPR.FLT_KEY = POUCH.FLT_KEY AND OPR.SCH_DATE = POUCH.FLT_DATE
			  ) AWB_FLT_CARR_GROUP,
			  POUCH.POUCH_FLT_KEY, POUCH.POUCH_FLT_DATE, (
			  	SELECT FUN_GET_PARENT_CARR(MAX(OPR.CARR_CODE)) 
			  	FROM FLT_OPR OPR WHERE OPR.FLT_KEY = POUCH.POUCH_FLT_KEY AND OPR.SCH_DATE = POUCH.POUCH_FLT_DATE
			  ) POUCH_FLT_CARR_GROUP,
			  POUCH.AWB_UPLIFT_STATUS, POUCH.POUCH_UPLIFT_STATUS,
			  AWB.ORIG, AWB.DEST, POUCH.DESTINATION, POUCH.POUCH_DESTINATION,
			  CASE
			  WHEN 'ECC' IN(SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9) THEN 'Y'
			  ELSE 'N'
			  END ECC,
			  CASE
			  WHEN 'EAW' IN(SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9) THEN 'Y'
			  ELSE 'N'
			  END EAW,
			  CASE
			  WHEN 'EAP' IN(SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9) THEN 'Y'
			  ELSE 'N'
			  END EAP, 
			  CASE
			  WHEN (
			  	SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			    FROM SHC_MASTER 
			     WHERE CODE IN(SPL_CODE1, SPL_CODE2, SPL_CODE3, SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, SPL_CODE8, SPL_CODE9)
			    ) = 'Y' THEN 'Y'
			  ELSE 'N'
			  END SHC_INDICATOR, (
			  	SELECT NVL(MAX(AWB_PRINT_ORIGIN), 'N') PRINT
			  	FROM MAST_CITY
			  	WHERE CODE = AWB.DEST
			  ) PRINT,
			  DECODE(AWB.ACCEPT_MODE, 'LDS', 'Y', 'N') DIRECT_SHIPPER,
			  DECODE(AWB.AWB_TYPE, 'T', 'Y', 'N') TRANSIT,			  
			  TO_CHAR(POUCH.pouch_scan_time, 'DDMONYY HH24:MI') as pouchScanTime			  
			  FROM AWB_POUCH POUCH
			  JOIN AWB
			  ON POUCH.AWB_NO = AWB.AWB_NO AND POUCH.AWB_DATE = AWB.AWB_DATE
			  WHERE ((POUCH.FLT_KEY = #FLT_KEY# AND POUCH.FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY'))
			  OR (POUCH.POUCH_FLT_KEY = #FLT_KEY# AND POUCH.POUCH_FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')))
			  AND NOT EXISTS (
			  	SELECT NULL
			  	FROM PMAN
			  	WHERE PMAN.AWB_NO = POUCH.AWB_NO AND PMAN.AWB_DATE = POUCH.AWB_DATE 
			  	AND PMAN.UNLDG_PT IN(NVL(POUCH.DESTINATION, 'NONE'), NVL(POUCH.POUCH_DESTINATION, 'NONE'))
			  )
			  	]]>
			  <isNotEmpty property="LOGIN_CARRIER">
				   AND ( AWB.CARR_CODE = #LOGIN_CARRIER#
                        OR  AWB.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
                        WHERE GRP_CARR_CODE  = #LOGIN_CARRIER#))             
            	</isNotEmpty>
            	<![CDATA[
			)
			SELECT
			AWB_NO awbNo, TO_CHAR(AWB_DATE, 'DDMONYY') awbDate, 
			ORIG origin, DEST destination, DESTINATION awbPort, POUCH_DESTINATION pouchPort,
			FLT_KEY awbFlt, TO_CHAR(FLT_DATE, 'DDMONYY') awbFltDate, 
			POUCH_FLT_KEY pouchFlt, TO_CHAR(POUCH_FLT_DATE, 'DDMONYY') pouchFltDate, (
			  SELECT CODE_DESC FROM CODE
			  WHERE CODE = NVL(POUCH.AWB_UPLIFT_STATUS, (
	            CASE
	              WHEN POUCH.SHC_INDICATOR = 'Y' THEN 'NOTUPLIFTED'
	              WHEN POUCH.AWB_CARR_GROUP <> 'CX' AND POUCH.AWB_FLT_CARR_GROUP = 'CX' THEN 'NOTUPLIFTED'           
	              WHEN POUCH.DIRECT_SHIPPER = 'Y' THEN 'NOTUPLIFTED'
	              WHEN POUCH.TRANSIT = 'Y' THEN
	              CASE
	                WHEN POUCH.PRINT = 'Y' THEN 'NOTUPLIFTED'
	                ELSE
	                  CASE
	                    WHEN POUCH.EAP = 'N' AND POUCH.EAW = 'N' AND POUCH.ECC = 'N' THEN 'NOTUPLIFTED'
	                    WHEN POUCH.EAP = 'Y' THEN 'NOTUPLIFTED'
	                    WHEN POUCH.EAW = 'Y' THEN 'NOTREQUIRED'
	                    ELSE 'NOTREQUIRED'
	                  END
	              END
	              WHEN POUCH.TRANSIT = 'N' THEN
	                CASE
	                  WHEN POUCH.PRINT = 'Y' THEN 'NOTUPLIFTED'
	                  ELSE
	                    CASE
	                      WHEN POUCH.EAP = 'N' AND POUCH.EAW = 'N' AND POUCH.ECC = 'N' THEN 'NOTUPLIFTED'
	                      ELSE 'NOTREQUIRED'
	                    END
	                END
	            END
			  ))
			) awbUpliftStatus, (
			  SELECT CODE_DESC FROM CODE
			  WHERE CODE = NVL(POUCH.POUCH_UPLIFT_STATUS, (
	            CASE
	              WHEN POUCH.SHC_INDICATOR = 'Y' THEN 'NOTUPLIFTED'
	              WHEN POUCH.AWB_CARR_GROUP <> 'CX' AND POUCH.POUCH_FLT_CARR_GROUP = 'CX' THEN 'NOTUPLIFTED'	            
	              WHEN POUCH.DIRECT_SHIPPER = 'Y' THEN 'NOTUPLIFTED'
	              WHEN POUCH.TRANSIT = 'Y' THEN
	              CASE
	                WHEN POUCH.PRINT = 'Y' THEN 'NOTUPLIFTED'
	                ELSE
	                  CASE
	                    WHEN POUCH.EAP = 'N' AND POUCH.EAW = 'N' AND POUCH.ECC = 'N' THEN 'NOTUPLIFTED'
	                    WHEN POUCH.EAP = 'Y' THEN 'NOTUPLIFTED'
	                    WHEN POUCH.EAW = 'Y' THEN 'NOTREQUIRED'
	                    ELSE 'NOTREQUIRED'
	                  END
	              END
	              WHEN POUCH.TRANSIT = 'N' THEN
	                CASE
	                  WHEN POUCH.EAP = 'Y' THEN 'NOTUPLIFTED'
	                  ELSE 'NOTREQUIRED'
	                END             
	            END
			  ))
			) pouchUpliftStatus
			FROM POUCH
		]]>
	</select>
	<!-- Get Pouch Status List -->
	<select id="sqlGetAWBPouchStatusList" parameterClass="java.lang.String"
		resultClass="cargo.cms.afw.bo.MasterBO">
		<![CDATA[
			SELECT CODE codeId, CODE_DESC codeDesc
			FROM MAST_CODE_DTL 
			WHERE CODE_TYPE = 'EXP_EPOUCH_STATUS'
			ORDER BY SNO
		]]>
	</select>	
	<!-- Get Maintain AWB/Pouch Summary -->
	<select id="sqlGetAWBPouchSummary" parameterClass="java.util.Map"
		resultClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			WITH CODE AS (
			  SELECT SNO, CODE, CODE_DESC FROM MAST_CODE_DTL 
			  WHERE CODE_TYPE = 'EXP_EPOUCH_STATUS' AND CODE IN('UPLIFTED', 'TOUPLIFT')
			  UNION
			  SELECT 10 SNO, 'NOTUPLIFTED' CODE, 'Outstanding' CODE_DESC
			  FROM DUAL
			)
			SELECT
			SNO, CODE codeId, CODE_DESC status,
			0 awbCount, 0 pouchCount
			FROM CODE
			ORDER BY SNO
		]]>
	</select>
	<!-- Get Pre-manifested AWB for Print AWB Label -->
	<select id="sqlGetAWBsForPrintLabel" parameterClass="java.util.Map"
		resultClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			SELECT AWB.AWB_NO awbNo, 'Y' selectFlag
			FROM IMP_CAR_SHP SHP
			JOIN AWB AWB
			ON SHP.AWB_NO = AWB.AWB_NO AND SHP.AWB_DATE = AWB.AWB_DATE 
			AND AWB.AWB_TYPE = 'T' AND SHP.FFM_FLG = 'Y' AND SHP.MANIFEST_PCS > 0
			AND NOT EXISTS (
			  SELECT NULL
			  FROM V_DDT_DTL DDT
			  WHERE DDT.AWB_NO = SHP.AWB_NO AND DDT.AWB_DATE = SHP.AWB_DATE
			  AND DDT.SHP_TRF_TYPE IN ('TT', 'IF')
			)
		]]>
		<isEqual property="INDICATOR" compareValue="AWB">
			<![CDATA[ AND AWB.AWB_NO = #AWB_NO# ]]>
		</isEqual>
		<isNotEqual property="INDICATOR" compareValue="AWB">
			<![CDATA[ AND SHP.FLT_KEY = #FLT_KEY# AND SHP.FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') ]]>
		</isNotEqual>					
		<![CDATA[
			ORDER BY SUBSTR(AWB.AWB_NO, -1), AWB.AWB_NO
		]]>		
	</select>
	<!-- Get AWB/Pouch Scan Detail for Agent -->
	<select id="sqlGetAWBScanDetailForAgent" parameterClass="cargo.cms.export.bo.AWBPouchBO"
		resultClass="cargo.cms.export.bo.AWBPouchBO">
		<![CDATA[
			SELECT POUCH.AWB_NO awbNo,
			POUCH.FLT_KEY || NVL2(POUCH.FLT_KEY, '/', '') || TO_CHAR(POUCH.FLT_DATE, 'DDMONYY') awbFlt,
			POUCH.POUCH_FLT_KEY || NVL2(POUCH.POUCH_FLT_KEY, '/', '') || TO_CHAR(POUCH.POUCH_FLT_DATE, 'DDMONYY') pouchFlt,
			TO_CHAR(POUCH.AWB_UPLIFT_TIME, 'DDMONYY HH24:MI') awbUpliftTime, 
			TO_CHAR(POUCH.POUCH_UPLIFT_TIME, 'DDMONYY HH24:MI') pouchUpliftTime, 
			TO_CHAR(POUCH.AWB_SCAN_TIME, 'DDMONYY HH24:MI') awbScanTime,
			TO_CHAR(POUCH.POUCH_SCAN_TIME, 'DDMONYY HH24:MI') pouchScanTime
			FROM AWB_POUCH POUCH
		]]>
		<isNotEmpty property="agentName">
			<![CDATA[
				LEFT JOIN AWB AWB
				ON POUCH.AWB_NO = AWB.AWB_NO AND POUCH.AWB_DATE = AWB.AWB_DATE
			]]>
		</isNotEmpty>
		<![CDATA[
			WHERE 1 = 1
		]]>
		<isNotEmpty property="agentName">
			<![CDATA[ AND AWB.AGENT_NAME = #agentName# ]]>
		</isNotEmpty>
		<isEqual property="indicator" compareValue="AWB">
			<![CDATA[ AND POUCH.AWB_NO = #awbNo# ]]>
		</isEqual>
		<isNotEqual property="indicator" compareValue="AWB">
			<isNotEmpty property="submitDate">
				<![CDATA[ AND (TO_CHAR(POUCH.AWB_SCAN_TIME, 'DDMONYY') = #submitDate# OR TO_CHAR(POUCH.POUCH_SCAN_TIME, 'DDMONYY') = #submitDate#) ]]>
			</isNotEmpty>
			<isNotEmpty property="scanDate">
				<![CDATA[ AND (TO_CHAR(POUCH.AWB_UPLIFT_TIME, 'DDMONYY') = #scanDate# OR TO_CHAR(POUCH.POUCH_UPLIFT_TIME, 'DDMONYY') = #scanDate#) ]]>
			</isNotEmpty>
		</isNotEqual>
		<![CDATA[
			ORDER BY POUCH.FLT_DATE, POUCH.FLT_KEY, POUCH.POUCH_FLT_DATE, POUCH.POUCH_FLT_KEY, POUCH.AWB_NO
		]]>			
	</select>

        <select id="getAWBisTTorIFCount" parameterClass="cargo.cms.export.bo.AWBPouchBO" resultClass="java.lang.Integer">
		 SELECT COUNT(1) as TT_IF_COUNT FROM V_DDT_DTL DDT WHERE DDT.AWB_NO = #awbNo# AND DDT.AWB_DATE = #awbDate# and SHP_TRF_TYPE IN ('TT', 'IF')
	</select>
		
	<!-- e-Pouch -->
	
<update id="sqlUpdateSHCAwb" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		UPDATE AWB SET 
		SPL_CODE1 = #splCode1#,
		SPL_CODE2 = #splCode2#,
		SPL_CODE3 = #splCode3#,
		SPL_CODE4 = #splCode4#,
		SPL_CODE5 = #splCode5#,
		SPL_CODE6 = #splCode6#,
		SPL_CODE7 = #splCode7#,
		SPL_CODE8 = #splCode8#,
		SPL_CODE9 = #splCode9#,
		LM_USER_ID = #userID#,
		LM_DATE = SYSDATE
		WHERE AWB_NO = #awbNum# AND AWB_DATE=TO_DATE(pkg_common.get_awb_date(#awbNum#, 'E'))
	</update>
	<!-- Update SHC for AWB Pouch -->
	<select id="getAWBExitAWBPouch_EAP" parameterClass="map" resultClass="java.lang.Integer">
		 select count(1) as v_scan_cnt 
	     from awb_pouch ap 
	     join AWB a on a.awb_no=ap.awb_no and a.awb_date=ap.awb_date
	     where a.awb_no=#AWB_NO# and a.awb_date =#AWB_DATE#
	     and (ap.pouch_scan_time is not null or ap.pouch_uplift_time is not null)
	     and (nvl(a.SPL_CODE1,'*')!='EAP' or nvl(a.SPL_CODE2,'*')!='EAP' or nvl(a.SPL_CODE3,'*')!='EAP' or 
	          nvl(a.SPL_CODE4,'*')!='EAP' or nvl(a.SPL_CODE5,'*')!='EAP' or nvl(a.SPL_CODE6,'*')!='EAP' or 
	          nvl(a.SPL_CODE7,'*')!='EAP' or nvl(a.SPL_CODE8,'*')!='EAP' or nvl(a.SPL_CODE9,'*')!='EAP')
	</select>

<select id="getAWBTypeToUpdateEAP" parameterClass="map" resultClass="java.lang.Integer">
		 select count(1) as transitCnt from AWB where awb_no=#AWB_NO# and awb_date =#AWB_DATE# AND AWB_TYPE = 'T' 
	</select>

	<select id="getSHCsFromAWB_EAP" parameterClass="map" resultClass="cargo.cms.export.buildup.bo.AWBBO">
		select awb_type awbType,SPL_CODE1 splCode1, SPL_CODE2 splCode2, SPL_CODE3 splCode3, SPL_CODE4 splCode4, SPL_CODE5 splCode5,
		SPL_CODE6 splCode6, SPL_CODE7 splCode7, SPL_CODE8 splCode8, SPL_CODE9 splCode9 , awb_type as awbType
		from  AWB where awb_no = #AWB_NO# and  awb_date = to_date(#AWB_DATE#,'DDMONYY') and AWB_CLOSED_YN='N'
	</select>
	<update id="updateEAPSPCSHCCode_AWB_EAP" parameterClass="cargo.cms.export.buildup.bo.AWBBO">
		UPDATE AWB SET
		<isEqual compareValue="SPL_CODE1" property="splCode">
		SPL_CODE1 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE2" property="splCode">
		SPL_CODE2 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE3" property="splCode">
		SPL_CODE3 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE4" property="splCode">
		SPL_CODE4 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE5" property="splCode">
		SPL_CODE5 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE6" property="splCode">
		SPL_CODE6 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE7" property="splCode">
		SPL_CODE7 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE8" property="splCode">
		SPL_CODE8 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE9" property="splCode">
		SPL_CODE9 = 'EAP'
		</isEqual> 
		WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</update>
	<update id="updateEAPSPCSHCCodeIMP_CAR_AWB_EAP" parameterClass="cargo.cms.export.buildup.bo.AWBBO">
		UPDATE IMP_CAR_AWB SET
		<isEqual compareValue="SPL_CODE1" property="splCode">
		SPL_CODE1 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE2" property="splCode">
		SPL_CODE2 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE3" property="splCode">
		SPL_CODE3 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE4" property="splCode">
		SPL_CODE4 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE5" property="splCode">
		SPL_CODE5 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE6" property="splCode">
		SPL_CODE6 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE7" property="splCode">
		SPL_CODE7 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE8" property="splCode">
		SPL_CODE8 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE9" property="splCode">
		SPL_CODE9 = 'EAP'
		</isEqual> 
		WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</update>
	<update id="updateEAPSPCSHCCodeEXP_CAR_EAP" parameterClass="cargo.cms.export.buildup.bo.AWBBO">
		UPDATE EXP_CAR SET
		<isEqual compareValue="SPL_CODE1" property="splCode">
		SPL_CODE1 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE2" property="splCode">
		SPL_CODE2 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE3" property="splCode">
		SPL_CODE3 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE4" property="splCode">
		SPL_CODE4 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE5" property="splCode">
		SPL_CODE5 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE6" property="splCode">
		SPL_CODE6 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE7" property="splCode">
		SPL_CODE7 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE8" property="splCode">
		SPL_CODE8 = 'EAP'
		</isEqual>
		<isEqual compareValue="SPL_CODE9" property="splCode">
		SPL_CODE9 = 'EAP'
		</isEqual> 
		WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</update>
	
	<select id="generateAWBDate" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT TO_CHAR(AWB_DATE,'DDMONYY') FROM(SELECT AWB_DATE FROM AWB WHERE AWB_NO=#PARAM# ORDER BY CR_DATE DESC) WHERE ROWNUM=1
	</select>
	<select id="checkULDisDummyHcontainerornot" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from mast_uld_type WHERE DUMMY_H_CONT_IND='Y' and code=#uldType#
	</select>
	
	<select id="gettotalrclpcandwt" parameterClass="map" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		SELECT RCL_PCS-NVL(RTN_PCS,'0') AS rclPcs, RCL_WT - NVL(RTN_WT,'0') AS rclWt, AWB_NO FROM AWB WHERE AWB_NO=#AWBNO# AND AWB_DATE=TO_DATE(#AWBDATE#, 'DDMONYY') 
	</select>
	<!-- Ramp Monitoring - Flight Overview -->
<select id="sqlGetRampMonitorFlightOverview" parameterClass="cargo.cms.export.bo.RampSearchBO"
		resultClass="cargo.cms.export.bo.RampMonitoringBO">
		<![CDATA[	
			WITH FLT_OPTIM AS (
			  SELECT
			  FLT.FLT_KEY, FLT.SCH_DATE, FLT.SCH_TIME, FLT.EST_DATE, FLT.EST_TIME,
			  TO_DATE(TO_CHAR(FLT.SCH_DATE, 'DDMONYY') || ' ' || TO_CHAR(FLT.SCH_TIME, '0000'), 'DDMONYY HH24MI') FLT_SCH_TIME,
			  TO_DATE(TO_CHAR(FLT.EST_DATE, 'DDMONYY') || ' ' || TO_CHAR(FLT.EST_TIME, '0000'), 'DDMONYY HH24MI') FLT_EST_TIME,
			  FLT.CARR_CODE, (
			    SELECT DECODE(COUNT(1), 0, 'Y', 'N')
			    FROM EXP_PMAN_TARMAC_ULD PMAN
			    JOIN EXP_FLT_ULD ULD ON PMAN.ULD_BT_NO = ULD.ULD_KEY AND PMAN.FLT_KEY = ULD.FLT_KEY AND PMAN.FLT_DATE = ULD.FLT_DATE
			    WHERE PMAN.FLT_KEY = FLT.FLT_KEY AND PMAN.FLT_DATE = FLT.SCH_DATE
			    AND ULD.TRANSIT_TYPE <> 'TT'
			  ) NIL_IF_FLT, (
			    SELECT DECODE(COUNT(1), 0, 'Y', 'N')
			    FROM EXP_PMANIFEST_ULD PMAN
			    JOIN EXP_FLT_ULD ULD ON PMAN.ULD_BT_NO = ULD.ULD_KEY AND PMAN.FLT_KEY = ULD.FLT_KEY AND PMAN.FLT_DATE = ULD.FLT_DATE		
			    WHERE PMAN.FLT_KEY = FLT.FLT_KEY AND PMAN.FLT_DATE = FLT.SCH_DATE
			  ) NIL_OTHER_FLT, (
			    SELECT COUNT(1)
			    FROM EXP_FLT_ULD EXP			    
          		LEFT OUTER JOIN EXP_CHKOUT_DTL CHK
          		ON EXP.FLT_KEY = CHK.FLT_KEY AND EXP.FLT_DATE = CHK.FLT_DATE AND EXP.ULD_KEY = CHK.ULD_KEY
			    WHERE 
			    EXP.FLT_KEY = FLT.FLT_KEY AND EXP.FLT_DATE = FLT.SCH_DATE
			    AND NVL(EXP.HANDLING_MODE, 'N') != 'DT' AND (
			      NOT (NVL(EXP.TRANSIT_TYPE, '*') = 'TT' OR (NVL(EXP.TRANSIT_TYPE, '*') = 'IF' AND EXP.LOC_CODE IS NULL))
            	  OR CHK.CHK_FLG = 'Y'
			    )
			    AND EXP.SOURCE NOT IN ('DLS-L', 'DLS-E')
			  ) ASSIGNED, 
						(SELECT COUNT(1)
				    FROM EXP_CHKOUT_DTL CHK
            JOIN EXP_FLT_ULD ULD ON CHK.ULD_KEY = ULD.ULD_KEY AND CHK.FLT_KEY = ULD.FLT_KEY AND CHK.FLT_DATE = ULD.FLT_DATE
            WHERE CHK.FLT_KEY                = FLT.FLT_KEY
            AND CHK.FLT_DATE                 = FLT.SCH_DATE
            AND CHK.HO_FORM_NO IS NOT NULL            
				    ) ULDHANDOVER,
						(SELECT COUNT(1)
					    FROM EXP_CHKOUT_DTL CHK
					    JOIN EXP_FLT_ULD ULD ON CHK.ULD_KEY = ULD.ULD_KEY AND CHK.FLT_KEY = ULD.FLT_KEY AND CHK.FLT_DATE = ULD.FLT_DATE
					    WHERE CHK.FLT_KEY                = FLT.FLT_KEY
					    AND CHK.FLT_DATE                 = FLT.SCH_DATE					   
					    AND CHK.CHKOUT_DATE IS NOT NULL
					    ) CHECKED_OUT_count,			  
			  (
			    SELECT COUNT(1)
			    FROM EXP_CHKOUT_DTL CHK
			    JOIN EXP_FLT_ULD ULD ON CHK.ULD_KEY = ULD.ULD_KEY AND CHK.FLT_KEY = ULD.FLT_KEY AND CHK.FLT_DATE = ULD.FLT_DATE		
			    WHERE CHK.FLT_KEY = FLT.FLT_KEY AND CHK.FLT_DATE = FLT.SCH_DATE
			    AND NVL(ULD.HANDLING_MODE, 'N') != 'DT' AND CHK.CHK_FLG = 'Y'
			  ) CHECKED_OUT,
			  CASE
			    WHEN FLT.EST_TIME IS NOT NULL THEN TO_DATE(TO_CHAR(FLT.EST_DATE, 'DDMONYY') || TO_CHAR(FLT.EST_TIME, '0000'), 'DDMONYY HH24MI')
			    ELSE TO_DATE(TO_CHAR(FLT.SCH_DATE, 'DDMONYY') || TO_CHAR(FLT.SCH_TIME, '0000'), 'DDMONYY HH24MI')
			  END FLT_TIME,  
			  CASE
			    WHEN FLT.EST_TIME IS NOT NULL THEN PKG_COMMON.GET_FLT_ETA(FLT.FLT_KEY, FLT.SCH_DATE, 'D', 'DD')
			    ELSE PKG_COMMON.GET_FLT_STA(FLT.FLT_KEY, FLT.SCH_DATE, 'D', 'DD')
			  END STD_ETD  
			  FROM FLT_OPR FLT
			  JOIN FLT_OPR_EVENTS EVT
			  ON FLT.FLT_KEY = EVT.FLT_KEY AND FLT.SCH_DATE = EVT.SCH_DATE AND FLT.FLT_TYPE = EVT.FLT_TYPE AND FLT.FLT_TYPE = 'D' AND EVT.FLT_CLS_YN = 'N'
			  WHERE ((
			    FLT.EST_DATE IS NOT NULL AND FLT.EST_TIME IS NOT NULL
			    AND FLT.EST_DATE BETWEEN 
			      TO_DATE(TO_CHAR(TO_DATE(#from#, 'DDMONYY HH24MI'), 'DDMONYY'), 'DDMONYY') AND 
			      TO_DATE(TO_CHAR(TO_DATE(#to#, 'DDMONYY HH24MI'), 'DDMONYY'), 'DDMONYY') + 1
			  ) OR (
			    FLT.SCH_DATE IS NOT NULL AND FLT.SCH_TIME IS NOT NULL
			    AND FLT.SCH_DATE BETWEEN 
			      TO_DATE(TO_CHAR(TO_DATE(#from#, 'DDMONYY HH24MI'), 'DDMONYY'), 'DDMONYY') AND 
			      TO_DATE(TO_CHAR(TO_DATE(#to#, 'DDMONYY HH24MI'), 'DDMONYY'), 'DDMONYY') + 1
			  ))
			]]>
			<isNotEmpty property="carrCode">
				AND FLT.CARR_CODE = #carrCode#
			</isNotEmpty>
			<isEmpty property="carrCode">
				<isNotEmpty property="loginCarrier">
		            <![CDATA[    
		               AND (FLT.CARR_CODE = #loginCarrier#
		                OR FLT.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE= #loginCarrier#))
		            ]]>
	            </isNotEmpty>
	       	</isEmpty>
	       	<isEmpty property="loginCarrier">
				<isNotEmpty prepend="AND" property="loginCustCode">
    				FLT.RHO_ID = #loginCustCode#
				</isNotEmpty>
			</isEmpty>
	       	
			<![CDATA[   
			  
			), 
			FLT AS (
			  SELECT
			  FLT.FLT_KEY, FLT.SCH_DATE FLT_DATE,
			  FLT_TIME, STD_ETD,
			  CHECKED_OUT, ASSIGNED,
			  FLT.CARR_CODE, NIL_IF_FLT, NIL_OTHER_FLT ,ULDHANDOVER,CHECKED_OUT_count
			  FROM FLT_OPTIM FLT
			  WHERE ((
			    FLT.EST_DATE IS NOT NULL AND FLT.EST_TIME IS NOT NULL
			    AND FLT_EST_TIME
			      BETWEEN TO_DATE(#from#, 'DDMONYY HH24MI') AND TO_DATE(#to#, 'DDMONYY HH24MI')
			  ) OR (
			    FLT.SCH_DATE IS NOT NULL AND FLT.SCH_TIME IS NOT NULL
			    AND FLT_SCH_TIME
			      BETWEEN TO_DATE(#from#, 'DDMONYY HH24MI') AND TO_DATE(#to#, 'DDMONYY HH24MI')
			  ))
			),
			ULD_ASSIGNED AS (
			 SELECT FLT.FLT_KEY, FLT.FLT_DATE, 
			 EXP.ULD_KEY, (
			   SELECT DECODE(COUNT(1), 0, 'N', 'Y') 
			   FROM MAST_WH_LOC WH 
			   WHERE WH.CODE = EXP.LOC_CODE AND WH.LOC_SIDE = 'RAMP'
			 ) ON_RAMP, (
			   SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			   FROM MAST_WH_LOC WH
			   JOIN MAST_WH_GROUP GRP
			   ON WH.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'MHS'
			   WHERE WH.CODE = EXP.LOC_CODE
			 ) IN_MHS,
			 (
			   SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			   FROM MAST_WH_LOC WH
			   JOIN MAST_WH_GROUP GRP
			   ON WH.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'SR'
			   WHERE WH.CODE = EXP.LOC_CODE
			 ) IN_SR,
       		(
			   SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			   FROM MAST_WH_LOC WH
			   JOIN MAST_WH_GROUP GRP
			   ON WH.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'IA'
			   WHERE WH.CODE = EXP.LOC_CODE
			 ) IN_IC,
			 DECODE(EXP.LOC_CODE, NULL, 'N', 'Y') VALID_LOC,
			 NVL(CHK.CHK_FLG, 'N') CHK_FLG
			 FROM EXP_FLT_ULD EXP			
			 LEFT OUTER JOIN EXP_CHKOUT_DTL CHK
			 ON EXP.FLT_KEY = CHK.FLT_KEY AND EXP.FLT_DATE = CHK.FLT_DATE AND EXP.ULD_KEY = CHK.ULD_KEY
			 JOIN FLT
			 ON EXP.FLT_KEY = FLT.FLT_KEY AND EXP.FLT_DATE = FLT.FLT_DATE
			 WHERE NVL(EXP.HANDLING_MODE, 'N') != 'DT' AND (
			   NOT (NVL(EXP.TRANSIT_TYPE, 'N') = 'TT' OR (NVL(EXP.TRANSIT_TYPE, 'N') = 'IF' AND EXP.LOC_CODE IS NULL))
			       OR CHK.CHK_FLG = 'Y'
			 )
			 AND EXP.SOURCE NOT IN ('DLS-L', 'DLS-E')
			)							
			SELECT FLT_KEY fltKey, TO_CHAR(FLT_DATE, 'DDMONYY') fltDate,
			FLT_TIME, STD_ETD etdStd, (
			  SELECT DECODE(COUNT(1), 0, NULL, COUNT(1))
			  FROM ULD_ASSIGNED ASS
			  WHERE ASS.FLT_KEY = FLT.FLT_KEY AND ASS.FLT_DATE = FLT.FLT_DATE
			  AND ASS.IN_MHS = 'N' AND ASS.ON_RAMP = 'N' AND ASS.IN_SR = 'N' AND ASS.IN_IC = 'N' AND ASS.VALID_LOC = 'Y' AND ASS.CHK_FLG = 'N'
			) notInMHSOrRamp, (
			  SELECT DECODE(COUNT(1), 0, NULL, COUNT(1))
			  FROM ULD_ASSIGNED ASS
			  WHERE ASS.FLT_KEY = FLT.FLT_KEY AND ASS.FLT_DATE = FLT.FLT_DATE 
			  AND ASS.IN_MHS = 'Y' AND ASS.VALID_LOC = 'Y' AND ASS.CHK_FLG = 'N'
			) inMHS,
			(
			  SELECT DECODE(COUNT(1), 0, NULL, COUNT(1))
			  FROM ULD_ASSIGNED ASS
			  WHERE ASS.FLT_KEY = FLT.FLT_KEY AND ASS.FLT_DATE = FLT.FLT_DATE 
			  AND ASS.IN_SR = 'Y' AND ASS.VALID_LOC = 'Y' AND ASS.CHK_FLG = 'N'
			) inSR,
      		(
			  SELECT DECODE(COUNT(1), 0, NULL, COUNT(1))
			  FROM ULD_ASSIGNED ASS
			  WHERE ASS.FLT_KEY = FLT.FLT_KEY AND ASS.FLT_DATE = FLT.FLT_DATE 
			  AND ASS.IN_IC = 'Y' AND ASS.VALID_LOC = 'Y' AND ASS.CHK_FLG = 'N'
			) inIA,
			ASSIGNED totalULDs, (ASSIGNED - CHECKED_OUT) outstanding,
			 ULDHANDOVER  numUldHandover,
			 CHECKED_OUT_count numCheckOutUld,
			CASE
			  WHEN (ASSIGNED - CHECKED_OUT) > 0 THEN
			  CASE
			    WHEN FLT_TIME <= (SYSDATE + ((SELECT NVL(RULE_VALUE, 1) FROM CMSRULES WHERE RULE_CODE = 'EXP_RAMP_MONITOR_RED') * 60)/24/60) THEN 'PINK'
			    WHEN FLT_TIME <= (SYSDATE + ((SELECT NVL(RULE_VALUE, 2) FROM CMSRULES WHERE RULE_CODE = 'EXP_RAMP_MONITOR_YELLOW') * 60)/24/60) THEN 'YELLOW'
			    ELSE 'DEFAULT'
			  END
			  ELSE 'DEFAULT'
			END indicator
			FROM FLT
			WHERE 1 = 1
		]]>
		<isNotEqual property="nilCargo" compareValue="Y">
			<![CDATA[ AND (NIL_IF_FLT = 'N' OR NIL_OTHER_FLT = 'N') ]]>
		</isNotEqual>				
		<dynamic>
			<![CDATA[ ORDER BY FLT_TIME, FLT_KEY ]]>
		</dynamic>
	</select>
	<!-- Ramp Monitoring - Flight Overview Outstanding ULD List -->
	<select id="sqlGetRampMonitorFlightOverviewOSULD" parameterClass="java.util.Map"
		resultClass="cargo.cms.export.bo.RampMonitoringBO">
		<![CDATA[
			WITH ULD AS (
			  SELECT EXP.ULD_KEY, EXP.LOC_CODE,
			  (SELECT NVL(LOC_SIDE, 'NONE') FROM MAST_WH_LOC WHERE CODE = EXP.LOC_CODE) SIDE,
		        (SELECT DECODE(COUNT(1), 0, 'N', 'Y') 
					   FROM MAST_WH_LOC WH 
					   WHERE WH.CODE = EXP.LOC_CODE AND WH.LOC_SIDE = 'RAMP'
		         ) ON_RAMP,
		         (SELECT DECODE(COUNT(1), 0, 'N', 'Y')
					   FROM MAST_WH_LOC WH
					   JOIN MAST_WH_GROUP GRP
					   ON WH.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'MHS'
					   WHERE WH.CODE = EXP.LOC_CODE
		        ) IN_MHS,
					  (SELECT DECODE(COUNT(1), 0, 'N', 'Y')
					   FROM MAST_WH_LOC WH
					   JOIN MAST_WH_GROUP GRP
					   ON WH.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'SR'
					   WHERE WH.CODE = EXP.LOC_CODE
					   ) IN_SR,
		       	(SELECT DECODE(COUNT(1), 0, 'N', 'Y')
					   FROM MAST_WH_LOC WH
					   JOIN MAST_WH_GROUP GRP
					   ON WH.WH_GROUP = GRP.WH_GROUP AND GRP.WH_TYPE = 'IA'
					   WHERE WH.CODE = EXP.LOC_CODE
					  ) IN_IC,
					  DECODE(EXP.LOC_CODE, NULL, 'N', 'Y') VALID_LOC,
					  'N' CHK_FLG
					  FROM EXP_FLT_ULD EXP			 
					  WHERE 
					  EXP.FLT_KEY = #FLT_KEY# AND EXP.FLT_DATE = #FLT_DATE#
					  AND NVL(EXP.HANDLING_MODE, 'N') != 'DT' AND (
					    NOT (NVL(EXP.TRANSIT_TYPE, '*') = 'TT' OR (NVL(EXP.TRANSIT_TYPE, '*') = 'IF' AND EXP.LOC_CODE IS NULL))
					  )
					  AND EXP.SOURCE NOT IN ('DLS-L', 'DLS-E')
					  AND EXP.ULD_KEY NOT IN (
					    SELECT CHK.ULD_KEY
					    FROM EXP_CHKOUT_DTL CHK
					    JOIN EXP_FLT_ULD ULD ON CHK.ULD_KEY = ULD.ULD_KEY AND CHK.FLT_KEY = ULD.FLT_KEY AND CHK.FLT_DATE = ULD.FLT_DATE
					    WHERE CHK.FLT_KEY = EXP.FLT_KEY AND CHK.FLT_DATE = EXP.FLT_DATE
					    AND NVL(ULD.HANDLING_MODE, 'N') != 'DT' AND CHK.CHK_FLG = 'Y'
					  )
					)
					SELECT ULD_KEY uldKey, LOC_CODE location,
					CASE
					  WHEN SIDE = 'AIRSIDE' THEN 'Arrived'
					  WHEN SIDE = 'RAMP' THEN 'Ramp'
					  ELSE 'In Progress'
					END status,
		      CASE WHEN IN_MHS = 'N' AND ON_RAMP = 'N' AND IN_SR = 'N' AND IN_IC = 'N' AND VALID_LOC = 'Y' AND CHK_FLG = 'N' THEN 1
		           WHEN IN_MHS = 'Y' AND VALID_LOC = 'Y' AND CHK_FLG = 'N' THEN 2
		           WHEN IN_IC = 'Y' AND VALID_LOC = 'Y' AND CHK_FLG = 'N' THEN 3
		           WHEN IN_SR = 'Y' AND VALID_LOC = 'Y' AND CHK_FLG = 'N' THEN 4
		           ELSE 5 
		      END  orderState
			  FROM ULD
			ORDER BY orderState,LOC_CODE
		]]>
	</select>
	<!-- Ramp Monitoring - Flight List -->
	<select id="sqlGetRampMonitorFlightList" parameterClass="cargo.cms.export.bo.RampSearchBO"
		resultClass="cargo.cms.export.bo.RampMonitoringBO">
		<![CDATA[
			WITH ULD_TYP AS (
			  SELECT GRP.ULD_GROUP, GRP.ULD_TYPE, ALLOT.ULD_ALLOT
			  FROM ULD_GROUP_TYPE GRP 
			  JOIN MAST_ULD_ALLOT_GROUP ALLOT 
			  ON GRP.ULD_GROUP = ALLOT.ULD_GROUP
			),
			FLT_OPTIM AS (
			  SELECT
			  FLT.FLT_KEY, FLT.SCH_DATE, FLT.SCH_TIME, FLT.EST_DATE, FLT.EST_TIME,FLT.RHO_ID,
			  TO_DATE(TO_CHAR(FLT.SCH_DATE, 'DDMONYY') || ' ' || TO_CHAR(FLT.SCH_TIME, '0000'), 'DDMONYY HH24MI') FLT_SCH_TIME,
			  TO_DATE(TO_CHAR(FLT.EST_DATE, 'DDMONYY') || ' ' || TO_CHAR(FLT.EST_TIME, '0000'), 'DDMONYY HH24MI') FLT_EST_TIME,
			  FLT.CARR_CODE, FLT.CGO_ACFT_TYPE,
			  FLT.ACFT_TYPE, FLT.ACFT_PRK_BAY,
			  DECODE(EVT.BUILDUP_CDATE, NULL, 'N', 'Y') BUILD_COMPLETED, (
			    SELECT DECODE(COUNT(1), 0, 'Y', 'N')
			    FROM EXP_PMAN_TARMAC_ULD PMAN
			    JOIN EXP_FLT_ULD ULD ON ULD.ULD_KEY = PMAN.ULD_BT_NO AND ULD.FLT_KEY = PMAN.FLT_KEY AND ULD.FLT_DATE = PMAN.FLT_DATE
			    WHERE PMAN.FLT_KEY = FLT.FLT_KEY AND PMAN.FLT_DATE = FLT.SCH_DATE
			    AND ULD.TRANSIT_TYPE <> 'TT'
			  ) NIL_IF_FLT, (
			    SELECT DECODE(COUNT(1), 0, 'Y', 'N')
			    FROM EXP_PMANIFEST_ULD PMAN
			    JOIN ULD_INVENTORY ULD
			    ON PMAN.ULD_BT_NO = ULD.ULD_KEY
			    WHERE PMAN.FLT_KEY = FLT.FLT_KEY AND PMAN.FLT_DATE = FLT.SCH_DATE
			  ) NIL_OTHER_FLT,
			  CASE
			    WHEN FLT.EST_TIME IS NOT NULL THEN TO_DATE(TO_CHAR(FLT.EST_DATE, 'DDMONYY') || TO_CHAR(FLT.EST_TIME, '0000'), 'DDMONYY HH24MI')
			    ELSE TO_DATE(TO_CHAR(FLT.SCH_DATE, 'DDMONYY') || TO_CHAR(FLT.SCH_TIME, '0000'), 'DDMONYY HH24MI')
			  END FLT_TIME,  
			  CASE
			    WHEN FLT.EST_TIME IS NOT NULL THEN PKG_COMMON.GET_FLT_ETA(FLT.FLT_KEY, FLT.SCH_DATE, 'D', 'DD')
			    ELSE PKG_COMMON.GET_FLT_STA(FLT.FLT_KEY, FLT.SCH_DATE, 'D', 'DD')
			  END STD_ETD  
			  FROM FLT_OPR FLT
			  JOIN FLT_OPR_EVENTS EVT
			  ON FLT.FLT_KEY = EVT.FLT_KEY AND FLT.SCH_DATE = EVT.SCH_DATE AND FLT.FLT_TYPE = EVT.FLT_TYPE AND FLT.FLT_TYPE = 'D' AND EVT.FLT_CLS_YN = 'N'
			  WHERE ((
			    FLT.EST_DATE IS NOT NULL AND FLT.EST_TIME IS NOT NULL
			    AND FLT.EST_DATE BETWEEN 
			      TO_DATE(TO_CHAR(TO_DATE(#from#, 'DDMONYY HH24MI'), 'DDMONYY'), 'DDMONYY') AND 
			      TO_DATE(TO_CHAR(TO_DATE(#to#, 'DDMONYY HH24MI'), 'DDMONYY'), 'DDMONYY') + 1
			  ) OR (
			    FLT.SCH_DATE IS NOT NULL AND FLT.SCH_TIME IS NOT NULL
			    AND FLT.SCH_DATE BETWEEN 
			      TO_DATE(TO_CHAR(TO_DATE(#from#, 'DDMONYY HH24MI'), 'DDMONYY'), 'DDMONYY') AND 
			      TO_DATE(TO_CHAR(TO_DATE(#to#, 'DDMONYY HH24MI'), 'DDMONYY'), 'DDMONYY') + 1
			  ))
			  ]]>
			<isNotEmpty property="carrCode">
				AND FLT.CARR_CODE = #carrCode#
			</isNotEmpty>
			<isEmpty property="carrCode">
				<isNotEmpty property="loginCarrier">
		            <![CDATA[    
		               AND (FLT.CARR_CODE = #loginCarrier#
		                OR FLT.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE= #loginCarrier#))
		            ]]>
	            </isNotEmpty>
	       	</isEmpty>
	       	<isEmpty property="loginCarrier">
			<isNotEmpty prepend="AND" property="loginCustCode">
			    FLT.RHO_ID = #loginCustCode#
			</isNotEmpty>
			</isEmpty>
            <![CDATA[
			),
			FLT AS (
			  SELECT
			  FLT.FLT_KEY, FLT.SCH_DATE FLT_DATE,
			  FLT_TIME, STD_ETD, FLT.RHO_ID,
			  PKG_COMMON.GET_FLT_ETA(FLT.FLT_KEY, FLT.SCH_DATE, 'D', 'DD') ETD,
			  PKG_COMMON.GET_FLT_STA(FLT.FLT_KEY, FLT.SCH_DATE, 'D', 'DD') STD,
			  FLT.CARR_CODE, FLT.CGO_ACFT_TYPE,
			  FLT.ACFT_TYPE, FLT.ACFT_PRK_BAY,
			  FLT.BUILD_COMPLETED, NIL_IF_FLT, NIL_OTHER_FLT 
			  FROM FLT_OPTIM FLT
			  WHERE ((
			    FLT.EST_DATE IS NOT NULL AND FLT.EST_TIME IS NOT NULL
			    AND FLT_EST_TIME
			      BETWEEN TO_DATE(#from#, 'DDMONYY HH24MI') AND TO_DATE(#to#, 'DDMONYY HH24MI')
			  ) OR (
			    FLT.SCH_DATE IS NOT NULL AND FLT.SCH_TIME IS NOT NULL
			    AND FLT_SCH_TIME
			      BETWEEN TO_DATE(#from#, 'DDMONYY HH24MI') AND TO_DATE(#to#, 'DDMONYY HH24MI')
			  ))
			),
			ELP AS (
			  SELECT MAX(MSG.TR_NO) TR_NO, MSG.FLT_KEY, MSG.FLT_DATE
			  FROM EDI_ELP_MSG MSG
			  JOIN FLT
			  ON MSG.FLT_KEY = FLT.FLT_KEY AND MSG.FLT_DATE = FLT.FLT_DATE AND MSG.TRF_IND = 'Y'
			  GROUP BY MSG.FLT_KEY, MSG.FLT_DATE
			),
			ELP_ALLOT1 AS (
			  SELECT
			  ELP.TR_NO, ELP.FLT_KEY, ELP.FLT_DATE,
			  COUNT(QTY_H5) AS COUNTH5,
			  SUM(QTY_Q6) AS TOTALQ6,
			  SUM(QTY_Q7) AS TOTALQ7,
			  SUM(QTY_X8) AS TOTALX8,
			  SUM(QTY_PEB) AS TOTALPEB,
			  SUM(QTY_A2) AS TOTALA2,
			  SUM(QTY_LDC) AS TOTALLDC,
			  SUM(QTY_H2) AS TOTALH2,
			  SUM(QTY_ZA) AS TOTALZA,
			  SUM(QTY_ZB) AS TOTALZB,
			  SUM(QTY_ZC) AS TOTALZC,
			  SUM(QTY_PGA) AS TOTALPGA,
			  SUM(QTY_H3) AS TOTALH3,
			  SUM(QTY_BULK) AS TOTALBULK,
			  SUM(QTY_ALF) AS TOTALALF,
			  SUM(QTY_PLA) AS TOTALPLA,
			  SUM(QTY_Q7D) AS TOTALQ7D,
			  SUM(QTY_W2) AS TOTALW2,
			  SUM(QTY_PAG) AS TOTALPAG
			  FROM ELP
			  JOIN EDI_ELP_ALLOT ALLOT
			  ON ELP.TR_NO = ALLOT.TR_NO
			  WHERE CGO_TYPE IN('Transit', 'Export Local B/U')
			  GROUP BY ELP.TR_NO, ELP.FLT_KEY, ELP.FLT_DATE
			),
			ELP_ALLOT2 AS (
			  SELECT
			  ELP.TR_NO, ELP.FLT_KEY, ELP.FLT_DATE,
			  SUM(QTY_Q6) AS TOTALQ6,
			  SUM(QTY_Q7) AS TOTALQ7,
			  SUM(QTY_X8) AS TOTALX8,
			  SUM(QTY_PEB) AS TOTALPEB,
			  SUM(QTY_A2) AS TOTALA2,
			  SUM(QTY_LDC) AS TOTALLDC,
			  SUM(QTY_H2) AS TOTALH2,
			  SUM(QTY_ZA) AS TOTALZA,
			  SUM(QTY_ZB) AS TOTALZB,
			  SUM(QTY_ZC) AS TOTALZC,
			  SUM(QTY_PGA) AS TOTALPGA,
			  SUM(QTY_H3) AS TOTALH3,
			  SUM(QTY_BULK) AS TOTALBULK,
			  SUM(QTY_ALF) AS TOTALALF,
			  SUM(QTY_PLA) AS TOTALPLA,
			  SUM(QTY_Q7D) AS TOTALQ7D,
			  SUM(QTY_W2) AS TOTALW2,
			  SUM(QTY_PAG) AS TOTALPAG
			  FROM ELP
			  JOIN EDI_ELP_ALLOT ALLOT
			  ON ELP.TR_NO = ALLOT.TR_NO
			  WHERE CGO_TYPE IN('Transit PPK')
			  GROUP BY ELP.TR_NO, ELP.FLT_KEY, ELP.FLT_DATE
			),
			ELP_ALLOT3 AS (
			  SELECT
			  ELP.TR_NO, ELP.FLT_KEY, ELP.FLT_DATE,
			  SUM(QTY_Q6) AS TOTALQ6,
			  SUM(QTY_Q7) AS TOTALQ7,
			  SUM(QTY_X8) AS TOTALX8,
			  SUM(QTY_PEB) AS TOTALPEB,
			  SUM(QTY_A2) AS TOTALA2,
			  SUM(QTY_LDC) AS TOTALLDC,
			  SUM(QTY_H2) AS TOTALH2,
			  SUM(QTY_ZA) AS TOTALZA,
			  SUM(QTY_ZB) AS TOTALZB,
			  SUM(QTY_ZC) AS TOTALZC,
			  SUM(QTY_PGA) AS TOTALPGA,
			  SUM(QTY_H3) AS TOTALH3,
			  SUM(QTY_BULK) AS TOTALBULK,
			  SUM(QTY_ALF) AS TOTALALF,
			  SUM(QTY_PLA) AS TOTALPLA,
			  SUM(QTY_Q7D) AS TOTALQ7D,
			  SUM(QTY_W2) AS TOTALW2,
			  SUM(QTY_PAG) AS TOTALPAG
			  FROM ELP
			  JOIN EDI_ELP_ALLOT ALLOT
			  ON ELP.TR_NO = ALLOT.TR_NO
			  WHERE CGO_TYPE IN('Export Local Pre-Pack', 'Transit PPK')
			  GROUP BY ELP.TR_NO, ELP.FLT_KEY, ELP.FLT_DATE
			), 
			ALLOT AS (
			  SELECT
			  FLT_KEY, FLT_DATE,
			  CASE
			    WHEN LENGTH(TRIM(ALLOT)) = 0 THEN NULL
			    WHEN SUBSTR(TRIM(ALLOT), LENGTH(TRIM(ALLOT))) = ',' THEN 
			      SUBSTR(TRIM(ALLOT), 0, LENGTH(TRIM(ALLOT)) - 1)
			    ELSE TRIM(ALLOT)
			  END ALLOT 
			  FROM (
			    SELECT
			    FLT_KEY, FLT_DATE,
			    CASE WHEN QTYQ7 IS NOT NULL AND QTYQ7 <> 0 THEN QTYQ7 || 'Q7, ' ELSE NULL END
			    || CASE WHEN QTYQ6 IS NOT NULL AND QTYQ6 <> 0 THEN QTYQ6 || 'Q6, ' ELSE NULL END
			    || CASE WHEN QTYX8 IS NOT NULL AND QTYX8 <> 0 THEN QTYX8 || 'X8, ' ELSE NULL END
			    || CASE WHEN QTYPEB IS NOT NULL AND QTYPEB <> 0 THEN QTYPEB || 'PEB, ' ELSE NULL END
			    || CASE WHEN QTYH2 IS NOT NULL AND QTYH2 <> 0 THEN QTYH2 || 'H2, ' ELSE NULL END
			    || CASE WHEN QTYA2 IS NOT NULL AND QTYA2 <> 0 THEN QTYA2 || 'A2, ' ELSE NULL END
			    || CASE WHEN QTYLDC IS NOT NULL AND QTYLDC <> 0 THEN QTYLDC || 'LDC, ' ELSE NULL END
			    
			    || CASE WHEN QTYZA IS NOT NULL AND QTYZA <> 0 THEN QTYZA || 'ZA, ' ELSE NULL END
			    || CASE WHEN QTYZB IS NOT NULL AND QTYZB <> 0 THEN QTYZB || 'ZB, ' ELSE NULL END
			    || CASE WHEN QTYZC IS NOT NULL AND QTYZC <> 0 THEN QTYZC || 'ZC, ' ELSE NULL END
			    || CASE WHEN QTYPGA IS NOT NULL AND QTYPGA <> 0 THEN QTYPGA || 'PGA, ' ELSE NULL END
			    || CASE WHEN QTYH3 IS NOT NULL AND QTYH3 <> 0 THEN QTYH3 || 'H3, ' ELSE NULL END
			    || CASE WHEN QTYBULK IS NOT NULL AND QTYBULK <> 0 THEN QTYBULK || 'BULK, ' ELSE NULL END
			    || CASE WHEN QTYALF IS NOT NULL AND QTYALF <> 0 THEN QTYALF || 'ALF, ' ELSE NULL END
			    || CASE WHEN QTYPLA IS NOT NULL AND QTYPLA <> 0 THEN QTYPLA || 'PLA, ' ELSE NULL END
			    || CASE WHEN QTYQ7D IS NOT NULL AND QTYQ7D <> 0 THEN QTYQ7D || 'Q7D, ' ELSE NULL END
			    || CASE WHEN QTYW2 IS NOT NULL AND QTYW2 <> 0 THEN QTYW2 || 'W2, ' ELSE NULL END
			    || CASE WHEN QTYPAG IS NOT NULL AND QTYPAG <> 0 THEN QTYPAG || 'PAG, ' ELSE NULL END
			    
			    || CASE WHEN CNT IS NOT NULL AND CNT <> 0 THEN CNT || 'H5' ELSE NULL END
			    AS ALLOT
			    FROM (
			      SELECT
			      A.FLT_KEY, A.FLT_DATE,
			      A.COUNTH5 CNT,
			      (NVL((A.TOTALQ6 - B.TOTALQ6), 0) + C.TOTALQ6) AS QTYQ6,
			      (NVL((A.TOTALQ7 - B.TOTALQ7), 0) + C.TOTALQ7)AS QTYQ7,
			      (NVL((A.TOTALX8 - B.TOTALX8), 0) + C.TOTALX8) AS QTYX8,
			      (NVL((A.TOTALPEB - B.TOTALPEB), 0) + C.TOTALPEB) AS QTYPEB,
			      (NVL((A.TOTALA2 - B.TOTALA2), 0) + C.TOTALA2) AS QTYA2,
			      (NVL((A.TOTALLDC - B.TOTALLDC), 0) + C.TOTALLDC) AS QTYLDC,
			      (NVL((A.TOTALH2 - B.TOTALH2), 0) + C.TOTALH2) AS QTYH2,
			      
			      (NVL((A.TOTALZA - B.TOTALZA), 0) + C.TOTALZA) AS QTYZA,
			      (NVL((A.TOTALZB - B.TOTALZB), 0) + C.TOTALZB)AS QTYZB,
			      (NVL((A.TOTALZC - B.TOTALZC), 0) + C.TOTALZC) AS QTYZC,
			      (NVL((A.TOTALPGA - B.TOTALPGA), 0) + C.TOTALPGA) AS QTYPGA,
			      (NVL((A.TOTALH3 - B.TOTALH3), 0) + C.TOTALH3) AS QTYH3,
			      (NVL((A.TOTALBULK - B.TOTALBULK), 0) + C.TOTALBULK) AS QTYBULK,
			      (NVL((A.TOTALALF - B.TOTALALF), 0) + C.TOTALALF) AS QTYALF,
			      (NVL((A.TOTALPLA - B.TOTALPLA), 0) + C.TOTALPLA)AS QTYPLA,
			      (NVL((A.TOTALQ7D - B.TOTALQ7D), 0) + C.TOTALQ7D) AS QTYQ7D,
			      (NVL((A.TOTALW2 - B.TOTALW2), 0) + C.TOTALW2) AS QTYW2,
			      (NVL((A.TOTALPAG - B.TOTALPAG), 0) + C.TOTALPAG) AS QTYPAG,
			      
			      A.TR_NO AS TR_NO
			      FROM ELP_ALLOT1 A
			      JOIN ELP_ALLOT2 B
			      ON A.TR_NO = B.TR_NO
			      JOIN ELP_ALLOT3 C
			      ON B.TR_NO = C.TR_NO
			    )
			  )
			),
			ULD_CHECKOUT AS (
			    SELECT FLT.FLT_KEY, FLT.FLT_DATE, 
			    CHK.ULD_KEY, TYP.ULD_TYPE, TYP.ULD_GROUP, TYP.ULD_ALLOT,
			    CHK.CHK_FLG,CHK.HO_FORM_NO,EXPHOVER.PRINT_HANDOVER_DATE
			    FROM EXP_CHKOUT_DTL CHK
			    JOIN ULD_INVENTORY ULD ON CHK.ULD_KEY = ULD.ULD_KEY
          		JOIN EXP_FLT_ULD EXP ON EXP.ULD_KEY = CHK.ULD_KEY AND EXP.FLT_KEY = CHK.FLT_KEY AND EXP.FLT_DATE = CHK.FLT_DATE
          		LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = CHK.HO_FORM_NO AND EXPHOVER.ULD_KEY = CHK.ULD_KEY
			    JOIN ULD_TYP TYP ON ULD.ULD_TYPE = TYP.ULD_TYPE
			    JOIN FLT ON CHK.FLT_KEY = FLT.FLT_KEY AND CHK.FLT_DATE = FLT.FLT_DATE
			    WHERE NVL(EXP.HANDLING_MODE, 'N') != 'DT' 
			   	AND ( NOT (NVL(EXP.TRANSIT_TYPE, 'N') = 'TT')) AND EXP.SOURCE NOT IN ('DLS-L', 'DLS-E')
			),
			ULD_ASSIGNED AS (
			    SELECT FLT.FLT_KEY, FLT.FLT_DATE, 
			    EXP.ULD_KEY, TYP.ULD_TYPE, TYP.ULD_GROUP, TYP.ULD_ALLOT
			    FROM EXP_FLT_ULD EXP
			    JOIN ULD_INVENTORY ULD ON EXP.ULD_KEY = ULD.ULD_KEY
			    JOIN ULD_TYP TYP  ON ULD.ULD_TYPE = TYP.ULD_TYPE
			    LEFT OUTER JOIN EXP_CHKOUT_DTL CHK
			    ON EXP.FLT_KEY = CHK.FLT_KEY AND EXP.FLT_DATE = CHK.FLT_DATE AND EXP.ULD_KEY = CHK.ULD_KEY
			    JOIN FLT ON EXP.FLT_KEY = FLT.FLT_KEY AND EXP.FLT_DATE = FLT.FLT_DATE
			    WHERE NVL(EXP.HANDLING_MODE, 'N') != 'DT' AND (
			      NOT (NVL(EXP.TRANSIT_TYPE, 'N') = 'TT' OR (NVL(EXP.TRANSIT_TYPE, 'N') = 'IF' AND EXP.LOC_CODE IS NULL))
			          OR CHK.CHK_FLG = 'Y'
			    )
			    AND EXP.SOURCE NOT IN ('DLS-L', 'DLS-E')
			),
			WITH_TOW AS (
			  SELECT FLT.FLT_KEY, FLT.FLT_DATE,
			  EXP.ULD_KEY, TYP.ULD_TYPE, TYP.ULD_GROUP, TYP.ULD_ALLOT
			  FROM EXP_FLT_ULD EXP
			  JOIN ULD_INVENTORY ULD ON EXP.ULD_KEY = ULD.ULD_KEY
			  JOIN ULD_TYP TYP ON ULD.ULD_TYPE = TYP.ULD_TYPE
			  LEFT JOIN EXP_CHKOUT_DTL CHK ON EXP.FLT_KEY = CHK.FLT_KEY AND EXP.FLT_DATE = CHK.FLT_DATE AND EXP.ULD_KEY = CHK.ULD_KEY
			  JOIN FLT
			  ON EXP.FLT_KEY = FLT.FLT_KEY AND EXP.FLT_DATE = FLT.FLT_DATE
			  WHERE EXISTS (
			    SELECT NULL
			    FROM TOW_ORDER_OUT TOW
			    JOIN TOW_ORDER_OUT_DTL TOWD
			    ON TOW.TO_NO = TOWD.TO_NO
			    WHERE NOT(STATUS = 'VOID' OR (STATUS = 'FORCE_COMPLETE' AND REMOVE_DATE IS NULL))
			    AND TOWD.ULD_KEY = EXP.ULD_KEY AND TOW.FLT_KEY = EXP.FLT_KEY AND TOW.FLT_DATE = EXP.FLT_DATE
			  )
			  AND NVL(EXP.HANDLING_MODE, 'N') != 'DT' AND (
			    NOT (NVL(EXP.TRANSIT_TYPE, 'N') = 'TT' OR (NVL(EXP.TRANSIT_TYPE, 'N') = 'IF' AND NVL(CHK.CHK_FLG, 'N') = 'Y')) 
			  )
			  AND EXP.SOURCE NOT IN ('DLS-L', 'DLS-E')
			),
			WITHOUT_TOW AS (
			  SELECT FLT.FLT_KEY, FLT.FLT_DATE,
			  EXP.ULD_KEY, TYP.ULD_TYPE, TYP.ULD_GROUP, TYP.ULD_ALLOT
			  FROM EXP_FLT_ULD EXP
			  JOIN ULD_INVENTORY ULD
			  ON EXP.ULD_KEY = ULD.ULD_KEY
			  JOIN ULD_TYP TYP
			  ON ULD.ULD_TYPE = TYP.ULD_TYPE
			  JOIN FLT
			  ON EXP.FLT_KEY = FLT.FLT_KEY AND EXP.FLT_DATE = FLT.FLT_DATE
			  WHERE NOT EXISTS (
			    SELECT NULL
			    FROM TOW_ORDER_OUT TOW
			    JOIN TOW_ORDER_OUT_DTL TOWD
			    ON TOW.TO_NO = TOWD.TO_NO
			    WHERE NOT(STATUS = 'VOID' OR (STATUS = 'FORCE_COMPLETE' AND REMOVE_DATE IS NULL))
			    AND TOWD.ULD_KEY = EXP.ULD_KEY AND TOW.FLT_KEY = EXP.FLT_KEY AND TOW.FLT_DATE = EXP.FLT_DATE
			  )
			  AND NVL(EXP.HANDLING_MODE, 'N') != 'DT' AND (
			    NOT (NVL(EXP.TRANSIT_TYPE, 'N') = 'TT' OR (NVL(EXP.TRANSIT_TYPE, 'N') = 'IF' AND EXP.LOC_CODE IS NULL)) 
			  )
			  AND EXP.SOURCE NOT IN ('DLS-L', 'DLS-E')
			),
			FINAL AS (
			  SELECT FLT_KEY, FLT_DATE,
			  FLT_TIME, STD, ETD, STD_ETD,
			  ACFT_TYPE, ACFT_PRK_BAY,
			  CARR_CODE,RHO_ID, CGO_ACFT_TYPE,
			  NIL_IF_FLT, NIL_OTHER_FLT,
			  BUILD_COMPLETED, (
			    SELECT COUNT(1)
			    FROM ULD_ASSIGNED ASS
			    WHERE ASS.FLT_KEY = FLT.FLT_KEY AND ASS.FLT_DATE = FLT.FLT_DATE
			  ) ASSIGNED_CNT, (
			    SELECT STRAGG(STRINGDELIM(COUNT(1) || ULD_ALLOT, ', '))
			    FROM ULD_ASSIGNED ASS
			    WHERE ASS.FLT_KEY = FLT.FLT_KEY AND ASS.FLT_DATE = FLT.FLT_DATE
			    GROUP BY ULD_ALLOT
			  ) ASSIGNED, (
			    SELECT COUNT(1)
			    FROM ULD_CHECKOUT CHK
			    WHERE CHK.FLT_KEY = FLT.FLT_KEY AND CHK.FLT_DATE = FLT.FLT_DATE AND CHK.CHK_FLG = 'Y'
			  ) CHECKED_OUT_CNT, (
			    SELECT STRAGG(STRINGDELIM(COUNT(1) || ULD_ALLOT, ', '))
			    FROM ULD_CHECKOUT CHK
			    WHERE CHK.FLT_KEY = FLT.FLT_KEY AND CHK.FLT_DATE = FLT.FLT_DATE AND CHK.CHK_FLG = 'Y'
			    GROUP BY ULD_ALLOT
			  ) CHECKED_OUT, (
			    SELECT STRAGG(STRINGDELIM(COUNT(1) || ULD_ALLOT, ', '))
			    FROM ULD_CHECKOUT CHK
			    WHERE CHK.FLT_KEY = FLT.FLT_KEY AND CHK.FLT_DATE = FLT.FLT_DATE AND CHK.CHK_FLG = 'N'
			    GROUP BY ULD_ALLOT
			  ) NOT_CHECKED_OUT, (
			    SELECT STRAGG(STRINGDELIM(COUNT(1) || ULD_ALLOT, ', '))
			    FROM WITH_TOW TOW
			    WHERE TOW.FLT_KEY = FLT.FLT_KEY AND TOW.FLT_DATE = FLT.FLT_DATE
			    GROUP BY ULD_ALLOT
			  ) TO_TOW, (
			    SELECT STRAGG(STRINGDELIM(COUNT(1) || ULD_ALLOT, ', '))
			    FROM WITHOUT_TOW TOW
			    WHERE TOW.FLT_KEY = FLT.FLT_KEY AND TOW.FLT_DATE = FLT.FLT_DATE
			    GROUP BY ULD_ALLOT
			  ) WO_TOW, (
			    SELECT ALLOT FROM ALLOT 
			    WHERE ALLOT.FLT_KEY = FLT.FLT_KEY AND ALLOT.FLT_DATE = FLT.FLT_DATE
			  ) WH_ALLOT, (
			    SELECT DECODE(COUNT(1), 0, NULL, COUNT(1)) 
			    FROM TOW_ORDER_OUT TOW
			    WHERE TOW.STATUS = 'ISSUED' AND TOW.FLT_KEY = FLT.FLT_KEY AND TOW.FLT_DATE = FLT.FLT_DATE
			  ) TOW_ISSUED, (
			    SELECT DECODE(COUNT(1), 0, NULL, COUNT(1)) 
			    FROM TOW_ORDER_OUT TOW
			    WHERE TOW.STATUS IN ('COMPLETE', 'FORCE COMPLETE') 
			    AND TOW.FLT_KEY = FLT.FLT_KEY AND TOW.FLT_DATE = FLT.FLT_DATE
			  ) TOW_COMPLETED,
			  (SELECT  DECODE(COUNT(1), 0, NULL, COUNT(1))
    FROM ULD_CHECKOUT CHK
    WHERE CHK.FLT_KEY = FLT.FLT_KEY
    AND CHK.FLT_DATE  = FLT.FLT_DATE
    AND CHK.HO_FORM_NO IS  NULL
    ) hoCount,
    (SELECT DECODE(COUNT(1), 0, NULL, COUNT(1))
    FROM ULD_CHECKOUT CHK
    WHERE CHK.FLT_KEY   = FLT.FLT_KEY
    AND CHK.FLT_DATE    = FLT.FLT_DATE
    AND CHK.HO_FORM_NO IS NOT NULL AND CHK.PRINT_HANDOVER_DATE IS NULL
	) WO_PHO,
		(SELECT (CASE WHEN COUNT(1) > 0 THEN 'Y' ELSE 'N' END)
    FROM DUAL
    WHERE (SELECT TO_DATE((SELECT TO_CHAR(NVL(EST_DATE,SCH_DATE),'DDMONYY')||' '||trim(TO_CHAR(NVL(EST_TIME,SCH_TIME),'0000'))
        FROM FLT_OPR OPR
        WHERE EXISTS (SELECT  NULL FROM EXP_CHKOUT_DTL A, EXP_ULD_HOVER_DTL EXPHOVER, EXP_FLT_ULD EXP
        WHERE A.HO_FORM_NO               IS NOT NULL
        AND EXPHOVER.HO_FORM_NO           = A.HO_FORM_NO
        AND EXPHOVER.PRINT_HANDOVER_DATE IS NULL
        AND EXPHOVER.ULD_KEY = A.ULD_KEY
        AND A.FLT_KEY                     = OPR.FLT_KEY
        AND A.FLT_DATE                    = OPR.SCH_DATE
        AND EXP.FLT_KEY = A.FLT_KEY
        AND EXP.FLT_DATE = A.FLT_DATE
        AND EXP.ULD_KEY = A.ULD_KEY 
        AND NVL(EXP.HANDLING_MODE, 'N') != 'DT' AND ( NOT (NVL(EXP.TRANSIT_TYPE, 'N') = 'TT'))
        AND EXP.SOURCE NOT IN ('DLS-L', 'DLS-E')
        AND (EST_DATE                    IS NOT NULL
        OR SCH_DATE                      IS NOT NULL)
        ) AND OPR.FLT_KEY                   =FLT.FLT_KEY
        AND OPR.SCH_DATE                  =FLT.FLT_DATE
        AND OPR.FLT_TYPE                  ='D'),'DDMONYY HH24MI')
      FROM DUAL) BETWEEN SYSDATE AND SYSDATE +
      (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='CONFIG_PRINT_TIME_EST_TIME'
      )/(60*24)
    ) AS estColor,
    (SELECT (CASE
        WHEN COUNT(1) > 0
        THEN 'Y'
        ELSE 'N'
      END) AS printInd
    FROM EXP_CHKOUT_DTL A,
      EXP_ULD_HOVER_DTL EXPHOVER,EXP_FLT_ULD EXP
    WHERE EXPHOVER.HO_FORM_NO         = A.HO_FORM_NO
    AND A.HO_FORM_NO                 IS NOT NULL
    AND EXPHOVER.PRINT_HANDOVER_DATE IS NULL
    AND EXPHOVER.ULD_KEY              = A.ULD_KEY
    AND A.FLT_KEY                     = FLT.FLT_KEY
    AND A.FLT_DATE                    =FLT.FLT_DATE
    AND EXP.FLT_KEY = A.FLT_KEY
        AND EXP.FLT_DATE = A.FLT_DATE
        AND EXP.ULD_KEY = A.ULD_KEY 
        AND NVL(EXP.HANDLING_MODE, 'N') != 'DT' AND ( NOT (NVL(EXP.TRANSIT_TYPE, 'N') = 'TT')) 
        AND EXP.SOURCE NOT IN ('DLS-L', 'DLS-E')
    AND ROUND((SYSDATE - SEND_HANDOVER_DATE) * (60 * 24),2) >
          (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='CONFIG_PRINT_TIME_FOR_ULD'
          )) AS confgColor	 
      FROM FLT
			)
			SELECT
			FLT_KEY fltKey, TO_CHAR(FLT_DATE, 'DDMONYY') fltDate,
			FLT_TIME, STD, ETD, STD_ETD etdStd,
			ACFT_TYPE acftType, ACFT_PRK_BAY parkingBay,
			BUILD_COMPLETED buCompInd,
			ASSIGNED uldAssigned, CHECKED_OUT checkOutUld, NOT_CHECKED_OUT notCheckOutUld,
			TO_TOW toBeTowed, WO_TOW withOutTow, WH_ALLOT warehouseAllot,
			TOW_ISSUED towIssued, TOW_COMPLETED towCompleted, hoCount hoCount,WO_PHO wpho, DECODE(estColor,'Y',DECODE(confgColor,'Y','Y','N'),'N') wphoColr,
			CASE
			  WHEN (ASSIGNED_CNT - CHECKED_OUT_CNT) > 0 THEN
			  CASE
			  	WHEN (SELECT COUNT(1) FROM EXP_ULD_HOVER_REJ_DTL HOVERDTL WHERE HOVERDTL.FLT_KEY=FINAL.FLT_KEY AND HOVERDTL.FLT_DATE=FINAL.FLT_DATE AND HOVERDTL.HO_STATUS='Rejected') > 0 THEN 'RED'
			    WHEN FLT_TIME <= (SYSDATE + ((SELECT NVL(RULE_VALUE, 1) FROM CMSRULES WHERE RULE_CODE = 'EXP_RAMP_MONITOR_RED') * 60)/24/60) THEN 'PINK'
			    WHEN FLT_TIME <= (SYSDATE + ((SELECT NVL(RULE_VALUE, 2) FROM CMSRULES WHERE RULE_CODE = 'EXP_RAMP_MONITOR_YELLOW') * 60)/24/60) THEN 'YELLOW'
			    WHEN FLT_TIME <= (SYSDATE + ((SELECT NVL(RULE_VALUE, 2) FROM CMSRULES WHERE RULE_CODE = 'EXP_RAMP_MONITOR_ORANGE') * 60)/24/60) THEN 'ORANGE'			    
			    ELSE 'DEFAULT'
			  END
			  ELSE 'DEFAULT'
			END indicator
			FROM FINAL
			WHERE 1 = 1
		]]>
		<isNotEmpty property="fltKey">
			<![CDATA[ AND FLT_KEY = #fltKey# ]]>
		</isNotEmpty>
		<isNotEmpty property="carrCode">
			<![CDATA[ AND CARR_CODE = #carrCode# ]]>
		</isNotEmpty>	
		<isEmpty property="carrCode">
				<isNotEmpty property="loginCarrier">
		            <![CDATA[    
		               AND (CARR_CODE = #loginCarrier#
		                OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE= #loginCarrier#))
		            ]]>
	            </isNotEmpty>
	       	</isEmpty>	
	     <isEmpty property="loginCarrier">
			<isNotEmpty prepend="AND" property="loginCustCode">
			    RHO_ID = #loginCustCode#
			</isNotEmpty>
		</isEmpty>
		<isNotEmpty property="acftType">
			<![CDATA[ AND CGO_ACFT_TYPE = #acftType# ]]>
		</isNotEmpty>
		<isNotEqual property="nilCargo" compareValue="Y">
			<![CDATA[ AND (NIL_IF_FLT = 'N' OR NIL_OTHER_FLT = 'N') ]]>
		</isNotEqual>				
		<dynamic>
			<![CDATA[ ORDER BY FLT_TIME, FLT_KEY ]]>
		</dynamic>
	</select>		
		
	<select id="validateULDisassignedtootherflightOrNot"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
		SELECT count(1) FROM ULD_INVENTORY WHERE ULD_KEY=#uldNo# AND FLT_KEY = #flightKey# and FLT_DATE=#fltDate# AND FLT_TYPE = 'E'
	</select>
	
	<select id="validateoFFLOADULDisassignedtootherflightOrNot"  parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
		SELECT count(1) FROM ULD_INVENTORY WHERE ULD_KEY=#uldNo# AND ((FLT_KEY = #flightKey# and FLT_DATE=#fltDate# AND FLT_TYPE = 'E') OR (FLT_KEY IS NULL AND FLT_DATE IS NULL))
	</select>
	
	
	<select id="getDelOfldPPKType"  parameterClass="java.lang.String"  resultClass="java.lang.String">
		SELECT decode(ppk_ind,'Y','P',decode(mix_ppk_ind,'Y','M','B')) FROM ULD_INVENTORY WHERE ULD_KEY=#PARAM#
	</select>
	<!-- RCL Report -->
	<select id="sqlGetRCLReportBulkData" parameterClass="cargo.cms.export.bo.RCLReportBO"
		resultClass="cargo.cms.export.bo.RCLReportBO">
		<![CDATA[
			SELECT
			'Bulk' rclType,
			TO_CHAR(RCL.RCL_DATE, 'DDMONYY HH24:MI') rclTime, RCL.RCL_NO rclNo,
			RCL.RCL_PCS rclPcs, RCL.RCL_WT rclWt, 
			RCL.AWB_NO awbNo, AWB.PCS awbPcs, AWB.WT awbWt
			FROM EXP_RCL_HD RCL
			JOIN AWB
			ON RCL.AWB_NO = AWB.AWB_NO AND RCL.AWB_DATE = AWB.AWB_DATE
      		LEFT JOIN EXP_CAR CAR ON RCL.AWB_NO = CAR.AWB_NO AND RCL.AWB_DATE = CAR.AWB_DATE
			WHERE RCL.ASIDE_ACCEPT = 'Y' AND RCL.PPK_TYPE = 'B'
			AND RCL.RCL_DATE BETWEEN TO_DATE(#from#, 'DDMONYY HH24:MI') AND TO_DATE(#to#, 'DDMONYY HH24:MI')
		]]>
		<isNotEmpty property="agentName">
			<![CDATA[ 
				AND (
				(
					SELECT CODE_DESC FROM CUST_COMPANY AGT 
					WHERE UPPER(AGT.CODE_DESC) = UPPER(#agentName#)
				) IN (CAR.SHPR_NAME, CAR.AGENT_NAME, CAR.CSGNE_NAME, AWB.SHIPPER_NAME, AWB.AGENT_NAME)
		        OR
		        (
					SELECT CODE_DESC FROM CUST_COMPANY AGT 
					WHERE UPPER(AGT.CODE_DESC) = UPPER(#agentName#)
				) IN (AWB.AGENT_CODE, AWB.SHPR_CODE, RCL.CUST_NO)
		        )
			]]>
		</isNotEmpty>
		<dynamic>
			ORDER BY RCL.RCL_NO
		</dynamic>
	</select>
	<select id="sqlGetRCLReportNonBulkData" parameterClass="cargo.cms.export.bo.RCLReportBO"
		resultClass="cargo.cms.export.bo.RCLReportBO">
		<![CDATA[
			SELECT
			'Prepack' rclType,
			TO_CHAR(RCL.RCL_DATE, 'DDMONYY HH24:MI') rclTime, RCL.RCL_NO rclNo,
			DTL.ULD_KEY uldKey, RCL.AWB_NO awbNo
			FROM EXP_RCL_HD RCL
			JOIN EXP_RCL_DTL DTL
			ON RCL.RCL_NO = DTL.RCL_NO
			JOIN AWB
			ON RCL.AWB_NO = AWB.AWB_NO AND RCL.AWB_DATE = AWB.AWB_DATE
			LEFT JOIN EXP_CAR CAR ON RCL.AWB_NO = CAR.AWB_NO AND RCL.AWB_DATE = CAR.AWB_DATE
			WHERE RCL.ASIDE_ACCEPT = 'Y' AND RCL.PPK_TYPE  = 'P'
			AND RCL.RCL_DATE BETWEEN TO_DATE(#from#, 'DDMONYY HH24:MI') AND TO_DATE(#to#, 'DDMONYY HH24:MI')
		]]>
		<isNotEmpty property="agentName">
			<![CDATA[ 
				AND (
				(
					SELECT CODE_DESC FROM CUST_COMPANY AGT 
					WHERE UPPER(AGT.CODE_DESC) = UPPER(#agentName#)
				) IN (CAR.SHPR_NAME, CAR.AGENT_NAME, CAR.CSGNE_NAME, AWB.SHIPPER_NAME, AWB.AGENT_NAME)
		        OR
		        (
					SELECT CODE FROM CUST_COMPANY AGT 
					WHERE UPPER(AGT.CODE_DESC) = UPPER(#agentName#)
				) IN (AWB.AGENT_CODE, AWB.SHPR_CODE, RCL.CUST_NO)
		        )
			]]>
		</isNotEmpty>		
		<![CDATA[
			UNION
			SELECT
			'Mix Prepack' rclType,
			TO_CHAR(RCL.RCL_DATE, 'DDMONYY HH24:MI') rclTime, RCL.RCL_NO rclNo,
			DTL.ULD_KEY uldKey, DTL.AWB_NO awbNo
			FROM EXP_RCL_HD RCL
			JOIN EXP_RCL_BRKDN DTL
			ON RCL.RCL_NO = DTL.RCL_NO
			JOIN AWB
			ON DTL.AWB_NO = AWB.AWB_NO AND DTL.AWB_DATE = AWB.AWB_DATE
			LEFT JOIN EXP_CAR CAR ON DTL.AWB_NO = CAR.AWB_NO AND DTL.AWB_DATE = CAR.AWB_DATE
			WHERE RCL.ASIDE_ACCEPT = 'Y' AND RCL.PPK_TYPE = 'M'
			AND RCL.RCL_DATE BETWEEN TO_DATE(#from#, 'DDMONYY HH24:MI') AND TO_DATE(#to#, 'DDMONYY HH24:MI')
		]]>
		<isNotEmpty property="agentName">
			<![CDATA[ 
				AND (
				(
					SELECT CODE_DESC FROM CUST_COMPANY AGT 
					WHERE UPPER(AGT.CODE_DESC) = UPPER(#agentName#)
				) IN (CAR.SHPR_NAME, CAR.AGENT_NAME, CAR.CSGNE_NAME, AWB.SHIPPER_NAME, AWB.AGENT_NAME)
		        OR
		        (
					SELECT CODE FROM CUST_COMPANY AGT 
					WHERE UPPER(AGT.CODE_DESC) = UPPER(#agentName#)
				) IN (AWB.AGENT_CODE, AWB.SHPR_CODE, RCL.CUST_NO)
		        )
			]]>
		</isNotEmpty>
		<dynamic>
			ORDER BY rclType, rclNo
		</dynamic>
	</select>	
	<!-- RCL Report -->
	
	<update id="updateBuildupstartandcomplete" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	update exp_pmanifest_uld set bldup_start='Y',bldup_start_user_id='DUMMY',bldup_start_date=SYSDATE,bldup_complete='Y',bldup_complete_date=SYSDATE,bldup_complete_user_id='DUMMY' WHERE flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no in (select RULE_VALUE from cmsrules where RULE_CODE='Dummy_H_Container') 
    </update>

	 <select id="Export_selecteRCLDetailMixedById_Enquire1" 	parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" 	resultClass="cargo.cms.export.bo.ERCLMixedPrepackDetailBO">
				select 'NOSUM'as diff, SUBSTR(TRIM(AWB_NO),1,3)||'-'||SUBSTR(TRIM(AWB_NO),4) as awbNo, DEST as dest, PCS as pieces, trim(to_char(WEIGHT,'9999990.99')) as weight,QCP_IND  AS qcpIndicator,
		QCP_GOODS_DESC as qcp_goods_desc,SPL_CODE1 AS splCode1,SPL_CODE2 AS splCode2,SPL_CODE3 AS splCode3,SPL_CODE4 AS splCode4,SPL_CODE5 AS splCode5,SPL_CODE6 AS splCode6,SPL_CODE7 AS splCode7,SPL_CODE8 AS splCode8,SPL_CODE9 AS splCode9,
    (decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '', ','))
		|| decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '', ','))
		|| decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '', ','))
		|| decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '', ','))
		|| decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '', ','))
		|| decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '', ','))
		|| decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '', ','))
		  || decode(spl_code8, null, '', spl_code8 || decode(spl_code9, null, '', ','))
		|| decode(spl_code9, null, '', spl_code9)) as splCode,NVL(carr_rf,'NA') carrierRF
		FROM   exp_pre_rcl_brkdn 
		WHERE  pre_rcl_no= #preRclNo#
		union 
		select 'SUM'as diff, null as awbNo, null dest, sum(pcs) pieces, trim(to_char(sum(weight),'9999990.99')) weight,'' AS qcpIndicator,null as qcp_goods_desc,'' AS splCode1,'' AS splCode2,'' AS splCode3,'' AS splCode4,'' AS splCode5,'' AS splCode6,'' AS splCode7,'' AS splCode8,'' AS splCode9,'' as splCode,'' as carrierRF
		from   (select PCS, weight
				FROM   exp_pre_rcl_brkdn 
				WHERE  pre_rcl_no= #preRclNo#)
	 </select>	
	 
	 <!-- uncheckin-offload start -->
    <select id="checkConfirmOffloadForULD" parameterClass="cargo.cms.export.bo.ExpOffloadUld" resultClass="java.lang.Integer">
	SELECT COUNT(1)
	FROM EXP_OFFLOAD_ULD
	WHERE FLT_KEY   =#fltKey#
	AND FLT_DATE    =#fltDate#
	AND ULD_BT_NO   =#uldBtNo#
	AND CONFIRMED_YN='Y'
	</select>
    <select id="checkCheckInOffldForULD" parameterClass="cargo.cms.export.bo.ExpOffloadUld" resultClass="java.lang.Integer">
	SELECT COUNT(1)
	FROM ULD_INVENTORY A,
	  EXP_OFFLOAD_ULD B
	WHERE B.FLT_KEY   = A.FLT_KEY
	AND B.FLT_DATE    =A.FLT_DATE
	AND B.ULD_BT_NO   = A.ULD_KEY
	AND A.FLT_KEY     =#fltKey#
	AND A.FLT_DATE    =#fltDate#
	AND A.ULD_KEY     =#uldBtNo#
	AND B.CONFIRMED_YN='N'
	AND A.OFLD_FLG    ='Y'
	</select>
	<select id="offLoadUnCheckInSearch" parameterClass="cargo.cms.export.bo.ExpOffloadUld" resultClass="cargo.cms.export.bo.ExpOffloadUld">
	SELECT A.FLT_KEY AS fltKey,
	  TO_CHAR(A.FLT_DATE,'DDMONYY') AS fltDate,
	  A.ULD_BT_NO    AS uldBtNo,
	  (SELECT code_desc
	  FROM mast_code_dtl
	  WHERE code_type = 'ULD_STATE'
	  AND code        = FUN_GET_ULD_STATE(ULD_BT_NO)
	  )          AS status,
	  B.LOC_CODE AS location,
	  A.NEW_CHECKIN_ULD AS newCheckin
	FROM EXP_PMANIFEST_ULD A,
	     ULD_INVENTORY B
	WHERE B.ULD_KEY   = A.ULD_BT_NO
	AND A.FLT_KEY     =#fltKey#
	AND A.FLT_DATE    =#fltDate#
	AND A.ULD_BT_NO   =#uldBtNo#
  union all
  SELECT A.FLT_KEY AS fltKey,
	  TO_CHAR(A.FLT_DATE,'DDMONYY') AS fltDate,
	  A.ULD_BT_NO    AS uldBtNo,
	  (SELECT code_desc
	  FROM mast_code_dtl
	  WHERE code_type = 'ULD_STATE'
	  AND code        = FUN_GET_ULD_STATE(ULD_BT_NO)
	  )          AS status,
	  B.LOC_CODE AS location,
	  'N' AS newCheckin
	FROM EXP_PMAN_TARMAC_ULD A,
	     ULD_INVENTORY B
	WHERE B.ULD_KEY   = A.ULD_BT_NO
	AND A.FLT_KEY     =#fltKey#
	AND A.FLT_DATE    =#fltDate#
	AND A.ULD_BT_NO   =#uldBtNo#
	</select>
    <update id="updateUnchkinUldInventory" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    UPDATE ULD_INVENTORY  set loc_code='',OWNED_INV='N',OFLD_FLG = 'N',LM_USER_ID  = #userID# where uld_key=#uldBtNo#
    </update>
	<update id="updateUnchkinEICUldInventory" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    UPDATE ULD_INVENTORY  set loc_code='',OWNED_INV='N',OFLD_FLG = 'N',LM_USER_ID  = #userID# where uld_key in (select uld_key from uld_inventory where base_plt=#uldBtNo#)
    </update>
    <update id="updateUnchkExpChkoutDtl" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    update EXP_CHKOUT_DTL set CHK_FLG='Y', CHKOUT_USER = #userID#, CHKOUT_DATE =SYSDATE, CHKOUT_TIME=to_char(sysdate, 'HH24MI'),TR_TYPE='DUMMY'    WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND uld_key=#uldBtNo#  
    </update>
    <update id="updateUnchkExpPmanifestUld" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    update EXP_PMANIFEST_ULD
			    set READY_DISP = 'Y',
			    	READY_WH  = 'Y',
			    	READY_MAN_DATE = null,
			    	READY_MAN_ID = null,
			    	LM_DATE = sysdate,
			    	LM_USER_ID  = #userID#,
			    	READY_DISP_DATE = sysdate,READY_DISP_TIME = TO_CHAR(sysdate, 'HH24MM')
			WHERE FLT_KEY=#fltKey# 
			AND FLT_DATE=#fltDate# 
			AND ULD_BT_NO=#uldBtNo#
    </update>
    <update id="updateUnchkExpPmanTarmacUld" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    update EXP_PMAN_TARMAC_ULD
			    set READY_DISP = 'Y',			    	
			    	READY_MAN_DATE = null,
			    	READY_MAN_ID = null,
			    	LM_DATE = sysdate,
			    	LM_USER_ID  = #userID#,
			    	READY_DISP_DATE = SYSDATE,READY_DISP_TIME = TO_CHAR(sysdate, 'HH24MM')
			WHERE FLT_KEY=#fltKey# 
			AND FLT_DATE=#fltDate# 
			AND ULD_BT_NO=#uldBtNo#
    </update>
    <select id="checkPreoffloadCount" parameterClass="cargo.cms.export.bo.ExpOffloadUld" resultClass="java.lang.Integer">
    <![CDATA[
    select count(1) from EXP_OFFLOAD_ULD ULD,EXP_OFFLOAD_ULD_AWB AWB WHERE
  	ULD.FLT_KEY = AWB.FLT_KEY AND ULD.FLT_DATE=AWB.FLT_DATE AND ULD.ULD_BT_NO = AWB.ULD_BT_NO AND
  	ULD.flt_key=#fltKey# and ULD.flt_date=#fltDate# and ULD.uld_bt_no=#uldBtNo# AND awb.pre_off_pcs > 0
    ]]>
    </select>
    <update id="updateUnchkExpOffloadUld" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    update exp_offload_uld set CHECKED_IN_FLAG='N',checked_in_date='',TR_TYPE='UNCOU',LM_USER_ID=#userID# where FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
    </update>
    <update id="UPDATE_USER_EXP_OFFLOAD_ULD" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    update exp_offload_uld set LM_USER_ID=#userID# where FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
    </update>
    <delete id="deleteRecordInExpOffloadULD" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    DELETE FROM EXP_OFFLOAD_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
    </delete>
    <update id="updateNewUnchkinUldInventory" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
        UPDATE ULD_INVENTORY  set loc_code='',OWNED_INV='N',OFLD_FLG = 'N',flt_key=null,flt_date=null, TR_TYPE = 'dummy', LM_USER_ID = #userID# where uld_key=#uldBtNo#
    </update>
    <update id="updateLMUserInNewUnchkinUldInventory" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
        UPDATE EXP_OFFLOAD_ULD SET LM_USER_ID = #userID# WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
    </update>
     <update id="updatePManLMUserInNewUnchkinUldInventory" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
   	  UPDATE exp_pmanifest_uld SET LM_USER_ID = #userID# WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
    </update>
    <delete id="deleteNewUnchkFromExpChkoutDtl" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    DELETE FROM EXP_CHKOUT_DTL where FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_key=#uldBtNo#
    </delete>
    <select id="checkExpCheckOutHdCount" parameterClass="cargo.cms.export.bo.ExpOffloadUld" resultClass="java.lang.Integer">
    SELECT COUNT(1) FROM EXP_CHKOUT_DTL WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
    </select>
    <delete id="deleteRecordFromExpchkouthd" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    DELETE FROM EXP_CHKOUT_HD where FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
    </delete>
    <delete id="deleteUnChkExpPmanifestUld" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
    DELETE FROM EXP_PMANIFEST_ULD where FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
    </delete>
    <!-- uncheckin-offload end -->
	<select id="validatePmanUnldgPt" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		 <![CDATA[ 
			 SELECT COUNT(1) FROM exp_pmanifest_awb
				WHERE flt_key = #FLT_KEY#
				AND flt_date  = TO_DATE(#FLT_DATE#,'DDMONYY')
				AND flt_type  = 'E'
				AND unldg_pt  <> #UNLDG_PT#
				AND awb_no    = #AWB_NO#
				AND awb_date  = TO_DATE(#AWB_DATE#,'DDMONYY')
		 ]]>
     </select>
	 
	 <select id="chkUldBuildup" parameterClass="map" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM exp_pmanifest_uld_awb	WHERE uld_bt_no = #uldKey# AND FLT_KEY = #flightKey#	AND FLT_DATE = #flightDate#
	</select>
	
	<!-- Auto Close Export AWB -->
     <update id="getExportAWBsforAllFlightsList_markAWBClose">
	  	  update awb set awb_closed_yn='Y',LM_DATE = sysdate,LM_USER_ID =  'SYSTEM'
		 where awb.rowid in (select a.rowid
			from awb a
			left join (select d.awb_no, d.awb_date, sum(d.pcs) pcs, sum(d.wt) wt from imp_trm_hd h
	    	join imp_trm_dtl d on h.trm_no = d.trm_no
				    where h.status = 'POSTED' and h.recd_carr_handr != 'CPCT'
	    	group by d.awb_no, d.awb_date) t on t.awb_no = a.awb_no and t.awb_date = a.awb_date
				left join (select cs.awb_no, cs.awb_date, 
				          sum(case when nvl(recd_pcs,0) + nvl(tt_if_pcs, 0) != nvl(sup_pcs, 0)  then 1 else 0 end) disc_cnt 
				      from (select awb_no, awb_date, flt_key, flt_date, manifest_pcs, recd_pcs, (manifest_pcs + case when CIR_PROC_USER is null then 0 else
				                case when CIR_PCS_TYPE = 'SL' then -1 * CIR_PCS else CIR_PCS end end) sup_pcs
				           from imp_car_shp) cs
				       left join (select awb_no, awb_date, flt_key, flt_date, sum(shp_trf_pc) tt_if_pcs
				          from v_ddt_dtl where (trf_type = 'IF' or shp_trf_type = 'TT') group by awb_no, awb_date, flt_key, flt_date) d 
				            on d.awb_no = cs.awb_no and d.awb_date = cs.awb_date and d.flt_key = cs.flt_key and d.flt_date = cs.flt_date 
				      group by cs.awb_no, cs.awb_date
				       ) s on s.awb_no = a.awb_no and s.awb_date = a.awb_date
				left join (select awb_no, awb_date, sum(locn_pcs) locn_pcs from  awb_inventory group by awb_no, awb_date) i
				    on i.awb_no = a.awb_no and i.awb_date = a.awb_date       
				left join (select awb_no, awb_date, sum(pman_pcs) pman_pcs, sum(unassigned_bulk_pcs) unassigned_bulk_pcs 
				        from  exp_pmanifest_awb group by awb_no, awb_date) p
				    on p.awb_no = a.awb_no and p.awb_date = a.awb_date       
				where a.pman_pcs + nvl(t.pcs, 0) >= a.pcs   
				and nvl(p.unassigned_bulk_pcs, 0) = 0 and nvl(i.locn_pcs, 0) = 0
				and ((a.awb_type = 'E' and a.car_yn = 'Y') or (a.awb_type = 'T' and nvl(s.disc_cnt, 0) = 0 ))
				and a.awb_closed_yn='N'
				and (a.awb_no,a.awb_date) in (
		 SELECT DISTINCT AWB_NO as awbNo, TO_CHAR(AWB_DATE,'DDMONYY') as awbDate 
			FROM((    
		    SELECT DISTINCT A.AWB_NO, A.AWB_DATE, A.FLT_KEY fltKey, A.FLT_DATE fltDate, TO_DATE(TO_CHAR(E.ACT_DATE,'DDMONYY') || LPAD(E.ACT_TIME,4,'0'),'DDMONYYHH24MI') atd
				FROM EXP_PMANIFEST_AWB A,
				EDI_FWB B,
				EDI_FHL C,
			    AWB D,
			    FLT_OPR E
				WHERE A.AWB_NO = B.AWB_NO(+)
				AND A.AWB_NO = C.AWB_NO(+)
		    	AND A.AWB_NO = D.AWB_NO AND A.AWB_DATE = D.AWB_DATE AND D.AWB_CLOSED_YN ='N'
		   		AND A.FLT_KEY = E.FLT_KEY AND A.FLT_DATE = E.SCH_DATE AND E.FLT_TYPE='D' AND E.ACT_DATE IS NOT NULL AND E.ACT_TIME IS NOT NULL
		   		AND (E.ACT_DATE
		             &lt;= Sysdate - (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'CONFIG_DAYS_EXP_AWB_CLOSE'))
		    	AND FUN_VALIDATE_AWB(A.AWB_NO,(SELECT CARR_CODE FROM AWB WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE),'A') not in ('N','C'))
		    UNION ALL
		    (SELECT DISTINCT A.AWB_NO, A.AWB_DATE,A.FLT_KEY fltKey, A.FLT_DATE fltDate, TO_DATE(TO_CHAR(E.ACT_DATE,'DDMONYY') || LPAD(E.ACT_TIME,4,'0'),'DDMONYYHH24MI') atd
				FROM EXP_PMAN_TARMAC_AWB A,
				EDI_FWB B,
				EDI_FHL C,
		   	 	AWB D,
		    	FLT_OPR E
				WHERE A.AWB_NO = B.AWB_NO(+)
				AND A.AWB_NO = C.AWB_NO(+)
		    	AND A.AWB_NO = D.AWB_NO AND A.AWB_DATE = D.AWB_DATE and D.AWB_CLOSED_YN ='N'
		    	AND A.FLT_KEY = E.FLT_KEY AND A.FLT_DATE = E.SCH_DATE AND E.FLT_TYPE='D' AND E.ACT_DATE IS NOT NULL AND E.ACT_TIME IS NOT NULL
		    	AND (E.ACT_DATE
		           &lt;= Sysdate - (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'CONFIG_DAYS_EXP_AWB_CLOSE'))
		   	AND FUN_VALIDATE_AWB(A.AWB_NO, (SELECT CARR_CODE FROM AWB WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE),'A') NOT IN ('N','C')))
		    )
		    )
	</update> 
	
	<select id="getDLSLockWithWait" parameterClass="java.util.HashMap" resultClass="java.lang.String">			
		SELECT DLS_NO FROM EXP_DLS_HD WHERE FLT_KEY = #flt_key# AND FLT_DATE = TO_DATE(#flt_date#, 'DDMONYY') FOR UPDATE WAIT 90
	</select>
       
       <select id="getDLSLockWithNOWait" parameterClass="java.util.HashMap" resultClass="java.lang.String">			
		SELECT DLS_NO FROM EXP_DLS_HD WHERE FLT_KEY = #flt_key# AND FLT_DATE = TO_DATE(#flt_date#, 'DDMONYY') FOR UPDATE NOWAIT
	</select>
	
	<select id="getDLSSHCCount" parameterClass="java.lang.String" resultClass="java.lang.String">			
		select count(1) from mast_spl_hand_code where dls_yn = 'Y' and code = #shc#
	</select>
	<select id="getExportAWBsforAllFlightsList" parameterClass="cargo.cms.export.bo.FlightCloseDetailsBO" resultClass="cargo.cms.export.bo.FlightCloseDetailsBO">
	  	  SELECT DISTINCT AWB_NO as awbNo, TO_CHAR(AWB_DATE,'DDMONYY') as awbDate , fltKey, fltDate, atd
			FROM((    
		    SELECT DISTINCT A.AWB_NO, A.AWB_DATE, A.FLT_KEY fltKey, A.FLT_DATE fltDate, TO_DATE(TO_CHAR(E.ACT_DATE,'DDMONYY') || LPAD(E.ACT_TIME,4,'0'),'DDMONYYHH24MI') atd
				FROM EXP_PMANIFEST_AWB A,
				EDI_FWB B,
				EDI_FHL C,
			    AWB D,
			    FLT_OPR E
				WHERE A.AWB_NO = B.AWB_NO(+)
				AND A.AWB_NO = C.AWB_NO(+)
		    	AND A.AWB_NO = D.AWB_NO AND A.AWB_DATE = D.AWB_DATE AND D.AWB_CLOSED_YN ='N'
		   		AND A.FLT_KEY = E.FLT_KEY AND A.FLT_DATE = E.SCH_DATE AND E.FLT_TYPE='D' AND E.ACT_DATE IS NOT NULL AND E.ACT_TIME IS NOT NULL
		   		AND (TO_DATE(TO_CHAR(E.ACT_DATE,'DDMONYY')  || LPAD(E.ACT_TIME,4,'0'),'DDMONYYHH24MI') 
		             &lt;= Sysdate - (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'CONFIG_DAYS_EXP_AWB_CLOSE'))
		    	AND FUN_VALIDATE_AWB(A.AWB_NO,(SELECT CARR_CODE FROM AWB WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE),'A') not in ('N','C'))
		    UNION ALL
		    (SELECT DISTINCT A.AWB_NO, A.AWB_DATE,A.FLT_KEY fltKey, A.FLT_DATE fltDate, TO_DATE(TO_CHAR(E.ACT_DATE,'DDMONYY') || LPAD(E.ACT_TIME,4,'0'),'DDMONYYHH24MI') atd
				FROM EXP_PMAN_TARMAC_AWB A,
				EDI_FWB B,
				EDI_FHL C,
		   	 	AWB D,
		    	FLT_OPR E
				WHERE A.AWB_NO = B.AWB_NO(+)
				AND A.AWB_NO = C.AWB_NO(+)
		    	AND A.AWB_NO = D.AWB_NO AND A.AWB_DATE = D.AWB_DATE and D.AWB_CLOSED_YN ='N'
		    	AND A.FLT_KEY = E.FLT_KEY AND A.FLT_DATE = E.SCH_DATE AND E.FLT_TYPE='D' AND E.ACT_DATE IS NOT NULL AND E.ACT_TIME IS NOT NULL
		    	AND (TO_DATE(TO_CHAR(E.ACT_DATE,'DDMONYY')  || LPAD(E.ACT_TIME,4,'0'),'DDMONYYHH24MI') 
		           &lt;= Sysdate - (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'CONFIG_DAYS_EXP_AWB_CLOSE'))
		   	AND FUN_VALIDATE_AWB(A.AWB_NO, (SELECT CARR_CODE FROM AWB WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE),'A') NOT IN ('N','C')))
		    order by atd desc
	</select> 
	<select id="getConfiguredRemarksUAF"  parameterClass="java.lang.String" resultClass="java.lang.String">	
			select cargo_rmk from MAST_CARGO_TYPE_RMK where cargo_type = #cargoType#
	</select>
	<select id="getBreakBulkForCargoType"  parameterClass="map" resultClass="java.lang.String">	
			select bb_ind from exp_flt_uld where uld_key = #ULD_KEY#	and flt_key = #FLT_KEY# and flt_date= #FLT_DATE# and FLT_TYPE = 'E'
	</select>
	 <select id="fetchErclInventoryList"  parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">	
			SELECT A.lsp_no lspNo,
				  A.uld_key uldKey,
				  A.locn_pcs locnPcs,
				  A.locn_wt locnWt,
				  A.SEQ_NO seqNo
				FROM awb_inventory A
				LEFT JOIN ULD_INVENTORY B
				ON B.ULD_KEY       = A.ULD_KEY
				WHERE ((A.ULD_KEY IS NOT NULL
				AND B.PPK_IND      ='N'
				AND B.MIX_PPK_IND  ='N'
				AND A.LSP_NO      IS NULL)
				OR (A.LSP_NO      IS NOT NULL
				AND A.ULD_KEY     IS NULL))
				AND A.awb_no       =#awbNo#
				AND A.AWB_DATE     =#awbDate#
				ORDER BY LOCN_PCS,LOCN_WT ASC
	</select>
	
	<update id="updateOSIText" parameterClass="map">	
		update  EXP_DLS_HD set OSI_RMK_2 = #osiText#, TR_TYPE = 'MTDLS' , LM_USER_ID  = #user#, LM_DATE = SYSDATE WHERE dls_no =#dlsNumber#			 
	</update>
	
	<update id="sqlUpdateErclInventory" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO">
		update awb_inventory set locn_pcs = locn_pcs - #locnPcs#,locn_wt=locn_wt - #locnWt# where seq_no=#seqNo#
	</update>
	<delete id="sqlDeleteErclInventory" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO">
		delete from awb_inventory where seq_no = #seqNo# and locn_pcs=0
	</delete>
	<update id="increaseRemErclInvWt" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO">
		update awb_inventory set locn_wt=locn_wt + #locnWt# where seq_no=#seqNo#
	</update>
	
	<update id="updateExpPmanifestAWBFirst" parameterClass="java.util.HashMap">
		UPDATE EXP_ULD_AWB SET DEL_YN='Y' WHERE RCL_NO=#RCL_NO# AND ULD_KEY = #ULD_KEY# AND AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#
	</update>
	<insert id="insertExpPmanifestAWBFirst" parameterClass="java.util.HashMap">
		INSERT INTO EXP_PMANIFEST_AWB_FIRST (AWB_NO,AWB_DATE,FLT_KEY,FLT_DATE,UNLDG_PT,PMAN_PCS,PMAN_WT,CR_DATE,LM_DATE) VALUES (#AWB_NO#,#AWB_DATE#,#FLT_KEY#,#FLT_DATE#,#UNLDG_PT#,#PMAN_PCS#,#PMAN_WT#,sysdate,sysdate) 
	</insert>
	<select id="getCountExpPmanifestAWBFirst" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMANIFEST_AWB_FIRST WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND FLT_KEY=#FLT_KEY# AND FLT_DATE=#FLT_DATE# AND UNLDG_PT=#UNLDG_PT#
	</select>
        <select id="checkSecAgentNum" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	SELECT count(1) FROM CUST_COMPANY WHERE code=#PARAM#
	</select>
	
	<select id="getRclRejectStatus" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT count(1) FROM exp_rcl_hd where rcl_no = #rclNo# and status = 'R'
	</select>
	
	<select id="getPreOffloadEmailList" parameterClass="map" resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		select email_addresses email from mast_module_off_email WHERE module_office IN (SELECT flt_module1 FROM flt_opr WHERE FLT_KEY=#fltKey# AND SCH_DATE=#fltDate# AND flt_type='D')
	</select>
	<select id="getPreOffloadEmailContourCode" parameterClass="java.lang.String" resultClass="java.lang.String">
	select contr_code from uld_inventory where uld_key=#PARAM#
	</select>	
	<select id="getPreOffloadEmailUnldgpt" parameterClass="map" resultClass="java.lang.String">
	select unldg_pt from exp_pmanifest_uld where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldkey#
	UNION ALL
	select unldg_pt from exp_pman_tarmac_uld where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldkey#
AND NOT EXISTS (select NULL from exp_pmanifest_uld where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldkey#)
	</select>	
	<select id="getPreOffloadEmailRequest" parameterClass="java.lang.String" resultClass="java.lang.String">
	select rule_value from cmsrules where RULE_code ='PRE_OFFLOAD_EMAIL_REQ'
	</select>
	
	<update id="deleteshcupdateforoffload" parameterClass="java.util.HashMap" >
			update awb set 
				lm_user_id=#LM_USER_ID#,
				lm_date=sysdate
				<isNotEmpty property="SHC1">
				,SPL_CODE1=''
				</isNotEmpty>
				<isNotEmpty property="SHC2">
				,SPL_CODE2=''
				</isNotEmpty>
				<isNotEmpty property="SHC3">
				,SPL_CODE3=''
				</isNotEmpty>
				<isNotEmpty property="SHC4">
				,SPL_CODE4=''
				</isNotEmpty>
				<isNotEmpty property="SHC5">
				,SPL_CODE5=''
				</isNotEmpty>
				<isNotEmpty property="SHC6">
				,SPL_CODE6=''
				</isNotEmpty>
				<isNotEmpty property="SHC7">
				,SPL_CODE7=''
				</isNotEmpty>
				<isNotEmpty property="SHC8">
				,SPL_CODE8=''
				</isNotEmpty>
				<isNotEmpty property="SHC9">
				,SPL_CODE9=''
				</isNotEmpty>
				WHERE AWB_NO=#AWB_NO#
				AND AWB_DATE=#AWB_DATE#
    	</update>
    	<update id="deleteshcupdateforoffloadimpcar" parameterClass="java.util.HashMap" >
			update imp_car_awb set 
				lm_user_id=#LM_USER_ID#,
				lm_date=sysdate
				<isNotEmpty property="SHC1">
				,SPL_CODE1=''
				</isNotEmpty>
				<isNotEmpty property="SHC2">
				,SPL_CODE2=''
				</isNotEmpty>
				<isNotEmpty property="SHC3">
				,SPL_CODE3=''
				</isNotEmpty>
				<isNotEmpty property="SHC4">
				,SPL_CODE4=''
				</isNotEmpty>
				<isNotEmpty property="SHC5">
				,SPL_CODE5=''
				</isNotEmpty>
				<isNotEmpty property="SHC6">
				,SPL_CODE6=''
				</isNotEmpty>
				<isNotEmpty property="SHC7">
				,SPL_CODE7=''
				</isNotEmpty>
				<isNotEmpty property="SHC8">
				,SPL_CODE8=''
				</isNotEmpty>
				<isNotEmpty property="SHC9">
				,SPL_CODE9='' 
				</isNotEmpty>
				WHERE AWB_NO=#AWB_NO#
				AND AWB_DATE=#AWB_DATE#
    	</update>
    	<update id="deleteshcupdateforoffloadexpcar" parameterClass="java.util.HashMap" >
			update EXP_CAR set 
				lm_user_id=#LM_USER_ID#,
				lm_date=sysdate
				<isNotEmpty property="SHC1">
				,SPL_CODE1=''
				</isNotEmpty>
				<isNotEmpty property="SHC2">
				,SPL_CODE2=''
				</isNotEmpty>
				<isNotEmpty property="SHC3">
				,SPL_CODE3=''
				</isNotEmpty>
				<isNotEmpty property="SHC4">
				,SPL_CODE4=''
				</isNotEmpty>
				<isNotEmpty property="SHC5">
				,SPL_CODE5=''
				</isNotEmpty>
				<isNotEmpty property="SHC6">
				,SPL_CODE6=''
				</isNotEmpty>
				<isNotEmpty property="SHC7">
				,SPL_CODE7=''
				</isNotEmpty>
				<isNotEmpty property="SHC8">
				,SPL_CODE8=''
				</isNotEmpty>
				<isNotEmpty property="SHC9">
				,SPL_CODE9='' 
				</isNotEmpty>
				WHERE AWB_NO=#AWB_NO#
				AND AWB_DATE=#AWB_DATE#
    	</update>
		<select id="checkOffloadShcexistotnotinawb" parameterClass="map" resultClass="java.lang.Integer">
    	select count(1) from awb where AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND (spl_code1=#SHC# or spl_code2=#SHC# or spl_code3=#SHC# OR
                                                                        spl_code4=#SHC# or spl_code5=#SHC# or spl_code6=#SHC# OR
                                                                        spl_code7=#SHC# or spl_code8=#SHC# or spl_code9=#SHC#)
        </select>
		
    <select id="getUldPalletType" parameterClass="java.lang.String" resultClass="java.lang.String">
		 SELECT decode(MAST_ULD_ALLOT.PLT_CNT,'Pallet','P','C') AS ULD_ALLOT FROM MAST_ULD_ALLOT, MAST_ULD_ALLOT_GROUP, ULD_GROUP_TYPE WHERE  
          MAST_ULD_ALLOT.ULD_ALLOT = MAST_ULD_ALLOT_GROUP.ULD_ALLOT AND MAST_ULD_ALLOT_GROUP.ULD_GROUP = ULD_GROUP_TYPE.ULD_GROUP AND 
          ULD_GROUP_TYPE.ULD_TYPE = substr(#uldNo#,0,3)
	</select>	
	
	<select id="getUldDeckType" parameterClass="map" resultClass="java.lang.String">
		select DECK from ULD_TYPE_CONTR where uld_type = substr(#uldKey#,0,3)  and CONTR_CODE = #counterCode#
	</select>
	
	<select id="getIATAForSHC" parameterClass="map" resultClass="java.lang.String">
		select IATA_YN from MAST_SPL_HAND_CODE where code = #shc#
	</select>

	<update id="updateTargettoULDInv" parameterClass="map">
		update uld_inventory set TARGET = #TARGET#, LM_USER_ID = #USER_ID# , LM_DATE = SYSDATE,TR_TYPE=#TR_TYPE#  where uld_key = #ULD_KEY#
	</update>
	
	<select id="checkAWBRequiredSHC" parameterClass="map"  resultClass="java.lang.String">
	SELECT STRAGG(STRINGDELIM(SCH,',')) FROM (
	SELECT DISTINCT(B.SCH) SCH FROM AWB A, MAST_PMAN_REQ_SHC B
	WHERE A.AWB_NO=#awbNo# AND A.AWB_DATE=#awbDate# AND 
      (B.SCH = A.SPL_CODE1 OR B.SCH=A.SPL_CODE2 OR B.SCH=A.SPL_CODE3 OR
       B.SCH = A.SPL_CODE4 OR B.SCH=A.SPL_CODE5 OR B.SCH=A.SPL_CODE6 OR
       B.SCH = A.SPL_CODE7 OR B.SCH=A.SPL_CODE8 OR B.SCH=A.SPL_CODE9)
          AND NOT EXISTS (SELECT NULL FROM MAST_PMAN_REQ_SHC B WHERE B.REQ_SCH = A.SPL_CODE1 OR B.REQ_SCH = A.SPL_CODE2 OR B.REQ_SCH = A.SPL_CODE3 OR
								     B.REQ_SCH = A.SPL_CODE4 OR B.REQ_SCH = A.SPL_CODE5 OR B.REQ_SCH = A.SPL_CODE6 OR
	                                                             B.REQ_SCH = A.SPL_CODE7 OR B.REQ_SCH = A.SPL_CODE8 OR B.REQ_SCH = A.SPL_CODE9))
	</select>
	

	<select id="getDLSFinalizeInd" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT dls_ind FROM flt_opr_events flt ,uld_inventory inv WHERE inv.FLT_KEY = flt.flt_key AND inv.FLT_DATE = flt.SCH_DATE AND flt.FLT_TYPE = 'D' and  inv.uld_key = #uldKey#
	</select>
	<update id="updateAWBAirLineRmk" parameterClass="map">
		update AWB set airln_rmk = #RMKS#, LM_USER_ID = #USER_ID# , LM_DATE = SYSDATE where awb_no = #AWBNO# and awb_date = TO_DATE(#AWBDATE#,'DDMONYY')
	</update>
	<select id="getOldAirLineRemarksAWB" parameterClass="map" resultClass="java.lang.String">
		SELECT airln_rmk from AWB where awb_no = #AWBNO# and awb_date = TO_DATE(#AWBDATE#,'DDMONYY')
	</select>
	<select id="fetchOldHawbList" parameterClass="java.lang.String" resultClass="cargo.cms.edi.bo.EdiFhlHawb" >
	SELECT HAWB_NO AS HAWB_NO,FHL_OWNER AS FHL_OWNER FROM EDI_FHL_HAWB WHERE TR_NO=#PARAM#
	</select>
    <select id="fetchFirstAndLastDay" parameterClass="cargo.cms.export.bo.UldStagingReportBO" resultClass="cargo.cms.export.bo.UldStagingReportBO" >
	select to_char(LAST_DAY(to_date(#monDate#,'MONYY')),'DDMONYY') toDate, to_char(trunc(to_date(#monDate#,'MONYY'),'MM'),'DDMONYY') fromDate from dual
	</select>
	
	<select id="fetchFirstAndLastDay_Job" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" >
	select to_char(LAST_DAY(ADD_MONTHS(to_date(#batchDate#,'DDMONYY'),-1)),'DDMONYY') toDate,
	to_char(trunc(ADD_MONTHS(to_date(#batchDate#,'DDMONYY'),-1),'MM'),'DDMONYY') fromDate from dual 
	</select>

	<select id="fetchInbdUldStgRpt" parameterClass="cargo.cms.export.bo.UldStagingReportBO" resultClass="cargo.cms.export.bo.UldStagingReportBO" >
	select A.flt_key fltKey,  to_char(A.sch_date,'DDMONYY') fltDate , A.carr_code carrier, 
	 PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, 'A') as eta,
	pkg_common.get_flt_ata(A.FLT_KEY, A.SCH_DATE,'A') as ata,
	(select code_desc from CUST_COMPANY WHERE code = A.rho_id) as rho
	,(select count(1) from imp_ramp_chk_dtl where flt_key=A.FLT_KEY and
	flt_date= A.SCH_DATE
	and chkin_date &lt; evt.fst_ramp_compl_date
	) noOfUld,
	(select to_char(min(tow_in_time),'DDMONYY') from TOW_ORDER_IN_RECORD where flt_key=A.FLT_KEY and
	flt_date= A.SCH_DATE ) crDate,
	(select to_char(min(tow_in_time),'HH24:MI') from TOW_ORDER_IN_RECORD where flt_key=A.FLT_KEY and
	flt_date= A.SCH_DATE ) crDateTime,
	(select to_char(max(chkin_date),'DDMONYY') from imp_ramp_chk_dtl where flt_key=A.FLT_KEY and
	flt_date= A.SCH_DATE and chkin_date &lt; evt.fst_ramp_compl_date) compDate,
	(select to_char(max(chkin_date),'HH24:MI') from imp_ramp_chk_dtl where flt_key=A.FLT_KEY and
	flt_date= A.SCH_DATE and chkin_date &lt; evt.fst_ramp_compl_date) compDateTime,  
(select  DECODE(LENGTH(floor(((max(chkin_date)-min(tow_in_time))*24*60*60)/3600)),'1',LPAD(floor(((max(chkin_date)-min(tow_in_time))*24*60*60)/3600),2,0),
		 floor(((MAX(chkin_date)-MIN(tow_in_time))*24*60*60)/3600))
        || ':' ||
   LPAD(floor((((max(chkin_date)-min(tow_in_time))*24*60*60) -
        floor(((max(chkin_date)-min(tow_in_time))*24*60*60)/3600)*3600)/60),2,0) elapseTime from TOW_ORDER_IN_RECORD tow, imp_ramp_chk_dtl ramp
	where tow.flt_key=ramp.flt_key and tow.flt_date= ramp.flt_date and tow.flt_key=A.FLT_KEY and
	tow.flt_date= A.SCH_DATE and ramp.chkin_date &lt; evt.fst_ramp_compl_date)elapseTime
	from flt_opr A LEFT OUTER JOIN imp_flt_fst_events evt ON A.flt_key=evt.flt_key 
	and A.sch_date = evt.sch_date
	where A.sch_date between to_Date(#fromDate#,'DDMONYY') and to_Date(#toDate#,'DDMONYY')
	and A.flt_type='A' and  (select count(1) from imp_ramp_chk_dtl where flt_key=A.FLT_KEY and
	flt_date= A.SCH_DATE
	and chkin_date &lt; evt.fst_ramp_compl_date
	) &gt;0
	</select>
	<select id="getStationDailyListCPCT" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">    
    	SELECT arpt_region_name,  arpt_country_name,  arpt_station_name,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99'))) impRegionTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99'))) expRegionTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_INB_TONN),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_INB_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_INB_TONN),'9999999999999999.99'))) transInbTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_OUTB_TONN),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_OUTB_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_OUTB_TONN),'9999999999999999.99'))) transExpTonn,		  
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRN_INB_TONN)+SUM(TRN_OUTB_TONN),'9999999999999999.99'))),0,0 || 
		TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRN_INB_TONN)+SUM(TRN_OUTB_TONN),'9999999999999999.99')),
		TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRN_INB_TONN)+SUM(TRN_OUTB_TONN),'9999999999999999.99'))) stationTotal
		FROM AA_STATION_ROLLING_REPT		
		GROUP BY ARPT_REGION_NAME,  ARPT_COUNTRY_NAME,  ARPT_STATION_NAME
		ORDER BY arpt_region_name ,  arpt_country_name,  arpt_station_name    	
    </select>
	<select id="getGrandTotalStationReptCPCT" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">    
    	SELECT DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99'))),0,0|| TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99'))) totImpTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99'))),0,0|| TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99'))) totExpTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_INB_TONN),'9999999999999999.99'))),0,0|| TRIM(TO_CHAR(SUM(TRN_INB_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_INB_TONN),'9999999999999999.99'))) totTransInbTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_OUTB_TONN),'9999999999999999.99'))),0,0|| TRIM(TO_CHAR(SUM(TRN_OUTB_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_OUTB_TONN),'9999999999999999.99'))) totTransExpTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRN_INB_TONN)+SUM(TRN_OUTB_TONN),'9999999999999999.99'))),0,0 || 
		TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRN_INB_TONN)+SUM(TRN_OUTB_TONN),'9999999999999999.99')),
		TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRN_INB_TONN)+SUM(TRN_OUTB_TONN),'9999999999999999.99'))) grandTotal
		FROM AA_STATION_ROLLING_REPT
    </select>
	<select id="getStationDailyListAIRLINE" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">    
    	SELECT arpt_region_name,  arpt_country_name,  arpt_station_name,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_GEN_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(IMP_GEN_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_GEN_TONNAGE),'9999999999999999.99'))) impGenTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_EPD_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(IMP_EPD_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_EPD_TONNAGE),'9999999999999999.99'))) impEPDTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_EPH_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(IMP_EPH_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_EPH_TONNAGE),'9999999999999999.99'))) impEPHTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99')),TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99'))) impRegionTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_GEN_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(EXP_GEN_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_GEN_TONNAGE),'9999999999999999.99'))) expGenTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_EPD_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(EXP_EPD_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_EPD_TONNAGE),'9999999999999999.99'))) expEPDTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_EPH_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(EXP_EPH_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_EPH_TONNAGE),'9999999999999999.99'))) expEPHTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99'))) expRegionTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_CRG_IMP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_CRG_IMP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_CRG_IMP),'9999999999999999.99'))) trnInbCrgTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_TRMC_IMP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_TRMC_IMP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_TRMC_IMP),'9999999999999999.99'))) trnInbTrmcCrgTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_CRG_EXP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_CRG_EXP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_CRG_EXP),'9999999999999999.99'))) trnOutbCrgTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_TRMC_EXP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_TRMC_EXP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_TRMC_EXP),'9999999999999999.99'))) trnOutbTrmcCrgTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_MAIL_IMP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_MAIL_IMP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_MAIL_IMP),'9999999999999999.99'))) trnInbTmTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_IMP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_IMP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_IMP),'9999999999999999.99'))) trnInbTrmcTmTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_MAIL_EXP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_MAIL_EXP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_MAIL_EXP),'9999999999999999.99'))) trnOutbTmTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_EXP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_EXP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_EXP),'9999999999999999.99'))) trnOutbTrmcTmTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRANS_IMP_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRANS_IMP_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRANS_IMP_TONNAGE),'9999999999999999.99'))) transInbTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRANS_EXP_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRANS_EXP_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRANS_EXP_TONNAGE),'9999999999999999.99'))) transExpTonn,
		DECODE(TRUNC(
		TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRANS_IMP_TONNAGE)+SUM(TRANS_EXP_TONNAGE),'9999999999999999.99'))),0,0 || 
		TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRANS_IMP_TONNAGE)+SUM(TRANS_EXP_TONNAGE),'9999999999999999.99')),
		TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRANS_IMP_TONNAGE)+SUM(TRANS_EXP_TONNAGE),'9999999999999999.99'))) stationTotal
		FROM AA_STATION_ROLLING_REPT		
		GROUP BY ARPT_REGION_NAME,  ARPT_COUNTRY_NAME,  ARPT_STATION_NAME
		ORDER BY arpt_region_name ,  arpt_country_name,  arpt_station_name      	
    </select>
	<select id="getGrandTotalStationReptAIRLINE" parameterClass="cargo.cms.export.bo.DailyTonnageRollingBO" resultClass="cargo.cms.export.bo.DailyTonnageRollingBO">    
    	SELECT 
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_GEN_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(IMP_GEN_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_GEN_TONNAGE),'9999999999999999.99'))) ttlImpGenTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_EPD_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(IMP_EPD_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_EPD_TONNAGE),'9999999999999999.99'))) ttlImpEPDTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_EPH_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(IMP_EPH_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(IMP_EPH_TONNAGE),'9999999999999999.99'))) ttlImpEPHTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99')),TRIM(TO_CHAR(SUM(IMP_ARPT_TONN),'9999999999999999.99'))) totImpTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_GEN_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(EXP_GEN_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_GEN_TONNAGE),'9999999999999999.99'))) ttlExpGenTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_EPD_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(EXP_EPD_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_EPD_TONNAGE),'9999999999999999.99'))) ttlExpEPDTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_EPH_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(EXP_EPH_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(EXP_EPH_TONNAGE),'9999999999999999.99'))) ttlExpEPHTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99')),TRIM(TO_CHAR(SUM(EXP_ARPT_TONN),'9999999999999999.99'))) totExpTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_CRG_IMP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_CRG_IMP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_CRG_IMP),'9999999999999999.99'))) ttlTrnInbCrgTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_TRMC_IMP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_TRMC_IMP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_TRMC_IMP),'9999999999999999.99'))) ttlTrnInbTrmcCrgTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_CRG_EXP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_CRG_EXP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_CRG_EXP),'9999999999999999.99'))) ttlTrnOutbCrgTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_TRMC_EXP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_TRMC_EXP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_TRMC_EXP),'9999999999999999.99'))) ttlTrnOutbTrmcCrgTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_MAIL_IMP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_MAIL_IMP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_MAIL_IMP),'9999999999999999.99'))) ttlTrnInbTmTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_IMP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_IMP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_IMP),'9999999999999999.99'))) ttlTrnInbTrmcTmTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_MAIL_EXP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_MAIL_EXP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_MAIL_EXP),'9999999999999999.99'))) ttlTrnOutbTmTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_EXP),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_EXP),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRN_MAIL_TRMC_EXP),'9999999999999999.99'))) ttlTrnOutbTrmcTmTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRANS_IMP_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRANS_IMP_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRANS_IMP_TONNAGE),'9999999999999999.99'))) totTransInbTonn,
		DECODE(TRUNC(TRIM(TO_CHAR(SUM(TRANS_EXP_TONNAGE),'9999999999999999.99'))),0,0 || TRIM(TO_CHAR(SUM(TRANS_EXP_TONNAGE),'9999999999999999.99')), TRIM(TO_CHAR(SUM(TRANS_EXP_TONNAGE),'9999999999999999.99'))) totTransExpTonn,
		DECODE(TRUNC(
		TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRANS_IMP_TONNAGE)+SUM(TRANS_EXP_TONNAGE),'9999999999999999.99'))),0,0 || 
		TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRANS_IMP_TONNAGE)+SUM(TRANS_EXP_TONNAGE),'9999999999999999.99')),
		TRIM(TO_CHAR(SUM(IMP_ARPT_TONN)+SUM(EXP_ARPT_TONN)+SUM(TRANS_IMP_TONNAGE)+SUM(TRANS_EXP_TONNAGE),'9999999999999999.99'))) grandTotal
		FROM AA_STATION_ROLLING_REPT		
    </select>
	<select id="fetchOutdUldStgRpt" parameterClass="cargo.cms.export.bo.UldStagingReportBO" resultClass="cargo.cms.export.bo.UldStagingReportBO" >
	select A.flt_key fltKey,  to_char(A.sch_date,'DDMONYY') fltDate , A.carr_code carrier, 
	PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, 'D', 'DD') as etd,
	pkg_common.get_flt_sta(A.FLT_KEY, A.SCH_DATE,'D') as std,
	(select code_desc from CUST_COMPANY WHERE code = A.rho_id) as rho,
	(select count(1) from exp_chkout_dtl where flt_key=A.FLT_KEY and
	flt_date= A.SCH_DATE
	) noOfUld,
	 TO_CHAR(ecd.MINTIME ,'DDMONYY') crDate,
	 TO_CHAR(ecd.MINTIME ,'HH24:MI') crDateTime,
	 TO_CHAR(ecd.MAXTIME ,'DDMONYY') handOverDate,
	 TO_CHAR(ECD.MAXTIME ,'HH24:MI') handOverTime,
	 DECODE(LENGTH(floor((((ECD.MAXTIME - ECD.MINTIME))*24*60*60)/3600)),'1',LPAD(floor((((ECD.MAXTIME - ECD.MINTIME))*24*60*60)/3600),2,0),
	 		floor((((ECD.MAXTIME - ECD.MINTIME))*24*60*60)/3600))
  		|| ':'|| 
  	 LPAD(floor(((((ECD.MAXTIME - ECD.MINTIME))*24*60*60) - floor((((ECD.MAXTIME - ECD.MINTIME))*24*60*60)/3600)*3600)/60),2,0) elapseTime
	from flt_opr A 
	JOIN (SELECT 
		    MIN(to_date(DECODE(TO_CHAR(chkout_date, 'DDMONYY'),NULL ,NULL, TO_CHAR(chkout_date, 'DDMONYY')
		    || ' '
		    || LPAD(CHKOUT_TIME, 4, '0')) ,'DDMONYY HH24MI')) MINTIME,
		    MAX(to_date(DECODE(TO_CHAR(chkout_date, 'DDMONYY'),NULL ,NULL, TO_CHAR(chkout_date, 'DDMONYY')
		    || ' '
		    || LPAD(CHKOUT_TIME, 4, '0')) ,'DDMONYY HH24MI')) MAXTIME,
		    FLT_KEY AS FLTKEY,
		    FLT_DATE AS FLTDATE
		    from exp_chkout_dtl group by FLT_KEY,FLT_DATE) ecd on ecd.FLTKEY= A.FLT_KEY and ecd.FLTDATE= A.SCH_DATE
	where A.sch_date between to_Date(#fromDate#,'DDMONYY') and to_Date(#toDate#,'DDMONYY')
	and A.flt_type='D' 
	and (select count(1) from exp_chkout_dtl where flt_key=A.FLT_KEY and flt_date= A.SCH_DATE) &gt;0
	</select>
	<select id="CHECK_DIRECT_SHIPPER_FOR_FWB_CAR" parameterClass="map" resultClass="java.lang.Integer">
	    SELECT COUNT(1) FROM AWB WHERE AWB_NO=#AWB# AND AWB_DATE=to_date(#AWBDATE#,'DDMONYY') AND ACCEPT_MODE='LDS'
	</select>
	
	<select id="CHECK_BYPASS_EXP_CAR_FOR_FWB_CAR" parameterClass="map" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM CUST_COMPANY WHERE CARR_CODE=#CARRIER# AND cust_type ='Airline' AND BYPASS_EXP_CAR = 'Y'
	</select>
	
	<select id="FetchSHCCodebasedpriorityforInbound" parameterClass="java.lang.String" resultClass="java.lang.String">
	SELECT fun_get_uld_shc(#PARAM#) FROM DUAL
	</select>
	<select id="FetchSHCCodebasedpriorityforoutbound" parameterClass="java.lang.String" resultClass="java.lang.String">
	SELECT STRAGG(STRINGDELIM(CODE,',')) FROM(SELECT B.CODE FROM V_EXP_ULD_SHC A,  MAST_SPL_HAND_CODE B WHERE B.CODE = A.CODE AND ULD_KEY  = #PARAM# ORDER BY PRIORITY DESC) WHERE ROWNUM &lt;=9
	</select>

	<select id="getFWBCARChargeDetails"  parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="cargo.cms.export.bo.ExpCarBO">
	   	SELECT c.PPD_TOTAL_WT_AMT ppAmt1,
	  c.PPD_VALUE_VC_AMT ppAmt2,
	  c.PPD_TAXES_TX_AMT ppAmt3,
	  c.PPD_TOTAL_OA_AMT ppAmt4,
	  c.PPD_TOTAL_OC_AMT ppAmt5,
	  c.COL_TOTAL_WT_AMT ccAmt1,
	  c.COL_VALUE_VC_AMT ccAmt2,
	  c.COL_TAXES_TX_AMT ccAmt3,
	  c.COL_TOTAL_OA_AMT ccAmt4,
	  c.COL_TOTAL_OC_AMT ccAmt5
	FROM v_edi_fwb c
	WHERE c.awb_no=#awb#
	AND c.awb_date=to_date(#awbDate#,'DDMONYY')	
   	</select>
	<select id="gettrfDetails"  parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="cargo.cms.export.bo.ExpCarBO">
   	SELECT SUM(PCS) pcs,SUM(WT) wt
	FROM
	  (SELECT SUM(A.RCL_PCS) PCS,SUM(A.RCL_WT) WT
	  FROM TRF_ACCEPT_HD A
	  WHERE A.AWB_NO =#awb#
	  AND A.AWB_DATE = #awbDate#
	  AND A.STATUS  != 'V'
	  UNION ALL
	  SELECT SUM(A.PCS) PCS,SUM(A.WEIGHT) WT
	  FROM TRF_ACCEPT_BRKDN A,
	    TRF_ACCEPT_HD B
	  WHERE B.TRF_NO = A.TRF_NO
	  AND A.AWB_NO   =#awb#
	  AND A.AWB_DATE =#awbDate#
	  AND B.STATUS  != 'V'
	  AND A.PCS     IS NOT NULL
	  AND A.PCS      > 0
	  )
   	</select>

<select id="sqlQueryBatchJobDetailsMaster" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" >
		SELECT email_id emailId,remarks remarks
		FROM BATCH_JOB_CONFIG where job_name=#batchName#
	</select>

<select id="sqlQueryBatchType"  parameterClass="cargo.cms.common.utils.bo.BatchJobBO" resultClass="cargo.cms.common.utils.bo.BatchJobBO" >
		SELECT DISTINCT report_type batchType,report_type batchTypeDesc FROM report_config_master where 1=1
		order by batchType
</select>

<select id="sqlQueryBatchName"  parameterClass="cargo.cms.common.utils.bo.BatchJobBO" resultClass="cargo.cms.common.utils.bo.BatchJobBO" >
		Select distinct JOB_NAME batchName,JOB_NAME batchNameDesc
		 from report_config_master a where 1=1
		<isNotEmpty property="batchType">
				and REPORT_TYPE=#batchType#
		</isNotEmpty>
		order by JOB_NAME
	</select>

	<select id="fetchOverwriteConfig" parameterClass="java.util.HashMap"  resultClass="java.lang.String" >
		select decode(count(1),0,'Y','N') Overwrite_yn from report_config_master
		where 
		job_name=#batchName#
	    and Overwrite_yn='N'
	    <isNotEmpty property="reportType">
				AND	REPORT_TYPE=#reportType#
		</isNotEmpty>
		<isNotEmpty property="reportName">
				AND	REPORT_Name=#reportName#
		</isNotEmpty>
	    and exists(select 1 from report_execution_log where 
	    	job_name=#batchName#
		    and from_Date=#fromDate#
		    and to_Date=#toDate#
		     <isNotEmpty property="carrierCode">
				and CARRIER_CODE=#carrierCode#
			</isNotEmpty>
			 <isNotEmpty property="agentName">
				AND	AGENT_NAME=#agentName#
			</isNotEmpty>		    
		    <isNotEmpty property="reportType">
				AND	REPORT_TYPE=#reportType#
			</isNotEmpty>
			<isNotEmpty property="reportName">
				AND	REPORT_Name=#reportName#
			</isNotEmpty>
	    )
	</select>
<select id="fetchExecutionDate" parameterClass="java.util.HashMap"  resultClass="java.lang.String" >
		select decode(report_type,'Weekly',execution_day,'Monthly',execution_date) from report_config_master
		where job_name=#batchName#
		<isNotEmpty property="reportType">
			AND	REPORT_TYPE=#reportType#
		</isNotEmpty>
		<isNotEmpty property="reportName">
				AND	REPORT_Name=#reportName#
		</isNotEmpty>
</select> 

	<select id="fetchCarrierMandatoryYn" parameterClass="java.util.HashMap" resultClass="java.lang.String"  >
		select distinct carrier_mandatory_yn
		from report_config_master
		where job_name=#batchName#		
		<isNotEmpty property="reportType">
				and report_type=#reportType# 
		</isNotEmpty>
		<isNotEmpty property="reportName">
				and REPORT_NAME=#reportName# 
		</isNotEmpty>
	</select>

	<select id="dailyJobsExecuteYN" parameterClass="java.util.HashMap" resultClass="java.lang.Integer"  >
		SELECT COUNT(1)
		FROM REPORT_EXECUTION_LOG
		WHERE REPORT_TYPE    =#reportType#
		AND REPORT_NAME = #reportName#
	<!-- AND job_name         =#batchName#   -->
		AND TRUNC(from_date) =#fromDate#
		AND TRUNC(to_date)   =#toDate#
	<isNotEmpty property="carrierCode">
		 AND carrier_code     =#carrierCode# 
		 </isNotEmpty>
	</select>

<select id="fetchexcludeCarrierYN" parameterClass="java.util.HashMap" resultClass="java.lang.String"  >
		select distinct EXCLUDE_CARRIER
		from report_config_master
		where job_name=#batchName#
		<isNotEmpty property="reportType">
				and report_type=#reportType# 
		</isNotEmpty>
		<isNotEmpty property="reportName">
				and REPORT_NAME=#reportName# 
		</isNotEmpty>
</select>
<select id="checkRestrictPmanConstraintCode" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
	SELECT pkg_exp_val.get_exp_awb_cc_code(#fltKey#, #fltDate#, #awbNo#) FROM DUAL
	</select>
<select id="checkRestrictPmanConstraintCodeResn" parameterClass="java.lang.String"  resultClass="java.lang.String">
	SELECT RESTRCT_PMAN_RESN FROM MAST_CONSTRAINT_CODE WHERE CODE=#PARAM#
    </select>	
<select id="sqlQueryReportList"  parameterClass="cargo.cms.common.utils.bo.ReportGenerationBO" resultClass="cargo.cms.common.utils.bo.ReportGenerationBO" >
		select distinct a.CATEGORY category,a.sub_category subCategory,a.report_type reportType,
		a.report_name,
		DECODE(a.report_name,'Airline_Tarmac_Interface_Tonnage',a.report_name || DECODE(a.CARGO_TYPE,'','','_') || a.CARGO_TYPE,
    	'Airline_Daily_Tonnage',a.report_name || DECODE(a.CARGO_TYPE,'','','_') || a.CARGO_TYPE,
    	'Customs_DC_Report_imp', A.REPORT_FILE_NAME, 'Customs_DC_Report_exp' , A.REPORT_FILE_NAME,
    	a.report_name) reportName,
		to_char(a.from_date,'DDMONYY') jobFromDate,
		to_char(a.to_date,'DDMONYY') jobToDate,to_char(a.report_execution_time,'DDMONYY HH24:MI') generatedDate,
		a.report_path reportPath,a.report_prefix reportPrefix,to_char(a.job_date,'DDMONYY') jobDate,
		a.CARRIER_CODE jobAirLine,a.agent_name jobAgentName,b.report_id reportId,a.REPORT_FILE_NAME fileName,
		A.REPORT_EXECUTION_TIME
		from REPORT_EXECUTION_LOG a,report_config_master b  
	    where a.report_name=b.report_name and a.report_type=b.report_type 
	    and a.report_name=#reportName#
		<isNotEmpty property="reportType">
				and a.report_type=#reportType# 
		</isNotEmpty>
		<isNotEmpty property="category">
				and a.category=#category#
		</isNotEmpty>
		<isNotEmpty property="subCategory">
				and a.sub_category=#subCategory#
		</isNotEmpty>	
		
		<isNotEmpty property="generatedDate">
		<isNotEmpty property="dfromDate">
			<isNotEmpty property="dtoDate">
				AND (((#dfromDate# BETWEEN TRUNC(a.from_date) AND TRUNC(a.to_date))
		   			 or (#dtoDate# BETWEEN TRUNC(a.from_date) AND TRUNC(a.to_date)))
		   			 or (#dtoDate#&gt;=TRUNC(a.from_date)
		    		 And #dfromDate#&lt;=TRUNC(a.to_date)))
			</isNotEmpty>
		</isNotEmpty>	
		</isNotEmpty>
			
		<isNotEmpty property="fromDate">
			<isNotEmpty property="toDate">
				AND (((#fromDate# BETWEEN TRUNC(a.from_date) AND TRUNC(a.to_date))
		   			 or (#toDate# BETWEEN TRUNC(a.from_date) AND TRUNC(a.to_date)))
		   			 or (#toDate#&gt;=TRUNC(a.from_date)
		    		 And #fromDate#&lt;=TRUNC(a.to_date)))
			</isNotEmpty>
		</isNotEmpty>	
		<isNotEmpty property="monthValue">
			AND (TO_CHAR(a.FROM_DATE,'MONYYYY')=#monthValue# OR TO_CHAR(a.TO_DATE,'MONYYYY')=#monthValue#)
		</isNotEmpty>
		<isNotEmpty property="airLine">
			AND a.CARRIER_CODE=#airLine#
		</isNotEmpty>
		<isNotEmpty property="agentName">
			AND a.agent_name=#agentName#
		</isNotEmpty>
		order by A.REPORT_EXECUTION_TIME desc,a.CATEGORY,a.sub_category,a.report_type,a.report_name,to_date(to_char(a.from_date,'DDMONYY'),'DDMONYY'),a.CARRIER_CODE
	</select>

	<select id="sqlQueryGeneratedDate"  parameterClass="cargo.cms.common.utils.bo.ReportGenerationBO" resultClass="cargo.cms.common.utils.bo.ReportGenerationBO" >
		select (fromDate || '-' || toDate) as generatedDate, (fromDate || '-' || toDate) as generatedDateDesc 
		 from (
			select to_char(from_date,'DDMONYY') fromDate, to_char(to_date,'DDMONYY') toDate from REPORT_EXECUTION_LOG where report_name=#reportName#
			<isNotEmpty property="category">
					and category=#category#
			</isNotEmpty>
			<isNotEmpty property="subCategory">
					and sub_category=#subCategory#
			</isNotEmpty>
			<isNotEmpty property="reportType">
					and report_type=#reportType#
			</isNotEmpty> 
			<isNotEmpty property="monthValue">
					and #monthValue#=to_char(from_date,'MONYYYY')
			</isNotEmpty> 
			group by from_date,to_date order by from_date, to_date
		  )
	</select>


       <select id="fetchAuthorisedOverwriteYN" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
	Select DECODE(COUNT(1),0,'N','Y') FROM
	sec_role_sub_function sf
	join sec_user_role ur 
	on ur.role_name = sf.role_code
	where sf.FUNCTION_CODE = 'MISC_20'
	and ur.user_id = #userName#
	AND sf.enable_yn='Y' 
	AND sf.SUB_FUNCTION_CODE='MISC_20_1'
	</select>

<select id="sqlGetCBXTonnageReport" parameterClass="java.util.HashMap" resultClass="cargo.cms.common.utils.bo.BatchJobBO">
		<![CDATA[
		SELECT awb.carr_code AS airLine,
		DECODE(nvl(awb.accept_mode,'*'),'TIT',NVL(TO_CHAR(expFlt.flt_date,'DD/MM/YYYY'),TO_CHAR(shp.flt_date,'DD/MM/YYYY')),TO_CHAR(shp.flt_date,'DD/MM/YYYY')) AS impFltDate,
		DECODE(nvl(awb.accept_mode,'*'),'TIT',NVL(expFlt.flt_key,shp.flt_key),shp.flt_key) impFltKey,
		'I' AS flow,
		CASE
		WHEN (awb.awb_type   = 'E'
		AND (nvl(awb.accept_mode,'*') = 'LCA'
		OR nvl(awb.accept_mode,'*')   = 'LIT') )
		THEN TO_CHAR(NVL(awb.rcl_bulk_wt,0))
		ELSE ''
		END AS bulkLCL,
		CASE
		WHEN ((awb.awb_type  = 'T'
		AND nvl(awb.accept_mode,'*') != 'TIT')
		OR awb.awb_type      = 'I'
		OR ((awb.awb_type    = 'T'
		AND nvl(awb.accept_mode,'*')  = 'TIT')
		AND NOT EXISTS
		  (SELECT 1 FROM TRF_ACCEPT_HD A WHERE A.awb_no= pman.awb_No
		  )))
		THEN TO_CHAR(NVL(shp.bulk_wt,0))
		WHEN ((awb.awb_type = 'T'
		AND nvl(awb.accept_mode,'*') = 'TIT')
		AND EXISTS
		  (SELECT 1 FROM TRF_ACCEPT_HD A WHERE A.awb_no= pman.awb_No
		  ))
		THEN
		  (SELECT TO_CHAR(NVL(SUM(RCL_WT),0))
		  FROM TRF_ACCEPT_HD A
		  WHERE A.awb_no= pman.awb_No
		  )
		ELSE ''
		END AS bulkTS,
		CASE
		WHEN (awb.awb_type   = 'E'
		AND (nvl(awb.accept_mode,'*') = 'LCA'
		OR nvl(awb.accept_mode,'*')   = 'LIT'))
		THEN TO_CHAR( NVL(awb.rcl_ppk_wt,0) + NVL(awb.rcl_mix_wt,0) )
		ELSE ''
		END AS ppkLCL,
		CASE
		WHEN ((awb.awb_type  = 'T'
		AND nvl(awb.accept_mode,'*') != 'TIT')
		OR awb.awb_type      = 'I'
		OR ((awb.awb_type    = 'T'
		AND nvl(awb.accept_mode,'*')  = 'TIT')
		AND NOT EXISTS
		  (SELECT 1 FROM TRF_ACCEPT_BRKDN A WHERE A.awb_no= pman.awb_No
		  )))
		THEN TO_CHAR(NVL(shp.bup_wt,0))
		WHEN ((awb.awb_type = 'T'
		AND nvl(awb.accept_mode,'*') = 'TIT')
		AND EXISTS
		  (SELECT 1 FROM TRF_ACCEPT_BRKDN A WHERE A.awb_no= pman.awb_No
		  ))
		THEN
		  (SELECT TO_CHAR(NVL(SUM(WEIGHT),0))
		  FROM TRF_ACCEPT_BRKDN A
		  WHERE A.awb_no= pman.awb_No
		  )
		ELSE ''
		END AS ppkTS,
		SUBSTR(awb.awb_no,0,3) || '-' || SUBSTR(awb.awb_no,4,8) AS AWB,
		TO_CHAR(pman.TRK_FLT_DATE,'DD/MM/YYYY') AS trkFltDate,
		NVL(cawb.chrg_wt, 0) AS chargeWeight,
		NVL(cawb.bill_wt, 0) AS billWeight,
		CASE
		WHEN SUBSTR(NVL(TRK.SERVICE_CODE, leg.SERVICE_CODE),0,2) = 'IA'
		THEN 'Consolidated'
		WHEN SUBSTR(NVL(TRK.SERVICE_CODE, leg.SERVICE_CODE),0,2) = 'ID'
		THEN 'Dedicated'
		ELSE ''
		END           AS serviceCode,
		pman.UNLDG_PT AS serviceDest
		FROM cdt_pman_awb pman
		JOIN cdt_awb cawb
		ON cawb.AWB_NO    = pman.awb_No
		AND cawb.awb_date = pman.awb_date
		JOIN awb awb
		ON awb.AWB_NO    = pman.awb_No
		AND awb.awb_date = pman.awb_date
		Left Join Itm_Trk_Flt Trk
		On Trk.Truck_Flt_No    = Pman.Trk_Flt_Key
		And Trk.Truck_Flt_Date = Pman.Trk_Flt_Date
		And Pman.Unldg_Pt      = Trk.Unldg_Pt2
		LEFT JOIN itm_trk_flt_leg leg
		ON leg.TRUCK_FLT_NO    = pman.TRK_FLT_KEY
		AND leg.TRUCK_FLT_DATE = pman.TRK_FLT_DATE
		AND pman.UNLDG_PT      = leg.DEST
		LEFT JOIN
		(SELECT awb_no,
		awb_date,
		flt_key,
		flt_date,
		bulk_pcs,
		bulk_wt,
		bup_pcs,
		bup_wt
		FROM imp_car_shp
		) shp
		ON shp.AWB_NO    = pman.awb_No
		AND shp.awb_date = pman.awb_date
		LEFT JOIN
		(SELECT awb_no,
		awb_date,
		flt_key,
		flt_date
		FROM cdt_inb_flt_dtls
		WHERE RCL_NO IN
		( SELECT rcl_no FROM exp_rcl_hd WHERE VOID_USER_ID IS NULL
		UNION
		SELECT TRF_NO FROM TRF_ACCEPT_HD WHERE VOID_USER_ID IS NULL
		)
		GROUP BY awb_no,
		awb_date,
		flt_key,
		flt_date
		) expFlt
		ON expFlt.AWB_NO = pman.awb_No
		AND expFlt.awb_date = pman.awb_date
		where PMAN.TRK_FLT_DATE between TO_DATE(#FROM_DATE#, 'DDMONYY') AND TO_DATE(#TO_DATE#, 'DDMONYY')
		]]>
		<isNotEmpty property="CARR_CODE">
					AND awb.carr_code = #CARR_CODE#
		</isNotEmpty>
		ORDER BY pman.TRK_FLT_DATE, awb
	</select>

	<select id="sqlGetImpExpDataExpFltJob" parameterClass="java.util.HashMap" resultClass="cargo.cms.common.utils.bo.BatchJobBO">
		SELECT 
		FLIGHTKEY flightKey,
		TO_CHAR(FLIGHTDATE,'DDMONYY') flightDate,
		FLIGHTTYPE flightType,
		NILFLIGHT nilFltInd,
		ORIGIN origin,
		DEST dest,
		STA staStd,
		ETA ataAtd,
		ATA etaEtd,
		PRIMARYAREA primaryArea,
		SECONDARYAREA secondaryArea,
		CONTAINERCOUNT containerCount,
		PALLETCOUNT palletCount,
		HOUSECONTAINER houseContainer,
		PPKTONNAGE ppkTonnage, 
		BLKTONNAGE blkTonnage,
		TMTONNAGE tmTonnage,
		IFBULK ifBulk,
		TPKTONNAGE tpkTonnage,
		IFPPKTONNAGE ifPpkTonnage,
		TTTONNAGE ttTonnage,
		NON_IFTM_TONNAGE nonIfTmTonnage,
		FLTTONNAGE fltTonnage,
		SHIPCOUNT shipCount,
		ISTPREMANIFESTTIME istPManTime,
		LASTPREMANIFESTTIME lstPManTime,
		ISTJOBORDER istJO,
		LASTJOBORDER lstJO,
		ISTULDBUILDUPSTARTTIME istULDBDBUStartTime,
		LASTULDBUILDUPSTARTTIME lstULDBDBUStartTime,
		ISTULDBUILDUPCOMPTIME istULDBDBUCompleteTime,
		LASTULDBUILDUPCOMPTIME lstULDBDBUCompleteTime,
		ISTREADYFORDISPATCH istReadyForDispatch,
		LASTREADYFORDISPATCH lstReadyForDispatch
		FROM V_RAW_DATA_EXP_FLT
		WHERE FLIGHTDATE BETWEEN #FROM_DATE# AND #TO_DATE#
		<isNotEmpty property="CARR_CODE">
			AND CARRCODE = #CARR_CODE#
		</isNotEmpty>		
	</select>
	
	
	
	<select id="sqlGetImpExpDataImpFltJob" parameterClass="java.util.HashMap" resultClass="cargo.cms.common.utils.bo.BatchJobBO">
		SELECT 
		FLIGHTKEY flightKey,
		TO_CHAR(FLIGHTDATE,'DDMONYY') flightDate,
		FLIGHTTYPE flightType,
		NILFLIGHT nilFltInd,
		ORIGIN origin,
		DEST dest,
		STA staStd,
		ETA ataAtd,
		ATA etaEtd,
		PRIMARYAREA primaryArea,
		SECONDARYAREA secondaryArea,
		CONTAINERCOUNT containerCount,
		PALLETCOUNT palletCount,
		HOUSECONTAINER houseContainer,
		PPKTONNAGE ppkTonnage, 
		BLKTONNAGE blkTonnage,
		TMTONNAGE tmTonnage,
		IFBULK ifBulk,
		IFPPKTONNAGE ifPpkTonnage,
		TTTONNAGE ttTonnage,
		NON_IFTM_TONNAGE nonIfTmTonnage,
		FLTTONNAGE fltTonnage,
		SHIPCOUNT shipCount,
		CONSTRAINT constraint,
		ISTULDBREAKDOWNSTARTTIME istULDBDBUStartTime,
		LASTULDBREAKDOWNSTARTTIME lstULDBDBUStartTime,
		ISTULDBREAKDOWNCOMPLETETIME istULDBDBUCompleteTime,
		LASTULDBREAKDOWNCOMPLETETIME lstULDBDBUCompleteTime
		FROM V_RAW_DATA_IMP_FLT
		WHERE FLIGHTDATE BETWEEN #FROM_DATE# AND #TO_DATE#
		<isNotEmpty property="CARR_CODE">
			AND CARRCODE = #CARR_CODE#
		</isNotEmpty>		
	</select>
	
	<select id="sqlGetImpExpDataExpUldJob" parameterClass="java.util.HashMap" resultClass="cargo.cms.common.utils.bo.BatchJobBO">
		SELECT
		EXPORT importExport,
		ULDKEY uldKey,
		CARGOTYPE cargoType,
		PPKIND ppkInd,
		CONTOURCODE contourCode,
		TNASFERZONE transferZone,
		HANDOVERTIME transferZone,
		AIRSIDECHKOUT airsideCheckInOut,
		BUILDUPSTART bdbuStart,
		BUILDUPCOMPL bdbuComplete,
		WORKSTATION workstation,
		FLTKEY flightKey,
		TO_CHAR(FLTDATE,'DDMONYY') flightDate,
		ORIGIN origin,
		DESTINATION dest,
		FLTTYPE flightType,
		STA staStd,
		ATA ataAtd,
		NOOFCONGINMENT noOfConsignment,
		PIECES pcs,
		WEIGHT wt,
		SHC shc
		FROM V_RAW_DATA_EXP_ULD
		WHERE FLTDATE BETWEEN #FROM_DATE# AND #TO_DATE#
		<isNotEmpty property="CARR_CODE">
			AND CARRCODE = #CARR_CODE#
		</isNotEmpty>		
	</select>
	
	<select id="sqlGetImpExpDataImpUldJob" parameterClass="java.util.HashMap" resultClass="cargo.cms.common.utils.bo.BatchJobBO">
		SELECT
		IMPORT importExport,
		ULDKEY uldKey,
		CARGOTYPE cargoType,
		BUPCODE cargoType,
		CONTOURCODE contourCode,
		TNASFERZONE transferZone,
		HANDOVERTIME handOverTime,
		AIRSIDECHKIN airsideCheckInOut,
		BRKDWNUPSTART bdbuStart,
		BRKDWNCOMPL bdbuStart,
		WORKSTATION workstation,
		FLTKEY flightKey,
		TO_CHAR(FLTDATE,'DDMONYY') flightDate,
		ORIGIN origin,
		DESTINATION dest,
		FLTTYPE flightType,
		STA staStd,
		ATA ataAtd,
		IMX imx,
		SLQIND slqInd,
		PPKIND ppkInd,
		EXPIND expInd,
		NBKIND nbkInd, 
		NOOFCONGINMENT noOfConsignment,
		PIECES pcs,
		WEIGHT wt,
		SHC shc
		FROM V_RAW_DATA_IMP_ULD
		WHERE FLTDATE BETWEEN #FROM_DATE# AND #TO_DATE#
		<isNotEmpty property="CARR_CODE">
			AND CARRCODE = #CARR_CODE#
		</isNotEmpty>		
	</select>

	<select id="sqlQueryGenerateReportNameList"  parameterClass="cargo.cms.common.utils.bo.ReportGenerationBO" resultClass="cargo.cms.common.utils.bo.ReportGenerationBO" >
		Select distinct report_name reportName,report_name_desc reportNameDesc from report_config_master a,
		sec_role_sub_function sf
		join sec_user_role ur on ur.role_name = sf.role_code
		where sf.FUNCTION_CODE = #functionCode# and ur.user_id = #userName# AND
		A.REPORT_ID_ACC_CTRL=sf.SUB_FUNCTION_CODE AND sf.enable_yn='Y' 
		<isNotEmpty property="category">
				and category=#category#
		</isNotEmpty>
		<isNotEmpty property="subCategory">
				and sub_category=#subCategory#
		</isNotEmpty>
		<isNotEmpty property="reportType">
				and report_type=#reportType#
		</isNotEmpty>
		order by report_name
	</select>
	<select id="sqlQueryReportNameList"  parameterClass="cargo.cms.common.utils.bo.BatchJobBO" resultClass="cargo.cms.common.utils.bo.BatchJobBO" >
		Select distinct report_name reportName,report_name_desc reportNameDesc from report_config_master a where 1=1
		<isNotEmpty property="category">
				and category=#category#
		</isNotEmpty>
		<isNotEmpty property="subCategory">
				and sub_category=#subCategory#
		</isNotEmpty>
		<isNotEmpty property="reportType">
				and report_type=#reportType#
		</isNotEmpty>
		order by report_name
	</select>
   
      <select id="fetchBatchJobDetails" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" >
	SELECT JOB_NAME ,JOB_CLASS ,JOB_METHOD ,SERVER_PATH ,SERVICE_ID  from BATCH_JOB_CONFIG where 1=1
	
		<isNotEmpty property="reportName">
					AND report_name=#reportName#
		</isNotEmpty>
		<isNotEmpty property="reportType">
					AND	REPORT_TYPE=#reportType#
		</isNotEmpty>
		<isNotEmpty property="jobName">
					AND	job_name=#jobName#
		</isNotEmpty>
	</select>

	<select id="fetchDefaultSCChargeVal" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT DEF_SC_CHRG_TO FROM CUST_COMPANY WHERE CARR_CODE=#PARAM# AND cust_type ='Airline'
	</select>

	<!-- C2K Report Queries Starts -->
	<select id="viewImpExpRept" parameterClass="cargo.cms.export.report.bo.C2KReportBO" resultClass="cargo.cms.export.report.bo.C2KReportBO">
		SELECT
			C2K_IDENTIFIER c2kIdentifier,
			GHA gha,
			MONTH_NAME monthName,
			STATION station,
			AIRLINE airline,
			SUM(EXP_AWB) expAwb,
			SUM(EXP_AWB_MANIFEST) expMnftAwb,
			SUM(FWB_RECD) fwbRecd,
			SUM(FWB_RECD_BEFORE_RCS)  fwbRecdBfRcs,
			SUM(RCS_SENT) rcsSent,
			SUM(FFM_SENT) ffmSent,
			SUM(FFM_SENT_IN_TIME) ffmSentInTime,
			SUM(DEP_SENT) depSent,
			SUM(DEP_SENT_IN_TIME) depSentInTime,
			SUM(IMP_AWB) impAwb,
			SUM(IMP_AWB_MANIFEST) impMnftAwb,
			SUM(FWB_RECD_BEFORE_ATA) fwbRecdBfAta,
			SUM(FFM_RECD_BEFORE_ATA) ffmRecdBfAta,
			SUM(RCF_SENT) rcfSent,
			SUM(RCF_SENT_IN_TIME) rcfSentInTime,
			SUM(AWD_SENT) awdSent,
			SUM(AWD_SENT_IN_TIME) awdSentInTime,
			SUM(NFD_MSG_SENT) nfdSent,
			SUM(NFD_SENT_IN_TIME) nfdSentInTime,
			SUM(DLV_EVENT) dlvSent,
			SUM(DLV_EVT_SENT_IN_TIME) dlvSentInTime
		FROM
			AA_C2K_IMP_EXP
		GROUP BY
			C2K_IDENTIFIER, GHA, MONTH_NAME, STATION, AIRLINE
			ORDER BY AIRLINE
	</select>
	<select id="viewTrnTrfRept" parameterClass="cargo.cms.export.report.bo.C2KReportBO" resultClass="cargo.cms.export.report.bo.C2KReportBO">
		SELECT 
			MONTH_NAME monthName,
			C2K_IDENTIFIER c2kIdentifier,
			GHA gha,
			STATION station,
			AIRLINE airline,
			SUM(TT_EXP_TRF_MNFT_AWB)  expTrfMnftAwb,
			SUM(TT_RCT_SENT) rctSent,
			SUM(TT_EXP_TRF_FFM_SENT) expTrfFfmSent,
			SUM(TT_EXP_TRF_FFM_SENT_IN_TIME) expTrfFfmSentInTime,
			SUM(TT_EXP_TRF_DEP_SENT) expTrfDepSent,
			SUM(TT_EXP_TRF_DEP_SENT_IN_TIME) expTrfDepSentInTime,
			SUM(TT_IMP_TRF_AWB) impTrfAwb,
			SUM(TT_IMP_TRF_MNFT_AWB) impTrfMnftAwb,
			SUM(TT_IMP_TRF_FWB_RECD) impTrfFwbRecd,
			SUM(TT_IMP_TRF_FFM_RECD_BF_ATA) impTrfFwbRecdBfAta,
			SUM(TT_IMP_TRF_RCF_SENT)  impTrfRcfSent,
			SUM(TT_IMP_TRF_RCF_SENT_IN_TIME) impTrfRcfSentInTime,
			SUM(TT_TFD_MSG) tfdSent,
			SUM(TT_TFD_MSG_SENT_IN_TIME) tfdSentInTime,
			SUM(TT_IMP_TRN_AWB) impTrnAwb,
			SUM(TT_IMP_TRN_MNFT_AWB) impTrnMnftAwb,
			SUM(TT_FWB_RECD)  fwbRecd,
			SUM(TT_FFM_RECD_BF_ATA) ffmRecdBfAta,
			SUM(TT_TRN_RCF_SENT) trnRcfSent,
			SUM(TT_TRN_RCF_SENT_IN_TIME) trnRcfSentInTime,
			SUM(TT_TRN_FFM_SENT) trnFfmSent,
			SUM(TT_TRN_FFM_SENT_IN_TIME) trnFfmSentInTime,
			SUM(TT_TRN_DEP_SENT) trnDepSent,
			SUM(TT_TRN_DEP_SENT_IN_TIME) trnDepSentInTime
		FROM 
			AA_C2K_TRN_TRF 
		GROUP BY 
			MONTH_NAME, C2K_IDENTIFIER, GHA, STATION, AIRLINE
			ORDER BY AIRLINE
	</select>
	<select id="viewCmrtRept" parameterClass="cargo.cms.export.report.bo.C2KReportBO" resultClass="cargo.cms.export.report.bo.C2KReportBO">
		SELECT 
			DISTINCT 'CPS' gha,
			CARRIER_CODE airline,
			'Y' atdAvaliable,
			'Y' ataAvaliable,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/RCS' AND IMP_EXP_TYPE='E' AND REQ_BY_CARR = 'Y' AND NVL(EXCLUDE_YN,'N')='N') expRcs,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FFM' AND IMP_EXP_TYPE='E'  AND REQ_BY_CARR = 'Y') expFfm,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/DEP' AND IMP_EXP_TYPE='E' AND REQ_BY_CARR = 'Y') expDep,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/RCF' AND IMP_EXP_TYPE='I' AND REQ_BY_CARR = 'Y') impRcf,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/AWD' AND IMP_EXP_TYPE='I' AND REQ_BY_CARR = 'Y') impAwd,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/NFD' AND IMP_EXP_TYPE='I' AND REQ_BY_CARR = 'Y') impNfd,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/DLV' AND IMP_EXP_TYPE='I' AND REQ_BY_CARR = 'Y') impDlv,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/RCT' AND IMP_EXP_TYPE='T' AND REQ_BY_CARR = 'Y') rct,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FFM' AND IMP_EXP_TYPE IN ('E','T')  AND REQ_BY_CARR = 'Y') expTrfFfm,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/DEP' AND IMP_EXP_TYPE='E'  AND REQ_BY_CARR = 'Y') expTrfDep ,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/RCT' AND IMP_EXP_TYPE IN ('I','T')  AND REQ_BY_CARR = 'Y') impTrfRcf,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/TFD' AND IMP_EXP_TYPE='T'  AND REQ_BY_CARR = 'Y') tfd,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/RCF' AND IMP_EXP_TYPE IN ('I','T')  AND REQ_BY_CARR = 'Y') trnRcf,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FFM' AND IMP_EXP_TYPE IN ('E','T')  AND REQ_BY_CARR = 'Y') trnFfm,
			(SELECT DECODE(COUNT(1),0,'','Y') FROM AA_C2K_SLA_CONFIG_SETUP WHERE A.CARRIER_CODE=CARRIER_CODE AND MSG_TYPE='FSU/DEP' AND IMP_EXP_TYPE IN ('E','T')  AND REQ_BY_CARR = 'Y') trnDep
			FROM 
			AA_C2K_SLA_CONFIG_SETUP A
			WHERE CARRIER_CODE in (select code from mast_carrier where owned_carr = 'Y') 
			ORDER BY CARRIER_CODE
	</select>

	<parameterMap id="c2kReportParam" class="map" >
		<parameter property="P_MONTH_NAME" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="P_YEAR" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	</parameterMap>

	<procedure id="proc_c2k_report_imp_exp" parameterMap="c2kReportParam" >
		{call PKG_C2K_REPT.SP_IMP_EXP_REPT(?,?)}
	</procedure>

	<procedure id="proc_c2k_report_trn_trf" parameterMap="c2kReportParam" >
		{call PKG_C2K_REPT.SP_TRN_TRF_REPT(?,?)}
	</procedure>
	
	<parameterMap id="c2kExcepReportParam" class="map" >	
		<parameter property="P_CARRIER" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="P_MONTH_NAME" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="P_YEAR" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="P_S_START_DATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="P_S_END_DATE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="P_MSG_TYPE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="P_TIME_DIFFERENCE" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	</parameterMap>

	<procedure id="proc_c2k_exception_imp_exp_report" parameterMap="c2kExcepReportParam" >
		{call PKG_C2K_EXCEP_REPT.SP_IMP_EXP_EXCEP_REPT(?,?,?,?,?,?,?)}
	</procedure>
	
	<procedure id="proc_c2k_exception_trn_trf_report" parameterMap="c2kExcepReportParam" >
		{call PKG_C2K_EXCEP_REPT.SP_TRN_TRF_EXCEP_REPT(?,?,?,?,?,?,?)}
	</procedure>
	
	<select id="viewExceptionImpExpRept" parameterClass="cargo.cms.export.report.bo.C2KReportBO" resultClass="cargo.cms.export.report.bo.C2KReportBO">
		SELECT 
			AIRLINE AS airline,
			FLIGHT AS flight,
			STA AS sta,
			ETA AS eta,
			ATA AS ata,
			AWB_NO AS awbNo,
			ORIG AS orig,
			DEST AS dest,
			SLA_MINUTE AS slaInMinutes,
			TO_CHAR(MSG_DATE,'DDMONYY HH24MI') AS msgDate,
			SLA_DIFFERENCE AS timediff,
			MSG_TYPE AS msgType,
			IMP_EXP_TYPE AS msgTypeProcess,
			PAX_CGO_TYPE AS airlineType
		FROM 
			AA_C2K_EXCEP_REPORT
			ORDER BY AIRLINE
	</select>
	
	<select id="viewExceptionTrnTrfRept" parameterClass="cargo.cms.export.report.bo.C2KReportBO" resultClass="cargo.cms.export.report.bo.C2KReportBO">
		SELECT 
			AIRLINE AS airline,
			FLIGHT AS flight,
			STA AS sta,
			ETA AS eta,
			ATA AS ata,
			AWB_NO AS awbNo,
			ORIG AS orig,
			DEST AS dest,
			SLA_MINUTE AS slaInMinutes,
			TO_CHAR(MSG_DATE,'DDMONYY HH24MI') AS msgDate,
			SLA_DIFFERENCE AS timediff,
			MSG_TYPE AS msgType,
			IMP_EXP_TYPE AS msgTypeProcess,
			PAX_CGO_TYPE AS airlineType
		FROM 
			AA_C2K_EXCEP_REPORT
			ORDER BY AIRLINE
	</select>
	<!-- C2K Report Queries End -->
	
	<!-- C2K SLA Configuration Start -->
	<insert id="sqlInsertAAC2KSLAConfigSetup" parameterClass="cargo.cms.export.report.bo.C2KReportBO">
		INSERT INTO AA_C2K_SLA_CONFIG_SETUP(
			CARRIER_CODE,
			PAX_CGO_TYPE,
			MSG_TYPE,
			SLA_IN_MINUTES,
			IMP_EXP_TYPE,
			CR_DATE,
			CR_USER_ID,
			LM_DATE,
			LM_USER_ID,
			TRN_TRF_TYPE,
			REQ_BY_CARR,
			TR_NO,
			EXCLUDE_YN
		)VALUES(
			#carrier#,
			#airlineType#,
			#msgType#,
			#slaInMinutes#,
			#msgTypeProcess#,
			SYSDATE,
			#userID#,
			SYSDATE,
			#userID#,
			#trnTrfType#,
			#requiredByCarrier#,
			C2K_SLA_CONFIG_SEQ.NEXTVAL,
			#excludeYn#
		)
	</insert>
	<update id="sqlUpdatec2kMemberInCustComp" parameterClass="cargo.cms.export.report.bo.C2KReportBO">
	update cust_company set C2K_MEMBER = #c2kMember# where carr_code = #carrier#
	</update>
	<update id="sqlUpdateAAC2KSLAConfigSetup" parameterClass="cargo.cms.export.report.bo.C2KReportBO">
		UPDATE 
			AA_C2K_SLA_CONFIG_SETUP
		SET				
			PAX_CGO_TYPE = #airlineType#,
			MSG_TYPE = #msgType#,
			SLA_IN_MINUTES = #slaInMinutes#,
			IMP_EXP_TYPE = #msgTypeProcess#,
			LM_DATE = SYSDATE,
			LM_USER_ID = #userID#,
			TRN_TRF_TYPE = #trnTrfType#	,
			REQ_BY_CARR = #requiredByCarrier#
		WHERE
			CARRIER_CODE = #carrier# AND
			TR_NO = #trNo#
	</update>
	<delete id="sqlDeleteAAC2KSLAConfigSetup" parameterClass="cargo.cms.export.report.bo.C2KReportBO">	
		DELETE FROM 
			AA_C2K_SLA_CONFIG_SETUP 
		WHERE
			CARRIER_CODE = #carrier# AND
			TR_NO = #trNo#
	</delete>
<delete id="sqlDeleteAAC2KSLAConfigSetupCarrier" parameterClass="cargo.cms.export.report.bo.C2KReportBO">	
		DELETE FROM 
			AA_C2K_SLA_CONFIG_SETUP 
		WHERE
			CARRIER_CODE = #carrier#
	</delete>
	<select id="sqlGetAAC2KSLAConfigSetup" parameterClass="cargo.cms.export.report.bo.C2KReportBO" resultClass="cargo.cms.export.report.bo.C2KReportBO">
		SELECT
			CARRIER_CODE AS carrier,
			(select C2K_MEMBER from cust_company where carr_code=#carrier#) AS c2kMember,
			PAX_CGO_TYPE AS airlineType,
			MSG_TYPE AS msgType,
			SLA_IN_MINUTES AS slaInMinutes,
			IMP_EXP_TYPE AS msgTypeProcess,	
			TRN_TRF_TYPE AS trnTrfType,
			TR_NO AS trNo,
			REQ_BY_CARR AS requiredByCarrier
		FROM
			AA_C2K_SLA_CONFIG_SETUP
		WHERE 	
			CARRIER_CODE = #carrier#
			AND PAX_CGO_TYPE IS NOT NULL 
	</select>

	<select id="getC2kExcludeDataCount" parameterClass="cargo.cms.export.report.bo.C2KReportBO" resultClass="java.lang.Integer">
	select COUNT(1) from AA_C2K_SLA_CONFIG_SETUP where carrier_code=#carrier# and msg_type= #excludeMsgType#
	</select>

	<select id="sqlGetAAC2KSLAConfigSetupExclution" parameterClass="cargo.cms.export.report.bo.C2KReportBO" resultClass="cargo.cms.export.report.bo.C2KReportBO">
		select distinct CARRIER_CODE carrier,MSG_TYPE excludeMsgType
		from AA_C2K_SLA_CONFIG_SETUP 
		where carrier_code=#carrier#
		AND EXCLUDE_YN='Y'
		AND MSG_TYPE IS NOT NULL
	</select>

	<update id="sqlExcludeDeleteAAC2KSLAConfigSetup" parameterClass="cargo.cms.export.report.bo.C2KReportBO">
		UPDATE 
			AA_C2K_SLA_CONFIG_SETUP
		SET	
			EXCLUDE_YN=#excludeYn#,
			LM_DATE = SYSDATE,
			LM_USER_ID = #userID#
		WHERE
			CARRIER_CODE = #carrier# AND
			MSG_TYPE = #excludeMsgType#
	</update>
	
	<select id="getC2KSCustCompLAConfigurationByCarr" parameterClass="cargo.cms.export.report.bo.C2KReportBO" resultClass="java.lang.String">
	select C2K_MEMBER from cust_company where carr_code=#carrier#
	</select>
	<!-- C2K SLA Configuration End -->
	
	<parameterMap id="remainInvAWBMap" class="map">
		<parameter property="AWBNO" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="AWBDATE" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="CARR_CODE" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="CARR_GRP" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="IN" />
		<parameter property="INV_PCS" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="OUT" />
		<parameter property="INV_WT" jdbcType="VARCHAR" javaType="java.lang.String"
			mode="OUT" />
	</parameterMap>

	<procedure id="remainInvAWBProCall" parameterMap="remainInvAWBMap">
		{call PKG_EXP_RPT.get_pman_remaining_inventory(?,?,?,?,?,?)}
	</procedure>
	
	<select id="checkRclBrkdnWt" parameterClass="map" resultClass="java.lang.Integer" >
	select count(1) from (
SELECT A.RCL_PCS AS rclPcs,	
		   A.RCL_WT AS rclWt
		   FROM  AWB A WHERE A.AWB_NO=#AWBNO# AND A.AWB_DATE = #AWBDATE# AND A.RCL_PCS IS NOT NULL AND A.RCL_WT IS NOT NULL AND A.RCL_PCS !=0 AND A.RCL_WT !=0
       union all
  select recd_pcs rclPcs,recd_wt rclWt from imp_car_shp
  where awb_no=#AWBNO#  and awb_date= TO_DATE(#AWBDATE#, 'DDMONYY') AND recd_pcs IS NOT NULL AND recd_pcs != 0 AND recd_wt IS NOT NULL AND recd_wt != 0)
	</select>
	<select id="getExportBulkAWBs_DIM" resultClass="cargo.cms.export.bo.FlightCustomBO" parameterClass="cargo.cms.export.bo.FlightCustomBO">			
		SELECT 
			 PA.AWB_NO AS awbNo,
			 TO_CHAR(PA.AWB_DATE,'DDMONYY') AS awbDate
		FROM
			EXP_PMANIFEST_AWB PA,AWB A
		WHERE
			 FLT_KEY = #fltKey#
			 AND FLT_DATE = #fltDate# AND PA.awb_no = A.awb_no and PA.awb_date = A.awb_date
			 AND PA.BULK_PCS &gt; 0 
			 AND FUN_VALIDATE_AWB(PA.AWB_NO, A.carr_code,'A') not in ('N','C')
			 AND exists (select null from exp_rcl_hd rcl where rcl.awb_no=pa.awb_no and rcl.awb_date=pa.awb_date 
			 				and rcl.ppk_type='B')
	</select>

        <select id="getTransmitDocUsersList" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM ( select CODE from mast_code_dtl where group_code='38' and code_type='TRAN_DOC_USERS_LIST' and code
	IN (select cust_no from sec_user where code = #agentCode#)
	UNION ALL
	select CODE from mast_code_dtl where group_code='38' and code_type='TRAN_DOC_USERS_LIST' and codE = #agentCode#)
	</select>

	<select id="getNonDLSULDs_PBU" resultClass="cargo.cms.export.bo.FlightCustomBO" parameterClass="cargo.cms.export.bo.FlightCustomBO">			
		SELECT ULD_KEY uldKey, FLT_KEY fltKey, FLT_DATE fltDate FROM EXP_FLT_ULD WHERE FLT_KEY = #fltKey# AND FLT_DATE = #fltDate# AND SOURCE NOT IN ('DLS-L', 'DLS-E')
	</select>
	<select id="getKonyURL" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
	select rule_value from cmsrules where rule_code='KONY_URL'
	</select>
	<select id="getoauth2URL" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
	select rule_value from cmsrules where rule_code='OAUTH2_FIREBASE_URL'
	</select>
<parameterMap id="tcdcParamMap" class="map" >
		<parameter property="p_from_date" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="p_to_date" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
		<parameter property="p_carrier" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="p_carrier_grp" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>

	<procedure id="callTCDCReptProcedure" parameterMap="tcdcParamMap" >
			{call PRC_TCDC_CHARGES_REPT(?,?,?,?)}
	</procedure>
	
		<select id="getTCDCChargesList" parameterClass="cargo.cms.common.utils.bo.TCDCChargesBO" resultClass="cargo.cms.common.utils.bo.TCDCChargesBO" >
		SELECT agent_name as agentName,
		  airline as airline,
		  awb as awbNO,
		  TO_CHAR(receive_date,'YYYY-MM-DD') as receiveDate,
		  dc_recve dcChargeRecv,
		  handle_tc as handlingTC,
		  tc_recve as tcChargeRecv,
		  tc_diff as tcChargeDiff,
		  bulk_cgo_kg as bulkCargoKG,
		  ppk_cgo_kg as prepackCargoKG,
		  epd_chrg_kg as EPDChargeKG,
		  EPH_BULK_DHL_CGO_KG as EPHDHLBulkChargeKG,
		  EPH_BULK_OTH_CGO_KG as EPHOTHBulkChargeKG,
		  EPH_PPK_DHL_CGO_KG as EPHDHLPrepackChargeKG,
		  EPH_PPK_OTH_CGO_KG as EPHOTHPrepackChargeKG,
		  bulk_cgo_chrg bulkCargoCharge, 
		  ppk_cgo_chrg as prepackCargoCharge,
		  epd_chrg_chrg as EPDChargeCharge,   
		  EPH_BULK_DHL_CGO_CHRG EPHDHLBulkChargeCharge,
		  EPH_BULK_OTH_CGO_CHRG EPHOTHBulkChargeCharge,
		  EPH_PPK_DHL_CGO_CHRG as EPHDHLPrepackChargeCharge,
		  EPH_PPK_OTH_CGO_CHRG as EPHOTHPrepackChargeCharge
		FROM gt_tcdc_charges_rept 	where 1 = 1
		<isNotEmpty property="loginCarrier">
				   AND ( airline = #loginCarrier# OR  airline IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE  = #loginCarrier#) )             
        </isNotEmpty>	
		order by  receive_date,awb
	</select>
	
	<select id="getTCDCAdjList" parameterClass="cargo.cms.common.utils.bo.TCDCChargesBO" resultClass="cargo.cms.common.utils.bo.TCDCChargesBO" >
				SELECT agent_name as agentName,
				airline as airline,
				awb as awbNO,
				TO_CHAR(receive_date,'YYYY-MM-DD') as receiveDate,
				ADJ_AMT as adjustmentAmt,
				REASON as adjustmentReason
				FROM GT_TCDC_ADJ_DTLS where 1 = 1
				<isNotEmpty property="loginCarrier">
						   AND ( airline = #loginCarrier# OR  airline IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE  = #loginCarrier#) )             
		        </isNotEmpty>						
				order by receive_date,awb
	</select>
	
	<select id="getTCDCRemarks" parameterClass="cargo.cms.common.utils.bo.TCDCChargesBO" resultClass="cargo.cms.common.utils.bo.TCDCChargesBO" >
				select '- ' || COLUMN_1 || '  ' || COLUMN_2 as remarkDesc  from GT_CMS
	</select>
	<select id="mobile_awb_list_FOR_ATD"  parameterClass="cargo.cms.flight.bo.FlightBO" resultClass="cargo.cms.flight.bo.FlightBO">
select S.awb_no awbno,TO_CHAR(S.awb_date,'DDMONYY') awbDate from imp_car_shp s join awb a on a.awb_no=s.awb_no and a.awb_date = s.awb_date where s.flt_key = #flightKey# and s.flt_date=#schDate# 
union all
select S.awb_no awbno,TO_CHAR(S.awb_date,'DDMONYY') awbDate from exp_pmanifest_awb s	where s.flt_key = #flightKey# and s.flt_date=#schDate#
and not exists (SELECT NULL FROM imp_car_shp A WHERE A.AWB_NO=s.AWB_NO AND A.AWB_DATE=s.AWB_DATE)
UNION ALL 
select P.awb_no awbno,TO_CHAR(P.awb_date,'DDMONYY') awbDate from exp_pman_TARMAC_awb P	where P.flt_key = #flightKey# and P.flt_date=#schDate#
AND NOT EXISTS (SELECT NULL FROM exp_pmanifest_awb A WHERE A.AWB_NO=P.AWB_NO AND A.AWB_DATE=P.AWB_DATE)
AND NOT EXISTS (SELECT NULL FROM imp_car_shp b WHERE b.AWB_NO=P.AWB_NO AND b.AWB_DATE=P.AWB_DATE)
</select>
<select id="mobile_custom_awb_list"  parameterClass="cargo.cms.export.bo.FlightCustomBO" resultClass="cargo.cms.export.bo.FlightCustomBO">
select S.awb_no awbNo,TO_CHAR(S.awb_date,'DDMONYY') awbDate from exp_pmanifest_awb s	where s.flt_key = #fltKey# and s.flt_date=#fltDate#
UNION ALL 
select P.awb_no awbNo,TO_CHAR(P.awb_date,'DDMONYY') awbDate from exp_pman_TARMAC_awb P	where P.flt_key = #fltKey# and P.flt_date=#fltDate#
AND NOT EXISTS (SELECT NULL FROM exp_pmanifest_awb A WHERE A.AWB_NO=P.AWB_NO AND A.AWB_DATE=P.AWB_DATE)
</select>

<select id="mobile_fdds_awb_list"  parameterClass="cargo.cms.common.ext.bo.FddsBO" resultClass="cargo.cms.common.ext.bo.FddsBO">
select S.awb_no awbno,TO_CHAR(S.awb_date,'DDMONYY') awbDate from imp_car_shp s
    join awb a on a.awb_no=s.awb_no and a.awb_date = s.awb_date
	  	where s.flt_key = #flightKey# and s.flt_date=#schDate#
</select>

<select id="mobile_fdds_export_awb_list"  parameterClass="cargo.cms.common.ext.bo.FddsBO" resultClass="cargo.cms.common.ext.bo.FddsBO">
select S.awb_no awbno,TO_CHAR(S.awb_date,'DDMONYY') awbDate from exp_pmanifest_awb s	where s.flt_key = #flightKey# and s.flt_date=#schDate#
UNION ALL 
select P.awb_no awbno,TO_CHAR(P.awb_date,'DDMONYY') awbDate from exp_pman_TARMAC_awb P	where P.flt_key = #flightKey# and P.flt_date=#schDate#
AND NOT EXISTS (SELECT NULL FROM exp_pmanifest_awb A WHERE A.AWB_NO=P.AWB_NO AND A.AWB_DATE=P.AWB_DATE)
</select>
<select id="mobile_flight_awb_list"  parameterClass="cargo.cms.flight.bo.FlightBO" resultClass="cargo.cms.flight.bo.FlightBO">
select S.awb_no awbno,TO_CHAR(S.awb_date,'DDMONYY') awbDate from imp_car_shp s
    join awb a on a.awb_no=s.awb_no and a.awb_date = s.awb_date
	  	where s.flt_key = #flightKey# and s.flt_date=#schDate#
</select>

<select id="mobile_flight_export_awb_list"  parameterClass="cargo.cms.flight.bo.FlightBO" resultClass="cargo.cms.flight.bo.FlightBO">
select S.awb_no awbno,TO_CHAR(S.awb_date,'DDMONYY') awbDate from exp_pmanifest_awb s	where s.flt_key = #flightKey# and s.flt_date=#schDate#
UNION ALL 
select P.awb_no awbno,TO_CHAR(P.awb_date,'DDMONYY') awbDate from exp_pman_TARMAC_awb P	where P.flt_key = #flightKey# and P.flt_date=#schDate#
AND NOT EXISTS (SELECT NULL FROM exp_pmanifest_awb A WHERE A.AWB_NO=P.AWB_NO AND A.AWB_DATE=P.AWB_DATE)
</select>

<select id="gerBRFlightDetails" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.DLSSummaryBO">
		SELECT 
		DECODE(PKG_COMMON.get_flt_eta(#FLT_KEY#, TO_DATE(#FLT_DATE#,'DDMONYY'), 'D', 'DD'), NULL,
    	SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(NVL(SCH_TIME,0),'0000')),3,4),
		PKG_COMMON.get_flt_eta(#FLT_KEY#, TO_DATE(#FLT_DATE#,'DDMONYY'), 'D', 'DD')) AS fltSTD,
    	CGO_ACFT_TYPE AS aircraftType, acft_reg_no AS aircraftReg,
    	FLT_KEY as fltKey, TO_CHAR(SCH_DATE,'DDMONYY') as fltDate
		FROM FLT_OPR WHERE FLT_TYPE = 'D' AND FLT_KEY = #FLT_KEY# AND SCH_DATE = TO_DATE(#FLT_DATE#,'DDMONYY')
	</select>
	
	<select id="getBRCounterList" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.DLSSummaryBO">
		SELECT a.dls_no       AS dlsNo,
		  a.CNTR_CODE         AS brCounterCode,
		  COUNT( a.CNTR_CODE) AS counterCnt
			FROM
			  (SELECT dls_no,
		    NVL( (SELECT EVA_CONTR_CODE FROM MAST_WOS_EVA_CONTR_CODE WHERE WOS_CONTR_CODE =CNTR_CODE AND rownum =1),CNTR_CODE ) AS CNTR_CODE
		  FROM exp_dls_allotment
		  WHERE dls_no        = #dlsNumber# AND NVL(bb_ind,'N') = 'N' AND uld_key NOT LIKE 'TAR%'
		  AND CASE WHEN (SELECT COUNT(1) FROM MAST_ULD_TYPE WHERE code = SUBSTR(ULD_KEY, 1, 3) AND (H_CONT_IND = 'Y' OR BT_IND = 'Y' OR DUMMY_H_CONT_IND = 'Y') ) > 0
		      THEN 'Y' ELSE 'N' END = 'N' ) a
		GROUP BY a.dls_no,a.CNTR_CODE
	</select>

<select id="get_wipp_fcc_list_By_Flt"  parameterClass="cargo.cms.export.bo.MaintainWippFccBo" resultClass="cargo.cms.export.bo.MaintainWippFccBo">
	SELECT 
		A.FLT_KEY flightKey,
		TO_CHAR(A.SCH_DATE,'DDMONYY') fltDate,
		(ltrim(SUBSTR(TRIM(TO_CHAR(A.SCH_TIME,'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(A.SCH_TIME,'0000')),3,2),':')) std,
		PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, A.FLT_TYPE, 'DD')  etd,
		PKG_COMMON.get_flt_ata(A.FLT_KEY, A.SCH_DATE, A.FLT_TYPE, 'DD')  atd,
		pkg_exp_flt_hand.get_ed_allot(A.FLT_KEY,A.SCH_DATE) allotment,
		(SELECT COUNT(1) FROM EXP_FLT_ULD WHERE FLT_KEY = A.FLT_KEY AND FLT_DATE=A.SCH_DATE) uldAssigned,
		(SELECT COUNT(1)
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'WIPP') wipp,
		
		(SELECT COUNT(1)
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'WIPP' AND DTL.OK_YN = 'Y' AND HD.complete_date IS NOT NULL) wippCompl,
		  
		(SELECT decode(COUNT(1),0,'N','Y')
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'WIPP' AND HD.finalize_date IS NOT NULL) wippFinalInd,
		
		(SELECT COUNT(1)
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'FCC') fcc,
		
		(SELECT COUNT(1)
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'FCC' AND DTL.OK_YN = 'Y' AND HD.complete_date IS NOT NULL) fccCompl,
		
		(SELECT decode(COUNT(1),0,'N','Y')
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'FCC' AND HD.finalize_date IS NOT NULL) fccFinalInd,
		
		(select cc.CODE_DESC from CUST_COMPANY cc where cc.code = A.RHO_ID and rownum = 1) rho,
		(select hd.tr_no from EXP_MAINTAIN_WIPP_FCC_HD hd where HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE AND rownum=1) trNo
	FROM FLT_OPR A
	JOIN flt_opr_events b ON A.flt_key   = b.flt_key AND A.sch_date = b.sch_date AND A.flt_type = b.flt_type AND A.tr_no    = b.tr_no
	WHERE A.FLT_KEY= #flightKey#
	AND A.SCH_DATE = TO_DATE(#fltDate#, 'DDMONYY')
	AND A.FLT_TYPE = 'D'
</select>
<select id="get_wipp_fcc_list_By_Dates"  parameterClass="cargo.cms.export.bo.MaintainWippFccBo" resultClass="cargo.cms.export.bo.MaintainWippFccBo">
	select * from (
	SELECT 
		A.FLT_KEY flightKey,
		TO_CHAR(A.SCH_DATE,'DDMONYY') fltDate,
		(ltrim(SUBSTR(TRIM(TO_CHAR(A.SCH_TIME,'0000')),0,2)|| ':'|| SUBSTR(TRIM(TO_CHAR(A.SCH_TIME,'0000')),3,2),':')) std,
		PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, A.FLT_TYPE, 'DD')  etd,
		PKG_COMMON.get_flt_ata(A.FLT_KEY, A.SCH_DATE, A.FLT_TYPE, 'DD')  atd,
		pkg_exp_flt_hand.get_ed_allot(A.FLT_KEY,A.SCH_DATE) allotment,
		(SELECT COUNT(1) FROM EXP_FLT_ULD WHERE FLT_KEY = A.FLT_KEY AND FLT_DATE=A.SCH_DATE) uldAssigned,
		(SELECT COUNT(1)
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'WIPP') wipp,
		
		(SELECT COUNT(1)
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'WIPP' AND DTL.OK_YN = 'Y' AND HD.complete_date IS NOT NULL) wippCompl,
		  
		(SELECT decode(COUNT(1),0,'N','Y')
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'WIPP' AND HD.finalize_date IS NOT NULL) wippFinalInd,
		
		(SELECT COUNT(1)
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'FCC') fcc,
		
		(SELECT COUNT(1)
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'FCC' AND DTL.OK_YN = 'Y' AND HD.complete_date IS NOT NULL) fccCompl,
		
		(SELECT decode(COUNT(1),0,'N','Y')
		  FROM 
		  EXP_MAINTAIN_WIPP_FCC_DTL DTL
		  JOIN EXP_MAINTAIN_WIPP_FCC_HD HD ON DTL.TR_NO = HD.TR_NO
		  WHERE HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE
		  AND HD.JO_TYPE = 'FCC' AND HD.finalize_date IS NOT NULL) fccFinalInd,
		
		(select cc.CODE_DESC from CUST_COMPANY cc where cc.code = A.RHO_ID and rownum = 1) rho,
		(select hd.tr_no from EXP_MAINTAIN_WIPP_FCC_HD hd where HD.FLT_KEY = A.FLT_KEY AND HD.FLT_DATE = A.SCH_DATE AND rownum=1) trNo
	FROM FLT_OPR A
	JOIN flt_opr_events b ON A.flt_key   = b.flt_key AND A.sch_date = b.sch_date AND A.flt_type = b.flt_type AND A.tr_no    = b.tr_no
 	WHERE A.FLT_TYPE = 'D'
 	 	and (A.FLT_KEY,A.SCH_DATE) in
 	 	(select flt_key,sch_date from flt_opr where
   		 FLT_TYPE = 'D' and 
 	 	(TO_DATE(TO_CHAR(A.SCH_DATE,'DDMONYY')||trim(to_char(A.SCH_TIME,'0000')), 'DDMONYYHH24MI')
		              BETWEEN TO_DATE(#fromDate#||#fromDateHH#||#fromDateMM#,'DDMONYYHH24MI')
						  AND TO_DATE(#toDate#||#toDateHH#||#toDateMM#,'DDMONYYHH24MI')
		 OR
		 TO_DATE(TO_CHAR(A.EST_DATE,'DDMONYY')||trim(to_char(A.EST_TIME,'0000')), 'DDMONYYHH24MI')
		              BETWEEN TO_DATE(#fromDate#||#fromDateHH#||#fromDateMM#,'DDMONYYHH24MI')
						  AND TO_DATE(#toDate#||#toDateHH#||#toDateMM#,'DDMONYYHH24MI')
		 OR
		 TO_DATE(TO_CHAR(A.ACT_DATE,'DDMONYY')||trim(to_char(A.ACT_TIME,'0000')), 'DDMONYYHH24MI')
		              BETWEEN TO_DATE(#fromDate#||#fromDateHH#||#fromDateMM#,'DDMONYYHH24MI')
						  AND TO_DATE(#toDate#||#toDateHH#||#toDateMM#,'DDMONYYHH24MI')
		 )
		)
  		)where trNo is not null order by atd,etd,std
</select>

<select id="get_wipp_header"  parameterClass="cargo.cms.export.bo.MaintainWippFccBo" resultClass="cargo.cms.export.bo.MaintainWippFccBo">
	select 
		h.tr_no trNo,
		h.flt_key flightKey,
		to_char(h.flt_date,'DDMONYY') fltDate,
		h.FLT_REMARKS fltRmks,
		h.FLT_TICK_YN fltLevelFinal,
		decode(h.FINALIZE_DATE,null,'N','Y') finalizYN,
		decode(h.COMPLETE_DATE,null,'N','Y') completeYN
		FROM EXP_MAINTAIN_WIPP_FCC_hd h
		where flt_key = #flightKey# and flt_date =#fltDate# and jo_type = #joType#
</select>

<select id="get_wipp_details"  parameterClass="cargo.cms.export.bo.MaintainWippFccBo" resultClass="cargo.cms.export.bo.MaintainWippFccBo">
	select 
		d.tr_no trNo,
		d.uld_key uldKey,
		d.ok_yn okYN,
		d.uld_remarks uldRmks
		FROM EXP_MAINTAIN_WIPP_FCC_DTL d
		join EXP_MAINTAIN_WIPP_FCC_hd h on h.tr_no = d.tr_no
		where d.tr_no = #trNo#
		and d.jo_type=#joType#
</select>
<select id="get_fcc_details"  parameterClass="cargo.cms.export.bo.MaintainWippFccBo" resultClass="cargo.cms.export.bo.MaintainWippFccBo">
	select 
		d.tr_no trNo,
		d.uld_key uldKey,
		d.ok_yn okYN,
		d.uld_remarks uldRmks
		FROM EXP_MAINTAIN_WIPP_FCC_DTL d
		join EXP_MAINTAIN_WIPP_FCC_hd h on h.tr_no = d.tr_no
		where d.tr_no = #trNo#
		and d.jo_type=#joType#
</select>
<select id="getTransactioNo_WIPPFCC"  parameterClass="map" resultClass="java.lang.String">
	select h.tr_no trNo from EXP_MAINTAIN_WIPP_FCC_hd h where flt_key=#FLT_KEY# and flt_date=#FLT_DATE# and JO_TYPE =#JO_TYPE#
</select>
<insert id="insert_EXP_MAINTAIN_WIPP_FCC_HD" parameterClass="map">
	Insert into EXP_MAINTAIN_WIPP_FCC_HD 
		  (TR_NO, FLT_KEY, FLT_DATE, JO_TYPE, FLT_REMARKS, FLT_TICK_YN, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE, TR_TYPE)
	VALUES(#TR_NO#,#FLT_KEY#,#FLT_DATE#,#JO_TYPE#,#FLT_RMKS#,#FLT_LVL_CHECK#,#CR_USER_ID#,sysdate,#CR_USER_ID#,sysdate, #TR_TYPE#)
</insert>
<update id="update_EXP_MAINTAIN_WIPP_FCC_HD" parameterClass="map">
	UPDATE EXP_MAINTAIN_WIPP_FCC_HD SET
		   FLT_REMARKS = #FLT_RMKS#, 
		   FLT_TICK_YN = #FLT_LVL_CHECK#,  
		   LM_USER_ID = #CR_USER_ID#,
		   LM_DATE = sysdate,
		   TR_TYPE = #TR_TYPE#
	WHERE TR_NO = #TR_NO# and JO_TYPE =#JO_TYPE# and flt_key = #FLT_KEY# and flt_date=#FLT_DATE#
</update>
<insert id="insert_EXP_MAINTAIN_WIPP_FCC_DTL" parameterClass="cargo.cms.export.bo.MaintainWippFccBo">
	Insert into EXP_MAINTAIN_WIPP_FCC_DTL 
		  (TR_NO, JO_TYPE, ULD_KEY, OK_YN, ULD_REMARKS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE,TR_TYPE)
	VALUES(#trNo#,#joType#,#uldKey#,#okYN#,#uldRmks#,#createdUserId#,sysdate,#createdUserId#,sysdate,#trtype#)
</insert>
<delete id="delete_EXP_MAINTAIN_WIPP_FCC_DTL" parameterClass="cargo.cms.export.bo.MaintainWippFccBo">
	DELETE FROM  EXP_MAINTAIN_WIPP_FCC_DTL WHERE TR_NO = #trNo# and JO_TYPE =#joType#
</delete>
<update id="finalizeWippFccJo_HD" parameterClass="cargo.cms.export.bo.MaintainWippFccBo">
	UPDATE EXP_MAINTAIN_WIPP_FCC_HD SET
		   FINALIZE_USER = #createdUserId#,
		   FINALIZE_DATE = sysdate,  
		   LM_USER_ID = #createdUserId#,
		   LM_DATE = sysdate,
		   TR_TYPE = #trtype#
	WHERE TR_NO = #trNo# and flt_key = #flightKey# and flt_date=#fltDate# and JO_TYPE =#joType#
</update>
<update id="unFinalizeWippFccJo_HD" parameterClass="cargo.cms.export.bo.MaintainWippFccBo">
	UPDATE EXP_MAINTAIN_WIPP_FCC_HD SET
		   FINALIZE_USER = null,
		   FINALIZE_DATE = null,  
		   LM_USER_ID = #createdUserId#,
		   LM_DATE = sysdate,
		   TR_TYPE = #trtype#
	WHERE TR_NO = #trNo# and flt_key = #flightKey# and flt_date=#fltDate# and JO_TYPE =#joType#
</update>
<update id="completeWippFccJo_HD" parameterClass="cargo.cms.export.bo.MaintainWippFccBo">
	UPDATE EXP_MAINTAIN_WIPP_FCC_HD SET
		   COMPLETE_USER = #createdUserId#,
		   COMPLETE_DATE = sysdate,  
		   LM_USER_ID = #createdUserId#,
		   LM_DATE = sysdate,
		   TR_TYPE = #trtype#
	WHERE TR_NO = #trNo# and flt_key = #flightKey# and flt_date=#fltDate# and JO_TYPE =#joType#
</update>
<update id="unCompleteWippFccJo_HD" parameterClass="cargo.cms.export.bo.MaintainWippFccBo">
	UPDATE EXP_MAINTAIN_WIPP_FCC_HD SET
		   COMPLETE_USER = null,
		   COMPLETE_DATE = null,  
		   LM_USER_ID = #createdUserId#,
		   LM_DATE = sysdate,
		   TR_TYPE = #trtype#
	WHERE TR_NO = #trNo# and flt_key = #flightKey# and flt_date=#fltDate# and JO_TYPE =#joType#
</update>
<update id="update_EXP_MAINTAIN_WIPP_FCC_DTL" parameterClass="cargo.cms.export.bo.MaintainWippFccBo">
	UPDATE EXP_MAINTAIN_WIPP_FCC_DTL SET
		   OK_YN = #okYN#,
		   LM_USER_ID = #createdUserId#,
		   LM_DATE = sysdate,
		   TR_TYPE = #trtype#
	WHERE TR_NO = #trNo# and JO_TYPE =#joType# and ULD_KEY = #uldKey#
</update>
<select id="isJOFinalized"  parameterClass="map" resultClass="java.lang.String">
	select decode(FINALIZE_DATE,null,'N','Y') finalizYN
	from EXP_MAINTAIN_WIPP_FCC_HD 
		where TR_NO = #TR_NO# and JO_TYPE =#JO_TYPE# and flt_key = #FLT_KEY# and flt_date=#FLT_DATE# 
</select>
<select id="isJOCompeleted"  parameterClass="map" resultClass="java.lang.String">
	select decode(COMPLETE_DATE,null,'N','Y') completeYN
	from EXP_MAINTAIN_WIPP_FCC_HD
		where TR_NO = #TR_NO# and JO_TYPE =#JO_TYPE# and flt_key = #FLT_KEY# and flt_date=#FLT_DATE# 
</select>

<select id="getWIPPandFCCEmails"  parameterClass="java.lang.String" resultClass="java.lang.String">
	select EMAIL_IDS from MAST_WIPP_FCC_EMAILS where JO_TYPE  = #JO_TYPE#
</select>
<select id="getJO_WIPP_FCC_Header"  parameterClass="map" resultClass="cargo.cms.export.bo.MaintainWippFccBo">
	select h.flt_key flightKey, to_char(h.flt_date,'DDMONYY') fltDate, 
     		to_char(h.finalize_date,'DDMONYY HH24:MI') finalizYN,
    		  (ltrim(SUBSTR(TRIM(TO_CHAR(A.SCH_TIME,'0000')),0,2)  || ':'  || SUBSTR(TRIM(TO_CHAR(A.SCH_TIME,'0000')),3,2),':')) 
  				|| decode(PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, A.FLT_TYPE, 'DD'),null,'', '/' || PKG_COMMON.get_flt_eta(A.FLT_KEY, A.SCH_DATE, A.FLT_TYPE, 'DD'))
  			std,  
    		a.acft_prk_bay as parkingBay
		from exp_maintain_wipp_fcc_hd h
    	join FLT_OPR a on a.flt_key= h.flt_key and a.sch_date=h.flt_date and flt_type='D'
		where h.tr_no=#TR_NO# and h.jo_type=#JO_TYPE#
</select>
<select id="getJO_WIPP_FCC_ULDs"  parameterClass="map" resultClass="cargo.cms.export.bo.MaintainWippFccBo">
	select uld_key uldKey
		from exp_maintain_wipp_fcc_dtl d
		join exp_maintain_wipp_fcc_hd h on d.tr_no=h.tr_no and d.jo_type=h.jo_type
		where d.tr_no=#TR_NO# and d.jo_type=#JO_TYPE#
</select>

<select id="getPreOffloadSysparamVal" parameterClass="java.lang.String"  resultClass="java.lang.String">
	select rule_value from cmsrules where rule_code='PRE_OFFLOAD_VALI_REQ'
</select>
<select id="fetchPreOffloadPcs" parameterClass="map"  resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	SELECT pre_off_pcs AS preOffLoadPc,
	  PRE_OFF_WT       AS preOffLoadWt
	FROM exp_offload_uld_awb
	WHERE flt_key=#FLT_KEY#
	AND flt_date =to_date(#FLT_DATE#,'DDMONYY')
	AND uld_bt_no=#ULD_BT_NO#
	AND awb_no   =#AWB_NO#
	AND awb_date =to_date(#AWB_DATE#,'DDMONYY') AND ROWNUM=1
</select>
<select id="fetchBulkPreOffloadPcs" parameterClass="map"  resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	SELECT SUM(pre_off_pcs) AS preOffLoadPc,
	  SUM(PRE_OFF_WT)       AS preOffLoadWt
	FROM exp_offload_uld_awb
	WHERE flt_key=#FLT_KEY#
	AND flt_date =to_date(#FLT_DATE#,'DDMONYY')
	AND awb_no   =#AWB_NO#
	AND awb_date =to_date(#AWB_DATE#,'DDMONYY')
	AND BULK_IND='Y' 
  	GROUP BY flt_key,FLT_DATE,AWB_NO,AWB_DATE
</select>

<select id="fetchBulkOffloadPcs" parameterClass="map"  resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	SELECT SUM(A.offload_pcs) AS offPcs,
       SUM(A.OFFLOAD_WT) AS offWt
	FROM exp_offload_uld_awb A,EXP_OFFLOAD_ULD B
	WHERE 
  B.FLT_KEY = A.FLT_KEY AND
  B.FLT_DATE = A.FLT_DATE AND
  B.ULD_BT_NO = A.ULD_BT_NO AND
  A.flt_key=#FLT_KEY#
	AND A.flt_date =to_date(#FLT_DATE#,'DDMONYY')
	AND A.awb_no   =#AWB_NO#
	AND A.awb_date =to_date(#AWB_DATE#,'DDMONYY')
  AND A.BULK_IND='Y'  AND A.CONFIRMED_YN='Y' 
  GROUP BY A.flt_key,A.FLT_DATE,A.AWB_NO,A.AWB_DATE
</select>

<select id="checkTarmacAWBBulkOffload" parameterClass="map"  resultClass="java.lang.Integer">
select count(1) from exp_offload_uld_awb where flt_key=#FLT_KEY# and flt_date=#FLT_DATE# and awb_no=#AWB_NO# and awb_date =to_date(#AWB_DATE#,'DDMONYY') and uld_bt_no='TARMACBULK'
</select>
<select id="fetchTarmacAWBBulkOffloadPcs" parameterClass="map"  resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
	SELECT SUM(A.offload_pcs) AS offPcs,
       SUM(A.OFFLOAD_WT) AS offWt
	FROM exp_offload_uld_awb A,EXP_OFFLOAD_ULD B
	WHERE 
  B.FLT_KEY = A.FLT_KEY AND
  B.FLT_DATE = A.FLT_DATE AND
  B.ULD_BT_NO = A.ULD_BT_NO AND
  A.flt_key=#FLT_KEY#
	AND A.flt_date =to_date(#FLT_DATE#,'DDMONYY')
	AND A.awb_no   =#AWB_NO#
	AND A.awb_date =to_date(#AWB_DATE#,'DDMONYY')
  AND A.BULK_IND='Y' AND A.CONFIRMED_YN='Y' 
  GROUP BY A.flt_key,A.FLT_DATE,A.AWB_NO,A.AWB_DATE
</select>

<select id="getpreoffPpkhContainerStatus" parameterClass="map"  resultClass="java.lang.Integer">
SELECT COUNT(1) FROM (
select count(1) cnt from exp_pmanifest_uld q where ((q.bb_ind = 'Y' or q.new_checkin_uld='Y' 
			  or (select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) from mast_uld_type where code = substr(q.uld_bt_no, 1, 3)) = 'Y') OR q.ULD_BT_NO = (select RULE_VALUE from cmsrules where RULE_CODE='Dummy_H_Container') )
        and q.flt_key=#FLT_KEY# and q.flt_date=#FLT_DATE# and q.uld_bt_no=#ULD_BT_NO#
UNION ALL
     SELECT COUNT(1) cnt FROM EXP_FLT_ULD WHERE FLT_KEY=#FLT_KEY# AND FLT_DATE=#FLT_DATE# AND BB_IND ='Y' AND ULD_KEY=#ULD_BT_NO# AND 
     NOT EXISTS (SELECT ULD_BT_NO FROM EXP_PMANIFEST_ULD B WHERE B.FLT_KEY=#FLT_KEY# AND B.FLT_DATE=#FLT_DATE# AND B.ULD_BT_NO=#ULD_BT_NO#)
     ) C WHERE C.cnt > 0
</select>



<select id="checkCarrIsCxgroupOrNot"  parameterClass="java.lang.String" resultClass="java.lang.Integer">
		 select count(1) from dual where (#PARAM# = 'CX' OR #PARAM# IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE= 'CX'))
</select>
<select id="getAWBSHCs_NoFWBandCAR" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT STRAGG(STRINGDELIM(c.spl, ','))
		FROM
		  (SELECT code spl
		  FROM mast_spl_hand_code
		  WHERE code IN
		    (SELECT REGEXP_SUBSTR (
		      (SELECT STRAGG(STRINGDELIM(b.spl, ','))
		      FROM (
		        (SELECT T.spl spl
		        FROM
		          (SELECT DECODE(awb.spl_code1, NULL, '', awb.spl_code1)
		            || DECODE(awb.spl_code2, NULL, '', ','
		            || awb.spl_code2)
		            || DECODE(awb.spl_code3, NULL, '', ','
		            || awb.spl_code3)
		            || DECODE(awb.spl_code4, NULL, '', ','
		            || awb.spl_code4)
		            || DECODE(awb.spl_code5, NULL, '', ','
		            ||awb.spl_code5)
		            || DECODE(awb.spl_code6, NULL, '', ','
		            || awb.spl_code6)
		            || DECODE(awb.spl_code7, NULL, '', ','
		            || awb.spl_code7)
		            || DECODE(awb.spl_code8, NULL, '', ','
		            || awb.spl_code8)
		            || DECODE(awb.spl_code9, NULL, '', ','
		            || awb.spl_code9) AS spl,
		            awb_no,
		            awb_date
		          FROM awb awb
		          ) t
		        WHERE awb_no = #awbNo#
		        AND awb_date = to_date(#awbDate#,'DDMONYY')
		        )
		      UNION
		      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode1#
		      UNION
		      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode2#
		      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode3#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode4#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode5#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode6#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode7#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode8#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode9#)b),'[^,]+',1,LEVEL)TXT
		    FROM DUAL
		      CONNECT BY REGEXP_SUBSTR (
		      (SELECT STRAGG(STRINGDELIM(b.spl, ','))
		      FROM (
		        (SELECT T.spl spl
		        FROM
		          (SELECT DECODE(awb.spl_code1, NULL, '', awb.spl_code1)
		            || DECODE(awb.spl_code2, NULL, '', ','
		            || awb.spl_code2)
		            || DECODE(awb.spl_code3, NULL, '', ','
		            || awb.spl_code3)
		            || DECODE(awb.spl_code4, NULL, '', ','
		            || awb.spl_code4)
		            || DECODE(awb.spl_code5, NULL, '', ','
		            ||awb.spl_code5)
		            || DECODE(awb.spl_code6, NULL, '', ','
		            || awb.spl_code6)
		            || DECODE(awb.spl_code7, NULL, '', ','
		            || awb.spl_code7)
		            || DECODE(awb.spl_code8, NULL, '', ','
		            || awb.spl_code8)
		            || DECODE(awb.spl_code9, NULL, '', ','
		            || awb.spl_code9) AS spl,
		            awb_no,
		            awb_date
		          FROM awb awb
		          ) t
		        WHERE awb_no = #awbNo#
		        AND awb_date = to_date(#awbDate#,'DDMONYY')
		        )
			      UNION
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode1#
			      UNION
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode2#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode3#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode4#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode5#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode6#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode7#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode8#
			      UNION 
			      SELECT code spl FROM mast_spl_hand_code WHERE code=#splCode9#)b),'[^,]+',1,LEVEL)IS NOT NULL
			    )
			  ORDER BY priority DESC
			  ) c
		WHERE ROWNUM &lt;= 9
		AND (SELECT COUNT(1)
		  FROM AWB a
		  WHERE a.awb_no = #awbNo#
		  AND a.awb_date = to_date(#awbDate#,'DDMONYY'))>0
	</select>
	
	<select id="fetchBatchJobConfigDetails" parameterClass="java.util.HashMap" resultClass="cargo.cms.common.utils.bo.BatchJobBO" >
		select REPORT_NAME reportName,REPORT_TYPE reportType,FROM_DATE fromDateRange,TO_DATE toDateRange,REPORT_PREFIX reportPrefix,
		EXECUTION_DAY executionDay,EXECUTION_DATE executionDate,REPORT_PATH reportPath,category category,sub_category subCategory,
		REPORT_ID reportId,job_name batchName
		from report_config_master  where
		1=1
		<isNotEmpty property="reportName">
			and	report_name=#reportName#
		</isNotEmpty>
		<isNotEmpty property="reportType">
				AND	REPORT_TYPE=#reportType#
		</isNotEmpty>
		<isNotEmpty property="jobName">
				AND	job_name=#jobName#
		</isNotEmpty>
	
	</select>

   	<select id="sqlCountReportLog" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
	select count(1) from REPORT_EXECUTION_LOG where report_name=#reportName# and report_type=#reportType#  
	and trunc(from_date)=#fromDate# and trunc(to_date)=#toDate#
	<!--AND trunc(JOB_DATE)=#jobDate# -->
	and category=#category#
	<isNotEmpty property="subCategory">
			and SUB_CATEGORY=#subCategory#
	</isNotEmpty>
	<isNotEmpty property="airline">
			and carrier_code=#airline#
	</isNotEmpty>
	<isNotEmpty property="awbPrefix">
		and AWB_PREFIX=#awbPrefix#
	</isNotEmpty>
	<isNotEmpty property="cargoType">
		and CARGO_TYPE = #cargoType#
	</isNotEmpty>
	<isNotEmpty property="fileName">
		and REPORT_FILE_NAME = #fileName#
	</isNotEmpty>
	</select>
	

      	<update id="sqlUpdateReportLog" parameterClass="java.util.HashMap">
	<!--  Bug fix 13738, 13848 -->
	UPDATE REPORT_EXECUTION_LOG
	SET JOB_DATE           =#jobDate#,
	  lm_date              =sysdate,
	  lm_user_id           =#userName#,
	  REPORT_EXECUTION_TIME=sysdate,
	  REPORT_PATH          = #reportPath#,
	  REPORT_FILE_NAME     = #fileName#,
	  report_id            = #reportId#,
	  carrier_code       =#airline#
	WHERE report_name      =#reportName#
	AND report_type        =#reportType#
	AND TRUNC(from_date)   =#fromDate#
	AND TRUNC(to_date)     =#toDate#
	<!-- AND TRUNC(JOB_DATE)    =#jobDate#-->
	AND category           =#category#
	<isNotEmpty property="subCategory">
	AND SUB_CATEGORY       =#subCategory#
	</isNotEmpty>
	<isNotEmpty property="airline">
	AND carrier_code       =#airline#
	</isNotEmpty>
	<isNotEmpty property="awbPrefix">
		and AWB_PREFIX=#awbPrefix#
	</isNotEmpty>
	
	<isNotEmpty property="cargoType">
		and CARGO_TYPE = #cargoType#
	</isNotEmpty>
	
	<isNotEmpty property="fileName">
		and REPORT_FILE_NAME = #fileName#
	</isNotEmpty>
	
	<!-- update REPORT_EXECUTION_LOG 
	set JOB_DATE=#jobDate#,cr_date=sysdate,lm_date=sysdate,cr_user_id=#userName#,lm_user_id=#userName#,REPORT_EXECUTION_TIME=sysdate
	where report_name=#reportName# and report_type=#reportType#  
	and trunc(from_date)=#fromDate# and trunc(to_date)=#toDate#
	and trunc(JOB_DATE)=#jobDate# 
	and category=#category# and SUB_CATEGORY=#subCategory#
	and carrier_code=#airline# -->
	</update>

<insert id="sqlInsert_ImpExpData_ExpFlt_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	insert into REPT_IMPEXP_DATA_EXPFLT_IMAGE
	(FLIGHTKEY ,
			FLIGHTDATE,
			FLIGHTTYPE ,
			NILFLIGHT ,
			ORIGIN ,
			DEST ,
			STA ,
			ETA ,
			ATA ,
			PRIMARYAREA ,
			SECONDARYAREA ,
			CONTAINERCOUNT ,
			PALLETCOUNT ,
			HOUSECONTAINER ,
			PPKTONNAGE , 
			BLKTONNAGE ,
			TMTONNAGE ,
			IFBULK ,
			TPKTONNAGE ,
			IFPPKTONNAGE ,
			TTTONNAGE ,
			NON_IFTM_TONNAGE ,
			FLTTONNAGE ,
			SHIPCOUNT ,
			ISTPREMANIFESTTIME ,
			LASTPREMANIFESTTIME ,
			ISTJOBORDER ,
			LASTJOBORDER ,
			ISTULDBUILDUPSTARTTIME ,
			LASTULDBUILDUPSTARTTIME ,
			ISTULDBUILDUPCOMPTIME ,
			LASTULDBUILDUPCOMPTIME ,
			ISTREADYFORDISPATCH ,
			LASTREADYFORDISPATCH ,
	    CARRCODE ,
	    REPORT_NAME,
	    report_type,
	    from_date,
	    to_date,
	    cr_date,
	    cr_user_id)
	SELECT 
			FLIGHTKEY ,
			TO_CHAR(FLIGHTDATE,'DDMONYY') FLIGHTDATE,
			FLIGHTTYPE ,
			NILFLIGHT ,
			ORIGIN ,
			DEST ,
			STA ,
			ETA ,
			ATA ,
			PRIMARYAREA ,
			SECONDARYAREA ,
			CONTAINERCOUNT ,
			PALLETCOUNT ,
			HOUSECONTAINER ,
			PPKTONNAGE , 
			BLKTONNAGE ,
			TMTONNAGE ,
			IFBULK ,
			TPKTONNAGE ,
			IFPPKTONNAGE ,
			TTTONNAGE ,
			NON_IFTM_TONNAGE ,
			FLTTONNAGE ,
			SHIPCOUNT ,
			ISTPREMANIFESTTIME ,
			LASTPREMANIFESTTIME ,
			ISTJOBORDER ,
			LASTJOBORDER ,
			ISTULDBUILDUPSTARTTIME ,
			LASTULDBUILDUPSTARTTIME ,
			ISTULDBUILDUPCOMPTIME ,
			LASTULDBUILDUPCOMPTIME ,
			ISTREADYFORDISPATCH ,
			LASTREADYFORDISPATCH ,
	    CARRCODE ,
	    #reportName# ,
	    #reportType# ,
	    #fromDate# ,
	    #toDate# ,
	    sysdate ,
	    'JOB' 
		FROM V_RAW_DATA_EXP_FLT
		WHERE FLIGHTDATE BETWEEN #fromDate# AND #toDate# 
		<isNotEmpty property="airLine">
		AND CARRCODE   = #airLine# 
		</isNotEmpty>			
	</insert>
	<delete id="sqldelete_ImpExpData_ExpFlt_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_IMPEXP_DATA_EXPFLT_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  CARRCODE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#	
	</delete>
	
	<insert id="sqlInsert_ImpExpData_ImpFlt_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">

		insert into REPT_IMPEXP_DATA_IMPFLT_IMAGE
		(   FLIGHTKEY ,
				FLIGHTDATE,
				FLIGHTTYPE ,
				NILFLIGHT ,
				ORIGIN ,
				DEST ,
				STA ,
				ETA ,
				ATA ,
				PRIMARYAREA ,
				SECONDARYAREA ,
				CONTAINERCOUNT ,
				PALLETCOUNT ,
				HOUSECONTAINER ,
				PPKTONNAGE , 
				BLKTONNAGE ,
				TMTONNAGE ,
				IFBULK ,
				IFPPKTONNAGE ,
				TTTONNAGE ,
				NON_IFTM_TONNAGE ,
				FLTTONNAGE ,
				SHIPCOUNT ,
				CONSTRAINT ,
				ISTULDBREAKDOWNSTARTTIME ,
				LASTULDBREAKDOWNSTARTTIME ,
				ISTULDBREAKDOWNCOMPLETETIME ,
				LASTULDBREAKDOWNCOMPLETETIME ,		
		    CARRCODE ,
		    REPORT_NAME,
		    report_type,
		    from_date,
		    to_date,
		    cr_date,
		    cr_user_id)
		SELECT 
				FLIGHTKEY ,
				TO_CHAR(FLIGHTDATE,'DDMONYY') FLIGHTDATE,
				FLIGHTTYPE ,
				NILFLIGHT ,
				ORIGIN ,
				DEST ,
				STA ,
				ETA ,
				ATA ,
				PRIMARYAREA ,
				SECONDARYAREA ,
				CONTAINERCOUNT ,
				PALLETCOUNT ,
				HOUSECONTAINER ,
				PPKTONNAGE , 
				BLKTONNAGE ,
				TMTONNAGE ,
				IFBULK ,
				IFPPKTONNAGE ,
				TTTONNAGE ,
				NON_IFTM_TONNAGE ,
				FLTTONNAGE ,
				SHIPCOUNT ,
				CONSTRAINT ,
				ISTULDBREAKDOWNSTARTTIME ,
				LASTULDBREAKDOWNSTARTTIME ,
				ISTULDBREAKDOWNCOMPLETETIME ,
				LASTULDBREAKDOWNCOMPLETETIME ,		
		    CARRCODE ,
	    #reportName# ,
	    #reportType# ,
	    #fromDate# ,
	    #toDate# ,
	    sysdate ,
	    'JOB' 
		FROM V_RAW_DATA_IMP_FLT
		WHERE FLIGHTDATE BETWEEN #fromDate# AND #toDate# 
		<isNotEmpty property="airLine">
		AND CARRCODE   = #airLine# 
		</isNotEmpty>		
	</insert>
	
	<delete id="sqlDelete_ImpExpData_ImpFlt_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_IMPEXP_DATA_IMPFLT_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  CARRCODE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#			
	</delete>
	
	<insert id="sqlInsert_ImpExpData_ExpUld_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	insert into REPT_IMPEXP_DATA_EXPULD_IMAGE
	(   EXPORT ,
			ULDKEY ,
			CARGOTYPE ,
			PPKIND ,
			CONTOURCODE ,
			TNASFERZONE ,
			HANDOVERTIME ,
			AIRSIDECHKOUT ,
			BUILDUPSTART ,
			BUILDUPCOMPL ,
			WORKSTATION ,
			FLTKEY ,
			FLTDATE ,
			ORIGIN ,
			DESTINATION ,
			FLTTYPE ,
			STA ,
			ATA ,
			NOOFCONGINMENT ,
			PIECES ,
			WEIGHT ,
			SHC ,		
	    CARRCODE ,
	    REPORT_NAME,
	    report_type,
	    from_date,
	    to_date,
	    cr_date,
	    cr_user_id)
	SELECT
			EXPORT ,
			ULDKEY ,
			CARGOTYPE ,
			PPKIND ,
			CONTOURCODE ,
			TNASFERZONE ,
			HANDOVERTIME ,
			AIRSIDECHKOUT ,
			BUILDUPSTART ,
			BUILDUPCOMPL ,
			WORKSTATION ,
			FLTKEY ,
			TO_CHAR(FLTDATE,'DDMONYY') FLTDATE ,
			ORIGIN ,
			DESTINATION ,
			FLTTYPE ,
			STA ,
			ATA ,
			NOOFCONGINMENT ,
			PIECES ,
			WEIGHT ,
			SHC ,		
	    CARRCODE ,
	    #reportName# ,
	    #reportType# ,
	    #fromDate# ,
	    #toDate# ,
	    sysdate ,
	    'JOB' 
		FROM V_RAW_DATA_EXP_ULD
		WHERE FLTDATE BETWEEN #fromDate# AND #toDate# 
		<isNotEmpty property="airLine">
		AND CARRCODE   = #airLine# 
		</isNotEmpty>		
	</insert>
	
	<delete id="sqldelete_ImpExpData_ExpUld_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_IMPEXP_DATA_EXPULD_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  CARRCODE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#			
	</delete>
	
	<insert id="sqlInsert_ImpExpData_ImpUld_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	INSERT
		INTO REPT_IMPEXP_DATA_IMPULD_IMAGE
		  (
		    IMPORT ,
		    ULDKEY ,
		    CARGOTYPE ,
		    BUPCODE ,
		    CONTOURCODE ,
		    TNASFERZONE ,
		    HANDOVERTIME ,
		    AIRSIDECHKIN ,
		    BRKDWNUPSTART ,
		    BRKDWNCOMPL ,
		    WORKSTATION ,
		    FLTKEY ,
		    FLTDATE,
		    ORIGIN ,
		    DESTINATION ,
		    FLTTYPE ,
		    STA ,
		    ATA ,
		    IMX ,
		    SLQIND ,
		    PPKIND ,
		    EXPIND ,
		    NBKIND ,
		    NOOFCONGINMENT ,
		    PIECES ,
		    WEIGHT ,
		    SHC ,
		    CARRCODE ,
		    REPORT_NAME,
		    report_type,
		    from_date,
		    to_date,
		    cr_date,
		    cr_user_id
		  )
		SELECT IMPORT ,
		  ULDKEY ,
		  CARGOTYPE ,
		  BUPCODE ,
		  CONTOURCODE ,
		  TNASFERZONE ,
		  HANDOVERTIME ,
		  AIRSIDECHKIN ,
		  BRKDWNUPSTART ,
		  BRKDWNCOMPL ,
		  WORKSTATION ,
		  FLTKEY ,
		  TO_CHAR(FLTDATE,'DDMONYY') FLTDATE,
		  ORIGIN ,
		  DESTINATION ,
		  FLTTYPE ,
		  STA ,
		  ATA ,
		  IMX ,
		  SLQIND ,
		  PPKIND ,
		  EXPIND ,
		  NBKIND ,
		  NOOFCONGINMENT ,
		  PIECES ,
		  WEIGHT ,
		  SHC ,
		  CARRCODE ,
		  #reportName# ,
	    #reportType# ,
	    #fromDate# ,
	    #toDate# ,
	    sysdate ,
	    'JOB' 
		FROM V_RAW_DATA_IMP_ULD
		WHERE FLTDATE BETWEEN #fromDate# AND #toDate# 
		<isNotEmpty property="airLine">
		AND CARRCODE   = #airLine# 
		</isNotEmpty>
	</insert>
	
	<delete id="sqldelete_ImpExpData_ImpUld_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_IMPEXP_DATA_IMPULD_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  CARRCODE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#		
	</delete>
	
	<insert id="sqlInsert_CBX_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
	INSERT INTO REPT_CBX_DAILY_TONN_IMAGE(
	AIRLINE,
	FLT_DATE,
	FLT_KEY,
	FLOW,
	BULKLCL,
	BULKTS,
	PPKLCL,
	PPKTS,
	AWB,
	TRKFLTDATE,
	WEIGHTS,
	SERVICECODE,
	SERVICEDEST,
	REPORT_NAME,
	REPORT_TYPE,
	FROM_DATE,
	TO_DATE,
	CR_DATE,
	CR_USER_ID) 
	SELECT awb.carr_code                                                                                     AS airLine ,
	DECODE(awb.accept_mode,'TIT',TO_CHAR(expFlt.flt_date,'DD/MM/YYYY'),TO_CHAR(shp.flt_date,'DD/MM/YYYY')) AS impFltDate,
	DECODE(awb.accept_mode,'TIT',expFlt.flt_key,shp.flt_key) impFltKey,
	'I' AS flow,
	CASE
	WHEN (awb.awb_type   = 'E'
	AND (awb.accept_mode = 'LCA'
	OR awb.accept_mode   = 'LIT') )
	THEN TO_CHAR(NVL(awb.rcl_bulk_wt,0))
	ELSE ''
	END AS bulkLCL,
	CASE
	WHEN (awb.awb_type = 'T'
	OR awb.awb_type    = 'I')
	THEN TO_CHAR(NVL(shp.bulk_wt,0))
	<!-- WHEN (awb.awb_type  = 'E'
	AND awb.accept_mode = 'TIT')
	THEN TO_CHAR(NVL(awb.rcl_bulk_wt,0)) -->
	ELSE ''
	END AS bulkTS,
	CASE
	WHEN (awb.awb_type   = 'E'
	AND (awb.accept_mode = 'LCA'
	OR awb.accept_mode   = 'LIT'))
	THEN TO_CHAR( NVL(awb.rcl_ppk_wt,0) + NVL(awb.rcl_mix_wt,0) )
	ELSE ''
	END AS ppkLCL,
	CASE
	WHEN (awb.awb_type = 'T'
	OR awb.awb_type    = 'I')
	THEN TO_CHAR(NVL(shp.bup_wt,0))
	<!-- WHEN (awb.awb_type  = 'E'
	AND awb.accept_mode = 'TIT')
	THEN TO_CHAR( NVL(awb.rcl_ppk_wt,0) + NVL(awb.rcl_mix_wt,0) ) -->
	ELSE ''
	END AS ppkTS,
	SUBSTR(awb.awb_no,0,3)
	||'-'
	||SUBSTR(awb.awb_no,4,8)                AS AWB,
	TO_CHAR(pman.TRK_FLT_DATE,'DD/MM/YYYY') AS trkFltDate,
	CASE
	WHEN ROUND( (vol * (1000/6)), 2 ) > pman.PMAN_WT
	THEN ROUND( (vol * (1000/6)), 2 )
	ELSE pman.PMAN_WT
	END AS Weights ,
	CASE
	WHEN SUBSTR(trk.SERVICE_CODE,0,2) = 'IA'
	THEN 'Consolidated'
	WHEN SUBSTR(trk.SERVICE_CODE,0,2) = 'ID'
	THEN 'Dedicated'
	ELSE ''
	END           AS serviceCode,
	pman.UNLDG_PT AS serviceDest,
	#reportName# ,
	#reportType# ,
	#fromDate# ,
	#toDate# ,
	sysdate ,
	'JOB' 
	FROM cdt_pman_awb pman
	JOIN cdt_awb cawb
	ON cawb.AWB_NO    = pman.awb_No
	AND cawb.awb_date = pman.awb_date
	JOIN awb awb
	ON awb.AWB_NO    = pman.awb_No
	AND awb.awb_date = pman.awb_date
	JOIN itm_trk_flt trk
	ON trk.TRUCK_FLT_NO    = pman.TRK_FLT_KEY
	AND trk.TRUCK_FLT_DATE = pman.TRK_FLT_DATE
	LEFT JOIN
	(SELECT awb_no,
	awb_date,
	flt_key,
	flt_date,
	bulk_pcs,
	bulk_wt,
	bup_pcs,
	bup_wt
	FROM imp_car_shp
	) shp
	ON shp.AWB_NO    = pman.awb_No
	AND shp.awb_date = pman.awb_date
	LEFT JOIN
	(SELECT awb_no,
	awb_date,
	flt_key,
	flt_date
	FROM cdt_inb_flt_dtls
	WHERE RCL_NO IN
	( SELECT rcl_no FROM exp_rcl_hd WHERE VOID_USER_ID IS NULL
	)
	GROUP BY awb_no,
	awb_date,
	flt_key,
	flt_date
	) expFlt
	ON expFlt.AWB_NO    = pman.awb_No
	AND expFlt.awb_date = pman.awb_date
	WHERE pman.TRK_FLT_DATE BETWEEN TO_DATE(#fromDate#, 'DDMONYY') AND TO_DATE(#toDate#, 'DDMONYY')
	<isNotEmpty property="airLine">
	AND awb.carr_code = #airLine#
	</isNotEmpty>		
	</insert>
	
	<delete id="sqldelete_CBX_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_CBX_DAILY_TONN_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  AIRLINE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#
					
	</delete>
	
	<insert id="sqlInsert_OBC_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	
	INSERT INTO REPT_AIRL_TONN_OBC_IMAGE(
	FLT_DATE ,
		sch_DATE ,
		AIRLINE ,
		FLT_TYPE ,
		FLT_KEY ,
		TYPE ,
		blk_lcl ,
		blk_eph_knw ,
		blk_eph_unk ,
		blk_epa_knw ,
		blk_epa_unk ,
		blk_epd_knw ,
		blk_epd_unk ,
		blk_ts ,
		bup_lcl ,
		bup_eph_knw ,
		bup_eph_unk ,
		bup_epa_knw ,
		bup_epa_unk ,
		bup_epd_knw ,
		bup_epd_unk ,
		bup_ts ,
		blk_lcl_ofld ,
		blk_ts_ofld ,
		bup_lcl_ofld ,
		bup_ts_ofld ,
		rebuild ,
		eph_rebuild ,
		epa_rebuild ,
		epd_rebuild ,
		large_pvc ,
		small_pvc ,
		wrap ,
		OUTBOUND_COURIER   ,
		OUTBOUND_COURIER_TRANSHIPMENT  ,
		OUTBOUND_EXCESS_BAGGAGE ,
		COMMERCIAL_GOODS_BAGGAGE  ,
		INBOUND_COURIER_BULK  ,
		INBOUND_COURIER_PREPACK ,
		INBOUND_COURIER_TRANSHIPMENT ,
		INBOUND_EXCESS_BAGGAGE ,
	  REPORT_NAME ,
	    report_type,
	    from_date ,
	    to_date ,
	    CR_DATE,
	    cr_user_id 
	)
	
	
	SELECT
		FLT_DATE fltDate,
		sch_DATE schDate,
		AIRLINE airLine,
		FLT_TYPE fltType,
		FLT_KEY fltKey,
		TYPE type,
		blk_lcl blk_lcl,
		blk_eph_knw blk_eph_knw,
		blk_eph_unk blk_eph_unk,
		blk_epa_knw blk_epa_knw,
		blk_epa_unk blk_epa_unk,
		blk_epd_knw blk_epd_knw,
		blk_epd_unk blk_epd_unk,
		blk_ts blk_ts,
		bup_lcl bup_lcl,
		bup_eph_knw bup_eph_knw,
		bup_eph_unk bup_eph_unk,
		bup_epa_knw bup_epa_knw,
		bup_epa_unk bup_epa_unk,
		bup_epd_knw bup_epd_knw,
		bup_epd_unk bup_epd_unk,
		bup_ts bup_ts,
		blk_lcl_ofld blk_lcl_ofld,
		blk_ts_ofld blk_ts_ofld,
		bup_lcl_ofld bup_lcl_ofld,
		bup_ts_ofld bup_ts_ofld,
		rebuild rebuild,
		eph_rebuild eph_rebuild,
		epa_rebuild epa_rebuild,
		epd_rebuild epd_rebuild,
		large_pvc large_pvc,
		small_pvc small_pvc,
		wrap wrap,
		OUTBOUND_COURIER  ob_courier ,
		OUTBOUND_COURIER_TRANSHIPMENT  ob_courier_tr,
		OUTBOUND_EXCESS_BAGGAGE pb_ecxess_bg,
		COMMERCIAL_GOODS_BAGGAGE  com_goods_bg,
		INBOUND_COURIER_BULK  inb_courier,
		INBOUND_COURIER_PREPACK inb_courier_ppk,
		INBOUND_COURIER_TRANSHIPMENT inb_courier_tr,
		INBOUND_EXCESS_BAGGAGE inb_exs_bg,
	 		#reportName# ,
		    #reportType# ,
		    #fromDate# ,
		    #toDate# ,
	      	SYSDATE,
		    'JOB' 
		FROM GT_AIRL_TONNAGE_REPT
		WHERE AIRLINE = #airLine# 	
	</insert>
	
	<delete id="sqldelete_OBC_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_AIRL_TONN_OBC_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  AIRLINE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#
					
	</delete>
	
	<insert id="sqlInsert_TT_IF_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	
	insert into REPT_AIRL_TONN_TT_IF_IMAGE(
	FLT_DATE ,
	sch_DATE ,
	AIRLINE ,
	FLT_TYPE ,
	FLT_KEY ,
	TYPE ,
	blk_lcl ,
	blk_eph_knw ,
	blk_eph_unk ,
	blk_epa_knw ,
	blk_epa_unk ,
	blk_epd_knw ,
	blk_epd_unk ,
	blk_ts ,
	bup_lcl ,
	bup_eph_knw ,
	bup_eph_unk ,
	bup_epa_knw ,
	bup_epa_unk ,
	bup_epd_knw ,
	bup_epd_unk ,
	bup_ts ,
	blk_lcl_ofld ,
	blk_ts_ofld ,
	bup_lcl_ofld ,	
	bup_ts_ofld ,
	rebuild ,
	eph_rebuild ,
	epa_rebuild ,
	epd_rebuild ,
	large_pvc ,
	small_pvc ,
	wrap ,
	AWB_NO ,
	AWB_DATE ,
	BLK_IF_0_5  ,
	BLK_IF_5  ,
	BUP_IF_0_5  ,
	BUP_IF_5  ,
	M_3  ,
	M_3_5  ,
	M_5  ,
	TARMAC_OFFLOAD,
	REPORT_NAME ,
	report_type,
	from_date ,
	to_date ,
	CR_DATE,
	cr_user_id,
	CALL_SIGN, CARGO_TYPE )
	
	SELECT
	GT.FLT_DATE fltDate,
	GT.sch_DATE schDate,
	GT.AIRLINE airLine,
	GT.FLT_TYPE fltType,
	GT.FLT_KEY fltKey,
	GT.TYPE type,
	blk_lcl blk_lcl,
	blk_eph_knw blk_eph_knw,
	blk_eph_unk blk_eph_unk,
	blk_epa_knw blk_epa_knw,
	blk_epa_unk blk_epa_unk,
	blk_epd_knw blk_epd_knw,
	blk_epd_unk blk_epd_unk,
	blk_ts blk_ts,
	bup_lcl bup_lcl,
	bup_eph_knw bup_eph_knw,
	bup_eph_unk bup_eph_unk,
	bup_epa_knw bup_epa_knw,
	bup_epa_unk bup_epa_unk,
	bup_epd_knw bup_epd_knw,
	bup_epd_unk bup_epd_unk,
	bup_ts bup_ts,
	blk_lcl_ofld blk_lcl_ofld,
	blk_ts_ofld blk_ts_ofld,
	bup_lcl_ofld bup_lcl_ofld,	
	bup_ts_ofld bup_ts_ofld,
	rebuild rebuild,
	eph_rebuild eph_rebuild,
	epa_rebuild epa_rebuild,
	epd_rebuild epd_rebuild,
	large_pvc large_pvc,
	small_pvc small_pvc,
	wrap wrap,
	AWB_NO awbNo,
	AWB_DATE awbDate,
	BLK_IF_0_5  blk_if_0_5,
	BLK_IF_5  blk_if_5,
	BUP_IF_0_5  bup_if_0_5,
	BUP_IF_5  bup_if_5,
	M_3  m_3,
	M_3_5  m_3_5,
	M_5  m_5,
	TARMAC_OFFLOAD tarmacoffload,
	#reportName# ,
	#reportType# ,
	#fromDate# ,
	#toDate# ,
	SYSDATE,
	'JOB',
	GT.CALL_SIGN callSign , CARGO_TYPE
	FROM GT_AIRL_TONNAGE_REPT GT JOIN
    FLT_OPR OPR ON GT.FLT_KEY=OPR.FLT_KEY
    AND GT.SCH_DATE=OPR.SCH_DATE 
	WHERE AIRLINE = #airLine#
	AND TRUNC(OPR.ACT_DATE) BETWEEN to_date(#fromDate#,'DDMONYY') and to_date(#toDate#,'DDMONYY')
	</insert>
	
	<delete id="sqldelete_TT_IF_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_AIRL_TONN_TT_IF_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  AIRLINE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType# AND NVL(CARGO_TYPE,'ALL') = NVL(#tcSplCargoType#,'ALL')
					
	</delete>
	
	<insert id="sqlInsert_Express_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	insert into REPT_AIRL_TONN_EXPS_IMAGE(
	FLT_DATE ,
	sch_DATE ,
	AIRLINE ,
	FLT_TYPE ,
	FLT_KEY ,
	TYPE ,
	blk_lcl ,
	blk_eph_knw ,
	blk_eph_unk ,
	blk_epa_knw ,
	blk_epa_unk ,
	blk_epd_knw ,
	blk_epd_unk ,
	blk_pcs ,
	blk_ts ,
	bup_lcl ,
	bup_eph_knw ,
	bup_eph_unk ,
	bup_epa_knw ,
	bup_epa_unk ,
	bup_epd_knw ,
	bup_epd_unk ,
	bup_pcs ,
	bup_ts ,
	blk_lcl_ofld ,
	blk_ts_ofld ,
	bup_lcl_ofld ,	
	bup_ts_ofld ,
	rebuild ,
	eph_rebuild ,
	epa_rebuild ,
	epd_rebuild ,
	large_pvc ,
	small_pvc ,
	wrap ,
	AWB_NO ,
	AWB_DATE ,
	agent_code ,
	agent_name ,
	REPORT_NAME ,
	report_type,
	from_date ,
	to_date ,
	CR_DATE,
	cr_user_id )
	SELECT
	GT.FLT_DATE fltDate,
	GT.sch_DATE schDate,
	GT.AIRLINE airLine,
	GT.FLT_TYPE fltType,
	GT.FLT_KEY fltKey,
	GT.TYPE type,
	GT.blk_lcl blk_lcl,
	GT.blk_eph_knw blk_eph_knw,
	GT.blk_eph_unk blk_eph_unk,
	GT.blk_epa_knw blk_epa_knw,
	GT.blk_epa_unk blk_epa_unk,
	GT.blk_epd_knw blk_epd_knw,
	GT.blk_epd_unk blk_epd_unk,
	GT.blk_pcs blk_pcs,
	GT.blk_ts blk_ts,
	GT.bup_lcl bup_lcl,
	GT.bup_eph_knw bup_eph_knw,
	GT.bup_eph_unk bup_eph_unk,
	GT.bup_epa_knw bup_epa_knw,
	GT.bup_epa_unk bup_epa_unk,
	GT.bup_epd_knw bup_epd_knw,
	GT.bup_epd_unk bup_epd_unk,
	GT.bup_pcs bup_pcs,
	GT.bup_ts bup_ts,
	GT.blk_lcl_ofld blk_lcl_ofld,
	GT.blk_ts_ofld blk_ts_ofld,
	GT.bup_lcl_ofld bup_lcl_ofld,	
	GT.bup_ts_ofld bup_ts_ofld,
	GT.rebuild rebuild,
	GT.eph_rebuild eph_rebuild,
	GT.epa_rebuild epa_rebuild,
	GT.epd_rebuild epd_rebuild,
	GT.large_pvc large_pvc,
	GT.small_pvc small_pvc,
	GT.wrap wrap,
	GT.AWB_NO awbNo,
	GT.AWB_DATE awbDate,
	A.agent_code agentCode,
	A.agent_name agentName,
	#reportName# ,
	#reportType# ,
	#fromDate# ,
	#toDate# ,
	SYSDATE,
	'JOB' 
	FROM GT_AIRL_TONNAGE_REPT GT
	LEFT JOIN AWB A ON GT.AWB_NO = A.AWB_NO AND GT.AWB_DATE = A.AWB_DATE
	WHERE AIRLINE = #airLine#
	</insert>
	
	<delete id="sqldelete_Express_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_AIRL_TONN_EXPS_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  AIRLINE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#
					
	</delete>
	
	<insert id="sqlInsert_Mail_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	insert into REPT_AIRL_TONN_MAIL_IMAGE(
		FLT_DATE ,
		sch_DATE ,
		AIRLINE ,
		FLT_TYPE ,
		FLT_KEY ,
		TYPE ,
		blk_lcl ,
		blk_eph_knw ,
		blk_eph_unk ,
		blk_epa_knw ,
		blk_epa_unk ,
		blk_epd_knw ,
		blk_epd_unk ,
		blk_ts ,
		bup_lcl ,
		bup_eph_knw ,
		bup_eph_unk ,
		bup_epa_knw ,
		bup_epa_unk ,
		bup_epd_knw ,
		bup_epd_unk ,		
		bup_ts ,
		blk_lcl_ofld ,
		blk_ts_ofld ,
		bup_lcl_ofld ,	
		bup_ts_ofld ,
		rebuild ,
		eph_rebuild ,
		epa_rebuild ,
		epd_rebuild ,
		large_pvc ,
		small_pvc ,
		wrap ,
		tarmac_mail_ppk ,
		tarmac_mail_bulk ,
	    REPORT_NAME ,
		report_type,
		from_date ,
		to_date ,
		CR_DATE,
		cr_user_id,
		CALL_SIGN )
		SELECT
		GT.FLT_DATE fltDate,
		GT.sch_DATE schDate,
		GT.AIRLINE airLine,
		GT.FLT_TYPE fltType,
		GT.FLT_KEY fltKey,
		GT.TYPE type,
		blk_lcl blk_lcl,
		blk_eph_knw blk_eph_knw,
		blk_eph_unk blk_eph_unk,
		blk_epa_knw blk_epa_knw,
		blk_epa_unk blk_epa_unk,
		blk_epd_knw blk_epd_knw,
		blk_epd_unk blk_epd_unk,
		blk_ts blk_ts,
		bup_lcl bup_lcl,
		bup_eph_knw bup_eph_knw,
		bup_eph_unk bup_eph_unk,
		bup_epa_knw bup_epa_knw,
		bup_epa_unk bup_epa_unk,
		bup_epd_knw bup_epd_knw,
		bup_epd_unk bup_epd_unk,		
		bup_ts bup_ts,
		blk_lcl_ofld blk_lcl_ofld,
		blk_ts_ofld blk_ts_ofld,
		bup_lcl_ofld bup_lcl_ofld,	
		bup_ts_ofld bup_ts_ofld,
		rebuild rebuild,
		eph_rebuild eph_rebuild,
		epa_rebuild epa_rebuild,
		epd_rebuild epd_rebuild,
		large_pvc large_pvc,
		small_pvc small_pvc,
		wrap wrap,
		tarmac_mail_ppk tarmac_mail_ppk,
		tarmac_mail_bulk tarmac_mail_bulk,
	    #reportName# ,
		#reportType# ,
		#fromDate# ,
		#toDate# ,
		SYSDATE,
		'JOB',
		CALL_SIGN callSign
 		FROM GT_AIRL_TONNAGE_REPT GT JOIN
	    FLT_OPR OPR ON GT.FLT_KEY=OPR.FLT_KEY
	    AND GT.SCH_DATE=OPR.SCH_DATE
 		WHERE AIRLINE = #airLine#
 		AND TRUNC(OPR.ACT_DATE) BETWEEN to_date(#fromDate#,'DDMONYY') and to_date(#toDate#,'DDMONYY')
	</insert>
	
	<delete id="sqldelete_Mail_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_AIRL_TONN_MAIL_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  AIRLINE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#					
	</delete>
	
	<insert id="sqlInsert_Daily_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	insert into REPT_AIRL_TONN_IMAGE(
	FLT_DATE ,
	sch_DATE ,
	AIRLINE ,
	FLT_TYPE ,
	FLT_KEY ,
	TYPE ,
	blk_lcl ,
	BLK_EPH_DHL ,
	BLK_EPH_OTH ,
	blk_epa ,
	blk_epd ,
	blk_ts ,
	nbk_ts ,
	NBK_TS_ULD ,
	NBK_TS_OFLD ,
	NBK_TS_OFLD_wop ,
	NBK_TS_ULD_OFLD ,
	NBK_TS_ULD_OFLD_wop ,
	bup_lcl ,
	BUP_EPH_DHL ,
	BUP_EPH_OTH ,
	bup_epa ,
	bup_epd ,
	bup_ts ,            
	blk_lcl_ofld ,
	blk_lcl_ofld_wop ,
	blk_ts_ofld ,
	blk_ts_ofld_wop ,
	bup_lcl_ofld ,  
	bup_lcl_ofld_wop ,      
	bup_ts_ofld ,
	bup_ts_ofld_wop ,
	rebuild ,
	eph_rebuild ,
	epa_rebuild ,
	epd_rebuild ,
	large_pvc ,
	small_pvc ,
	wrap ,
	wipp ,
	fcc  ,
	REPORT_NAME ,
	report_type,
	from_date ,
	to_date ,
	CR_DATE,
	cr_user_id,
	CALL_SIGN,
	CARGO_TYPE)
	
	SELECT distinct
	GT.FLT_DATE fltDate,
	GT.sch_DATE schDate,
	GT.AIRLINE airLine,
	GT.FLT_TYPE fltType,
	GT.FLT_KEY fltKey,
	GT.TYPE type,
	blk_lcl blk_lcl,
	BLK_EPH_DHL blk_eph_dhl,
	BLK_EPH_OTH blk_eph_oth,
	blk_epa blk_epa,
	blk_epd blk_epd,
	blk_ts blk_ts,
	nbk_ts nbk_ts,
	NBK_TS_ULD nbk_ts_uld,
	NBK_TS_OFLD nbk_ts_ofld_wp,
	NBK_TS_OFLD_wop nbk_ts_ofld_wop,
	NBK_TS_ULD_OFLD nbk_ts_uld_ofld_wp,
	NBK_TS_ULD_OFLD_wop nbk_ts_uld_ofld_wop,
	bup_lcl bup_lcl,
	BUP_EPH_DHL bup_eph_dhl,
	BUP_EPH_OTH bup_eph_oth,
	bup_epa bup_epa,
	bup_epd bup_epd,
	bup_ts bup_ts,            
	blk_lcl_ofld blk_lcl_ofld,
	blk_lcl_ofld_wop blk_lcl_ofld_wop,
	blk_ts_ofld blk_ts_ofld,
	blk_ts_ofld_wop blk_ts_ofld_wop,
	bup_lcl_ofld bup_lcl_ofld,  
	bup_lcl_ofld_wop bup_lcl_ofld_wop,      
	bup_ts_ofld bup_ts_ofld,
	bup_ts_ofld_wop bup_ts_ofld_wop,
	rebuild rebuild,
	eph_rebuild eph_rebuild,
	epa_rebuild epa_rebuild,
	epd_rebuild epd_rebuild,
	large_pvc large_pvc,
	small_pvc small_pvc,
	wrap wrap,
	wipp wipp,
	fcc fcc ,
	#reportName# ,
	#reportType# ,
	#fromDate# ,
	#toDate# ,
	SYSDATE,
	'JOB',
	GT.CALL_SIGN callSign,
	CARGO_TYPE 
	FROM GT_AIRL_TONNAGE_REPT GT JOIN
    FLT_OPR OPR ON GT.FLT_KEY=OPR.FLT_KEY
    AND GT.SCH_DATE=OPR.SCH_DATE 
	WHERE AIRLINE = #airLine#
	AND TRUNC(OPR.ACT_DATE) BETWEEN to_date(#fromDate#,'DDMONYY') and to_date(#toDate#,'DDMONYY')
	AND SEQ_NO = #seqStarts#
	</insert>


	<delete id="sqldelete_Daily_Tonnage_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_AIRL_TONN_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  AIRLINE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType# AND NVL(CARGO_TYPE,'ALL') = NVL(#tcSplCargoType#,'ALL')					
	</delete>
	
	<insert id="sqlInsert_serviceReport1" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	insert into REPT_AIRL_SERVICE_IMAGE(
	SRVCDATE,
	srvcDate1,
	CHRGTO,
	PARTYNAME,
	CARRCODE,
	SRVCNAME,
	UOM,
	AWBNO,
	HAWBNO,
	FLTKEY,
	REMARKS,
	QTY,
	VOIDUSERID,
	ORIGDEST,
	AIRLINE,
	SERVICE_REPORT_TYPE,
	REPORT_NAME,
	REPORT_TYPE,
	FROM_DATE,
	TO_DATE,
	CR_DATE,
	CR_USER_ID)
	SELECT srvcDate,
	srvcDate1,
	chrgTo,
	partyName,
	carrCode,
	srvcName,
	uom,
	awbNo,
	hawbNo,
	fltKey,
	remarks,
	qty,
	voidUserId,
	origDest,
	#airLine#,
	'ServiceReport1',
	#reportName# ,
	#reportType# ,
	#fromDate# ,
	#toDate# ,
	SYSDATE,
	'JOB' 
	FROM (SELECT TO_CHAR(RCRD.CR_DATE,'DDMONYY HH24:MI') srvcDate,
	  		 TO_CHAR(RCRD.CR_DATE,'DDMONYY') srvcDate1,
	MSTR.CHARGE_TO chrgTo ,
	(SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = RCRD.CUST_NO) partyName,
	(SELECT CARR_CODE FROM CUST_COMPANY WHERE CODE = RCRD.CUST_NO) carrCode,
	MSTR.SVC_NAME srvcName,
	MSTR.UOM uom,
	RCRD.AWB_NO awbNo,
	RCRD.HAWB_NO hawbNo,
	RCRD.FLT_KEY||DECODE(FLT_DATE,NULL,'','/'||TO_CHAR(FLT_DATE,'DDMONYY')) fltKey,
	RCRD.RMK remarks,
	RCRD.QTY qty,
	RCRD.VOID_USER_ID voidUserId,
	DECODE((SELECT ORIG||'/'||DEST FROM AWB WHERE AWB_NO = RCRD.AWB_NO AND AWB_DATE = RCRD.AWB_DATE),'/','',(SELECT ORIG||'/'||DEST FROM AWB WHERE AWB_NO = RCRD.AWB_NO AND AWB_DATE = RCRD.AWB_DATE)) origDest 
	FROM BILL_SVC_RECORD RCRD 
	JOIN BILL_SVC_MASTER MSTR ON RCRD.SVC_CODE = MSTR.SVC_CODE) T
	WHERE to_date(T.srvcDate1,'DDMONYY') BETWEEN #fromDate# AND #toDate#
	AND T.chrgTo = #chrgTo#
	AND T.voidUserId is null
	<isNotEmpty property="srvcName">
	AND T.srvcName = #srvcName#
	</isNotEmpty>  
	<isNotEmpty property="partyName">
	AND T.partyName = #partyName#
	</isNotEmpty>      
	<isNotEmpty property="airLine">
	AND T.carrCode  is not null AND NVL(T.carrCode,'*') = #airLine#
	</isNotEmpty>    
	<isEmpty property="airLine">
	<isNotEmpty property="loginCarrier">
	AND T.carrCode  is not null AND ( T.carrCode = #loginCarrier#  OR  T.carrCode IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE  = #loginCarrier#))          
	</isNotEmpty>
	</isEmpty>   
	</insert>


	<delete id="sqldelete_serviceReport1" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_AIRL_SERVICE_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  AIRLINE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#	
		and SERVICE_REPORT_TYPE='ServiceReport1'			
	</delete>
	
	<insert id="sqlInsert_serviceReport2" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	insert into REPT_AIRL_SERVICE_IMAGE(
	SRVCDATE,
	srvcDate1,
	CHRGTO,
	PARTYNAME,
	SRVCNAME,
	UOM,
	AWBNO,
	HAWBNO,
	FLTKEY,
	QTY,
	awbOrigDest,
	origDest,
	remarks,
	valYn,
	BSB_IND,
	AIRLINE,
	SERVICE_REPORT_TYPE,
	REPORT_NAME,
	REPORT_TYPE,
	FROM_DATE,
	TO_DATE,
	CR_DATE,
	CR_USER_ID)
	SELECT srvcDate,
	srvcDate1,
	chrgTo,
	partyName,
	srvcName,
	uom,
	awbNo,
	hawbNo,
	fltKey,
	qty,
	awbOrigDest,
	origDest,
	remarks,
	valYn,
	bsbInd,
	#airLine#,
	'ServiceReport2',
	#reportName# ,
	#reportType# ,
	#fromDate# ,
	#toDate# ,
	SYSDATE,
	'JOB' 
	FROM (SELECT 
            TO_CHAR(CST.LM_DATE,'DDMONYY HH24:MI') srvcDate,
             TO_CHAR(CST.LM_DATE,'DDMONYY') srvcDate1,
             'SHIPPER' chrgTo ,
             ECAR.SHIPPER_NAME partyName,
             'DUTIABLE COMMODITY BOND CHARGES' srvcName,
             'Shipment' uom,
             CST.AWB_NO awbNo,
             CST.HAWB_NO hawbNo,
             CST.FLT_KEY||DECODE(CST.FLT_DATE,NULL,'','/'||TO_CHAR(CST.FLT_DATE,'DDMONYY')) fltKey,
             to_char(1) qty,
             ECAR.ORIG||'/'||ECAR.DEST awbOrigDest,
             ECAR.ORIG||'/'||ECAR.DEST origDest,
             '' remarks,
             case when (select count(1) from cust_airl_spl_code where CARR_CODE = ECAR.CARR_CODE and spl_type = 'SPL_VAL' and 
                 SPL_CODE IN (NVL(ECAR.SPL_CODE1,'N'),NVL(ECAR.SPL_CODE2,'N'),NVL(ECAR.SPL_CODE3,'N'),NVL(ECAR.SPL_CODE4,'N'),NVL(ECAR.SPL_CODE5,'N'),NVL(ECAR.SPL_CODE6,'N'),
                 NVL(ECAR.SPL_CODE7,'N'),NVL(ECAR.SPL_CODE8,'N'),NVL(ECAR.SPL_CODE9,'N'))) > 0 then 'Y' else 'N' end valYn,
                 '' bsbInd
             FROM CST_DC_DTL CST
             JOIN AWB ECAR ON CST.AWB_NO = ECAR.AWB_NO AND CST.AWB_DATE = ECAR.AWB_DATE
             WHERE SHPM_TYPE = 'E'
  	UNION ALL   
  	SELECT to_char(OPR.sch_date,'DDMONYY') ||' '|| SUBSTR(TRIM(TO_CHAR(OPR.SCH_TIME,'0000')),1,2)
				  || NVL2(OPR.SCH_TIME, ':', '')
				  || SUBSTR(TRIM(TO_CHAR(OPR.SCH_TIME,'0000')),3,4) srvcDate,
	to_char(OPR.sch_date,'DDMONYY') srvcDate1,	  
   	'Airline' chrgTo,
   (select CODE_DESC FROM MAST_CARRIER WHERE CODE = OPR.CARR_CODE) partyName,
   	'Verification charges per HAWB for US port' srvcName,
    'HAWB' as uom,
    null as awbNo,
    null as hawbNo,
       T2.FLT_KEY||DECODE(T2.FLT_DATE,NULL,'','/'||TO_CHAR(T2.FLT_DATE,'DDMONYY')) fltKey,
    to_char(T2.cnt) qty,
    NULL awbOrigDest,
    NULL origDest,
    '' remarks,
     '' valYn,
     '' bsbInd
    FROM 
(SELECT T1.FLT_KEY , 	T1.FLT_DATE ,	 COUNT(1) cnt
  	 FROM 
  (select T.FLT_KEY , T.FLT_DATE , T.AWB_NO , T.AWB_DATE , T.HAWB_NO  from 
      (SELECT AWB.FLT_KEY FLT_KEY , AWB.FLT_DATE FLT_DATE,  AWB.AWB_NO AWB_NO, AWB.AWB_DATE AWB_DATE,HAWB.HAWB_NO HAWB_NO ,FLT.SCH_TIME FLT_TIME
          FROM EXP_PMANIFEST_ULD_AWB AWB JOIN
                              (SELECT FHL.AWB_NO AWB_NO , FHL.AWB_DATE AWB_DATE,FHL_HAWB.HAWB_NO HAWB_NO FROM EDI_FHL FHL JOIN EDI_FHL_HAWB FHL_HAWB ON FHL.TR_NO = FHL_HAWB.TR_NO)HAWB
           ON AWB.AWB_NO = HAWB.AWB_NO AND AWB.AWB_DATE = HAWB.AWB_DATE
           JOIN FLT_OPR FLT ON AWB.FLT_KEY = FLT.FLT_KEY AND AWB.FLT_DATE = FLT.SCH_DATE AND FLT.FLT_TYPE = 'D'
           WHERE FLT_DATE BETWEEN TO_DATE(#fromDate#,'DDMONYY') AND TO_DATE(#toDate#,'DDMONYY'))T
  	 where   NOT EXISTS ( SELECT NULL FROM EXP_PMANIFEST_ULD_AWB AWB
                          JOIN FLT_OPR FLT ON AWB.FLT_KEY = FLT.FLT_KEY AND AWB.FLT_DATE = FLT.SCH_DATE AND FLT.FLT_TYPE = 'D'
                          WHERE TO_DATE((TO_CHAR(FLT.SCH_DATE,'DDMONYY')||' '||TO_CHAR(FLT.SCH_TIME,'0000')),'DDMONYY HH24MI') &lt; TO_DATE((TO_CHAR(T.FLT_DATE,'DDMONYY')||' '||TO_CHAR(T.FLT_TIME,'0000')),'DDMONYY HH24MI')
                          AND AWB.AWB_NO = T.AWB_NO AND AWB.AWB_DATE = T.AWB_DATE)  
  	 group by T.FLT_KEY , T.FLT_DATE , T.AWB_NO , T.AWB_DATE , T.HAWB_NO) T1 group by T1.FLT_KEY, T1.FLT_DATE) T2
  	 JOIN FLT_OPR OPR  ON OPR.FLT_KEY = T2.FLT_KEY AND OPR.SCH_DATE = T2.FLT_DATE AND OPR.FLT_TYPE = 'D'
 	UNION ALL
       SELECT TO_CHAR(SHP.IMX_RQS_DATE,'DDMONYY HH24:MI') srvcDate,
      TO_CHAR(SHP.IMX_RQS_DATE,'DDMONYY') srvcDate1,
      'Agent' chrgTo,
      AWB.APPNTD_AGENT partyName,
      'IMX/Quick release services(provisonal)' srvcName,
      'kg'  uom,
      SHP.AWB_NO awbNo,
      null as hawbNo,
      SHP.FLT_KEY||''||DECODE(SHP.FLT_DATE,NULL,'','/'||TO_CHAR(SHP.FLT_DATE,'DDMONYY')) fltKey,
      decode(trunc(TRIM(to_char(AWB.AWB_WT,'999999999999999.99'))),0,0|| TRIM(to_char(AWB.AWB_WT,'999999999999999.99')), TRIM(to_char(AWB.AWB_WT,'999999999999999.99'))) qty,
      AWB.AWB_ORIGIN||'/'||AWB.AWB_DEST awbOrigDest,
      AWB.AWB_ORIGIN||'/'||AWB.AWB_DEST origDest,
      '' remarks,
       case when (select count(1) from cust_airl_spl_code where CARR_CODE = ECAR.CARR_CODE and spl_type = 'SPL_VAL' and 
                 SPL_CODE IN (NVL(ECAR.SPL_CODE1,'N'),NVL(ECAR.SPL_CODE2,'N'),NVL(ECAR.SPL_CODE3,'N'),NVL(ECAR.SPL_CODE4,'N'),NVL(ECAR.SPL_CODE5,'N'),NVL(ECAR.SPL_CODE6,'N'),
                 NVL(ECAR.SPL_CODE7,'N'),NVL(ECAR.SPL_CODE8,'N'),NVL(ECAR.SPL_CODE9,'N'))) > 0 then 'Y' else 'N' end valYn,
                 '' bsbInd
      FROM IMP_CAR_SHP SHP
      JOIN IMP_CAR_AWB AWB ON SHP.AWB_NO = AWB.AWB_NO AND SHP.AWB_DATE = AWB.AWB_DATE
      JOIN AWB ECAR  ON AWB.AWB_NO = ECAR.AWB_NO AND AWB.AWB_DATE = ECAR.AWB_DATE
      WHERE NVL(SHP.IMX_RQS,'N') = 'Y' AND SHP.IMX_RQS_DATE is not null
    UNION ALL
      SELECT TO_CHAR(TRC.CR_DATE,'DDMONYY HH24:MI') srvcDate,
      TO_CHAR(TRC.CR_DATE,'DDMONYY') srvcDate1,
      'Agent' chrgTo,
      TRC.AGENT_NAME partyName,
      (select CODE_DESC from Mast_code_dtl where code_type = 'ADM_REC_REQUEST' and code = TRC.REQ_TYPE) srvcName,
      'Unit'  uom,
      trc.AWB_NO awbNo,
      null as hawbNo,
      '' fltKey,
      to_char(1) qty,
      TRC.ORIG||'/'||TRC.DEST awbOrigDest,
      TRC.ORIG||'/'||TRC.DEST origDest,
      REMARKS remarks,
      case when (select count(1) from cust_airl_spl_code where CARR_CODE = ECAR.CARR_CODE and spl_type = 'SPL_VAL' and 
                 SPL_CODE IN (NVL(ECAR.SPL_CODE1,'N'),NVL(ECAR.SPL_CODE2,'N'),NVL(ECAR.SPL_CODE3,'N'),NVL(ECAR.SPL_CODE4,'N'),NVL(ECAR.SPL_CODE5,'N'),NVL(ECAR.SPL_CODE6,'N'),
                 NVL(ECAR.SPL_CODE7,'N'),NVL(ECAR.SPL_CODE8,'N'),NVL(ECAR.SPL_CODE9,'N'))) > 0 then 'Y' else 'N' end valYn,
                 '' bsbInd
      FROM TRC_ADM_REQ TRC
      left join AWB ECAR on NVL(TRC.AWB_NO,'000') = ECAR.AWB_NO AND NVL(TRC.AWB_DATE,'12AUG1988') = ECAR.AWB_DATE
      WHERE UPPER(REQ_STS) = 'CLOSE'
    UNION ALL
      SELECT TO_CHAR(CHK.LM_DATE,'DDMONYY HH24:MI') srvcDate,
      TO_CHAR(CHK.LM_DATE,'DDMONYY') srvcDate1,
      'Airline' chrgTo ,
      ECAR.CARR_CODE partyName,
      'Aviation security fee (upon cargo acceptance)' srvcName,
      'Kg' uom,
      CHK.AWB_NO awbNo,
      '',
      '' fltKey,
      decode(trunc(TRIM(to_char(SC_wt,'999999999999999.99'))),0,0|| TRIM(to_char(SC_wt,'999999999999999.99')), TRIM(to_char(SC_wt,'999999999999999.99'))) qty,
      ECAR.ORIG||'/'||ECAR.DEST  awbOrigDest,
      ECAR.ORIG||'/'||ECAR.DEST origDest,
      'RCL: '||CHK.RCL_NO remarks,
      case when (select count(1) from cust_airl_spl_code where CARR_CODE = ECAR.CARR_CODE and spl_type = 'SPL_VAL' and 
                 SPL_CODE IN (NVL(ECAR.SPL_CODE1,'N'),NVL(ECAR.SPL_CODE2,'N'),NVL(ECAR.SPL_CODE3,'N'),NVL(ECAR.SPL_CODE4,'N'),NVL(ECAR.SPL_CODE5,'N'),NVL(ECAR.SPL_CODE6,'N'),
                 NVL(ECAR.SPL_CODE7,'N'),NVL(ECAR.SPL_CODE8,'N'),NVL(ECAR.SPL_CODE9,'N'))) > 0 then 'Y' else 'N' end valYn,
                 '' bsbInd
      FROM EXP_RCL_HD HD,
      EXP_RCL_SEC_CHK_DTL CHK
      LEFT JOIN AWB ECAR ON CHK.AWB_NO = ECAR.AWB_NO AND CHK.AWB_DATE = ECAR.AWB_DATE
      WHERE SC_PAID_BY = 'AIRLINE'
      AND CHK.RCL_NO=HD.RCL_NO
      AND HD.STATUS!='V'
    UNION ALL
    SELECT TO_CHAR(CHK.LM_DATE,'DDMONYY HH24:MI') srvcDate,
      TO_CHAR(CHK.LM_DATE,'DDMONYY') srvcDate1,
      'Airline' chrgTo ,      
      ECAR.CARR_CODE partyName,
      'Aviation security fee (after cargo acceptance)' srvcName,
      'Kg' uom,
      CHK.AWB_NO awbNo,
      '',
      '' fltKey,
      decode(trunc(TRIM(to_char(CHK.WT,'999999999999999.99'))),0,0|| TRIM(to_char(CHK.WT,'999999999999999.99')), TRIM(to_char(CHK.WT,'999999999999999.99'))) qty,
      ECAR.ORIG||'/'||ECAR.DEST  awbOrigDest,
      ECAR.ORIG||'/'||ECAR.DEST origDest,
      'Job Order: '||JO_NO remarks,
      case when (select count(1) from cust_airl_spl_code where CARR_CODE = ECAR.CARR_CODE and spl_type = 'SPL_VAL' and 
                 SPL_CODE IN (NVL(ECAR.SPL_CODE1,'N'),NVL(ECAR.SPL_CODE2,'N'),NVL(ECAR.SPL_CODE3,'N'),NVL(ECAR.SPL_CODE4,'N'),NVL(ECAR.SPL_CODE5,'N'),NVL(ECAR.SPL_CODE6,'N'),
                 NVL(ECAR.SPL_CODE7,'N'),NVL(ECAR.SPL_CODE8,'N'),NVL(ECAR.SPL_CODE9,'N'))) > 0 then 'Y' else 'N' end valYn,
                 NVL((select bsb_ind from exp_sec_chk_jo where JO_NO=CHK.JO_NO AND STATUS = 'Completed' AND ECAR.awb_type='E'),'N') bsbInd
      FROM exp_sec_chk_jo CHK
      LEFT JOIN AWB ECAR ON CHK.AWB_NO = ECAR.AWB_NO AND CHK.AWB_DATE = ECAR.AWB_DATE
      WHERE CHARGE_TO = 'AIRLINE' and CHK.status != 'VOID'      
      ) SRVC_RCRD
        WHERE to_date(SRVC_RCRD.srvcDate1,'DDMONYY') BETWEEN #fromDate# AND #toDate#
      AND upper(SRVC_RCRD.chrgTo) = upper(#chrgTo#)
			<isNotEmpty property="srvcName">
			AND upper(SRVC_RCRD.srvcName) = upper(#srvcName#)
			</isNotEmpty>  
			<isNotEmpty property="partyName">
			AND upper(SRVC_RCRD.partyName) = upper(#partyName#)
			</isNotEmpty>   
			<isNotEmpty property="airLine">
        	AND ( ((select CODE FROM MAST_CARRIER WHERE CODE_DESC = NVL(SRVC_RCRD.partyName,'*')) = upper(#airLine#)) OR (NVL(SRVC_RCRD.partyName,'*') = upper(#airLine#)) )
			</isNotEmpty>  
			<isEmpty property="airLine">
	    		<isNotEmpty property="loginCarrier">
	    		    AND ( 
	    		      ( ( (select CODE FROM MAST_CARRIER WHERE CODE_DESC = NVL(SRVC_RCRD.partyName,'*')) = upper(#loginCarrier#) ) OR (NVL(SRVC_RCRD.partyName,'*') = upper(#loginCarrier#)) )
	    		      OR ( ( select CODE FROM MAST_CARRIER WHERE CODE_DESC = NVL(SRVC_RCRD.partyName,'*') )  IN ( SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE  = #loginCarrier# ) )
	    			  OR ( NVL(SRVC_RCRD.partyName,'*')  IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE  = #loginCarrier#) )      
	    			 )  
       			</isNotEmpty>
			</isEmpty>   
	</insert>


	<delete id="sqldelete_serviceReport2" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_AIRL_SERVICE_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  AIRLINE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#	
		and SERVICE_REPORT_TYPE='ServiceReport2'			
	</delete>
	
	
	
	<delete id="sqlDeleteDCReportLog" parameterClass="java.util.HashMap">	
		DELETE FROM REPORT_EXECUTION_LOG
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#
		AND nvl(carrier_code,'X') = nvl(#airline#,'X')	
	</delete>

	<insert id="sqlInsertReportLog" parameterClass="java.util.HashMap">
		INSERT INTO REPORT_EXECUTION_LOG(
			REPORT_NAME,
			REPORT_TYPE,
			FROM_DATE,
			TO_DATE,
			REPORT_PREFIX,
			REPORT_EXECUTION_TIME,
			REPORT_PATH,
			CR_DATE,
			CR_USER_ID,
			LM_DATE,
			LM_USER_ID,
			JOB_NAME,
			JOB_DATE,
			category,
			SUB_CATEGORY,
			carrier_code,
			report_id,
			REPORT_FILE_NAME,
			AWB_PREFIX,
			CARGO_TYPE  
		)VALUES(
			#reportName#,
			#reportType#,
			#fromDate#,
			#toDate#,
			#reportPrefix#,
			SYSDATE,
			#reportPath#,
			SYSDATE,
			#userName#,
			SYSDATE,
			#userName#,
			#jobName#,
			#jobDate#,
			#category#,
			#subCategory#,
			#airline#,
			#reportId#,
			#fileName#,		
			#awbPrefix#,
			#cargoType#
		)
	</insert>

	<select id="sqlQueryDateRange"  parameterClass="map" resultClass="java.util.HashMap">
		select TO_CHAR(to_date(#batchDate#,'DDMONYY')+to_number(from_date),'DDMONYY') fromDate,
		TO_CHAR(to_date(#batchDate#,'DDMONYY')+to_number(to_date),'DDMONYY') toDate
		FROM report_config_master
		where job_name=#batchName#
		<isNotEmpty property="reportType">
				AND	REPORT_TYPE=#reportType#
		</isNotEmpty>
		<isNotEmpty property="reportName">
				and report_name=#reportName# 
		</isNotEmpty>
	</select>
	
        <select id="sqlC2KJobGetMaxTxMgrTimeinSecs" parameterClass="java.lang.String"  resultClass="java.lang.String">
			select rule_value from cmsrules where rule_code = 'C2K_JOB_TX_TIME_IN_SECS'
	</select>
      <select id="sqlGetCategorySub" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" >
	SELECT distinct CATEGORY category,SUB_CATEGORY subCategory FROM REPORT_CONFIG_MASTER where 1=1
		<isNotEmpty property="reportType">
				AND	REPORT_TYPE=#reportType#
		</isNotEmpty>
		<isNotEmpty property="reportName">
				and report_name=#reportName# 
		</isNotEmpty>
	</select>

	<select id="sqlQueryReportNameListGenerate"  parameterClass="cargo.cms.common.utils.bo.ReportGenerationBO" resultClass="cargo.cms.common.utils.bo.ReportGenerationBO" >
		Select distinct report_name reportName,report_name_desc reportNameDesc from report_config_master a where 1=1
		<isNotEmpty property="category">
				and category=#category#
		</isNotEmpty>
		<isNotEmpty property="subCategory">
				and sub_category=#subCategory#
		</isNotEmpty>
		<isNotEmpty property="reportType">
				and report_type=#reportType#
		</isNotEmpty>
		order by report_name
	</select>
	<select id="sqlQueryCategoryList"  parameterClass="cargo.cms.common.utils.bo.BatchJobBO" resultClass="cargo.cms.common.utils.bo.BatchJobBO" >
		Select DISTINCT SUB_CATEGORY subCategory,SUB_CATEGORY subCategoryDesc FROM report_config_master where 1=1
		<isNotEmpty property="category">
				and category=#category#
		</isNotEmpty>
		order by SUB_CATEGORY
	</select>
	<select id="sqlQueryCategoryListGenerate"  parameterClass="cargo.cms.common.utils.bo.ReportGenerationBO" resultClass="cargo.cms.common.utils.bo.ReportGenerationBO" >
		Select DISTINCT A.SUB_CATEGORY subCategory,A.SUB_CATEGORY subCategoryDesc FROM report_config_master A,
		sec_role_sub_function sf
		join sec_user_role ur on ur.role_name = sf.role_code
		where ur.user_id = #userName# AND
		A.REPORT_ID_ACC_CTRL=sf.SUB_FUNCTION_CODE AND sf.enable_yn='Y' 
		<isNotEmpty property="category">
				and category=#category#
		</isNotEmpty>
                and A.SUB_CATEGORY is not null
		order by A.SUB_CATEGORY
	</select>

	<select id="sqlQuerySubCategoryList"  parameterClass="cargo.cms.common.utils.bo.BatchJobBO" resultClass="cargo.cms.common.utils.bo.BatchJobBO" >
		SELECT DISTINCT report_type reportType,report_type reportTypeDesc FROM report_config_master where 1=1
		<isNotEmpty property="category">
				and category=#category#
		</isNotEmpty>
		<isNotEmpty property="subCategory">
				and sub_category=#subCategory#
		</isNotEmpty>
		order by report_type
	</select>
	<select id="sqlQuerySubCategoryListGenerate"  parameterClass="cargo.cms.common.utils.bo.ReportGenerationBO" resultClass="cargo.cms.common.utils.bo.ReportGenerationBO" >
		SELECT DISTINCT A.report_type reportType,A.report_type reportTypeDesc FROM report_config_master A,
		sec_role_sub_function sf
		join sec_user_role ur on ur.role_name = sf.role_code
		where ur.user_id = #userName# AND
		A.REPORT_ID_ACC_CTRL=sf.SUB_FUNCTION_CODE AND sf.enable_yn='Y' 
		<isNotEmpty property="category">
				and category=#category#
		</isNotEmpty>
		<isNotEmpty property="subCategory">
				and sub_category=#subCategory#
		</isNotEmpty>
		order by report_type
	</select>
        <select id="checkFlightRHOisRHS" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		select count(1) from flt_opr a, cust_company b
  			where a.rho_id=b.code  and b.rho_yn='Y'  and a.rho_id is not null and a.flt_key=#FLT_KEY# and a.sch_date= to_date(#FLT_DATE#,'DDMONYY') 
  			and a.flt_type = 'D' and B.CODE_DESC = 'HAS'
	</select>
	

<select id="checkFlightRHOisForHAS" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		select count(1) from flt_opr a, cust_company b
  			where a.rho_id=b.code  and b.rho_yn='Y'  
  			and a.rho_id is not null and a.flt_key=#FLT_KEY# and a.sch_date= to_date(#FLT_DATE#,'DDMONYY') 
  			and a.flt_type = #FLT_TYPE# and B.CODE_DESC = 'HAS'
	</select>
		
	<select id="getPharmaURL" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
	select rule_value from cmsrules where rule_code='PHARMA_URL'
	</select>

<select id="getRHSMessageURL" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
		select rule_value from cmsrules where rule_code='PHARMA_URL'
	</select>

	<select id="sqlQueryMonthList"  parameterClass="cargo.cms.common.utils.bo.ReportGenerationBO" resultClass="cargo.cms.common.utils.bo.ReportGenerationBO" >
		
			select distinct to_char(from_date,'MONYYYY') monthValue,to_char(from_date,'MONYYYY') monthValue
			 from REPORT_EXECUTION_LOG where report_name=#reportName#
			<isNotEmpty property="category">
					and category=#category#
			</isNotEmpty>
			<isNotEmpty property="subCategory">
					and sub_category=#subCategory#
			</isNotEmpty>
			<isNotEmpty property="reportType">
					and report_type=#reportType#
			</isNotEmpty> 
			order by to_date(to_char(from_date,'MONYYYY'),'MONYYYY')
	</select>
<!-- 	pushpa -->
	<select id="checkheightforpallet" parameterClass="map" resultClass="java.lang.String">
		select count(*) from mast_contr_ind where code=#contrCode#  and #height#  between min_height and max_height
	</select>

	<parameterMap id="getPARAMMap" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
		<parameter property="P_FLTKEY" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_FLTDATE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_ULDKEY" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>		
	</parameterMap>	
	<procedure id="chkShipmentOffloadedForBULK" parameterMap="getPARAMMap" >
		{ ? = call FUN_CHK_OFFLOAD_BULK(?, ?, ?)  }
	</procedure>


<select id="searchOBCLDFlightDetails" parameterClass="cargo.cms.export.bo.OBCFinalLoadBO" resultClass="cargo.cms.export.bo.OBCFinalLoadBO">
		SELECT FLT_KEY                                      AS fltKey,
		  TO_CHAR(SCH_DATE,'DDMONYY')                       AS depDate,
		  PKG_COMMON.GET_FLT_ETA(FLT_KEY,SCH_DATE,'D','DD') AS etd,
		  TO_CHAR(OBC_FINAL_SEND_DATE,'DDMONYY HH24:MI')    AS sendTime
		FROM FLT_OPR_EVENTS
		WHERE FLT_KEY=#fltKey#
		AND SCH_DATE =#depDate#
		AND FLT_TYPE ='D'
</select>

<select id="OBCFinalLoadSearch" parameterClass="cargo.cms.export.bo.OBCFinalLoadBO" resultClass="cargo.cms.export.bo.OBCFinalLoadBO">
SELECT A.TR_NO AS trNo,
	   A.FLT_KEY AS fltKey,
       TO_CHAR(A.FLT_DATE,'DDMONYY') AS depDate,
       A.UNLDG_PT AS unldgPt,
       A.ULD_KEY AS uldKey,
       A.CONTR_CODE AS contrCode,
       A.PCS AS pieces,
       A.TARE_WT AS tareWeight,
       A.NET_WT AS netWeight,
       A.GROSS_WT AS grossWeight,
       A.REMARKS AS remarks,
       CASE WHEN (select count(1) from EXP_FLT_ULD WHERE FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE and ULD_KEY = A.ULD_KEY and NVL(OBC_LOAD,'N') = 'Y') > 0 THEN 'Y'
       		ELSE 'N' END  AS dlsInd,       
       PKG_COMMON.GET_FLT_ETA(A.FLT_KEY,A.FLT_DATE,'D','DD') AS etd,
       (select TO_CHAR(OBC_FINAL_SEND_DATE,'DDMONYY HH24:MI') from flt_opr_events WHERE FLT_KEY=A.FLT_KEY AND SCH_DATE=A.FLT_DATE AND FLT_TYPE='D') AS sendTime
FROM   EXP_OBC_LOAD A WHERE FLT_KEY=#fltKey#  AND FLT_DATE=#depDate# 
</select>

<insert id="SAVE_OBC_DATA" parameterClass="cargo.cms.export.bo.OBCFinalLoadBO" >
	INSERT INTO EXP_OBC_LOAD (TR_NO ,
	   FLT_KEY, FLT_DATE, ULD_KEY, 
	   UNLDG_PT , CONTR_CODE, PCS, 
	   GROSS_WT, TARE_WT, NET_WT, 
	   REMARKS, CR_USER_ID, CR_DATE, 
	   LM_USER_ID, LM_DATE) 
	VALUES (OBC_LOAD_SEQ.nextval,#fltKey#,#depDate#,#uldKey#,
		#unldgPt#,#contrCode# ,#pieces#,
		#grossWeight#,#tareWeight# ,#netWeight# ,
		#remarks#,#userID# , SYSDATE,
		#userID#, 
		SYSDATE)
	</insert>

	<select id="chkULDCheckedINTOImportFlt" parameterClass="java.lang.String" resultClass="java.lang.Integer">	
		select count(1) from uld_inventory where uld_key = #uldKey#  and flt_type = 'I' and imp_flt_key is not null and imp_flt_date is not null
	</select>	

	<select id="sqlQueryMonthListOnload"  parameterClass="cargo.cms.common.utils.bo.ReportGenerationBO" resultClass="cargo.cms.common.utils.bo.ReportGenerationBO" >
		SELECT MONTHS monthValue,MONTHS monthValue
		FROM
		(
		SELECT upper(TO_CHAR(SYSDATE,'MONYYYY'))
		 AS MONTHS
		FROM DUAL
		UNION ALL
		SELECT upper(TO_CHAR(ADD_MONTHS(SYSDATE , - (ROWNUM)),'MONYYYY')) AS MONTHS
		FROM DUAL
		CONNECT BY ROWNUM &lt;= 12
		)
		ORDER BY to_date(MONTHS,'MONYYYY')
	</select>

        <delete id="deleteFLTULDOBCLOADINFO" parameterClass="cargo.cms.export.bo.OBCFinalLoadBO">
		DELETE FROM exp_flt_uld where source = 'DLS-L' and NVL(obc_load,'N') = 'Y' and FLT_KEY=#fltKey# AND FLT_DATE=#depDate# 
	</delete>
	
	<delete id="DEL_OBC_DATA" parameterClass="cargo.cms.export.bo.OBCFinalLoadBO">
	delete from EXP_OBC_LOAD WHERE FLT_KEY=#fltKey# AND FLT_DATE=#depDate#
	</delete>
	
	<delete id="DEL_OBC_DATA_TR_NO" parameterClass="cargo.cms.export.bo.OBCFinalLoadBO">
	delete from EXP_OBC_LOAD WHERE TR_NO = #trNo#
	</delete>
	<select id="getOBCFinalEmailList" parameterClass="java.lang.String"	resultClass="java.lang.String">
		SELECT email1 ||','|| email2 ||','|| email3 ||','|| email4 ||','|| email5  FROM CUST_CONTACT WHERE contact_type ='OBC' AND CUST_NO = (select CODE from CUST_COMPANY WHERE carr_code = #fltPrx# AND ROWNUM =1)
	</select>

<update id="UPDATE_OBC_SEND_TIME" parameterClass="cargo.cms.export.bo.OBCFinalLoadBO">
		update FLT_OPR_EVENTS set OBC_FINAL_SEND_DATE= sysdate, OBC_FINAL_SEND_USER = #userID# , LM_DATE= sysdate, LM_USER_ID = #userID# , TR_TYPE = 'OBCLD' 
			where flt_key=#fltKey# and SCH_DATE=#depDate# AND FLT_TYPE='D'
	</update>

	<insert id="logFlightMovementHD" parameterClass="cargo.cms.export.bo.FlightCustomBO">
		Insert into HIS_FLT_EVNT (FLT_KEY,FLT_DATE,FLT_TYPE,COD_TRA_SEQ_NUM,COD_HIS_TYP,COD_FUNC,MODULE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TR_NO) 
		values (#fltKey#,#fltDate#,'D',#codTRASEQNUM#,'E','FLTCO','W',#userID#,SYSDATE,#userID#,SYSDATE, (SELECT TR_NO FROM FLT_OPR_EVENTS WHERE FLT_KEY = #fltKey# and FLT_TYPE = 'D' and SCH_DATE = #fltDate#))
	</insert>	
	
	<insert id="logFlightMovementDTL" parameterClass="cargo.cms.export.bo.FlightCustomBO">
		Insert into HIS_FLT_EVNT_DTL (FLT_KEY,FLT_DATE,FLT_TYPE,COD_TRA_SEQ_NUM,COD_SEQ_NUM,COD_ACT,COD_HIS_SEQ_NUM,DES_HIS_DTS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TR_NO)
		values (#fltKey#,#fltDate#,'D',#codTRASEQNUM#,SQ_FLT_OPR_EVENTS_HIS.NEXTVAL,'U',217,#fltMovementMsg#,#userID#,SYSDATE,#userID#,SYSDATE,(SELECT TR_NO FROM FLT_OPR_EVENTS WHERE FLT_KEY = #fltKey# and FLT_TYPE = 'D' and SCH_DATE = #fltDate#))
	</insert>	

<select id="sqlInitCategoryList"  parameterClass="cargo.cms.common.utils.bo.ReportGenerationBO" resultClass="cargo.cms.common.utils.bo.ReportGenerationBO" >
		Select DISTINCT A.CATEGORY category,A.CATEGORY categoryDesc 
		FROM report_config_master A,
				sec_role_sub_function sf
				join sec_user_role ur on ur.role_name = sf.role_code
				where ur.user_id = #userName# AND
				A.REPORT_ID_ACC_CTRL=sf.SUB_FUNCTION_CODE AND sf.enable_yn='Y' 
		order by A.CATEGORY
	</select>
<update id="upadteuldCloseToExpPmanULD" parameterClass="map">
UPDATE EXP_PMANIFEST_ULD SET ULD_CLOSE='N',ULD_CLOSE_USER_ID='',ULD_CLOSE_DATE='',TR_TYPE_EVT = 'CPBUS', LM_USER_ID=#user#, LM_DATE=sysdate WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldKey#
</update>

<select id="sqlCheckFlightIsRHO" parameterClass="map"  resultClass="java.lang.Integer">
                  select count(1) from flt_opr a, cust_company b
  where a.rho_id=b.code  and b.rho_yn='Y'  and b.code=#custCode# and a.flt_key=#flightKey# and a.sch_date=#fltDate#
</select>

	<select id="getULDlocationFromInv" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT loc_code locCode FROM ULD_INVENTORY WHERE ULD_KEY = #uldKey# 
	</select>

<select id="checkAirlineCarrierisGroupcarrier" parameterClass="java.lang.String" resultClass="java.lang.Integer" >
		select COUNT(1) from mast_carr_grp where grp_carr_code = #airLineCarrier#
	</select>
	<select id="checkCheckinOffload" parameterClass="map" resultClass="java.lang.String">		
		SELECT COUNT(1) FROM EXP_OFFLOAD_ULD WHERE FLT_KEY=#flightKey# AND nvl(flt_Date,'01JAN00') = to_date(#flightDate#,'DDMONYY') AND ULD_BT_NO=#uldKey# AND CHECKED_IN_FLAG='Y'  
	</select>
		
       <select id="getChkCarrierCovesionIND" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from mast_carrier where code = #carrCode# and NVL(ULD_SFX,'N') = 'Y'
	</select>
	
	<select id="getConfiguredULDSuffix" parameterClass="java.lang.String" resultClass="java.lang.String">
		select SUFFIX_CONVERTED from MAST_ULD_SFX_CONVERSION where ULD_SUFFIX = #uldSuffix# and rownum = 1
	</select>

<select id="dataCheckingRuleOne" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	 <![CDATA[	
		select 'RULE 1' as rule, 'AWB inventory wt should not be negative value'  as ruleDesc,AWB_NO AS awbNumber, TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate, LOCN_WT AS locWt, 
				( 'AWB: ' || AWB_NO || ' AWB DATE: ' || TO_CHAR(AWB_DATE,'DDMONYY') || ' INV WT: ' || LOCN_WT ) AS remarks, 'AWB_INVENTORY' AS tabName 
				from awb_inventory inv where locn_wt < 0
				AND EXISTS (select null from AWB where AWB_NO = inv.AWB_NO AND AWB_DATE = inv.AWB_DATE AND AWB_CLOSED_YN = 'N')	
	 ]]> 
	</select>	
	<select id="dataCheckingRuleTwo" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[	 
		SELECT 'RULE 2' as rule, 'Decimal point of AWB inventory wt should not be greater than 1'  as ruleDesc,AWB_NO AS awbNumber, TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate, LOCN_WT AS locWt,
		( 'AWB: ' || AWB_NO || ' AWB DATE: ' || TO_CHAR(AWB_DATE,'DDMONYY') || ' INV WT: ' || LOCN_WT ) AS remarks, 'AWB_INVENTORY' AS tabName 
		  FROM awb_inventory inv  WHERE locn_wt != round(locn_wt,1) AND EXISTS (select null from AWB where AWB_NO = inv.AWB_NO AND AWB_DATE = inv.AWB_DATE AND AWB_CLOSED_YN = 'N')
	 ]]> 
	</select>
	
	<select id="dataCheckingRuleThree" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[	 
		
	 ]]> 
	</select>
	
	<select id="dataCheckingRuleFour" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[	 
		SELECT 'RULE 4' as rule, 'ULD inventory and location code mismatch' as ruleDesc,uld_key as uldKey, loc_code as locCode, owned_inv ownedInv, empty_flg as emptyInd, 
			( 'ULD: ' || uld_key || ' LOC_CODE: ' || LOC_CODE || ' OWNED : ' || OWNED_INV || ' EMPTY : ' || empty_flg || ' LMDATE : ' || to_char(lm_date,'DDMONYY')) AS remarks, 'ULD_INVENTORY' AS tabName 
		FROM uld_inventory where (LOC_CODE is not null and OWNED_INV = 'N') OR (LOC_CODE is null and OWNED_INV = 'Y')
	 ]]> 
	</select>
	
<select id="dataCheckingRuleFive" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[	 
		SELECT 'RULE 5' as rule, 'CIR pc/wt should be equal to the manifest pc/wt - breakdown pc/wt for Shipment' as ruleDesc,shp.AWB_NO AS awbNumber, TO_CHAR(shp.AWB_DATE,'DDMONYY') AS awbDate,
			shp.FLT_KEY as fltKey , TO_CHAR(shp.FLT_DATE,'DDMONYY') AS fltDate ,CIR_PCS as cirPcs,CIR_WT as cirWt,manifest_pcs as manfPcs,manifest_WT as manfWt,(recd_PCS +  NVL(ddt.tt_pcs,0)) as recdPcs,(recd_WT +  NVL(ddt.tt_wt,0))  as recdWt,
			( 'AWB: ' || shp.AWB_NO || ' AWB DATE: ' || TO_CHAR(shp.AWB_DATE,'DDMONYY') || ' FLT: ' || shp.FLT_KEY || ' FLT DATE: ' || TO_CHAR(shp.FLT_DATE,'DDMONYY') ||
			  ' CIR PC/WT: ' || CIR_PCS || '/' || CIR_WT || ' MANF PC/WT: ' || manifest_pcs || '/' || manifest_wt || ' RECD PC/WT: ' || (recd_PCS +  NVL(ddt.tt_pcs,0)) || '/' || (recd_WT +  NVL(ddt.tt_wt,0))) AS remarks, 'IMP_CAR_SHP' AS tabName 

			FROM imp_car_shp shp
      join flt_opr_events opr on opr.flt_key = shp.flt_key and opr.sch_date = shp.flt_date and  opr.flt_type = 'A'
      LEFT JOIN
  		(SELECT NVL(SUM(actual_pcs),0) tt_pcs , NVL(SUM (actual_Wt),0) tt_wt, flt_key, flt_date, awb_NO , awb_date
        FROM v_ddt_dtl  WHERE (shp_trf_type = 'TT' OR trf_type = 'IF')
        GROUP BY flt_key,flt_date, awb_NO, awb_date) ddt ON shp.AWB_NO = ddt.AWB_NO AND shp.AWB_DATE = ddt.AWB_DATE
      AND shp.FLT_KEY = ddt.FLT_KEY AND shp.FLT_DATE = ddt.FLT_DATE 
      where  ( ( nvl(recd_pcs,0) + NVL(ddt.tt_pcs,0) ) - nvl(manifest_pcs,0) ) != (DECODE(shp.cir_pcs_type,'SL', -1,'SP', 1, 0) * NVL(shp.CIR_PCS,0) ) 
      AND    ( ( nvl(recd_wt,0) + NVL(ddt.tt_wt,0) ) - nvl(manifest_wt,0) )  != (DECODE(shp.cir_wt_type,'SL', -1,'SP', 1, 0) * NVL(shp.CIR_WT,0) )
      AND NVL(opr.flt_cls_yn,'N') = 'Y'  AND shp.cir_proc_user is not null
      order by shp.cr_date desc
	 ]]> 
	</select>
		
<select id="dataCheckingRuleSix" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[	 
		SELECT 'RULE 6' as rule, ' premanifest pc/wt should not be less than buildup pc/wt for the Shipment'  as ruleDesc,
		A.awb_no as awbNumber,   TO_CHAR( A.awb_date,'DDMONYY') AS awbDate ,    A.flt_key as fltKey ,   TO_CHAR(  A.flt_date,'DDMONYY') AS fltDate,   
		A.pmanPcs as pmanPcs,    A.pmanWt as pmanWt,    B.buPcs as buPcs,    B.buWt as buWt,
		( 'AWB: ' || A.AWB_NO || ' AWB DATE: ' || TO_CHAR(A.AWB_DATE,'DDMONYY') || ' FLT: ' || A.FLT_KEY || ' FLT DATE: ' || TO_CHAR(A.FLT_DATE,'DDMONYY') ||
		  ' PMAN PC/WT: ' || A.pmanPcs || '/' || A.pmanWt || ' BULD PC/WT: ' || B.buPcs || '/' ||  B.buWt  ) AS remarks, 'EXP_PMANIFEST_AWB' AS tabName 
		FROM (
		  (SELECT awb_no,    awb_date,    flt_key,   flt_date,    SUM(pman_pcs) AS pmanPcs,    SUM(pman_wt)  AS pmanWt
		  FROM exp_pmanifest_awb
		  GROUP BY awb_no,    awb_date,    flt_key,    flt_date  ) A
		LEFT JOIN
		  (SELECT b.awb_no,    b.awb_date,    b.flt_key,    b.flt_date,    SUM(b.assigned_pcs) AS buPcs,    SUM(b.assigned_wt)  AS buWt
		  FROM exp_pmanifest_uld a
		  JOIN exp_pmanifest_uld_awb b  ON a.uld_bt_no = b.uld_bt_no  AND a.flt_key  = b.flt_key  AND a.flt_date = b.flt_date
		  GROUP BY b.awb_no,b.awb_date,b.flt_key,b.flt_date ) B ON B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND B.FLT_KEY = A.FLT_KEY AND B.FLT_DATE = A.FLT_DATE
		) WHERE ( ( NVL(pmanPcs,0) < NVL(buPcs,0) ) OR (NVL(pmanWt,0) < NVL(buWt,0)) )
		AND EXISTS (select null from AWB where AWB_NO = A.awb_no AND AWB_DATE =A.awb_date AND AWB_CLOSED_YN = 'N')
	 ]]> 
	</select>
	
	<select id="dataCheckingRuleSeven" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[
		select 'RULE 7' as rule, 'Release pc/wt of AWB should not have value for import shipment with SRF Posted OR with OUT SRF' as ruleDesc,  shp.awb_no , shp.awb_date,
							( 'AWB: ' || shp.awb_no || ' AWB DATE: ' || TO_CHAR(shp.awb_date,'DDMONYY') || ' Loc PC/WT: ' || inv.locPcs || '/' || inv.locWt || ' Recd PC/WT: ' 
							  || shp.rcdPcs || '/' || shp.rcdWt || ' Dlv PC/WT: '  || dlvPcs || '/' || dlvWt ) remarks, 
							  'IMP_CAR_SHP' AS tabName 
							from  (
							select awb_no, awb_date, SUM(RECD_PCS) as rcdPcs, SUM(RECD_WT) as rcdWt from imp_car_shp  group by awb_no , awb_date ) shp
							left join (select awb_no as awbNum, awb_date as awbDate, SUM(LOCN_PCS) as locPcs , SUM(LOCN_WT) as locWt from awb_inventory  group by awb_no , awb_date)
                        inv on inv.awbNum  = shp.awb_no and inv.awbDate = shp.awb_date
							join AWB awb on awb.awb_no  = shp.awb_no and awb.awb_date = shp.awb_date and awb_type = 'I'
				      left join (SELECT sum(srfInv.dlv_pcs) as dlvPcs, sum(srfInv.dlv_WT) as dlvWt,srfInv.awb_no,srfInv.awb_date FROM imp_srf_awb_inventory srfInv, imp_srf srf where srfInv.srf_no = 
              srf.srf_no and srf.STATUS = 'POSTED' group by srfInv.awb_no,srfInv.awb_date ) dlv ON dlv.awb_no  = shp.awb_no and dlv.awb_date = shp.awb_date 
							where 1 =1 and ( (shp.rcdPcs != (NVL(inv.locPcs,0) + NVL(dlvPcs,0)) ) OR  ( shp.rcdWt != ( NVL(inv.locWt,0) + NVL(dlvWt,0)) ) ) AND awb.AWB_CLOSED_YN = 'N'
				order by shp.awb_date desc  		
	 ]]> 
	</select>
	
		<select id="dataCheckingRuleEight" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[	 
		select 'RULE 8' as rule, 'ULD has been recycled but there is still outstanding checkout record under outbound flight'  as ruleDesc,
				CHK.ULD_KEY as uldKey,CHK.FLT_KEY as fltKey , TO_CHAR( CHK.FLT_DATE,'DDMONYY') AS fltDate,
				( 'ULD: ' || CHK.ULD_KEY || ' FLT: ' || CHK.FLT_KEY || ' FLT DATE: ' || TO_CHAR(CHK.FLT_DATE,'DDMONYY') || ' OUTSTANDING: ' || chk.chk_flg) as remarks, 'EXP_CHKOUT_DTL' AS tabName 
				from exp_chkout_dtl chk join ULD_inventory ui on ui.uld_key = chk.uld_key where nvl(chk_flg,'N') = 'N' and chk.flt_key != ui.flt_key and chk.flt_date != ui.flt_date
	 ]]> 
	</select>
	
<select id="dataCheckingRuleNine1" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[	 
		select 'RULE 9' as rule, 'AWB should be positive for manifest pc/wt,breakdown pc/wt' as ruleDesc,  shp.awb_no , shp.awb_date,
			( 'AWB: ' || shp.awb_no || ' AWB DATE: ' || TO_CHAR(shp.awb_date,'DDMONYY') || ' manifest PC/WT: ' || shp.manfPcs || '/' || shp.manfWt || ' breakdown PC/WT: ' 
			  || shp.rcdPcs || '/' || shp.rcdWt ) remarks, 
			  'IMP_CAR_SHP' AS tabName 
			from  (	select awb_no, awb_date, SUM(RECD_PCS) as rcdPcs, SUM(RECD_WT) as rcdWt,SUM(manifest_pcs) as manfPcs, SUM(manifest_Wt) as manfWt 
                from imp_car_shp  group by awb_no , awb_date ) shp          
        join AWB awb on awb.awb_no  = shp.awb_no and awb.awb_date = shp.awb_date and awb_type = 'I'
        where (shp.manfPcs < 0 OR shp.manfWt < 0 OR shp.rcdPcs < 0 OR shp.rcdWt < 0) AND awb.AWB_CLOSED_YN = 'Y'
        order by shp.awb_date desc
	 ]]> 
	</select>
	
	<select id="dataCheckingRuleNine2" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[	 
		select 'RULE 9' as rule, 'AWB should be positive for RCL pc/wt, dep pc/wt,  premanifest pc/wt, PPK pc/wt, Bulk pc/wt,offload pc/wt' as ruleDesc,
			awb.awb_no , awb.awb_date,
			( 'AWB: ' || awb.awb_no || ' AWB DATE: ' || TO_CHAR(awb.awb_date,'DDMONYY')
			  || ' RCL PC/WT: ' || RCL_PCS || '/' || RCL_WT 
		      || ' Dep PC/WT: '  || EM.depPcs || '/' || EM.depWt 
			  || ' PMAN PC/WT: '  || PMAN.PMAN_PCS || '/' || PMAN.PMAN_WT 
		      || ' PPK PC/WT: '   || PMAN.PPK_PCS || '/'  || PMAN.PPK_WT
		      || ' BULK PC/WT: '  || PMAN.BULK_PCS || '/' || PMAN.BULK_WT    
		      || ' OFFLOAD BLK PC/WT: '   || OFFLOAD.OFF_BULK_PCS || '/'  || OFFLOAD.OFF_BULK_WT
		      || ' OFFLOAD PPK PC/WT: '   || OFFLOAD.OFF_PPK_PCS || '/' || OFFLOAD.OFF_PPK_WT   
		      ) remarks, 
					'AWB' AS tabName 
					from AWB awb
					left join ( select count(1) as depCnt , sum(SHPM_ASSGN_PCS) depPcs,SUM(SHPM_ASSGN_WT) as depWt,awb_no,awb_date from EXP_MANIFEST_DTL where (SHPM_ASSGN_PCS < 0 OR SHPM_ASSGN_WT < 0) group by awb_no , awb_date ) EM  on EM.awb_no = awb.awb_no and EM.awb_date = awb.awb_date
		      left join ( select count(1) as pmanCnt , SUM (PMAN_PCS) PMAN_PCS, SUM (PMAN_WT) PMAN_WT,SUM (PPK_PCS) PPK_PCS, SUM (PPK_WT) PPK_WT,SUM (BULK_PCS) BULK_PCS, SUM (BULK_WT) BULK_WT, awb_no,awb_date 
		            from exp_pmanifest_awb where (PMAN_PCS < 0 OR PMAN_WT < 0 OR PPK_PCS < 0 OR PPK_WT < 0 OR BULK_PCS < 0 OR BULK_WT < 0) group by awb_no , awb_date ) PMAN  on PMAN.awb_no = awb.awb_no and PMAN.awb_date = awb.awb_date
		      left join ( select count(1) as offloadCnt , SUM (OFF_BULK_PCS) OFF_BULK_PCS, SUM (OFF_BULK_WT) OFF_BULK_WT,SUM (OFF_PPK_PCS) OFF_PPK_PCS, SUM (OFF_PPK_WT) OFF_PPK_WT, awb_no,awb_date 
		            from exp_offload_awb where (OFF_BULK_PCS < 0 OR OFF_BULK_WT < 0 OR OFF_PPK_PCS < 0 OR OFF_PPK_WT < 0) group by awb_no , awb_date ) OFFLOAD  on OFFLOAD.awb_no = awb.awb_no and OFFLOAD.awb_date = awb.awb_date
		      where ( awb.RCL_PCS < 0 OR awb.RCL_WT < 0 OR  awb.PMAN_PCS < 0 OR awb.PMAN_WT < 0 
                OR awb.PMAN_PPK_PCS < 0 OR awb.PMAN_PPK_WT < 0 OR awb.PMAN_BULK_PCS < 0 OR awb.PMAN_BULK_WT < 0
                OR awb.OFFLOAD_BULK_PCS < 0 OR awb.OFFLOAD_BULK_WT < 0 OR awb.OFFLOAD_PPK_PCS < 0 OR awb.OFFLOAD_PPK_WT < 0
                OR  EM.depCnt > 0  OR PMAN.pmanCnt > 0 OR OFFLOAD.offloadCnt > 0 )
                AND  AWB_CLOSED_YN = 'N'
	 ]]> 
	</select>
	
	<select id="dataCheckingRuleTen" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[	 
		SELECT 'RULE 10' as rule, 'H-container or Empty ULD having handling mode as "PPK" or "NBK" or PPK ind "Y"'  as ruleDesc,
			handling_mode AS handlingMode, uld_key as uldKey, empty_flg as emptyInd, ppk_ind as ppkInd,
			( 'ULD: ' || ULD_KEY || ' HANDLING MODE: ' || handling_mode|| ' EMPTY: ' || empty_flg || ' PPK IND: ' || ppk_ind) as remarks, 'ULD_INVENTORY' AS tabName 
			FROM uld_inventory where handling_mode in ('NBK','PPK') AND LOC_CODE is not null 
			and ( empty_flg = 'Y' OR EXISTS (SELECT NULL FROM MAST_ULD_TYPE WHERE code = SUBSTR(ULD_KEY, 1, 3) AND (H_CONT_IND = 'Y' OR BT_IND = 'Y' OR DUMMY_H_CONT_IND = 'Y') ) )
			ORDER BY LM_DATE desc
	 ]]> 
	</select>
	
<select id="dataCheckingRuleTwelve" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.DataCheckBO">
	<![CDATA[	 
		SELECT 'RULE 12' as rule, 'Negative pieces in database for bulk/bup pc/wt'  as ruleDesc,
			awb_no as awbNumber , awb_date as awbDate,
			(' FLT: ' || flt_key || '/' || TO_CHAR(flt_date,'DDMONYY') || 'BULK PCS: ' || bulk_pcs || ' BULK WT: ' || bulk_wt|| ' BUP PCS: ' || bup_pcs || ' BUP WT:  ' || bup_wt) as remarks, 'IMP_CAR_SHP' AS tabName 
			FROM IMP_CAR_SHP where ( NVL(bulk_pcs,0) < 0 OR NVL(bulk_wt,0) < 0 OR NVL(bup_pcs,0) < 0 OR NVL(bup_wt,0) < 0 )
		UNION ALL
		SELECT 'RULE 12' as rule, 'Negative pieces in database for bulk/bup pc/wt'  as ruleDesc,
					awb_no as awbNumber , awb_date as awbDate,
					('BULK PCS: ' || bulk_pcs || ' BULK WT: ' || bulk_wt|| ' BUP PCS: ' || bup_pcs || ' BUP WT:  ' || bup_wt) as remarks, 'IMP_CAR_AWB' AS tabName 
					FROM IMP_CAR_AWB where ( NVL(bulk_pcs,0) < 0 OR NVL(bulk_wt,0) < 0 OR NVL(bup_pcs,0) < 0 OR NVL(bup_wt,0) < 0 ) 
	 ]]> 
	</select>

	<insert id="insertDataDiscrepancyRecords" parameterClass="cargo.cms.export.buildup.bo.DataCheckBO" >
		INSERT INTO WOS_DISC_DATA_CHECK (TR_NO,TAB_NAME,RULE_NO,RULE_DESC,AWB_NO,AWB_DATE,ULD_KEY,REMARKS,CR_USER_ID,CR_DATE)
		VALUES (WOS_DISC_DATA_CHECK_SEQ.nextval, #tabName#, #rule#, #ruleDesc#, #awbNumber#, to_date(#awbDate#,'DDMONYY'), #uldKey#, #remarks#,'SYSTEM',SYSDATE )
	</insert>
	
<select id="getConfiguredDummyCarr" parameterClass="java.lang.String" resultClass="java.lang.String">
	select rule_value from cmsrules where rule_code='AUTO_CLOSE_DUMMY_ZW_FLIGHTS'
	</select>
	<select id="getListOfDummyFlightForJob" parameterClass="cargo.cms.export.bo.FlightCloseDetailsBO" resultClass="cargo.cms.export.bo.FlightCloseDetailsBO">
	  	  SELECT Event.Flt_Key Fltkey, TO_CHAR(Event.Sch_Date,'DDMONYY') Fltdate, Event.Flt_Type as fltType 
			FROM Flt_Opr Flt,Flt_Opr_Events Event
			Where Flt.Tr_No          = Event.Tr_No
			AND Event.Flt_Cls_Yn     = 'N'
			AND Event.Flt_Type       = 'A'
			AND Flt.FLT_KEY IN ((select rule_value from cmsrules where rule_code='DUMMY_FLT_AAT'),(select rule_value from cmsrules where rule_code='DUMMY_FLT_HACTL')) 
      		AND Flt.SCH_DATE = TO_CHAR(SYSDATE-1,'DDMONYY')
		UNION ALL
		SELECT Event.Flt_Key Fltkey, TO_CHAR(Event.Sch_Date,'DDMONYY') Fltdate, Event.Flt_Type as fltType
					FROM Flt_Opr Flt,Flt_Opr_Events Event
					Where Flt.Tr_No          = Event.Tr_No
					AND Event.Flt_Cls_Yn     = 'N'					
		      		AND Flt.SCH_DATE &lt; (SYSDATE-nvl((select rule_value from cmsrules where rule_code='TIME_AUTO_CLOSE_DUMMY_ZW_FLIGHTS'),75))
		      		AND Flt.CARR_CODE IN (SELECT CODE FROM mast_carrier where nvl(dummy_carr,'N') = 'Y')
	</select>
	<update id="updVclNoInTRF" parameterClass="java.util.HashMap">
   			UPDATE TRF_ACCEPT_HD SET VCL_NO=#vclNo# WHERE TRF_NO=#trfNo#
   	</update>

	<update id="updatePmanULDHandlgMode" parameterClass="java.util.HashMap">
		UPDATE 
			EXP_PMANIFEST_ULD 
		SET 
			HDLG_MODE= '' , LM_USER_ID=#USER# , LM_DATE= SYSDATE 
		WHERE FLT_KEY=#FLT_KEY# AND FLT_DATE=TO_DATE(#FLT_DATE#, 'DDMONYY') AND ULD_BT_NO=#ULD_KEY#  and HDLG_MODE is not null 
	</update>
	
	<update id="updateULDInventoryHandlgMode" parameterClass="java.util.HashMap">
		UPDATE 
			uld_inventory 
		SET 
			HANDLING_MODE = '' , LM_USER_ID=#USER# , LM_DATE= SYSDATE 
		WHERE ULD_KEY = #ULD_KEY#  and HANDLING_MODE is not null 
	</update>
	<select id="sqldirecttowULDs" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO">		
		 SELECT *
FROM
  (SELECT uldNo,
    netWt,
    tareWt,
    unldgPt,
    country,
    location,
    bupCompInd,
    shcCode,
    bbInd,
    grossWt,
    chkOutInd,
    finalWt,
    bupWt,
    fltKey,
    fltDate,
    transferType,
    trim(DECODE(grossWt,'0.00','0','0','0',TO_CHAR(netWt-bupWt,'9999990D99')))                                                                                AS wtVar,
    DECODE(grossWt,'0.00','0','0','0',DECODE((netWt     -bupWt),'0','0',DECODE(netWt,'0.00','0',DECODE(netWt,'0','0',(ROUND(100 * ((netWt-bupWt)/netWt))))))) AS wtVarPer,
    readyDisp,
    readyWh,
    uldState,
    qtInd,
    manWtInd,
    uldClose,
    LEG_ORD,
    bulkULD
  FROM
    (SELECT A.ULD_BT_NO                                                                                                                 AS uldNo,
      DECODE(A.bldup_complete,'Y',DECODE(A.GROSS_WT,NULL,0,0,0,'0.00','0',trim(TO_CHAR(NVL(A.GROSS_WT-A.TARE_WT,0),'9999990D99'))),'0') AS netWt,
      trim(TO_CHAR(NVL(A.TARE_WT,0),'9999990D99'))                                                                                      AS tareWt,
      A.UNLDG_PT                                                                                                                        AS unldgPt,
      B.CONTR_CODE                                                                                                                      AS country,
      DECODE(
      (SELECT COUNT(1) FROM EXP_FLT_ULD WHERE flt_key=A.FLT_KEY
      AND flt_date                                   =A.FLT_DATE
      AND uld_key                                    =A.ULD_BT_NO
      AND CHECKOUT_YN                                ='Y'
      AND rownum                                     =1
      ),'1','',
      B.LOC_CODE)               AS location,
      A.BLDUP_COMPLETE AS bupCompInd,
      (SELECT STRAGG(STRINGDELIM(CODE,','))
      FROM V_EXP_ULD_SHC
      WHERE ULD_KEY = A.ULD_BT_NO
      AND ROWNUM   &lt;=9
      ) AS shcCode,
      DECODE(
      (SELECT BB_IND FROM EXP_FLT_ULD WHERE FLT_KEY=A.FLT_KEY
      AND FLT_DATE                                 =A.FLT_DATE
      AND ULD_KEY                                  =A.ULD_BT_NO
      AND UNLDG_PT                                 =A.UNLDG_PT
      ),'N','N','Y','Y','N')                                                            AS bbInd,
      DECODE(A.bldup_complete,'Y',trim(TO_CHAR(NVL(A.GROSS_WT,0),'9999990D99')),'0.00') AS grossWt,
      DECODE(
      (SELECT COUNT(1) FROM exp_chkout_dtl WHERE flt_key=A.FLT_KEY
      AND flt_date                                      =A.FLT_DATE
      AND uld_key                                       =A.ULD_BT_NO
      AND CHK_FLG                                       ='Y'
      AND rownum                                        =1
      ),1,'Y','N') AS chkOutInd,
      DECODE(B.FINAL_WEIGHT,NULL,'N','','N','N','N','Y') AS finalWt,
      (SELECT SUM(ASSIGNED_WT)
      FROM EXP_PMANIFEST_ULD_AWB
      WHERE FLT_KEY=A.FLT_KEY
      AND FLT_DATE =A.FLT_DATE
      AND ULD_BT_NO=A.ULD_BT_NO
      )                             AS bupWt,
      A.FLT_KEY                     AS fltKey,
      TO_CHAR(A.FLT_DATE,'DDMONYY') AS fltDate,
      B.TRANSIT_TYPE transferType,
      DECODE(A.READY_DISP,'','N','N','N','Y') AS readyDisp,
      A.READY_WH                              AS readyWh,
      DECODE(
      (SELECT COUNT(1) FROM EXP_FLT_ULD WHERE flt_key=A.FLT_KEY
      AND flt_date                                   =A.FLT_DATE
      AND uld_key                                    =A.ULD_BT_NO
      AND CHECKOUT_YN                                ='Y'
      AND rownum                                     =1
      ),'1',
      (SELECT code_desc
      FROM mast_code_dtl
      WHERE code =
        (SELECT ULD_STATE
        FROM EXP_FLT_ULD
        WHERE flt_key  =A.FLT_KEY
        AND flt_date   =A.FLT_DATE
        AND uld_key    =A.ULD_BT_NO
        AND CHECKOUT_YN='Y'
        AND rownum     =1
        )
      ),
      (SELECT code_desc
      FROM mast_code_dtl
      WHERE code = FUN_GET_ULD_STATE(A.ULD_BT_NO)
      AND rownum =1
      )) AS uldState,
      DECODE(
      (SELECT COUNT(1) FROM EXP_FLT_ULD WHERE flt_key=A.FLT_KEY
      AND flt_date                                   =A.FLT_DATE
      AND uld_key                                    =A.ULD_BT_NO
      AND CHECKOUT_YN                                ='Y'
      AND rownum                                     =1
      ),'1',
      (SELECT QT_IND
      FROM EXP_FLT_ULD
      WHERE flt_key  =A.FLT_KEY
      AND flt_date   =A.FLT_DATE
      AND uld_key    =A.ULD_BT_NO
      AND CHECKOUT_YN='Y'
      AND rownum     =1
      ), (DECODE(B.transit_type,'QT','Y','N')))    AS qtInd,
      B.MAN_WT_IND         AS manWtInd,
      NVL(A.ULD_CLOSE,'N') AS uldClose,
      LEG.LEG_ORD,
      DECODE(
      (SELECT BB_IND FROM EXP_FLT_ULD WHERE FLT_KEY=A.FLT_KEY
      AND FLT_DATE                                 =A.FLT_DATE
      AND ULD_KEY                                  =A.ULD_BT_NO
      AND UNLDG_PT                                 =A.UNLDG_PT
      ),'N',DECODE(D.BT_IND,'Y','Y','N',DECODE(D.H_CONT_IND,'N',D.DUMMY_H_CONT_IND,'Y','Y')),'Y','Y','N') AS bulkUld
    FROM EXP_PMANIFEST_ULD A
    JOIN MAST_ULD_TYPE D ON D.CODE = SUBSTR(A.ULD_BT_NO ,0,3)
    LEFT JOIN EXP_FLT_ULD B ON A.FLT_KEY    =B.FLT_KEY AND A.FLT_DATE  =B.FLT_DATE AND A.ULD_BT_NO = B.ULD_KEY
    LEFT JOIN FLT_OPR_LEG LEG
    ON A.FLT_KEY             = LEG.FLT_KEY
    AND A.FLT_DATE           = LEG.SCH_DATE
    AND LEG.OFF_POINT        =A.UNLDG_PT
    WHERE A.FLT_KEY          = #fltKey#
    AND A.FLT_DATE           =#fltDate#
    AND B.HANDLING_MODE    = 'DT'
    AND (B.TRANSIT_TYPE NOT IN ('TT')
    OR TRANSIT_TYPE         IS NULL)
    
    )
  ) A, ULD_INVENTORY B
WHERE B.ULD_KEY = A.uldNo
ORDER BY LEG_ORD,
  A.bulkUld,
  B.ULD_TYPE,
  B.ULD_NO,
  B.ULD_CARR 
		
	</select>
<select id="sqldirecttowAWB" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO">
	SELECT SUBSTR(B.AWB_NO,0,3)
  ||'-'
  ||SUBSTR(B.AWB_NO,4,8)                                                    AS awbNo,
  TO_CHAR(B.AWB_DATE,'DDMONYY')                                             AS awbDate,
  A.ULD_BT_NO                                                               AS uldKey,
  PKG_EXP_RPT.get_cc_code_awbType(A.FLT_KEY,A.FLT_DATE,P.AWB_NO,C.AWB_TYPE) AS ccCode,
  B.ASSIGNED_PCS                                                            AS awbBupcs,
  B.ASSIGNED_WT                                                             AS awbBupWt,
  A.UNLDG_PT                                                                AS unldgPt,
  B.TR_NO                                                                   AS trNo,
  CASE
    WHEN c.car_yn = 'Y'
    AND C.PCS    != B.ASSIGNED_PCS
    THEN 'Y'
    ELSE
      CASE
        WHEN P.PMAN_PCS != B.ASSIGNED_PCS
        THEN 'Y'
        ELSE 'N'
      END
  END AS splitInd,
  DECODE(
  (SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB_SHC WHERE TR_NO =B.TR_NO
  AND ROWNUM                                                  =1
  ),1,'Y','N') AS shcInd,
  DECODE(
  (SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB_UN WHERE TR_NO =B.TR_NO
  AND ROWNUM                                                 =1
  ),1,'Y','N') AS dgInd,
  DECODE(
  (SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB_TAG WHERE TR_NO =B.TR_NO
  AND ROWNUM                                                  =1
  ),1,'Y','N') AS tagInd,
  DECODE(
  (SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB_HAWB WHERE TR_NO =B.TR_NO
  AND ROWNUM                                                   =1
  ),1,'Y','N') AS hawbInd,
  (SELECT SUM(LOCN_PCS)
  FROM AWB_INVENTORY E
  WHERE E.ULD_KEY   = A.ULD_BT_NO
  AND E.AWB_NO      = B.AWB_NO
  AND E.AWB_DATE    = B.AWB_DATE
  AND NOT(E.FLT_TYPE='E'
  AND E.FLT_KEY    IS NOT NULL)
  ) AS nonAwbBupPcs,
  (SELECT SUM(LOCN_WT)
  FROM AWB_INVENTORY E
  WHERE E.ULD_KEY   = A.ULD_BT_NO
  AND E.AWB_NO      = B.AWB_NO
  AND E.AWB_DATE    = B.AWB_DATE
  AND NOT(E.FLT_TYPE='E'
  AND E.FLT_KEY    IS NOT NULL)
  ) AS nonAwbBupWt
FROM EXP_PMANIFEST_ULD A
JOIN EXP_PMANIFEST_ULD_AWB B
ON B.ULD_BT_NO = A.ULD_BT_NO
AND B.FLT_KEY  = A.FLT_KEY
AND B.FLT_DATE = A.FLT_DATE
JOIN EXP_PMANIFEST_AWB P
ON P.FLT_KEY   =A.FLT_KEY
AND P.FLT_DATE =A.FLT_DATE
AND P.AWB_NO   = B.AWB_NO
AND P.UNLDG_PT = B.UNLDG_PT
LEFT JOIN AWB C
ON C.AWB_NO     = B.AWB_NO
AND C.AWB_DATE  = B.AWB_DATE
WHERE 
     A.FLT_KEY = #fltKey# AND
             A.FLT_DATE = #fltDate# AND
             A.ULD_BT_NO = #uldNo#
	</select>
<select id="checkOffloadisCreated" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		 SELECT COUNT(1) FROM EXP_OFFLOAD_ULD WHERE  ULD_BT_NO = #ULD_KEY# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# and confirmed_yn = 'Y'
	</select>
	
	<select id="getULDUnladingPoint" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		 SELECT  unldg_pt FROM exp_pmanifest_uld WHERE  ULD_BT_NO = #ULD_KEY# AND FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#
	</select>
	
	
<select id="sqlgetACreg" parameterClass="map" resultClass="java.lang.String">		
		select acft_reg_no as acReg from flt_opr where flt_key=#fltNo#  and sch_date=TO_date(#fltDate#,'DDMONYY') and flt_type='D'   and rownum=1
	</select>

	<select id="fetchMaintainXTShipmentDlvTime"  parameterClass="cargo.cms.export.buildup.bo.MaintainXTShipBO" resultClass="java.lang.String">
		SELECT STRAGG(STRINGDELIM(LM_DATE, ','))
			FROM
			  (SELECT TO_CHAR(LM_DATE,'HH24:MI') AS LM_DATE
				  FROM RTRV_MOVE_ORDER
				  WHERE status = 'COMPLETED'
				  AND awb_no   = #awbNumber# AND awb_date = to_date(#awbDate#,'DDMONYY')
				  AND LSP IN (SELECT LSP_NO FROM imp_awb_strg_dtl WHERE chkin_uld_key = #uldKey# AND awb_no = #awbNumber# AND awb_date = to_date(#awbDate#,'DDMONYY') )
			  UNION ALL
			  SELECT TO_CHAR(LM_DATE,'HH24:MI') AS LM_DATE
				  FROM RTRV_MOVE_ORDER
				  WHERE status = 'COMPLETED'
				  AND awb_no   = #awbNumber# AND awb_date = to_date(#awbDate#,'DDMONYY')
				  AND ULD IN (SELECT ULD_KEY FROM imp_awb_strg_dtl WHERE chkin_uld_key = #uldKey# AND awb_no = #awbNumber# AND awb_date = to_date(#awbDate#,'DDMONYY') )
			  )
	</select>

	<select id="fetchMaintainXTShipmentDlvTimeBLK"  parameterClass="cargo.cms.export.buildup.bo.MaintainXTShipBO" resultClass="java.lang.String">
		SELECT STRAGG(STRINGDELIM(LM_DATE, ','))
			FROM
			  (SELECT TO_CHAR(LM_DATE,'HH24:MI') AS LM_DATE
				  FROM RTRV_MOVE_ORDER
				  WHERE status = 'COMPLETED'
				  AND awb_no   = #awbNumber# AND awb_date = to_date(#awbDate#,'DDMONYY')
				  AND LSP IN (SELECT LSP_NO FROM imp_awb_strg_dtl WHERE chkin_uld_key is NULL AND awb_no = #awbNumber# AND awb_date = to_date(#awbDate#,'DDMONYY') )
			  UNION ALL
			  SELECT TO_CHAR(LM_DATE,'HH24:MI') AS LM_DATE
				  FROM RTRV_MOVE_ORDER
				  WHERE status = 'COMPLETED'
				  AND awb_no   = #awbNumber# AND awb_date = to_date(#awbDate#,'DDMONYY')
				  AND ULD IN (SELECT ULD_KEY FROM imp_awb_strg_dtl WHERE chkin_uld_key is NULL AND awb_no = #awbNumber# AND awb_date = to_date(#awbDate#,'DDMONYY') )
			  )
	</select>



<select id="maintainXTShipmentList"  parameterClass="cargo.cms.export.buildup.bo.MaintainXTShipBO" resultClass="cargo.cms.export.buildup.bo.MaintainXTShipBO">			
		select * from
			 (select 
			 <![CDATA[
						eopr.flt_key AS obFltKey,
						TO_CHAR(eopr.sch_date,'DDMONYY') obFltDate,
						TO_CHAR(eopr.est_date,'DDMONYY') obEstDate,
						LPAD(DECODE(eopr.EST_DATE,NULL,eopr.SCH_TIME,eopr.EST_TIME),4, 0) etdStd,
						fblPc.pcs as fblPc,
						fblPc.wt  as fblWt,
						(nvl(pman.pcs,0) + nvl(pmanT.pcs,0)) as pmanPc,
						(nvl(pman.wt,0) + nvl(pmanT.wt,0)) as pmanWt,
						(nvl(buld.pcs,0) + nvl(buldT.pcs,0)) as buPcs,
						(nvl(buld.wt,0) + nvl(buldT.wt,0))as buWt,
						CASE
						    WHEN (nvl(buld.pcs,0) + nvl(buldT.pcs,0)) > 0
						    THEN ROUND( ( (nvl(buld.pcs,0) + nvl(buldT.pcs,0)) / (nvl(pman.pcs,0) + nvl(pmanT.pcs,0)) ) * 100 , 2 )
						      || '%'
						    ELSE '0'
						      || '%'
						END AS buPercentage,  
						SUBSTR(shp.awb_no,1,3) ||'-' ||SUBSTR(shp.awb_no,4) AS awbNumDisp,
					    shp.awb_no as awbNumber,
					    TO_CHAR(shp.awb_date,'DDMONYY') awbDate,	
					    DECODE(awb.spl_code1, NULL, '', awb.spl_code1 || DECODE(awb.spl_code2, NULL, '', ','))
                    || DECODE(awb.spl_code2, NULL, '', awb.spl_code2 || DECODE(awb.spl_code3, NULL, '', ','))
                    || DECODE(awb.spl_code3, NULL, '', awb.spl_code3 || DECODE(awb.spl_code4, NULL, '', ','))
                    || DECODE(awb.spl_code4, NULL, '', awb.spl_code4 || DECODE(awb.spl_code5, NULL, '', ','))
                    || DECODE(awb.spl_code5, NULL, '', awb.spl_code5 || DECODE(awb.spl_code6, NULL, '', ','))
                    || DECODE(awb.spl_code6, NULL, '', awb.spl_code6 || DECODE(awb.spl_code7, NULL, '', ','))
                    || DECODE(awb.spl_code7, NULL, '', awb.spl_code7 || DECODE(awb.spl_code8, NULL, '', ','))
                    || DECODE(awb.spl_code8, NULL, '', awb.spl_code8 || DECODE(awb.spl_code9, NULL, '', ','))
                    || DECODE(awb.spl_code9, NULL, '', awb.spl_code9) splCode,	
       (CASE WHEN decode(awb.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
       (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = AWB.CARR_CODE AND (SPLCODE.SPL_CODE = awb.SPL_CODE1 OR SPLCODE.SPL_CODE = awb.SPL_CODE2 OR SPLCODE.SPL_CODE = awb.SPL_CODE3 OR SPLCODE.SPL_CODE = awb.SPL_CODE4 
       OR SPLCODE.SPL_CODE = awb.SPL_CODE5 OR SPLCODE.SPL_CODE = awb.SPL_CODE6 OR SPLCODE.SPL_CODE = awb.SPL_CODE7 OR SPLCODE.SPL_CODE = awb.SPL_CODE8 OR SPLCODE.SPL_CODE = awb.SPL_CODE9)) > 0
       THEN 'Q' ELSE decode(awb.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) ELSE decode(awb.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType,
						shp.RECD_PCS bdPcs,
						shp.RECD_WT bdWt,
						iopr.flt_key AS impFltKey,
						TO_CHAR(iopr.sch_date,'DDMONYY') impFltDate,
						TO_CHAR(iopr.EST_DATE,'DDMONYY') impEstDate,
						LPAD(DECODE(iopr.EST_DATE,NULL,iopr.SCH_TIME,iopr.EST_TIME),4, 0) etaSta,
						NVL(ffm.ULD_key,'BULK') uldKey,
						
						CASE WHEN (NVL(ffm.ULD_key,'BULK') = 'BULK') THEN (SELECT shp_trf_type FROM v_ddt_dtl where awb_no = shp.awb_no AND awb_date = shp.awb_date and shp_trf_type is not null and rownum = 1) 
                		WHEN ffm.uld_key IS NOT NULL THEN (SELECT TRANSIT_TYPE FROM uld_inventory WHERE uld_key = ffm.ULD_key)  
                		ELSE ''  END as transitType,
                
						TO_CHAR(chk.CHKIN_DATE,'HH24:MI') checkinTime,
						TO_CHAR(chk.BRKDN_COMPL_DATE,'HH24:MI') AS bdComplTime,						
					    eopr.FLT_MODULE1 as exportModule,
					    iopr.cgo_acft_type as cargoArcftType,
					    'N' selXT,
					    'N' oldSelXT,
					    (SELECT DECODE(COUNT(1),0,'N','Y') FROM v_ddt_dtl WHERE (shp_trf_type = 'QT' OR trf_type = 'QT') AND awb_no = shp.awb_no AND awb_date = shp.awb_date group by awb_no,awb_date) AS ddtTransferType,
						'' remarks,
						'' oldRemarks,
						0 sequence
						FROM imp_car_shp shp
						LEFT JOIN (select flt_key , flt_date ,  awb_no , awb_date ,  NVL(uld_key,'BULK') as ULD_key  from v_ffm_dtl
			              UNION 
			                select stg.flt_key , stg.flt_date ,  stg.awb_no , stg.awb_date , NVL(stg.chkin_uld_key,'BULK') as ULD_key from imp_awb_strg_dtl stg 
			                where 1 =1 AND (exists (select null from imp_ramp_chk_dtl where flt_key = stg.flt_key AND  flt_date = stg.flt_date and uld_key = stg.chkin_uld_key) OR stg.chkin_uld_key is null )
			            )
			            ffm ON ffm.flt_key   = shp.flt_key AND ffm.flt_date = shp.flt_date AND ffm.awb_no   = shp.awb_no AND ffm.awb_date = shp.awb_date            
						JOIN AWB awb ON awb.awb_no = shp.awb_no AND awb.awb_date = shp.awb_date
						JOIN flt_opr iopr ON iopr.flt_key   = shp.flt_key AND iopr.sch_date = shp.flt_date AND iopr.flt_type = 'A'
						LEFT JOIN 
						( select awb_no , awb_date , flt_key , flt_date from exp_pmanifest_awb 
							where (flt_key , flt_date) in (select flt_key, sch_date from flt_opr where to_date( (TO_CHAR( DECODE(EST_DATE,NULL,SCH_DATE,EST_DATE), 'DDMONYY' )  
            						|| LPAD(DECODE(EST_DATE,NULL,SCH_TIME,EST_TIME),4, 0)), 'DDMONYYHH24MI' ) 
      					 				BETWEEN to_date( #fromEtaSta# , 'DDMONYYHH24MI' ) AND  to_date( #toEtaSta# , 'DDMONYYHH24MI' ) and flt_type = 'D') 
						    UNION
						  select awb_no , awb_date , flt_key , flt_date from exp_pman_tarmac_awb where 
						  (flt_key , flt_date) in (select flt_key, sch_date from flt_opr where to_date( (TO_CHAR( DECODE(EST_DATE,NULL,SCH_DATE,EST_DATE), 'DDMONYY' )  
            						|| LPAD(DECODE(EST_DATE,NULL,SCH_TIME,EST_TIME),4, 0)), 'DDMONYYHH24MI' ) 
      					 				BETWEEN to_date( #fromEtaSta# , 'DDMONYYHH24MI' ) AND  to_date( #toEtaSta# , 'DDMONYYHH24MI' ) and flt_type = 'D')
      					 										  
						  UNION
						  SELECT FBLSHP.AWB_NO, FBLSHP.AWB_DATE, FBLHD.FLT_KEY, FBLHD.FLT_DATE FROM edi_fbl fblhd
						  JOIN EDI_FBL_SHP FBLSHP ON FBLHD.TR_NO   = FBLSHP.TR_NO 
						  WHERE fbl_status = 'P' AND (FBLHD.FLT_KEY, FBLHD.FLT_DATE) in (select flt_key, sch_date from flt_opr where to_date( (TO_CHAR( DECODE(EST_DATE,NULL,SCH_DATE,EST_DATE), 'DDMONYY' )  
            						|| LPAD(DECODE(EST_DATE,NULL,SCH_TIME,EST_TIME),4, 0)), 'DDMONYYHH24MI' ) 
      					 				BETWEEN to_date( #fromEtaSta# , 'DDMONYYHH24MI' ) AND  to_date( #toEtaSta# , 'DDMONYYHH24MI' ) and flt_type = 'D')      					 			   					 			 
						) expFlt on expFlt.awb_no   = awb.awb_no AND expFlt.awb_date = awb.awb_date
						LEFT JOIN flt_opr eopr ON eopr.flt_key = expFlt.flt_key AND eopr.sch_date = expFlt.flt_date AND  eopr.flt_type = 'D'
						LEFT JOIN imp_ramp_chk_dtl chk ON chk.flt_key = shp.flt_key AND chk.flt_date  = shp.flt_date AND chk.uld_key   = ffm.uld_key
						JOIN MAST_XT_CONNECT_CONFIG xtConfig ON xtConfig.IMP_ACFT_TYPE = iopr.CGO_ACFT_TYPE AND xtConfig.EXP_ACFT_TYPE = eopr.CGO_ACFT_TYPE
						LEFT JOIN (SELECT SUM(PCS) pcs ,SUM(NET_WT) wt , FBLSHP.AWB_NO, FBLSHP.AWB_DATE,FBLHD.FLT_KEY, FBLHD.FLT_DATE FROM edi_fbl fblhd
						  JOIN EDI_FBL_SHP FBLSHP ON FBLHD.TR_NO   = FBLSHP.TR_NO 
						  WHERE fbl_status = 'P' group by FBLSHP.AWB_NO, FBLSHP.AWB_DATE, FBLHD.FLT_KEY, FBLHD.FLT_DATE ) fblPc ON fblPc.AWB_NO = expFlt.awb_no AND fblPc.AWB_DATE = expFlt.awb_date AND fblPc.FLT_KEY = expFlt.FLT_KEY AND  fblPc.FLT_DATE = expFlt.FLT_DATE
						LEFT JOIN (select SUM (PMAN_PCS) pcs, SUM (PMAN_WT) wt,awb_no , awb_date , flt_key , flt_date from exp_pmanifest_awb
						  group by awb_no , awb_date , flt_key , flt_date ) pman ON pman.AWB_NO = expFlt.awb_no AND pman.AWB_DATE = expFlt.awb_date AND pman.FLT_KEY = expFlt.FLT_KEY AND  pman.FLT_DATE = expFlt.FLT_DATE
						LEFT JOIN (select SUM (nvl(bulk_pcs,0)+nvl(ppk_pcs,0)) pcs, SUM (nvl(bulk_wt,0)+nvl(ppk_wt,0)) wt,awb_no , awb_date , flt_key , flt_date from exp_pman_tarmac_awb
						  group by awb_no , awb_date , flt_key , flt_date ) pmanT ON pmanT.AWB_NO = expFlt.awb_no AND pmanT.AWB_DATE = expFlt.awb_date AND pmanT.FLT_KEY = expFlt.FLT_KEY AND  pmanT.FLT_DATE = expFlt.FLT_DATE
						LEFT JOIN (select SUM (ASSIGNED_PCS) pcs, SUM (ASSIGNED_WT) wt,awb_no , awb_date , flt_key , flt_date  from exp_pmanifest_uld_awb
						  group by awb_no , awb_date , flt_key , flt_date ) buld ON buld.AWB_NO = expFlt.awb_no AND buld.AWB_DATE = expFlt.awb_date AND buld.FLT_KEY = expFlt.FLT_KEY AND  buld.FLT_DATE = expFlt.FLT_DATE 
						LEFT JOIN (select SUM (ASSIGNED_PCS) pcs, SUM (ASSIGNED_WT) wt,awb_no , awb_date , flt_key , flt_date  from exp_pman_tarmac_uld_awb
						  group by awb_no , awb_date , flt_key , flt_date ) buldT ON buldT.AWB_NO = expFlt.awb_no AND buldT.AWB_DATE = expFlt.awb_date AND buldT.FLT_KEY = expFlt.FLT_KEY AND  buldT.FLT_DATE = expFlt.FLT_DATE 
						 Where 1= 1
						   AND (to_date ( TO_CHAR( DECODE(iopr.EST_DATE,NULL,iopr.SCH_DATE,iopr.EST_DATE), 'DDMONYY' )  || LPAD(DECODE(iopr.EST_DATE,NULL,iopr.SCH_TIME,iopr.EST_TIME),4, 0) , 'DDMONYYHH24MI')  between 
					        to_date (TO_CHAR((SYSDATE - (select RULE_VALUE from CMSRULES where RULE_CODE = 'XT_START_TIME')/1440), 'DDMONYYHH24MI') , 'DDMONYYHH24MI')  
					        AND to_date ( TO_CHAR((SYSDATE + (select RULE_VALUE from CMSRULES where RULE_CODE = 'XT_END_TIME')/1440), 'DDMONYYHH24MI') , 'DDMONYYHH24MI') ) 
                  	        AND (to_number ( ( (to_date( (TO_CHAR( DECODE(eopr.EST_DATE,NULL,eopr.SCH_DATE,eopr.EST_DATE), 'DDMONYY' )  || LPAD(DECODE(eopr.EST_DATE,NULL,eopr.SCH_TIME,eopr.EST_TIME),4, 0)), 'DDMONYYHH24MI' )
					                - to_date ( TO_CHAR( DECODE(iopr.EST_DATE,NULL,iopr.SCH_DATE,iopr.EST_DATE), 'DDMONYY' )  || LPAD(DECODE(iopr.EST_DATE,NULL,iopr.SCH_TIME,iopr.EST_TIME),4, 0) , 'DDMONYYHH24MI') ) * 24 * 60 ) )  between to_number(xtConfig.TIME_FROM) AND to_number(xtConfig.TIME_TO))					       
	      					 AND not exists( select null from xt_imp_car_shp_dtl where IMP_FLT_KEY  = shp.flt_key AND IMP_FLT_DATE = shp.flt_date AND EXP_FLT_KEY = expFlt.FLT_KEY AND EXP_FLT_DATE  = expFlt.FLT_DATE and awb_no   = shp.awb_no AND awb_date = shp.awb_date and ULD_KEY = NVL(ffm.uld_key,'BULK')
				            ) 
      				]]>  
	      		<isEqual compareValue="Y" property="bdOutstanding">
				  <![CDATA[
					AND NVL(shp.manifest_pcs,0) - NVL(shp.recd_pcs,0) > 0
				   ]]>
				</isEqual>
				<isEqual compareValue="Y" property="buOutstanding">
				  <![CDATA[
					AND  ( ( (nvl(pman.pcs,0) + nvl(pmanT.pcs,0)) = 0 ) OR ( (nvl(pman.pcs,0) + nvl(pmanT.pcs,0)) - (nvl(buld.pcs,0) + nvl(buldT.pcs,0)) > 0 ) ) 
				   ]]>
				</isEqual>  				
		    UNION
		    <![CDATA[ 
		      select 
		        eopr.flt_key AS obFltKey,
		        TO_CHAR(eopr.sch_date,'DDMONYY') obFltDate,
		        TO_CHAR(eopr.est_date,'DDMONYY') obEstDate,
		        LPAD(DECODE(eopr.EST_DATE,NULL,eopr.SCH_TIME,eopr.EST_TIME),4, 0) etdStd,
		        fblPc.pcs as fblPc,
		        fblPc.wt  as fblWt,
		        (nvl(pman.pcs,0) + nvl(pmanT.pcs,0)) as pmanPc,
				(nvl(pman.wt,0) + nvl(pmanT.wt,0)) as pmanWt,
				(nvl(buld.pcs,0) + nvl(buldT.pcs,0)) as buPcs,
				(nvl(buld.wt,0) + nvl(buldT.wt,0))as buWt,
					CASE
					    WHEN (nvl(buld.pcs,0) + nvl(buldT.pcs,0)) > 0
					    THEN ROUND( ( (nvl(buld.pcs,0) + nvl(buldT.pcs,0)) / (nvl(pman.pcs,0) + nvl(pmanT.pcs,0)) ) * 100 , 2 )
					      || '%'
					    ELSE '0'
					      || '%'
					END AS buPercentage,   
		        SUBSTR(xtDtls.awb_no,1,3) ||'-' ||SUBSTR(xtDtls.awb_no,4) AS awbNumDisp,
		        xtDtls.awb_no as awbNumber,
		        TO_CHAR(xtDtls.awb_date,'DDMONYY') awbDate,
		        DECODE(awb.spl_code1, NULL, '', awb.spl_code1 || DECODE(awb.spl_code2, NULL, '', ','))
                    || DECODE(awb.spl_code2, NULL, '', awb.spl_code2 || DECODE(awb.spl_code3, NULL, '', ','))
                    || DECODE(awb.spl_code3, NULL, '', awb.spl_code3 || DECODE(awb.spl_code4, NULL, '', ','))
                    || DECODE(awb.spl_code4, NULL, '', awb.spl_code4 || DECODE(awb.spl_code5, NULL, '', ','))
                    || DECODE(awb.spl_code5, NULL, '', awb.spl_code5 || DECODE(awb.spl_code6, NULL, '', ','))
                    || DECODE(awb.spl_code6, NULL, '', awb.spl_code6 || DECODE(awb.spl_code7, NULL, '', ','))
                    || DECODE(awb.spl_code7, NULL, '', awb.spl_code7 || DECODE(awb.spl_code8, NULL, '', ','))
                    || DECODE(awb.spl_code8, NULL, '', awb.spl_code8 || DECODE(awb.spl_code9, NULL, '', ','))
                    || DECODE(awb.spl_code9, NULL, '', awb.spl_code9) splCode,	
       (CASE WHEN decode(awb.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') = 'C' THEN 
       (CASE WHEN (SELECT COUNT(1) FROM CUST_AIRL_SPL_CODE SPLCODE WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC' AND SPLCODE.CARR_CODE = AWB.CARR_CODE AND (SPLCODE.SPL_CODE = awb.SPL_CODE1 OR SPLCODE.SPL_CODE = awb.SPL_CODE2 OR SPLCODE.SPL_CODE = awb.SPL_CODE3 OR SPLCODE.SPL_CODE = awb.SPL_CODE4 
       OR SPLCODE.SPL_CODE = awb.SPL_CODE5 OR SPLCODE.SPL_CODE = awb.SPL_CODE6 OR SPLCODE.SPL_CODE = awb.SPL_CODE7 OR SPLCODE.SPL_CODE = awb.SPL_CODE8 OR SPLCODE.SPL_CODE = awb.SPL_CODE9)) > 0
       THEN 'Q' ELSE decode(awb.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) ELSE decode(awb.catalog,'EG','C','ES','C','IG','C','TG','C','TA','C','EU','M','TM','M','EO','Q','IO','Q','C') END) as cargoType,
		        shp.RECD_PCS bdPcs,
		        shp.RECD_WT bdWt,
		        iopr.flt_key AS impFltKey,
		        TO_CHAR(iopr.sch_date,'DDMONYY') impFltDate,
		        TO_CHAR(iopr.EST_DATE,'DDMONYY') impEstDate,
		        LPAD(DECODE(iopr.EST_DATE,NULL,iopr.SCH_TIME,iopr.EST_TIME),4, 0) etaSta,
		        xtDtls.ULD_key uldKey,
		        CASE WHEN (xtDtls.uld_key IS NOT NULL AND xtDtls.uld_key = 'BULK') THEN (SELECT shp_trf_type FROM v_ddt_dtl where awb_no = xtDtls.awb_no AND awb_date = xtDtls.awb_date and shp_trf_type is not null and rownum = 1) 
                WHEN xtDtls.uld_key IS NOT NULL THEN (SELECT TRANSIT_TYPE FROM uld_inventory WHERE uld_key = xtDtls.uld_key)  
                ELSE ''  END as transitType,		        
		        TO_CHAR(chk.CHKIN_DATE,'HH24:MI') checkinTime,
		        TO_CHAR(chk.BRKDN_COMPL_DATE,'HH24:MI') AS bdComplTime,		        
		        eopr.FLT_MODULE1 as exportModule,
		        iopr.cgo_acft_type as cargoArcftType,
		        'Y' selXT,
			    'Y' oldSelXT,
			    (SELECT DECODE(COUNT(1),0,'N','Y') FROM v_ddt_dtl WHERE (shp_trf_type = 'QT' OR trf_type = 'QT') AND awb_no = xtDtls.awb_no AND awb_date = xtDtls.awb_date group by awb_no,awb_date) AS ddtTransferType,
		        xtDtls.remarks  remarks,
		        xtDtls.remarks oldRemarks,
		        xtDtls.SEQ_NO sequence
		        FROM xt_imp_car_shp_dtl xtDtls
		        JOIN AWB awb ON awb.awb_no = xtDtls.awb_no AND awb.awb_date = xtDtls.awb_date
		        JOIN flt_opr iopr ON iopr.flt_key   = xtDtls.IMP_FLT_KEY AND iopr.sch_date = xtDtls.IMP_FLT_DATE AND iopr.flt_type = 'A'
		        JOIN flt_opr eopr ON eopr.flt_key = xtDtls.EXP_FLT_KEY AND eopr.sch_date = xtDtls.EXP_FLT_DATE AND  eopr.flt_type = 'D'
		        LEFT JOIN imp_car_shp shp ON shp.awb_no = xtDtls.awb_no AND shp.awb_date = xtDtls.awb_date and shp.flt_key   = xtDtls.IMP_FLT_KEY AND shp.flt_date = xtDtls.IMP_FLT_DATE 
		        LEFT JOIN imp_ramp_chk_dtl chk ON chk.flt_key = xtDtls.IMP_FLT_KEY AND chk.flt_date  = xtDtls.IMP_FLT_DATE AND chk.uld_key   = xtDtls.uld_key
		        JOIN MAST_XT_CONNECT_CONFIG xtConfig ON xtConfig.IMP_ACFT_TYPE = iopr.CGO_ACFT_TYPE AND xtConfig.EXP_ACFT_TYPE = eopr.CGO_ACFT_TYPE
		        LEFT JOIN (SELECT SUM(PCS) pcs ,SUM(NET_WT) wt , FBLSHP.AWB_NO, FBLSHP.AWB_DATE,FBLHD.FLT_KEY, FBLHD.FLT_DATE FROM edi_fbl fblhd
		          JOIN EDI_FBL_SHP FBLSHP ON FBLHD.TR_NO   = FBLSHP.TR_NO 
		          WHERE fbl_status = 'P' group by FBLSHP.AWB_NO, FBLSHP.AWB_DATE, FBLHD.FLT_KEY, FBLHD.FLT_DATE ) fblPc ON fblPc.AWB_NO = xtDtls.awb_no AND fblPc.AWB_DATE = xtDtls.awb_date AND fblPc.FLT_KEY = xtDtls.EXP_FLT_KEY AND  fblPc.FLT_DATE = xtDtls.EXP_FLT_DATE
		        LEFT JOIN (select SUM (PMAN_PCS) pcs, SUM (PMAN_WT) wt,awb_no , awb_date , flt_key , flt_date from exp_pmanifest_awb
		          group by awb_no , awb_date , flt_key , flt_date ) pman ON pman.AWB_NO = xtDtls.awb_no AND pman.AWB_DATE = xtDtls.awb_date AND pman.FLT_KEY = xtDtls.EXP_FLT_KEY AND  pman.FLT_DATE = xtDtls.EXP_FLT_DATE
		        LEFT JOIN (select SUM (nvl(bulk_pcs,0)+nvl(ppk_pcs,0)) pcs, SUM (nvl(bulk_wt,0)+nvl(ppk_wt,0)) wt,awb_no , awb_date , flt_key , flt_date from exp_pman_tarmac_awb
		          group by awb_no , awb_date , flt_key , flt_date ) pmanT ON pmanT.AWB_NO = xtDtls.awb_no AND pmanT.AWB_DATE = xtDtls.awb_date AND pmanT.FLT_KEY = xtDtls.EXP_FLT_KEY AND  pmanT.FLT_DATE = xtDtls.EXP_FLT_DATE
		        LEFT JOIN (select SUM (ASSIGNED_PCS) pcs, SUM (ASSIGNED_WT) wt,awb_no , awb_date , flt_key , flt_date from exp_pmanifest_uld_awb
		          group by awb_no , awb_date , flt_key , flt_date) buld ON buld.AWB_NO = xtDtls.awb_no AND buld.AWB_DATE = xtDtls.awb_date AND buld.FLT_KEY = xtDtls.EXP_FLT_KEY AND  buld.FLT_DATE = xtDtls.EXP_FLT_DATE 
				LEFT JOIN (select SUM (ASSIGNED_PCS) pcs, SUM (ASSIGNED_WT) wt,awb_no , awb_date , flt_key , flt_date from exp_pman_tarmac_uld_awb
		          group by awb_no , awb_date , flt_key , flt_date) buldT ON buldT.AWB_NO = xtDtls.awb_no AND buldT.AWB_DATE = xtDtls.awb_date AND buldT.FLT_KEY = xtDtls.EXP_FLT_KEY AND  buldT.FLT_DATE = xtDtls.EXP_FLT_DATE               
		      WHERE 1 =1 AND to_date( (TO_CHAR( DECODE(eopr.EST_DATE,NULL,eopr.SCH_DATE,eopr.EST_DATE), 'DDMONYY' )  || LPAD(DECODE(eopr.EST_DATE,NULL,eopr.SCH_TIME,eopr.EST_TIME),4, 0)), 'DDMONYYHH24MI' )
      			BETWEEN to_date( #fromEtaSta# , 'DDMONYYHH24MI' ) AND  to_date( #toEtaSta# , 'DDMONYYHH24MI' )      			
      		 ]]>  
      		<isEqual compareValue="Y" property="bdOutstanding">
			  <![CDATA[
				AND NVL(shp.manifest_pcs,0) - NVL(shp.recd_pcs,0) > 0
			   ]]>
			</isEqual>
			<isEqual compareValue="Y" property="buOutstanding">
			  <![CDATA[
				AND ( ( (nvl(pman.pcs,0) + nvl(pmanT.pcs,0)) = 0 ) OR ( (nvl(pman.pcs,0) + nvl(pmanT.pcs,0)) - (nvl(buld.pcs,0) + nvl(buldT.pcs,0)) > 0 ) )
			   ]]>
			</isEqual>
		  ) A WHERE 1 =1		
			<isNotEmpty property="fltModule">
				AND A.exportModule = #fltModule#
			</isNotEmpty>			
			<isNotEmpty property="cargoArcftType">
				AND	A.cargoArcftType = #cargoArcftType#
			</isNotEmpty>			
			<isNotEmpty property="impFltKey">
				AND	A.impFltKey = #impFltKey#
			</isNotEmpty>			
			<isNotEmpty property="impFltDate">
				 AND to_date(NVL(A.impEstDate,A.impFltDate),'DDMONYY')  = to_date(#impFltDate#,'DDMONYY')
			</isNotEmpty>			
			<isNotEmpty property="fltKey">
				AND	A.obFltKey = #fltKey#
			</isNotEmpty>
			<isNotEmpty property="fltDate">
				 AND to_date(NVL(A.obEstDate,A.obFltDate),'DDMONYY')  = to_date(#fltDate#,'DDMONYY')
			</isNotEmpty>			
			<isEqual compareValue="Y" property="xtShipment">
			   AND exists (select null from xt_imp_car_shp_dtl where awb_no = A.awbNumber and awb_date = A.awbDate and IMP_FLT_KEY = A.impFltKey  AND IMP_FLT_DATE = to_date(A.impFltDate,'DDMONYY') 
			   		and EXP_FLT_KEY = A.obFltKey  AND EXP_FLT_DATE = to_date(A.obFltDate,'DDMONYY') AND ULD_KEY = A.uldKey)
			</isEqual>
			<isEqual compareValue="Y" property="nonXTShipment">
				AND not exists (select null from xt_imp_car_shp_dtl where awb_no = A.awbNumber and awb_date = A.awbDate and IMP_FLT_KEY = A.impFltKey  AND IMP_FLT_DATE = to_date(A.impFltDate,'DDMONYY') 
					and EXP_FLT_KEY = A.obFltKey  AND EXP_FLT_DATE = to_date(A.obFltDate,'DDMONYY') AND ULD_KEY = A.uldKey)
			</isEqual>			
	</select>


<select id="sqlGetOffloadedULDPriority" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
	    	SELECT UPLIFT_PRIORITY FROM EXP_OFFLOAD_ULD 
	    	WHERE ULD_BT_NO = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
		]]>
	</select>
<select id="sqlGetOffloadingULDPriority" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
	    	SELECT UPLIFT_PRIORITY FROM EXP_PMANIFEST_ULD 
	    	WHERE ULD_BT_NO = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
		]]>
	</select>
		
	<delete id="deleteXTShipment" parameterClass="java.lang.String">
	 	delete xt_imp_car_shp_dtl where seq_no = #sequence#
	</delete>
	
	<insert id="saveXTShipment" parameterClass="cargo.cms.export.buildup.bo.MaintainXTShipBO">
		Insert into xt_imp_car_shp_dtl (IMP_FLT_KEY,IMP_FLT_DATE,EXP_FLT_KEY,EXP_FLT_DATE,AWB_NO,AWB_DATE,ULD_KEY,REMARKS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,SEQ_NO,TR_TYPE) 
		values (#impFltKey#,#impFltDate#,#obFltKey#,#obFltDate#,#awbNumber#,#awbDate#,#uldKey#,#remarks#,#userID#,SYSDATE,#userID#,SYSDATE,xt_imp_car_shp_seq.nextval,'XTSHP')
	</insert>

<select id="validateOutbounflightLink" parameterClass="cargo.cms.export.buildup.bo.MaintainXTShipBO" resultClass="java.lang.Integer">
		<![CDATA[
			select count(1) from xt_imp_car_shp_dtl where awb_no = #awbNumber# and awb_date = to_date(#awbDate#,'DDMONYY') and IMP_FLT_KEY = #impFltKey# 
			AND IMP_FLT_DATE = to_date(#impFltDate#,'DDMONYY') and ( EXP_FLT_KEY <> #obFltKey#  OR EXP_FLT_DATE <> to_date(#obFltDate#,'DDMONYY') )
		]]>
	</select>
	
	<update id="updateXTShipment" parameterClass="cargo.cms.export.buildup.bo.MaintainXTShipBO">	
		update xt_imp_car_shp_dtl set remarks = #remarks# , LM_USER_ID = #userID# , LM_DATE = SYSDATE where seq_no = #sequence#
	</update>

<update id="sqlUpdateSHCTransAwb" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		UPDATE AWB SET 
		SPL_CODE1 = #splCode1#,
		SPL_CODE2 = #splCode2#,
		SPL_CODE3 = #splCode3#,
		SPL_CODE4 = #splCode4#,
		SPL_CODE5 = #splCode5#,
		SPL_CODE6 = #splCode6#,
		SPL_CODE7 = #splCode7#,
		SPL_CODE8 = #splCode8#,
		SPL_CODE9 = #splCode9#
		WHERE AWB_NO = #awbNum# AND AWB_DATE=#awbDate#
	</update>
	<update id="sqlUpdateSHCTransImpcarAwb" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		UPDATE IMP_CAR_AWB SET 
		SPL_CODE1 = #splCode1#,
		SPL_CODE2 = #splCode2#,
		SPL_CODE3 = #splCode3#,
		SPL_CODE4 = #splCode4#,
		SPL_CODE5 = #splCode5#,
		SPL_CODE6 = #splCode6#,
		SPL_CODE7 = #splCode7#,
		SPL_CODE8 = #splCode8#,
		SPL_CODE9 = #splCode9#
		WHERE AWB_NO = #awbNum# AND AWB_DATE=#awbDate#
	</update>
	<update id="sqlUpdateSHCTransExpCarAwb" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO">
		UPDATE EXP_CAR SET 
		SPL_CODE1 = #splCode1#,
		SPL_CODE2 = #splCode2#,
		SPL_CODE3 = #splCode3#,
		SPL_CODE4 = #splCode4#,
		SPL_CODE5 = #splCode5#,
		SPL_CODE6 = #splCode6#,
		SPL_CODE7 = #splCode7#,
		SPL_CODE8 = #splCode8#,
		SPL_CODE9 = #splCode9#
		WHERE AWB_NO = #awbNum# AND AWB_DATE=#awbDate#
	</update>
        <select id="checkOfflineportbycarr" parameterClass="cargo.cms.export.bo.PreManifestAWBBO"  resultClass="java.lang.String">
	  SELECT OFFLINE_PORT FROM MAST_CARRIER A,FLT_OPR B WHERE B.CARR_CODE = A.CODE AND B.FLT_KEY=#fltKey# AND B.SCH_DATE=#fltDate# AND B.FLT_TYPE='D'
	</select>
<select id="fetchSecAwbType" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
	SELECT AWB_TYPE FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND AWB_CLOSED_YN = 'N' AND ROWNUM = 1
	</select>
	<select id="fetchawbPcsforsecchk" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
	select pcs from awb where awb_no=#awbNo# and to_char(awb_date,'DDMONYY')=#awbDate# AND ROWNUM = 1
	</select>
	<select id="fetchSecTMAWB" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM IMP_XPS_OBC_MAIL WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</select>

	<select id="fetchSecAwbDest" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
	SELECT dest FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND AWB_CLOSED_YN = 'N' AND ROWNUM = 1
	</select>
	<select id="fetchSecAwbOrig" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
	SELECT orig FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND AWB_CLOSED_YN = 'N' AND ROWNUM = 1
	</select>
	
	<select id="checkSecUSAport" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
		SELECT COUNT(cnt)
FROM
  (SELECT COUNT(1) AS cnt
  FROM MAST_CITY A
  WHERE A.CODE = #port#
  AND EXISTS
    (SELECT NULL FROM MAST_NON_APPRVL_PORT WHERE CTRY_CODE=A.CTRY_CODE
    UNION
    SELECT NULL FROM MAST_NON_APPRVL_PORT WHERE DEST_PORT=#port#
    )
  UNION ALL
  SELECT COUNT(1) AS cnt
  FROM MAST_ARPT A,
    MAST_CITY B
  WHERE A.CITY_CODE=B.CODE
  AND A.CODE       =#port#
  AND EXISTS
    (SELECT NULL FROM MAST_NON_APPRVL_PORT WHERE CTRY_CODE=B.CTRY_CODE
    UNION
    SELECT NULL FROM MAST_NON_APPRVL_PORT WHERE DEST_PORT=#port#
    )
  ) WHERE cnt > 0
	</select>
	<select id="checkSecUSALDG" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
		SELECT COUNT(1) AS cnt
FROM MAST_NON_APPRVL_PORT A,
  FLT_OPR B
WHERE A.PORT    = #ldgPt#
AND A.CARR_CODE = B.CARR_CODE
AND A.ACFT_TYPE = B.CGO_ACFT_TYPE
AND B.FLT_TYPE  = 'A'
AND B.FLT_KEY   = #impFltKey#
AND B.SCH_DATE  = #impFltDate#
AND SYSDATE BETWEEN A.EFF_DATE_FROM AND A.EFF_DATE_TO
AND (A.DEST_PORT = #port#
OR A.CTRY_CODE IN
  (SELECT CTRY_CODE
  FROM MAST_CITY A
  WHERE A.CODE = #port#
  AND EXISTS
    (SELECT NULL FROM MAST_NON_APPRVL_PORT WHERE CTRY_CODE=A.CTRY_CODE
    )
  UNION ALL
  SELECT B.CTRY_CODE
  FROM MAST_ARPT A,
    MAST_CITY B
  WHERE A.CITY_CODE=B.CODE
  AND A.CODE       = #port#
  AND EXISTS
    (SELECT NULL FROM MAST_NON_APPRVL_PORT WHERE CTRY_CODE=B.CTRY_CODE
    )
  ))
  </select>
	<select id="getSecChkfstLdgAWBlist" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT A.FLT_KEY AS impFltKey, TO_CHAR(A.FLT_DATE,'DDMONYY') AS impFltDate,  A.LDG_POINT AS ldgPt,  (A.MANIFEST_PCS + (  CASE    WHEN A.CIR_PROC_USER IS NULL    THEN 0    ELSE      CASE        WHEN A.CIR_PCS_TYPE = 'SL'        THEN -1 * A.CIR_PCS        ELSE A.CIR_PCS      END  END)) AS mnfstPcs,  B.DEST AS port,(A.MANIFEST_WT + (  CASE    WHEN A.CIR_PROC_USER IS NULL    THEN 0    ELSE      CASE        WHEN A.CIR_PCS_TYPE = 'SL'        THEN -1 * A.CIR_WT        ELSE A.CIR_WT      END  END))  AS mnfstWt FROM IMP_CAR_SHP A JOIN AWB B ON B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE WHERE A.AWB_NO=#awbNo# AND A.AWB_DATE=#awbDate#
	</select>	
	<select id="getSecChkExpPmanAWBlist" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT A.FLT_KEY AS expFltKey,TO_CHAR(A.FLT_DATE,'DDMONYY') AS expFltDate,A.UNLDG_PT AS ldgPt,A.PMAN_PCS AS mnfstPcs,B.DEST AS port,A.PMAN_WT AS mnfstWt FROM EXP_PMANIFEST_AWB A,AWB B WHERE B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.AWB_NO=#awbNo# AND A.AWB_DATE=#awbDate#
	UNION ALL
	SELECT A.FLT_KEY AS expFltKey,TO_CHAR(A.FLT_DATE,'DDMONYY') AS expFltDate,A.UNLDG_PT AS ldgPt,(A.BULK_PCS + A.PPK_PCS) AS mnfstPcs,B.DEST AS port,(A.BULK_WT + A.PPK_WT) AS mnfstWt FROM EXP_PMAN_TARMAC_AWB A,AWB B WHERE B.AWB_NO = A.AWB_NO AND B.AWB_DATE = A.AWB_DATE AND A.AWB_NO=#awbNo#  AND A.AWB_DATE=#awbDate#
	</select>
	<select id="getSecChkManifestDtls" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT A.MANIFEST_PCS as mnfstPcs,A.MANIFEST_WT as mnfstWt FROM IMP_CAR_SHP A WHERE A.AWB_NO=#awbNo# AND A.AWB_DATE=#awbDate# AND A.FLT_KEY=#impFltKey# AND A.FLT_DATE=#impFltDate# AND A.LDG_POINT=#ldgPt#
 	AND EXISTS (SELECT NULL FROM START_PREP P WHERE P.FFM_FRZ_DATE IS NOT NULL AND P.FLT_KEY = A.FLT_KEY AND P.FLT_DATE = A.FLT_DATE)
	</select>
	<select id="getSecExstJODtls" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	<![CDATA[
	SELECT JO_NO AS joNo,PC as joPcs,WT as joWt FROM EXP_SEC_CHK_JO WHERE JO_TYPE='SC' AND FLT_KEY=#impFltKey# AND FLT_DATE=#impFltDate# AND AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND (ORIG = #ldgPt# OR ORIG IS NULL) and status = 'NEW'
	]]> 
	</select>

<select id="getSecChkFltAcfttype" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
	SELECT CGO_ACFT_TYPE FROM FLT_OPR WHERE FLT_KEY=#expFltKey# AND SCH_DATE = #expFltDate# AND FLT_TYPE='D'
	</select>

<select id="getSmtCarPcs" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
	SELECT PCS FROM EXP_CAR WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</select>
	<select id="getSmtCarWt" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
	SELECT TO_CHAR(WT,'9999990D9') FROM EXP_CAR WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</select>
	<select id="checkFFMinAWB_JO" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EDI_FFM_SHP A,EDI_FFM_ULD B,EDI_FFM_MSG C 
											  WHERE B.TR_NO = A.TR_NO AND B.DOC_LINE_NO = A.UDOC_LINE_NO
												AND  C.TR_NO = A.TR_NO AND C.FFM_STATUS = 'P'
                        AND A.AWB_NO= #awbNo# AND A.AWB_DATE = #awbDate#
	</select>
	<select id="checkFFMSMTinAWB" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EDI_FFM_SHP A,EDI_FFM_ULD B,EDI_FFM_MSG C 
											  WHERE B.TR_NO = A.TR_NO AND B.DOC_LINE_NO = A.UDOC_LINE_NO
												AND  C.TR_NO = A.TR_NO AND C.FFM_STATUS = 'P'
                        AND A.AWB_NO= #awbNo# AND A.AWB_DATE = #awbDate# 
                        AND ((A.SPL_CODE1 = 'SMT' AND A.SPL_CODE1 IS NOT NULL) OR (A.SPL_CODE2 = 'SMT' AND A.SPL_CODE2 IS NOT NULL) OR (A.SPL_CODE3 = 'SMT' AND A.SPL_CODE3 IS NOT NULL) OR (A.SPL_CODE4 = 'SMT' AND A.SPL_CODE4 IS NOT NULL) OR (A.SPL_CODE5 = 'SMT' AND A.SPL_CODE5 IS NOT NULL) OR (A.SPL_CODE6 = 'SMT' AND A.SPL_CODE6 IS NOT NULL) OR (A.SPL_CODE7 = 'SMT' AND A.SPL_CODE7 IS NOT NULL) OR (A.SPL_CODE8 = 'SMT' AND A.SPL_CODE8 IS NOT NULL) OR (A.SPL_CODE9 = 'SMT' AND A.SPL_CODE9 IS NOT NULL))
    </select>
    <select id="checkFWBSMTinAWB" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EDI_FWB WHERE AWB_NO = #awbNo# AND AWB_DATE=#awbDate# AND ((SPH_SPL_CODE1 = 'SMT' AND SPH_SPL_CODE1 IS NOT NULL)  OR (SPH_SPL_CODE2 = 'SMT' AND SPH_SPL_CODE2 IS NOT NULL) OR (SPH_SPL_CODE3 = 'SMT' AND SPH_SPL_CODE3 IS NOT NULL) OR (SPH_SPL_CODE4 = 'SMT' AND SPH_SPL_CODE4 IS NOT NULL) OR (SPH_SPL_CODE5 = 'SMT' AND SPH_SPL_CODE5 IS NOT NULL) OR (SPH_SPL_CODE6 = 'SMT' AND SPH_SPL_CODE6 IS NOT NULL) OR (SPH_SPL_CODE7 = 'SMT' AND SPH_SPL_CODE7 IS NOT NULL) OR (SPH_SPL_CODE8 = 'SMT' AND SPH_SPL_CODE8 IS NOT NULL) OR (SPH_SPL_CODE9 = 'SMT' AND SPH_SPL_CODE9 IS NOT NULL))   </select>
<select id="checkFFMSMTinFlt" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM EDI_FFM_SHP A,EDI_FFM_ULD B,EDI_FFM_MSG C 
											  WHERE B.TR_NO = A.TR_NO AND B.DOC_LINE_NO = A.UDOC_LINE_NO
												AND  C.TR_NO = A.TR_NO AND C.FFM_STATUS = 'P'
                        AND A.AWB_NO= #awbNo# AND A.AWB_DATE = #awbDate# AND C.FLT_KEY=#impFltKey# AND C.FLT_DATE = #impFltDate#
                        AND ((A.SPL_CODE1 = 'SMT' AND A.SPL_CODE1 IS NOT NULL) OR (A.SPL_CODE2 = 'SMT' AND A.SPL_CODE2 IS NOT NULL) OR (A.SPL_CODE3 = 'SMT' AND A.SPL_CODE3 IS NOT NULL) OR (A.SPL_CODE4 = 'SMT' AND A.SPL_CODE4 IS NOT NULL) OR (A.SPL_CODE5 = 'SMT' AND A.SPL_CODE5 IS NOT NULL) OR (A.SPL_CODE6 = 'SMT' AND A.SPL_CODE6 IS NOT NULL) OR (A.SPL_CODE7 = 'SMT' AND A.SPL_CODE7 IS NOT NULL) OR (A.SPL_CODE8 = 'SMT' AND A.SPL_CODE8 IS NOT NULL) OR (A.SPL_CODE9 = 'SMT' AND A.SPL_CODE9 IS NOT NULL))
    </select>
    <select id="fetchSecJOPcWtsforPman" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT jo_no as joNo,PC AS newJoPcs,WT AS newJoWt FROM EXP_SEC_CHK_JO WHERE JO_TYPE='SC' AND STATUS IN ('NEW') AND AWB_NO = #awbNo# AND AWB_DATE=#awbDate# AND STATUS = 'NEW' AND SOURCE not in ('Transit Control Check List','Premanifest By AWB')
	</select>
	<select id="fetchSecJOPmanPcWts" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT PMAN_PCS as pmanPcs,PMAN_WT as pmanWt FROM EXP_PMANIFEST_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND FLT_KEY=#expFltKey# AND FLT_DATE=#expFltDate# AND UNLDG_PT =#ldgPt#
	</select>
	<update id="decAmendSecJOStatus" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
	UPDATE EXP_SEC_CHK_JO SET pc = #joPcs#,wt = #joWt#,LM_USER_ID='SYSUSER',LM_DATE=SYSDATE WHERE jo_no=#joNo#
	</update>
	<select id="getfstunldgPrtForSecChk" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
	SELECT OFF_POINT FROM FLT_OPR_LEG WHERE FLT_KEY=#expFltKey# AND SCH_DATE = #expFltDate# AND FLT_TYPE = 'D' AND LEG_ORD  = 1
	</select>
<select id="checkPmanUSAport" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
	<![CDATA[
	SELECT count(1) from(
	SELECT COUNT(1) AS cnt FROM MAST_SEC_CHECK SECCK
	WHERE SECCK.CARR_CODE=#carrCode# AND SECCK.PORT = #ldgPt# 
	AND NVL(SECCK.ACTIVE,'N')='Y'
	UNION
	SELECT COUNT(1) AS cnt FROM MAST_SEC_CHECK SECCK
	WHERE SECCK.CARR_CODE=#carrCode# 
	AND NVL(SECCK.ACTIVE,'N')='Y'
	AND NOT EXISTS (SELECT NULL FROM MAST_SEC_CHECK SECCK
	WHERE SECCK.CARR_CODE=#carrCode# AND SECCK.PORT = #ldgPt#)
	AND SECCK.CTRY_CODE=(SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#ldgPt#)) WHERE cnt>0
	]]>
	</select>
	
	<select id="checkPmanNonApprlCheckport" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
		SELECT COUNT(1)
	FROM mast_pman_non_apprvl_port A,
	  IMP_CAR_SHP C
	WHERE A.CARR_CODE = C.CARR_CODE
	AND A.PORT        = C.ldg_point
	and A.CTRY_CODE=#ctryCode#
	AND C.AWB_NO  =#awbNo#
	AND C.AWB_DATE=#awbDate#
	</select>
	
	<select id="checkPmanfstunldUSAport" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
	SELECT
  (CASE
    WHEN (SELECT COUNT(1) AS cnt
      FROM MAST_CITY A,
        MAST_COUNTRY B
      WHERE A.CTRY_CODE = B.CODE
      AND B.REG_CODE    = 'SA'
      AND A.CODE        = LEG.OFF_POINT) >0
    THEN 1
    ELSE (
      CASE
        WHEN (SELECT COUNT(1) AS cnt
          FROM MAST_CITY
          WHERE CTRY_CODE='US'
          AND CODE       =LEG.OFF_POINT) >0
        THEN 1
        ELSE (
          CASE
            WHEN (SELECT COUNT(1) AS cnt
              FROM MAST_ARPT A,
                MAST_CITY B,
                MAST_COUNTRY C
              WHERE A.CITY_CODE=B.CODE
              AND B.CTRY_CODE  = C.CODE
              AND C.REG_CODE   = 'SA'
              AND A.CODE       =LEG.OFF_POINT) >0
            THEN 1
            ELSE (
              CASE
                WHEN (SELECT COUNT(1) AS cnt
                  FROM MAST_ARPT A,
                    MAST_CITY B
                  WHERE A.CITY_CODE=B.CODE
                  AND B.CTRY_CODE  = 'US'
                  AND A.CODE       =LEG.OFF_POINT) >0
                THEN 1
                ELSE 0
              END)
          END)
      END)
  END) AS cnt
FROM FLT_OPR_LEG LEG
WHERE FLT_TYPE='D'
AND FLT_KEY   =#expFltKey#
AND SCH_DATE  =#expFltDate#
AND FLT_TYPE  = 'D'
AND LEG_ORD   = 1
	</select>
	<select id="checkSMTSplCode" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
	SELECT COUNT(1) FROM AWB WHERE AWB_NO = #awbNo# AND AWB_DATE= #awbDate# AND ((SPL_CODE1 IS NOT NULL AND SPL_CODE1='SMT') OR (SPL_CODE2 IS NOT NULL AND SPL_CODE2='SMT') OR (SPL_CODE3 IS NOT NULL AND SPL_CODE3='SMT')
                                OR (SPL_CODE4 IS NOT NULL AND SPL_CODE4='SMT') OR (SPL_CODE5 IS NOT NULL AND SPL_CODE5='SMT') OR (SPL_CODE6 IS NOT NULL AND SPL_CODE6='SMT') 
                                OR (SPL_CODE7 IS NOT NULL AND SPL_CODE7='SMT') OR (SPL_CODE8 IS NOT NULL AND SPL_CODE8='SMT') OR (SPL_CODE9 IS NOT NULL AND SPL_CODE9='SMT'))
	</select>
	<select id="fetchJoNoforexpcar" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
	SELECT JO_NO FROM EXP_SEC_CHK_JO WHERE JO_TYPE='SC' AND STATUS IN ('NEW') AND FLT_KEY IS NULL AND FLT_DATE IS NULL AND AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ROWNUM=1
	</select>
	<select id="fetchOldCompJoPcWTS" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT SUM(joPcs) compJoPcs,sum(joWt) compJoWt from (
		SELECT NVL(SUM(PC),0) AS joPcs,
		  NVL(SUM(WT),0)      AS joWt
		FROM EXP_SEC_CHK_JO
		WHERE STATUS NOT IN ('VOID','NEW')
		AND JO_TYPE='SC'
		AND AWB_NO        = #awbNo#
		AND AWB_DATE      =#awbDate#
		union all
		SELECT NVL(SUM(DTL.SC_PCS),0) joPcs,NVL(SUM(DTL.SC_WT),0) JOWt
FROM EXP_RCL_HD HD,
  EXP_RCL_SEC_CHK_DTL DTL
WHERE DTL.RCL_NO = HD.RCL_NO
AND HD.STATUS   != 'VOID'
AND HD.AWB_NO    = #awbNo#
AND HD.AWB_DATE  =#awbDate#
UNION ALL
SELECT NVL(SUM(DTL.SC_PCS),0) joPcs,NVL(SUM(DTL.SC_WT),0) JOWt
FROM EXP_RCL_HD HD,
EXP_RCL_BRKDN BRKDN,
  EXP_RCL_SEC_CHK_DTL DTL
WHERE DTL.RCL_NO = HD.RCL_NO
AND BRKDN.RCL_NO = HD.RCL_NO
AND HD.STATUS   != 'VOID'
AND BRKDN.AWB_NO    = #awbNo#
AND BRKDN.AWB_DATE  =#awbDate#)
	</select>
	<select id="fetchSecCarCompJOPcWts" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT nvl(sum(PC),0) AS compJoPcs,nvl(sum(WT),0) AS compJoWt FROM EXP_SEC_CHK_JO WHERE JO_TYPE='SC' AND STATUS NOT IN ('VOID') AND AWB_NO = #awbNo# AND AWB_DATE=#awbDate#
	</select>
	<select id="fetchOldNewJoPcWTS" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT sum(PC) AS newJoPcs,sum(WT) AS newJoWt FROM EXP_SEC_CHK_JO WHERE JO_TYPE='SC' AND STATUS IN ('NEW') AND AWB_NO = #awbNo# AND AWB_DATE=#awbDate#
	</select>
	<insert id="insertcommonsecChkJO" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO">
		Insert into EXP_SEC_CHK_JO (JO_NO,AWB_NO,AWB_DATE,JO_TYPE,PC,WT,STATUS,CHARGE_TO,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,FLT_KEY,FLT_DATE,SOURCE,ORIG,TR_TYPE) values 
		(lpad(EXP_SEC_CHK_JO_SEQ.nextVal,7,'0'),#awbNo#,to_date(#awbDate#,'DDMONYY'),#joOrderType#,#joPcs#,#joWt#,'NEW','AIRLINE','SYSTEM',sysdate,'SYSTEM',sysdate,#fltKey#,to_date(#fltDate#,'DDMONYY'),#source#,#origin#,'MSJOB')
	</insert>
	<select id="fetchTotSecNewSCJOPcWts" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT nvl(sum(PC),0) AS newJoPcs,nvl(sum(WT),0) AS newJoWt FROM EXP_SEC_CHK_JO WHERE JO_TYPE='SC' AND STATUS IN ('NEW') AND AWB_NO = #awbNo# AND AWB_DATE=#awbDate# AND NVL(FLT_KEY,'*') = NVL(#fltKey#,'*') AND NVL(FLT_DATE,'01JAN01') = NVL(#fltDate#,'01JAN01')
	</select>
	<select id="fetchTotSecNewSCJOPcWtswotFlt" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT nvl(sum(PC),0) AS newJoPcs,nvl(sum(WT),0) AS newJoWt FROM EXP_SEC_CHK_JO WHERE JO_TYPE='SC' AND STATUS IN ('NEW') AND AWB_NO = #awbNo# AND AWB_DATE=#awbDate# 
	</select>
	<select id="fetchSecNewSrJOPcWts" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT jo_no as joNo,PC AS newJoPcs,WT AS newJoWt FROM EXP_SEC_CHK_JO WHERE JO_TYPE='SC' AND STATUS IN ('NEW') AND AWB_NO = #awbNo# AND AWB_DATE=#awbDate# AND SOURCE = #source# AND NVL(FLT_KEY,'*') = NVL(#fltKey#,'*') AND NVL(FLT_DATE,'01JAN01') = NVL(#fltDate#,'01JAN01')
	</select>
<select id="fetchOtherFltSecNewSrJOPcWts" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT nvl(sum(PC),0)         AS newJoPcs,
  nvl(sum(WT),0)         AS newJoWt
FROM EXP_SEC_CHK_JO
WHERE STATUS  IN ('NEW')
AND JO_TYPE='SC'
AND AWB_NO                  = #awbNo#
AND AWB_DATE                = #awbDate#
AND (NVL(FLT_KEY,'*')        != NVL(#fltKey#,'*')
OR NVL(FLT_DATE,'01JAN01') != NVL(#fltDate#,'01JAN01'))
	</select>
	<select id="fetchSecNewSrJOPcWtswotFlt" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT nvl(sum(PC),0) AS newJoPcs,nvl(sum(WT),0) AS newJoWt FROM EXP_SEC_CHK_JO WHERE STATUS IN ('NEW') AND AWB_NO = #awbNo# AND AWB_DATE=#awbDate#
	</select>
	<select id="fetchSecCompSrJOPcWts" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT SUM(joPcs) compJoPcs,sum(joWt) compJoWt from (
SELECT PC         AS joPcs,
  WT         AS joWt
FROM EXP_SEC_CHK_JO
WHERE STATUS NOT           IN ('VOID','NEW')
AND AWB_NO                  = #awbNo#
AND AWB_DATE                = #awbDate#
AND SOURCE                  = #source#
AND NVL(FLT_KEY,'*')        = NVL(#fltKey#,'*')
AND NVL(FLT_DATE,'01JAN01') = NVL(#fltDate#,'01JAN01')
UNION ALL
SELECT NVL(SUM(DTL.SC_PCS),0) joPcs,NVL(SUM(DTL.SC_WT),0) JOWt
FROM EXP_RCL_HD HD,
  EXP_RCL_SEC_CHK_DTL DTL
WHERE DTL.RCL_NO = HD.RCL_NO
AND HD.STATUS   != 'VOID'
AND HD.AWB_NO    = #awbNo#
AND HD.AWB_DATE  =#awbDate#
UNION ALL
SELECT NVL(SUM(DTL.SC_PCS),0) joPcs,NVL(SUM(DTL.SC_WT),0) JOWt
FROM EXP_RCL_HD HD,
EXP_RCL_BRKDN BRKDN,
  EXP_RCL_SEC_CHK_DTL DTL
WHERE DTL.RCL_NO = HD.RCL_NO
AND BRKDN.RCL_NO = HD.RCL_NO
AND HD.STATUS   != 'VOID'
AND BRKDN.AWB_NO    = #awbNo#
AND BRKDN.AWB_DATE  =#awbDate#)
	</select>
<select id="fetchSecCompSrJOPcWtswotFlt" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT SUM(joPcs) compJoPcs,sum(joWt) compJoWt from (
SELECT NVL(SUM(PC),0) AS joPcs,
  NVL(SUM(WT),0)      AS joWt
FROM EXP_SEC_CHK_JO
WHERE STATUS NOT IN ('VOID','NEW')
AND AWB_NO        = #awbNo#
AND AWB_DATE      =#awbDate#
UNION ALL
SELECT NVL(SUM(DTL.SC_PCS),0) joPcs,NVL(SUM(DTL.SC_WT),0) JOWt
FROM EXP_RCL_HD HD,
  EXP_RCL_SEC_CHK_DTL DTL
WHERE DTL.RCL_NO = HD.RCL_NO
AND HD.STATUS   != 'VOID'
AND HD.AWB_NO    = #awbNo#
AND HD.AWB_DATE  =#awbDate#
UNION ALL
SELECT NVL(SUM(DTL.SC_PCS),0) joPcs,NVL(SUM(DTL.SC_WT),0) JOWt
FROM EXP_RCL_HD HD,
EXP_RCL_BRKDN BRKDN,
  EXP_RCL_SEC_CHK_DTL DTL
WHERE DTL.RCL_NO = HD.RCL_NO
AND BRKDN.RCL_NO = HD.RCL_NO
AND HD.STATUS   != 'VOID'
AND BRKDN.AWB_NO    = #awbNo#
AND BRKDN.AWB_DATE  =#awbDate#)
	</select>
	<select id="fetchExpmanfDetails" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT SUM(mnfstPcs) mnfstPcs,SUM(mnfstWt) mnfstWt FROM (
SELECT NVL(SUM(PMAN_PCS),'0') mnfstPcs,NVL(SUM(PMAN_WT),'0')  mnfstWt FROM EXP_PMANIFEST_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
UNION ALL
SELECT NVL(SUM(BULK_PCS+ppk_pcs),'0') mnfstPcs,NVL(SUM(BULK_WT+PPK_WT),'0') mnfstWt FROM EXP_PMAN_TARMAC_AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#)
	</select>
	<select id="fetchTransManstDetails" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT NVL(SUM(MANIFEST_PCS),'0') mnfstPcs,NVL(SUM(MANIFEST_WT),'0') mnfstWt FROM IMP_CAR_SHP WHERE AWB_NO =#awbNo# AND AWB_DATE=#awbDate#
	</select>
	<select id="fetchsecChkDetails" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT SUM(joPcs) secJoPcs,sum(joWt) secJoWt from (
		SELECT NVL(SUM(PC),'0') joPcs,
		  NVL(SUM(WT),'0') joWt
		FROM EXP_SEC_CHK_JO
		WHERE AWB_NO = #awbNo#
		AND AWB_DATE =#awbDate#
		AND JO_TYPE='SC'
		AND STATUS  != 'VOID'
		UNION ALL
		SELECT NVL(SUM(DTL.SC_PCS),0) joPcs,NVL(SUM(DTL.SC_WT),0) JOWt
		FROM EXP_RCL_HD HD,
		  EXP_RCL_SEC_CHK_DTL DTL
		WHERE DTL.RCL_NO = HD.RCL_NO
		AND HD.STATUS   != 'VOID'
		AND HD.AWB_NO    = #awbNo#
		AND HD.AWB_DATE  =#awbDate#
		UNION ALL
		SELECT NVL(SUM(DTL.SC_PCS),0) joPcs,NVL(SUM(DTL.SC_WT),0) JOWt
		FROM EXP_RCL_HD HD,
		EXP_RCL_BRKDN BRKDN,
		  EXP_RCL_SEC_CHK_DTL DTL
		WHERE DTL.RCL_NO = HD.RCL_NO
		AND BRKDN.RCL_NO = HD.RCL_NO
		AND HD.STATUS   != 'VOID'
		AND BRKDN.AWB_NO    = #awbNo#
		AND BRKDN.AWB_DATE  =#awbDate#)
	</select>
<select id="fetchrclsecChkDetails" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT SUM(joPcs) secJoPcs,sum(joWt) secJoWt from (
		SELECT NVL(SUM(DTL.SC_PCS),0) joPcs,NVL(SUM(DTL.SC_WT),0) JOWt
		FROM EXP_RCL_HD HD,
		  EXP_RCL_SEC_CHK_DTL DTL
		WHERE DTL.RCL_NO = HD.RCL_NO
		AND HD.STATUS   != 'VOID'
		AND HD.JO_TYPE='SC'
		AND HD.AWB_NO    = #awbNo#
		AND HD.AWB_DATE  =#awbDate#
		UNION ALL
		SELECT NVL(SUM(DTL.SC_PCS),0) joPcs,NVL(SUM(DTL.SC_WT),0) JOWt
		FROM EXP_RCL_HD HD,
		EXP_RCL_BRKDN BRKDN,
		  EXP_RCL_SEC_CHK_DTL DTL
		WHERE DTL.RCL_NO = HD.RCL_NO
		AND BRKDN.RCL_NO = HD.RCL_NO
		AND HD.STATUS   != 'VOID'
		AND BRKDN.AWB_NO    = #awbNo#
		AND BRKDN.AWB_DATE  =#awbDate#)
	</select>
        <select id="fetchSecAwbCtryCode" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
	SELECT CTRY_CODE AS ctryCode FROM MAST_CITY WHERE CODE = #ldgPt# AND ROWNUM=1
	</select>
	<update id="updateCommonSecJOPcWt" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
	UPDATE EXP_SEC_CHK_JO SET PC = PC + #joPcs#,WT = WT + #joWt#,TR_TYPE='MSJOB',LM_USER_ID='SYSUSER',LM_DATE=SYSDATE WHERE jo_no=#joNo#
	</update>
	
	<update id="updateCommonSecJOStatus" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
	UPDATE EXP_SEC_CHK_JO SET STATUS = 'VOID',TR_TYPE='VSCJO',LM_USER_ID='SYSUSER',LM_DATE=SYSDATE WHERE jo_no=#joNo#
	</update>
	<update id="decCommonSecJOStatus" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
	UPDATE EXP_SEC_CHK_JO SET pc = pc - #joPcs#,wt = wt- #joWt#,LM_USER_ID='SYSUSER',LM_DATE=SYSDATE WHERE jo_no=#joNo#
	</update>
	
	<select id="fetchSecAutoSHCsfromsysparam" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="java.lang.String">  
	    	   select rule_value from cmsrules  where rule_code='DEF_SPL_FOR_AUTO_SECHK'
	</select>
	<select id="fetchAwbSHCsforAutoSHC" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="java.lang.String">  
	    	   SELECT decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '',','))
		               || decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '',','))
		               || decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '',','))
		               || decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '',','))
		               || decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '',','))
		               || decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '',','))
		               || decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '',','))
		               || decode(spl_code8, null, '', spl_code8 || decode(spl_code9, null, '',',')) 
		               || decode(spl_code9, null, '', spl_code9 ) SHC FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	     </select>
	     <select id="checkAutoShcexistotnotinawb" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="java.lang.Integer">
    	select count(1) from awb where AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND (spl_code1=#splCode# or spl_code2=#splCode# or spl_code3=#splCode# OR
                                                                        spl_code4=#splCode# or spl_code5=#splCode# or spl_code6=#splCode# OR
                                                                        spl_code7=#splCode# or spl_code8=#splCode# or spl_code9=#splCode#)
        </select>
        <select id="getSecJoList" parameterClass="map" resultClass="cargo.cms.export.bo.ExpCarBO">
		SELECT A.FLT_KEY fltKey,to_char(a.flt_date,'DDMONYY') fltDate 
		FROM EDI_FFM_MSG A,
		EDI_FFM_SHP B
		WHERE A.TR_NO=B.TR_NO
		AND B.AWB_NO=#AWBNO#
		AND B.AWB_DATE=TO_DATE(#AWBDATE#,'DDMONYY')
		AND A.FFM_STATUS='P'
		and exists (select PORT from mast_non_apprvl_port where carr_code = A.CARR_CODE AND PORT = B.BRD_POINT AND SYSDATE BETWEEN EFF_DATE_FROM AND EFF_DATE_TO)
		AND (NOT EXISTS (SELECT PC FROM EXP_SEC_CHK_JO WHERE AWB_NO = B.AWB_NO AND AWB_DATE=B.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE)
    or ((SELECT nvl(sum(shp.manifest_pcs),0) FROM imp_car_shp shp WHERE shp.AWB_NO = B.AWB_NO AND shp.AWB_DATE=B.AWB_DATE AND shp.FLT_KEY=A.FLT_KEY AND shp.FLT_DATE=A.FLT_DATE) > (SELECT nvl(sum(PC),0) FROM EXP_SEC_CHK_JO WHERE STATUS != 'VOID' AND AWB_NO = B.AWB_NO AND AWB_DATE=B.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE)))
	</select>	
        <select id="getManfstDetailsForAutoSecChk" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="cargo.cms.export.bo.ExpCarBO">
		SELECT NVL(SUM(manifest_pcs),0) as manfstPc,NVL(SUM(MANIFEST_WT),0) as manfstWt FROM IMP_CAR_SHP WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate# AND FLT_KEY=#impFltKey# AND FLT_DATE=#impFltDate# 
	</select>
	 <select id="findNotNewRecords" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="java.lang.Integer">
    	SELECT COUNT(1) FROM EXP_SEC_CHK_JO WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate# AND STATUS NOT IN ('NEW','VOID') AND JO_TYPE='SC'
    </select>
	<update id="updateCommonSecJOStatusinEXPCAR" parameterClass="cargo.cms.export.bo.ExpCarBO" >
	UPDATE EXP_SEC_CHK_JO SET STATUS = 'VOID',TR_TYPE='VSCJO',LM_USER_ID='SYSUSER',LM_DATE=SYSDATE WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate#
	</update>
	<select id="findNotNewRecordsImp" parameterClass="cargo.cms.imprt.bo.MaintainCARBO" resultClass="java.lang.Integer">
    	SELECT COUNT(1) FROM EXP_SEC_CHK_JO WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND STATUS NOT IN ('NEW','VOID') AND JO_TYPE='SC'
    </select>
	<update id="updateCommonSecJOStatusinIMPCAR" parameterClass="cargo.cms.imprt.bo.MaintainCARBO" >
	UPDATE EXP_SEC_CHK_JO SET STATUS = 'VOID',TR_TYPE='VSCJO',LM_USER_ID='SYSUSER',LM_DATE=SYSDATE WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</update>
	<insert id="createUldEventOnULDSHC" parameterClass="java.util.HashMap">
		Insert into his_uld_evnt (ULD_KEY,COD_TRA_SEQ_NUM,COD_HIS_TYP,COD_FUNC,MODULE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
		values (#ULD_KEY#,#COD_TRA_SEQ_NUM#,'E','ULDSHC','W',#USER#,SYSDATE,null,null)
	</insert>
	<insert id="createUldEventDtlsOnULDSHC" parameterClass="java.util.HashMap">
		Insert into his_uld_evnt_dtl (ULD_KEY,COD_TRA_SEQ_NUM,COD_SEQ_NUM,COD_ACT,COD_HIS_SEQ_NUM,DES_HIS_DTS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
			values (#ULD_KEY#,#COD_TRA_SEQ_NUM#,SQ_ULD_HIS.NEXTVAL,'U',727,#DESC#,#USER#,SYSDATE,null,null)
	</insert>

<select id="chkEndorseExistOnBUComplete" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT stragg(stringdelim(SUBSTR(a.AWB_no,0,3) || '-' || SUBSTR(a.AWB_no,4),','))
				FROM (
				  (SELECT DISTINCT b.awb_no
				  FROM EXP_PMANIFEST_ULD A, EXP_PMANIFEST_ULD_AWB B, uld_inventory uinv, AWB C, MAST_SPL_HAND_CODE M
				  WHERE uinv.uld_key = A.ULD_BT_NO AND A.FLT_KEY = uinv.flt_key AND A.FLT_DATE  = uinv.flt_date
				  AND A.ULD_BT_NO = #uldKey#
				  AND A.FLT_KEY   = B.FLT_KEY AND A.FLT_DATE  = B.FLT_DATE AND A.ULD_BT_NO = B.ULD_BT_NO
				  AND B.AWB_NO    = C.AWB_NO AND B.AWB_DATE  = C.AWB_DATE AND ENDR_BC     ='Y'
				  AND (M.CODE     =C.SPL_CODE1 OR M.CODE       =C.SPL_CODE2 OR M.CODE       =C.SPL_CODE3 OR M.CODE       =C.SPL_CODE4
				  OR M.CODE       =C.SPL_CODE5  OR M.CODE       =C.SPL_CODE6  OR M.CODE       =C.SPL_CODE7  OR M.CODE       =C.SPL_CODE8
				  OR M.CODE       =C.SPL_CODE9)
				  ) a )
	</select>

	<select id="uldEndorseCompleteCnt" parameterClass="java.lang.String" resultClass="java.lang.Integer">	
		SELECT COUNT(1)
			FROM EXP_PMANIFEST_ULD A,
			  uld_inventory B
			WHERE B.uld_key    = A.ULD_BT_NO
			AND A.FLT_KEY      = B.FLT_KEY
			AND A.FLT_DATE     = B.FLT_DATE
			AND A.ULD_BT_NO    = #uldKey#
			AND a.endorsed_by IS NOT NULL
	</select>
<update id="updateHandlingModeFromchangePkg" parameterClass="cargo.cms.export.bo.ChangePackingBO" >
		UPDATE EXP_PMANIFEST_ULD SET hdlg_mode  =  null WHERE FLT_KEY = #fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldNo#
	</update>

<update id="updateAWBInformationForEXP"  parameterClass="cargo.cms.awb.bo.AWBEnquiryBO">
		update AWB set
		ACCEPT_MODE=#acceptMode#,
		CATALOG=#catalog#,
		CARR_CODE=#carrCode#,
		ORIG =#awbOrigin#,
		DEST =#awbDest#,
		PCS=#loadedPcs#,
		WT=#loadedWt#,
		CONTENT=#content#,			
		LM_USER_ID='GLS',
		LM_DATE=SYSDATE,
		TR_TYPE='EXCAR'		
		WHERE AWB_NO =#awbNo# AND AWB_DATE=#awbDate#
	</update>

	<select id="sqlGetFinalLoadJob" parameterClass="java.util.HashMap" resultClass="cargo.cms.common.utils.bo.BatchJobBO">
		select 
		FLT_KEY_IN inboundfltKey,
		TO_CHAR(FLT_DATE_IN,'DDMONYY') inboundfltDate,
		FLT_KEY_OUT outboundfltKey,
		TO_CHAR(FLT_DATE_OUT,'DDMONYY') outboundfltDate,
		CALL_SIGN_IN callSignIn,
		CALL_SIGN_OUT callsignOut,
		ACFT_TYPE_IN acTypeIn,
		ACFT_TYPE_OUT acTypeOut,
		nvl(MAIL_PCS_IN,0) mailPcIn,
  		TO_NUMBER(TRIM(TO_CHAR(NVL((MAIL_WT_IN),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') mailWtIn,
  		nvl(MAIL_AWB_CNT_IN,0) mailAwbCountIn,
 		nvl(MAIL_PCS_OUT,0) mailPcOut,
  		TO_NUMBER(TRIM(TO_CHAR(NVL((MAIL_WT_OUT),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') mailWtOut,
  		nvl(MAIL_AWB_CNT_OUT,0) mailAwbCountOut,
  		nvl(MAIL_OL_PCS,0) mailOfldPc,
  		TO_NUMBER(TRIM(TO_CHAR(NVL((MAIL_OL_WT),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') mailOfldWt,
  		nvl(CARGO_PCS_IN,0) cargoPcIn,
  		TO_NUMBER(TRIM(TO_CHAR(NVL((CARGO_WT_IN),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') cargoWtIn,
  		nvl(CARGO_AWB_CNT_IN,0) cargoAwbCountIn,
  		nvl(CARGO_PCS_OUT,0) cargoPcOut,
  		TO_NUMBER(TRIM(TO_CHAR(NVL((CARGO_WT_OUT),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') cargoWtOut,
  		nvl(CARGO_AWB_CNT_OUT,0) cargoAwbCountOut,
  		nvl(CARGO_OL_PCS,0) cargoOfldPc,
  		TO_NUMBER(TRIM(TO_CHAR(NVL((CARGO_OL_WT),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') cargoOfldWt,
  		case when (FLT_KEY_OUT is not null and FLT_KEY_IN is null) then
	      	1
	      when (FLT_KEY_OUT is not null and FLT_KEY_IN is not null) then
	      	2
	      when (FLT_KEY_OUT is  null and FLT_KEY_IN is not null) then
	      	3
	      END orderClause
		from REPT_FINAL_LOAD
		where 1=1
		<isNotEmpty property="CARR_CODE">
			AND CARRCODE = #CARR_CODE#
		</isNotEmpty>		
		order by orderClause,outboundfltDate,inboundfltDate
	</select>
	<delete id="sqldelete_Final_Load_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_FINAL_LOAD_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND  AIRLINE  = #airLine# 
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#					
	</delete>


	<insert id="sqlInsert_Final_Load_image" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	insert into REPT_FINAL_LOAD_IMAGE(
	FLT_KEY_IN,
	FLT_DATE_IN,
	ACT_DATE_IN,
	FLT_KEY_OUT,
	FLT_DATE_OUT,
	ACT_DATE_OUT,
	CALL_SIGN_IN,
	CALL_SIGN_OUT,
	ACFT_TYPE_IN,
	ACFT_TYPE_OUT,
	MAIL_PCS_IN,
	MAIL_WT_IN,
	MAIL_AWB_CNT_IN,
	MAIL_PCS_OUT,
	MAIL_WT_OUT,
	MAIL_AWB_CNT_OUT,
	MAIL_OL_PCS,
	MAIL_OL_WT,
	CARGO_PCS_IN,
	CARGO_WT_IN,
	CARGO_AWB_CNT_IN,
	CARGO_PCS_OUT,
	CARGO_WT_OUT,
	CARGO_AWB_CNT_OUT,
	CARGO_OL_PCS,
	CARGO_OL_WT,
	REPORT_NAME,
	REPORT_TYPE,
	FROM_DATE,
	TO_DATE,
	CR_DATE,
	CR_USER_ID,
	CALL_SIGN,
	AIRLINE)
	select 
	FLT_KEY_IN,
	TO_CHAR(FLT_DATE_IN,'DDMONYY'),
	ACT_DATE_IN,
	FLT_KEY_OUT,
	TO_CHAR(FLT_DATE_OUT,'DDMONYY'),
	ACT_DATE_OUT,
	CALL_SIGN_IN callSignIn,
	CALL_SIGN_OUT callsignOut,
	ACFT_TYPE_IN acTypeIn,
	ACFT_TYPE_OUT acTypeOut,
	MAIL_PCS_IN mailPcIn,
  	TO_NUMBER(TRIM(TO_CHAR(NVL((MAIL_WT_IN),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') mailWtIn,
  	MAIL_AWB_CNT_IN mailAwbCountIn,
  	MAIL_PCS_OUT mailPcOut,
  	TO_NUMBER(TRIM(TO_CHAR(NVL((MAIL_WT_OUT),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') mailWtOut,
  	MAIL_AWB_CNT_OUT mailAwbCountOut,
  	MAIL_OL_PCS mailOfldPc,
  	TO_NUMBER(TRIM(TO_CHAR(NVL((MAIL_OL_WT),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') mailOfldWt,
  	CARGO_PCS_IN cargoPcIn,
  	TO_NUMBER(TRIM(TO_CHAR(NVL((CARGO_WT_IN),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') cargoWtIn,
  	CARGO_AWB_CNT_IN cargoAwbCountIn,
  	CARGO_PCS_OUT cargoPcOut,
  	TO_NUMBER(TRIM(TO_CHAR(NVL((CARGO_WT_OUT),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') cargoWtOut,
  	CARGO_AWB_CNT_OUT cargoAwbCountOut,
  	CARGO_OL_PCS cargoOfldPc,
  	TO_NUMBER(TRIM(TO_CHAR(NVL((CARGO_OL_WT),0),'999,999,999,999,999,999,999,999,999,999,999,990.99')),'999,999,999,999,999,999,999,999,999,999,999,990.99') cargoOfldWt,
	#reportName# ,
	#reportType# ,
	#fromDate# ,
	#toDate# ,
	SYSDATE,
	'JOB',
	NULL,
	#airLine#
	from REPT_FINAL_LOAD
	WHERE CARRCODE = #airLine#
	</insert>
	<select id="getAWBListfromawbInventory" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
	SELECT AWB_NO AS awbNo,TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate FROM AWB_INVENTORY WHERE ULD_KEY IS NOT NULL AND ULD_KEY=#uldKey#
	</select>
	<insert id="createUldEventOnUITTag" parameterClass="java.util.HashMap">
		Insert into his_uld_evnt (ULD_KEY,COD_TRA_SEQ_NUM,COD_HIS_TYP,COD_FUNC,MODULE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
		values (#ULD_KEY#,#COD_TRA_SEQ_NUM#,'E','UITTAG','W',#USER#,SYSDATE,null,null)
	</insert>
	<insert id="createUldEventDtlsOnUITTag" parameterClass="java.util.HashMap">
		Insert into his_uld_evnt_dtl (ULD_KEY,COD_TRA_SEQ_NUM,COD_SEQ_NUM,COD_ACT,COD_HIS_SEQ_NUM,DES_HIS_DTS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
			values (#ULD_KEY#,#COD_TRA_SEQ_NUM#,SQ_ULD_HIS.NEXTVAL,'U',719,#DESC#,#USER#,SYSDATE,null,null)
	</insert>
	<select id="getDefaultConfiguration" parameterClass="java.lang.String"  resultClass="java.lang.String">
	SELECT AUTO_GENERTE_BUP FROM MAST_CARRIER WHERE CODE IN(SELECT CARR_CODE FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#PARAM#)
	</select>
	<select id="fetchreqsecChkDetails" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT NVL(SUM(reqPcs),'0') as secJoPcs,NVL(SUM(reqWt),'0') as secJoWt FROM (
SELECT NVL(SUM(PMAN.PMAN_PCS),'0') AS reqPcs,NVL(SUM(PMAN.PMAN_WT),'0') AS reqWt
  FROM AWB AWB,
    EXP_PMANIFEST_AWB PMAN,FLT_OPR_LEG LEG
  WHERE PMAN.AWB_NO = AWB.AWB_NO
  AND PMAN.AWB_DATE = AWB.AWB_DATE
  AND LEG.FLT_KEY=PMAN.FLT_KEY
    AND LEG.SCH_DATE = PMAN.FLT_DATE
    AND LEG.FLT_TYPE = 'D'
    AND LEG.LEG_ORD  = 1
  AND (AWB.AWB_TYPE = 'T'
  OR AWB.AWB_TYPE   = 'E')
  AND (EXISTS
    (SELECT NULL FROM MAST_SEC_CHECK SECCK
     WHERE SECCK.CARR_CODE = AWB.CARR_CODE
     AND SECCK.PORT = LEG.OFF_POINT
     AND NVL(SECCK.ACTIVE,'N')='Y'
	UNION
	SELECT NULL FROM MAST_SEC_CHECK SECCK
     WHERE SECCK.CARR_CODE = AWB.CARR_CODE
     AND NVL(SECCK.ACTIVE,'N')='Y'
     AND NOT EXISTS (SELECT NULL FROM MAST_SEC_CHECK SECCK
     WHERE SECCK.CARR_CODE = AWB.CARR_CODE
     AND SECCK.PORT = LEG.OFF_POINT)
     AND SECCK.CTRY_CODE IN (SELECT CTRY_CODE
        FROM MAST_CITY A
        WHERE A.CODE=LEG.OFF_POINT)   
    )
 ) 
  AND AWB.AWB_NO  =#awbNo#
  AND AWB.AWB_DATE=#awbDate#
  UNION ALL
  SELECT NVL(SUM((C.manifest_pcs +
    CASE
      WHEN C.CIR_PROC_USER IS NULL
      THEN 0
      ELSE
        CASE
          WHEN C.CIR_PCS_TYPE = 'SL'
          THEN -1 * C.CIR_PCS
          ELSE C.CIR_PCS
        END
    END)),'0') AS reqPcs,
    NVL(SUM((C.manifest_wt +
    CASE
      WHEN C.CIR_PROC_USER IS NULL
      THEN 0
      ELSE
        CASE
          WHEN C.CIR_PCS_TYPE = 'SL'
          THEN -1 * C.CIR_WT
          ELSE C.CIR_WT
        END
    END)),'0') AS reqWt
  FROM mast_pman_non_apprvl_port A,
    IMP_CAR_SHP C
  WHERE A.CARR_CODE = C.CARR_CODE
  AND A.PORT        = C.ldg_point
  AND A.CTRY_CODE= #ctryCode#
  AND C.AWB_NO  =#awbNo#
  AND C.AWB_DATE=#awbDate#
  AND NOT EXISTS
    (SELECT NULL
    FROM AWB AWB,
      EXP_PMANIFEST_AWB PMAN
    WHERE PMAN.AWB_NO = AWB.AWB_NO
    AND PMAN.AWB_DATE = AWB.AWB_DATE
    AND (AWB.AWB_TYPE = 'T'
    OR AWB.AWB_TYPE   = 'E')
    AND EXISTS
      (SELECT OFF_POINT
      FROM FLT_OPR_LEG
      WHERE FLT_KEY=PMAN.FLT_KEY
      AND SCH_DATE = PMAN.FLT_DATE
      AND FLT_TYPE = 'D'
      AND LEG_ORD  = 1
      )
    AND (EXISTS
    (SELECT NULL FROM MAST_SEC_CHECK SECCK
     WHERE SECCK.CARR_CODE = AWB.CARR_CODE
     AND SECCK.PORT = PMAN.UNLDG_PT
     AND NVL(SECCK.ACTIVE,'N')='Y'
	UNION
	SELECT NULL FROM MAST_SEC_CHECK SECCK
     WHERE SECCK.CARR_CODE = AWB.CARR_CODE
     AND NVL(SECCK.ACTIVE,'N')='Y'
     AND NOT EXISTS (SELECT NULL FROM MAST_SEC_CHECK SECCK
     WHERE SECCK.CARR_CODE = AWB.CARR_CODE
     AND SECCK.PORT = PMAN.UNLDG_PT)
     AND SECCK.CTRY_CODE IN (SELECT CTRY_CODE
        FROM MAST_CITY A
        WHERE A.CODE=PMAN.UNLDG_PT) 
    )
   )
    AND AWB.AWB_NO  =C.AWB_NO
    AND AWB.AWB_DATE=C.AWB_DATE
    )
  UNION ALL
  SELECT NVL(SUM(PMAN.BULK_PCS+PMAN.PPK_PCS),'0') AS reqPcs,NVL(SUM(PMAN.BULK_WT+PMAN.PPK_WT),'0') AS reqWt
  FROM AWB AWB,
    EXP_PMAN_TARMAC_AWB PMAN,FLT_OPR_LEG LEG
  WHERE PMAN.AWB_NO = AWB.AWB_NO
  AND PMAN.AWB_DATE = AWB.AWB_DATE
  AND LEG.FLT_KEY=PMAN.FLT_KEY
    AND LEG.SCH_DATE = PMAN.FLT_DATE
    AND LEG.FLT_TYPE = 'D'
    AND LEG.LEG_ORD  = 1
  AND (AWB.AWB_TYPE = 'T'
  OR AWB.AWB_TYPE   = 'E')
  AND (EXISTS
    (SELECT NULL FROM MAST_SEC_CHECK SECCK
     WHERE SECCK.CARR_CODE = AWB.CARR_CODE
     AND SECCK.PORT = LEG.OFF_POINT
     AND NVL(SECCK.ACTIVE,'N')='Y'
UNION
SELECT NULL FROM MAST_SEC_CHECK SECCK
     WHERE SECCK.CARR_CODE = AWB.CARR_CODE
     AND NVL(SECCK.ACTIVE,'N')='Y'
     AND NOT EXISTS (SELECT NULL FROM MAST_SEC_CHECK SECCK
     WHERE SECCK.CARR_CODE = AWB.CARR_CODE
     AND SECCK.PORT = LEG.OFF_POINT)
     AND SECCK.CTRY_CODE IN (SELECT CTRY_CODE
        FROM MAST_CITY A
        WHERE A.CODE=LEG.OFF_POINT)  
    )
 )
  AND AWB.AWB_NO  =#awbNo#
  AND AWB.AWB_DATE=#awbDate#)
	</select>
	<delete id="sqldelete_Charging_Ariline_image_AWB" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_CHG_AIRL_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#	
		AND REC_TYPE='AWB'				
	</delete>
	<delete id="sqldelete_Charging_Ariline_image_ULD" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_CHG_AIRL_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#	
		AND REC_TYPE='ULD'				
	</delete>
	<delete id="sqldelete_Charging_Ariline_image_MISC" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_CHG_AIRL_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#	
		AND REC_TYPE='MISC'				
	</delete>
	<insert id="sqlInsert_Charging_Ariline_image_AWB" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	INSERT INTO REPT_CHG_AIRL_IMAGE
	(REC_TYPE  ,
    ACT_DATE ,
    AIRLINE  ,
    FLT_TYPE ,
    FLT_KEY  ,
    FLT_DATE,
    CGO_ACFT_TYPE      ,
	AWB_NO             ,
    ORIG               ,
    DEST               ,
    AWB_TYPE           ,
    CATALOG            ,
	SHC_LIST           ,
	EXCLUSION          ,
    EXP_BULK_WT        ,
    EXP_TS_BULK_WT     ,
    IF_BULK_WT         ,
    TS_PPK_MIX_WT      ,
    OB_TS_NBK_WT       ,
    OFD_BULK_WP_WT     ,
    OFD_BULK_WOP_WT    ,
    OFD_PPK_WT         ,
    OFD_TS_NBK_WT      ,
	TS_MAIL_IN_WT      ,
    TS_MAIL_OUT_WT     ,
    TS_OFD_BULK_WP_WT  ,
    TS_OFD_BULK_WOP_WT ,
	IMP_BULK_WT        ,
    IMP_TS_BULK_WT     ,
    IMP_TS_NBK_WT      ,
    IMP_TS_PPK_WT      ,
    IF_SHP_UPS_WT      ,
    CBX_SHP_WT         ,
    EXP_BULK_EHU       ,
	REPORT_NAME,
	report_type,
	from_date,
	to_date,
	cr_date,
	cr_user_id)
	select 
	REC_TYPE,
	  JOBDATE,
	  CARRIERCODE,
	  FLTTYPE,
	  FLTKEY,
	  FLTDATE,
	  PAXFRTR,
	  AWBNO,
	  AWBORG,
	  AWBDEST,
	  AWBTYPE,
	  CATALOG,
	  SHC,
	  exc,
	  exportBulk,
	 transitBulk,
	 iFbulk,
	 transitPPk,
	 outboundNBK,
	 offloadbulkwith,
	 offloadbulkwithout,
	 offloadPPK,
	 offloadNBK,
	 transitmailInbound,
	 transitmailOutbound,
	 transitoffloadwith,
	 transitoffloadwithout,
	 importbulk,
	 importtransitbulk,
	 importtransitNBK,
	 importtransitPPK,
	 iFshp,
	 cbxshp,
	 exportBulkBU,
	#reportName# ,
	#reportType# ,
	#fromDate# ,
	#toDate# ,
	sysdate ,
	'JOB' 
	  from (
	select 'AWB' REC_TYPE,
    TO_CHAR(act_date,'DDMONYY') as jobDate,
	airline as  carrierCode,
	flt_type as fltType ,
	flt_key as fltKey ,
	flt_date as  fltDate,
	cgo_acft_type as  paxFrtr,
	awb_no as  awbNo,
	orig as awbOrg,
	dest as awbDest,
	awb_type as awbType,
	catalog as catalog,
	shc_list as shc,
	exclusion as exc,
	SUM(EXP_BULK_WT) exportBulk,
	SUM(EXP_TS_BULK_WT) as transitBulk, 
	SUM(IF_BULK_WT) as iFbulk,
	SUM(TS_PPK_MIX_WT) as transitPPk,
	SUM(OB_TS_NBK_WT) as outboundNBK,
	SUM(OFD_BULK_WP_WT) as offloadbulkwith,
	SUM(OFD_BULK_WOP_WT) as offloadbulkwithout,
	SUM(OFD_PPK_WT) as offloadPPK,
	SUM(OFD_TS_NBK_WT) as offloadNBK,
	SUM(TS_MAIL_IN_WT) as transitmailInbound,
	SUM(TS_MAIL_OUT_WT) as transitmailOutbound,
	SUM(TS_OFD_BULK_WP_WT) as transitoffloadwith,
	SUM(TS_OFD_BULK_WOP_WT) as transitoffloadwithout,
	SUM(IMP_BULK_WT) as importbulk,
	SUM(IMP_TS_BULK_WT) as importtransitbulk,
	SUM(IMP_TS_NBK_WT) as importtransitNBK,
	SUM(IMP_TS_PPK_WT) as importtransitPPK,
	SUM(IF_SHP_UPS_WT) as iFshp,
	SUM(CBX_SHP_WT) as cbxshp,
	SUM(EXP_BULK_EHU) as exportBulkBU
	FROM REPT_CHG_AIRL
	WHERE REC_TYPE = 'AWB' 
	AND ACT_DATE = #jobDate#
	GROUP BY 'AWB', TO_CHAR(act_date,'DDMONYY'), airline, flt_type, flt_key, flt_date, cgo_acft_type, awb_no, orig, dest, awb_type, catalog, shc_list, exclusion)
	 where  (exportBulk&gt;0 or transitBulk&gt;0 or iFbulk&gt;0 or transitPPk&gt;0 or outboundNBK&gt;0 or offloadbulkwith&gt;0 or 
	offloadbulkwithout&gt;0 or offloadPPK&gt;0 or offloadNBK&gt;0 or transitmailInbound&gt;0 or transitmailOutbound&gt;0 or transitoffloadwith&gt;0 or 
	transitoffloadwithout&gt;0 or importbulk&gt;0 or importtransitbulk&gt;0 or importtransitNBK&gt;0 or importtransitPPK&gt;0 or iFshp&gt;0 or cbxshp&gt;0
	or exportBulkBU &gt; 0)
	ORDER BY jobDate
	</insert>
	<insert id="sqlInsert_Charging_Ariline_image_ULD" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
		INSERT INTO REPT_CHG_AIRL_IMAGE
		(REC_TYPE  ,
		ACT_DATE ,
		AIRLINE  ,
		FLT_TYPE ,
		FLT_KEY  ,
		FLT_DATE,
		CGO_ACFT_TYPE      ,
		ULD_KEY,
		SHC_LIST,
		EXCLUSION,
		NO_TS_PPK_MIX_ULD,
		NO_OB_TS_NBK_ULD,
		NO_OFD_PPK_ULD,
		NO_OFD_TS_NBK_ULD,
		REBUILT_WT,
		NO_WIPP_ULD,
		NO_FCC_ULD,
		NO_IMP_TS_NBK_ULD,
		NO_IMP_TS_PPK_ULD,
		REPORT_NAME,
		report_type,
		from_date,
		to_date,
		cr_date,
		cr_user_id)
		select REC_TYPE,
		jobDate,
		carrierCode,
		fltType,
		fltKey,
		fltDate,
		paxFrtr,
		uldNo,
		shc,
		exc,
		transitPPKULDcount,
		outboundNBKULDcount,
		offloadPPKULDcount,
		offloadNBKULDcount,
		rebuilt,
		WIPPcount,
		fcc,
		imprtTransitNBKULDcount,
		imprtTransitPPKULDcount,
		#reportName# ,
		#reportType# ,
		#fromDate# ,
		#toDate# ,
		sysdate ,
		'JOB' 
		from(
		SELECT  'ULD' REC_TYPE,
		TO_CHAR(act_date,'DDMONYY') as jobDate,
		airline as  carrierCode,
		flt_type as fltType ,
		flt_key as fltKey ,
		flt_date as  fltDate,
		cgo_acft_type as  paxFrtr,
		ULD_KEY as uldNo,
		shc_list as shc,
		exclusion as exc,
		SUM(NO_TS_PPK_MIX_ULD) as transitPPKULDcount,
		SUM(NO_OB_TS_NBK_ULD) as outboundNBKULDcount,
		SUM(NO_OFD_PPK_ULD) as offloadPPKULDcount,
		SUM(NO_OFD_TS_NBK_ULD) as offloadNBKULDcount,
		SUM(REBUILT_WT) as rebuilt,
		SUM(NO_WIPP_ULD) as WIPPcount,
		SUM(NO_FCC_ULD) as fcc,
		SUM(NO_IMP_TS_NBK_ULD) as imprtTransitNBKULDcount,
		SUM(NO_IMP_TS_PPK_ULD) as imprtTransitPPKULDcount
		FROM REPT_CHG_AIRL
		WHERE REC_TYPE = 'ULD' 
		AND ACT_DATE = #jobDate#
		GROUP BY 'ULD', TO_CHAR(ACT_DATE,'DDMONYY'), AIRLINE, FLT_TYPE, FLT_KEY, FLT_DATE, CGO_ACFT_TYPE, ULD_KEY, SHC_LIST, EXCLUSION)
		where (transitPPKULDcount&gt;0 or outboundNBKULDcount&gt;0 or offloadPPKULDcount&gt;0 or offloadNBKULDcount&gt;0 or rebuilt&gt;0 or
		WIPPcount&gt;0 or fcc&gt;0 or imprtTransitNBKULDcount&gt;0 or imprtTransitPPKULDcount&gt;0) 
		ORDER BY jobDate
	</insert>
	<insert id="sqlInsert_Charging_Ariline_image_MISC" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">		
		INSERT INTO REPT_CHG_AIRL_IMAGE
		(REC_TYPE  ,
		ACT_DATE ,
		AIRLINE  ,
		CT_NO ,
		JO_NO  ,
		awb_no,
		rcl_no      ,
		orig,
		dest,
		awb_type,
		catalog,
		shc_list,
		exclusion,
		XRAY_RCL_WT,
		XRAY_JO_EXP_WT,
		XRAY_JO_TS_WT,
		ITT_OUT_WT,
		ITT_IN_WT,
		CHINA_DIRECT_BU_WT,
		REPORT_NAME,
		report_type,
		from_date,
		to_date,
		cr_date,
		cr_user_id)
		select 
		REC_TYPE,
		jobDate,
		carrierCode,
		ct,
		jo,
		awbNo,
		rclNo,
		awbOrg,
		awbDest,
		awbType,
		catalog,
		shc,
		exc,
		xrayBeforeRcl,
		xrayExport,
		xrayTranshipment,
		iTTtransferOut,
		iTTtransferIn,
		chinaDirectBU,
		#reportName# ,
		#reportType# ,
		#fromDate# ,
		#toDate# ,
		sysdate ,
		'JOB' 
		from(
		SELECT 'MISC' REC_TYPE,
		TO_CHAR(act_date,'DDMONYY') as jobDate,
		airline as  carrierCode,
		ct_no as ct ,
		jo_no as jo ,
		awb_no as  awbNo,
		rcl_no as  rclNo,
		orig as awbOrg,
		dest as awbDest,
		awb_type as awbType,
		catalog as catalog,
		shc_list as shc,
		exclusion as exc,
		SUM(XRAY_RCL_WT) as xrayBeforeRcl,
		SUM(XRAY_JO_EXP_WT) as xrayExport,
		SUM(XRAY_JO_TS_WT) as xrayTranshipment,
		SUM(ITT_OUT_WT) AS iTTtransferOut,
		SUM(ITT_IN_WT) as iTTtransferIn,
		SUM(CHINA_DIRECT_BU_WT) AS chinaDirectBU 
		FROM REPT_CHG_AIRL 
		WHERE REC_TYPE = 'MISC'
		AND ACT_DATE = #jobDate#
		GROUP BY 'MISC', TO_CHAR(act_date,'DDMONYY'), airline, ct_no, jo_no, awb_no, rcl_no, orig, dest, awb_type, catalog, shc_list, exclusion)
		where (xrayBeforeRcl&gt;0 or xrayExport&gt;0 or xrayTranshipment&gt;0 or iTTtransferOut&gt;0 or
		iTTtransferIn&gt;0 or chinaDirectBU&gt;0)
		ORDER BY jobDate
	</insert>
	<insert id="sqlInsert_Charging_Landside_image_IMPORT" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
		insert into REPT_CHG_IMP_DLV_image
		(POST_DATE,
		SRF_NO,
		AWB_NO,
		ORIG,
		DEST,
		AWB_TYPE,
		CATALOG,
		SHC_LIST,
		EXCLUSION,
		BULK_WT,
		PPK_WT,
		PPK_NO_OF_ULD,
		REPORT_NAME,
		REPORT_TYPE,
		FROM_DATE,
		TO_DATE,
		CR_DATE,
		CR_USER_ID)
		select
		postDate,
		srfNo,
		awbNo,
		awbOrg,
		awbDest,
		awbType,
		catalog,
		shc,
		exc,
		bulk,
		prepackWt,
		prepackUld,
		#reportName# ,
		#reportType# ,
		#fromDate# ,
		#toDate# ,
		SYSDATE ,
		'JOB' 
		from (
		select  post_date as postDate,
		srf_no as srfNo,
		awb_no as awbNo,
		orig as awbOrg,
		dest as awbDest,
		awb_type as awbType,
		catalog as catalog,
		shc_list as shc,
		exclusion as exc,
		SUM(bulk_wt) as bulk,
		SUM(ppk_wt) as prepackWt,
		SUM(ppk_no_of_uld) as prepackUld
		from  REPT_CHG_IMP_DLV  group by  post_date,srf_no,awb_no, orig,dest,awb_type,catalog,shc_list,exclusion ) 
		where  (bulk &gt;0 or prepackWt &gt;0 or prepackUld &gt;0 ) order by postdate

	</insert>

<insert id="createFltEventOnUITTag" parameterClass="java.util.HashMap">
		Insert into HIS_FLT_EVNT (FLT_KEY,FLT_DATE,FLT_TYPE,COD_TRA_SEQ_NUM,COD_HIS_TYP,COD_FUNC,MODULE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TR_NO) 
		values (#FLT_KEY#,#FLT_DATE#,'D',#COD_TRA_SEQ_NUM#,'E','FLTUT','W',#USER#,SYSDATE,#USER#,SYSDATE, (SELECT TR_NO FROM FLT_OPR_EVENTS WHERE FLT_KEY = #FLT_KEY# and FLT_TYPE = 'D' and SCH_DATE = #FLT_DATE#))
	</insert>	
	
	<insert id="createFltEventDtlsOnUITTag" parameterClass="java.util.HashMap">
		Insert into HIS_FLT_EVNT_DTL (FLT_KEY,FLT_DATE,FLT_TYPE,COD_TRA_SEQ_NUM,COD_SEQ_NUM,COD_ACT,COD_HIS_SEQ_NUM,DES_HIS_DTS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TR_NO)
		values (#FLT_KEY#,#FLT_DATE#,'D',#COD_TRA_SEQ_NUM#,SQ_FLT_OPR_EVENTS_HIS.NEXTVAL,'U',720,#EVENT_DESC#,#USER#,SYSDATE,#USER#,SYSDATE,(SELECT TR_NO FROM FLT_OPR_EVENTS WHERE FLT_KEY = #FLT_KEY# and FLT_TYPE = 'D' and SCH_DATE = #FLT_DATE#))
	</insert>
	<select id="getOffloadedULDNestingID" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
	SELECT * FROM(
	SELECT NESTING_ID FROM EXP_PMANIFEST_ULD WHERE ULD_BT_NO = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND NESTING_ID IS NOT NULL
	UNION
	SELECT NESTING_ID FROM EXP_OFFLOAD_ULD WHERE ULD_BT_NO = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND NESTING_ID IS NOT NULL)
	WHERE ROWNUM=1
		]]>
	</select>
        <select id="getCheckAgentHolingListForULD" parameterClass="java.lang.String" resultClass="java.lang.String">
		select agent_id as agentID from ULD_INVENTORY where ULD_KEY = #uldKey#
	</select>
<update id="sqlUpdateBackupULDUpliftPriorityOnOffload" parameterClass="java.util.Map">
		<![CDATA[
	    	UPDATE EXP_OFFLOAD_ULD
	    	SET
    		UPLIFT_PRIORITY = #PRIORITY#,NESTING_ID=#NESTING_ID#,
    		LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE
			WHERE ULD_BT_NO = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
		]]>
	</update>
		<update id="sqlUpdateRevertULDUpliftPriorityOnDeleteOffload" parameterClass="java.util.Map">
		<![CDATA[
	    	UPDATE EXP_PMANIFEST_ULD
	    	SET
    		UPLIFT_PRIORITY = #PRIORITY#, tr_type_evt = 'ULDUPL',
    		LM_USER_ID = #USER_ID#, LM_DATE = SYSDATE,NESTING_ID=#NESTING_ID#
			WHERE ULD_BT_NO = #ULD_KEY# AND FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY')
		]]>
	</update>
	<insert id="sqlInsert_Charging_Landside_image_EXPORT" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">
	insert into REPT_CHG_EXP_ACC_IMAGE
	(RCL_DATE,
	RCL_NO,
	PPK_TYPE,
	AWB_NO,
	ORIG,
	DEST,
	AWB_TYPE,
	CATALOG,
	SHC_LIST,
	EXCLUSION,
    ULD_KEY,
	BULK_WT_ASIDE,
	BULK_WT_LSIDE,
	PPK_WT_ASIDE,
	PPK_WT_LSIDE,
	REPORT_NAME,
	REPORT_TYPE,
	FROM_DATE,
	TO_DATE,
	CR_DATE,
	CR_USER_NAME
	)
	select rclDate,
	rclNo,
	rclType,
	awbNo,
	awbOrg,
	awbDest,
	awbType,
	catalog,
	shc,
	exc,
	uldNo,
	bulkWtAirside,
	bulkwtLandside,
	prepackAirside,
	prepackLandside,
	#reportName# ,
	#reportType# ,
	#fromDate# ,
	#toDate# ,
	SYSDATE ,
	'JOB' 
	from (
	select 
	rcl_date as rclDate,
	rcl_no as rclNo,
	ppk_type as rclType,
	awb_no as awbNo,
	orig as awbOrg,
	dest as awbDest,
	awb_type as awbType,
	catalog as catalog,
	shc_list as shc,
	exclusion as exc,
	uld_key as uldNo,
	SUM(bulk_wt_aside) as bulkWtAirside,
	SUM(bulk_wt_lside) as bulkwtLandside,
	SUM(ppk_wt_aside) as prepackAirside,
	SUM(ppk_wt_lside) as prepackLandside
	from REPT_CHG_EXP_ACC group by rcl_date,rcl_no,ppk_type,awb_no,orig,dest,awb_type,catalog,shc_list,exclusion,uld_key) 
	where  (bulkWtAirside &gt;0 or bulkwtLandside &gt;0 or prepackAirside &gt;0 or prepackLandside &gt;0) order by rclDate


	</insert>
	<delete id="sqldelete_Charging_Landside_image_IMPORT" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_CHG_IMP_DLV_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#	
	</delete>
	<delete id="sqldelete_Charging_Landside_image_EXPORT" parameterClass="cargo.cms.common.utils.bo.BatchJobBO">	
		DELETE FROM REPT_CHG_EXP_ACC_IMAGE
		WHERE FROM_DATE = #fromDate# AND TO_DATE=#toDate# 		
		AND REPORT_NAME=#reportName#
		AND REPORT_TYPE=#reportType#	
	</delete>

	<select id="checkULDFORNBKPPK"  parameterClass="java.lang.String" resultClass="java.lang.Integer">	
			select count(1) from uld_inventory where uld_key = #uld# and (handling_mode = 'PPK' or handling_mode = 'NBK')
	</select>
<update id="updateUldInvInEmptyinUAF" parameterClass="map" >
update uld_inventory set empty_flg=#emptyFlg# where uld_key=#uldKey#
</update>

<update id="sqlUpdateLoadTypebacktonull" parameterClass="java.lang.String">
		UPDATE ULD_INVENTORY SET LOAD_TYPE='',LM_DATE=SYSDATE,LM_USER_ID='SYSTEM',TR_TYPE='RSLT' , COOL_RM_RTV_TIME = '' WHERE ULD_KEY=#PARAM#
</update>

<select id="getDefaultConfigurationMIX" parameterClass="java.lang.String"  resultClass="java.lang.String">
		SELECT DECODE(awbCount, 1, 'N', 'Y')
			FROM
			  (SELECT
			      (SELECT COUNT(AWB_NO) FROM exp_pre_rcl_hd WHERE ppk_type = 'P' AND PRE_RCL_NO = #PARAM# ) +
			      (SELECT COUNT(B.AWB_NO) FROM exp_pre_rcl_hd H, exp_pre_rcl_brkdn B  WHERE H.PRE_RCL_NO = B.PRE_RCL_NO AND H.ppk_type     = 'M'  AND B.PRE_RCL_NO   = #PARAM#) AS awbCount
			    FROM dual)
	</select>
	
	<select id="getDefaultMixSHC" parameterClass="java.lang.String"  resultClass="java.lang.String">
		SELECT SHC_MIX_PPK FROM MAST_CARRIER WHERE CODE IN(SELECT CARR_CODE FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#PARAM#)
	</select>
	
	
	<select id="getDefaultConfigurationMEUC" parameterClass="java.lang.String"  resultClass="java.lang.String">
		SELECT  DECODE(COUNT(B.AWB_NO), 1, 'N', 'Y') FROM exp_rcl_hd H, exp_rcl_brkdn B  WHERE H.RCL_NO = B.RCL_NO AND H.ppk_type = 'M'  AND B.RCL_NO   =  #PARAM#
	</select>
	
	<select id="getMEUCDefaultMixSHC" parameterClass="java.lang.String"  resultClass="java.lang.String">
		SELECT SHC_MIX_PPK FROM MAST_CARRIER WHERE CODE IN(SELECT CARR_CODE FROM EXP_RCL_HD WHERE RCL_NO=#PARAM# AND PPK_TYPE = 'M' )
	</select>
	
	<update id="updateAWBSHC" parameterClass="java.util.HashMap">	
	  UPDATE awb
		SET 
		  spl_code1  = decode(spl_code1,#ORG#,#RPL#,spl_code1),
		  spl_code2  = decode(spl_code2,#ORG#,#RPL#,spl_code2),
		  spl_code3  = decode(spl_code3,#ORG#,#RPL#,spl_code3),
		  spl_code4  = decode(spl_code4,#ORG#,#RPL#,spl_code4),
		  spl_code5  = decode(spl_code5,#ORG#,#RPL#,spl_code5),
		  spl_code6  = decode(spl_code6,#ORG#,#RPL#,spl_code6),
		  spl_code7  = decode(spl_code7,#ORG#,#RPL#,spl_code7),
		  spl_code8  = decode(spl_code8,#ORG#,#RPL#,spl_code8),
		  spl_code9  = decode(spl_code9,#ORG#,#RPL#,spl_code9)
		WHERE (awb_no,awb_date) IN (select awb_no,awb_date from exp_rcl_brkdn where rcl_no = #RCL_NO#)
	</update>
	
	<update id="updateRCLSHC" parameterClass="java.util.HashMap">	
	  UPDATE exp_rcl_hd
		SET 
		  spl_code1  = decode(spl_code1,#ORG#,#RPL#,spl_code1),
		  spl_code2  = decode(spl_code2,#ORG#,#RPL#,spl_code2),
		  spl_code3  = decode(spl_code3,#ORG#,#RPL#,spl_code3),
		  spl_code4  = decode(spl_code4,#ORG#,#RPL#,spl_code4),
		  spl_code5  = decode(spl_code5,#ORG#,#RPL#,spl_code5),
		  spl_code6  = decode(spl_code6,#ORG#,#RPL#,spl_code6),
		  spl_code7  = decode(spl_code7,#ORG#,#RPL#,spl_code7),
		  spl_code8  = decode(spl_code8,#ORG#,#RPL#,spl_code8),
		  spl_code9  = decode(spl_code9,#ORG#,#RPL#,spl_code9)
		WHERE rcl_no = #RCL_NO#
	</update>

	<select id="carrConfigTagSHC" resultClass="java.lang.String">
		SELECT ULD_TAG_SHC_LST as carrConfigTagSHC FROM MAST_CARRIER WHERE CODE = #fltCarr#
	</select>
	<!--Added the query for Bug 15735 by Rajasekhar start  -->
      <select id="getUnClosedFlightCarrier" parameterClass="cargo.cms.common.utils.bo.BatchJobBO" resultClass="cargo.cms.common.utils.bo.BatchJobBO">
             select distinct a.carr_code as airLine  
                    from flt_opr a,
                    flt_opr_events b
                    where a.tr_no=b.tr_no
                    and trunc(a.act_date) between TO_DATE(#fromDate#,'DDMONYY') AND TO_DATE(#toDate#,'DDMONYY')
                    and a.act_date is not null
                    and a.act_time is not null
                    AND B.FLT_CLS_YN='N'
                    AND NVL(A.STATUS,'*') !='X'
                    and a.carr_code IN (SELECT DISTINCT CODE FROM MAST_CARRIER 
			        WHERE OWNED_CARR = 'Y' AND HANDLED_BY_TERMINAL= 'CPCT' 
			        AND NVL(DUMMY_CARR,'N') = 'N')
      </select>
	<select id="fetchStartPrepJOPcWts" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	<![CDATA[
	SELECT nvl(newJoPcs,0) AS newJoPcs,nvl(newJoWt,0) AS newJoWt,fltkey AS impFltKey,fltDate AS impFltDate,ldgpoint AS ldgPt FROM(
	SELECT nvl(SUM(CASE WHEN SHP.MAN_PCS =  (SELECT NVL(SUM(JO.PC),0) FROM EXP_SEC_CHK_JO JO WHERE JO.AWB_NO=SHP.AWB_NO AND JO.AWB_DATE = SHP.AWB_DATE AND STATUS != 'VOID' AND JO.FLT_KEY = FFM.FLT_KEY AND JO.FLT_DATE = FFM.FLT_DATE) THEN 
  	SHP.MAN_PCS
  	ELSE
  	(SHP.MAN_PCS+ (SELECT (CASE WHEN C.CIR_PROC_USER IS NULL THEN 0 ELSE CASE WHEN C.CIR_PCS_TYPE = 'SL'  THEN -1 * C.CIR_PCS  ELSE C.CIR_PCS END END) FROM IMP_CAR_SHP C WHERE C.AWB_NO=SHP.AWB_NO AND C.AWB_DATE=SHP.AWB_DATE AND C.FLT_KEY=FFM.FLT_KEY AND C.FLT_DATE=FFM.FLT_DATE))
  	END),0) AS newJoPcs,
  	nvl(SUM(CASE WHEN SHP.MAN_WT =  (SELECT NVL(SUM(JO.WT),0) FROM EXP_SEC_CHK_JO JO WHERE JO.AWB_NO=SHP.AWB_NO AND JO.AWB_DATE = SHP.AWB_DATE AND JO.STATUS != 'VOID' AND JO.FLT_KEY = FFM.FLT_KEY AND JO.FLT_DATE = FFM.FLT_DATE) THEN 
  	SHP.MAN_WT
  	ELSE
  	(SHP.MAN_WT+ (SELECT (CASE WHEN C.CIR_PROC_USER IS NULL THEN 0 ELSE CASE WHEN C.CIR_PCS_TYPE = 'SL'  THEN -1 * C.CIR_WT  ELSE C.CIR_WT END END) FROM IMP_CAR_SHP C WHERE C.AWB_NO=SHP.AWB_NO AND C.AWB_DATE=SHP.AWB_DATE AND C.FLT_KEY=FFM.FLT_KEY AND C.FLT_DATE=FFM.FLT_DATE))
  	END),0) AS newJoWt,
    CARSHP.FLT_KEY fltkey,
    TO_CHAR(CARSHP.FLT_DATE,'DDMONYY') fltDate,
    CARSHP.LDG_POINT ldgpoint
	FROM EDI_FFM_MSG FFM, EDI_FFM_SHP SHP, FLT_OPR OPR, START_PREP STRP,IMP_CAR_SHP CARSHP
	WHERE FFM.ffm_status = 'P' and FFM.TR_NO = SHP.TR_NO AND FFM.FLT_KEY = OPR.FLT_KEY AND FFM.FLT_DATE = OPR.SCH_DATE 
    AND OPR.flt_type = 'A' AND STRP.FLT_KEY=FFM.FLT_KEY AND STRP.FLT_DATE=FFM.FLT_DATE AND shp.awb_no=#awbNo# and shp.awb_date=#awbDate# 
    AND CARSHP.FLT_KEY = FFM.FLT_KEY AND CARSHP.FLT_DATE = FFM.FLT_DATE AND CARSHP.AWB_NO = SHP.AWB_NO AND CARSHP.AWB_DATE = SHP.AWB_DATE
    AND FFM_FRZ_DATE IS NOT NULL
	AND FFM_FRZ_USER_ID IS NOT NULL
    AND (FFM.FLT_KEY != #fltKey# OR FFM.FLT_DATE != #fltDate#)
    GROUP BY SHP.AWB_NO,SHP.AWB_DATE,SHP.DEST,SHP.BRD_POINT,SHP.ORG,CARSHP.FLT_KEY,CARSHP.FLT_DATE,CARSHP.LDG_POINT
	UNION ALL
	SELECT nvl(SUM(CASE WHEN CAR.MANIFEST_PCS =  (SELECT NVL(SUM(JO.PC),0) FROM EXP_SEC_CHK_JO JO WHERE JO.AWB_NO=CAR.AWB_NO AND JO.AWB_DATE = CAR.AWB_DATE AND JO.STATUS != 'VOID' AND JO.FLT_KEY = CAR.FLT_KEY AND JO.FLT_DATE = CAR.FLT_DATE) THEN 
  	CAR.MANIFEST_PCS
  	ELSE
  	(CAR.MANIFEST_PCS + (CASE WHEN CAR.CIR_PROC_USER IS NULL  THEN 0  ELSE CASE  WHEN CAR.CIR_PCS_TYPE = 'SL'  THEN -1 * CAR.CIR_PCS   ELSE CAR.CIR_PCS END  END)) END
  	),0) AS newJoPcs,
  	nvl(SUM(CASE WHEN CAR.MANIFEST_WT =  (SELECT NVL(SUM(JO.WT),0) FROM EXP_SEC_CHK_JO JO WHERE JO.AWB_NO=CAR.AWB_NO AND JO.AWB_DATE = CAR.AWB_DATE AND JO.STATUS != 'VOID' AND JO.FLT_KEY = CAR.FLT_KEY AND JO.FLT_DATE = CAR.FLT_DATE) THEN 
  	CAR.MANIFEST_WT
  	ELSE
  	(CAR.MANIFEST_WT + (CASE WHEN CAR.CIR_PROC_USER IS NULL  THEN 0  ELSE CASE  WHEN CAR.CIR_PCS_TYPE = 'SL'  THEN -1 * CAR.CIR_WT   ELSE CAR.CIR_WT END  END)) END
  	),0) AS newJoWt,CAR.FLT_KEY fltkey,
    TO_CHAR(CAR.FLT_DATE,'DDMONYY') fltDate,CAR.LDG_POINT ldgpoint from 
  	IMP_CAR_SHP CAR where AWB_NO=#awbNo# AND AWB_DATE=#awbDate#   AND (FLT_KEY != #fltKey# OR FLT_DATE != #fltDate#) AND CAR_CREATED = 'Y'
    AND NOT EXISTS (SELECT NULL FROM START_PREP STPER WHERE (STPER.FLT_KEY !=#fltKey# OR STPER.FLT_DATE !=#fltDate#) 
    AND STPER.FFM_FRZ_DATE IS NOT NULL	AND STPER.FFM_FRZ_USER_ID IS NOT NULL)
    GROUP BY CAR.FLT_KEY,CAR.FLT_DATE,CAR.AWB_NO,CAR.AWB_DATE,CAR.LDG_POINT)]]>
	</select>
<select id="getULDAWBListForPPK"  parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
			SELECT B.PPK_TYPE AS pkgType, 
                  B.RCL_NO as rclNum,     A.PCS AS rclPcs,
                  A.WEIGHT AS rclWt,
                  TO_CHAR(B.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate,A.uld_key AS uldNum, A.awb_no AS awbNum , A.PCS AS awbULDPcs, A.weight AS awbULDWt ,
			 (SELECT C.CONTR_CODE FROM EXP_RCL_DTL C WHERE C.RCL_NO = A.RCL_NO AND C.ULD_KEY = A.ULD_KEY ) AS contourCode ,
			  (select STRAGG(STRINGDELIM(T.spl, ','))  
                  from(
                  	(select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
			        union all
			        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
			        union all
			        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
			        union all
			        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
			        union all
			        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
			        union all
			        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
			        union all
			        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
			        union all
			        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
			        union all
			        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null)) t
			        where awb_no = a.awb_no and awb_date = a.awb_date) shc,
              B.AWB_DEST as destination,
              pkg_exp_val.get_rcl_car_ind(A.awb_no, A.awb_date, B.rcl_no, B.ppk_type) as carInd,
              decode(UPPER(B.STATUS), 'V','Y','N') as voidInd,
              B.RTN_IND as cargoRetInd,
              B.REJECT_IND as cargoRejInd,
              B.RCL_REJECT_REASON as rejectReasonRmk,
              B.RTN_PCS as rtnPcs, B.RTN_WT as rtnWt,
              (CASE WHEN (B.PPK_TYPE = 'B' OR B.PPK_TYPE = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=B.Rcl_No),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = B.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = B.Rcl_No And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = B.Rcl_No)),0,'Y','N')
                     END
                  END) as secChkEntered , B.SEC_CHECK as secCheck,
                  (select sum(sc_wt) from EXP_RCL_SEC_CHK_DTL where rcl_no = B.RCL_NO) as secChkWt,
                  (SELECT SC_RESULT FROM(SELECT SC_RESULT,RCL_NO FROM EXP_RCL_SEC_CHK_DTL ORDER BY CR_DATE DESC)WHERE RCL_NO = B.RCL_NO and ROWNUM = 1) as secResult,
          B.ASIDE_ACCEPT as asideAccept, B.CUST_NO as agentCode, 
				  (select code_desc from cust_company where code = B.CUST_NO) as agentName,
				  NVL(B.TSA_RCL_IND,'NA') as tsaRclInd,
          		  NVL(A.CARR_RF,'NA') as carrierRF
			FROM exp_rcl_brkdn A 
      JOIN EXP_RCL_HD B ON B.RCL_NO = A.RCL_NO
      LEFT JOIN AWB C ON C.AWB_NO = A.AWB_NO AND C.AWB_DATE = A.AWB_DATE
      WHERE B.rcl_no = #rclNum# AND b.ppk_type = 'M' 
			UNION
			SELECT B.PPK_TYPE AS pkgType, 
                  B.RCL_NO as rclNum,
                   A.PCS AS rclPcs,
                  A.NET_WT AS rclWt,TO_CHAR(B.RCL_DATE,'DDMONYY HH24:MI') as rclIssueDate,A.uld_key AS uldNum, B.AWB_NO AS awbNum , A.PCS AS awbULDPcs, A.net_wt AS awbULDWt , A.CONTR_CODE AS contourCode ,
      (select STRAGG(STRINGDELIM(T.spl, ','))  
                  from(
                  	(select spl_code1 spl,awb_no,awb_date from awb  where spl_code1  is not null)
			        union all
			        (select spl_code2 spl,awb_no,awb_date from awb  where spl_code2  is not null)
			        union all
			        (select spl_code3 spl,awb_no,awb_date from awb  where spl_code3  is not null)
			        union all
			        (select spl_code4 spl,awb_no,awb_date from awb  where spl_code4  is not null)
			        union all
			        (select spl_code5 spl,awb_no,awb_date from awb  where spl_code5  is not null)
			        union all
			        (select spl_code6 spl,awb_no,awb_date from awb  where spl_code6  is not null)
			        union all
			        (select spl_code7 spl,awb_no,awb_date from awb  where spl_code7  is not null)
			        union all
			        (select spl_code8 spl,awb_no,awb_date from awb  where spl_code8  is not null)
			        union all
			        (select spl_code9 spl,awb_no,awb_date  from awb  where spl_code9  is not null)) t
			        where awb_no = B.awb_no and awb_date = B.awb_date) shc,
      B.AWB_DEST as destination,
      pkg_exp_val.get_rcl_car_ind(B.awb_no, B.awb_date, A.rcl_no, B.ppk_type) as carInd,
      decode(UPPER(B.STATUS), 'V','Y','N') as voidInd,
      B.RTN_IND as cargoRetInd,
      B.REJECT_IND as cargoRejInd,
      B.RCL_REJECT_REASON as rejectReasonRmk,
      B.RTN_PCS as rtnPcs, B.RTN_WT as rtnWt,
      (CASE WHEN (B.PPK_TYPE = 'B' OR B.PPK_TYPE = 'P')
                     THEN Decode((Select Count(Rcl_No) From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No=B.Rcl_No),0,'N','Y')
                     ELSE 
                     CASE WHEN (Select Count(1) From EXP_RCL_BRKDN Where RCL_NO = B.Rcl_No And SEC_CHECK = 'Y') = 0 THEN 'N'
                       ELSE 
                         Decode((Select Count(1) From Exp_Rcl_Brkdn Where Rcl_No = B.Rcl_No And Sec_Check = 'Y' And
                         (Awb_No,Awb_Date) Not In (Select Distinct Awb_No,Awb_Date From Exp_Rcl_Sec_Chk_Dtl Where Rcl_No = B.Rcl_No)),0,'Y','N')
                     END
                  END) as secChkEntered , B.SEC_CHECK as secCheck,
                  (select sum(sc_wt) from EXP_RCL_SEC_CHK_DTL where rcl_no = B.RCL_NO) as secChkWt,
                  (SELECT SC_RESULT FROM(SELECT SC_RESULT,RCL_NO FROM EXP_RCL_SEC_CHK_DTL ORDER BY CR_DATE DESC)WHERE RCL_NO = B.RCL_NO and ROWNUM = 1) as secResult,
                  B.ASIDE_ACCEPT as asideAccept, B.CUST_NO as agentCode, 
				  (select code_desc from cust_company where code = B.CUST_NO) as agentName,
				  NVL(B.TSA_RCL_IND,'NA') as tsaRclInd,
          		  NVL(B.CARR_RF,'NA') as carrierRF
			FROM exp_rcl_dtl A
      JOIN EXP_RCL_HD B ON B.RCL_NO = A.RCL_NO
      LEFT JOIN AWB C ON C.AWB_NO = B.AWB_NO AND C.AWB_DATE = B.AWB_DATE
      WHERE  B.rcl_no = #rclNum# AND b.ppk_type = 'P'
   	</select>

<select id="checkEAWBConfiguration" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
 	  select count(1) from mast_carrier where code = (select pkg_fsu.get_carr_code(#AWB_NO#,#AWB_DATE#) from dual) AND NVL(RCS_CONFIG,'N') = 'Y'
 	</select>

<select id="sqlGetIsDepartureFlightCancelled" parameterClass="java.util.Map"
		resultClass="java.lang.String">
		<![CDATA[
	    	SELECT DECODE(STATUS, 'X', 'Y', 'N')
	    	FROM FLT_OPR
	    	WHERE FLT_KEY = #FLT_KEY# AND SCH_DATE = TO_DATE(#FLT_DATE#, 'DDMONYY') AND FLT_TYPE = 'D'
		]]>
	</select>

	<select id="getCurrentULDState" parameterClass="java.lang.String" resultClass="java.lang.String">
	 select count(1) from DUAL where (select fun_get_uld_state(#uldNumber#) from DUAL) = 'OnEty' 
	</select>

<select id="findbuildupshc" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
    	SELECT count(1) FROM EXP_PMANIFEST_ULD_AWB A,EXP_PMANIFEST_ULD_AWB_SHC B WHERE B.TR_NO = A.TR_NO AND 
		(B.SHC= #shc# OR B.SHC2=#shc# OR B.SHC3=#shc# OR B.SHC4=#shc# OR B.SHC5=#shc# OR B.SHC6=#shc# OR B.SHC7=#shc# OR B.SHC8=#shc# OR B.SHC9=#shc#)
		AND AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
    </select>
	
<select id="getMinPriorityShcforJO"  parameterClass="cargo.cms.export.bo.JobOrderBO" resultClass="java.lang.String" >
SELECT CODE FROM MAST_SPL_HAND_CODE WHERE PRIORITY IN(
SELECT MIN(PRIORITY) FROM MAST_SPL_HAND_CODE A,AWB B WHERE 
((CODE=B.SPL_CODE1 AND B.SPL_CODE1 IS NOT NULL) OR 
(CODE=B.SPL_CODE2 AND B.SPL_CODE2 IS NOT NULL) OR 
(CODE=B.SPL_CODE3 AND B.SPL_CODE3 IS NOT NULL) OR 
(CODE=B.SPL_CODE4 AND B.SPL_CODE4 IS NOT NULL) OR 
(CODE=B.SPL_CODE5 AND B.SPL_CODE5 IS NOT NULL) OR 
(CODE=B.SPL_CODE6 AND B.SPL_CODE6 IS NOT NULL) OR 
(CODE=B.SPL_CODE7 AND B.SPL_CODE7 IS NOT NULL) OR 
(CODE=B.SPL_CODE8 AND B.SPL_CODE8 IS NOT NULL) OR 
(CODE=B.SPL_CODE9 AND B.SPL_CODE9 IS NOT NULL))
AND B.SPL_CODE1 IS NOT NULL 
AND B.SPL_CODE2 IS NOT NULL 
AND B.SPL_CODE3 IS NOT NULL 
AND B.SPL_CODE4 IS NOT NULL 
AND B.SPL_CODE5 IS NOT NULL 
AND B.SPL_CODE6 IS NOT NULL 
AND B.SPL_CODE7 IS NOT NULL 
AND B.SPL_CODE8 IS NOT NULL
AND B.SPL_CODE9 IS NOT NULL
AND B.AWB_NO=#awbNo# AND B.AWB_DATE = #awbDate#) AND ROWNUM=1
</select>
	<insert id="insertPmanEndrseDtls" parameterClass="java.util.HashMap" >		 	
			   INSERT
INTO EXP_PMAN_AWB_ENDRSE_DTLS
  (
    FLT_KEY,
    FLT_DATE,
    AWB_NO,
    ENDORSE_TYPE,
    ENDORSE_USER,
    CR_USER_ID,
    CR_DATE,
    LM_USER_ID,
    LM_DATE,
    TR_TYPE,
    AWB_DATE
  )
  VALUES
  (
    #fltKey#,
    #fltDate#,
    #awbNo#,
    #endorseType#,
    #endrseUserId#,
    #userId#,
    SYSDATE,
    #userId#,
    SYSDATE,
    #trType#,
    #awbDate#
  )		
	</insert>
	
	<select id="getFhlFeeResultQuery"  parameterClass="cargo.cms.export.bo.FHLVerificationFeeBO" resultClass="cargo.cms.export.bo.FHLVerificationFeeBO" >
	select ROWNUM serialNo,awbNo,awbDate,hawbNo,type,agentName,flight from(
       SELECT
       A.AWB_NO awbNo,
       to_char(A.AWB_DATE,'DDMONYY') awbDate,
       B.HAWB_NO hawbNo,
       AWB.CATALOG type,
       AWB.AGENT_NAME agentName,
       FUN_GET_FIRST_PMAN_FLT_AWB(A.AWB_NO,A.AWB_DATE) as flight
       FROM EDI_FHL A
       JOIN EDI_FHL_HAWB B
       ON A.TR_NO=B.TR_NO
       LEFT JOIN AWB AWB ON AWB.AWB_NO=A.AWB_NO AND AWB.AWB_DATE=A.AWB_DATE      
       WHERE AWB.CATALOG='EG' AND B.CR_DATE BETWEEN TO_DATE(#hawbDateFrom#,'DDMONYY') AND TO_DATE(#hawbDateTo#,'DDMONYY') + 1
       <isNotEmpty property="airlineCarrGrp" prepend="AND"> 
           (AWB.CARR_CODE = #airlineCarrGrp# 
            OR AWB.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE = #airlineCarrGrp#))
       </isNotEmpty>
       <isNotEmpty property="airlineCarr" prepend="AND">
              AWB.CARR_CODE=#airlineCarr#
       </isNotEmpty>
       ORDER BY A.AWB_DATE,B.HAWB_NO)
	</select>
	
	<select id="getAirlineShipmentResultQuery"  parameterClass="cargo.cms.export.bo.AirlineShipmentReportBO" resultClass="cargo.cms.export.bo.AirlineShipmentReportBO" >
		 select ROWNUM serialNo,awbType,awbNo,awbDate,agentName,shc,awbPc,awbWt from(
		 SELECT
		  CATALOG awbType,
		  AWB_NO awbNo,
		  to_char(AWB_DATE,'DDMONYY') awbDate,
		  AGENT_NAME agentName,
		  DECODE(spl_code1, NULL, '', spl_code1
		  || DECODE(spl_code2, NULL, '', ','))
		  || DECODE(spl_code2, NULL, '', spl_code2
		  || DECODE(spl_code3, NULL, '', ','))
		  || DECODE(spl_code3, NULL, '', spl_code3
		  || DECODE(spl_code4, NULL, '', ','))
		  || DECODE(spl_code4, NULL, '', spl_code4
		  || DECODE(spl_code5, NULL, '', ','))
		  || DECODE(spl_code5, NULL, '', spl_code5
		  || DECODE(spl_code6, NULL, '', ','))
		  || DECODE(spl_code6, NULL, '', spl_code6
		  || DECODE(spl_code7, NULL, '', ','))
		  || DECODE(spl_code7, NULL, '', spl_code7
		  || DECODE(spl_code8, NULL, '', ','))
		  || DECODE(spl_code8, NULL, '', spl_code8
		  || DECODE(spl_code9, NULL, '', ','))
		  || DECODE(spl_code9, NULL, '', spl_code9) shc,
		  PCS awbPc,WT awbWt
		FROM AWB WHERE AWB_DATE BETWEEN TO_DATE(#awbDateFrom#,'DDMONYY') AND TO_DATE(#awbDateTo#,'DDMONYY') and (
		<isNotEmpty property="shc1">
			#shc1# in (SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9) 
		</isNotEmpty>
		<isNotEmpty property="shc2" prepend="OR">
			#shc2# in (SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9)
		</isNotEmpty>
		<isNotEmpty property="shc3" prepend="OR">
			#shc3# in (SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9)
		</isNotEmpty>
		<isNotEmpty property="shc4" prepend="OR">
			#shc4# in (SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9)
		</isNotEmpty>
		<isNotEmpty property="shc5" prepend="OR">
			#shc5# in (SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9)
		</isNotEmpty>
		<isNotEmpty property="shc6" prepend="OR">
			#shc6# in (SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9)
		</isNotEmpty>
		<isNotEmpty property="shc7" prepend="OR">
			#shc7# in (SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9)
		</isNotEmpty>
		<isNotEmpty property="shc8" prepend="OR">
			#shc8# in (SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9)
		</isNotEmpty>
		<isNotEmpty property="shc9" prepend="OR">
			#shc9# in (SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9)
		</isNotEmpty>
		 	)
		<isNotEmpty property="awbType" prepend="AND">
			CATALOG= #awbType#
		</isNotEmpty>
		<isNotEmpty property="airlineGrp" prepend="AND"> 
	    (CARR_CODE = #airlineGrp# 
            OR CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            WHERE GRP_CARR_CODE = #airlineGrp#))
		</isNotEmpty>
		<isNotEmpty property="airline" prepend="AND">
			 CARR_CODE=#airline#
		</isNotEmpty>
		 ORDER BY AWB_DATE)
	  </select>
	   <select id="getFlightClose" parameterClass="cargo.cms.export.bo.ExpFlightCargoManifestBO" resultClass="java.lang.String">
		SELECT event.FLT_CLS_YN
		FROM FLT_OPR opr
		JOIN FLT_OPR_EVENTS event
		ON opr.TR_NO = event.TR_NO
		WHERE opr.FLT_KEY=#flight#
		AND opr.SCH_DATE =to_date(#flightDate#,'DDMONYY')
		AND opr.FLT_TYPE ='D'
	 </select>
	  
	  <select id="getExpFltManifestResultQuery" parameterClass="cargo.cms.export.bo.ExpFlightCargoManifestBO" resultClass="cargo.cms.export.bo.ExpFlightCargoManifestBO">
	  <![CDATA[
		select ROWNUM seqNo,B.* FROM
			(select A.* ,
              awb.agent_name agentName,
              awb.PCS awbPc, awb.WT awbWt,
              awb.ORIG orig, awb.DEST dest,
              PKG_COMMON.get_flt_ata(A.flight, A.flightDate, 'D') atd ,
              to_char(opr.ACT_DATE,'DDMONYY') || ' ' || decode(ACT_TIME,null,'', substr(lpad(ACT_TIME, 4, '0'), 1, 2)||':'||substr(ACT_TIME, -2)) actDateDisp,
              (select CONTR_CODE from exp_pmanifest_uld where flt_key = A.flight AND flt_date = A.flightDate AND uld_bt_no = A.uldNo) as contour,
              (select SUM(assigned_pcs) from exp_pmanifest_uld_awb where flt_key = A.flight AND flt_date = A.flightDate AND uld_bt_no = A.uldNo ) as uldPc,
              (select SUM(assigned_wt) from exp_pmanifest_uld_awb where  flt_key = A.flight AND flt_date = A.flightDate AND uld_bt_no = A.uldNo) as uldNetWt,
              (select CASE WHEN COUNT(1) > 0 THEN 'Y' ELSE 'N' END from exp_pmanifest_awb where awb_no = A.awb and awb_date = A.awbDate and ( flt_key <> A.flight OR flt_date <> A.flightDate ) ) partship,
              ]]>
              (select rate_chrgble_wt from edi_fwb_chr_rate where tr_no = (SELECT MAX(A.TR_NO) FROM EDI_FWB A WHERE A.AWB_NO = A.awb and awb_date = A.awbDate ) AND rate_pcs > 0 AND rownum = 1) as awbChargWt,
              decode(awb.spl_code1, null, '', awb.spl_code1 || ',')
                                             || decode(awb.spl_code2, null, '', awb.spl_code2 || ',')
                                             || decode(awb.spl_code3, null, '', awb.spl_code3 || ',')
                                             || decode(awb.spl_code4, null, '', awb.spl_code4 || ',')
                                             || decode(awb.spl_code5, null, '', awb.spl_code5 || ',')
                                             || decode(awb.spl_code6, null, '', awb.spl_code6 || ',')
                                             || decode(awb.spl_code7, null, '', awb.spl_code7 || ',')
                                             || decode(awb.spl_code8, null, '', awb.spl_code8 || ',')
                                             || decode(awb.spl_code9, null, '', awb.spl_code9) as shc                 
              from (select PAWB.FLT_KEY as flight , to_char(PAWB.FLT_DATE,'DDMONYY') as flightDate ,PAWB.FLT_DATE as orderFlight,
              PAWB.AWB_NO as awb , to_char(PAWB.AWB_DATE,'DDMONYY') as awbDate , NVL(RCL.ULD_KEY,'BULK') as uldNo ,
              SUM(pawb.assigned_pcs) manifestPc, SUM(pawb.assigned_wt) manifestWt,
              PMAN.unldg_pt premanPort,awb.awb_type flowType
              from exp_pmanifest_uld_awb PAWB
              left join EXP_ULD_AWB RCL ON RCL.ULD_KEY = PAWB.uld_bt_no and RCL.awb_no = PAWB.awb_no and RCL.awb_date = PAWB.awb_date
              JOIN AWB awb ON  awb.awb_no = PAWB.awb_no and awb.awb_date = PAWB.awb_date
              JOIN FLT_OPR flt ON  flt.flt_key = PAWB.FLT_KEY and flt.sch_date = PAWB.FLT_DATE AND flt.flt_type = 'D'
              JOIN flt_opr_events fltevent on flt.flt_key=fltevent.flt_key and flt.sch_date=fltevent.sch_date and flt.flt_type='D'
              JOIN exp_pmanifest_awb PMAN on PMAN.awb_no = PAWB.awb_no and PMAN.awb_date = PAWB.awb_date
              where awb.awb_type = 'E'
              <isNotEmpty property="reportType" >
					<isEqual property="reportType" compareValue="Y" prepend="AND">			
						PAWB.FLT_KEY = #flight# and PAWB.FLT_DATE = #flightDate#
					</isEqual>
					<isEqual property="reportType" compareValue="N" prepend="AND">
						flt.sch_date between to_date(#fromDate#,'DDMONYY') and to_date(#toDate#,'DDMONYY') AND 
						(flt.CARR_CODE = UPPER(#carrier#)) AND NVL(fltevent.FLT_CLS_YN,'N')='Y'
						 <isNotEmpty property="awbPrefix" prepend="AND">
						 		SUBSTR(pawb.awb_no,1,3)=#awbPrefix#
						 </isNotEmpty>
					</isEqual>			
			  </isNotEmpty> 
              <isNotEmpty property="loginCarrier">
                               AND (( flt.CARR_CODE = #loginCarrier# OR  flt.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE  = #loginCarrier#))
                        OR ( awb.CARR_CODE = #loginCarrier# OR  awb.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE  = #loginCarrier#)))             
        	  </isNotEmpty>
              GROUP BY PAWB.FLT_KEY , PAWB.FLT_DATE , PAWB.AWB_NO  , PAWB.AWB_DATE , NVL(RCL.ULD_KEY,'BULK'),awb.awb_type,PMAN.unldg_pt
              ) A
              JOIN AWB awb ON  awb.awb_no = A.awb and awb.awb_date = A.awbDate
              JOIN FLT_OPR opr ON  opr.flt_key = A.flight and opr.sch_date = A.flightDate AND opr.flt_type = 'D'
              order by A.orderFlight desc,A.uldNo,A.awb) B
	 </select>
	 
	 <select id="getRCLStatusForUpdERCL"  parameterClass="java.lang.String" resultClass="java.lang.String">
	  		SELECT STATUS FROM EXP_RCL_HD WHERE RCL_NO=#PARAM#
	  </select>
<select id="getExpFltManifestResultAWBSortedQuery" parameterClass="cargo.cms.export.bo.ExpFlightCargoManifestBO" resultClass="cargo.cms.export.bo.ExpFlightCargoManifestBO">
	  <![CDATA[
		select B.flight,B.flightDate,B.atd,STRAGG(STRINGDELIM(B.uldNo, ',')) as uldNo,B.agentName,B.awb,B.awbDate,B.awbPc,B.awbWt,
		SUM(B.manifestPc) as manifestPc,SUM(B.manifestWt) as manifestWt,B.premanPort,B.flowType,B.orig,B.dest,B.actDateDisp,B.partship,B.awbChargWt,B.shc
		FROM
			(select A.* ,
              awb.agent_name agentName,
              awb.PCS awbPc, awb.WT awbWt,
              awb.ORIG orig, awb.DEST dest,
              PKG_COMMON.get_flt_ata(A.flight, A.flightDate, 'D') atd ,  
              to_char(opr.ACT_DATE,'DDMONYY') || ' ' || decode(ACT_TIME,null,'', substr(lpad(ACT_TIME, 4, '0'), 1, 2)||':'||substr(ACT_TIME, -2)) actDateDisp,
              (select CASE WHEN COUNT(1) > 0 THEN 'Y' ELSE 'N' END from exp_pmanifest_awb where awb_no = A.awb and awb_date = A.awbDate and ( flt_key <> A.flight OR flt_date <> A.flightDate ) ) partship,
              ]]>
              (select rate_chrgble_wt from edi_fwb_chr_rate where tr_no = (SELECT MAX(A.TR_NO) FROM EDI_FWB A WHERE A.AWB_NO = A.awb and awb_date = A.awbDate ) AND rate_pcs > 0 AND rownum = 1) as awbChargWt,
              decode(awb.spl_code1, null, '', awb.spl_code1 || ',')
                                             || decode(awb.spl_code2, null, '', awb.spl_code2 || ',')
                                             || decode(awb.spl_code3, null, '', awb.spl_code3 || ',')
                                             || decode(awb.spl_code4, null, '', awb.spl_code4 || ',')
                                             || decode(awb.spl_code5, null, '', awb.spl_code5 || ',')
                                             || decode(awb.spl_code6, null, '', awb.spl_code6 || ',')
                                             || decode(awb.spl_code7, null, '', awb.spl_code7 || ',')
                                             || decode(awb.spl_code8, null, '', awb.spl_code8 || ',')
                                             || decode(awb.spl_code9, null, '', awb.spl_code9) as shc                 
              from (select PAWB.FLT_KEY as flight , to_char(PAWB.FLT_DATE,'DDMONYY') as flightDate , PAWB.FLT_DATE,
              PAWB.AWB_NO as awb , to_char(PAWB.AWB_DATE,'DDMONYY') as awbDate , NVL(RCL.ULD_KEY,'BULK') as uldNo ,
              SUM(pawb.assigned_pcs) manifestPc, SUM(pawb.assigned_wt) manifestWt,
              PMAN.unldg_pt premanPort,awb.awb_type flowType
              from exp_pmanifest_uld_awb PAWB
              left join EXP_ULD_AWB RCL ON RCL.ULD_KEY = PAWB.uld_bt_no and RCL.awb_no = PAWB.awb_no and RCL.awb_date = PAWB.awb_date
              JOIN AWB awb ON  awb.awb_no = PAWB.awb_no and awb.awb_date = PAWB.awb_date
              JOIN FLT_OPR flt ON  flt.flt_key = PAWB.FLT_KEY and flt.sch_date = PAWB.FLT_DATE AND flt.flt_type = 'D'
              JOIN flt_opr_events fltevent on flt.flt_key=fltevent.flt_key and flt.sch_date=fltevent.sch_date and flt.flt_type='D'
              JOIN exp_pmanifest_awb PMAN on PMAN.awb_no = PAWB.awb_no and PMAN.awb_date = PAWB.awb_date
              where awb.awb_type = 'E'
              <isNotEmpty property="reportType" >
					<isEqual property="reportType" compareValue="Y" prepend="AND">			
						PAWB.FLT_KEY = #flight# and PAWB.FLT_DATE = #flightDate#
					</isEqual>
					<isEqual property="reportType" compareValue="N" prepend="AND">
						flt.sch_date between to_date(#fromDate#,'DDMONYY') and to_date(#toDate#,'DDMONYY') AND 
						(AWB.CARR_CODE = UPPER(#carrier#) OR AWB.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP 
            				WHERE GRP_CARR_CODE = UPPER(#carrier#))) AND NVL(fltevent.FLT_CLS_YN,'N')='Y'
						 <isNotEmpty property="awbPrefix" prepend="AND">
						 		SUBSTR(pawb.awb_no,1,3)=#awbPrefix#
						 </isNotEmpty>
					</isEqual>			
			  </isNotEmpty> 
              <isNotEmpty property="loginCarrier">
                               AND (( flt.CARR_CODE = #loginCarrier# OR  flt.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE  = #loginCarrier#))
                        OR ( awb.CARR_CODE = #loginCarrier# OR  awb.CARR_CODE IN (SELECT CARR_CODE FROM MAST_CARR_GRP WHERE GRP_CARR_CODE  = #loginCarrier#)))             
        	  </isNotEmpty>
              GROUP BY PAWB.FLT_KEY , PAWB.FLT_DATE , PAWB.AWB_NO  , PAWB.AWB_DATE , NVL(RCL.ULD_KEY,'BULK'),awb.awb_type,PMAN.unldg_pt
              ) A
              JOIN AWB awb ON  awb.awb_no = A.awb and awb.awb_date = A.awbDate
              JOIN FLT_OPR opr ON  opr.flt_key = A.flight and opr.sch_date = A.flightDate AND opr.flt_type = 'D'
              order by A.flight,A.FLT_DATE,A.awb asc) B
              GROUP BY B.flight,B.flightDate,B.atd,B.agentName,B.awb,B.awbDate,B.awbPc,B.awbWt,
              B.premanPort,B.flowType,B.orig,B.dest,B.actDateDisp,B.partship,B.awbChargWt,B.shc
	 </select>
<select id="getExpFltManifestResultRCLDetailsQuery" parameterClass="cargo.cms.export.bo.ExpFlightCargoManifestBO" resultClass="cargo.cms.export.bo.ExpFlightCargoManifestBO">
	 SELECT SUM(rclPcs) as totalRclPcs,trim(TO_CHAR(NVL(SUM(rclWt),0),'999999999990D99')) as totalRclWt FROM(
	 SELECT NVL(EH.RCL_PCS,0)                       AS rclPcs,
  	 trim(TO_CHAR(NVL(EH.RCL_WT,0),'9999999999990D99')) AS rclWt
	 FROM EXP_RCL_HD EH
	 WHERE EH.PPK_TYPE IN ('P','B')
	 AND EH.STATUS NOT IN ('V','R')
     AND EH.AWB_NO      = #awb#
     AND EH.AWB_DATE    = TO_DATE(#awbDate#, 'DDMONYY')
     UNION ALL
     SELECT NVL(BRK.PCS,0)                                AS rclPcs,
     trim(TO_CHAR(NVL(BRK.WEIGHT,0),'999999999999990.00')) AS rclWt
     FROM EXP_RCL_HD EH,
     EXP_RCL_BRKDN BRK
     WHERE EH.RCL_NO    = BRK.RCL_NO
     AND EH.PPK_TYPE    = 'M'
     AND EH.STATUS NOT IN ('V','R')
     AND BRK.AWB_NO     = #awb#
     AND BRK.AWB_DATE   = TO_DATE(#awbDate#,'DDMONYY'))
	</select>
<select id="getExpFltManifestResultRCLNetWtQuery" parameterClass="cargo.cms.export.bo.ExpFlightCargoManifestBO" resultClass="cargo.cms.export.bo.ExpFlightCargoManifestBO">
	SELECT trim(TO_CHAR(NVL(SUM(rclWt),0),'999999999999990.00')) AS totalRclVolWt FROM(
       SELECT DTL.NET_WT AS rclWt FROM EXP_RCL_DTL DTL,EXP_RCL_HD HD
       WHERE DTL.RCL_NO = HD.RCL_NO AND HD.PPK_TYPE = 'P' AND HD.STATUS NOT IN ('V','R')
       AND HD.AWB_NO=#awb# AND HD.AWB_DATE=#awbDate#
       UNION ALL		 
		   SELECT	   
		   BRK.WEIGHT
	     FROM EXP_RCL_HD EH, EXP_RCL_BRKDN BRK
	     WHERE EH.RCL_NO = BRK.RCL_NO  AND EH.PPK_TYPE = 'M'  AND EH.STATUS NOT IN ('V','R')
       AND BRK.AWB_NO = #awb# 
		   AND BRK.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY'))
	</select>
	  <select id="sqlGetMatchingMasterAgentNumberName" parameterClass="java.lang.String" resultClass="cargo.cms.awb.bo.AWBEnquiryBO">
		SELECT CODE as iataAgentCode,CODE_DESC as iataAgentName FROM CUST_COMPANY WHERE CO_IATA_CODE=#PARAM# AND ROWNUM=1
	</select>
		<select id="getAWBTypeforFWBgls" parameterClass="cargo.cms.awb.bo.AWBEnquiryBO"  resultClass="java.lang.String">
		SELECT awb_type FROM AWB WHERE AWB_NO = UPPER(#awbNo#) AND AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
		</select> 
	<update id="sqlupdatecaragentdtlsbasediatacode" parameterClass="java.util.HashMap">
		UPDATE EXP_CAR SET			
			AGENT_CODE=         #iataAgtCode#,
			AGENT_NAME=         #iataAgentName#
		WHERE AWB_NO = #awbNo#
		and awb_date = to_date(#awbDate#,'DDMONYY')
	</update>
	<update id="sqlupdateawbagentdtlsbasediatacode" parameterClass="java.util.HashMap">
		UPDATE AWB SET			
			AGENT_CODE=         #iataAgtCode#,
			AGENT_NAME=         #iataAgentName#
		WHERE AWB_NO = #awbNo#
		and awb_date = to_date(#awbDate#,'DDMONYY')
	</update>
<select id="getLUCParticipantCodeConfiguredForCarr" parameterClass="java.lang.String" resultClass="java.lang.String">
		select LUC_PARTICIPANT_CODE from MAST_CARRIER where CODE = #carrCode#
	</select>
	  <!-- Validate ULD for CARRIER GROUP Start-->
	  	<select id="getCarrierGrp" parameterClass="java.lang.String" resultClass="java.lang.String">
	  	  SELECT FUN_GET_PARENT_CARR (#carr#) from DUAL	
		</select>
	  	<select id="validateULDForCarrierGrp" parameterClass="java.lang.String" resultClass="java.lang.String">
			WITH Carrier AS (
				select ROWNUM,B.* from (
				  	SELECT hd.CARR_CODE carr
			        FROM ULD_REL_HD hd
			        JOIN ULD_REL_DTL dtl
			        ON hd.TR_NO      =dtl.TR_NO
			        AND hd.EIR_NO    =dtl.EIR_NO
			        WHERE dtl.ULD_KEY=#uldNo# and REL_DATE IS NOT NULL 
			        ORDER BY hd.REL_DATE desc,hd.REL_TIME desc
			        )B where ROWNUM=1
			)
			  SELECT FUN_GET_PARENT_CARR (carr) from Carrier	
		</select>
	  <!-- Validate ULD for CARRIER GROUP END-->
	  <!-- Validate AWB for CARRIER GROUP Start-->
	  	<select id="validateAWBForCarrierGrpForMix" parameterClass="java.util.HashMap" resultClass="java.lang.String">
			  WITH Carrier AS (
			  		select ROWNUM,B.* from(
	                    select DISTINCT(hd.carr_code) carr, brk.PRE_RCL_NO from 
	                    EXP_PRE_RCL_HD hd join EXP_PRE_RCL_BRKDN brk on hd.PRE_RCL_NO=brk.PRE_RCL_NO
	                    where brk.awb_no=#awb# and brk.AWB_DATE=to_date(#awbDate#,'DDMONYY')
	                    order by brk.PRE_RCL_NO desc
	                    )B where ROWNUM=1
                )
          			SELECT FUN_GET_PARENT_CARR(carr) from Carrier		
		</select>
		<select id="validateAWBForCarrierGrpForPrePack" parameterClass="java.util.HashMap" resultClass="java.lang.String">
			  WITH Carrier AS (
			  		select ROWNUM,B.* FROM(
                     select DISTINCT(CARR_CODE) carr,PRE_RCL_NO from EXP_PRE_RCL_HD where awb_no=#awb# and AWB_DATE=to_date(#awbDate#,'DDMONYY')
                     order by PRE_RCL_NO desc
                     )B where ROWNUM=1
                )
          			SELECT FUN_GET_PARENT_CARR(carr) from Carrier		
		</select>
	  <!-- Validate AWB for CARRIER GROUP END-->
	  <select id="getEmptyIndExpPmanUld" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select EMPTY_YN as emptyInd from exp_pmanifest_uld where flt_key =#FltKey# and flt_date=#FltDate# and uld_bt_no=#UldKey#
	</select>
	<select id="getEmptyExpOffloadUld" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select EMPTY_YN as emptyInd from exp_OFFLOAD_uld where flt_key =#FltKey# and flt_date=#FltDate# and uld_bt_no=#UldKey#
	</select>
	<update id="updateEmptyExpOffloadULD" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
        UPDATE EXP_OFFLOAD_ULD SET EMPTY_YN = #oldEmpty# WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate#	AND ULD_BT_NO=#uldBtNo#
        </update>
	<update id="updateUnchkinEmptyUldInventory" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
         UPDATE ULD_INVENTORY  set EMPTY_FLG = #oldEmpty# where uld_key=#uldBtNo#
         </update>
         <update id="updateUnchkinEmptypmanULD" parameterClass="cargo.cms.export.bo.ExpOffloadUld">
         UPDATE EXP_PMANIFEST_ULD  set EMPTY_YN = #oldEmpty# where FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldBtNo#
         </update>

<select id="getPmanPortCtry" parameterClass="java.lang.String"  resultClass="java.lang.String">
		  SELECT CTRY_CODE FROM MAST_CITY A WHERE A.CODE= #PARAM#
          UNION
          SELECT B.CTRY_CODE FROM MAST_ARPT A,MAST_CITY B WHERE A.CITY_CODE=B.CODE AND A.CODE = #PARAM#
          AND NOT EXISTS (SELECT NULL FROM MAST_CITY A WHERE A.CODE= #PARAM#)
	</select>
    <select id="getMasterConfigForSecChk" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM CMSRULES WHERE RULE_CODE='SEC_JO_LOGIC' AND RULE_VALUE='Y'
	</select>
	<parameterMap id="getNewPMANBUMap" class="map" >
		<parameter property="RESULT" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
		<parameter property="P_AWBNO" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_AWBDATE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_PAXFRE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_PCS" jdbcType="NUMBER" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_FLTKEY" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_FLTDATE" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_ULD_KEY" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
		<parameter property="P_ACTION" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
	</parameterMap>	
	<procedure id="fetchNewPmanBUAllowedStatus" parameterMap="getNewPMANBUMap" >
		{ ? = call FUN_GET_JO_SEC_CHK_STATUS(?, ?, ?, ?, ?, ?, ?, ?)  }
	</procedure>	
        <update id="createBupEndorseEvent" parameterClass="java.util.HashMap">
	UPDATE EXP_PMANIFEST_ULD SET BLDUP_ENDORSED_BY=#endorseBy#,BLDUP_ENDORSED_DATE=DECODE(#endorseBy#,'','',null,'',SYSDATE),TR_TYPE_EVT=#trType#,LM_USER_ID=#userName#,LM_DATE=SYSDATE WHERE ULD_BT_NO=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE = #fltDate#
	</update>
	<select id="getNotifyEmailRequestBUPComp" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" resultClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" >
SELECT NOTF_MAIL_BU as notfyEmail,HNDLG_MODULE_BU as fltModReq FROM MAST_EDRE_LEVEL_BUP WHERE SEQ_NO = #endorseLevel#
</select>
<select id="getFltModuleNotifyEmailBUPComp" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" resultClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" >
SELECT EMAIL_ADDRESSES notfyEmail FROM MAST_MODULE_OFF_EMAIL WHERE MODULE_OFFICE IN (SELECT FLT_MODULE1 FROM FLT_OPR WHERE FLT_KEY=#fltNo# AND SCH_DATE=#fltDate# AND FLT_TYPE='D')
</select>
<select id="getNotifyFltModDataBUPComp" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" resultClass="cargo.cms.export.bo.DeclareBuildupCompleteSearchBO" >
select A.FLT_MODULE1 AS flightModule,PKG_COMMON.GET_FLT_STA(A.FLT_KEY,A.SCH_DATE, 'D', 'DD') AS std,PKG_COMMON.GET_FLT_ETA(A.FLT_KEY,A.SCH_DATE, 'D', 'DD') AS etd from FLT_OPR A where A.FLT_KEY=#fltNo# and A.SCH_DATE=#fltDate# and A.FLT_TYPE='D'
</select>
<select id="getULDLocationBUPComp" parameterClass="java.lang.String" resultClass="java.lang.String" >
SELECT LOC_CODE FROM ULD_INVENTORY WHERE ULD_KEY=#PARAM#
</select>
<select id="getNotifyEmailRequestBUPPman" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="cargo.cms.export.bo.ExportULDBO" >
SELECT NOTF_MAIL_BU as notfyEmail,HNDLG_MODULE_BU as fltModReq FROM MAST_EDRE_LEVEL_BUP WHERE SEQ_NO = #endorseLevel#
</select>
<select id="getFltModuleNotifyEmailBUPPman" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="cargo.cms.export.bo.ExportULDBO" >
SELECT EMAIL_ADDRESSES notfyEmail FROM MAST_MODULE_OFF_EMAIL WHERE MODULE_OFFICE IN (SELECT FLT_MODULE1 FROM FLT_OPR WHERE FLT_KEY=#fltKey# AND SCH_DATE=#fltDepDate# AND FLT_TYPE='D')
</select>
<select id="getNotifyFltModDataBUPPman" parameterClass="cargo.cms.export.bo.ExportULDBO" resultClass="cargo.cms.export.bo.ExportULDBO" >
select A.FLT_MODULE1 AS flightModule,PKG_COMMON.GET_FLT_STA(A.FLT_KEY,A.SCH_DATE, 'D', 'DD') AS std,PKG_COMMON.GET_FLT_ETA(A.FLT_KEY,A.SCH_DATE, 'D', 'DD') AS etd from FLT_OPR A where A.FLT_KEY=#fltKey# and A.SCH_DATE=#fltDepDate# and A.FLT_TYPE='D'
</select>
<select id="checkEndorseWeightVariance" parameterClass="java.lang.String" resultClass="java.lang.String" >
     SELECT '1' FROM MAST_EDRE_OUT_BOUND_LIST WHERE TO_NUMBER(#PARAM#) BETWEEN WT_VAR_FROM AND WT_VAR_TO AND SEQ_NO='1'
	 UNION ALL
	 SELECT '2' FROM MAST_EDRE_OUT_BOUND_LIST WHERE TO_NUMBER(#PARAM#) BETWEEN WT_VAR_FROM AND WT_VAR_TO AND SEQ_NO='2'
	 UNION ALL
	 SELECT '3' FROM MAST_EDRE_OUT_BOUND_LIST WHERE TO_NUMBER(#PARAM#) BETWEEN WT_VAR_FROM AND WT_VAR_TO AND SEQ_NO='3'
     </select>
	 <select id="getNotifyEmailRequest" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
SELECT NOTF_MAIL as notfyEmail,HNDLG_MODULE as fltModReq FROM MAST_EDRE_OUT_BOUND_LIST WHERE SEQ_NO = #endwtVarLevel#
</select>
<select id="getFltModuleNotifyEmail" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
SELECT EMAIL_ADDRESSES notfyEmail FROM MAST_MODULE_OFF_EMAIL WHERE MODULE_OFFICE IN (SELECT FLT_MODULE1 FROM FLT_OPR WHERE FLT_KEY=#fltKey# AND SCH_DATE=#fltDate# AND FLT_TYPE='D')
</select>
<select id="getNotifyFltModData" parameterClass="cargo.cms.export.bo.OutBoundULDListBO" resultClass="cargo.cms.export.bo.OutBoundULDListBO" >
select A.FLT_MODULE1 AS flightModule,PKG_COMMON.GET_FLT_STA(A.FLT_KEY,A.SCH_DATE, 'D', 'DD') AS std,PKG_COMMON.GET_FLT_ETA(A.FLT_KEY,A.SCH_DATE, 'D', 'DD') AS etd from FLT_OPR A where A.FLT_KEY=#fltKey# and A.SCH_DATE=#fltDate# and A.FLT_TYPE='D'
</select>
<update id="declare_buildup_complete_uld_reset_endorse" parameterClass="map" >
    update 
          exp_flt_uld
    set 
          ENDORSED_WT_BY = '', 
          ENDORSED_WT_DATE = '' 
    where  flt_key = #fltNo#  and flt_date = TO_DATE(#fltDate#,'DDMONYY')  and    uld_key = #uldNo#  
    </update>
	<update id="createNonColoadEndorseEvent" parameterClass="java.util.HashMap">
	UPDATE EXP_PMANIFEST_ULD SET NON_COLD_ENDORSED_BY=#endorseBy#,NON_COLD_ENDORSED_DATE=DECODE(#endorseBy#,'','',null,'',SYSDATE),TR_TYPE_EVT=#trType#,LM_USER_ID=#userName#,LM_DATE=SYSDATE WHERE ULD_BT_NO=#uldKey# AND FLT_KEY=#fltKey# AND FLT_DATE = #fltDate#
	</update>
	<update id="sqlupdatelmuserinexppman" parameterClass="cargo.cms.export.bo.BulkCargoBO" >
			UPDATE EXP_PMANIFEST_AWB SET LM_USER_ID = #userID# 
			WHERE
			  AWB_NO =#awbNo#
			  AND AWB_DATE = #awbDate#
			  AND FLT_KEY = #fltNo#
			  AND FLT_DATE = #fltDate#
			  AND UNLDG_PT = #bulk_UnldgPT_DB#
	</update>
<select id="buildUPExists" parameterClass="map" resultClass="java.lang.String">
		SELECT TO_CHAR(COUNT(1)) FROM EXP_PMANIFEST_ULD WHERE uld_bt_no = #uldKey# AND FLT_KEY = #flightKey# AND FLT_DATE = #flightDate# AND NVL(bldup_complete,'N') = 'Y'
	</select>
	<update id="sqlupdatelmuserinPPKexppman" parameterClass="java.util.HashMap" >
			UPDATE EXP_PMANIFEST_AWB SET LM_USER_ID = #USER_ID# 
			WHERE
			  AWB_NO =#AWB_NO#
			  AND AWB_DATE = #AWB_DATE#
			  AND FLT_KEY = #FLT_KEY#
			  AND FLT_DATE = #FLT_DATE#
			  AND UNLDG_PT = #UNLDG_PT#
	</update>
	<select id="isULDispallet" parameterClass="map" resultClass="java.lang.Integer">
	SELECT COUNT(1)
		FROM uld_group_type gt,
  			 mast_uld_allot_group uag,
  			 mast_uld_allot ua,
  			 mast_uld_group ug
	   WHERE gt.uld_group = uag.uld_group
			 AND uag.uld_allot  = ua.uld_allot
			 AND ug.uld_group   = uag.uld_group
	         AND gt.uld_type    = #ULD_TYPE#
			 AND ua.plt_cnt     = 'Pallet'
	</select>
	<update id="updateOBCUldInv1" parameterClass="cargo.cms.export.bo.MaintainOutboundOBCSearchBO">
			update uld_inventory set
                  owned_inv = 'Y',
                  cfm_status = 'CONFIRMED',
                  loc_code = #locn#,
                  EMPTY_FLG = 'N',
                  ENTRY_TIME = sysdate,
                  gross_weight = #grossWt#             
             where uld_key = #uldBtNo#
	</update>
	<update id="updatefltdetailsforolduld" parameterClass="java.lang.String" >
  update uld_inventory set flt_key='',flt_date='',flt_type='' where uld_key=#PARAM#
  </update>
  <select id="getWithoutSendHOForm"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT  SUBSTR(RELDTL.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT FROM ULD_REL_DTL RELDTL
		LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = RELDTL.HO_FORM_NO AND EXPHOVER.ULD_KEY = RELDTL.ULD_KEY  
    	WHERE RELDTL.HO_FORM_NO IS NULL  AND RELDTL.EIR_NO=#urfNo#
		AND RELDTL.ULD_KEY IS NOT NULL
    	<isNotEmpty property="loginAsRho">
		AND EXPHOVER.RAMP_USER=#loginAsRho# and EXPHOVER.RAMP_USER is not null 
		</isNotEmpty>
    	GROUP BY SUBSTR(RELDTL.ULD_KEY,1,3)		
	</select>
	<select id="getWithoutPrintHOForm"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(RELDTL.ULD_KEY,1,3) ULD_TYPE,  COUNT(1) ULD_COUNT
		FROM ULD_REL_DTL RELDTL
  		LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO         = RELDTL.HO_FORM_NO AND EXPHOVER.ULD_KEY              = RELDTL.ULD_KEY
    	WHERE RELDTL.HO_FORM_NO IS NOT NULL AND EXPHOVER.PRINT_HANDOVER_DATE IS NULL   AND RELDTL.EIR_NO=#urfNo#
    AND RELDTL.ULD_KEY IS NOT NULL
    	<isNotEmpty property="loginAsRho">
		AND EXPHOVER.RAMP_USER=#loginAsRho# and EXPHOVER.RAMP_USER is not null 
		</isNotEmpty>
    	GROUP BY SUBSTR(RELDTL.ULD_KEY,1,3)			  
	</select>
	<select id="getWithoutSendFltHOForm"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
		SELECT SUBSTR(RELDTL.ULD_KEY,1,3) ULD_TYPE,
		  COUNT(1) ULD_COUNT
		FROM exp_chkout_dtl RELDTL ,
  	FLT_OPR OPR,EXP_FLT_ULD ULD
		WHERE OPR.FLT_KEY      =RELDTL.FLT_KEY
		AND OPR.SCH_DATE       = RELDTL.FLT_DATE
		AND OPR.flt_type       ='D'
		AND RELDTL.HO_FORM_NO IS NULL
		AND RELDTL.flt_key     = #fltNo#
		AND RELDTL.FLT_DATE    = #fltDate#
    AND ULD.FLT_KEY = RELDTL.FLT_KEY
    AND ULD.FLT_DATE = RELDTL.FLT_DATE
    AND ULD.ULD_KEY = RELDTL.ULD_KEY
    AND NVL(ULD.HANDLING_MODE, 'N') != 'DT'
    AND ( NOT (NVL(ULD.TRANSIT_TYPE, 'N') = 'TT'))
	AND ULD.SOURCE NOT IN ('DLS-L', 'DLS-E')
      <isEmpty property="loginCarrier">
			<isNotEmpty prepend="AND" property="loginCustCode">
			    OPR.RHO_ID         = #loginCustCode#
			</isNotEmpty>
			</isEmpty>
    	GROUP BY SUBSTR(RELDTL.ULD_KEY,1,3)		
	</select>
	<select id="getWithoutPrintFltHOForm"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.util.HashMap">
	SELECT SUBSTR(RELDTL.ULD_KEY,1,3) ULD_TYPE,
		  COUNT(1) ULD_COUNT
		FROM exp_chkout_dtl RELDTL ,
  		FLT_OPR OPR,
      EXP_ULD_HOVER_DTL EXPHOVER 
		WHERE 
    EXPHOVER.HO_FORM_NO = RELDTL.HO_FORM_NO AND 
    EXPHOVER.ULD_KEY = RELDTL.ULD_KEY AND
    OPR.FLT_KEY      =RELDTL.FLT_KEY
		AND OPR.SCH_DATE       = RELDTL.FLT_DATE
		AND OPR.flt_type       ='D'
		AND RELDTL.HO_FORM_NO IS NOT NULL
		AND EXPHOVER.PRINT_HANDOVER_DATE IS NULL
		AND RELDTL.flt_key     = #fltNo#
		AND RELDTL.FLT_DATE           = #fltDate#
      <isEmpty property="loginCarrier">
			<isNotEmpty prepend="AND" property="loginCustCode">
			    OPR.RHO_ID         = #loginCustCode#
			</isNotEmpty>
			</isEmpty>
    	GROUP BY SUBSTR(RELDTL.ULD_KEY,1,3)
	</select>
	<select id="getWithoutPrintHOFormColorURF"  parameterClass="cargo.cms.export.bo.RampMonitoringBO" resultClass="java.lang.String">
	<![CDATA[
		      SELECT (CASE WHEN COUNT(1) > 0 THEN 'Y' ELSE 'N' END) FROM 
            (SELECT (CASE WHEN round((SYSDATE - SEND_HANDOVER_DATE) * (60 * 24),2)  > (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='CONFIG_PRINT_TIME_FOR_ULD') THEN 'Y' ELSE 'N' END) AS printInd
      			FROM ULD_REL_DTL A,EXP_ULD_HOVER_DTL EXPHOVER ,ULD_ISS_HD HD WHERE HD.EIR_NO = A.EIR_NO AND A.EIR_NO = EXPHOVER.EIR_NO AND EXPHOVER.HO_FORM_NO = A.HO_FORM_NO AND A.HO_FORM_NO IS NOT NULL AND EXPHOVER.PRINT_HANDOVER_DATE IS NULL AND A.EIR_NO = #urfNo# AND EXPHOVER.ULD_KEY = A.ULD_KEY
      			AND HD.EST_TIME BETWEEN SYSDATE AND SYSDATE + (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='CONFIG_PRINT_TIME_EST_TIME')/(60*24)
            ) A 
      			WHERE A.printInd = 'Y'
      		]]>
	</select>
	<select id='flight_handling_report_er_pman_list'	parameterClass="map" resultClass="cargo.cms.export.bo.ExpFltHoFormListBO">
	SELECT to_char(LM_DATE,'DDMONYY HH24:MI') as latstPmanTime,
  		   pmanPcs as latstPmanPcs,
  		   to_char(nvl(pmanWt,0),'999999990.99') as latstpmanWt
		FROM
  		   (SELECT FLT_KEY, FLT_DATE, AWB_NO, lm_date, SUM(pmanawb.PMAN_PCS) AS pmanPcs, SUM(pmanawb.PMAN_WT) pmanWt FROM exp_pmanifest_awb pmanawb  WHERE pmanawb.flt_key = #fltKey#  AND pmanawb.flt_date  = #fltDate#  AND pmanawb.awb_no=#awbNo#  GROUP BY FLT_KEY,    FLT_DATE,    AWB_NO,    LM_DATE  ) WHERE ROWNUM=1
	</select>
	<select id="getFLTListforRampMonitoring" parameterClass="cargo.cms.export.bo.RampMonitoringBO"  resultClass="cargo.cms.export.bo.RampExportBO">
				   select
                     DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  t3.FLT_KEY as fltNo,
                  to_char(t3.FLT_DATE,'ddMONYY') as fltDate ,
                  t3.ULD_bt_no as uldNo,
                  DECODE(T1.UIT_PRINT_TYPE,'','N','M','Y','N') AS manualPrintUIT,
                  t2.carr_code                   AS fltPfx,
                     t2.flt_no                      AS fltSfx,
                     (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.ULD_bt_no,0,3)) AS btCont,
                     DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  EXPHOVER.HO_FORM_NO as hoFormNo,
                  to_char(t1.OB_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  decode(t3.READY_DISP,null,'N',t3.READY_DISP) as readyForDispatch,
                  to_char(t1.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t1.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM &lt; 10)  spl,                   
                  t3.bldup_complete as bldupComplete,
                  t2.handling_mode ppkType,
                  (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T3.flt_key and t4.flt_date=T3.flt_date and t5.uld_key=T3.ULD_BT_NO) as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff,
                  EXPHOVER.RAMP_USER as rHO,
                  '' as dspTo,
                  '' as urfNo,
                  PKG_COMMON.get_flt_eta(opr.FLT_KEY, opr.SCH_DATE, 'D') etd,
                  EXPHOVER.HO_STATUS as hoFormStat,
                  TO_CHAR(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoPrintDate,
                  TO_CHAR(EXPHOVER.SEND_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoSendDate                      
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       exp_pmanifest_uld t3
                        join flt_opr opr
                             on opr.flt_key=t3.flt_key
                        and opr.sch_date=t3.flt_date
                        AND opr.flt_type = 'D'
                  
                  join uld_inventory t2
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                  LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where   (t2.handling_mode is null or t2.handling_mode!='DT')
                  and t3.uld_bt_no not in (select uld_key from exp_flt_uld 
                                           where (Source='DLS-L' or Source='DLS-E') 
                                           and uld_key=t3.ULD_bt_no and flt_key=t3.flt_key and flt_date=t3.flt_date and FLT_TYPE='E')
                      
                 and t3.flt_key= #fltKey#
                 and t3.flt_date=TO_DATE(#fltDate#,'DDMONYY')
                and  gt.uld_group   = uag.uld_group
                   AND uag.uld_allot    = ua.uld_allot
                   AND ug.uld_group     = uag.uld_group
                   AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3)
                   and EXPHOVER.ho_form_no is not null
                   and EXPHOVER.ho_status = 'Send'
                 <isNotEmpty property="loginAsRho">
                 and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #loginAsRho# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1))
                 </isNotEmpty>
                 UNION
                  select
                  DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  t3.FLT_KEY as fltNo,
                  to_char(t3.FLT_DATE,'ddMONYY') as fltDate ,
                  t3.ULD_bt_no as uldNo,
                  DECODE(T1.UIT_PRINT_TYPE,'','N','M','Y','N') AS manualPrintUIT,
                  t2.carr_code                   AS fltPfx,
                     t2.flt_no                      AS fltSfx,
                     (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.ULD_bt_no,0,3)) AS btCont,
                     DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(T1.CHKOUT_TIME,0), 0,TO_CHAR(T1.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(T1.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(T1.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  t1.HO_FORM_NO as hoFormNo,
                  to_char(t1.OB_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  case when t2.TRANSIT_TYPE='IF' then NVL(t3.READY_DISP,'N') else 'Y' end as readyForDispatch,
                  to_char(t1.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t1.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = T1.ULD_KEY AND ROWNUM &lt; 10)  spl,                 
                  'Y' as bldupComplete,
                  t2.handling_mode ppkType,
                  (select lpad(MAX(TO_NUMBER(t4.to_no)),8,0) from tow_order_out t4 , tow_order_out_dtl t5 
                    where (STATUS IN ('ISSUED','COMPLETE') or (STATUS = 'FORCE COMPLETE' and t5.remove_date is not null))
                    and t4.to_no=t5.to_no and t4.flt_key=T3.flt_key and t4.flt_date=T3.flt_date and t5.uld_key=T3.ULD_BT_NO) as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff,
                  EXPHOVER.RAMP_USER as rHO,
                  '' as dspTo,
                  '' as urfNo,
                  PKG_COMMON.get_flt_eta(opr.FLT_KEY, opr.SCH_DATE, 'D') etd,
                  EXPHOVER.HO_STATUS as hoFormStat,
                  TO_CHAR(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoPrintDate,
                  TO_CHAR(EXPHOVER.SEND_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoSendDate                    
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       exp_pman_tarmac_uld t3
                   join flt_opr opr
                             on opr.flt_key=t3.flt_key
                        and opr.sch_date=t3.flt_date
                        AND opr.flt_type = 'D'
                  join uld_inventory t2
                  
                  on  t3.flt_key=t2.flt_key
                  and t3.flt_date=t2.flt_date
                  and t3.uld_bt_no = t2.uld_key  
                  left join exp_chkout_dtl t1
                  on  t1.uld_key = t3.uld_bt_no
                  and t1.flt_key=t3.flt_key
                  and t1.flt_date=t3.flt_date
                 LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t1.HO_FORM_NO AND EXPHOVER.ULD_KEY = t1.ULD_KEY
                  where (t2.handling_mode is null or t2.handling_mode!='DT')
                  and t3.uld_bt_no not in (select uld_key from exp_flt_uld 
                                           where (Source='DLS-L' or Source='DLS-E') 
                                           and uld_key=t3.ULD_bt_no and flt_key=t3.flt_key and flt_date=t3.flt_date and FLT_TYPE='E')
                  and t3.uld_bt_no in (select uld_key 
                                          from uld_inventory
                                           where (transit_type='TT' or transit_type='IF') 
                                           and imp_flt_key in (select flt_key
                                                             from v_ddt_dtl
                                                             where uld_key=t3.uld_bt_no 
                                                             and shp_cntg_flt_key=t3.flt_key
                                                             and shp_cntg_flt_date=t3.flt_date)
                                           and imp_flt_date in (select flt_date
                                                             from v_ddt_dtl
                                                             where uld_key=t3.uld_bt_no
                                                             and shp_cntg_flt_key=t3.flt_key
                                                             and shp_cntg_flt_date=t3.flt_date)
                                           )
                                           
                   and t3.flt_key= #fltKey#
                   and t3.flt_date=TO_DATE(#fltDate#,'DDMONYY')
                   and gt.uld_group   = uag.uld_group
                   AND uag.uld_allot    = ua.uld_allot
                   AND ug.uld_group     = uag.uld_group
                   AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3)
                   and EXPHOVER.ho_form_no is not null
                   and EXPHOVER.ho_status = 'Send'
                    <isNotEmpty property="loginAsRho">
                 	and opr.RHO_ID IS NOT NULL AND (opr.RHO_ID = #loginAsRho# OR opr.RHO_ID = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1))
                 	</isNotEmpty>
                    ORDER BY hoFormNo DESC
         </select>
	<select id="getURFListforRampMonitoring" parameterClass="cargo.cms.export.bo.RampMonitoringBO"  resultClass="cargo.cms.export.bo.RampExportBO">
select
                  DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  '' as fltNo,
                  '' as fltDate ,
                  t3.uld_key as uldNo,
                  '' AS manualPrintUIT,
                  t2.carr_code                   AS fltPfx,
                  t2.flt_no                      AS fltSfx,
                  (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.uld_key,0,3)) AS btCont,
                  DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(t3.CHKOUT_TIME,0), 0,TO_CHAR(t3.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(t3.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(t3.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(t3.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  t3.HO_FORM_NO as hoFormNo,
                  to_char(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  'N' as readyForDispatch,
                  to_char(t3.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t3.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = t3.ULD_KEY AND ROWNUM &lt; 10)  spl,                   
                  '' as bldupComplete,
                  t2.handling_mode ppkType,
                  '' as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  t2.UIT_PRINT as uitPrint,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff ,
                  EXPHOVER.RAMP_USER as rHO,
                  (select code_desc from mast_code_dtl where code = t6.PURPOSE AND CODE_TYPE='URF_PURPOSE' and rownum=1) as dspTo,
                   t6.eir_no as urfNo,
                  to_char(est_time,'HH24:MI') etd,
                  EXPHOVER.HO_STATUS as hoFormStat,
                  TO_CHAR(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoPrintDate,
                  TO_CHAR(EXPHOVER.SEND_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoSendDate                  
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       uld_rel_dtl t3
                       LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t3.HO_FORM_NO AND EXPHOVER.ULD_KEY = t3.ULD_KEY
                join uld_inventory t2 on  t2.uld_key  = t3.ULD_KEY
                join uld_iss_hd t6 on t6.eir_no = t3.eir_no
                where   gt.uld_group   = uag.uld_group
                   AND uag.uld_allot    = ua.uld_allot
                   AND ug.uld_group     = uag.uld_group
                   AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3) 
					AND t3.uld_key IS NOT NULL
                   AND t3.eir_no=#urfNo#
                   <isNotEmpty property="loginAsRho">
					AND EXPHOVER.RAMP_USER=#loginAsRho# and EXPHOVER.RAMP_USER is not null 
				   </isNotEmpty>
                   AND t3.HO_FORM_NO IS NOT NULL
                   and EXPHOVER.ho_status = 'Send'
                  order by t3.HO_FORM_NO desc
 </select>
 <select id="sqlgeurecordinexpchkoutdtl" parameterClass="cargo.cms.export.bo.RampExportBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_CHKOUT_DTL WHERE ho_form_no = #hoFormNo#
		</select>
		<select id="sqlcheckloginuserisRHO" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT count(1) FROM CUST_COMPANY WHERE CODE = (SELECT CUST_NO FROM SEC_USER WHERE CODE= UPPER(#PARAM#)) AND RHO_YN='Y' AND ROWNUM=1
		</select>
		<update id="sqlUpdateFltPrintHODtls" parameterClass="cargo.cms.export.bo.RampExportBO">
			UPDATE EXP_ULD_HOVER_DTL 
			SET 
			TR_TYPE_EVT = 'PHFRM',			
			PRINT_HANDOVER_DATE=NVL(PRINT_HANDOVER_DATE,sysdate),
			PRINT_HANDOVER_USER=#userID#,
			HO_STATUS = DECODE(HO_STATUS,'Print (Modified)','Print (Modified)','Print'),
			LM_USER_ID = #userID#,
			LM_DATE = sysdate
			WHERE ho_form_no = #hoFormNo#
		</update>
		<update id="sqlUpdateSendHandoverDtlsbasedonflt" parameterClass="cargo.cms.export.bo.RampExportBO">
			UPDATE EXP_CHKOUT_DTL 
			SET 
			TR_TYPE = 'PULDH',			
			HO_FORM_NO=#hoFormNo#,
			LM_USER_ID = #userID#,
			LM_DATE = sysdate
			WHERE FLT_KEY=#fltNo#
			AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY')
			AND ULD_KEY=#uldNo#
		</update>
		<update id="sqlUpdateSendHandoverDtlsbasedonURF" parameterClass="cargo.cms.export.bo.RampExportBO">
			UPDATE ULD_REL_DTL 
			SET 
			TR_TYPE_EVT = 'PULDH',	
			HO_FORM_NO=#hoFormNo#,
			LM_USER_ID = #userID#,
			LM_DATE = sysdate
			WHERE EIR_NO = #urfNo#
			AND ULD_KEY=#uldNo#
		</update>
		<update id="insertsendHoverHDDetails" parameterClass="cargo.cms.export.bo.RampExportBO">
		INSERT INTO EXP_ULD_HOVER_DTL (SEQ_NO,FLT_KEY,FLT_DATE,EIR_NO,ULD_KEY,HO_FORM_NO,SEND_HANDOVER_DATE,SEND_HANDOVER_USER,TR_TYPE_EVT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,ramp_user,RAMP_RECV_USER,HO_STATUS,dsp_to,cool_dolly_id) VALUES 
		(EXP_ULD_HOVER_DTL_PK_SEQ.nextval,#fltNo#,#fltDate#,#urfNo#,#uldNo#,#hoFormNo#,SYSDATE,#username#,'PHFRM',#username#,SYSDATE,#username#,SYSDATE,#rampRecvUsr#,#rampRHOStaff#,'Send',(SELECT code FROM mast_code_dtl WHERE code_desc = #dspTo# and code_type='URF_PURPOSE' AND rownum      =1),#dollyNo#)
		</update>
		<update id="updatesendHoverHDDetails" parameterClass="cargo.cms.export.bo.RampExportBO">
			UPDATE EXP_ULD_HOVER_DTL 
			SET 
			TR_TYPE_EVT = 'PHFRM',			
			SEND_HANDOVER_DATE=sysdate,
			SEND_HANDOVER_USER=#username#,
			dsp_to = (SELECT code FROM mast_code_dtl WHERE code_desc = #dspTo# and code_type='URF_PURPOSE' AND rownum      =1),		
			HO_FORM_NO=#hoFormNo#,
			ramp_user=#rampRecvUsr#,
			RAMP_RECV_USER=#rampRHOStaff#,
			HO_STATUS = 'Send',
			LM_USER_ID = #userID#,
			LM_DATE = sysdate,
			COOL_DOLLY_ID = #dollyNo#		
			WHERE SEQ_NO = #seqNo#
		</update>
	<update id="deleteHandoverFormRejDtl" parameterClass="cargo.cms.export.bo.RampExportBO">
		DELETE FROM EXP_ULD_HOVER_REJ_DTL WHERE FLT_KEY=#fltNo# AND ULD_KEY=#uldNo# and flt_date = #fltDate#
		</update> 		
      <select id="sqlGetseqnobasedfltuld" parameterClass="cargo.cms.export.bo.RampExportBO"  resultClass="java.lang.String"> 
			 SELECT SEQ_NO FROM EXP_ULD_HOVER_DTL WHERE FLT_KEY=#fltNo# AND FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') AND ULD_KEY=#uldNo#
 		</select>
		<select id="sqlGetRHOUserbasedonLogin" parameterClass="java.lang.String"  resultClass="java.lang.String"> 
			 SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = (SELECT CUST_NO FROM SEC_USER WHERE CODE= UPPER(#PARAM#)) AND RHO_YN='Y' AND ROWNUM=1
 		</select>
		<select id="sqlGetseqnobasedURFuld" parameterClass="cargo.cms.export.bo.RampExportBO"  resultClass="java.lang.String"> 
			 SELECT SEQ_NO FROM EXP_ULD_HOVER_DTL WHERE EIR_NO = #urfNo# AND ULD_KEY=#uldNo#
 		</select>
		<update id="sqlRemoveHandoverDtlsbasedonflt" parameterClass="cargo.cms.export.bo.RampExportBO">
		UPDATE EXP_CHKOUT_DTL 
		SET 
		TR_TYPE = 'PULDH',			
		HO_FORM_NO='',
		LM_USER_ID = #userID#,
		LM_DATE = sysdate
		WHERE HO_FORM_NO = #hoFormNo# and ULD_KEY=#uldNo#
		</update>
		<update id="sqlRemoveHandoverDtlsbasedonURF" parameterClass="cargo.cms.export.bo.RampExportBO">
		UPDATE ULD_REL_DTL 
		SET 
		tr_type_evt = 'PULDH',	
		HO_FORM_NO='',
		LM_USER_ID = #userID#,
		LM_DATE = sysdate
		WHERE HO_FORM_NO = #hoFormNo# and ULD_KEY=#uldNo#
		</update>
		<delete id="sqlRemoveHandoverHDDtls" parameterClass="cargo.cms.export.bo.RampExportBO" >
		DELETE FROM EXP_ULD_HOVER_DTL WHERE HO_FORM_NO = #hoFormNo# and ULD_KEY=#uldNo#
		</delete>
		<select id="checkSendHOFormConfig" parameterClass="java.lang.String"  resultClass="java.lang.String"> 
			SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='RHO_EMAIL_ATTACHMENT_CHECK'
 		</select>
		<select id="checkSendHOFormConfigEmail" parameterClass="java.lang.String"  resultClass="java.lang.String"> 
			SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='PRINT_ULD_HO_RHO_EMAIL_ADD'
 		</select>
		<select id="checkSendHOFormCustomerEmail" parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.RampExportBO"> 
			SELECT EMAIL1 AS email1,EMAIL2 AS email2,EMAIL3 AS email3,EMAIL4 AS email4,EMAIL5 AS email5 FROM CUST_COMPANY WHERE CODE_DESC = #PARAM#
 		</select>
		<select id="sqlGetRampURFPurposes" resultClass="cargo.cms.export.bo.FlightSearchBO">
		SELECT CODE value,
		CODE_DESC name FROM MAST_CODE_DTL WHERE CODE_TYPE = 'URF_PURPOSE'
		ORDER BY CODE_DESC ASC
		</select>
		<update id="sqlupdateHOFormStatusuldtag" parameterClass="java.lang.String">
		UPDATE EXP_ULD_HOVER_DTL 
		SET 
		HO_STATUS = DECODE(HO_STATUS,'','','Send','Send','Print','Print (Modified)',HO_STATUS)
		WHERE HO_FORM_NO = #hoFormNo#
		</update>
		<select id="sqlGetRHOUserbasedonCODE" parameterClass="java.lang.String"  resultClass="java.lang.String"> 
			 SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = #PARAM# AND RHO_YN='Y' AND ROWNUM=1
 		</select>
		
<select id="sqlGetListOfUldForURFPrint" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.RampExportBO">
                  select
                  DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  '' as fltNo,
                  '' as fltDate ,
                  t3.uld_key as uldNo,
                  '' AS manualPrintUIT,
                  t2.carr_code                   AS fltPfx,
                  t2.flt_no                      AS fltSfx,
                  (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.uld_key,0,3)) AS btCont,
                  DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(t3.CHKOUT_TIME,0), 0,TO_CHAR(t3.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(t3.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(t3.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(t3.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  t3.HO_FORM_NO as hoFormNo,
                  to_char(t3.OB_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  'N' as readyForDispatch,
                  to_char(t3.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t3.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = t3.ULD_KEY AND ROWNUM &lt; 10)  spl,                   
                  '' as bldupComplete,
                  t2.handling_mode ppkType,
                  '' as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff ,
                  EXPHOVER.RAMP_USER as rHO,
                  (select code_desc from mast_code_dtl where code = t6.PURPOSE AND CODE_TYPE='URF_PURPOSE' and rownum=1) as dspTo,
                   t6.eir_no as urfNo,
                  to_char(est_time,'HH24:MI') etd,
                  EXPHOVER.HO_STATUS as hoFormStat,
                  TO_CHAR(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoPrintDate,
                  TO_CHAR(EXPHOVER.SEND_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoSendDate,
                  DECODE(t2.FINAL_WEIGHT,'Y','Y','N') as finalWtInd                   
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       uld_rel_dtl t3
                LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t3.HO_FORM_NO AND EXPHOVER.ULD_KEY = t3.ULD_KEY
                join uld_inventory t2 on  t2.uld_key  = t3.ULD_KEY
                join uld_iss_hd t6 on t6.eir_no = t3.eir_no
                where   
                not exists (select null from uld_rel_hd a,uld_iss_hd b where b.eir_no = a.eir_no and b.purpose = 'Agt' and b.airside_rel ='N' and a.eir_no = t3.eir_no) and
                <isNotEmpty property="urfNo"> 
                  t3.eir_no=#urfNo# and 
                 </isNotEmpty>
                <isNotEmpty property="urfEstDateFrom">
                <isNotEmpty property="urfEstDateTo">   
                  to_date(to_char(t6.est_time,'DDMONYY HH24MI'),'DDMONYY HH24MI') between to_Date(#urfEstDateFrom#||' '||#urfEstDateFromhh#||#urfEstDateFrommm#,'DDMONYY HH24MI') and to_Date(#urfEstDateTo#||' '||#urfEstDateTohh#||#urfEstDateTomm#,'DDMONYY HH24MI') AND
                  </isNotEmpty>
                 </isNotEmpty>
                 <isEqual property="woutHoverForm" compareValue="Y">
                  t3.ho_form_no is null and
                  </isEqual>
                  <isNotEmpty property="rhoId">         
                   EXPHOVER.ramp_user IS NOT NULL AND (EXPHOVER.ramp_user = #rhoId# OR EXPHOVER.ramp_user = (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = #rhoId# AND RHO_YN='Y' AND ROWNUM=1)) and 
                 </isNotEmpty> 
                 <isNotEmpty property="loginAsRho">
                 EXPHOVER.ramp_user IS NOT NULL AND (EXPHOVER.ramp_user = #loginAsRho# OR EXPHOVER.ramp_user = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1)) and
                 </isNotEmpty>
                  <isNotEmpty property="urfPurpose">
                  T6.purpose = #urfPurpose# AND
                  </isNotEmpty>
                  gt.uld_group   = uag.uld_group
                   AND uag.uld_allot    = ua.uld_allot
                   AND ug.uld_group     = uag.uld_group
                   AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3) 
                  
                  <dynamic prepend="ORDER BY ">
                      <isNotEmpty property="sortOrder.sortField">
                        $sortOrder.sortField$
                    </isNotEmpty>
                    <isEmpty property="sortOrder.sortField">
                        urfNo,hoFormNo,uldNo desc
                    </isEmpty>
                   </dynamic> 
         </select>
		 <select id="sqlGetListOfUldForURFPrintCOUNT" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="java.lang.Integer">
                                                SELECT COUNT(1) AS totalRowCount FROM (select
                  DECODE(ua.plt_cnt,'Container',UG.PLT_CNT_SIZE,ua.plt_cnt) as uldCat,
                  '' as fltNo,
                  '' as fltDate ,
                  t3.uld_key as uldNo,
                  '' AS manualPrintUIT,
                  t2.carr_code                   AS fltPfx,
                  t2.flt_no                      AS fltSfx,
                  (SELECT DECODE(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) FROM MAST_ULD_TYPE WHERE CODE=substr(t3.uld_key,0,3)) AS btCont,
                  DECODE(t2.PPK_IND,'Y','Y',DECODE(t2.MIX_PPK_IND,'Y','Y','N')) as ppkInd,
                  DECODE(NVL(t3.CHKOUT_TIME,0), 0,TO_CHAR(t3.CHKOUT_DATE,'DDMONYY HH24:MI'),TO_CHAR(t3.CHKOUT_DATE,'DDMONYY')|| substr(TO_CHAR(t3.CHKOUT_TIME,'0000'),1,3) || ':' || substr(TO_CHAR(t3.CHKOUT_TIME,'0000'),4,5)) chkOutTime,
                  decode(EXPHOVER.PRINT_HANDOVER_DATE,null,'N','Y') as handOverIndDate,
                  t3.HO_FORM_NO as hoFormNo,
                  to_char(t3.OB_HANDOVER_DATE,'DDMONYY HH24:MI') as hoTime,
                  'N' as readyForDispatch,
                  to_char(t3.chkout_date,'ddMONYY hh:mm') as chkOutDate,
                  t2.loc_code as locn,
                  t2.EIC_FLG as eicFlg,
                  t2.EMPTY_FLG as emptyFlg,
                  t3.chkout_locn as chkOutLoc,                  
                  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = t3.ULD_KEY AND ROWNUM &lt; 10)  spl,                   
                  '' as bldupComplete,
                  t2.handling_mode ppkType,
                  '' as towOrderNo,
                  t2.RESV_FLG as resvFlg,
                  t2.contr_code as contrCode,
                  (case when T2.FINAL_WEIGHT ='Y' and T2.FIRST_WT != T2.GROSS_WEIGHT then 'Y' else 'N' end) as finalWtDiff ,
                  EXPHOVER.RAMP_USER as rHO,
                  (select code_desc from mast_code_dtl where code = t6.PURPOSE AND CODE_TYPE='URF_PURPOSE' and rownum=1) as dspTo,
                   t6.eir_no as urfNo,
                  to_char(est_time,'HH24:MI') etd,
                  EXPHOVER.HO_STATUS as hoFormStat,
                  TO_CHAR(EXPHOVER.PRINT_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoPrintDate,
                  TO_CHAR(EXPHOVER.SEND_HANDOVER_DATE,'DDMONYY HH24:MI') AS hoSendDate                  
                  from uld_group_type gt,
                       mast_uld_allot_group uag,
                       mast_uld_allot ua,
                       mast_uld_group ug,
                       uld_rel_dtl t3
                       LEFT JOIN EXP_ULD_HOVER_DTL EXPHOVER ON EXPHOVER.HO_FORM_NO = t3.HO_FORM_NO AND EXPHOVER.ULD_KEY = t3.ULD_KEY
                join uld_inventory t2 on  t2.uld_key  = t3.ULD_KEY
                join uld_iss_hd t6 on t6.eir_no = t3.eir_no
                where   
                not exists (select null from uld_rel_hd a,uld_iss_hd b where b.eir_no = a.eir_no and b.purpose = 'Agt' and b.airside_rel ='N' and a.eir_no = t3.eir_no) and
                <isNotEmpty property="urfNo"> 
                  t3.eir_no=#urfNo# and 
                 </isNotEmpty>
                <isNotEmpty property="urfEstDateFrom">
                <isNotEmpty property="urfEstDateTo">   
                  to_date(to_char(t6.est_time,'DDMONYY HH24MI'),'DDMONYY HH24MI') between to_Date(#urfEstDateFrom#||' '||#urfEstDateFromhh#||#urfEstDateFrommm#,'DDMONYY HH24MI') and to_Date(#urfEstDateTo#||' '||#urfEstDateTohh#||#urfEstDateTomm#,'DDMONYY HH24MI') AND
                  </isNotEmpty>
                 </isNotEmpty>
                 <isEqual property="woutHoverForm" compareValue="Y">
                  t3.ho_form_no is null and
                  </isEqual>
                  <isNotEmpty property="rhoId">         
                   EXPHOVER.ramp_user IS NOT NULL AND (EXPHOVER.ramp_user = #rhoId# OR EXPHOVER.ramp_user = (SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE = #rhoId# AND RHO_YN='Y' AND ROWNUM=1)) and 
                 </isNotEmpty> 
                 <isNotEmpty property="loginAsRho">
                 EXPHOVER.ramp_user IS NOT NULL AND (EXPHOVER.ramp_user = #loginAsRho# OR EXPHOVER.ramp_user = (SELECT CODE FROM CUST_COMPANY WHERE CODE_DESC = #loginAsRho# AND RHO_YN='Y' AND ROWNUM=1)) and
                 </isNotEmpty>
                  <isNotEmpty property="urfPurpose">
                  T6.purpose = #urfPurpose# AND
                  </isNotEmpty>
                  gt.uld_group   = uag.uld_group
                   AND uag.uld_allot    = ua.uld_allot
                   AND ug.uld_group     = uag.uld_group
                   AND gt.uld_type      = SUBSTR(t2.ULD_TYPE, 0, 3) 
                 )   
         </select>
		 <select id="sqlGetdsptoPrintHoForm" parameterClass="java.lang.String"  resultClass="java.lang.String"> 
			 select code from mast_code_dtl where code = #PARAM# and rownum=1
 		</select>
		<select id="sqlGetrampuserPrintHoForm" parameterClass="java.lang.String"  resultClass="java.lang.String"> 
			 SELECT CODE_DESC FROM CUST_COMPANY WHERE CODE=#PARAM# AND ROWNUM=1
 		</select>
		<select id="checkFLTHoDate" parameterClass="cargo.cms.export.bo.RampExportBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_CHKOUT_DTL WHERE ob_handover_date IS NOT NULL AND HO_FORM_NO=#hoFormNo# AND ULD_KEY=#uldNo#
		</select>
		<select id="checkURFHoDate" parameterClass="cargo.cms.export.bo.RampExportBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_REL_DTL WHERE ob_handover_date IS NOT NULL AND HO_FORM_NO=#hoFormNo# AND ULD_KEY=#uldNo#
		</select>
		<select id="checkFLTChkOutDate" parameterClass="cargo.cms.export.bo.RampExportBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_CHKOUT_DTL WHERE chkout_date IS NOT NULL AND HO_FORM_NO=#hoFormNo# AND ULD_KEY=#uldNo#
		</select>
		<select id="checkURFchkOutDate" parameterClass="cargo.cms.export.bo.RampExportBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM ULD_REL_DTL WHERE chkout_date IS NOT NULL AND HO_FORM_NO=#hoFormNo# AND ULD_KEY=#uldNo#
		</select>
		<select id="checkcheckOutExistsForPPKULD" parameterClass="cargo.cms.export.bo.PrePackCargoBO" resultClass="java.lang.Integer">    	
	  select COUNT(1) from exp_chkout_dtl  where ULD_KEY=#uldNo# and FLT_KEY=#fltNo# and FLT_DATE=to_date(#fltDate#,'DDMONYY') and CHKOUT_USER is not null
    </select>
	<select id="fetchtowOrderforPPKULD" parameterClass="cargo.cms.export.bo.PrePackCargoBO" resultClass="java.lang.Integer">    	
		select COUNT(1) from tow_order_out_dtl tow,tow_order_out ou where tow.uld_key = #uldNo# and tow.to_no= ou.to_no 
		and ou.flt_key= #fltNo# and ou.flt_date= to_date(#fltDate#,'DDMONYY') AND ou.STATUS='ISSUED'	
	</select>
	
 <select id="getFlightstdDetails" parameterClass="cargo.cms.export.bo.FlightSearchBO"  resultClass="cargo.cms.export.bo.RampExportBO">		 
	    SELECT 
        to_char(A.SCH_DATE,'ddMONYY') as fltDate,
        SUBSTR(TRIM(TO_CHAR(NVL(A.SCH_TIME,0),'0000')),0,2) ||':'|| SUBSTR(TRIM(TO_CHAR(NVL(A.SCH_TIME,0),'0000')),3,4) as stdPrint,        
		decode(A.EST_TIME,null,null, SUBSTR(TRIM(TO_CHAR(NVL(A.EST_TIME,0),'0000')),0,2) ||':'|| SUBSTR(TRIM(TO_CHAR(NVL(A.EST_TIME,0),'0000')),3,4) ) as etdPrint
	    FROM FLT_OPR A ,flt_opr_leg B
	    WHERE A.FLT_KEY=#fltNo# 		
		AND A.SCH_DATE = TO_DATE(#fltDate#,'DDMONYY')
		AND A.FLT_TYPE = 'D'
		AND A.FLT_KEY=B.FLT_KEY
		AND A.SCH_DATE=B.SCH_DATE
 </select>
 <insert id="createUldEventOnAmendULD" parameterClass="java.util.HashMap">
		Insert into his_uld_evnt (ULD_KEY,COD_TRA_SEQ_NUM,COD_HIS_TYP,COD_FUNC,MODULE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
		values (#ULD_KEY#,#COD_TRA_SEQ_NUM#,'E','AMUAS','W',#USER#,SYSDATE,null,null)
	</insert>

<insert id="createUldEventDtlsOnAmendULD" parameterClass="java.util.HashMap">
		Insert into his_uld_evnt_dtl (ULD_KEY,COD_TRA_SEQ_NUM,COD_SEQ_NUM,COD_ACT,COD_HIS_SEQ_NUM,DES_HIS_DTS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
			values (#ULD_KEY#,#COD_TRA_SEQ_NUM#,SQ_ULD_HIS.NEXTVAL,'U',998,#DESC#,#USER#,SYSDATE,null,null)
</insert>

<select id="getRampMonitoringWOHOForm" parameterClass="map" resultClass="java.util.HashMap">  
		SELECT SUBSTR(CHKOUT.ULD_KEY,1,3) ULD_TYPE,
		  COUNT(1) ULD_COUNT
		FROM EXP_CHKOUT_DTL CHKOUT,
		  EXP_FLT_ULD ULD
		WHERE ULD.FLT_KEY                     =CHKOUT.FLT_KEY
		AND ULD.FLT_DATE                      =CHKOUT.FLT_DATE
		AND ULD.ULD_KEY                       = CHKOUT.ULD_KEY
		AND CHKOUT.HO_FORM_NO                IS NULL
		AND NVL(ULD.HANDLING_MODE, 'N')      != 'DT'
		AND ( NOT (NVL(ULD.TRANSIT_TYPE, 'N') = 'TT'))
		AND ULD.SOURCE NOT                   IN ('DLS-L', 'DLS-E')
		AND CHKOUT.FLT_KEY                    =#flightKey#
		AND CHKOUT.FLT_DATE                   =TO_DATE(#flightDate#,'DDMONYY')
		GROUP BY SUBSTR(CHKOUT.ULD_KEY,1,3)
	</select>	
<select id="getMileStoneStrgDetailsforBUP" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
	select NVL(inv.locn_pcs, 0) as locnPcs, NVL(inv.locn_wt, 0) as locnWt,lsp_no as lspNo,uld_key as uldKey,LOC_CODE AS locn, seq_no as mstoneSeqNo
            from   awb_inventory inv
            JOIN AWB awb ON UPPER(awb.AWB_NO) = UPPER(inv.AWB_NO) 
			AND UPPER (awb.awb_date) = UPPER (inv.awb_date)			   
            where  inv.awb_no = #awbNo#
            and    inv.awb_date = TO_DATE(#awbDate#,'DDMONYY')
            AND 	NOT EXISTS(SELECT NULL FROM ULD_INVENTORY WHERE ULD_KEY = inv.ULD_KEY AND (PPK_IND = 'Y' OR MIX_PPK_IND = 'Y') AND (REBUILD_YN = 'N' AND TOPUP_YN = 'N'))                 
            AND not (flt_type = 'E' and FLT_KEY IS not NULL  )
	</select>
	<select id="getULDAndAWBSplForPPKAndMix" parameterClass="java.lang.String" resultClass="java.util.HashMap" >
		with splCodes as (
			  select STRAGG(STRINGDELIM(rclSpl, '/')) rclSpl, STRAGG(STRINGDELIM(awbSpl, '/')) awbSpl from (
				(select 
				  (DECODE(bk.spl_code1, NULL, '', bk.spl_code1
						  || DECODE(bk.spl_code2, NULL, '', '/'))
						  || DECODE(bk.spl_code2, NULL, '', bk.spl_code2
						  || DECODE(bk.spl_code3, NULL, '', '/'))
						  || DECODE(bk.spl_code3, NULL, '', bk.spl_code3
						  || DECODE(bk.spl_code4, NULL, '', '/'))
						  || DECODE(bk.spl_code4, NULL, '', bk.spl_code4
						  || DECODE(bk.spl_code5, NULL, '', '/'))
						  || DECODE(bk.spl_code5, NULL, '', bk.spl_code5
						  || DECODE(bk.spl_code6, NULL, '', '/'))
						  || DECODE(bk.spl_code6, NULL, '', bk.spl_code6
						  || DECODE(bk.spl_code7, NULL, '', '/'))
						  || DECODE(bk.spl_code7, NULL, '', bk.spl_code7
						  || DECODE(bk.spl_code8, NULL, '', '/'))
						  || DECODE(bk.spl_code8, NULL, '', bk.spl_code8
						  || DECODE(bk.spl_code9, NULL, '', '/'))
						  || DECODE(bk.spl_code9, NULL, '', bk.spl_code9)
					) rclSpl,
				  (DECODE(awb.spl_code1, NULL, '', awb.spl_code1
						  || DECODE(awb.spl_code2, NULL, '', '/'))
						  || DECODE(awb.spl_code2, NULL, '', awb.spl_code2
						  || DECODE(awb.spl_code3, NULL, '', '/'))
						  || DECODE(awb.spl_code3, NULL, '', awb.spl_code3
						  || DECODE(awb.spl_code4, NULL, '', '/'))
						  || DECODE(awb.spl_code4, NULL, '', awb.spl_code4
						  || DECODE(awb.spl_code5, NULL, '', '/'))
						  || DECODE(awb.spl_code5, NULL, '', awb.spl_code5
						  || DECODE(awb.spl_code6, NULL, '', '/'))
						  || DECODE(awb.spl_code6, NULL, '', awb.spl_code6
						  || DECODE(awb.spl_code7, NULL, '', '/'))
						  || DECODE(awb.spl_code7, NULL, '', awb.spl_code7
						  || DECODE(awb.spl_code8, NULL, '', '/'))
						  || DECODE(awb.spl_code8, NULL, '', awb.spl_code8
						  || DECODE(awb.spl_code9, NULL, '', '/'))
						  || DECODE(awb.spl_code9, NULL, '', awb.spl_code9)
						) awbSpl        
				from exp_rcl_hd hd join exp_rcl_dtl dtl on hd.rcl_no=dtl.rcl_no 
				join exp_rcl_brkdn bk on bk.rcl_no=hd.rcl_no
				join awb on awb.awb_no=bk.awb_no and awb.awb_date=bk.awb_date
				where hd.rcl_no=#rclNo# and hd.ppk_type='M')
		union
      		 (select 
				(DECODE(hd.spl_code1, NULL, '', hd.spl_code1
							|| DECODE(hd.spl_code2, NULL, '', '/'))
							|| DECODE(hd.spl_code2, NULL, '', hd.spl_code2
							|| DECODE(hd.spl_code3, NULL, '', '/'))
							|| DECODE(hd.spl_code3, NULL, '', hd.spl_code3
							|| DECODE(hd.spl_code4, NULL, '', '/'))
							|| DECODE(hd.spl_code4, NULL, '', hd.spl_code4
							|| DECODE(hd.spl_code5, NULL, '', '/'))
							|| DECODE(hd.spl_code5, NULL, '', hd.spl_code5
							|| DECODE(hd.spl_code6, NULL, '', '/'))
							|| DECODE(hd.spl_code6, NULL, '', hd.spl_code6
							|| DECODE(hd.spl_code7, NULL, '', '/'))
							|| DECODE(hd.spl_code7, NULL, '', hd.spl_code7
							|| DECODE(hd.spl_code8, NULL, '', '/'))
							|| DECODE(hd.spl_code8, NULL, '', hd.spl_code8
					  || DECODE(hd.spl_code9, NULL, '', '/'))
							|| DECODE(hd.spl_code9, NULL, '', hd.spl_code9)
						) rclSpl,
				(DECODE(awb.spl_code1, NULL, '', awb.spl_code1
							|| DECODE(awb.spl_code2, NULL, '', '/'))
							|| DECODE(awb.spl_code2, NULL, '', awb.spl_code2
							|| DECODE(awb.spl_code3, NULL, '', '/'))
							|| DECODE(awb.spl_code3, NULL, '', awb.spl_code3
							|| DECODE(awb.spl_code4, NULL, '', '/'))
							|| DECODE(awb.spl_code4, NULL, '', awb.spl_code4
							|| DECODE(awb.spl_code5, NULL, '', '/'))
							|| DECODE(awb.spl_code5, NULL, '', awb.spl_code5
							|| DECODE(awb.spl_code6, NULL, '', '/'))
							|| DECODE(awb.spl_code6, NULL, '', awb.spl_code6
							|| DECODE(awb.spl_code7, NULL, '', '/'))
							|| DECODE(awb.spl_code7, NULL, '', awb.spl_code7
							|| DECODE(awb.spl_code8, NULL, '', '/'))
							|| DECODE(awb.spl_code8, NULL, '', awb.spl_code8
					  || DECODE(awb.spl_code9, NULL, '', '/'))
							|| DECODE(awb.spl_code9, NULL, '', awb.spl_code9)
						) awbSpl		
				from exp_rcl_hd hd join exp_rcl_dtl dtl on hd.rcl_no=dtl.rcl_no 
				join exp_rcl_brkdn bk on bk.rcl_no=hd.rcl_no
				join awb on awb.awb_no=bk.awb_no and awb.awb_date=bk.awb_date
				where hd.rcl_no=#rclNo# and hd.ppk_type='M')		
		union
      		 (select 
				(DECODE(hd.spl_code1, NULL, '', hd.spl_code1
							|| DECODE(hd.spl_code2, NULL, '', '/'))
							|| DECODE(hd.spl_code2, NULL, '', hd.spl_code2
							|| DECODE(hd.spl_code3, NULL, '', '/'))
							|| DECODE(hd.spl_code3, NULL, '', hd.spl_code3
							|| DECODE(hd.spl_code4, NULL, '', '/'))
							|| DECODE(hd.spl_code4, NULL, '', hd.spl_code4
							|| DECODE(hd.spl_code5, NULL, '', '/'))
							|| DECODE(hd.spl_code5, NULL, '', hd.spl_code5
							|| DECODE(hd.spl_code6, NULL, '', '/'))
							|| DECODE(hd.spl_code6, NULL, '', hd.spl_code6
							|| DECODE(hd.spl_code7, NULL, '', '/'))
							|| DECODE(hd.spl_code7, NULL, '', hd.spl_code7
							|| DECODE(hd.spl_code8, NULL, '', '/'))
							|| DECODE(hd.spl_code8, NULL, '', hd.spl_code8
					  || DECODE(hd.spl_code9, NULL, '', '/'))
							|| DECODE(hd.spl_code9, NULL, '', hd.spl_code9)
						) rclSpl,
				(DECODE(awb.spl_code1, NULL, '', awb.spl_code1
							|| DECODE(awb.spl_code2, NULL, '', '/'))
							|| DECODE(awb.spl_code2, NULL, '', awb.spl_code2
							|| DECODE(awb.spl_code3, NULL, '', '/'))
							|| DECODE(awb.spl_code3, NULL, '', awb.spl_code3
							|| DECODE(awb.spl_code4, NULL, '', '/'))
							|| DECODE(awb.spl_code4, NULL, '', awb.spl_code4
							|| DECODE(awb.spl_code5, NULL, '', '/'))
							|| DECODE(awb.spl_code5, NULL, '', awb.spl_code5
							|| DECODE(awb.spl_code6, NULL, '', '/'))
							|| DECODE(awb.spl_code6, NULL, '', awb.spl_code6
							|| DECODE(awb.spl_code7, NULL, '', '/'))
							|| DECODE(awb.spl_code7, NULL, '', awb.spl_code7
							|| DECODE(awb.spl_code8, NULL, '', '/'))
							|| DECODE(awb.spl_code8, NULL, '', awb.spl_code8
					  || DECODE(awb.spl_code9, NULL, '', '/'))
							|| DECODE(awb.spl_code9, NULL, '', awb.spl_code9)
						) awbSpl		
				from exp_rcl_hd hd join awb on awb.awb_no=hd.awb_no
				where hd.rcl_no=#rclNo# and hd.ppk_type='P'))
			)  
		select nvl(instr(rclSpl, 'LIH'),0) as rclSpl, nvl(decode(instr(awbSpl, 'ELI'),0,instr(awbSpl, 'ELM'),instr(awbSpl, 'ELI')),0) awbSpl from splCodes	
	</select>
	<select id="checkTarmacBuildup" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
	SELECT count(1) FROM EXP_PMAN_TARMAC_ULD WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND ULD_BT_NO=#uldKey#
	</select>
	
	
	<select id="upstreamPmanRAPpupracsfDtl" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
    SELECT DISTINCT racsfCode FROM (
  select t1.racsf_code as racsfCode from exp_rcl_hd t1 
		        where t1.ppk_type in ('B', 'P') and (t1.status != 'V' and t1.status != 'R')
		       AND t1.awb_no=#awbNo# and t1.awb_date = #awbDate# AND t1.racsf_code IS NOT NULL
		        union
	select t1.racsf_code from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
		        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R')
            and t2.awb_no=#awbNo# and t2.awb_date=#awbDate# AND t1.racsf_code IS NOT NULL)
	</select>
	
	<select id="upstreamPmanShipmentDtl" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
	<![CDATA[
    SELECT SUBSTR( AWB_NO,1,3 ) AS awbNoPFX,
  	SUBSTR( AWB_NO,4 )        AS awbNoSFX,
  	AGENT_CODE                AS agentCode,
  	DEST                      AS awbDest,
  	awb_type as awbType,
  	CARR_CODE                 AS carrCode,
  	(CASE WHEN NVL(HAWB_IND,'N') = 'Y' THEN 'Y' ELSE 
    (CASE WHEN (SELECT COUNT(1) FROM MAST_SEC_CHECK SECCK WHERE SECCK.CARR_CODE=AWB.CARR_CODE
		AND NVL(SECCK.ACTIVE,'N')='Y'
		AND NVL(SECCK.HAWB_IND,'N')='Y'
    AND SECCK.PORT = AWB.DEST
		) > 0 THEN 'N' ELSE 
    (CASE WHEN (SELECT COUNT(1) FROM MAST_SEC_CHECK SECCK WHERE SECCK.CARR_CODE=AWB.CARR_CODE
		AND NVL(SECCK.ACTIVE,'N')='Y'
		AND NVL(SECCK.HAWB_IND,'N')='Y'
    AND NOT EXISTS (SELECT NULL FROM MAST_SEC_CHECK SECCK WHERE SECCK.CARR_CODE=AWB.CARR_CODE
		AND NVL(SECCK.ACTIVE,'N')='Y'
		AND SECCK.PORT = AWB.DEST)
    AND (SECCK.CTRY_CODE IN (SELECT CTRY_CODE
    	FROM MAST_ARPT A,
      	MAST_CITY B
    	WHERE A.CITY_CODE=B.CODE
    	AND A.CODE       = AWB.DEST))) > 0 THEN 'N' ELSE 'N/A' END) END)
    END) as hawbInd
	FROM AWB AWB
	]]>
	WHERE AWB_NO =#awbNo#
	AND AWB_DATE = #awbDate#
	</select>
	
	
	
<select id="fetchAwbNewSpecialCodes" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
	SELECT SPL_CODE1 as splCode1,SPL_CODE2 as splCode2,SPL_CODE3 as splCode3,SPL_CODE4 as splCode4,SPL_CODE5 as splCode5,SPL_CODE6 as splCode6,SPL_CODE7 as splCode7,SPL_CODE8 as splCode8,SPL_CODE9 as splCode9 FROM AWB WHERE AWB_NO=#awbNo# and AWB_DATE=#awbDate#
	</select>
	<select id="fetchAwbOldSpecialCodes" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
	SELECT SPL_CODE1 as oldsplCode1,SPL_CODE2 as oldsplCode2,SPL_CODE3 as oldsplCode3,SPL_CODE4 as oldsplCode4,SPL_CODE5 as oldsplCode5,SPL_CODE6 as oldsplCode6,SPL_CODE7 as oldsplCode7,SPL_CODE8 as oldsplCode8,SPL_CODE9 as oldsplCode9 FROM AWB WHERE AWB_NO=#awbNo# and AWB_DATE=#awbDate#
	</select>
	<update id="updateAutoFltCloseDtl" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	UPDATE FLT_OPR_EVENTS SET FLT_CLS_DATE = #fltClsDate#, FLT_CLS_TIME = #fltClsTime#, FLT_CLS_USER_ID = 'SYSTEM',LM_USER_ID= 'SYSTEM',LM_DATE = SYSDATE,TR_TYPE='ACCLF' WHERE FLT_KEY=#fltKey# AND SCH_DATE =#fltDate# AND FLT_TYPE=#fltType#
	</update>
	<select id="getimpFltListforFltClose" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT FLT_KEY AS fltKey, TO_CHAR(FLT_DATE,'DDMONYY') fltDate,'A' AS fltType FROM IMP_CAR_SHP WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</select>
	<select id="fetchfltCloseCount" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT to_char(flt_cls_date,'DD-MON-YY') AS fltClsDate,lpad(FLT_CLS_TIME, 4, 0) AS fltClsTime,FLT_CLS_USER_ID as fltClsUser FROM FLT_OPR_EVENTS WHERE flt_cls_yn = 'Y' AND flt_cls_date IS NOT NULL AND FLT_KEY=#fltKey# AND TO_CHAR(SCH_DATE,'DDMONYY')=#fltDate# AND FLT_TYPE=#fltType#
	</select>
	<insert id="createFltEventOnautoclose" parameterClass="java.util.HashMap">
		Insert into HIS_FLT_EVNT (FLT_KEY,FLT_DATE,FLT_TYPE,COD_TRA_SEQ_NUM,COD_HIS_TYP,COD_FUNC,MODULE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TR_NO) 
		values (#FLT_KEY#,#FLT_DATE#,#FLT_TYPE#,#COD_TRA_SEQ_NUM#,'E','ACCLF','W',#USER#,SYSDATE,#USER#,SYSDATE, (SELECT TR_NO FROM FLT_OPR_EVENTS WHERE FLT_KEY = #FLT_KEY# and FLT_TYPE = #FLT_TYPE# and SCH_DATE = #FLT_DATE#))
	</insert>	
	
	<insert id="createFltEventDtlsOnautoclose" parameterClass="java.util.HashMap">
		Insert into HIS_FLT_EVNT_DTL (FLT_KEY,FLT_DATE,FLT_TYPE,COD_TRA_SEQ_NUM,COD_SEQ_NUM,COD_ACT,COD_HIS_SEQ_NUM,DES_HIS_DTS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TR_NO)
		values (#FLT_KEY#,#FLT_DATE#,#FLT_TYPE#,#COD_TRA_SEQ_NUM#,SQ_FLT_OPR_EVENTS_HIS.NEXTVAL,'U',1024,#EVENT_DESC#,#USER#,SYSDATE,#USER#,SYSDATE,(SELECT TR_NO FROM FLT_OPR_EVENTS WHERE FLT_KEY = #FLT_KEY# and FLT_TYPE = #FLT_TYPE# and SCH_DATE = #FLT_DATE#))
	</insert>
	<select id="getOffloadfltDtls" parameterClass="cargo.cms.export.bo.ChangePackingBO"  resultClass="cargo.cms.export.bo.ChangePackingBO">
	SELECT FLT_KEY as fltKey,TO_CHAR(FLT_DATE,'DDMONYY') as fltDate FROM exp_offload_uld EU where EU.uld_bt_no = #uldNo# and (
     (EU.uld_bt_no in (select uld.uld_key from uld_inventory uld where EU.cr_date >= uld.entry_time and uld.uld_key=EU.uld_bt_no)))    
    and EU.cr_date = (select max(cr_date) from exp_offload_uld where uld_bt_no=#uldNo#) and rownum=1
	</select>



<insert id="insertACASAwbInfo" parameterClass="cargo.cms.export.bo.ACASInfoBO" >
		INSERT INTO ACAS_INFO_HD
		(TR_NO,AWB_NO,AWB_DATE,ACAS_IND,ACAS_CODE,
		CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TR_TYPE,RCS_TYPE)
		VALUES (#trNo#,#awbNo#,#awbDate#,#ACASInd#,#ACASCode#,
		#createdUserId#,SYSDATE,#lastModifiedBy#,SYSDATE,NVL(#trtype#,'ACAS'),#rcsType#)			
	</insert>
	<insert id="insertACASAwbHAWBInfo" parameterClass="cargo.cms.export.bo.ACASInfoBO" >
		INSERT INTO ACAS_INFO_HD
		(TR_NO,AWB_NO,AWB_DATE,ACAS_IND,ACAS_CODE,
		CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,TR_TYPE,RCS_TYPE)
		VALUES (#trNo#,#awbNo#,#awbDate#,#ACASInd#,#ACASCode#,
		#createdUserId#,SYSDATE,#lastModifiedBy#,SYSDATE,'',#rcsType#)			
	</insert>
	
	<insert id="insertACASHawbInfo" parameterClass="cargo.cms.export.bo.ACASInfoBO" >
		INSERT INTO ACAS_INFO_DTL
		(TR_NO,HAWB_NO,ACAS_IND,ACAS_CODE,
		CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,RCS_TYPE)
		VALUES (#trNo#,#hawbNo#,#ACASInd#,#ACASCode#,
		#createdUserId#,SYSDATE,#lastModifiedBy#,SYSDATE,#rcsType#)			
	</insert>
	
	<select id="sqlACASAwbNoExist" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM acas_info_hd where awb_no=#awbNo# 
      		and TRUNC(awb_date) = to_date(#awbDate#,'DDMONYY')
      		and RCS_TYPE = #rcsType#
	</select>
	<select id="validRcsCode" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
		SELECT COUNT(1) FROM MAST_REG_CLRN_CODE WHERE CODE_TYPE=#rcsType# AND CODE=#rcsCode#
	</select>
	
	<select id="sqlACASHawbNoExist" parameterClass="cargo.cms.export.bo.ACASInfoBO" resultClass="java.lang.String" >
		SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM acas_info_dtl where hawb_no=#hawbNo# 
      		and TR_NO = #trNo#
	</select>

	<select id="sqlACASHawbNoCount" parameterClass="cargo.cms.export.bo.ACASInfoBO" resultClass="java.lang.String" >
		SELECT DECODE(COUNT(1), 0, 'N', 'Y')
			FROM acas_info_dtl where TR_NO = #trNo#
	</select>

	<select id="sqlFetchAwbAcasSeqNo" parameterClass="java.lang.String" resultClass="java.lang.String">
    	SELECT ACAS_INFO_SEQ.NEXTVAL FROM DUAL
    </select>
    <select id="getACASMsgType" parameterClass="java.lang.String" resultClass="java.lang.String">
    SELECT CODE_TYPE FROM MAST_REG_CLRN_CODE WHERE CODE=#PARAM#
    </select>

	<select id="sqlGetAwbTrno" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		SELECT MAX(tr_no) FROM acas_info_hd where awb_no=#awbNo# and TRUNC(awb_date) = to_date(#awbDate#,'DDMONYY')	and RCS_TYPE = #rcsType#
	</select>
	
	<update id="updateACASAwbInfo" parameterClass="cargo.cms.export.bo.ACASInfoBO">
		UPDATE ACAS_INFO_HD set 
			<isNotEmpty property="ACASInd">                       
	        		ACAS_IND =  #ACASInd#,
	    			ACAS_CODE = #ACASCode#,
	        </isNotEmpty>
	        <isEmpty property="ACASInd">
	        	ACAS_IND =  '',
	        	ACAS_CODE = '',
	        </isEmpty>   
    		LM_USER_ID = #lastModifiedBy#,
    		LM_DATE = SYSDATE,TR_TYPE=NVL(#trtype#,'ACAS') WHERE TR_NO = #trNo#
	</update>
	
	<update id="updateACASHawbInfo" parameterClass="cargo.cms.export.bo.ACASInfoBO">
		UPDATE ACAS_INFO_DTL set
		 <isNotEmpty property="ACASInd">
        		ACAS_IND =  #ACASInd#,
    			ACAS_CODE = #ACASCode#,
    			RCS_TYPE=#rcsType#,
        </isNotEmpty>
        <isEmpty property="ACASInd">
	        	ACAS_IND =  '',
	        	ACAS_CODE = '',
	    </isEmpty>
    		LM_USER_ID = #lastModifiedBy#,
    		LM_DATE = SYSDATE WHERE TR_NO = #trNo# AND HAWB_NO = #hawbNo#
	</update>
	
	<delete id="deleteFHLACASHawbInfo" parameterClass="cargo.cms.export.bo.ACASInfoBO">        	 
		delete from acas_info_dtl where TR_NO = #trNo# AND HAWB_NO = #hawbNo#
    </delete>
	
<select id="getACASAwbInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" >
		SELECT acas_ind ACAS_IND,acas_code ACAS_CODE
			FROM acas_info_hd where awb_no=#AWBNO# 
      		and TRUNC(awb_date) = to_date(#AWBDATE#,'DDMONYY')
      		and rcs_type = #rcsType# and rownum=1
	</select>
	
	<select id="getACASHawbInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" >
		SELECT dtl.acas_ind ACAS_IND,dtl.acas_code ACAS_CODE
			FROM acas_info_hd hd join acas_info_dtl dtl on hd.tr_no=dtl.tr_no
			where hd.awb_no=#AWBNO# and TRUNC(hd.awb_date) = to_date(#AWBDATE#,'DDMONYY') AND dtl.hawb_no=#HAWBNO# and rownum=1
	</select>
	
	<insert id="createHisAwbEvntForACASInfo" parameterClass="java.util.HashMap">
		INSERT INTO HIS_AWB_EVNT 
			(AWB_NO, AWB_DATE, COD_TRA_SEQ_NUM, COD_HIS_TYP, COD_FUNC, MODULE, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE)
		VALUES 
			(#awbNo#, TO_DATE(#awbDate#, 'DDMONYY'), #traSeqNo#, 'E', 'ACASINF', 'W', #userId#, SYSDATE, #userId#, SYSDATE)
	</insert>
	
	<insert id="createHisAwbEvntDtlForACASInfo" parameterClass="java.util.HashMap">
		INSERT INTO HIS_AWB_EVNT_DTL 
			(AWB_NO, AWB_DATE, COD_TRA_SEQ_NUM, COD_SEQ_NUM, COD_ACT, COD_HIS_SEQ_NUM, DES_HIS_DTS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE)
		VALUES 
			(#awbNo#, TO_DATE(#awbDate#, 'DDMONYY'), #traSeqNo#, SQ_IMP_CAR_SHP_HIS.NEXTVAL, 'U', '1030', #desHisDtls#, #userId#, SYSDATE, #userId#, SYSDATE)
	</insert>
	
<select id="sqlCheckPmanUSport" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
			SELECT COUNT(1) AS cnt FROM MAST_ARPT A,MAST_CITY B WHERE A.CITY_CODE=B.CODE AND B.CTRY_CODE='US' AND A.CODE=#unldgPt#
	</select>
	
	<select id="sqlCheckACASInd" parameterClass="java.lang.String"  resultClass="java.lang.String">
			select NVL(acas_check_pman,'N') ACASCheck from mast_carrier where code=#carrier#
	</select>
	<select id="sqlRCSTypefromMastCountry" parameterClass="java.lang.String"  resultClass="java.lang.String">
	SELECT RES_TYPE FROM MAST_COUNTRY WHERE CODE = (SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#PARAM#)
	</select>
	
	<select id="getFltCarrierCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		select carr_code from flt_opr where flt_key=#FLTKEY# and TO_CHAR(SCH_DATE,'DDMONYY')=UPPER(#FLTDATE#) AND FLT_TYPE='D'
	</select>
	
	<select id="sqlgetACASAccess" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		 SELECT NVL(ENABLE_YN,'N') ENABLE_YN
  			FROM SEC_ROLE_SUB_FUNCTION
  			WHERE ROLE_CODE = #ROLE# and FUNCTION_CODE=#FUNCTION# and sub_function_code=#SUBFUNCTION#
	</select>
	
	<delete id="deleteACASHawbInfo" parameterClass="java.lang.String">        	 
		delete from acas_info_dtl where tr_no = #trNo#        
    </delete>
    
    <delete id="deleteACASAwbInfo" parameterClass="java.lang.String">        	 
		delete from acas_info_HD where tr_no = #trNo#        
    </delete>

<select id="getAWBInfo" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT orig AS origin, dest AS destination FROM AWB WHERE AWB_NO = #AWB_NO# and AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
	</select>
	
	<select id="getTransferDetails" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.PreManifestAWBBO">
		SELECT CARR_CODE AS carr, dum_flt_key as dumFlightKey,to_char(dum_flt_date,'DDMONYY') as dumFlightDate FROM trf_accept_hd where trf_no = #TRF_NO#
	</select>
	
	<update id="updateTrfHD" parameterClass="java.util.HashMap">
		UPDATE trf_accept_hd set rcl_pcs = (rcl_pcs - #AWB_PC#) , rcl_wt = (rcl_wt - #AWB_WT#) , lm_user_id = #USER# , lm_date = SYSDATE where trf_no = #TRF_NO#
	</update>
	
	<update id="updateTrfDtls" parameterClass="java.util.HashMap">
		UPDATE trf_accept_dtl set pcs = (pcs - #AWB_PC#) , net_wt = (net_wt - #AWB_WT#) , lm_user_id = #USER# , lm_date = SYSDATE where trf_no = #TRF_NO# AND ULD_KEY IS NULL
	</update>
	
	<update id="updateTrfDtlsULD" parameterClass="java.util.HashMap">
		UPDATE trf_accept_dtl set pcs = (pcs - #AWB_PC#) , net_wt = (net_wt - #AWB_WT#) , lm_user_id = #USER# , lm_date = SYSDATE where trf_no = #TRF_NO# AND ULD_KEY = #ULD_KEY#
	</update>
	
	<update id="updateBreakDownDtls" parameterClass="java.util.HashMap">
		UPDATE trf_accept_brkdn set pcs = (pcs - #AWB_PC#) , weight = (weight - #AWB_WT#) , lm_user_id = #USER# , lm_date = SYSDATE where trf_no = #TRF_NO# AND AWB_NO = #AWB_NO# and AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
	</update>	
	    
	 <update id="updateCDTINBOUNDFlight" parameterClass="java.util.HashMap">
		UPDATE cdt_inb_flt_dtls set flt_key = #CDT_FLT_KEY#, flt_date = #CDT_FLT_DATE# , lm_user_id = #USER# , lm_date = SYSDATE where rcl_no = #TRF_NO# AND AWB_NO = #AWB_NO# and AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')
	</update>	
	
    <delete id="deleteTrfHD" parameterClass="java.util.HashMap">        	 
		DELETE trf_accept_hd where trf_no = #TRF_NO# AND rcl_pcs = 0 AND rcl_wt = 0       
    </delete>
    
     <delete id="deleteTransferDetails" parameterClass="java.util.HashMap">        	 
		DELETE trf_accept_dtl where trf_no = #TRF_NO# AND pcs = 0 AND net_wt = 0       
    </delete>
        
    <delete id="deleteTransfeBreakDownDtls" parameterClass="java.util.HashMap">        	 
		DELETE trf_accept_brkdn where trf_no = #TRF_NO# AND pcs = 0 AND weight = 0        
    </delete>
    
	<delete id="deleteTrfCNBFlight" parameterClass="java.util.HashMap">        	 
		DELETE cdt_inb_flt_dtls where rcl_no = #TRF_NO# AND AWB_NO = #AWB_NO# AND AWB_DATE = to_date(#AWB_DATE#,'DDMONYY')      
    </delete>

 <select id="getACASAwbCatalog" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) AS cnt FROM AWB where awb_no=#awbNo# and TRUNC(awb_date) = to_date(#awbDate#,'DDMONYY') AND catalog in ('TM','EO')
	</select>

<select id="getBookFlightDetails" parameterClass="java.util.HashMap" resultClass="cargo.cms.external.bo.mRCLBulkHeader" >
		select flt_key bookFlight, TO_CHAR(flt_date,'DDMONYY') bookFlightDate
			FROM edi_fbl_shp shp,edi_fbl fbl
     		WHERE shp.tr_no= fbl.tr_no and  fbl.FBL_STATUS = 'P' AND
      		shp.AWB_NO = #awbNo# and shp.awb_date = to_date(#awbDate#,'DDMONYY')	 		
	</select>
	<select id="getBookInd" parameterClass="java.lang.String" resultClass="java.lang.String" >
		select NVL(req_booking_in_pre_dec,'N') bookInd from mast_carrier where code=#carr# 		
	</select>
	<select id="getBookFltDtlForUpdate" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO" >
		select flt_key bookFlight, TO_CHAR(flt_date,'DDMONYY') bookFlightDate
			FROM edi_fbl_shp shp,edi_fbl fbl
     		WHERE shp.tr_no= fbl.tr_no and  fbl.FBL_STATUS = 'P' AND
      		shp.AWB_NO = #awbNo# and shp.awb_date = to_date(#awbDate#,'DDMONYY')	 		
	</select>
	
  <update id="booking_PreRCLHeaderMix" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
		UPDATE exp_pre_rcl_hd
   		SET BKD_IND = #booked#, 
		   PR_AWB_NO = #primaryAWB#, 
		   BK_FLT_KEY = #bookFlight#, 
		   BK_FLT_DATE = TO_DATE(#bookFlightDate#,'DDMONYY')
 		WHERE pre_rcl_no =#preRclNo#
 	</update>

<select id="check_offload_data_exist_EXP_CHKOUT_HD"  parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO"  resultClass="java.lang.Integer">
		select count(1) from EXP_CHKOUT_HD where flt_key = #fltKey# and flt_date = #fltDate# 
	</select>
	
	<insert id="offload_insert_EXP_CHKOUT_HD" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" >
		Insert into EXP_CHKOUT_HD (FLT_KEY,FLT_DATE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,FLT_TYPE)
		values (#fltKey#,#fltDate#,#user#,sysdate,#user#,sysdate,'E')
	</insert>
	<select id="check_offload_data_exist_EXP_CHKOUT_DTL"  parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO"  resultClass="java.lang.Integer">
		select count(1) from EXP_CHKOUT_DTL where flt_key = #fltKey# and flt_date = #fltDate# and uld_key = #uldBtNo#
	</select>
	<insert id="offload_insert_EXP_CHKOUT_DTL" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" >
		Insert into EXP_CHKOUT_DTL (FLT_KEY,FLT_DATE,ULD_KEY,chkout_date,chkout_user,chk_flg,chkout_time,LOC_CODE,chkout_locn,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) 
		values (#fltKey#,#fltDate#,#uldBtNo#,to_char(sysdate,'DDMONYY'),#user#,'Y',to_char(sysdate, 'HH24MI'),(select loc_code from uld_inventory where uld_key=#uldBtNo#),(select loc_code from uld_inventory where uld_key=#uldBtNo#),#user#,sysdate,#user#,sysdate)
	</insert>
		<select id="getDeleteOffloadTrfType" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		SELECT trf_type as transferType,gross_wt as grossWt,tare_wt as tareWt FROM EXP_OFFLOAD_ULD where flt_key=#fltKey# and flt_date=#fltDate# and uld_bt_no=#uldBtNo# and rownum=1
	</select>
		<update id="updateweightsinexpfltuld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
		update exp_flt_uld set gross_weight=#grossWt#,net_wt=nvl(#grossWt#,'0')-nvl(tare_wt,'0') where flt_key=#fltKey# and flt_date=#fltDate# and uld_key=#uldBtNo#
	</update>
	<select id="rclDetailsAll" parameterClass="cargo.cms.export.bo.CargoStorageBO" 
	resultClass="cargo.cms.export.bo.CargoStorageBO" >
	select r.rcl_no rclNo,
		   h.rtn_no rtnNo,
		   r.RCL_RTN_PC retPcs,
		   to_char(r.RCL_RTN_WT,'99999999999.99')  retWt,
		   h1.PPK_TYPE pkgType,
		   to_char(h1.RCL_DATE,'DDMONYY HH24:MI') rclDate,
		   h1.RCL_PCS rclPc,
		   h1.RCL_WT rclWt,
		   pkg_exp_billing.get_return_storage_amt(h.rtn_no,r.rcl_no) storageAmt,
		   r.strg_amt savedStrgAmt,
		   (SELECT cc_code FROM (SELECT W.cc_code FROM v_cst_cc_code_ALL W join mast_constraint_code c on W.cc_code = c.code WHERE W.Awb_No = h.awb_no And W.Awb_date = h.awb_date 
      		ORDER BY priority DESC) WHERE rownum = 1) latestCC
from exp_rtn_hd h left join exp_rtn_rcl r on h.rtn_no = r.rtn_no
left join exp_rcl_hd h1 on r.rcl_no = h1.rcl_no
where h.rtn_no = #rtnNo#
</select>
<select id="checkAWBPrefixOwnedValidation" parameterClass="cargo.cms.export.bo.IssueRCLBO" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_CARRIER WHERE CODE= NVL((SELECT CARR_CODE FROM MAST_AWB_PREFIX WHERE CODE=#awbPrefix#),'') AND OWNED_CARR='Y'
	</select>
	<select id="sqlFetcheRclListMobile" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
	SELECT * FROM (SELECT * FROM (
		SELECT 
   			A.PRE_RCL_NO AS preRCLNum, A.TTL_PCS AS rclPcs, A.TTL_WT AS rclWt, CASE WHEN B.PRE_RCL_NO IS NULL OR 
   			B.STATUS='V' THEN 'N' ELSE 'Y' END AS preRCLYN, A.AWB_NO as awbNum, B.STATUS as status ,a.cr_date as preRCLdate
   		FROM 
   			EXP_PRE_RCL_HD A LEFT JOIN EXP_RCL_HD B ON B.PRE_RCL_NO=A.PRE_RCL_NO AND B.PPK_TYPE=A.PPK_TYPE 
   		WHERE 
   			(B.PRE_RCL_NO IS NULL OR (B.PRE_RCL_NO IS NOT NULL AND B.STATUS IN ('V', 'I'))) 
   			AND A.STATUS='SUBMITTED'
   			<isNotEmpty property="uldKey">
   				AND A.ULD_KEY=#uldKey#
   			</isNotEmpty>
   			 <isNotEmpty property="preRCLNo">
   				AND A.PRE_RCL_NO=#preRCLNo#
   			</isNotEmpty>
   			<isNotEmpty property="sealNumber">
   			AND (A.SEAL_NUM1=#sealNumber# OR A.SEAL_NUM2=#sealNumber# OR A.SEAL_NUM3=#sealNumber# OR A.SEAL_NUM4= #sealNumber# OR A.SEAL_NUM5=#sealNumber# OR A.SEAL_NUM6=#sealNumber# OR A.SEAL_NUM7=#sealNumber# OR A.SEAL_NUM8=#sealNumber# OR A.SEAL_NUM9=#sealNumber#)
   			</isNotEmpty> 
		UNION
		SELECT 
   			C.PRE_RCL_NO AS preRCLNum, C.TTL_PCS AS rclPcs, C.TTL_WT AS rclWt, CASE WHEN C.PRE_RCL_NO IS NULL OR 
   			C.STATUS='V' THEN 'N' ELSE 'Y' END AS preRCLYN, C.AWB_NO as awbNum, C.STATUS as status ,c.cr_date as preRCLdate
   		FROM 
   			EXP_PRE_RCL_DTL A, EXP_PRE_RCL_HD C LEFT JOIN EXP_RCL_HD B ON B.PRE_RCL_NO=C.PRE_RCL_NO AND B.PPK_TYPE=C.PPK_TYPE 
   		WHERE 
     		C.PRE_RCL_NO=A.PRE_RCL_NO AND (B.PRE_RCL_NO IS NULL OR (B.PRE_RCL_NO IS NOT NULL AND B.STATUS IN ('V', 'I'))) 
     		AND C.STATUS='SUBMITTED'
     		<isNotEmpty property="uldKey">
   				AND A.ULD_KEY=#uldKey# 
   			</isNotEmpty>
   			<isNotEmpty property="preRCLNo">
          		AND C.PRE_RCL_NO=#preRCLNo#
          	</isNotEmpty>
          	<isNotEmpty property="sealNumber">
   			 AND (C.SEAL_NUM1=#sealNumber# OR C.SEAL_NUM2=#sealNumber# OR C.SEAL_NUM3=#sealNumber# OR C.SEAL_NUM4= #sealNumber# OR C.SEAL_NUM5=#sealNumber# OR C.SEAL_NUM6=#sealNumber# OR C.SEAL_NUM7=#sealNumber# OR C.SEAL_NUM8=#sealNumber# OR C.SEAL_NUM9=#sealNumber#)
   			</isNotEmpty> 
          	) ORDER BY preRCLdate DESC) WHERE ROWNUM=1
	</select>
	
	
<select id="carditAwbCount" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="java.lang.Integer">
			 SELECT count(*)
			FROM EDI_CARDIT_HD
			WHERE AWB_NO=#awbNo#
			AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	<select id="getPremanifestCount" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="java.lang.Integer">
	SELECT count(*) from EXP_PMANIFEST_AWB WHERE
	AWB_NO=#awbNo#
	AND AWB_DATE = to_date(#awbDate#,'DDMONYY') and PMAN_PCS > 0 
	</select>
<select id="carditAwbPcWt" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
			SELECT  TOT_NO_RECEPTACLE AS pcs,
		  	TOT_WT_RECEPTACLE AS wt		 
			FROM EDI_CARDIT_HD
			WHERE AWB_NO=#awbNo#
			AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	<select id="getAwbExsitinmultiFlt" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="java.lang.Integer">
		<![CDATA[
			SELECT count(*) FROM EDI_FBL t1, 
			EDI_FBL_SHP t2 WHERE t1.TR_NO=t2.TR_NO
	      	AND AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') and (t1.flt_key <> #flightKey# OR t1.flt_date <> to_date(#flightDate#,'ddmonyy'))
      	]]>
	</select>
	
	<select id="fetchOffloadHawbList" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" 
	   resultClass="cargo.cms.export.bo.HawbOffLoadItemBO">
		SELECT EPUAH.TR_NO trNo,EPUAH.HAWB_NO hawbNo,EPUAH.PC buPcs,EPUAH.WT buWt FROM
      EXP_PMANIFEST_ULD_AWB_HAWB EPUAH JOIN EXP_PMANIFEST_ULD_AWB EPUA ON EPUAH.TR_NO=EPUA.TR_NO
        WHERE EPUAH.TR_NO=#trNo#
        <isNotEmpty property="tagNo">
		  AND EPUAH.HAWB_NO=#tagNo#                                    
		</isNotEmpty>
	</select>
	
	<delete id="deleteOffloadPmanHawb" parameterClass="cargo.cms.export.bo.HawbOffLoadItemBO">        	 
		DELETE FROM EXP_PMANIFEST_ULD_AWB_HAWB WHERE TR_NO=#trNo# AND HAWB_NO=#hawbNo#
    </delete>
    
    <update id="updateOffloadPmanHawb" parameterClass="cargo.cms.export.bo.HawbOffLoadItemBO">
		 UPDATE EXP_PMANIFEST_ULD_AWB_HAWB SET PC=#buPcs#-#offPcs#,WT=#buWt#-#offWt#,
		 LM_USER_ID=#userID#,LM_DATE=sysdate WHERE TR_NO=#trNo# AND HAWB_NO=#hawbNo#
	</update>
	
	<select id="isOffloadHawbExist" parameterClass="cargo.cms.export.bo.HawbOffLoadItemBO" 
	   resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_OFFLOAD_ULD_AWB_HAWB WHERE TR_NO=#trNo# AND HAWB_NO=#hawbNo# 
	</select>
	
	<insert id="insertOffloadHawb" parameterClass="cargo.cms.export.bo.HawbOffLoadItemBO" >
		 INSERT INTO EXP_OFFLOAD_ULD_AWB_HAWB (TR_NO,HAWB_NO,PC,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
         VALUES (#trNo#,#hawbNo#,#offPcs#,#offWt#,#userID#,SYSDATE,#userID#,sysdate)
	</insert>
	
	 <update id="updateOffloadHawb" parameterClass="cargo.cms.export.bo.HawbOffLoadItemBO">
		 UPDATE EXP_OFFLOAD_ULD_AWB_HAWB SET PC=PC+#offPcs#,WT=WT+#offWt#,
		 LM_USER_ID=#userID#,LM_DATE=SYSDATE WHERE TR_NO=#trNo# AND HAWB_NO=#hawbNo#
	</update>
	
	<delete id="deleteTarmacOffloadPmanHawb" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO">        	 
		DELETE FROM EXP_PMAN_TAR_ULD_AWB_HAWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=to_date(#fltDate#,'DDMONYY') AND
		AWB_NO=#awbNo# AND AWB_DATE=to_date(#awbDate#,'DDMONYY')
		
		<isNotEmpty property="hawbNo">
				AND	HAWB_NO = #hawbNo#
		</isNotEmpty>
		
    </delete>
    
    <update id="updateTarmacOffloadPmanHawb" parameterClass="cargo.cms.export.bo.HawbOffLoadItemBO">
		 UPDATE EXP_PMAN_TAR_ULD_AWB_HAWB SET PC=PC-#offPcs#,WT=WT-#offWt#,
		 LM_USER_ID=#userID#,LM_DATE=sysdate WHERE TR_NO=#trNo# AND HAWB_NO=#hawbNo#
	</update>
	
	<select id="isTarmacOffloadHawbExist" parameterClass="cargo.cms.export.bo.HawbOffLoadItemBO" 
	   resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PMAN_TAR_ULD_AWB_HAWB WHERE TR_NO=#trNo# AND HAWB_NO=#hawbNo#
	</select>
	
	<select id="getOffloadAwbSeqNo" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" 
	   resultClass="cargo.cms.export.bo.HawbOffLoadItemBO">
		SELECT TR_NO AS trNo FROM EXP_OFFLOAD_ULD_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=to_date(#fltDate#,'DDMONYY')
        AND AWB_NO=#awbNo# AND AWB_DATE=to_date(#awbDate#,'DDMONYY') AND ULD_BT_NO=#uldBtNo#
	</select>
	
	
	<select id="getOffloadUldNo" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" 
	   resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
		SELECT handling_mode AS uldBtNo FROM ULD_INVENTORY WHERE ULD_KEY=#uldBtNo# AND FLT_KEY=#fltKey# AND 
		FLT_DATE=to_date(#fltDate#,'DDMONYY')
	</select>
	
	
	<select id="getAutoPmanisEnabled" parameterClass="java.lang.String" resultClass="java.lang.String">
		select RULE_VALUE from cmsrules where rule_code= 'AUTO_PMAN_LOGIC'
	</select>
	

<select id="etdinnextxhours" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
		<![CDATA[
			SELECT COUNT(*)
	FROM flt_opr
	WHERE flt_key = #fltKey#
	AND SCH_DATE  = to_date(#fltDate#,'DDMONYY')
	AND FLT_TYPE  = 'D'
	AND to_date (TO_CHAR(DECODE(EST_DATE,NULL,SCH_DATE,EST_DATE),'DDMONYY')
  || lpad(DECODE(EST_DATE,NULL,SCH_TIME,EST_TIME),4,0),'DDMONYYHH24MI') -
  (SELECT TO_NUMBER(rule_value)
  FROM CMSRULES
  WHERE RULE_CODE='AUTO_PMAN_ETD_STD'
  )          /(24)         > SYSDATE
			
		]]> 
	</select>
	<select id="inventoryAwbPcWt" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="java.lang.Integer">
	SELECT COUNT(*)
	FROM EDI_CARDIT_HD A
	JOIN
	(SELECT awb_no, awb_date, SUM(locn_pcs) locn_pcs, SUM(locn_wt) locn_wt FROM
	awb_inventory GROUP BY awb_no, awb_date) B
	ON A.AWB_NO = B.AWB_NO
	AND A.AWB_DATE = B.AWB_DATE
	WHERE b.locn_pcs = TOT_NO_RECEPTACLE
	AND b.locn_wt = TOT_WT_RECEPTACLE
	AND A.AWB_NO =#awbNo#
	AND A.AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	<select id="resditAwbCount" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="java.lang.Integer">
			 SELECT count(*)
			FROM EDI_RESDIT_AWB_DTL
			WHERE AWB_NO=#awbNo#
			AND AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	
	<select id="sqlHawbStorageQueryId" parameterClass="cargo.cms.export.bo.StorageBO"  resultClass="cargo.cms.export.bo.StorageBO">
		SELECT hi.HAWB_NO hawbNo, hi.STRG_PCS hawbStrgPcs, hi.STRG_WT hawbStrgWt
		 FROM HAWB_INVENTORY hi WHERE hi.SEQ_NO = #seqNo#
	</select>
	
	<!--  <select id="fetch_nestingid_resdit" parameterClass="java.lang.String"  resultClass="java.lang.String">
		Select  C.NESTING_ID AS NESTINGID FROM edi_resdit_hd A, EDI_RESDIT_AWB_DTL B, EDI_RESDIT_TAG_DTL C
       WHERE A.TR_NO=B.TR_NO AND B.TR_AWB_NO = C.TR_AWB_NO AND A.FLT_KEY = #fltKey# 
       AND A.FLT_DATE =to_date(#fltDate#,'DDMONYY') AND C.CONTAINER_NO = #uldKey# AND ROWNUM = 1
	</select>  -->
	
	<select id="fetch_nestingid_resdit" parameterClass="java.lang.String"  resultClass="java.lang.String">
		  SELECT B.NESTING_ID FROM EDI_RESDIT_AWB_DTL A 
		  JOIN EDI_RESDIT_TAG_DTL B ON A.TR_AWB_NO = B.TR_AWB_NO 
		  JOIN EDI_RESDIT_HD C ON C.TR_NO = A.TR_NO
		  WHERE (C.flt_key,C.flt_date) 
		  IN (SELECT IMP_FLT_KEY,IMP_FLT_DATE FROM uld_inventory where ULD_KEY = #uldkey# and HANDLING_MODE is not null and HANDLING_MODE='NBK' ) 
		  AND B.CONTAINER_NO = #uldkey# AND ROWNUM = 1
 	</select>  
 	
 	<select id="fetch_hdlgmode_uld" parameterClass="java.lang.String"  resultClass="java.lang.String">
	select HDLG_MODE AS HDLGMODE FROM EXP_PMANIFEST_ULD WHERE  FLT_KEY = #fltKey# 
       AND FLT_DATE =to_date(#fltDate#,'DDMONYY')
 	</select>  
 	
 	
	<select id="getNbkDetailsByAwb" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" 
	   resultClass="java.lang.String">
		SELECT HOUSE_FLG AS hgsflg FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=to_date(#awbDate#,'DDMONYY')
	</select>
	
	<select id="getOffLoadTarmacHawbDetailsByAwb" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" 
	   resultClass="cargo.cms.export.bo.HawbOffLoadItemBO">
		SELECT EPTUAH.AWB_NO  awbNo,to_char(EPTUAH.AWB_DATE,'DDMONYY') awbDate,EPTUAH.TR_NO trNo,EPTUAH.HAWB_NO hawbNo,EPTUAH.PC buPcs,EPTUAH.WT buWt,EPTUAH.FLT_KEY fltKey,
		TO_CHAR(EPTUAH.FLT_DATE,'DDMONYY') fltDate,EPTUAH.ULD_BT_NO uldBtNo  FROM
		EXP_PMAN_TAR_ULD_AWB_HAWB EPTUAH
		WHERE EPTUAH.FLT_KEY=#fltKey# AND EPTUAH.FLT_DATE=TO_DATE(#fltDate#,'DDMONYY')
        AND EPTUAH.ULD_BT_NO=#uldBtNo# AND EPTUAH.AWB_NO=#hawbAwbNo# 
        AND EPTUAH.AWB_DATE=TO_DATE(#hawbAwbDate#,'DDMONYY')
        <isNotEmpty property="tagNo">
		  AND EPTUAH.HAWB_NO=#tagNo#                                    
		</isNotEmpty>
	</select>
	
	<select id="getHawbDetailsByAwbNoDetails" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" resultClass="cargo.cms.export.bo.HawbOffLoadItemBO">
	SELECT HI.SEQ_NO hawbSeqNo,HAWB_NO hawbNo,HI.STRG_PCS offPcs,HI.STRG_WT offWt  FROM HAWB_INVENTORY HI 
 	JOIN awb_inventory AI ON AI.SEQ_NO=HI.SEQ_NO WHERE HI.SEQ_NO =#seqNo#
	</select>
	
 
	<update id="sqlUABUpdateHawbInventory" parameterClass="java.util.HashMap">
    	UPDATE 
    		HAWB_INVENTORY 
    	SET 
    		LOCN_PCS=(LOCN_PCS-#hawbStrgPcs#), LOCN_WT=(LOCN_WT-#hawbStrgWt#) 
    	WHERE SEQ_NO = (
    		SELECT SEQ_NO FROM AWB_INVENTORY WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND AWB_NO=#awbNo# 
    		AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_TYPE='E' )
    </update>
    
    <delete id="deleteHawbInvWhenAwbInvDeleted" parameterClass="java.util.HashMap">
		DELETE FROM 
			HAWB_INVENTORY 
		WHERE SEQ_NO = (
    		SELECT SEQ_NO FROM AWB_INVENTORY WHERE  
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_KEY = #fltKey# 
			AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY') 
			AND ULD_KEY = #uldKey# AND LOCN_PCS=0)
	</delete>
	
	 <delete id="deleteHawbInvForUndo" parameterClass="java.util.HashMap">
		DELETE FROM 
			HAWB_INVENTORY 
		WHERE STRG_PCS = 0 AND SEQ_NO = (
    		SELECT SEQ_NO FROM AWB_INVENTORY WHERE  
			AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_KEY = #fltKey# 
			AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY') 
			AND ULD_KEY = #uldKey#)
	</delete>
	
	
	<delete id="sqlUABDeleteHawbInventory" parameterClass="java.util.HashMap">
    	DELETE FROM 
			HAWB_INVENTORY 
		WHERE SEQ_NO = (
		SELECT SEQ_NO FROM AWB_INVENTORY WHERE  
    	FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY=#uldKey# AND AWB_NO=#awbNo# 
    	AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') AND FLT_TYPE='E' )
    </delete>
    
    <update id="sqlDeleteHawbInventory" parameterClass="java.util.HashMap">
    	UPDATE HAWB_INVENTORY SET STRG_PCS=STRG_PCS-NVL(#undoHawbPcs#, 0), STRG_WT=STRG_WT-NVL(#undoHawbWt#, 0) 
    	WHERE HAWB_NO = #undoHawbTag# AND SEQ_NO = (SELECT SEQ_NO FROM AWB_INVENTORY
    	WHERE AWB_NO=#awbNo# AND AWB_DATE=TO_DATE(#awbDate#, 'DDMONYY') 
    	AND FLT_KEY = #fltKey# AND FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY') AND ULD_KEY = #uldKey#) 
    </update>
	<insert id="sqlInsertHawbInvForAmendDelete" parameterClass="java.util.HashMap">
		INSERT INTO HAWB_INVENTORY
			(HAWB_NO, STRG_PCS, STRG_WT, SEQ_NO ,CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE) 
		VALUES 
			(#hawbNo#, #hawbPcs#, #hawbWt#, #seqNo#, #userId#, SYSDATE, #userId#, SYSDATE)
	</insert>
	
	
    <delete id="deleteOffloadHawbBeforeInsert" parameterClass="cargo.cms.export.bo.HawbOffLoadItemBO">        	 
		DELETE FROM EXP_OFFLOAD_ULD_AWB_HAWB WHERE TR_NO=#trNo# AND HAWB_NO=#hawbNo#
    </delete>
        
    <delete id="deleteOffloadHawbBeforeInsertTRNo" parameterClass="cargo.cms.export.bo.HawbOffLoadItemBO">        	 
		DELETE FROM EXP_OFFLOAD_ULD_AWB_HAWB WHERE TR_NO=#trNo#
    </delete>
 
	<select id="sqlGetHawbStorageDetailsDelete" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="cargo.cms.export.bo.PreManifestAWBBO" >
		SELECT hinv.HAWB_NO hawbNo,hinv.STRG_PCS hawbRetrvPc,hinv.STRG_WT hawbRetrvWt FROM HAWB_INVENTORY hinv
    	INNER JOIN awb_inventory inv ON inv.SEQ_NO = hinv.SEQ_NO
    	WHERE  inv.AWB_NO = #awbNo# AND inv.AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY')
    	AND inv.FLT_KEY = #fltNo# AND inv.FLT_DATE = TO_DATE(#fltDate#, 'DDMONYY')
    	AND inv.ULD_KEY = #uldNo#
	</select>	
 
<select id="sqlValidateBUHAWBForReduce" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="java.lang.Integer" >
		SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB_HAWB 
		WHERE HAWB_NO = #hawbNo# AND PC = #hawbRetrvPc# AND WT = #hawbRetrvWt# AND TR_No IN (SELECT TR_NO FROM EXP_PMANIFEST_ULD_AWB WHERE AWB_NO = #awbNo# 
		AND AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY') AND ULD_BT_NO=#uldKey# AND FLT_KEY = #fltKey# AND FLT_DATE = #fltDate#)
	</select>	
	
	<select id="sqlValidateBUHAWBForAnotherUld" parameterClass="cargo.cms.export.bo.PreManifestAWBBO" resultClass="java.lang.Integer" >
		SELECT COUNT(1) FROM EXP_PMANIFEST_ULD_AWB_HAWB 
		WHERE HAWB_NO = #hawbNo# AND TR_No IN (SELECT TR_NO FROM EXP_PMANIFEST_ULD_AWB WHERE AWB_NO = #awbNo# 
		AND AWB_DATE = TO_DATE(#awbDate#, 'DDMONYY') AND ULD_BT_NO!=#uldKey# AND FLT_KEY = #fltKey# AND FLT_DATE = #fltDate#)
	</select>		
	
     <update id="sqlAmndDelUldAssgnUpdateHawbInv" parameterClass="java.util.HashMap">
		UPDATE 
			HAWB_INVENTORY 
		SET 
			STRG_PCS = STRG_PCS + NVL(#hawbPc#, 0) , STRG_WT = STRG_WT + NVL(#hawbWt#, 0)
		WHERE 
			SEQ_NO=#seqNo# AND HAWB_NO = #hawbNo#
	</update>
	
	<select id="getTarmacAwbTrNo"  parameterClass="cargo.cms.export.bo.PreOffLoadItemBO"  resultClass="java.lang.Integer">
		 SELECT TR_NO AS trNo FROM EXP_PMAN_TARMAC_ULD_AWB WHERE FLT_KEY=#fltKey# AND FLT_DATE=TO_DATE(#fltDate#,'DDMONYY')
         AND AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ULD_BT_NO=#uldKey#
	</select>
	
	<select id="getTarmacOffloadHawbListBy"  parameterClass="cargo.cms.export.bo.PreOffLoadItemBO"  resultClass="cargo.cms.export.bo.HawbOffLoadItemBO">
		 SELECT B.TR_NO trNo,B.HAWB_NO hawbNo,B.PC offPcs,B.WT offWt FROM EXP_OFFLOAD_ULD_AWB A 
     	JOIN EXP_OFFLOAD_ULD_AWB_HAWB B ON B.TR_NO=A.TR_NO
     	WHERE A.FLT_KEY=#fltKey# AND A.FLT_DATE=TO_DATE(#fltDate#,'DDMONYY') AND A.AWB_NO=#awbNo#
     	AND A.AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') AND A.ULD_BT_NO=#uldKey#
	</select>
<insert id="insertTarmacHawbInfo" parameterClass="cargo.cms.export.bo.HawbOffLoadItemBO">
	   INSERT INTO EXP_PMAN_TAR_ULD_AWB_HAWB (TR_NO,HAWB_NO,PC,WT,FLT_KEY,FLT_DATE,AWB_NO,AWB_DATE,ULD_BT_NO,
	   CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
       VALUES (EXP_PMAN_TAR_ULD_AWB_HAWB_SEQ.nextval,#hawbNo#,#offPcs#,#offWt#,#fltKey#,to_date(#fltDate#,'DDMONYY'),#awbNo#,to_date(#awbDate#,'DDMONYY'),#uldBtNo#,
       #userID#,SYSDATE,#userID#,SYSDATE)
	</insert>
	
	<select id="checkUldisTransitMail" parameterClass="cargo.cms.export.bo.DeclareBuildupCompleteItemBO" resultClass="java.lang.Integer">
    	SELECT count(*) FROM exp_pmanifest_uld_awb uawb, AWB awb 
			WHERE uawb.awb_no = awb.awb_no AND uawb.awb_DATE = awb.awb_DATE and awb.catalog = 'TM' and
			uawb.FLT_KEY = #fltNo# AND uawb.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY') AND uawb.uld_bt_no = #uldBtNo# 
    </select>
    
    <select id="hawPmanListByAwb" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="cargo.cms.export.bo.HawbOffLoadItemBO">
	    SELECT EPUAH.TR_NO trNo,CONCAT(CONCAT(EPUAH.HAWB_NO, '_'),EPUA.awb_no) hawbNo,EPUAH.PC buPcs,EPUAH.WT buWt FROM
        EXP_PMANIFEST_ULD_AWB_HAWB EPUAH JOIN EXP_PMANIFEST_ULD_AWB EPUA ON EPUAH.TR_NO=EPUA.TR_NO
        WHERE  EPUA.flt_key = #fltKey# and  EPUA.flt_date = TO_DATE(#fltDate#,'DDMONYY')
        and EPUA.unldg_pt = #unldgpt# and EPUA.awb_no = #awbNo# AND EPUA.AWB_DATE=TO_DATE(#awbDate#,'DDMONYY')

       <!-- <isNotEqual property="uldBtNo" compareValue="DUM">
 			 AND EPUA.ULD_BT_NO=#uldBtNo#                                    
		</isNotEqual> -->
        
        AND EPUA.ULD_BT_NO=(Select Rule_Value From Cmsrules Where Rule_Code='Dummy_H_Container')
	</select>
	
	<select id="checkULDMaintainedWithHouse" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
    	SELECT count(*) FROM exp_pmanifest_uld_awb uawb, AWB awb 
			WHERE uawb.awb_no = awb.awb_no AND uawb.awb_DATE = awb.awb_DATE and NVL(awb.house_flg,'N') = 'Y' and
			uawb.FLT_KEY = #FLTKEY# AND uawb.FLT_DATE = TO_DATE(#FLTDATE#,'DDMONYY') AND uawb.uld_bt_no = #ULDKEY# 
    </select>
    
    <select id="checkULDWithHouse" parameterClass="java.lang.String" resultClass="java.lang.Integer">
    	SELECT count(*) FROM awb_inventory uawb, AWB awb 
			WHERE uawb.awb_no = awb.awb_no AND uawb.awb_DATE = awb.awb_DATE and NVL(awb.house_flg,'N') = 'Y' and
			uawb.uld_key = #uldKey# 
    </select>
    
    <select id="checkUldisTransitMailNBK" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
		  SELECT count(1) FROM EDI_RESDIT_AWB_DTL A 
		  JOIN EDI_RESDIT_TAG_DTL B ON A.TR_AWB_NO = B.TR_AWB_NO 
		  JOIN EDI_RESDIT_HD C ON C.TR_NO = A.TR_NO
		  WHERE (C.flt_key,C.flt_date) IN (SELECT IMP_FLT_KEY,IMP_FLT_DATE FROM uld_inventory where ULD_KEY = #uldkey# and HANDLING_MODE is not null and HANDLING_MODE='NBK')
		  AND B.CONTAINER_NO = #uldkey#
 	</select> 
 	
 	<select id="getTarmacHawbSeqNo" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" resultClass="java.lang.String">
    	SELECT MAX(NVL(TR_NO,0)) AS trNo FROM EXP_PMAN_TAR_ULD_AWB_HAWB 
    </select> 
    
    <select id="getHawbListByAwbAndUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" 
      resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
      SELECT EOUAH.HAWB_NO hawbAwbNo,EOUAH.TR_NO trNo,EOUA.ULD_BT_NO uldBtNo,EOUA.AWB_NO awbNo FROM EXP_OFFLOAD_ULD_AWB EOUA
      JOIN EXP_OFFLOAD_ULD_AWB_HAWB EOUAH ON EOUA.TR_NO=EOUAH.TR_NO
       WHERE EOUA.ULD_BT_NO=#uldBtNo# AND EOUA.AWB_NO=#awbNo# AND EOUA.AWB_DATE=to_date(#awbDate#,'DDMONYY')
    </select>
    
    <select id="getNestedIdByUld" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" 
      resultClass="cargo.cms.export.bo.OffLoadCargoDetailsBO">
      SELECT NESTING_ID nestingId,HDLG_MODE hdlgMode FROM EXP_OFFLOAD_ULD WHERE ULD_BT_NO=#uldBtNo# AND FLT_KEY=#fltKey#
       AND FLT_DATE=to_date(#fltDate#,'DDMONYY') AND ROWNUM=1 
    </select>
    
    <select id="getDummyAwbListByAwbAndUld" parameterClass="cargo.cms.export.bo.PreOffLoadItemBO" 
      resultClass="cargo.cms.export.bo.PreOffLoadItemBO">
         SELECT A.AWB_NO AS awbNo,A.TR_NO AS trNo,          to_char(A.AWB_DATE,'DDMONYY') AS awbDate,
		A.ASSIGNED_PCS AS assignedPc,          A.ASSIGNED_WT AS assignedWt,          'Y' as isChecked,
		decode((SELECT NVL(SUM(OFFLOAD_PCS),0) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO 
		AND AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO),'','',
		(SELECT NVL(SUM(OFFLOAD_PCS),0) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND 
		FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO)) as offPcs,        
		decode((SELECT NVL(SUM(OFFLOAD_WT),0) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND
		AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO),'','',   
		(SELECT NVL(SUM(OFFLOAD_WT),0) FROM EXP_OFFLOAD_ULD_AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=A.AWB_DATE AND FLT_KEY=A.FLT_KEY AND 
		FLT_DATE=A.FLT_DATE AND ULD_BT_NO=A.ULD_BT_NO)) as offWt,           a.uld_bt_no as uldKey,          '' AS offBulkPcs,  
		''  AS offBulkWt,          pkg_common.get_awb_splcodes(A.AWB_NO,to_char(A.AWB_DATE,'DDMONYY')
		,(SELECT AWB_TYPE FROM AWB WHERE AWB_NO=A.AWB_NO AND AWB_DATE=to_char(A.AWB_DATE,'DDMONYY') AND ROWNUM=1)) AS shcCode, 
		'Normal' as type   FROM       EXP_PMANIFEST_ULD_AWB A   WHERE   A.FLT_KEY = #fltKey# AND   A.FLT_DATE = to_date(#fltDate#,'DDMONYY') AND
		(A.ULD_BT_NO = (select RULE_VALUE from cmsrules where RULE_CODE='Dummy_H_Container') OR A.ULD_BT_NO =NULL OR A.ULD_BT_NO ='') 
		AND A.TR_NO!=#trNo# AND A.AWB_NO=#awbNo# AND A.AWB_DATE=to_date(#awbDate#,'DDMONYY') 
    </select>
    
<select id="getOffLoadHawbDetailsByAwbAndBulk" parameterClass="cargo.cms.export.bo.OffLoadCargoDetailsBO" 
	   resultClass="cargo.cms.export.bo.HawbOffLoadItemBO">
		<!-- SELECT EPUAH.TR_NO trNo,EPUAH.HAWB_NO hawbNo,EPUAH.PC buPcs,EPUAH.WT buWt FROM
   		EXP_PMANIFEST_ULD_AWB_HAWB EPUAH JOIN EXP_PMANIFEST_ULD_AWB EPUA ON EPUAH.TR_NO=EPUA.TR_NO
   		WHERE EPUA.FLT_KEY=#fltKey# AND EPUA.FLT_DATE=to_date(#fltDate#,'DDMONYY') AND EPUA.AWB_NO=#hawbAwbNo# 
   		AND EPUA.AWB_DATE=to_date(#hawbAwbDate#,'DDMONYY') -->
   		
   		  select 
		  TR_NO trNo,HAWB_NO hawbNo, pc buPcs, wt buWt
		  from EXP_PMAN_TAR_ULD_AWB_HAWB 
		  Where 
		  FLT_KEY= #fltKey# AND FLT_DATE= to_date(#fltDate#,'DDMONYY')  and awb_no= #hawbAwbNo# and awb_date= to_date(#hawbAwbDate#,'DDMONYY') AND Uld_Bt_No = 'BULK'
		UNION ALL
		SELECT to_number(TR_NO) trNo,HAWB_NO hawbNo, pc buPcs, wt buWt FROM
		            EXP_PMANIFEST_ULD_AWB_HAWB where tr_no IN
		 (select p.tr_no from 
		  exp_pmanifest_uld_awb p,exp_pmanifest_uld q 
		  where
		  p.flt_key = q.flt_key and 
		  p.flt_date = q.flt_date and
		  p.uld_bt_no = q.uld_bt_no and
		  p.FLT_KEY = #fltKey# AND
		  p.FLT_DATE = to_date(#fltDate#,'DDMONYY')  and p.awb_no= #hawbAwbNo# and p.awb_date= to_date(#hawbAwbDate#,'DDMONYY')
		  AND (Q.Bb_Ind = 'Y' Or Q.New_Checkin_Uld='Y' Or (Select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) From Mast_Uld_Type Where Code = Substr(P.Uld_Bt_No, 1, 3)) = 'Y')
		  )
		UNION ALL
		 Select R.TR_NO trNo,R.HAWB_NO hawbNo, r.pc buPcs, r.wt buWt FROM
		  EXP_PMAN_TAR_ULD_AWB_HAWB R, Exp_Pman_Tarmac_Uld S,Exp_Pmanifest_Uld T 
		  where
		  R.Flt_Key = S.Flt_Key And 
		  R.Flt_Date = S.Flt_Date And
		  R.Uld_Bt_No = S.Uld_Bt_No And
		  T.Flt_Key = R.Flt_Key And 
		  T.Flt_Date = R.Flt_Date And
		  T.uld_bt_no = R.uld_bt_no and
		  r.FLT_KEY = #fltKey# AND R.Flt_Date = To_Date(#fltDate#,'DDMONYY') and  R.awb_no= #hawbAwbNo# and R.awb_date= to_date(#hawbAwbDate#,'DDMONYY')
		  AND ((Select Bb_Ind From Exp_Flt_Uld Where Flt_Key=#fltKey# And Flt_Date=To_Date(#fltDate#,'DDMONYY') And Uld_Key= R.uld_bt_no And Rownum=1) = 'Y'
		  Or T.New_Checkin_Uld='Y' Or (Select decode(H_CONT_IND,'Y','Y',DECODE(BT_IND,'Y','Y','N')) From Mast_Uld_Type Where Code = Substr(R.Uld_Bt_No, 1, 3)) = 'Y')
   		
	</select>
	<select id="getAwbByTagAjax" parameterClass="cargo.cms.export.bo.AcceptTransferCargoImportSearchBO" 
      resultClass="java.lang.String">
    	SELECT ECH.AWB_NO||'_'||TO_CHAR(ECH.AWB_DATE,'DDMONYY') awbNo FROM EDI_CARDIT_HD ECH JOIN EDI_CARDIT_TAG_DTL ECTD ON ECH.TR_NO=ECTD.TR_NO
     		 left JOIN AWB B ON ECH.awb_no = B.awb_No and ECH.awb_date = B.awb_Date
  			 WHERE ECTD.TAG_NO=#tagNo# AND NVL(B.AWB_CLOSED_YN,'N') = 'N' and rownum=1 
    </select>
    
      <select id="checkValidOrigAndDest" parameterClass="map" resultClass="java.lang.Integer">
          SELECT count(*) FROM MAST_ARPT WHERE CODE=#orig#
      </select>
      
      <insert id="INSERT_TRF_ACCEPT_HD_TRANSHIPMENT" parameterClass="cargo.cms.imprt.bo.ImpXomBO">					  
		INSERT INTO TRF_ACCEPT_HD (TRF_NO, TRF_DATE, PPK_TYPE,AWB_NO,AWB_PFX,AWB_DATE,AWB_DEST,RCL_PCS,
		 RCL_WT, RCL_FBL, CARR_CODE, ULD_TYPE, ULD_NO, ULD_CARR, ULD_KEY,FLT_KEY,FLT_DATE,FLT_TYPE, 
		 HCARRY_IND, SPL_CODE1, SPL_CODE2, SPL_CODE3,SPL_CODE4, SPL_CODE5, SPL_CODE6, SPL_CODE7, 
		 SPL_CODE8, SPL_CODE9, REF_TRM_NO, TRANS_CARR_CODE, ACCPT_MODE, STATUS, TR_TYPE, TR_STATUS,
		  CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE,DUM_FLT_KEY,DUM_FLT_DATE,TR_TYPE_EVT,TARMAC_YN) 
		  VALUES
		(#trNo#, SYSDATE, 'B',#awbNo#,#awbPre#,CASE WHEN TO_DATE(#awbDate#,'DDMONYY') IS NULL THEN SYSDATE ELSE TO_DATE(#awbDate#,'DDMONYY') END,
		 #dest#, '0', '0',
		 'N', #carrCode#, null,null,null,null,#fltKey# ,#fltDate#,'I' 
		 ,'N','MAL',null,null,null,null,null,null,null,null,
		 #trNo#, #tranCarrCode#, 'TIT', 'S', 'AC', 'N', #userID#, SYSDATE, #userID#, 
		 SYSDATE,#fltKey#,#fltDate#,NVL(#trtype#,'ACAWB'),null)
	</insert>
	
	<update id="upd_awb_accept_transfer_TM" parameterClass="cargo.cms.imprt.bo.ImpXomBO">
		UPDATE AWB SET	
		    LM_USER_ID = #userID#,
		    LM_DATE    = sysdate,
		    ACCEPT_MODE = 'TIT'
		WHERE
			AWB_NO = #awbNo# AND
			AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')		
	</update> 
	
	<insert id="INSERT_TRF_ACCEPT_DTL_TRANSHIPMENT" parameterClass="cargo.cms.imprt.bo.ImpXomBO">	
		INSERT INTO TRF_ACCEPT_DTL ( TRF_NO, DOC_LINE_NO, PPK_TYPE, ULD_TYPE, ULD_NO, ULD_CARR
				, ULD_KEY, LOC_CODE, LSP_NO, PCS, NET_WT, GROSS_WT, TARE_WT, CONTR_CODE
				, TR_TYPE, TR_STATUS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE )
				VALUES
				 (#trNo#, TRF_DOCLINE_SEQ.NEXTVAL, 'B', #uldType#,#uldNo#,#uldCarr#,#uldKey#,
           #locCode#,#lspNo#, NVL(#pcs#,0), NVL(#wt#,0), NVL(#wt#,0), 100+nvl(#wt#, 0),
         (SELECT MAX(a.CONTR_CODE) FROM ULD_TYPE_CONTR a WHERE ULD_TYPE=SUBSTR(#uldKey#,0,3) and rownum=1 GROUP BY a.ULD_TYPE)
				, 'AC', 'T', #userID#,  SYSDATE, #userID#, SYSDATE)
	</insert>
      
      <insert id="insertTrfHawbAcceptInfo" parameterClass="cargo.cms.imprt.bo.ImpXomBO">
        INSERT INTO TRF_ACCEPT_HAWB 
        (TRF_NO,DOC_LINE_NO,HAWB_NO,AWB_NO,AWB_DATE,PC,WT,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
         VALUES 
        (#trNo#,TRF_ACCEPT_HAWB_SEQ.NEXTVAL,#tagNo#,#awbNo#,
         CASE WHEN TO_DATE(#awbDate#,'DDMONYY') IS NULL THEN SYSDATE ELSE TO_DATE(#awbDate#,'DDMONYY') END,
         #pcs#,#wt#,#userID#,SYSDATE,#userID#,SYSDATE)
      </insert>
      
      <select id="checkValidLocation" parameterClass="map" resultClass="java.lang.Integer">
         SELECT Count(1) FROM MAST_WH_LOC WHERE upper(CODE) = upper(#locCode#)
      </select>
      
      <select id="checkTagDuplication" parameterClass="map" resultClass="java.lang.Integer">
         SELECT Count(1) FROM TRF_ACCEPT_HAWB A
      	 left JOIN AWB B ON A.awb_no = B.awb_No and A.awb_date = B.awb_Date
     	 WHERE A.HAWB_NO= upper(#hawbNo#) AND NVL(B.AWB_CLOSED_YN,'N') = 'N' 
         
      </select>
      
      <select id="getFlightCount" parameterClass="map" resultClass="java.lang.String">
    		select COUNT(1) from flt_opr_seg f join EDI_RESDIT_HD e
     		on e.FLT_KEY=F.FLT_KEY and e.FLT_DATE=F.SCH_DATE
	  		where f.tr_no in (
    		select tr_no from flt_opr where flt_key = #fltKey#  and 
			sch_date=to_date(#fltDate#,'dd-mon-yy') and flt_type = 'A')
    		and f.off_point='HKG' AND e.FLT_DATE=to_date(#fltDate#,'dd-mon-yy') AND e.flt_key =#fltKey#
   	</select>
      
      <select id="getUldStorageInfo" parameterClass="map" resultClass="cargo.cms.imprt.bo.ImpXomBO">
    		SELECT HANDLING_MODE handlingMode,ULD_KEY uldKey FROM ULD_INVENTORY WHERE ULD_KEY=#uldKey# AND ROWNUM=1
   	</select>
   	
   	 <select id="getTagBreakDownInfo" parameterClass="map" resultClass="java.lang.Integer">
    	 SELECT COUNT(1) FROM IMP_XPS_OBC_MAIL A left JOIN AWB B ON A.awb_no = B.awb_No
         and A.awb_date = B.awb_Date WHERE A.TAG_NO=#tagNo# AND NVL(B.AWB_CLOSED_YN,'N') = 'N'
    		
   	</select>
   	
   	 <select id="getUldLoadTransitMailAWBInfo" parameterClass="map" resultClass="java.lang.Integer">
        SELECT count(*) FROM awb_inventory uawb, AWB awb 
		WHERE uawb.awb_no = awb.awb_no AND uawb.awb_DATE = awb.awb_DATE and awb.catalog != 'TM' and
		uawb.uld_key = #uldKey#
   	</select>
   	
   	<select id="getLspLoadTransitMailAWBInfo" parameterClass="map" resultClass="java.lang.Integer">
        SELECT count(*) FROM awb_inventory uawb, AWB awb 
		WHERE uawb.awb_no = awb.awb_no AND uawb.awb_DATE = awb.awb_DATE and awb.catalog != 'TM' and
		uawb.LSP_NO = #lspNo#
   	</select>
    
    <update id="updateTrfHaAcceptInfo" parameterClass="cargo.cms.imprt.bo.ImpXomBO">
		UPDATE TRF_ACCEPT_HD SET RCL_PCS=RCL_PCS+NVL(#pcs#,0),RCL_WT=RCL_WT+NVL(#wt#,0) WHERE TRF_NO=#trNo#
	</update> 

	<select id="uldAssignmentCheckForTM" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(a.AWB_NO) FROM AWB a
        INNER JOIN AWB_INVENTORY ai ON ai.AWB_NO = a.AWB_NO AND ai.AWB_DATE = a.AWB_DATE
        WHERE ai.ULD_KEY = #uldBtNo# AND a.CATALOG = 'TM'
	 </select>

<select id="getScreeningInfoErcl" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.IssueRCLBO">
		select
		(SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE = 'RACSF_CONTROL') racsfOnOff, 
								  A.SCREENING_METHOD truckSecurity,A.RACSF_CODE racsfCode,A.REMARKS remark, 
								  A.EXEMPTED_REASON reason,A.RA_TYPE raType,A.RACSF_TRK_NUMBER truck,
								  A.DEDICATED_PERSON person, A.SCREENING_OPTION secOption,
								(SELECT DTL.code_desc FROM MAST_CODE_HD HD,MAST_CODE_DTL DTL where HD.code = DTL.CODE_TYPE AND HD.code = 'SCREENING_METHOD' AND DTL.CODE = A.SCREENING_METHOD ) as truckSecurityDesc,
								(SELECT DTL.code_desc FROM MAST_CODE_HD HD,MAST_CODE_DTL DTL where HD.code = DTL.CODE_TYPE AND HD.code = 'EXEMPTED' AND DTL.CODE = A.EXEMPTED_REASON ) as reasonDesc,
								(SELECT DTL.code_desc FROM MAST_CODE_HD HD,MAST_CODE_DTL DTL where HD.code = DTL.CODE_TYPE AND HD.code = 'RA_KC_TYPE' AND DTL.CODE = A.RA_TYPE ) as raTypeDesc,
								SECURENET_COUNT AS secSerialCount,
								VKC_CODE as vkcCode,
								SEAL_NUM1 as sealNum1,
								SEAL_NUM2 as sealNum2,
								SEAL_NUM3 as sealNum3,
								SEAL_NUM4 as sealNum4,
								SEAL_NUM5 as sealNum5,
								SEAL_NUM6 as sealNum6,
								SEAL_NUM7 as sealNum7,
								SEAL_NUM8 as sealNum8,
								SEAL_NUM9 as sealNum9								
		FROM   EXP_PRE_RCL_HD A where A.PRE_RCL_NO = #preRclNum#
	</select> 
    
	
<insert id="createHisAwbEvntForBUPInfo" parameterClass="java.util.HashMap">
		INSERT INTO HIS_AWB_EVNT 
			(AWB_NO, AWB_DATE, COD_TRA_SEQ_NUM, COD_HIS_TYP, COD_FUNC, MODULE, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE)
		VALUES 
			(#awbNo#, TO_DATE(#awbDate#, 'DDMONYY'), #traSeqNo#, 'E', 'AMUAS', 'W', #userId#, SYSDATE, #userId#, SYSDATE)
	</insert>
        <insert id="insertJobOrderList" parameterClass="cargo.cms.export.bo.JobOrderBO" >
		Insert into GT_TEMP_JOBORDER (JO)
		values (#joNumber#)
	</insert>
	
	<select id="exp_checkAwbLocked"  parameterClass="map" resultClass="java.lang.Integer">
		<![CDATA[
		select count(1) from EXP_CAR 
		where AWB_NO = #AWBNO# and AWB_DATE = #AWBDATE# and lock_ind = 'Y' and rownum = 1
		]]>
	</select>
<insert id="createHisAwbEvntDtlForBUPInfo" parameterClass="java.util.HashMap">
		INSERT INTO HIS_AWB_EVNT_DTL 
			(AWB_NO, AWB_DATE, COD_TRA_SEQ_NUM, COD_SEQ_NUM, COD_ACT, COD_HIS_SEQ_NUM, DES_HIS_DTS, CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE)
		VALUES 
			(#awbNo#, TO_DATE(#awbDate#, 'DDMONYY'), #traSeqNo#, SQ_IMP_CAR_SHP_HIS.NEXTVAL, 'U', '998', #desHisDtls#, #userId#, SYSDATE, #userId#, SYSDATE)
	</insert> 
    <update id="sqlUpdateDummyEvntforULDAssignmentInv"  parameterClass="java.util.HashMap" >
   	UPDATE AWB_INVENTORY SET ref_awb_event='AAA' WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
   	</update>
   	  <update id="sqlUpdateDummyEvntforULDAssignmentBUP"  parameterClass="java.util.HashMap" >
   	UPDATE EXP_PMANIFEST_ULD_AWB SET TR_TYPE='AAA' WHERE FLT_KEY=#fltKey# AND FLT_DATE=#fltDate# AND uld_bt_no=#uldKey# AND AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
   	</update>  
   	 <update id="sqlUpdateDummyEvntforULDAssignmentpman"  parameterClass="java.util.HashMap" >
   	UPDATE EXP_PMANIFEST_AWB SET TR_TYPE='AAA' where flt_key=#fltKey# and flt_date=#fltDate# and AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
   	</update> 
<select id="getResditAwbDetails" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.AWBBO">
		SELECT distinct(A.awb_no) awbNo,to_char(A.awb_date,'DDMONYY') awbDate FROM EDI_RESDIT_AWB_DTL A 
		   JOIN EDI_RESDIT_TAG_DTL B ON A.TR_AWB_NO = B.TR_AWB_NO 
		   JOIN EDI_RESDIT_HD C ON C.TR_NO = A.TR_NO
		   WHERE (C.flt_key,C.flt_date) IN (SELECT IMP_FLT_KEY,IMP_FLT_DATE FROM uld_inventory where ULD_KEY = #uldkey# and HANDLING_MODE is not null and HANDLING_MODE='NBK')
		   AND B.CONTAINER_NO = #uldkey# 
	</select>
	
	 <select id="isPremanifest" parameterClass="cargo.cms.export.bo.AWBBO" resultClass="java.lang.Integer">
		select count(1) from exp_pmanifest_awb where flt_key=#fltKey# and flt_date=to_date(#fltDate#,'DDMONYY') and awb_no=#awbNo# and awb_date=to_date(#awbDate#,'DDMONYY')
	</select>


   	<select id="fetchScreenDetailsByRclNo" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	  SELECT PRE_RCL_NO AS rclNo,SCREENING_OPTION AS racfRadioOption,RACSF_CODE AS screenUnderRacsfCode,
	  SCREENING_METHOD AS screeningMethod,EXEMPTED_REASON AS exemptedReason,
	  REMARKS AS remarks,RA_TYPE AS rakcType,RACSF_TRK_NUMBER AS truckNo,DEDICATED_PERSON AS personInCab,
	  VKC_CODE as vkcCode,
		SEAL_NUM1 as sealNum1,
		SEAL_NUM2 as sealNum2,
		SEAL_NUM3 as sealNum3,
		SEAL_NUM4 as sealNum4,
		SEAL_NUM5 as sealNum5,
		SEAL_NUM6 as sealNum6,
		SEAL_NUM7 as sealNum7,
		SEAL_NUM8 as sealNum8,
		SEAL_NUM9 as sealNum9	  
	  FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#rclNo#
	</select>
	
	<select id="getScreeningMethodDropdownName" parameterClass="map" resultClass="java.lang.String">
	  SELECT NVL(CODE_DESC,'') AS codeDesc FROM MAST_CODE_DTL WHERE CODE=#code# AND CODE_TYPE=#codeType#
	</select>
	
<select id="geteRCLScreenDetila" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLBO">
	  SELECT SCREENING_OPTION AS racfRadioOption,RACSF_CODE AS screenUnderRacsfCode,
	  SCREENING_METHOD AS screeningMethod,EXEMPTED_REASON AS exemptedReason,
	  REMARKS AS screenUnderRacsfRemarks,RA_TYPE AS rakcType,RACSF_TRK_NUMBER AS truckNo,DEDICATED_PERSON AS personInCab,
	  (SELECT TRANS_NAME  FROM IMAGE_STORE where TRANS_TYPE = 'ERCL' and TRANS_NO = EXP_PRE_RCL_HD.PRE_RCL_NO and rownum =1) as transactionId,
	     VKC_CODE as vkcCode,
		SEAL_NUM1 as sealNum1,
		SEAL_NUM2 as sealNum2,
		SEAL_NUM3 as sealNum3,
		SEAL_NUM4 as sealNum4,
		SEAL_NUM5 as sealNum5,
		SEAL_NUM6 as sealNum6,
		SEAL_NUM7 as sealNum7,
		SEAL_NUM8 as sealNum8,
		SEAL_NUM9 as sealNum9,
    SEAL_NUM1 AS sealNumber1,SEAL_NUM2 AS sealNumber2,SEAL_NUM3 AS sealNumber3,SEAL_NUM4 AS sealNumber4,SEAL_NUM5 AS sealNumber5,SEAL_NUM6 AS sealNumber6,
	  SEAL_NUM7 AS sealNumber7,SEAL_NUM8 AS sealNumber8,SEAL_NUM9 AS sealNumber9,
    SECURENET_COUNT AS sealCount, securenet_serial_no as secnetSealNo	
  FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRclNum#
	</select>
	
	
	
	<select id="getRecvCargoInfo" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.export.bo.IssueRCLBO">
			  WITH UN_INFO AS
				  ( SELECT distinct un_eli_num , un_elm_num  FROM EXP_CARGO_RECEIVE_RECORD where PRE_RCL_NO = #preRclNum#  ),
				  SHC_INFO AS(
				  		SELECT STRAGG(STRINGDELIM(s,',')) as shc FROM (SELECT distinct shc as s FROM EXP_CARGO_RECEIVE_RECORD_SHC WHERE 
         						 tr_no in (SELECT tr_no FROM EXP_CARGO_RECEIVE_RECORD where PRE_RCL_NO = #preRclNum#)) ),
				  PC_INFO AS
				  ( SELECT sum(un_eli_pcs) un_eli_pcs, sum(un_elm_pcs) un_elm_pcs FROM EXP_CARGO_RECEIVE_RECORD where PRE_RCL_NO = #preRclNum# )
				SELECT  un_eli_num as unELINumber, un_elm_num as unELMNumber, shc as shc, un_eli_pcs as unELIPcs, un_elm_pcs as unELMPcs  FROM UN_INFO,SHC_INFO,PC_INFO
	</select>
	
	
	<select id="getRecvAndWhRmk" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="java.util.HashMap">
	  	WITH RMK_INFO AS(SELECT STRAGG(STRINGDELIM(rmk,',')) as rclRemark FROM (SELECT shc || '-' || sum(pcs) as rmk FROM EXP_CARGO_RECEIVE_RECORD_SHC WHERE 
          tr_no in (SELECT tr_no FROM EXP_CARGO_RECEIVE_RECORD where PRE_RCL_NO = #preRCLNum#) group by shc)),
		  WHRMK_INFO AS
		   ( SELECT  AWB_RMK  as oldWhRemarks FROM AWB where awb_no = #awbNum# and awb_date = to_date(#awbDate#,'DDMONYY'))
		select (SELECT  rclRemark  FROM RMK_INFO) as RCLRMK , (select  oldWhRemarks from WHRMK_INFO) as WHRMK from DUAL
	</select>
	
	<select id="geteRCLScreenDetilaforcommonlogic" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
	  SELECT SCREENING_OPTION AS racfRadioOption,RACSF_CODE AS screenUnderRacsfCode,
	  SCREENING_METHOD AS screeningMethod,EXEMPTED_REASON AS exemptedReason,
	  REMARKS AS screenUnderRacsfRemarks,RA_TYPE AS rakcType,RACSF_TRK_NUMBER AS truckNo,DEDICATED_PERSON AS personInCab,
	  (SELECT TRANS_NAME  FROM IMAGE_STORE where TRANS_TYPE = 'ERCL' and TRANS_NO = EXP_PRE_RCL_HD.PRE_RCL_NO and rownum =1) as transactionId,
	     VKC_CODE as vkcCode,
		SEAL_NUM1 as sealNum1,
		SEAL_NUM2 as sealNum2,
		SEAL_NUM3 as sealNum3,
		SEAL_NUM4 as sealNum4,
		SEAL_NUM5 as sealNum5,
		SEAL_NUM6 as sealNum6,
		SEAL_NUM7 as sealNum7,
		SEAL_NUM8 as sealNum8,
		SEAL_NUM9 as sealNum9,
    SEAL_NUM1 AS sealNumber1,SEAL_NUM2 AS sealNumber2,SEAL_NUM3 AS sealNumber3,SEAL_NUM4 AS sealNumber4,SEAL_NUM5 AS sealNumber5,SEAL_NUM6 AS sealNumber6,
	  SEAL_NUM7 AS sealNumber7,SEAL_NUM8 AS sealNumber8,SEAL_NUM9 AS sealNumber9,
    SECURENET_COUNT AS sealCount, securenet_serial_no as secnetSealNo	
  FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRclNum#
	</select>
	
	<select id="getDropdownNameById" parameterClass="map" resultClass="java.lang.String">
		SELECT NVL(CODE,'') AS CODE FROM MAST_CODE_DTL WHERE CODE_DESC=#code# AND CODE_TYPE=#codeType#
	</select>
	
<select id="enquiryScreenDetailsByRclNo" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">
	  SELECT RCL_NO AS rclNum,SCREENING_OPTION AS racfRadioOption,RACSF_CODE AS screenUnderRacsfCode,
	  SCREENING_METHOD AS screeningMethod,EXEMPTED_REASON AS exemptedReason,
	  REMARKS AS remarks,RA_TYPE AS rakcType,RACSF_TRK_NUMBER AS truckNo,DEDICATED_PERSON AS personInCab,
	   VKC_CODE as vkcCode,
		SEAL_NUM1 as sealNum1,
		SEAL_NUM2 as sealNum2,
		SEAL_NUM3 as sealNum3,
		SEAL_NUM4 as sealNum4,
		SEAL_NUM5 as sealNum5,
		SEAL_NUM6 as sealNum6,
		SEAL_NUM7 as sealNum7,
		SEAL_NUM8 as sealNum8,
		SEAL_NUM9 as sealNum9
	  FROM EXP_RCL_HD WHERE RCL_NO=#rclNum#
	</select>

	<insert id="insertImageUploadDataErcl" parameterClass="map" >
			insert into IMAGE_STORE (SEQ_NO,TRANS_NAME,TRANS_TYPE,TRANS_NO,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)			
				values(AWB_ULD_IMAGE_SEQ.NEXTVAL,#transactionId#,'ERCL',#preRclNo#,'SYSTEM',SYSDATE,'SYSTEM',SYSDATE)		   
	</insert>
	
	<delete id="deleteAWBImgStore" parameterClass="map">
		DELETE FROM AWB_IMAGE WHERE AWB_IMAGE_NAME = #transactionId#
	</delete>
	
	<delete id="deleteULDImgStore" parameterClass="map">
		DELETE FROM ULD_IMAGE WHERE ULD_IMAGE_NAME = #transactionId#
	</delete>
	<delete id="deleteFWImgStore" parameterClass="map">
		DELETE FROM fw_image_store WHERE img_session_id = #transactionId#
	</delete>
<select id="getPreRCLImgListforDesktopImageUpload" parameterClass="map" resultClass="cargo.cms.export.bo.ImageBO">
	SELECT IMG_NAME AS fileName,IMG_SIZE AS fileSize,#rclNo# AS refNo,IMG_PATH AS folderPath,'RCL' AS functionName,'' AS imgtransactionID FROM FW_IMAGE_STORE WHERE img_session_id =  #transactionId#
	</select>
	
	<select id="getRCLAWBListforDesktopImageUpload" parameterClass="map" resultClass="cargo.cms.export.bo.ImageBO">
	SELECT AWB_NO as awbNo,TO_CHAR(AWB_DATE,'DDMONYY') as awbDate FROM EXP_RCL_HD WHERE RCL_NO = #rclNo# AND ppk_type in ('P','B')
        </select>
	<select id="getDesktopRCLULDListforImageUpload" parameterClass="map" resultClass="cargo.cms.export.bo.ImageBO">
	SELECT ULD_KEY as uldKey FROM EXP_RCL_HD WHERE RCL_NO = #rclNo# AND ppk_type = 'M'
        </select>
	<select id="getAWBImageRCLDesktopTransactionID" parameterClass="cargo.cms.export.bo.ImageBO" resultClass="java.lang.String">
	SELECT MAX(AWB_IMAGE_NAME) FROM AWB_IMAGE WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate#
	</select>
	<select id="getDesktopULDAWBDetails_Mobile" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.ImageBO">
	SELECT AWB_NO as awbNo,TO_CHAR(AWB_DATE,'DDMONYY') as awbDate,ULD_KEY as uldKey FROM EXP_RCL_HD WHERE RCL_NO = #PARAM#
	</select>


	<select id="getInternaleRCLScreenDetailsByRclNo" parameterClass="cargo.cms.export.bo.ERCLBulkHeaderBO" resultClass="cargo.cms.export.bo.ERCLBulkHeaderBO">
	  SELECT SCREENING_OPTION AS racfRadioOption,RACSF_CODE AS screenUnderRacsfCode,
	  SCREENING_METHOD AS screeningMethod,EXEMPTED_REASON AS exemptedReason,
	  REMARKS AS remarks,RA_TYPE AS rakcType,RACSF_TRK_NUMBER AS truckNo,DEDICATED_PERSON AS personInCab,
	  (SELECT TRANS_NAME  FROM IMAGE_STORE where TRANS_TYPE = 'ERCL' and TRANS_NO = EXP_PRE_RCL_HD.PRE_RCL_NO and rownum =1) as transactionId,
	   VKC_CODE as vkcCode,
		SEAL_NUM1 as sealNum1,
		SEAL_NUM2 as sealNum2,
		SEAL_NUM3 as sealNum3,
		SEAL_NUM4 as sealNum4,
		SEAL_NUM5 as sealNum5,
		SEAL_NUM6 as sealNum6,
		SEAL_NUM7 as sealNum7,
		SEAL_NUM8 as sealNum8,
		SEAL_NUM9 as sealNum9
	  FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRclNo#
	</select>

<select id="eRCL_truck_number" parameterClass="cargo.cms.export.bo.RCLSearchBO" resultClass="cargo.cms.afw.bo.MasterBO">
			SELECT RACSF_TRK_NUMBER AS codeId,RACSF_TRK_NUMBER AS codeDesc FROM EXP_PRE_RCL_HD where PRE_RCL_NO=#preRclNum# AND ROWNUM=1
   	</select>
	<update id="updateexporttallypcs" parameterClass="map" >
		UPDATE EXP_PMANIFEST_AWB SET TALLY_PCS = #pcsForTally#, LM_DATE = sysdate, LM_USER_ID = #userID#
		WHERE AWB_NO = #awbNo# AND AWB_DATE = #awbDate# AND FLT_KEY =#fltKey# AND FLT_DATE =#fltDate#
	</update>
	
	<select id="getPrintIndForTallyAutoPman" parameterClass="map" resultClass="java.lang.String">
		SELECT CASE WHEN ((TO_DATE(TO_CHAR(NVL(flt.EST_DATE,flt.SCH_DATE),'DDMONYY')||' '||trim(TO_CHAR(NVL(flt.EST_TIME,flt.SCH_TIME),'0000')),'DDMONYY HH24MI') - TO_DATE(TO_CHAR(SYSDATE, 'DDMONYY HH24MI'),'DDMONYY HH24MI'))*24*60)  &gt; #printIndVal# THEN 'Y' ELSE 'N' END
      	FROM FLT_OPR flt WHERE flt.FLT_KEY=#fltKey# AND flt.SCH_DATE=#fltDate# AND flt.FLT_TYPE='D'
	</select>
	<select id="getAWBLocnList" parameterClass="cargo.cms.export.bo.IssueRCLDetailBO" resultClass="cargo.cms.export.bo.IssueRCLBulkLocBO">
	SELECT TR_NO as trNo,PCS as locationPcs,GROSS_WT as grossWt,NET_WT as netWeight,TARE_WT as tareWt,LOC_CODE as locationCode,LSP_NO as lspNum,ULD_KEY as uldKey,PRE_RCL_NO FROM EXP_CARGO_RECEIVE_RECORD WHERE awb_no=#awbNum# and rcl_no is null
	</select>

	
   	<select id="premanifest_fbl_get_color_remark" parameterClass="cargo.cms.export.bo.PreManifestFBLDetailsBO" resultClass="cargo.cms.export.bo.PreManifestFBLDetailsBO"> 
   	    SELECT CASE WHEN lsr.ULD_KEY IS NOT NULL THEN '(ULD: '||lsr.ULD_KEY||') '||lsr.REMARKS ELSE lsr.REMARKS END as pmanRemarks
      	FROM EXP_AWB_LIGHT_SIGNAL_DTL ls, EXP_AWB_LIGHT_SIGNAL_RMK lsr, EXP_AWB_LIGHT_SIGNAL_HD lhd
  		WHERE lsr.SEQ_NO = ls.SEQ_NO AND ls.AWB_NO = #awbNo#
		AND ls.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') 
		<isNotEmpty property="unldgpt">
			AND ls.UNLDG_PT = #unldgpt#
		</isNotEmpty>
		AND ls.FLT_KEY = #fltKey# 
		AND to_char(ls.FLT_DATE,'DDMONYY') = to_date(#fltDate#,'DDMONYY')
		AND lhd.FLT_DATE = ls.FLT_DATE AND lhd.FLT_KEY = ls.FLT_KEY 
		<isNotEmpty property="unldgpt">
			AND lhd.UNLDG_PT = ls.UNLDG_PT
		</isNotEmpty>
  		ORDER BY lsr.SEQ_NO DESC
    </select>
    
    <select id="premanifest_fbl_get_color_symbol" parameterClass="java.util.HashMap" resultClass="java.lang.String"> 
   	    SELECT CASE WHEN COUNT(*)>0 THEN 'Y' ELSE 'N' END as lightSymbol FROM 
   	    (
	    	SELECT paf.AWB_NO FROM EXP_AWB_LIGHT_SIGNAL_DTL paf
	  		INNER JOIN EXP_AWB_LIGHT_SIGNAL_HD lhd ON lhd.FLT_KEY = paf.FLT_KEY 
	  		AND lhd.FLT_DATE = paf.FLT_DATE 
	  		AND lhd.UNLDG_PT = paf.UNLDG_PT
			WHERE paf.AWB_NO = #awbNo#
			AND paf.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY') 
			<isNotEmpty property="unldgpt">
				AND paf.UNLDG_PT = #unldgpt#
			</isNotEmpty>
			AND paf.FLT_KEY = #fltKey# 
			AND to_char(paf.FLT_DATE,'DDMONYY') = to_date(#fltDate#,'DDMONYY') AND UPPER(paf.LIGHT_SYMBOL) = 'Y'
			AND paf.light_signal = 'GREEN'
      		AND NOT EXISTS (SELECT NULL FROM EXP_PMANIFEST_AWB PMAN WHERE PMAN.FLT_KEY=paf.FLT_KEY AND PMAN.FLT_DATE=paf.FLT_DATE AND pman.unldg_pt = paf.unldg_pt
      		AND pman.awb_no = paf.awb_no AND PMAN.AWB_DATE = paf.AWB_DATE)
    	)	
    </select>
    
    <update id="update_flt_header_for_auto_pamn" parameterClass="cargo.cms.export.bo.PreManifestFBLDetailsBO">
		UPDATE FLT_OPR_EVENTS SET LIGHT_SIGNAL = #lightSystem#, AUTO_PMAN = #autoPman# , LM_DATE= sysdate, LM_USER_ID = #userID# , TR_TYPE = 'CFBL'
		WHERE flt_key = #fltKey# and sch_date = TO_DATE(#fltDate#, 'DDMONYY') and flt_type = 'D'
	</update>
  <select id="findFltConditionByEmbargoRules" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
	SELECT MSG as MESSAGE, ACT_TYPE as ACT_TYPE, SPL_CODE1 as SPL_CODE1, SPL_CODE2 as SPL_CODE2, SPL_CODE3 as SPL_CODE3,SPL_CODE4 as SPL_CODE4,SPL_CODE5 as SPL_CODE5,
	SPL_CODE6 as SPL_CODE6,SPL_CODE7 as SPL_CODE7,SPL_CODE8 as SPL_CODE8,SPL_CODE9 as SPL_CODE9,SPL_CODE10 as SPL_CODE10,ENDRSE_IND as ENDRSE_IND,mon_flg AS MON_FLG,tue_flg AS tue_flg,
	wed_flg AS wed_flg,thu_flg AS thu_flg,fri_flg AS fri_flg,sat_flg AS sat_flg,sun_flg AS sat_flg FROM MAST_OPT_MSG 
	WHERE SECTION='EMB BY FLT' AND suspend_ind != 'Y' AND FLT_KEY=#FLT_KEY# AND TO_dATE(#FLT_DATE#,'DDMONYY') BETWEEN TRUNC(EFF_DATE) AND TRUNC(eff_date_to)
	<isNotEmpty property="unldgPt">
	AND (((PORT1 IS NOT NULL AND PORT1 = #unldgPt#) 
	     OR (PORT2 IS NOT NULL AND PORT2 = #unldgPt#)
	     OR (PORT3 IS NOT NULL AND PORT3 = #unldgPt#)) OR 
	     (PORT1 IS NULL and PORT2 IS NULL and PORT3 IS NULL))
    </isNotEmpty>
	</select>
		<select id="findJOPcsforCAR" parameterClass="cargo.cms.export.bo.ExpCarBO" resultClass="java.lang.String">
    	SELECT SUM(PC) FROM EXP_SEC_CHK_JO WHERE AWB_NO=#awb# AND AWB_DATE=#awbDate# AND STATUS NOT IN ('VOID') AND JO_TYPE='SC'
    </select>
  
     
	
	<!-- Pharma SHC List Start -->
	
  <select id="getAWBListOnBuildUpULD" parameterClass="java.util.Map" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
	SELECT AWB.AWB_NO as awbNum,
	  AWB.AWB_DATE as awbDate,
	  AWB.ASSIGNED_PCS as pcs,
	  AWB.ASSIGNED_WT as wt,
	  AWB.UNLDG_PT as unldgPt,
	  SHC.SHC  as shc1,
	  SHC.SHC2 as shc2,
	  SHC.SHC3 as shc3,
	  SHC.SHC4 as shc4,
	  SHC.SHC5 as shc5,
	  SHC.SHC6 as shc6,
	  SHC.SHC7 as shc7,
	  SHC.SHC8 as shc8,
	  SHC.SHC9 as shc9
	FROM EXP_PMANIFEST_ULD_AWB AWB
	LEFT JOIN EXP_PMANIFEST_ULD_AWB_SHC SHC ON AWB.TR_NO    = SHC.TR_NO
	WHERE AWB.uld_bt_no = #ULD_KEY# and AWB.FLT_KEY = #FLT_KEY# and AWB.FLT_DATE = #FLT_DATE#
  </select>
  
	<select id="getPharmaSHCCombiListForCarrier" parameterClass="java.lang.String" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
			<![CDATA[				
				SELECT
		    	PHARMA_TYPE pharmaType,	HD.PRIORITY pharmaPriority,		    	
		    	SHC1 shc1, SHC2 shc2, SHC3 shc3, SHC4 shc4,
		    	SHC5 shc5, SHC6 shc6, SHC7 shc7, SHC8 shc8, SHC9 shc9
		    	FROM MAST_PHARMA_SHC_HD HD
	        	JOIN MAST_PHARMA_SHC_DTL DTL ON HD.TR_NO = DTL.TR_NO
		    	WHERE HD.CARR_CODE = #carrier# order by HD.PRIORITY	 	    	
			]]>
	</select>
	
	<select id="searchPharmaSHCList" parameterClass="cargo.cms.admin.bo.MaintainPharmaSHCBO"
		resultClass="cargo.cms.admin.bo.MaintainPharmaSHCBO">
		<![CDATA[
	    	SELECT
	    	HD.CARR_CODE carrCode, DTL.DOC_LINE_NO docLineNo,HD.TR_NO trNumber, PHARMA_TYPE pharmaType,
	    	HD.PRIORITY priority,
	    	SHC1 shc1, SHC2 shc2, SHC3 shc3, SHC4 shc4,
	    	SHC5 shc5, SHC6 shc6, SHC7 shc7, SHC8 shc8, SHC9 shc9
	    	FROM MAST_PHARMA_SHC_HD HD
        	JOIN MAST_PHARMA_SHC_DTL DTL ON HD.TR_NO = DTL.TR_NO
	    	WHERE HD.CARR_CODE = #carrCode# AND PHARMA_TYPE = #pharmaType#	    	
		]]>
	</select>
	
	<insert id="insertPharmaSHCHD" parameterClass="cargo.cms.admin.bo.MaintainPharmaSHCBO">
		<![CDATA[
	    	INSERT INTO MAST_PHARMA_SHC_HD (
	    		CARR_CODE, PHARMA_TYPE,TR_NO,
	    		PRIORITY,CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
	    	) VALUES (
	    		#carrCode#,#pharmaType#,#trNumber#,
	    		#priority#,	#userID#, SYSDATE, #userID#, SYSDATE
	    	)
		]]>
	</insert>
	
	<update id="updatePharmaSHCHD" parameterClass="cargo.cms.admin.bo.MaintainPharmaSHCBO">
		<![CDATA[
	    	UPDATE MAST_PHARMA_SHC_HD
	    	SET PRIORITY = #priority#,
    		LM_USER_ID = #userID#, LM_DATE = SYSDATE
	    	WHERE TR_NO = #trNumber# 
		]]>
	</update>
	
	<insert id="insertPharmaSHCDtls" parameterClass="cargo.cms.admin.bo.MaintainPharmaSHCBO">
		<![CDATA[
	    	INSERT INTO MAST_PHARMA_SHC_DTL (
	    		TR_NO, DOC_LINE_NO,
	    		SHC1, SHC2, SHC3,
	    		SHC4, SHC5, SHC6,
	    		SHC7, SHC8, SHC9,	    		
	    		CR_USER_ID, CR_DATE, LM_USER_ID, LM_DATE
	    	) VALUES (
	    		#trNumber#, (SELECT NVL(MAX(DOC_LINE_NO), 0) + 1 FROM MAST_PHARMA_SHC_DTL WHERE TR_NO= #trNumber#),
	    		#shc1#, #shc2#, #shc3#,
	    		#shc4#, #shc5#, #shc6#,
	    		#shc7#, #shc8#, #shc9#,	    	
	    		#userID#, SYSDATE, #userID#, SYSDATE
	    	)
		]]>
	</insert>
	
	<update id="updatePharmaSHCList" parameterClass="cargo.cms.admin.bo.MaintainPharmaSHCBO">
		<![CDATA[
	    	UPDATE MAST_PHARMA_SHC_DTL
	    	SET
    		SHC1 = #shc1#, SHC2 = #shc2#, SHC3 = #shc3#,
    		SHC4 = #shc4#, SHC5 = #shc5#, SHC6 = #shc6#,
    		SHC7 = #shc7#, SHC8 = #shc8#, SHC9 = #shc9#,    		
    		LM_USER_ID = #userID#, LM_DATE = SYSDATE
	    	WHERE TR_NO = #trNumber# AND DOC_LINE_NO = #docLineNo# 
		]]>
	</update>
	
	<delete id="deletePharmaSHCList" parameterClass="cargo.cms.admin.bo.MaintainPharmaSHCBO">
		<![CDATA[
	    	DELETE FROM MAST_PHARMA_SHC_DTL WHERE TR_NO = #trNumber# AND DOC_LINE_NO = #docLineNo#
		]]>
	</delete>
	
	<delete id="deletePharmaSHCHD" parameterClass="cargo.cms.admin.bo.MaintainPharmaSHCBO">
		<![CDATA[
	    	DELETE FROM MAST_PHARMA_SHC_HD WHERE CARR_CODE = #carrCode# AND PHARMA_TYPE = #pharmaType# AND TR_NO = #trNumber# AND NOT Exists (select null from MAST_PHARMA_SHC_DTL where TR_NO = #trNumber#) 
		]]>
	</delete>
	
	<!-- Pharma SHC List End -->

	<select id="getJobStartTime" parameterClass="java.lang.String" resultClass="java.lang.String">
    	SELECT TO_CHAR(SYSDATE,'DDMONYY HH24:MI') FROM DUAL
    </select>
<select id="checkValidRACSFCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">
	SELECT RACSF_CODE FROM MAST_RACSF_CONFIG WHERE RACSF_CODE=#racsfCode# AND ROWNUM=1
	</select>
	<select id="checkInactiveRACSFCode" parameterClass="java.util.HashMap" resultClass="java.lang.String">		
	SELECT RACSF_CODE FROM MAST_RACSF_CONFIG 
	WHERE CARR_CODE=#carrier# AND RACSF_CODE=#racsfCode# 
	AND NVL(ACTIVE_IND,'N')='N'
	AND PORT = #destination#
	AND PORT IS NOT NULL
	UNION
	SELECT RACSF_CODE FROM MAST_RACSF_CONFIG 
	WHERE CARR_CODE=#carrier# AND RACSF_CODE=#racsfCode#
	AND NVL(ACTIVE_IND,'N')='N'
	AND CTRY_CODE=(SELECT CTRY_CODE FROM MAST_CITY CITY WHERE CODE=#destination# AND ROWNUM=1) 
	AND NOT EXISTS (SELECT NULL FROM MAST_RACSF_CONFIG 
	WHERE CARR_CODE=#carrier# AND RACSF_CODE=#racsfCode# 
	AND PORT = #destination#
	AND PORT IS NOT NULL)
	AND CTRY_CODE IS NOT NULL
	</select>
	<select id="getglseRCLStatus" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT STATUS FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#PARAM#
	</select>
	
<select id="checkConfigAlertMsgforRACSF" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT ALERT_MSG FROM MAST_RACSF_CONFIG CONFG WHERE CONFG.ALERT_MSG is not null and  
		CONFG.RACSF_CODE=(SELECT RACSF_CODE FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#PARAM# AND ROWNUM=1)
		AND CONFG.CARR_CODE=(SELECT CARR_CODE FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#PARAM# AND ROWNUM=1)
		AND (CONFG.CTRY_CODE=((SELECT CTRY_CODE FROM MAST_CITY CITY WHERE CODE=(SELECT AWB_DEST FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#PARAM# AND ROWNUM=1) AND ROWNUM=1))
    OR CONFG.PORT = (SELECT AWB_DEST FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#PARAM# AND ROWNUM=1))
	</select>
	<update  id="updateManualPmanInd" parameterClass="java.util.HashMap">
   	UPDATE EXP_PMANIFEST_AWB SET MANUAL_PMAN_IND = 'Y' WHERE FLT_KEY=#EXP_FLT_KEY# AND FLT_DATE=#EXP_FLT_DATE# AND AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# AND UNLDG_PT=#LDG_PT#
   	</update>
	
	<update id="updateMacACASAwbInfo" parameterClass="cargo.cms.mac.bo.MacCarditBO">
		UPDATE ACAS_INFO_HD set ACAS_IND = 'Y',ACAS_CODE = 'X',LM_USER_ID = #userID#, LM_DATE = SYSDATE,TR_TYPE='ACAS' WHERE awb_no=#awbNo# 
      		and TRUNC(awb_date) = to_date(#awbDate#,'DDMONYY')
	</update>

   	<select id="findShipmentBelongsToCoolRoom" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		select COUNT(1) from AWB a
			join cust_airl_spl_code b on b.spl_type = 'SPL_COOL' AND b.CARR_CODE = a.CARR_CODE
      		join AWB_INVENTORY c on c.awb_no = a.awb_no and c.awb_date = c.awb_date			
     		WHERE b.SPL_CODE IN (a.Spl_Code1,a.Spl_Code2,a.Spl_Code3,a.Spl_Code4,a.Spl_Code5,a.Spl_Code6,a.Spl_Code7,a.Spl_Code8,a.Spl_Code9)
     		<isEqual compareValue="AWB" property="SHIP_TYPE">
				AND c.AWB_NO=#AWB_NO# AND c.AWB_DATE=#AWB_DATE#
			</isEqual>
			<isEqual compareValue="ULD" property="SHIP_TYPE">
				and C.ULD_KEY = #ULD_NO#
			</isEqual>
			<isEqual compareValue="CSD" property="SHIP_TYPE">
				and C.LSP_NO = #LSP_NO#
			</isEqual>
	</select>
	
<!--    	<select id="checkLocCodeInCoolRoom" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_WH_LOC loc,   MAST_WH_TYPE typ,   MAST_WH_GROUP grp
			LEFT OUTER JOIN MAST_WH_AREA area ON grp.wh_area     = area.wh_area
			WHERE loc.wh_group = grp.wh_group
			AND grp.wh_type    = typ.wh_type
			AND typ.wh_type    = 'CR'
			AND LOC.CODE       = #locCode#
	</select> -->
	
	
	<select id="checkLocCodeInCoolRoom" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
   			select COUNT(*) from MAST_SLA_MLSTN_CNFG where 
				( exists (
				  select null from MAST_WH_LOC t1, mast_wh_group t2
					where t1.wh_group = t2.WH_GROUP and t2.wh_group = MAST_SLA_MLSTN_CNFG.SLA_LOC_GRP_CODE and t1.code = #locCode#
				 )
				 OR exists (
				  select null from MAST_CODE_HD hd , MAST_CODE_dtl dtl
				  where HD.CODE = DTL.CODE_TYPE and hd.GROUP_CODE = '999' and
					 HD.CODE = MAST_SLA_MLSTN_CNFG.SLA_LOC_CODE and dtl.CODE  = #locCode#
				) ) and sla_id = #configID#
   </select>
   
	
<!-- 	<select id="checkCurrLocCodeInCoolRoom" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_WH_LOC loc,   MAST_WH_TYPE typ,   MAST_WH_GROUP grp
			LEFT OUTER JOIN MAST_WH_AREA area ON grp.wh_area     = area.wh_area
			WHERE loc.wh_group = grp.wh_group
			AND grp.wh_type    = typ.wh_type
			AND typ.wh_type    = 'CR'
			AND LOC.CODE = (select loc_code from uld_inventory where uld_key = #uldKey# and loc_code is not null)
	</select> -->
	
	<select id="checkCurrLocCodeInCoolRoom" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
   			SELECT count(*)
					FROM uld_inventory
					WHERE uld_key  = #uldKey#
					AND loc_code  IS NOT NULL
					AND (loc_code IN  (SELECT t1.code
					  FROM MAST_WH_LOC t1,
					    mast_wh_group t2
					  WHERE t1.wh_group = t2.WH_GROUP
					  AND t1.wh_group  IN
					    (SELECT NVL(SLA_LOC_GRP_CODE,'**')
					    FROM MAST_SLA_MLSTN_CNFG
					    WHERE sla_id = #configID#
					    )
					  ) 
					OR loc_code IN (SELECT dtl.CODE
					  FROM MAST_CODE_HD hd ,
					    MAST_CODE_dtl dtl
					  WHERE HD.CODE     = DTL.CODE_TYPE
					  AND hd.GROUP_CODE = '999'
					  AND HD.CODE      IN
					    (SELECT NVL(SLA_LOC_CODE,'**')
					    FROM MAST_SLA_MLSTN_CNFG
					    WHERE sla_id = #configID#
					    )
					  )
		    	)
   		</select>
   
	<select id="checkAllNonBUReachCoolRoom" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">		
		SELECT NVL(SUM(INV.LOCN_PCS),0)
			FROM AWB_INVENTORY inv
			LEFT JOIN uld_inventory uinv
			ON inv.uld_key                = uinv.uld_key
			WHERE nvl(inv.flt_type,'X') != 'E'
			AND uinv.HANDLING_MODE       IS NULL
			AND NVL(uinv.PPK_IND,'N')     = 'N'
			AND NVL(uinv.MIX_PPK_IND,'N') = 'N'
			AND AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#
			AND inv.loc_code not in
			  (SELECT t1.code
			  FROM MAST_WH_LOC t1,
			    mast_wh_group t2
			  WHERE t1.wh_group    = t2.WH_GROUP
			  AND t1.code          = inv.loc_code
			  AND t1.wh_group IN(SELECT SLA_LOC_GRP_CODE FROM MAST_SLA_MLSTN_CNFG WHERE sla_id = #configID#)
			)
			AND inv.loc_code not in
			  (SELECT NULL
			  FROM MAST_CODE_HD hd ,
			    MAST_CODE_dtl dtl
			  WHERE HD.CODE     = DTL.CODE_TYPE
			  AND hd.GROUP_CODE = '999'
			  AND dtl.CODE      = inv.loc_code
				  AND HD.CODE IN (SELECT SLA_LOC_CODE FROM MAST_SLA_MLSTN_CNFG WHERE sla_id = #configID#)
			  )			
	</select>		
	
	<select id="checkLocCodeInJUSTOUTSIDECoolRoom" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_CODE_DTL WHERE CODE_TYPE='JUST_OUTSIDE' AND CODE = #newLocCode#
	</select>
	
	<update  id="updateBulkRetrievalTimestamp" parameterClass="java.util.HashMap">
   		UPDATE AWB
		SET COOL_RM_RTV_TIME  = SYSDATE ,
		  lm_user_id          = NVL(#LM_USER_ID#,'SYSTEM') ,
		  lm_date             = SYSDATE
		WHERE AWB_NO          =#AWB_NO#
		AND AWB_DATE          =#AWB_DATE#
		AND COOL_RM_RTV_TIME IS NULL
   	</update>
   	
   	<update  id="updateDefaultRetrievalTimestamp" parameterClass="java.util.HashMap">
		UPDATE AWB
		SET COOL_RM_RTV_TIME  = '01JAN2020' ,
		  lm_user_id          = NVL(#LM_USER_ID#,'SYSTEM') ,
		  lm_date             = SYSDATE
		WHERE AWB_NO          = #AWB_NO#
		AND AWB_DATE          = #AWB_DATE#
   	</update>   
   	
   	<update  id="updateBlanktRetrievalTimestamp" parameterClass="java.util.HashMap">
		UPDATE AWB
		SET COOL_RM_RTV_TIME  = '' ,
		  lm_user_id          = NVL(#LM_USER_ID#,'SYSTEM') ,
		  lm_date             = SYSDATE
		WHERE AWB_NO          = #AWB_NO#
		AND AWB_DATE          = #AWB_DATE#
   	</update>   
   	
   	<update  id="updateBulkRetrievalTimestampBU" parameterClass="java.util.HashMap">
   		UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME = SYSDATE , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') 
		WHERE AWB_NO =#AWB_NO# AND AWB_DATE =#AWB_DATE# AND COOL_RM_RTV_TIME IS NULL
   	</update>
   	
   	<update  id="updateDefaultRetrievalTimestampBU" parameterClass="java.util.HashMap">	  
	  UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME = '01JAN2020' , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') WHERE AWB_NO =#AWB_NO# AND AWB_DATE =#AWB_DATE# 
   	</update>
   	
   	<update  id="updateBlanktRetrievalTimestampBU" parameterClass="java.util.HashMap">
        UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME = '' , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') WHERE AWB_NO =#AWB_NO# AND AWB_DATE =#AWB_DATE# AND ULD_BT_NO = #ULD_KEY#  	 	
   	</update>
   	
   <!-- 	
   	<update  id="updateBlanktRetrievalTimestamp" parameterClass="java.util.HashMap">
   		UPDATE AWB SET COOL_RM_RTV_TIME = '' , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') ,lm_date = SYSDATE WHERE  (AWB_NO,AWB_DATE) in 
		(WITH AWB_LIST AS (select distinct awb_no, awb_date,loc_code from AWB_INVENTORY where flt_key != 'E'  		
				and not exists (
					SELECT null 
						FROM ULD_INVENTORY
						WHERE (PPK_IND='Y' OR MIX_PPK_IND   ='Y' OR HANDLING_MODE='NBK' OR HANDLING_MODE ='PPK')
						AND ULD_KEY = AWB_INVENTORY.ULD_KEY
				  )	      
		      <isEqual compareValue="AWB" property="SHIP_TYPE">
		          AND AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#
		      </isEqual>
		      <isEqual compareValue="ULD" property="SHIP_TYPE">
		          and ULD_KEY = #ULD_NO#
		      </isEqual>
		      <isEqual compareValue="CSD" property="SHIP_TYPE">
		          and LSP_NO = #LSP_NO#
		      </isEqual>
		    )
		    select awb_no, to_char(awb_date,'DDMONYY') from AWB_LIST WHERE
		      not exists (
		        SELECT null FROM MAST_WH_LOC loc,MAST_WH_TYPE typ,   MAST_WH_GROUP grp
		        LEFT OUTER JOIN MAST_WH_AREA area ON grp.wh_area  = area.wh_area
		        WHERE loc.wh_group = grp.wh_group
		        AND grp.wh_type    = typ.wh_type
		        AND typ.wh_type    != 'CR'
		        AND LOC.CODE       = AWB_LIST.loc_code      
		      )
		)
   	</update> -->  	
   	
   	
   	
   	<update  id="updateULDRetrievalTimestamp" parameterClass="java.util.HashMap">
   		UPDATE ULD_INVENTORY SET COOL_RM_RTV_TIME = SYSDATE , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') ,lm_date = SYSDATE WHERE ULD_KEY = #ULD_NO#
   	</update>
   	
   	<update  id="updateULDDefaultRetrievalTimestamp" parameterClass="java.util.HashMap">
   		UPDATE ULD_INVENTORY SET COOL_RM_RTV_TIME =  '01JAN2020' , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') ,lm_date = SYSDATE WHERE ULD_KEY = #ULD_NO#   		
   	</update>
   	
   	 <update  id="updateULDBlanktRetrievalTimestamp" parameterClass="java.util.HashMap">
   	 	UPDATE ULD_INVENTORY SET COOL_RM_RTV_TIME =  '' , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') ,lm_date = SYSDATE WHERE ULD_KEY = #ULD_NO#   		
   	</update>
   	
   	
   	<update  id="updateULDRetrievalTimestampBU" parameterClass="java.util.HashMap">
   		UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME = SYSDATE , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') WHERE ULD_BT_NO = #ULD_NO# 
      and (FLT_KEY,FLT_DATE) IN (SELECT FLT_KEY,FLT_DATE FROM ULD_INVENTORY WHERE  ULD_BT_NO = #ULD_NO#  AND FLT_TYPE = 'E')
   	</update>
   	
   	<update  id="updateULDDefaultRetrievalTimestampBU" parameterClass="java.util.HashMap">
      UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME = '01JAN2020' , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') WHERE ULD_BT_NO = #ULD_NO# 
      and (FLT_KEY,FLT_DATE) IN (SELECT FLT_KEY,FLT_DATE FROM ULD_INVENTORY WHERE  ULD_BT_NO = #ULD_NO#  AND FLT_TYPE = 'E')      
   	</update>
   	
   	<update  id="updateULDBlanktRetrievalTimestampBU" parameterClass="java.util.HashMap">
       UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME = '' , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') WHERE ULD_BT_NO = #ULD_NO# 
       and (FLT_KEY,FLT_DATE) IN (SELECT FLT_KEY,FLT_DATE FROM ULD_INVENTORY WHERE  ULD_BT_NO = #ULD_NO#  AND FLT_TYPE = 'E')   	 	
   	</update>
   	
   	<select id="getUldDetailsForMhcsMileStone" parameterClass="java.lang.String"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">		
				SELECT INV.IMP_FLT_KEY impFlightKey,
					TO_CHAR(INV.IMP_FLT_DATE,'DDMONYY') impFlightDate,
					inv.uld_key uldKey,
					(SELECT STRAGG(STRINGDELIM(SHC, ',')) AS SHCS
					FROM (SELECT DISTINCT SHC, FLT_KEY,  ULD_KEY, FLT_DATE, PRIORITY FROM V_IMP_FLT_ULD_SHC WHERE tag = 'FFM' ORDER BY PRIORITY DESC )
					WHERE ULD_KEY = dtl.ULD_KEY  AND FLT_KEY   = dtl.FLT_KEY  AND FLT_DATE  = dtl.flt_date  ) shc,
					INV.LOC_CODE as locCode,					
		            OPR.CGO_ACFT_TYPE airCrftType,
		            NVL(INV.HANDLING_MODE,'LOOSE') shipType,
					opr.CARR_code flightCarr 
					FROM ULD_INVENTORY inv
					left JOIN IMP_RAMP_CHK_DTL dtl ON inv.ULD_KEY    = dtl.ULD_KEY AND inv.IMP_FLT_KEY   =dtl.flt_key AND inv.IMP_FLT_DATE  =dtl.flt_date
					left join flt_opr opr on dtl.flt_key = opr.flt_key and opr.SCH_DATE = dtl.flt_date	and opr.FLT_TYPE = 'A' 
					WHERE INV.ULD_KEY = #uldKey#
	</select>	
	
	<select id="getUldDetailsForStrgMileStone" parameterClass="java.lang.String"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">		
				SELECT INV.FLT_KEY fltKey,
					TO_CHAR(INV.FLT_DATE,'DDMONYY') fltDate,
          			inv.flt_type as fltType,
					inv.uld_key uldKey,
					(SELECT STRAGG(STRINGDELIM(SHC, ',')) AS SHCS
					FROM (SELECT DISTINCT SHC, FLT_KEY,  ULD_KEY, FLT_DATE, PRIORITY FROM V_IMP_FLT_ULD_SHC WHERE tag = 'INV' ORDER BY PRIORITY DESC )
					WHERE ULD_KEY = inv.ULD_KEY ) shc,
					INV.LOC_CODE as locCode,					
		            OPR.CGO_ACFT_TYPE airCrftType,
		            NVL(INV.HANDLING_MODE,'LOOSE') shipType,
					opr.CARR_code flightCarr 
					FROM ULD_INVENTORY inv
					left join flt_opr opr on dtl.flt_key = opr.flt_key and opr.SCH_DATE = dtl.flt_date	and opr.FLT_TYPE = 'D' 
					WHERE INV.ULD_KEY = #uldKey#
	</select>	
	
	<select id="checkLocCodeInConfigMHS" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM MAST_WH_LOC,   MAST_WH_GROUP WHERE MAST_WH_LOC.WH_GROUP = MAST_WH_GROUP.WH_GROUP
			AND MAST_WH_GROUP.WH_TYPE  = 'MHS' AND MAST_WH_LOC.CODE = #locCode#
	</select>
	
	<update  id="updateMHCSDedLocTimestamp" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
   		UPDATE IMP_RAMP_CHK_DTL SET MHS_DED_LOC_TIME =  SYSDATE , lm_date = SYSDATE , TR_TYPE = 'BKDNC' WHERE ULD_KEY = #uldKey#   
   			and flt_key = #impFlightKey# and flt_date = to_date(#impFlightDate#,'DDMONYY') and MHS_DED_LOC_TIME is null		
   	</update>	
	
	<parameterMap id="mileStoneParam" class="map" >
		<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="mileStone" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="level" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
		<parameter property="carrier" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/> 
		<parameter property="shipType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="arcfType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="shc" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  		
	</parameterMap>

	<procedure id="checkLocCodeReachDedLocation" parameterMap="mileStoneParam" >
			{? = call PKG_SLA_IMPRT_REPT.GET_PRIORITY_MILESTN_CONFIG(?,?,?,?,?,?)}
	</procedure>
	
	
	<parameterMap id="mileStoneParamStrg" class="map" >
		<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="mileStone" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="level" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
		<parameter property="carrier" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/> 
		<parameter property="shipType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="arcfType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="shc" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
	</parameterMap>

	<procedure id="checkLocCodeReachDedStrgLocation" parameterMap="mileStoneParamStrg" >
			{? = call PKG_SLA_IMPRT_REPT.GET_PRIORITY_MILESTN_CONFIG(?,?,?,?,?,?)}
	</procedure>

   	
	<select id="getAwbPendingToCoolRoom" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">	
				select awb_no as awbNo , 
				CONCAT(CONCAT(SUBSTR(AWB_NO, 0, 3), '-'), SUBSTR(AWB_NO, 4)) as awbNumDisp,
				SUM(locn_pcs) as pcs from AWB_INVENTORY 
						where 1 = 1
					  <isNotEmpty property="AWB_NO">
						AND AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#
					  </isNotEmpty>
					  <isNotEmpty property="ULD_NO">
						and nvl(ULD_KEY,'**') != #ULD_NO#
					  </isNotEmpty>
					  <isNotEmpty property="LSP_NO">
						 and nvl(LSP_NO,'**') != #LSP_NO#
					  </isNotEmpty>
						AND NOT EXISTS
						  (SELECT NULL
						  FROM ULD_INVENTORY
						  WHERE (PPK_IND   ='Y'
						  OR MIX_PPK_IND   ='Y'
						  OR HANDLING_MODE ='NBK'
						  OR HANDLING_MODE ='PPK')
						  AND ULD_KEY      = AWB_INVENTORY.ULD_KEY
						  )
						AND  AWB_INVENTORY.loc_code not in 
						  (SELECT t1.code
						  FROM MAST_WH_LOC t1,
						  mast_wh_group t2
						  WHERE t1.wh_group    = t2.WH_GROUP
						  AND t1.wh_group IN (SELECT NVL(SLA_LOC_GRP_CODE,'**') FROM MAST_SLA_MLSTN_CNFG WHERE sla_id = #configID#)
						 )
						AND AWB_INVENTORY.loc_code not in 
						(SELECT dtl.CODE FROM MAST_CODE_HD hd ,    MAST_CODE_dtl dtl  WHERE HD.CODE     = DTL.CODE_TYPE
						      AND hd.GROUP_CODE = '999' AND HD.CODE IN (SELECT NVL(SLA_LOC_CODE,'**') FROM MAST_SLA_MLSTN_CNFG WHERE sla_id = #configID#)
						) 
						GROUP BY awb_no, awb_date
 	 	</select>
  
	<update  id="updateULDRetrivalTimeStampForBU" parameterClass="java.util.HashMap">
   		UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME =  (select NVL(COOL_RM_RTV_TIME,'01JAN2020') from uld_inventory where uld_key = #ULD_NO# AND loc_code is not null) WHERE ULD_BT_NO = #ULD_NO#  and flt_key = #FLT_KEY# and flt_date = #FLT_DATE# 		
   	</update>	
   	
   	<update  id="updateULDRetrivalTimeStampForCheckOut" parameterClass="java.util.HashMap">
   		UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME =  '' , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') ,lm_date = SYSDATE  WHERE ULD_BT_NO = #ULD_NO#  and flt_key = #FLT_KEY# and flt_date = #FLT_DATE# 		
   	</update>
   	   	
   	<update  id="updateBulkRetrivalTimeStampForBU" parameterClass="java.util.HashMap">
   		UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME = (select NVL(COOL_RM_RTV_TIME,'01JAN2020') from AWB where AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#) WHERE ULD_BT_NO = #ULD_NO#  and flt_key = #FLT_KEY# and flt_date = #FLT_DATE# and AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#	
   	</update>	
   	   		
   	<update  id="updateBulkRetrivalTimeStampForBU_CB" parameterClass="java.util.HashMap">
   		UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME = (select NVL(COOL_RM_RTV_TIME,SYSDATE) from AWB where AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#) WHERE ULD_BT_NO = #ULD_NO#  and flt_key = #FLT_KEY# and flt_date = #FLT_DATE# and AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#	
   	</update>  
   	  
   	   		
   	<update  id="resetShipmentRetrivalTimeStampForBU" parameterClass="java.util.HashMap">
   		UPDATE AWB SET COOL_RM_RTV_TIME = '' , lm_user_id = NVL(#LM_USER_ID#,'SYSTEM') ,lm_date = SYSDATE WHERE AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#
   	</update>  	
   	
   	<select id="checkAnyBulkShipmentOutsideCoolRoom" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
		WITH AWB_LIST AS (select distinct awb_no, awb_date,loc_code from AWB_INVENTORY where nvl(flt_type,'X') != 'E' AND AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#		
				and not exists ( SELECT null FROM ULD_INVENTORY WHERE ULD_KEY = AWB_INVENTORY.ULD_KEY  
				AND handling_mode IN ('NBK','PPK') AND (NVL(mix_ppk_ind,'N') = 'Y'  OR NVL(ppk_ind,'N') = 'Y')
    			)			          		     
		    )
		    select count(1) from AWB_LIST WHERE 1 = 1 
		      AND  AWB_LIST.loc_code not in (SELECT t1.code  FROM MAST_WH_LOC t1, mast_wh_group t2
						  WHERE t1.wh_group    = t2.WH_GROUP AND t1.wh_group IN (SELECT NVL(SLA_LOC_GRP_CODE,'**') FROM MAST_SLA_MLSTN_CNFG WHERE sla_id = #configID#))
			  AND AWB_LIST.loc_code not in (SELECT dtl.CODE FROM MAST_CODE_HD hd ,    MAST_CODE_dtl dtl  WHERE HD.CODE     = DTL.CODE_TYPE
						      AND hd.GROUP_CODE = '999' AND HD.CODE IN (SELECT NVL(SLA_LOC_CODE,'**') FROM MAST_SLA_MLSTN_CNFG WHERE sla_id = #configID#) ) 		
	</select>	
   	   	
   	<update  id="updateRetrivalTimeStampUponDeleteBU" parameterClass="java.util.HashMap">
   	<![CDATA[
   		UPDATE AWB SET 
    	COOL_RM_RTV_TIME = 
   		CASE when COOL_RM_RTV_TIME is null OR (COOL_RM_RTV_TIME is not null AND COOL_RM_RTV_TIME < (select COOL_RM_RTV_TIME from EXP_PMANIFEST_ULD_AWB where  AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# and ULD_BT_NO = #ULD_NO#  and flt_key = #FLT_KEY# and flt_date = #FLT_DATE# and COOL_RM_RTV_TIME is not null )) then
   		(select COOL_RM_RTV_TIME from EXP_PMANIFEST_ULD_AWB where  AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# and ULD_BT_NO = #ULD_NO#  and flt_key = #FLT_KEY# and flt_date = #FLT_DATE#  and COOL_RM_RTV_TIME is not null )
   		ELSE
   		 COOL_RM_RTV_TIME
   		end
   		WHERE  AWB_NO =#AWB_NO# AND AWB_DATE=#AWB_DATE#	
   	 ]]>
   	</update>	
   	
   	
   	<select id="getAwbListBackUPBeforeOffload" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
		SELECT AWB_NO as awbNo, to_char(AWB_DATE,'DDMONYY') as awbDate, ULD_BT_NO as uldKey, to_char(COOL_RM_RTV_TIME,'DDMONYYHH24MI') as buRetvtimeStamp 
		FROM EXP_PMANIFEST_ULD_AWB WHERE FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#,'DDMONYY') AND ULD_BT_NO = #ULD_NO#		
	</select>	
	
	<update  id="updateRetrivalTimeStampOnBU" parameterClass="java.util.HashMap">
   		UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME = to_date(#RTV_TIME_STAMP#,'DDMONYYHH24MI') WHERE ULD_BT_NO = #ULD_NO# and flt_key = #FLT_KEY# and flt_date = #FLT_DATE# and AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#	
   	</update>	
   	
   	<update  id="updateRetrivalTimeStampOnOffload" parameterClass="java.util.HashMap">
   		UPDATE EXP_OFFLOAD_ULD_AWB SET COOL_RM_RTV_TIME = to_date(#RTV_TIME_STAMP#,'DDMONYYHH24MI') WHERE ULD_BT_NO = #ULD_NO_OFLD# and flt_key = #FLT_KEY# and flt_date = #FLT_DATE# and AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#	
   	</update>	
   	
   	<update  id="updateRetrivalTimeStampOffloadedShip" parameterClass="java.util.HashMap">
   	<![CDATA[
   		UPDATE AWB SET 
    	COOL_RM_RTV_TIME = 
   		CASE when COOL_RM_RTV_TIME is null OR (COOL_RM_RTV_TIME is not null AND COOL_RM_RTV_TIME < (select COOL_RM_RTV_TIME from EXP_PMANIFEST_ULD_AWB where  AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# and ULD_BT_NO = #ULD_NO_OFLD# and flt_key = #FLT_KEY# and flt_date = #FLT_DATE# and COOL_RM_RTV_TIME is not null )) then
   		(select COOL_RM_RTV_TIME from EXP_OFFLOAD_ULD_AWB where  AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE# and ULD_BT_NO = #ULD_NO_OFLD#  and flt_key = #FLT_KEY# and flt_date = #FLT_DATE#  and COOL_RM_RTV_TIME is not null ) 
                ELSE
   		 COOL_RM_RTV_TIME
   		end
   		WHERE AWB_NO =#AWB_NO# AND AWB_DATE=#AWB_DATE#
   	 ]]>   		
   	</update>	
   	
   	<update  id="updateBURetrivalTimeOnRelocateToCR" parameterClass="java.util.HashMap">
   		UPDATE EXP_PMANIFEST_ULD_AWB set COOL_RM_RTV_TIME = ''  WHERE  (FLT_KEY,FLT_DATE ,ULD_BT_NO) IN
			(SELECT FLT_KEY , FLT_DATE , ULD_KEY
					FROM ULD_INVENTORY
					WHERE (PPK_IND='Y' OR MIX_PPK_IND ='Y' OR HANDLING_MODE='NBK' OR HANDLING_MODE ='PPK') and flt_key = 'E'
					AND ULD_KEY = #ULD_NO#
			)	
   	</update>	
   	
   	<update  id="updateBURetrivalTimeOnRelocateFromCR" parameterClass="java.util.HashMap">
   		UPDATE EXP_PMANIFEST_ULD_AWB set COOL_RM_RTV_TIME = SYSDATE  WHERE  (FLT_KEY,FLT_DATE ,ULD_BT_NO) IN
			(SELECT FLT_KEY , FLT_DATE , ULD_KEY
					FROM ULD_INVENTORY
					WHERE (PPK_IND='Y' OR MIX_PPK_IND ='Y' OR HANDLING_MODE='NBK' OR HANDLING_MODE ='PPK') and flt_key = 'E'
					AND ULD_KEY = #ULD_NO#
			)		
   	</update>	
   	
   	<select id="getAwbListOffloadULD" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
		SELECT AWB_NO as awbNo, to_char(AWB_DATE,'DDMONYY') as awbDate, ULD_BT_NO as uldKey, to_char(COOL_RM_RTV_TIME,'DDMONYYHH24MI') as buRetvtimeStamp FROM EXP_OFFLOAD_ULD_AWB
		 WHERE FLT_KEY = #FLT_KEY# AND FLT_DATE = TO_DATE(#FLT_DATE#,'DDMONYY') AND ULD_BT_NO = #ULD_NO#		
	</select>	
	
   	<update  id="updateRetrivalTimeStampUponDelOffload" parameterClass="java.util.HashMap">
   		UPDATE EXP_PMANIFEST_ULD_AWB SET COOL_RM_RTV_TIME = #RTV_TIME_STAMP# WHERE ULD_BT_NO = #ULD_NO# and flt_key = #FLT_KEY# and flt_date = #FLT_DATE# and AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#	
   	</update>	
   	
   	<select id="getULDCurrentLocCode"  parameterClass="java.lang.String" resultClass="java.lang.String">
		select loc_code from  uld_inventory where  uld_key = #uldKey#
	</select>
	
	<select id="getLSPCurrentLocCode"  parameterClass="java.lang.String" resultClass="java.lang.String">
		select loc_code from lsp_inventory where  lsp_no = #binNo#
	</select>
	
	<select id="getRetrivalStatusOfShipment" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">	
				WITH AWB_LIST AS (select distinct a.awb_no, a.awb_date,B.FLT_KEY,b.FLT_DATE 
					from AWB_INVENTORY A , EXP_PMANIFEST_AWB B where A.flt_key != 'E'
							AND a.AWB_NO = b.awb_no and a.awb_date = b.awb_date 
						  <isEqual compareValue="AWB" property="SHIP_TYPE">
		          				AND a.AWB_NO=#AWB_NO# AND a.AWB_DATE=#AWB_DATE#
		      			  </isEqual>	
					      <isEqual compareValue="ULD" property="SHIP_TYPE">
					          and a.ULD_KEY = #ULD_NO#
					      </isEqual>
					      <isEqual compareValue="CSD" property="SHIP_TYPE">
					          and a.LSP_NO = #LSP_NO#
					      </isEqual>
			     )
				select awb_no as awbNo from AWB_LIST where ( NVL((Select PKG_SLA_EXPORT_REPT.GET_RTV_MILESTONE_STATUS(FLT_KEY,FLT_DATE,awb_no,awb_date,'') FROM DUAL ),'XXXX') = 'INPRG')
	  </select>
  
  	  <select id="getRetrivalStatusOfULDXXXX" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">	
				WITH ULD_LIST AS (select distinct a.awb_no, a.awb_date,B.FLT_KEY,b.FLT_DATE,a.uld_key from AWB_INVENTORY A , EXP_PMANIFEST_AWB B where A.flt_key != 'E'
						  AND a.AWB_NO = b.awb_no and a.awb_date = b.awb_date
					      <isEqual compareValue="ULD" property="SHIP_TYPE">
					          and a.ULD_KEY = #ULD_NO#
					      </isEqual>
			     )
				select uld_key as uldKey from ULD_LIST where ( NVL((Select PKG_SLA_EXPORT_REPT.GET_RTV_MILESTONE_STATUS(FLT_KEY,FLT_DATE,awb_no,awb_date,ULD_KEY) FROM DUAL ),'XXXX') = 'INPRG')
	  </select>
	  
	  <select id="validatePpkOrNoBrkULD" parameterClass="java.lang.String" resultClass="java.lang.Integer">		
		SELECT COUNT(*)  FROM ULD_INVENTORY strg, IMP_ULD_LIST uld
		WHERE STRG.ULD_KEY = ULD.ULD_KEY  AND STRG.IMP_FLT_KEY = ULD.FLT_KEY AND STRG.IMP_FLT_DATE = ULD.FLT_DATE AND ULD.HANDLING_MODE IN ('PPK','NBK')
		AND STRG.ULD_KEY      =#uldNo#
	 </select>
	
	
        <select id="isExportEIC" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		select count(1) from uld_inventory where base_pal_flg='Y' and flt_type='E' and eic_flg='Y' and eic_type='EIC' and uld_key= #ULD_KEY#
	</select>
	
	<update id="sqldeleteTopPallets" parameterClass="cargo.cms.uld.bo.ULDEICBO">
		UPDATE ULD_INVENTORY SET BASE_PLT='' WHERE BASE_PLT  = #uldKey#
	</update>
	<select id="HouseMnfstCustomsSubmissiongls" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
	           SELECT COUNT(1) FROM (SELECT T1.CC_CODE FROM V_CST_IMP_CC_CODE_AWB_ALL T1,MAST_CONSTRAINT_CODE T2 
                WHERE T1.CC_CODE = T2.CODE AND AWB_NO = #awbNo# AND AWB_DATE=#awbDate# AND NVL(HAWB_NO, '000000000000000000') = '000000000000000000'
                ORDER BY recv_date DESC, priority DESC) where CC_CODE != 'ND' and rownum = 1
    </select>
	<update id="sqlOnsiteEmpty" parameterClass="java.util.Map">
		UPDATE uld_inventory
		SET eic_flg   ='N',
		  base_pal_flg='N',
		  eic_unldg_pt='',
		  contr_code  ='',
		  eic_type    ='',
		  uld_flow    ='',
		  final_weight='N',
		  lm_date     =sysdate,
		  lm_user_id  =#usrId#
		WHERE uld_key = #uldKey#
	</update>
	
	
<select id="findSHCAndFlightForRetrivalMileStone" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
				     select distinct uldKey, flightKey , flightDate,
			        		OPR.CGO_ACFT_TYPE airCrftType,
							FUN_GET_ULD_PKG_TYPE(uldKey) shipType,
							nvl(opr.CARR_code,uld_carr) flightCarr,
			                (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = uldKey ) shc
									from 
									(
									 WITH INV_LIST AS (select distinct awb_no as awbNum, to_char(awb_date,'DDMONYY') as awbDate , uld_key as uldKey
			                          from AWB_INVENTORY c where 1 = 1                          
					                      <isEqual compareValue="ULD" property="SHIP_TYPE">
					                        and C.ULD_KEY = #ULD_NO#
					                      </isEqual>
					               )
				              select awbNum, awbDate, pman.flt_key as flightKey, to_char(pman.flt_date,'DDMONYY') as flightDate, inv.uldKey from INV_LIST inv
					          left join (
					          	SELECT awb.* FROM EXP_PMANIFEST_AWB awb
									left join AWB_INVENTORY_CHKOUT chk on chk.awb_no = awb.awb_no and chk.awb_date = awb.awb_date 
									where (chk.flt_key is null OR awb.flt_key &lt;&gt; chk.flt_key)
					          ) pman on pman.awb_no = inv.awbNum and pman.awb_date = inv.awbDate 
				           ) dtl
					left join flt_opr opr on dtl.flightKey = opr.flt_key and opr.SCH_DATE = dtl.flightDate	and opr.FLT_TYPE = 'D' 
			        join ULD_INVENTORY uinv on uinv.uld_Key = dtl.uldKey
	</select>
	
	
	<select id="findShipmentsForRetrivalMileStone" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
					select  awbNum, CONCAT(CONCAT(SUBSTR(awbNum, 0, 3), '-'), SUBSTR(awbNum, 4)) as awbNumDisp, 
					awbDate, flightKey , flightDate, awb.COOL_RM_RTV_TIME as coolRoomTrvTime,
					(CASE WHEN (instr(config.SHC,awb.SPL_CODE1) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE2) &gt; 0 
		                OR instr(config.SHC,awb.SPL_CODE3) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE4) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE5) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE6) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE7) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE8) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE9) &gt; 0) then 'Y' else 'N' end) as coldBoxInd,
					decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '',','))
							               || decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '',','))
							               || decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '',','))
							               || decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '',','))
							               || decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '',','))
							               || decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '',','))
							               || decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '',','))
							               || decode(spl_code8, null, '', spl_code8 || decode(spl_code9, null, '',',')) 
							               || decode(spl_code9, null, '', spl_code9 ) shc,
					          OPR.CGO_ACFT_TYPE airCrftType,
							  'BULK' shipType,
							  nvl(opr.CARR_code,awb.carr_code) flightCarr 
						from 
						(
							 WITH INV_LIST AS (select distinct awb_no as awbNum, to_char(awb_date,'DDMONYY') as awbDate from AWB_INVENTORY c where 1 = 1
		                      <isEqual compareValue="AWB" property="SHIP_TYPE">
		                        AND c.AWB_NO=#AWB_NO# AND c.AWB_DATE=#AWB_DATE#
		                      </isEqual>
		                      <isEqual compareValue="ULD" property="SHIP_TYPE">
		                        and C.ULD_KEY = #ULD_NO#
		                      </isEqual>
		                      <isEqual compareValue="CSD" property="SHIP_TYPE">
		                        and C.LSP_NO = #LSP_NO#
		                      </isEqual>
		               )
		                select awbNum, awbDate, pman.flt_key as flightKey, to_char(pman.flt_date,'DDMONYY') as flightDate
		                from INV_LIST inv
		                left join (
					          	SELECT awb.* FROM EXP_PMANIFEST_AWB awb
									left join AWB_INVENTORY_CHKOUT chk on chk.awb_no = awb.awb_no and chk.awb_date = awb.awb_date 
									where (chk.flt_key is null OR awb.flt_key &lt;&gt; chk.flt_key)
					       ) pman on pman.awb_no = inv.awbNum and pman.awb_date = inv.awbDate	              
				) dtl
				left join flt_opr opr on dtl.flightKey = opr.flt_key and opr.SCH_DATE = dtl.flightDate	and opr.FLT_TYPE = 'D' 
				join awb awb on awb.awb_no = dtl.awbNum and awb.awb_DATE = dtl.awbDate
				left join (SELECT STRAGG(STRINGDELIM(SHC,',')) SHC from MAST_SHC_TEMP) config on 1 = 1
	</select>	
	

	<select id="findShipmentsForRetrivalMileStoneBU" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
					select  awbNum, CONCAT(CONCAT(SUBSTR(awbNum, 0, 3), '-'), SUBSTR(awbNum, 4)) as awbNumDisp, 
					awbDate, flightKey , flightDate, awb.COOL_RM_RTV_TIME as coolRoomTrvTime,
					(CASE WHEN (instr(config.SHC,awb.SPL_CODE1) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE2) &gt; 0 
		                OR instr(config.SHC,awb.SPL_CODE3) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE4) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE5) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE6) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE7) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE8) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE9) &gt; 0) then 'Y' else 'N' end) as coldBoxInd,
					decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '',','))
							               || decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '',','))
							               || decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '',','))
							               || decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '',','))
							               || decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '',','))
							               || decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '',','))
							               || decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '',','))
							               || decode(spl_code8, null, '', spl_code8 || decode(spl_code9, null, '',',')) 
							               || decode(spl_code9, null, '', spl_code9 ) shc,
					          OPR.CGO_ACFT_TYPE airCrftType,
							  'BULK' shipType,
							  nvl(opr.CARR_code,awb.carr_code) flightCarr 
						from 
						(   WITH INV_LIST AS (select distinct awb_no as awbNum, to_char(awb_date,'DDMONYY') as awbDate,flt_key,to_char(flt_date,'DDMONYY')  flt_date  from AWB_INVENTORY c where 
		                    c.AWB_NO=#AWB_NO# AND c.AWB_DATE=#AWB_DATE# and C.ULD_KEY = #ULD_NO#)
	                		select awbNum, awbDate, pman.flt_key as flightKey, to_char(pman.flt_date,'DDMONYY') as flightDate from INV_LIST inv
	                		join EXP_PMANIFEST_AWB pman on pman.awb_no = inv.awbNum and pman.awb_date = inv.awbDate and pman.flt_key = inv.flt_key and pman.flt_date = inv.flt_date
						) dtl
						left join flt_opr opr on dtl.flightKey = opr.flt_key and opr.SCH_DATE = dtl.flightDate	and opr.FLT_TYPE = 'D' 
						join awb awb on awb.awb_no = dtl.awbNum and awb.awb_DATE = dtl.awbDate
						left join (SELECT STRAGG(STRINGDELIM(SHC,',')) SHC from MAST_SHC_TEMP) config on 1 = 1
	</select>
	
	<parameterMap id="mileStoneParamRetrivalMap" class="map" >
	<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	<parameter property="mileStone" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	<parameter property="level" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
	<parameter property="carrier" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/> 
	<parameter property="shipType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	<parameter property="arcfType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	<parameter property="shc" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  		
	</parameterMap>

	<procedure id="mileStoneRetrivalConfigValue" parameterMap="mileStoneParamRetrivalMap" >
			{? = call PKG_SLA_EXPORT_REPT.GET_RTV_MILESTN_CONFIG(?,?,?,?,?,?)}
	</procedure>
	
	
	<parameterMap id="statusMap" class="map" >
	<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	<parameter property="mileStone" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
	<parameter property="fltDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/> 
	<parameter property="uldKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	<parameter property="slaId" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>

	<procedure id="getRetrivalStatusOfULD" parameterMap="statusMap" >
			{? = call PKG_SLA_EXPORT_REPT.GET_RTV_MILESTONE_STATUS_ULD(?,?,?,?,?)}
	</procedure>
	
	
	<parameterMap id="statusAWBMap" class="map" >
	<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	<parameter property="mileStone" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	<parameter property="fltKey" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
	<parameter property="fltDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/> 
	<parameter property="awbNo" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	<parameter property="awbDate" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	<parameter property="slaId" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	</parameterMap>

	<procedure id="getRetrivalStatusOfAWB" parameterMap="statusAWBMap" >
			{? = call PKG_SLA_EXPORT_REPT.GET_RTV_MILESTONE_STATUS_AWB(?,?,?,?,?,?)}
	</procedure>
	
				
	<select id="findShipmentsForStorageMileStone" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
		select  awbNum, awbDate, flightKey , flightDate, 
					(CASE WHEN (instr(config.SHC,awb.SPL_CODE1) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE2) &gt; 0 
		                OR instr(config.SHC,awb.SPL_CODE3) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE4) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE5) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE6) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE7) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE8) &gt; 0
		                OR instr(config.SHC,awb.SPL_CODE9) &gt; 0) then 'Y' else 'N' end) as coldBoxInd,
					decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '',','))
							               || decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '',','))
							               || decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '',','))
							               || decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '',','))
							               || decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '',','))
							               || decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '',','))
							               || decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '',','))
							               || decode(spl_code8, null, '', spl_code8 || decode(spl_code9, null, '',',')) 
							               || decode(spl_code9, null, '', spl_code9 ) shc,
					          OPR.CGO_ACFT_TYPE airCrftType,
							  'LOOSE' shipType,
							  opr.CARR_code flightCarr 
					from 
					(select distinct a.awb_no as awbNum, to_char(a.awb_date,'DDMONYY') as awbDate , c.flt_key as flightKey, to_char(c.flt_date,'DDMONYY') as flightDate from AWB_INVENTORY a			
								join imp_car_shp c on c.awb_no = a.awb_no and c.awb_date = c.awb_date and c.flt_key = a.flt_key AND c.flt_date= a.flt_date
					      WHERE 1 = 1
						     	<isNotEmpty property="AWB_NO">
										AND a.AWB_NO=#AWB_NO# AND a.AWB_DATE=#AWB_DATE#
								</isNotEmpty>
						        <isNotEmpty property="ULD_NO">
										and a.ULD_KEY = #ULD_NO#
									</isNotEmpty>
						      	<isNotEmpty property="LSP_NO">
										and a.LSP_NO = #LSP_NO#
									</isNotEmpty>
						     	<isNotEmpty property="IMP_FLT_KEY">
										AND a.flt_key = #IMP_FLT_KEY# AND a.flt_date=#IMP_FLT_DATE#
								</isNotEmpty> 
					) dtl
					join flt_opr opr on dtl.flightKey = opr.flt_key and opr.SCH_DATE = dtl.flightDate	and opr.FLT_TYPE = 'A' 
					join awb awb on awb.awb_no = dtl.awbNum and awb.awb_DATE = dtl.awbDate
					left join (SELECT STRAGG(STRINGDELIM(SHC,',')) SHC from MAST_SHC_TEMP) config on 1 = 1
    
	</select>
	
	<parameterMap id="mileStoneParamStrgBulk" class="map" >
		<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="mileStone" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="level" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
		<parameter property="carrier" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/> 
		<parameter property="shipType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="arcfType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="shc" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  		
	</parameterMap>

	<procedure id="checkStorageConfigExists" parameterMap="mileStoneParamStrgBulk" >
			{? = call PKG_SLA_IMPRT_REPT.GET_PRIORITY_MILESTN_CONFIG(?,?,?,?,?,?)}
	</procedure>
	
	<select id="checkStorageDedLocationTimeFreeze" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="java.lang.String">
		<![CDATA[
			select CARSHP.STRG_DED_LOC_TIME from IMP_CAR_SHP carshp
			LEFT JOIN (select nvl(sum(actual_pcs),0) tt_pcs ,  nvl(sum (actual_Wt),0) tt_wt, flt_key, flt_date, awb_NO , awb_date 
											from v_ddt_dtl  where (shp_trf_type = 'TT'  or  trf_type = 'IF') GROUP BY flt_key, flt_date, awb_NO, awb_date) ddt 
			             			ON carshp.AWB_NO = ddt.AWB_NO AND carshp.AWB_DATE = ddt.AWB_DATE AND carshp.FLT_KEY = ddt.FLT_KEY AND carshp.FLT_DATE = ddt.FLT_DATE
			LEFT JOIN (
			SELECT STRG.flt_key,  STRG.flt_date,  STRG.AWB_NO,  STRG.AWB_DATE, sum(STRG.MAN_PCS) ppk_pcs FROM V_FFM_DTL strg, IMP_ULD_LIST uld
			WHERE STRG.ULD_KEY = ULD.ULD_KEY  AND STRG.FLT_KEY = ULD.FLT_KEY AND STRG.FLT_DATE = ULD.FLT_DATE AND ULD.HANDLING_MODE IN ('PPK','NBK')
			AND (strg.awb_no,strg.awb_date) IN (SELECT awb_no,awb_date
			                          FROM IMP_CAR_SHP
			                          WHERE flt_key     = STRG.FLT_KEY
			                          AND FLT_DATE      = STRG.FLT_DATE
			                          AND strg.awb_no   = awb_no
			                          AND strg.awb_date = awb_date
			                        ) group by STRG.flt_key,  STRG.flt_date,  STRG.AWB_NO,  STRG.AWB_DATE
			) nbk ON carshp.AWB_NO = nbk.AWB_NO AND carshp.AWB_DATE = nbk.AWB_DATE AND carshp.FLT_KEY = nbk.FLT_KEY AND carshp.FLT_DATE = nbk.FLT_DATE
			where (carshp.RECD_PCS - nvl(ppk_pcs,0))  >= ( carshp.MANIFEST_PCS - (nvl(tt_pcs,0) +  nvl(ppk_pcs,0) ) )
			and carshp.AWB_NO=#awbNum# AND carshp.AWB_DATE=  to_date(#awbDate#,'DDMONYY') and carshp.flt_key = #flightKey# and carshp.flt_date =  to_date(#flightDate#,'DDMONYY')
			]]>
	</select>
	
	<select id="checkStorageDedLocationTimeFreezeAirLine" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="java.lang.String">
		<![CDATA[
			select CARSHP.A_STRG_DED_LOC_TIME from IMP_CAR_SHP carshp
			LEFT JOIN (select nvl(sum(actual_pcs),0) tt_pcs ,  nvl(sum (actual_Wt),0) tt_wt, flt_key, flt_date, awb_NO , awb_date 
											from v_ddt_dtl  where (shp_trf_type = 'TT'  or  trf_type = 'IF') GROUP BY flt_key, flt_date, awb_NO, awb_date) ddt 
			             			ON carshp.AWB_NO = ddt.AWB_NO AND carshp.AWB_DATE = ddt.AWB_DATE AND carshp.FLT_KEY = ddt.FLT_KEY AND carshp.FLT_DATE = ddt.FLT_DATE
			LEFT JOIN (
			SELECT STRG.flt_key,  STRG.flt_date,  STRG.AWB_NO,  STRG.AWB_DATE, sum(STRG.MAN_PCS) ppk_pcs FROM V_FFM_DTL strg, IMP_ULD_LIST uld
			WHERE STRG.ULD_KEY = ULD.ULD_KEY  AND STRG.FLT_KEY = ULD.FLT_KEY AND STRG.FLT_DATE = ULD.FLT_DATE AND ULD.HANDLING_MODE IN ('PPK','NBK')
			AND (strg.awb_no,strg.awb_date) IN (SELECT awb_no,awb_date
			                          FROM IMP_CAR_SHP
			                          WHERE flt_key     = STRG.FLT_KEY
			                          AND FLT_DATE      = STRG.FLT_DATE
			                          AND strg.awb_no   = awb_no
			                          AND strg.awb_date = awb_date
			                        ) group by STRG.flt_key,  STRG.flt_date,  STRG.AWB_NO,  STRG.AWB_DATE
			) nbk ON carshp.AWB_NO = nbk.AWB_NO AND carshp.AWB_DATE = nbk.AWB_DATE AND carshp.FLT_KEY = nbk.FLT_KEY AND carshp.FLT_DATE = nbk.FLT_DATE
			where (carshp.RECD_PCS - nvl(ppk_pcs,0))  >= ( carshp.MANIFEST_PCS - (nvl(tt_pcs,0) +  nvl(ppk_pcs,0) ) ) 
			and carshp.AWB_NO=#awbNum# AND carshp.AWB_DATE=  to_date(#awbDate#,'DDMONYY') and carshp.flt_key = #flightKey# and carshp.flt_date =  to_date(#flightDate#,'DDMONYY')
			]]>
	</select>
	
	<select id="checkALLLocCodeReachDedStrgLocation" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="java.lang.Integer">
			WITH BDINFO AS (
				select carshp.awb_no , carshp.awb_date , carshp.flt_key, carshp.flt_date , (carshp.RECD_PCS - nvl(nbk_pcs,0)) bdPcs from IMP_CAR_SHP carshp
		            LEFT JOIN (
		                          SELECT STRG.flt_key,  STRG.flt_date,  STRG.AWB_NO,  STRG.AWB_DATE, sum(STRG.MAN_PCS) nbk_pcs
		                          FROM V_FFM_DTL strg, IMP_ULD_LIST uld
		                          WHERE STRG.ULD_KEY = ULD.ULD_KEY  AND STRG.FLT_KEY = ULD.FLT_KEY
		                          AND STRG.FLT_DATE = ULD.FLT_DATE AND ULD.HANDLING_MODE IN ('PPK','NBK')
		                          group by STRG.flt_key,  STRG.flt_date,  STRG.AWB_NO,  STRG.AWB_DATE
		            ) nbk ON carshp.AWB_NO = nbk.AWB_NO AND carshp.AWB_DATE = nbk.AWB_DATE AND carshp.FLT_KEY = nbk.FLT_KEY AND carshp.FLT_DATE = nbk.FLT_DATE 
				),        
			STRGINFO AS (
				select inv.flt_key,inv.flt_date,AWB_NO,AWB_DATE, sum(locn_pcs) invPcs from awb_inventory inv 
		        left join ULD_INVENTORY uinv on uinv.uld_key = inv.uld_key 
		        where uinv.HANDLING_MODE is null                
		            AND  exists (				         
						          select null from MAST_SLA_MLSTN_CNFG where 
									(  exists (
										  select null from MAST_WH_LOC t1, mast_wh_group t2
											where t1.wh_group = t2.WH_GROUP and t2.wh_group = MAST_SLA_MLSTN_CNFG.SLA_LOC_GRP_CODE and t1.code = inv.loc_code
										)
										OR exists (
										  select null from MAST_CODE_HD hd , MAST_CODE_dtl dtl
										  where HD.CODE = DTL.CODE_TYPE and hd.GROUP_CODE = '999' and
											 HD.CODE = MAST_SLA_MLSTN_CNFG.SLA_LOC_CODE and dtl.CODE  = inv.loc_code
										)
									) and sla_id = #slaID#
						      )
						    group by inv.flt_key,inv.flt_date,inv.AWB_NO,inv.AWB_DATE
				)
				select COUNT(*) from BDINFO bd, STRGINFO strg where 
				strg.flt_key = bd.flt_key and strg.flt_date = bd.flt_date and strg.AWB_NO = bd.awb_no AND strg.AWB_DATE = bd.AWB_DATE
				and bdPcs = invPcs
				and bd.AWB_NO=#awbNum# AND bd.AWB_DATE=  to_date(#awbDate#,'DDMONYY') and bd.flt_key = #flightKey# and bd.flt_date =  to_date(#flightDate#,'DDMONYY')
	</select>
	
	<update  id="updateStrgDedLocTimestampBlkCPSL" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
   		UPDATE IMP_CAR_SHP SET STRG_DED_LOC_TIME = SYSDATE  WHERE  AWB_NO=#awbNum# AND AWB_DATE=  to_date(#awbDate#,'DDMONYY') and flt_key = #flightKey# and flt_date =  to_date(#flightDate#,'DDMONYY')	
   	</update>
   	
   	<update  id="updateStrgDedLocTimestampBlkCPSLNull" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
   		UPDATE IMP_CAR_SHP SET STRG_DED_LOC_TIME = ''  WHERE  AWB_NO=#awbNum# AND AWB_DATE=  to_date(#awbDate#,'DDMONYY') and flt_key = #flightKey# and flt_date =  to_date(#flightDate#,'DDMONYY')
   	</update>
   	
   	<update  id="updateStrgDedLocTimestampBlkAirline" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
   		UPDATE IMP_CAR_SHP SET A_STRG_DED_LOC_TIME = SYSDATE  WHERE  AWB_NO=#awbNum# AND AWB_DATE=  to_date(#awbDate#,'DDMONYY') and flt_key = #flightKey# and flt_date =  to_date(#flightDate#,'DDMONYY')	
   	</update>
   	
   	<update  id="updateStrgDedLocTimestampBlkAirlineNull" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
   		UPDATE IMP_CAR_SHP SET A_STRG_DED_LOC_TIME = ''  WHERE  AWB_NO=#awbNum# AND AWB_DATE=  to_date(#awbDate#,'DDMONYY') and flt_key = #flightKey# and flt_date =  to_date(#flightDate#,'DDMONYY')
   	</update>	
   		
	
	<update  id="updateStrgDedLocTimestampCpsl" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
   		UPDATE IMP_RAMP_CHK_DTL SET STRG_DED_LOC_TIME =  SYSDATE ,TR_TYPE = 'BKDNC', lm_date = SYSDATE WHERE ULD_KEY = #uldKey#  and flt_key = #impFlightKey# and flt_date = to_date(#impFlightDate#,'DDMONYY') and STRG_DED_LOC_TIME is null		
   	</update>	
   	
   	<update  id="updateStrgDedLocTimestampAirline" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
   		UPDATE IMP_RAMP_CHK_DTL SET A_STRG_DED_LOC_TIME =  SYSDATE ,TR_TYPE = 'BKDNC',  lm_date = SYSDATE WHERE ULD_KEY = #uldKey#  and flt_key = #impFlightKey# and flt_date = to_date(#impFlightDate#,'DDMONYY') and A_STRG_DED_LOC_TIME is null		
   	</update>
   
   <select id="checkLocCodeInConfiguredLocations" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
   			select COUNT(*) from MAST_SLA_MLSTN_CNFG where 
				( exists (
					  select null from MAST_WH_LOC t1, mast_wh_group t2
						where t1.wh_group = t2.WH_GROUP and t2.wh_group = MAST_SLA_MLSTN_CNFG.SLA_LOC_GRP_CODE and t1.code = #locCode#
					)
				OR exists (
				  select null from MAST_CODE_HD hd , MAST_CODE_dtl dtl
				  where HD.CODE = DTL.CODE_TYPE and hd.GROUP_CODE = '999' and
					 HD.CODE = MAST_SLA_MLSTN_CNFG.SLA_LOC_CODE and dtl.CODE  = #locCode#
				) ) and sla_id = #slaID#
   </select>
	<select id="getSlaPendingCountDep"  parameterClass="map"  resultClass="java.lang.Integer">
			select COUNT(*) from (
		              select awb.flt_key,awb.flt_date,awb.flt_type,awb.awb_no,awb.awb_date,awb.ULD_KEY  from SPL_CARGO_MILESTONE awb where FLT_TYPE = 'D' and FLT_KEY = #fltkey# and FLT_DATE = TO_DATE(#flightDate#,'DDMONYY') and NVL(SLA_STATUS,'NA') in ('REB','FAIL') 
		                    AND NOT EXISTS (SELECT NULL FROM SPL_FAIL_REASON WHERE SEQ_NO = awb.SEQ_NO) 
		                    AND (SELECT nvl(Rule_Value,'Y') FROM Cmsrules WHERE Rule_Code = 'SLA_FLT_CLOSE_CHK') = 'Y'
                        union all
                        select awb.flt_key,awb.flt_date,'D' flt_type, awb.awb_no,awb.awb_date,awb.ULD_BT_NO as ULD_KEY from EXP_PMANIFEST_ULD_AWB awb, EXP_PMANIFEST_ULD uld WHERE 
                            AWB.ULD_BT_NO = ULD.ULD_BT_NO and AWB.FLT_KEY = ULD.FLT_KEY and AWB.FLT_DATE = ULD.FLT_DATE and awb.FLT_KEY = #fltkey# and awb.FLT_DATE = TO_DATE(#flightDate#,'DDMONYY')
                            AND exists (select null from SPL_CARGO_MILESTONE where ULD_KEY = awb.ULD_BT_NO and awb_no = awb.awb_no and awb_date = awb.awb_date and flt_key is null
                            and NVL(SLA_STATUS,'NR') in ('NR','FAIL') AND  NVL(COLD_BOX_IND,'N') = 'N'
                            AND NOT EXISTS (SELECT NULL FROM SPL_FAIL_REASON WHERE SEQ_NO = SPL_CARGO_MILESTONE.SEQ_NO) 
                            AND (SELECT nvl(Rule_Value,'Y') FROM Cmsrules WHERE Rule_Code = 'SLA_FLT_CLOSE_CHK') = 'Y'
                            AND PKG_SLA_SPECIAL_MILESTONE.FN_MATCH_SHC_CONFIG(
                               (SELECT REPLACE(check_out_shc, ',', '/') from exp_flt_uld where FLT_KEY = #fltkey# and 
                                 FLT_DATE = TO_DATE(#flightDate#,'DDMONYY') AND ULD_KEY = awb.ULD_BT_NO) , 
                                 (select rule_value from CMSRULES where RULE_CODE = 'AUTO_CONFIG_FOR_TEMP_VOLTAGE'),'/') = 'Y'                                 
                            )
                      union all
                      select awb.flt_key,awb.flt_date,'D' flt_type, awb.awb_no,awb.awb_date,'XXXXXXXXXX' as ULD_KEY from EXP_PMANIFEST_ULD_AWB awb, EXP_PMANIFEST_ULD uld WHERE 
                      AWB.ULD_BT_NO = ULD.ULD_BT_NO and AWB.FLT_KEY = ULD.FLT_KEY and AWB.FLT_DATE = ULD.FLT_DATE            
                      and  nvl(uld.HDLG_MODE,'XX') not in ('PPK','NBK') and uld.PPK_TYPE not in ('P','M') and awb.FLT_KEY = #fltkey# and awb.FLT_DATE = TO_DATE(#flightDate#,'DDMONYY')
                        AND exists (select null from SPL_CARGO_MILESTONE where ULD_KEY = 'XXXXXXXXXX' and awb_no = awb.awb_no and awb_date = awb.awb_date and flt_key is null
                            and NVL(SLA_STATUS,'NA') in ('FAIL') AND  NVL(COLD_BOX_IND,'N') = 'N'
                            AND NOT EXISTS (SELECT NULL FROM SPL_FAIL_REASON WHERE SEQ_NO = SPL_CARGO_MILESTONE.SEQ_NO) 
                            AND (SELECT nvl(Rule_Value,'Y') FROM Cmsrules WHERE Rule_Code = 'SLA_FLT_CLOSE_CHK') = 'Y'
                            )
		          	  ) sla  
					      JOIN (
                      select awb.ULD_BT_NO as ULD_KEY,awb.awb_no,awb.awb_date,awb.flt_key,awb.flt_date from EXP_PMANIFEST_ULD_AWB awb, EXP_PMANIFEST_ULD uld WHERE 
                      AWB.ULD_BT_NO = ULD.ULD_BT_NO and AWB.FLT_KEY = ULD.FLT_KEY and AWB.FLT_DATE = ULD.FLT_DATE   
                      and awb.FLT_KEY = #fltkey# and awb.FLT_DATE = TO_DATE(#flightDate#,'DDMONYY')
                      UNION
                      select awb.ULD_BT_NO as ULD_KEY,awb.awb_no,awb.awb_date,awb.flt_key,awb.flt_date from EXP_PMAN_TARMAC_ULD_AWB awb, EXP_PMAN_TARMAC_ULD uld WHERE 
                      AWB.ULD_BT_NO = ULD.ULD_BT_NO and AWB.FLT_KEY = ULD.FLT_KEY and AWB.FLT_DATE = ULD.FLT_DATE  
                      and awb.FLT_KEY = #fltkey# and awb.FLT_DATE = TO_DATE(#flightDate#,'DDMONYY')
                      AND exists (select null from v_ddt_dtl where  awb.flt_key = cntg_flt_key and cntg_flt_date = awb.flt_date and awb.awb_no = awb_no and awb.awb_date = awb_date and trf_type = 'IF')                   
                      UNION
                      select 'XXXXXXXXXX' as ULD_KEY,awb.awb_no,awb.awb_date,awb.flt_key,awb.flt_date from EXP_PMANIFEST_ULD_AWB awb, EXP_PMANIFEST_ULD uld WHERE 
                      AWB.ULD_BT_NO = ULD.ULD_BT_NO and AWB.FLT_KEY = ULD.FLT_KEY and AWB.FLT_DATE = ULD.FLT_DATE   
                      and awb.FLT_KEY = #fltkey# and awb.FLT_DATE = TO_DATE(#flightDate#,'DDMONYY')
                      and  nvl(uld.HDLG_MODE,'XX') not in ('PPK','NBK') and uld.PPK_TYPE not in ('P','M')
                      union
                       select 'XXXXXXXXXX' as ULD_KEY,awb.awb_no,awb.awb_date,awb.flt_key,awb.flt_date from EXP_OFFLOAD_ULD_AWB awb
                       join EXP_OFFLOAD_ULD uld on AWB.ULD_BT_NO = ULD.ULD_BT_NO and AWB.FLT_KEY = ULD.FLT_KEY and AWB.FLT_DATE = ULD.FLT_DATE
                       and awb.FLT_KEY = #fltkey# and awb.FLT_DATE = TO_DATE(#flightDate#,'DDMONYY')
                       AND NVL(awb.CONFIRMED_YN,'N')= 'Y' and  nvl(uld.HDLG_MODE,'XX') not in ('PPK','NBK') and uld.PPK_TYPE not in ('P','M')
                      union
                      select awb.ULD_BT_NO as ULD_KEY,awb.awb_no,awb.awb_date,awb.flt_key,awb.flt_date  from EXP_OFFLOAD_ULD_AWB awb where NVL(awb.CONFIRMED_YN,'N')= 'Y' and awb.FLT_KEY = #fltkey# and awb.FLT_DATE = TO_DATE(#flightDate#,'DDMONYY')
                  ) puldAWB	on 	puldAWB.flt_key = sla.flt_key and puldAWB.flt_date = sla.flt_date and 
							          ( (sla.uld_key != 'XXXXXXXXXX' and puldAWB.uld_key = sla.uld_key) 
							             or (sla.uld_key = 'XXXXXXXXXX' and puldAWB.uld_key = sla.uld_key and sla.awb_no = puldAWB.awb_no) 
							             or (sla.uld_key is null and sla.awb_no = puldAWB.awb_no and sla.awb_date = puldAWB.awb_date and puldAWB.uld_key != 'XXXXXXXXXX' )          
							          ) 
                  join flt_opr opr on sla.flt_key=opr.flt_key and sla.flt_date=opr.sch_date and sla.flt_type=opr.flt_type
                  JOIN AWB AWB ON AWB.AWB_NO = puldAWB.AWB_NO AND AWB.AWB_DATE = puldAWB.AWB_DATE
	</select>
	
	
	<select id="getSlaPendingCount"  parameterClass="map"  resultClass="java.lang.Integer">
		<![CDATA[
				select COUNT(*) from (
		              select * from SPL_CARGO_MILESTONE where FLT_TYPE = 'A' and FLT_KEY = #fltkey# and FLT_DATE = TO_DATE(#flightDate#,'DDMONYY') and NVL(SLA_STATUS,'NA') in ('REB','FAIL') 
		                    AND NOT EXISTS (SELECT NULL FROM SPL_FAIL_REASON WHERE SEQ_NO = SPL_CARGO_MILESTONE.SEQ_NO) 
		                    AND (SELECT nvl(Rule_Value,'Y') FROM Cmsrules WHERE Rule_Code = 'SLA_FLT_CLOSE_CHK') = 'Y'
		          	  ) sla      
					      join flt_opr opr on sla.flt_key=opr.flt_key and sla.flt_date=opr.sch_date and sla.flt_type=opr.flt_type
					      JOIN (WITH FFM_ULD AS (SELECT FFM.flt_key,FFM.flt_date,AWB_NO,AWB_DATE,uld_key  FROM V_FFM_DTL FFM where uld_key is not null),
		                    FFM_BLK AS (
                            SELECT FFM.flt_key,FFM.flt_date,FFM.AWB_NO,FFM.AWB_DATE, 'BULK' uld_key , 'N' as surplus  FROM V_FFM_DTL FFM where FFM.uld_key is null                
                            AND NOT EXISTS (SELECT NULL FROM IMP_AWB_STRG_DTL WHERE flt_key = FFM.flt_key AND flt_date  = FFM.flt_date AND AWB_NO = FFM.AWB_NO
                                                    AND AWB_DATE  = FFM.AWB_DATE and CHKIN_ULD_KEY is not null)
                            UNION
                            SELECT stg.flt_key,stg.flt_date,AWB_NO,AWB_DATE,NVL(CHKIN_ULD_KEY,'BULK') uld_key,
                             CASE
                                  WHEN (SELECT COUNT(1)
                                    FROM MAST_ULD_TYPE
                                    WHERE code          = SUBSTR(CHKIN_ULD_KEY, 1, 3)
                                    AND (H_CONT_IND     = 'Y'
                                    OR BT_IND           = 'Y'
                                    OR DUMMY_H_CONT_IND = 'Y') )> 0
                                  THEN 'N'
                                  ELSE 'Y'
                                END surplus
                            FROM IMP_AWB_STRG_DTL stg                
                            WHERE NOT EXISTS(SELECT NULL FROM V_FFM_DTL WHERE flt_key = stg.flt_key AND flt_date  = stg.flt_date AND AWB_NO = stg.awb_no AND AWB_DATE  = stg.AWB_DATE
                                                   AND uld_key  = stg.CHKIN_ULD_KEY )
                              AND EXISTS(SELECT NULL FROM IMP_CAR_SHP WHERE flt_key = stg.flt_key AND flt_date  = stg.flt_date AND AWB_NO = stg.awb_no AND AWB_DATE  = stg.AWB_DATE)
                            ),
                            STRG_BLK AS (SELECT shp.flt_key,shp.flt_date,AWB_NO,AWB_DATE, BULK_pcs FROM IMP_CAR_SHP shp where nvl(BULK_pcs,0)  > 0),
                            BRK_DWN AS (SELECT shp.flt_key,shp.flt_date,AWB_NO,AWB_DATE  FROM IMP_CAR_SHP shp),
                            STRG_PPKNBK AS (
                              SELECT STRG.flt_key,  STRG.flt_date,  STRG.AWB_NO,  STRG.AWB_DATE, sum(STRG.MAN_PCS) nbk_pcs
                                  FROM V_FFM_DTL strg
                                  join IMP_ULD_LIST uld on STRG.ULD_KEY = ULD.ULD_KEY  AND STRG.FLT_KEY = ULD.FLT_KEY AND STRG.FLT_DATE = ULD.FLT_DATE AND ULD.HANDLING_MODE = 'NBK'
                                  group by STRG.flt_key,  STRG.flt_date,  STRG.AWB_NO,  STRG.AWB_DATE
                            ),
                            DDTINFO as (select nvl(sum(actual_pcs),0) tt_pcs ,  nvl(sum (actual_Wt),0) tt_wt, ddt.flt_key, ddt.flt_date, awb_NO , awb_date
                                      from v_ddt_dtl ddt where (shp_trf_type = 'TT'  or  trf_type = 'IF') 
                                      GROUP BY ddt.flt_key, ddt.flt_date, awb_NO, awb_date)
                            select flt_key,flt_date,AWB_NO,AWB_DATE, uld_key,surplus from (
                            select flt_key,flt_date,AWB_NO,AWB_DATE, uld_key, 'N' as surplus from FFM_ULD
                            union all                            
                            select flt_key,flt_date,AWB_NO,AWB_DATE, uld_key , surplus from FFM_BLK
                            union all
                            select flt_key,flt_date,AWB_NO,AWB_DATE, 'BREAKDOWN' uld_key , 'N' from BRK_DWN
                            union all
                            select flt_key,flt_date,AWB_NO,AWB_DATE, uld_key, 'N' as surplus from FFM_ULD
                            union all
                            select blk.flt_key,blk.flt_date,blk.AWB_NO,blk.AWB_DATE, 'XXXXXXXXXX' uld_key , 'N' as surplus  from STRG_BLK blk
                            left join STRG_PPKNBK ppk on  blk.FLT_KEY = ppk.FLT_KEY and blk.FLT_date = ppk.FLT_date  AND blk.awb_no   = ppk.awb_no AND blk.awb_date = ppk.awb_date
                            left join DDTINFO ddt on  blk.FLT_KEY = ddt.FLT_KEY and blk.FLT_date = ddt.FLT_date  AND blk.awb_no   = ddt.awb_no AND blk.awb_date = ddt.awb_date
                            where  (blk.BULK_pcs - (nvl(ppk.nbk_pcs,0) + nvl(ddt.tt_pcs,0)) ) > 0                
                         )
				) arrival on arrival.flt_key = sla.flt_key and arrival.flt_date = sla.flt_date 
			        AND ( (sla.uld_key != 'XXXXXXXXXX' and sla.uld_key != 'BULK' and arrival.uld_key = sla.uld_key) 
			        or (sla.uld_key = 'BULK' and arrival.uld_key = sla.uld_key and sla.awb_no = arrival.awb_no) 
			        or (sla.uld_key = 'XXXXXXXXXX' and arrival.uld_key = sla.uld_key and sla.awb_no = arrival.awb_no) 
			        or (sla.uld_key is null and sla.awb_no = arrival.awb_no and sla.awb_date = arrival.awb_date and arrival.uld_key = 'BREAKDOWN') )
		    JOIN AWB AWB ON AWB.AWB_NO = arrival.AWB_NO AND AWB.AWB_DATE = arrival.AWB_DATE
			JOIN IMP_CAR_AWB cawb ON cawb.AWB_NO = AWB.AWB_NO AND cawb.AWB_DATE = AWB.AWB_DATE
			LEFT JOIN  ( 
	            WITH IMP_SHP AS (
	              select shp.flt_key,shp.flt_date,shp.AWB_NO,  shp.AWB_DATE, nvl(sum(MANIFEST_PCS),0) MANIFEST_PCS
	              from imp_car_shp shp
	           group by shp.flt_key,  shp.flt_date,  shp.AWB_NO,  shp.AWB_DATE
	             ),
	             DDT_SHP AS (
	                    select ddt.flt_key,ddt.flt_date,ddt.AWB_NO,  ddt.AWB_DATE, nvl(sum(actual_pcs),0) actual_pcs
	                    from v_ddt_dtl ddt where shp_trf_type = 'TT'
	                    group by ddt.flt_key,  ddt.flt_date,  ddt.AWB_NO,  ddt.AWB_DATE
		         )
	            select shp.flt_key,shp.flt_date,shp.AWB_NO,shp.AWB_DATE, 
	            case when actual_pcs >= MANIFEST_PCS then 'Y' else '' end as ttVal
	            from IMP_SHP shp
	            join DDT_SHP ddt on ddt.awb_no = shp.awb_no and ddt.awb_date = shp.awb_date and ddt.flt_key = shp.flt_key and ddt.flt_date = shp.flt_date
         	) ddtTT ON ddtTT.AWB_NO = arrival.AWB_NO AND ddtTT.AWB_DATE = arrival.AWB_DATE  and ddtTT.flt_key   = arrival.flt_key AND ddtTT.flt_date = arrival.flt_date
		    where  nvl(BYPASS_REL,'N') = 'N' and nvl(ddtTT.ttVal,'N') = 'N'
		     ]]>
	</select>
	<select id="fetchHKIARCLHDDtls"  parameterClass="java.lang.String" resultClass="cargo.cms.common.utils.bo.RCLDetailsBO">
	SELECT HD.PRE_RCL_NO AS cto_predeclaration_num,HD.AWB_PFX AS awb_prefix,SUBSTR(HD.AWB_NO,4) AS awb_suffix,HD.ULD_KEY AS uld_num,TO_CHAR(RCL_DATE,'DDMONYY HH24:MI:SS') as rejectDate,
    HD.RCL_REJECT_REASON AS reject_code,(SELECT CODE_DESC FROM MAST_CODE_DTL WHERE GROUP_CODE='38' AND CODE_TYPE='RCL_REJECT_REASON' AND CODE=HD.RCL_REJECT_REASON) AS reject_reason 
    FROM EXP_RCL_HD HD WHERE NVL(REJECT_IND,'N')='Y' AND HD.RCL_NO=#PARAM#
	</select>
	<update  id="updateHKIAUser" parameterClass="java.lang.String">
   	UPDATE EXP_PRE_RCL_HD SET HKIA_IND='Y' WHERE PRE_RCL_NO=#PARAM#		
   	</update>
   	<select id="checkErclCreatedbyHKIA"  parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM EXP_PRE_RCL_HD WHERE NVL(HKIA_IND,'N')='Y' AND PRE_RCL_NO=#PARAM#
	</select>
	
	<select id="checkHKIARCLType"  parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT PPK_TYPE FROM EXP_RCL_HD WHERE RCL_NO = #PARAM#
	</select>
	<select id="checkPrerclnumberisAAHK"  parameterClass="java.lang.String" resultClass="java.lang.Integer">
			<![CDATA[
		select COUNT(1) from(    
		SELECT COUNT(1) AS result FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#PARAM# and ppk_type in ('B','P') AND NVL(HKIA_IND,'N')='Y'
		UNION ALL
		SELECT COUNT(1) as result FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#PARAM# and ppk_type in ('M') AND NVL(HKIA_IND,'N')='Y' and status IN ('CONFIRMED','SUBMITTED')
		) where result>0
		]]>
	</select>
	<select id="checkrclnumberisAAHK"  parameterClass="java.lang.String" resultClass="java.lang.Integer">
	<![CDATA[
	select count(1) from(
	SELECT count(1) AS result FROM EXP_RCL_HD HD,EXP_PRE_RCL_HD PREHD	WHERE PREHD.PRE_RCL_NO=HD.PRE_RCL_NO AND HD.PRE_RCL_NO IS NOT NULL AND NVL(PREHD.HKIA_IND,'N')='Y' 
	AND HD.RCL_NO=#PARAM# AND hd.ppk_type IN ('B','P')
	UNION ALL
	SELECT count(1) AS result FROM EXP_RCL_HD HD,EXP_PRE_RCL_HD PREHD	WHERE PREHD.PRE_RCL_NO=HD.PRE_RCL_NO AND HD.PRE_RCL_NO IS NOT NULL AND NVL(PREHD.HKIA_IND,'N')='Y' 
	AND HD.RCL_NO=#PARAM# AND hd.ppk_type IN ('M') AND prehd.status IN ('CONFIRMED','SUBMITTED')
	) where result>0
    ]]>
	</select>
	<select id="fetchHKIAFlightDepartureDtls"  parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO" resultClass="cargo.cms.common.utils.bo.RCLDetailsBO">
	SELECT FLT.FLT_KEY AS fltKey,
  TO_CHAR(FLT.SCH_DATE,'DDMONYY')
  ||' '
  ||LPAD(FLT.SCH_TIME,4,0) fltDate,
  SUBSTR(PMAN.AWB_NO,0,3) AS awb_prefix,
  SUBSTR(PMAN.AWB_NO,4)   AS awb_suffix,
  AWB.ORIG                AS awbOrig,
  AWB.DEST awbDest,
  PMAN.assignedpcs AS departPcs,
  PMAN.assignedwt  AS departWt,
  FLT.ORIG         AS fltOrig,
  FLT.DEST         AS fltDest,
  AWB.PCS          AS awbPcs,
  AWB.WT           AS awbWt,
  TO_CHAR(FLT.ORIG_DATE,'DDMONYY')
  ||' '
  ||LPAD(FLT.ORIG_TIME,4,0) fltDepartureDate,
  TO_CHAR(FLT.DEST_DATE,'DDMONYY')
  ||' '
  ||LPAD(FLT.DEST_TIME,4,0) fltAarrivalDate,
  (CASE WHEN FLT.ACT_DATE IS NOT NULL THEN TO_CHAR(FLT.ACT_DATE,'DDMONYY')||' '||LPAD(FLT.ACT_TIME,4,0) ELSE '' END) fltAtd
  FROM
  (SELECT FLT_KEY,FLT_DATE,AWB_NO,AWB_DATE, SUM(PMAN_PCS) AS assignedPcs,  SUM(PMAN_WT) AS assignedWt
       FROM	EXP_PMANIFEST_AWB	PMANAWB	WHERE	 FLT_KEY = #fltKey#	 AND FLT_DATE = #fltDate#
       <isNotEmpty property="unldgPt">
       AND UNLDG_PT = #unldgPt#	
       </isNotEmpty>
       AND EXISTS (SELECT NULL FROM EXP_RCL_HD HD,EXP_PRE_RCL_HD PREHD
       WHERE HD.PRE_RCL_NO IS NOT NULL AND PREHD.PRE_RCL_NO = HD.PRE_RCL_NO AND NVL(PREHD.HKIA_IND,'N')='Y'  AND
       HD.AWB_NO = PMANAWB.AWB_NO AND HD.AWB_DATE = PMANAWB.AWB_DATE AND HD.PPK_TYPE IN ('B','P')
       UNION ALL
       SELECT NULL FROM EXP_RCL_HD HD,EXP_PRE_RCL_HD PREHD,EXP_RCL_BRKDN BRKDN 
       WHERE HD.PRE_RCL_NO IS NOT NULL AND PREHD.PRE_RCL_NO = HD.PRE_RCL_NO AND NVL(PREHD.HKIA_IND,'N')='Y'  AND HD.PPK_TYPE='M' AND
       BRKDN.RCL_NO = HD.RCL_NO AND BRKDN.AWB_NO = PMANAWB.AWB_NO AND BRKDN.AWB_DATE = PMANAWB.AWB_DATE
       )
       GROUP BY AWB_NO, AWB_DATE,FLT_KEY,FLT_DATE) PMAN
       JOIN AWB AWB ON AWB.AWB_NO = PMAN.AWB_NO AND AWB.AWB_DATE=PMAN.AWB_DATE
       JOIN FLT_OPR FLT ON FLT.FLT_KEY=PMAN.FLT_KEY AND FLT.SCH_DATE=PMAN.FLT_DATE
	</select>
	<select id="fetchHKIARCLBulkHDDtls"  parameterClass="java.lang.String" resultClass="cargo.cms.common.utils.bo.RCLDetailsBO">
	<![CDATA[
	SELECT A.pre_rcl_no                           AS preRclno,
  A.RCL_NO                                    AS rcl_num,
  TO_CHAR(A.RCL_DATE,'DDMONYY HH24:MI:SS')    AS rcl_datetime,
  A.LM_USER_ID                                AS cto_staff,
  A.DLV_BY                                    AS delivered_by,
  A.CUST_NO                                   AS wos_agent_code,
  A.CARR_CODE                                 AS carrier_code,
  A.AWB_PFX                                   AS awb_prefix,
  SUBSTR(A.AWB_NO,4)                          AS awb_suffix,
  A.AWB_DEST                                  AS destination,
  A.RCL_PCS                                   AS rclPcs,
  TRIM(TO_CHAR(NVL(A.RCL_WT,0),9999999999.9)) AS rclWt,
  A.spl_code1                                 AS splCode1,
  A.spl_code2                                 AS splCode2,
  A.spl_code3                                 AS splCode3,
  A.spl_code4                                 AS splCode4,
  A.spl_code5                                 AS splCode5,
  A.spl_code6                                 AS splCode6,
  A.spl_code7                                 AS splCode7,
  A.spl_code8                                 AS splCode8,
  A.spl_code9                                 AS splCode9,
  A.AWB_CONTENT                               AS content,
  A.truck_no                                  AS truck_num,
  NVL(A.sec_check,'N')                        AS secCheck,
  NVL(A.REJECT_IND,'N')                       AS rejectInd,
  A.RCL_REJECT_REASON AS rejectReasonRmk,
  (SELECT CODE_DESC FROM SEC_USER WHERE CODE = A.LM_USER_ID AND ROWNUM=1
  ) ctoName,
  A.carr_code AS carrier,
  (SELECT PCS FROM AWB AWB WHERE AWB.AWB_NO=a.awb_no AND AWB.AWB_DATE=a.awb_date) AS total_pieces,
  (SELECT TRIM(TO_CHAR(NVL(wt,0),9999999999.9)) FROM AWB AWB WHERE AWB.AWB_NO=a.awb_no AND AWB.AWB_DATE=a.awb_date) AS total_weight,
  A.RCL_REJECT_REASON rejectCode,
    (
  CASE
    WHEN (SELECT car.pcs
      FROM exp_car car,
        AWB awb
      WHERE awb.AWB_NO = car.AWB_NO
      AND awb.AWB_DATE = car.AWB_DATE
      AND awb.car_yn   ='Y'
      AND car.awb_no   = A.awb_no
      AND car.awb_date = a.awb_date) > 0
    THEN (
      CASE
        WHEN (SELECT car.pcs
          FROM exp_car car,
            AWB awb
          WHERE awb.AWB_NO = car.AWB_NO
          AND awb.AWB_DATE = car.AWB_DATE
          AND awb.car_yn   ='Y'
          AND car.awb_no   = A.awb_no
          AND car.awb_date = a.awb_date) >
          (SELECT NVL(hd.rcl_pcs, 0)
          FROM exp_rcl_hd hd
          WHERE hd.rcl_no      = A.RCL_NO
          AND hd.awb_no        = A.awb_no
          AND hd.awb_date      = A.awb_date
          AND hd.void_user_id IS NULL
          )
        THEN 'P'
        ELSE 'T'
      END)
    ELSE (
      CASE
        WHEN (SELECT DECODE(NVL(AWB.pcs, 0), 0, '', pcs)
          FROM AWB AWB
          WHERE AWB.awb_no = A.AWB_NO
          AND AWB.awb_date = A.AWB_DATE
          AND AWB.orig    IS NOT NULL) > 0
        THEN (
          CASE
            WHEN (SELECT DECODE(NVL(AWB.pcs, 0), 0, '', pcs)
              FROM AWB AWB
              WHERE AWB.awb_no = A.AWB_NO
              AND AWB.awb_date = A.AWB_DATE
              AND AWB.orig    IS NOT NULL) >
              (SELECT NVL(hd.rcl_pcs, 0)
              FROM exp_rcl_hd hd
              WHERE hd.rcl_no      = A.RCL_NO
              AND hd.awb_no        = A.awb_no
              AND hd.awb_date      = A.awb_date
              AND hd.void_user_id IS NULL
              )
            THEN 'P'
            ELSE 'T'
          END)
        ELSE (
          CASE
            WHEN (SELECT (NVL(awb.rcl_pcs,0) - NVL(awb.rtn_pcs,0))
              FROM AWB awb
              WHERE awb.awb_no = A.AWB_NO
              AND awb.awb_date = A.AWB_DATE
              AND awb.orig    IS NOT NULL) > 0
            THEN (
              CASE
                WHEN (SELECT (NVL(awb.rcl_pcs,0) - NVL(awb.rtn_pcs,0))
                  FROM AWB awb
                  WHERE awb.awb_no = A.AWB_NO
                  AND awb.awb_date = A.AWB_DATE
                  AND awb.orig    IS NOT NULL) >
                  (SELECT NVL(hd.rcl_pcs, 0)
                  FROM exp_rcl_hd hd
                  WHERE hd.rcl_no      = A.RCL_NO
                  AND hd.awb_no        = A.awb_no
                  AND hd.awb_date      = A.awb_date
                  AND hd.void_user_id IS NULL
                  )
                THEN 'P'
                ELSE 'T'
              END)
            ELSE 'T'
          END)
      END)
  END) AS packagingType
   FROM EXP_RCL_HD A
   WHERE A.RCL_NO = #PARAM#
     ]]>
	</select>
	<select id="fetchHKIARCLBulkDmnDtls"  parameterClass="java.lang.String" resultClass="cargo.cms.common.utils.bo.RCLDetailsBO">
	SELECT ROWNUM AS sequence,length AS length,width AS width,height AS height,pcs AS pieces FROM EXP_RCL_DMN WHERE RCL_NO=#PARAM#
	</select>
	
	<select id="fetchHKIATruckTerminalTime"  parameterClass="java.lang.String" resultClass="java.lang.String">
	SELECT to_char(EVENT.TERMINAL_ENTRY_TIME,'DDMONYY HH24:MI:SS') FROM TRUCK_TRIP TRIP
	JOIN TRUCK_TRIP_EVENTS EVENT ON TRIP.TRIP_ID = EVENT.TRIP_ID
    WHERE TRUCK_NO = UPPER(#PARAM#) AND CLOSED = 'N'
    </select>
	
	<select id="fetchHKIARCLPrepackULDDtls"  parameterClass="java.lang.String" resultClass="cargo.cms.common.utils.bo.RCLDetailsBO">
	SELECT DTL.ULD_KEY AS uld_num,DTL.LOC_CODE AS storage_location,DTL.CONTR_CODE AS contour_code,DTL.PCS AS pieces,
	TRIM(TO_CHAR(NVL(DTL.TARE_WT,0),9999999999.9)) AS tare_weight,TRIM(TO_CHAR(NVL(DTL.GROSS_WT,0),9999999999.9)) AS gross_weight,
	TRIM(TO_CHAR(NVL(DTL.NET_WT,0),9999999999.9)) AS net_weight,DTL.lsp_no as lspNo 
    FROM EXP_RCL_DTL DTL,EXP_RCL_HD HD
    WHERE DTL.RCL_NO = HD.RCL_NO 
    AND DTL.RCL_NO=#PARAM#
	</select>
	<select id="getAAHKActiveAccessToken"  parameterClass="java.lang.String" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
	SELECT ACCESS_TOKEN AS accessToken,EXPIRES AS expires,TR_NO AS seqNo,TO_CHAR(TOKEN_DATE,'DDMONYY HH24:MI:SS') AS tokenDate FROM AAHK_AUTH_DTLS WHERE STATUS='ACTIVE' ORDER BY CR_DATE DESC
	</select>
	<update id="getAAHKAccessTokentoExpire" parameterClass="java.lang.String">
	<![CDATA[
		UPDATE AAHK_AUTH_DTLS SET STATUS = 'EXPIRED' WHERE TR_NO != #PARAM#
		]]>    
	</update>
	<insert id="insertAAHKAccessTokenDetailst" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO" >
	INSERT INTO AAHK_AUTH_DTLS (TR_NO,ACCESS_TOKEN,EXPIRES,STATUS,TOKEN_DATE,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) VALUES
    (AAHK_AUTH_DTLS_SEQ.NEXTVAL,#accessToken#,#expires#,'ACTIVE',SYSDATE,#crUserId#,SYSDATE,#crUserId#,SYSDATE)
	</insert>
	
	<select id="sqlAAHKFetchDimensionDetailsByRCLNO" parameterClass="java.lang.String" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
     	SELECT A.RCL_NO AS rclNum,
 	 	A.DOC_LINE_NO AS docLineNum,
  		A.LENGTH      AS Length,
  		A.WIDTH       AS width,
  		A.HEIGHT      AS height,
  		A.PCS         AS pieces,
  		A.REMARKS     AS remarks
		FROM EXP_RCL_DMN A,
		 	 EXP_RCL_HD B
		WHERE B.RCL_NO  =A.RCL_NO AND B.STATUS NOT IN ('V','R') AND A.RCL_NO = #PARAM#
        </select>
	
	<select id="fetchHKIARCLMixAWBDtls"  parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO" resultClass="cargo.cms.common.utils.bo.RCLDetailsBO">
	<![CDATA[
	  SELECT SUBSTR(BRKDN.AWB_NO,0,3)                   AS awb_prefix,
  SUBSTR(BRKDN.AWB_NO,4)                          AS awb_suffix,
  BRKDN.DEST                                      AS destination,
  BRKDN.pcs                                       AS pieces,
  TRIM(TO_CHAR(NVL(BRKDN.WEIGHT,0),9999999999.9)) AS net_weight,
  (CASE
    WHEN (SELECT car.pcs
      FROM exp_car car,
        AWB awb
      WHERE awb.AWB_NO = car.AWB_NO
      AND awb.AWB_DATE = car.AWB_DATE
      AND awb.car_yn   ='Y'
      AND car.awb_no   = BRKDN.awb_no
      AND car.awb_date = BRKDN.awb_date) > 0
    THEN (
      CASE
        WHEN (SELECT car.pcs
          FROM exp_car car,
            AWB awb
          WHERE awb.AWB_NO = car.AWB_NO
          AND awb.AWB_DATE = car.AWB_DATE
          AND awb.car_yn   ='Y'
          AND car.awb_no   = BRKDN.awb_no
          AND car.awb_date = BRKDN.awb_date) >
          (SELECT NVL(SUM(ULDAWB.pcs), 0)
                   FROM exp_uld_awb ULDAWB
                   WHERE ULDAWB.awb_no = BRKDN.AWB_NO
                   AND ULDAWB.awb_date = BRKDN.AWB_DATE
                   AND ULDAWB.rcl_no   = BRKDN.RCL_NO
                  AND ULDAWB.ppk_type = 'M'
          )
        THEN 'P'
        ELSE 'T'
      END)
    ELSE (
      CASE
        WHEN (SELECT DECODE(NVL(AWB.pcs, 0), 0, '', pcs)
          FROM AWB AWB
          WHERE AWB.awb_no = BRKDN.AWB_NO
          AND AWB.awb_date = BRKDN.AWB_DATE
          AND AWB.orig    IS NOT NULL) > 0
        THEN (
          CASE
            WHEN (SELECT DECODE(NVL(AWB.pcs, 0), 0, '', pcs)
              FROM AWB AWB
              WHERE AWB.awb_no = BRKDN.AWB_NO
              AND AWB.awb_date = BRKDN.AWB_DATE
              AND AWB.orig    IS NOT NULL) >
              (SELECT NVL(SUM(ULDAWB.pcs), 0)
                   FROM exp_uld_awb ULDAWB
                   WHERE ULDAWB.awb_no = BRKDN.AWB_NO
                   AND ULDAWB.awb_date = BRKDN.AWB_DATE
                   AND ULDAWB.rcl_no   = BRKDN.RCL_NO
                  AND ULDAWB.ppk_type = 'M'
              )
            THEN 'P'
            ELSE 'T'
          END)
        ELSE (
          CASE
            WHEN (SELECT (NVL(awb.rcl_pcs,0) - NVL(awb.rtn_pcs,0))
              FROM AWB awb
              WHERE awb.awb_no = BRKDN.AWB_NO
              AND awb.awb_date = BRKDN.AWB_DATE
              AND awb.orig    IS NOT NULL) > 0
            THEN (
              CASE
                WHEN (SELECT (NVL(awb.rcl_pcs,0) - NVL(awb.rtn_pcs,0))
                  FROM AWB awb
                  WHERE awb.awb_no = BRKDN.AWB_NO
                  AND awb.awb_date = BRKDN.AWB_DATE
                  AND awb.orig    IS NOT NULL) >
                  (SELECT NVL(SUM(ULDAWB.pcs), 0)
                   FROM exp_uld_awb ULDAWB
                   WHERE ULDAWB.awb_no = BRKDN.AWB_NO
                   AND ULDAWB.awb_date = BRKDN.AWB_DATE
                   AND ULDAWB.rcl_no   = BRKDN.RCL_NO
                  AND ULDAWB.ppk_type = 'M'
                  )
                THEN 'P'
                ELSE 'T'
              END)
            ELSE 'T'
          END)
      END)
  END) AS packagingType
FROM EXP_RCL_BRKDN BRKDN,
  EXP_RCL_HD HD
WHERE HD.RCL_NO = BRKDN.RCL_NO
AND BRKDN.RCL_NO=#rclNo# AND NVL(HD.reject_ind,'N')='N'
UNION ALL
SELECT SUBSTR(BRKDN.AWB_NO,0,3)                   AS awb_prefix,
  SUBSTR(BRKDN.AWB_NO,4)                          AS awb_suffix,
  BRKDN.DEST                                      AS destination,
  BRKDN.pcs                                       AS pieces,
  TRIM(TO_CHAR(NVL(BRKDN.WEIGHT,0),9999999999.9)) AS net_weight,
  (CASE
    WHEN (SELECT car.pcs
      FROM exp_car car,
        AWB awb
      WHERE awb.AWB_NO = car.AWB_NO
      AND awb.AWB_DATE = car.AWB_DATE
      AND awb.car_yn   ='Y'
      AND car.awb_no   = BRKDN.awb_no
      AND car.awb_date = BRKDN.awb_date) > 0
    THEN (
      CASE
        WHEN (SELECT car.pcs
          FROM exp_car car,
            AWB awb
          WHERE awb.AWB_NO = car.AWB_NO
          AND awb.AWB_DATE = car.AWB_DATE
          AND awb.car_yn   ='Y'
          AND car.awb_no   = BRKDN.awb_no
          AND car.awb_date = BRKDN.awb_date) >
          (SELECT NVL(SUM(ULDAWB.pcs), 0)
                   FROM exp_uld_awb ULDAWB
                   WHERE ULDAWB.awb_no = BRKDN.AWB_NO
                   AND ULDAWB.awb_date = BRKDN.AWB_DATE
                   AND ULDAWB.rcl_no   = #rclNo#
                  AND ULDAWB.ppk_type = 'M'
          )
        THEN 'P'
        ELSE 'T'
      END)
    ELSE (
      CASE
        WHEN (SELECT DECODE(NVL(AWB.pcs, 0), 0, '', pcs)
          FROM AWB AWB
          WHERE AWB.awb_no = BRKDN.AWB_NO
          AND AWB.awb_date = BRKDN.AWB_DATE
          AND AWB.orig    IS NOT NULL) > 0
        THEN (
          CASE
            WHEN (SELECT DECODE(NVL(AWB.pcs, 0), 0, '', pcs)
              FROM AWB AWB
              WHERE AWB.awb_no = BRKDN.AWB_NO
              AND AWB.awb_date = BRKDN.AWB_DATE
              AND AWB.orig    IS NOT NULL) >
              (SELECT NVL(SUM(ULDAWB.pcs), 0)
                   FROM exp_uld_awb ULDAWB
                   WHERE ULDAWB.awb_no = BRKDN.AWB_NO
                   AND ULDAWB.awb_date = BRKDN.AWB_DATE
                   AND ULDAWB.rcl_no   = #rclNo#
                  AND ULDAWB.ppk_type = 'M'
              )
            THEN 'P'
            ELSE 'T'
          END)
        ELSE (
          CASE
            WHEN (SELECT (NVL(awb.rcl_pcs,0) - NVL(awb.rtn_pcs,0))
              FROM AWB awb
              WHERE awb.awb_no = BRKDN.AWB_NO
              AND awb.awb_date = BRKDN.AWB_DATE
              AND awb.orig    IS NOT NULL) > 0
            THEN (
              CASE
                WHEN (SELECT (NVL(awb.rcl_pcs,0) - NVL(awb.rtn_pcs,0))
                  FROM AWB awb
                  WHERE awb.awb_no = BRKDN.AWB_NO
                  AND awb.awb_date = BRKDN.AWB_DATE
                  AND awb.orig    IS NOT NULL) >
                  (SELECT NVL(SUM(ULDAWB.pcs), 0)
                   FROM exp_uld_awb ULDAWB
                   WHERE ULDAWB.awb_no = BRKDN.AWB_NO
                   AND ULDAWB.awb_date = BRKDN.AWB_DATE
                   AND ULDAWB.rcl_no   = #rclNo#
                  AND ULDAWB.ppk_type = 'M'
                  )
                THEN 'P'
                ELSE 'T'
              END)
            ELSE 'T'
          END)
      END)
  END) AS packagingType
FROM EXP_PRE_RCL_BRKDN BRKDN,
  EXP_PRE_RCL_HD PREHD
WHERE PREHD.PRE_RCL_NO = brkdn.pre_rcl_no 
AND BRKDN.PRE_RCL_NO=#preRclNo#
AND EXISTS (SELECT NULL FROM EXP_RCL_HD WHERE RCL_NO=#rclNo# AND NVL(exp_rcl_hd.reject_ind,'N')='Y')
  ]]>
	</select>
	
	<select id="showConfigLocation"  parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT DECODE(SLA_LOC_GRP_CODE, NULL, '', SLA_LOC_GRP_CODE
			  || DECODE(sla_loc_code, NULL, '', '/'))
			  || (select CODE_DESC from MAST_CODE_HD where CODE = sla_loc_code and rownum = 1) AS locList
			FROM MAST_SLA_MLSTN_CNFG
		where sla_id = #configID#
	</select>
	
	<select id="checkRfRaConfig" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.Integer">
		select COUNT(*) from AWB a, MAST_CARRIER b where a.carr_code = b.code and a.awb_type = 'E'
		and nvl(CARR_RF_RA,'N') = 'Y' and AWB_NO = #awb# and AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	
	<select id="checkRfRaConfigForCarr" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.Integer">
		select COUNT(*) from AWB a, MAST_CARRIER b where b.code = #carrCode# and a.awb_type = 'E'
		and nvl(CARR_RF_RA,'N') = 'Y' and AWB_NO = #awb# and AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	
	<select id="tsaCarrAgentCarrierChecking" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.Integer">		
		select count(*) from CUST_CARR_RA_AGENT where cust_no = #agentCode# and CARR_CODE = #carrCode# and nvl(active,'N') = 'Y'
	</select>
		
	 <select id="rclComplPcChecking" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.String">
			select case when a.pcs = ( b.RCL_PCS-nvl(b.RTN_PCS,0) ) then 'Y' else 'N' end equalRclPcs
				FROM EXP_CAR a, AWB b		
				WHERE a.AWB_NO = B.AWB_NO 
				AND TO_CHAR(a.AWB_DATE,'DDMONYY') = TO_CHAR(b.AWB_DATE,'DDMONYY') and b.awb_type = 'E'
				AND a.AWB_NO= #awb# AND a.AWB_DATE = to_date(#awbDate#,'DDMONYY')
	 </select>
	   
	<select id="applicableCaseCnt" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.Integer">
		WITH RCL_INFO AS (
		        select t1.rcl_no, t1.awb_no, t1.awb_date from exp_rcl_hd t1 
		        where t1.ppk_type in ('B', 'P') and (t1.status != 'V' and t1.status != 'R')
		        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
		                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
		                AND  NVL(t1.ACCPT_MODE,'XXX') != 'LIT')
		        union
		        select t1.rcl_no, t2.awb_no, t2.awb_date from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
		        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R')
		        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
		                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
		                AND  NVL(t1.ACCPT_MODE,'XXX') != 'LIT')
		        union
		        select t1.rcl_no, t1.awb_no, t1.awb_date  from exp_rcl_hd t1 where t1.ppk_type in ('B', 'P')
		        	  	and (t1.status != 'V' and t1.status != 'R') and 
		        	  	( nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no) )
		        union
		        select t1.rcl_no, t2.awb_no, t2.awb_date from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
		        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R') and 
		        (  nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no and awb_no = t2.awb_no and awb_date = t2.awb_date) )
			)		
		select count(*) from RCL_INFO where awb_no =  #awb# and awb_date = to_date(#awbDate#,'DDMONYY')
	</select>
		
	<select id="carrierRFExists" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.Integer">
		WITH RCL_INFO AS (
	        select t1.rcl_no, t1.awb_no, t1.awb_date from exp_rcl_hd t1 
	        where t1.ppk_type in ('B', 'P') and (t1.status != 'V' and t1.status != 'R')
	        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
	                and nvl(t1.CARR_RF,'N') = 'Y' AND  NVL(t1.ACCPT_MODE,'XXX') != 'LIT')
	        union
	        select t1.rcl_no, t2.awb_no, t2.awb_date from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
	        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R')
	        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
	                and nvl(t2.CARR_RF,'N') = 'Y' AND  NVL(t1.ACCPT_MODE,'XXX') != 'LIT')
		)
		select count(*) from RCL_INFO where awb_no =  #awb# and awb_date = to_date(#awbDate#,'DDMONYY')
	</select>
	
	<select id="tsaCarrAgentMatchCount" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.Integer">
		WITH CAR_INFO AS (select awb_no,awb_date,AGENT_NAME,AGENT_CODE,CARR_CODE from exp_car 
		where awb_no =  #awb# and awb_date = to_date(#awbDate#,'DDMONYY'))
		select count(*) from CAR_INFO b ,
		CUST_CARR_RA_AGENT a where a.cust_no = b.AGENT_CODE and a.CARR_CODE = b.CARR_CODE and nvl(a.active,'N') = 'Y'
	</select>
	
<select id="otherTypeExists" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.Integer">
		WITH RCL_INFO AS (
	        select t1.rcl_no, t1.awb_no, t1.awb_date from exp_rcl_hd t1 
	        where t1.ppk_type in ('B', 'P') and (t1.status != 'V' and t1.status != 'R')
	        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
	                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
	                and nvl(t1.CARR_RF,'Y') = 'N' AND NVL(t1.ACCPT_MODE,'XXX') != 'LIT')
	        union
	        select t1.rcl_no, t2.awb_no, t2.awb_date from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
	        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R')
	        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
	                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
	                and nvl(t2.CARR_RF,'Y') = 'N' AND NVL(t1.ACCPT_MODE,'XXX') != 'LIT')
	         union
			        select t1.rcl_no, t1.awb_no, t1.awb_date  from exp_rcl_hd t1 where t1.ppk_type in ('B', 'P')
			        	  	and (t1.status != 'V' and t1.status != 'R') and 
			        	  	( nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no) )
			        union
			        select t1.rcl_no, t2.awb_no, t2.awb_date from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
			        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R') and 
			        (  nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no and awb_no = t2.awb_no and awb_date = t2.awb_date) )		        
		)
		select count(*) from RCL_INFO where awb_no =  #awb# and awb_date = to_date(#awbDate#,'DDMONYY')
	</select>
	
    <update id="update_Carrier_RF_CAR" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE AWB SET CARR_RA = #carrierRA# WHERE AWB_NO=#awb# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and awb_type = 'E'
	</update>
	
	
	<update id="update_TSA_TRANS_PASS_EXP_CAR" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE AWB SET TSA_PASS_IND = 'Y' WHERE AWB_NO=#awb# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and awb_type = 'E' and nvl(TSA_PASS_IND,'N') = 'N'
	</update>
	<update id="update_TSA_TRANS_PASS_START_PREP" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE AWB SET TSA_PASS_IND = 'Y' WHERE AWB_NO=#awb# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and awb_type = 'T' AND NVL(TSA_START_PREP,'N')='Y' and nvl(TSA_PASS_IND,'N') = 'N'
	</update>
		
	<update id="update_TSA_TRANS_FAIL_EXP_CAR" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE AWB SET TSA_PASS_IND = 'N' WHERE AWB_NO=#awb# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and awb_type = 'T'  AND NVL(TSA_START_PREP,'N')='Y' 
	</update>
	
	
	<update id="update_TSA_PASS_EXP_CAR" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE AWB SET TSA_PASS_IND = 'Y' WHERE AWB_NO=#awb# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and awb_type = 'E' and nvl(TSA_PASS_IND,'N') = 'N'
	</update>
	
	
	<update id="update_TSA_PASS_N_EXP_CAR" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE AWB SET TSA_PASS_IND = 'N' WHERE AWB_NO=#awb# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and awb_type = 'E' 
	</update>
	
	<update id="update_TSA_PASS_NULL_EXP_CAR" parameterClass="cargo.cms.export.bo.ExpCarBO">
		UPDATE AWB SET TSA_PASS_IND = 'NA' WHERE AWB_NO=#awb# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and awb_type = 'E' 
	</update>
	
	<select id="checkRfRaSCConfig" parameterClass="cargo.cms.export.bo.JobOrderBO"  resultClass="java.lang.Integer">
		select COUNT(*) from AWB a, MAST_CARRIER b where a.carr_code = b.code and a.awb_type IN ('E','T')
		and nvl(CARR_RF_RA,'N') = 'Y' and AWB_NO = #awbNo# and AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	<select id="getAWBTypeforpman" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
	SELECT AWB_TYPE FROM AWB AWB WHERE AWB_NO =#awbNo# AND AWB_DATE = #awbDate#
	</select>
	<select id="getAWBCarrCodeforpman" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
	SELECT CARR_CODE FROM AWB AWB WHERE AWB_NO =#awbNo# AND AWB_DATE = #awbDate#
	</select>
	<select id="getAWBUpstreamChecked" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
	SELECT TSA_PASS_IND FROM AWB AWB WHERE AWB_NO =#awbNo# AND AWB_DATE = #awbDate#
	</select>
	
	
	<select id="otherPcsReqForSC" parameterClass="cargo.cms.export.bo.ExpCarBO"  resultClass="java.lang.String">
		WITH RCL_INFO AS (
		        select t1.rcl_no, t1.awb_no, t1.awb_date , t1.rcl_pcs as pcs from exp_rcl_hd t1 
		        where t1.ppk_type in ('B', 'P') and (t1.status != 'V' and t1.status != 'R')
		        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
		                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
		                and nvl(t1.CARR_RF,'N') = 'N' AND NVL(t1.ACCPT_MODE,'XXX') != 'LIT' )
		        union
		        select t1.rcl_no, t2.awb_no, t2.awb_date, t2.pcs as pcs from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
		        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R')
		        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
		                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
		                and nvl(t2.CARR_RF,'N') = 'N' AND NVL(t1.ACCPT_MODE,'XXX') != 'LIT' )
		        union
		        select t1.rcl_no, t1.awb_no, t1.awb_date, t1.rcl_pcs as pcs  from exp_rcl_hd t1 where t1.ppk_type in ('B', 'P')
		        	  	and (t1.status != 'V' and t1.status != 'R') and 
		        	  	( nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no) )
		        union
		        select t1.rcl_no, t2.awb_no, t2.awb_date, t2.pcs as pcs  from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
		        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R') and 
		        (  nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no and awb_no = t2.awb_no and awb_date = t2.awb_date) )
			)
			select nvl(SUM(pcs),0) from RCL_INFO where awb_no =  #awb# and awb_date = to_date(#awbDate#,'DDMONYY')
	</select>
		
	<select id="checkTSAPassForShipment" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
			SELECT COUNT(*) FROM AWB where AWB_NO=#awbNo# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and TSA_PASS_IND = 'Y'
	</select>
        <select id="getAWBCarrCode" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
			SELECT CARR_CODE FROM AWB where AWB_NO=#awbNo# AND AWB_DATE= to_date(#awbDate#,'DDMONYY')
	</select>
	<select id="getFltCarrCode" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.String">
			SELECT CARR_CODE FROM FLT_OPR_EVENTS WHERE FLT_KEY=#expFltKey# and SCH_DATE=#expFltDate#
	</select>
	<select id="checkIsAWBExport" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="java.lang.Integer">
			SELECT COUNT(*) FROM AWB where AWB_NO=#awbNo# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and  awb_type = 'E'
	</select>
<select id="AWB_ALERT_DT_SRH" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO"  resultClass="cargo.cms.export.bo.DocumentAcceptanceBO">	
  SELECT TR_NO as seqNo,
  AWB_NO AS awbNo,
  AWB_NO awbNoDisplay,
  TO_CHAR(AWB_DATE,'DDMONYY') AS awbDate,
  (select code_desc from cust_company where code=ALERT.AGENT_CODE) as agentName,
  DEST as dest,
  SPL_CODE1 as splCode1,
  SPL_CODE2 as splCode2,
  SPL_CODE3 as splCode3,
  (CASE WHEN (TO_DATE(TO_CHAR(EFFECT_UNTIL,'DDMONYY'),'DDMONYY') - TO_DATE(TO_CHAR(SYSDATE,'DDMONYY'),'DDMONYY')) >= 0 THEN 'Y' ELSE 'N' END) AS effectInd,
  ALERT_MSG AS alertMsg,
  EMAIL_TO AS emailTo,
  EFFECT_IND AS effectInd,
  Email_IND AS emailInd,
  TO_CHAR(EFFECT_UNTIL,'DDMONYY') as effectUntil,
  TO_CHAR(CR_DATE,'DDMONYY HH24:MI') as createTime,
  TO_CHAR(LM_DATE,'DDMONYY HH24:MI') as lastModTime,
  (SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='DFLT_PRE_RGSTD_EMAIL') as configEmail
  FROM EXP_AWB_ALERT ALERT WHERE 1=1
  <isNotEmpty property="awbNo">
  AND ALERT.AWB_NO like '%'||#awbNo#||'%' 
  </isNotEmpty>
  <isNotEmpty property="seqNo">
  AND ALERT.TR_NO = #seqNo#
  </isNotEmpty>
  <isNotEmpty property="agentName">
  AND ALERT.AGENT_CODE = (select code from cust_company where code_desc=#agentName#)
  </isNotEmpty>  
  <isNotEmpty property="dest">
  AND ALERT.DEST = #dest#
  </isNotEmpty>  
  <isNotEmpty property="splCode">
  AND (SPL_CODE1=#splCode# OR SPL_CODE2=#splCode# OR SPL_CODE3=#splCode#)
  </isNotEmpty> 
  order by tr_no asc  
</select>

<select id="getAlertCreate" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO"  resultClass="cargo.cms.export.bo.DocumentAcceptanceBO">
<![CDATA[
SELECT 
TO_CHAR(SYSDATE + NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='DFLT_VAL_FOR_EFFCTDAYS'),60),'DDMONYY') as effectUntil,
TO_CHAR(SYSDATE + NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='DFLT_VAL_FOR_EFFCTDAYS'),60),'DDMONYY') as mbleeffectUntil,
(SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='DFLT_PRE_RGSTD_EMAIL') as emailTo,
(SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='DFLT_PRE_RGSTD_EMAIL') as configEmail
FROM DUAL
]]> 
</select>

<update id="AWB_ALERT_DT_UPDATE" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO">
<![CDATA[
UPDATE EXP_AWB_ALERT
SET 
ALERT_MSG=#alertMsg#,
EMAIL_TO=#emailTo#,
EMAIL_IND=#emailInd#,
EFFECT_UNTIL=#effectUntil#,
LM_USER_ID=#userID#,
LM_DATE=SYSDATE
WHERE TR_NO = #seqNo#
]]>    
</update>

<delete id="AWB_ALERT_DT_DEL" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO">
DELETE FROM EXP_AWB_ALERT WHERE TR_NO = #seqNo#		  
</delete>

<insert id="AWBAlertCreate" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO" >
	INSERT INTO EXP_AWB_ALERT (TR_NO,AWB_NO,DEST,SPL_CODE1,SPL_CODE2,SPL_CODE3,ALERT_MSG,EMAIL_TO,EFFECT_IND,EFFECT_UNTIL,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,MBLE_IND,AGENT_CODE,EMAIL_IND)
	VALUES (EXP_AWB_ALERT_SEQ.NEXTVAL,#awbNo#,#dest#,#splCode1#,#splCode2#,#splCode3#,#alertMsg#,#emailTo#,#effectInd#,#effectUntil#,#userID#,SYSDATE,#userID#,SYSDATE,#mbleInd#,(select code from cust_company where code_desc=#agentName#),#emailInd#)
	</insert>
	
	<select id="COLD_BOX_DT_SRH" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO"  resultClass="cargo.cms.export.bo.DocumentAcceptanceBO">
	<![CDATA[
  SELECT TR_NO as seqNo,
  COLD_BOX AS coldBox,
  STATUS AS coldBoxStatus,
  STATUS AS oldcoldBoxStatus,
  NVL((SELECT lsp_inventory.loc_code FROM LSP_INVENTORY WHERE LSP_NO = COLD_BOX AND ROWNUM=1),LOC_CODE) AS locn,
  SERVICEABLE AS serviceable,
  TARGET_TEMP AS targetTemp,
  LOW_TEMP_RANGE AS lowTempRange,
  HIGH_TEMP_RANGE AS highTempRange,
  MANUAL_SHC AS manualSHC,
  MANUAL_SHC AS oldmanualSHC,
  SET_BY AS setBy,
  ACTUAL_TEMP AS actTemp,
  ACTUAL_HUMIDITY AS actHumidity,
  ACTUAL_BATTERY AS actBattery,
  REMARK AS remark,
  COLD_BOX_SWITCH as coldBoxSwitch,
  COLD_BOX_SWITCH as oldColdBoxSwitch,
  (CASE WHEN sts_date IS NOT NULL THEN TO_CHAR(STS_DATE,'DDMONYY HH24:MI') ELSE '' END) as awsLastUpdate,
  ZONE AS zone,
  (SELECT STRAGG(STRINGDELIM(AI.AWB_NO||'/'||(SELECT decode(AW.spl_code1, null, '', AW.spl_code1 || decode(AW.spl_code2, null, '', ','))
		|| decode(AW.spl_code2, null, '', AW.spl_code2 || decode(AW.spl_code3, null, '', ','))
		|| decode(AW.spl_code3, null, '', AW.spl_code3 || decode(AW.spl_code4, null, '', ','))
		|| decode(AW.spl_code4, null, '', AW.spl_code4 || decode(AW.spl_code5, null, '', ','))
		|| decode(AW.spl_code5, null, '', AW.spl_code5 || decode(AW.spl_code6, null, '', ','))
		|| decode(AW.spl_code6, null, '', AW.spl_code6 || decode(AW.spl_code7, null, '', ','))
		|| decode(AW.spl_code7, null, '', AW.spl_code7 || decode(AW.spl_code8, null, '', ','))
		  || decode(AW.spl_code8, null, '', AW.spl_code8 || decode(AW.spl_code9, null, '', ','))
		|| decode(AW.spl_code9, null, '', AW.spl_code9)	FROM AWB AW WHERE AW.AWB_NO=AI.AWB_NO AND AW.AWB_DATE=AI.AWB_DATE), '@')) FROM AWB_INVENTORY AI 
    WHERE AI.LSP_NO=PROFILE.COLD_BOX) AS awbShc,
  PHYSICAL_LOW_TEMP AS lowTemp,
  PHYSICAL_HIGH_TEMP AS highTemp,
  (CASE WHEN (ACTUAL_BATTERY IS NOT NULL AND TO_NUMBER(ACTUAL_BATTERY) <= TO_NUMBER((SELECT rule_value FROM CMSRULES WHERE RULE_CODE='ACTUAL_BATTERY_LEVEL'))) THEN 'Y' ELSE 'N' END) as batColor,
  (CASE WHEN (ACTUAL_BATTERY IS NOT NULL AND TO_NUMBER(ACTUAL_BATTERY) <= TO_NUMBER((SELECT rule_value FROM CMSRULES WHERE RULE_CODE='ACTUAL_BATTERY_LEVEL'))) THEN 'Y' ELSE 'N' END) as batColor,
  (CASE WHEN (ACTUAL_TEMP IS NOT NULL AND LOW_TEMP_RANGE IS NOT NULL AND HIGH_TEMP_RANGE IS NOT NULL
  AND (TO_NUMBER(ACTUAL_TEMP) < TO_NUMBER(LOW_TEMP_RANGE) OR TO_NUMBER(ACTUAL_TEMP) > TO_NUMBER(HIGH_TEMP_RANGE))) THEN 'Y' ELSE 
  CASE WHEN (ACTUAL_TEMP IS NOT NULL AND PHYSICAL_LOW_TEMP IS NOT NULL AND PHYSICAL_HIGH_TEMP IS NOT NULL
  AND (TO_NUMBER(ACTUAL_TEMP) < TO_NUMBER(PHYSICAL_LOW_TEMP) OR TO_NUMBER(ACTUAL_TEMP) > TO_NUMBER(PHYSICAL_HIGH_TEMP))) THEN 'Y' ELSE 'N' END
  END) as tempColor,
  NVL(SHC_STATUS,'N') AS shcStatus
FROM COLD_BOX_PROFILE PROFILE WHERE 1=1
AND NVL(DEL_YN,'N')='N'
]]>
<isNotEmpty property="coldBox">
 AND COLD_BOX = #coldBox#
</isNotEmpty>
<isNotEmpty property="locn">
 AND LOC_CODE = #locn#
</isNotEmpty>
<isNotEmpty property="coldBoxStatus">
 AND STATUS = #coldBoxStatus#
</isNotEmpty>
<isNotEmpty property="serviceable">
 AND SERVICEABLE = #serviceable#
</isNotEmpty>
<isNotEmpty property="actTemp">
<isNotEmpty property="tempDropVal">
<isEqual property="tempDropVal" compareValue="GREATERTHAN">
<![CDATA[
AND ACTUAL_TEMP > #actTemp#
]]>
</isEqual>
<isEqual property="tempDropVal" compareValue="GREATERTHANEQUAL">
<![CDATA[
AND ACTUAL_TEMP >= #actTemp#
]]>
</isEqual>
<isEqual property="tempDropVal" compareValue="LESSTHAN">
<![CDATA[
AND ACTUAL_TEMP < #actTemp#
]]>
</isEqual>
<isEqual property="tempDropVal" compareValue="LESSTHANEQUAL">
<![CDATA[
AND ACTUAL_TEMP <= #actTemp#
]]>
</isEqual>
<isEqual property="tempDropVal" compareValue="EQUAL">
<![CDATA[
AND ACTUAL_TEMP = #actTemp#
]]>
</isEqual>
</isNotEmpty>
</isNotEmpty>
<isNotEmpty property="actBattery">
<isNotEmpty property="batDropVal">
<isEqual property="batDropVal" compareValue="GREATERTHAN">
<![CDATA[
AND ACTUAL_TEMP > #actBattery#
]]>
</isEqual>
<isEqual property="batDropVal" compareValue="GREATERTHANEQUAL">
<![CDATA[
AND ACTUAL_TEMP >= #actBattery#
]]>
</isEqual>
<isEqual property="batDropVal" compareValue="LESSTHAN">
<![CDATA[
AND ACTUAL_TEMP < #actBattery#
]]>
</isEqual>
<isEqual property="batDropVal" compareValue="LESSTHANEQUAL">
<![CDATA[
AND ACTUAL_TEMP <= #actBattery#
]]>
</isEqual>
<isEqual property="batDropVal" compareValue="EQUAL">
<![CDATA[
AND ACTUAL_TEMP = #actBattery#
]]>
</isEqual>
</isNotEmpty>
</isNotEmpty>

<isNotEmpty property="seqNo">
  AND TR_NO=#seqNo#                                    
</isNotEmpty>
order by 1
  </select>
  <select id="coldBoxEmptyList" parameterClass="java.lang.String" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO" >
	<![CDATA[
	  SELECT TR_NO AS seqNo,COLD_BOX AS coldBox,COLD_BOX_SWITCH AS coldBoxSwitch FROM COLD_BOX_PROFILE WHERE STATUS='Empty' AND SERVICEABLE='Y' AND COLD_BOX_SWITCH='ON'
      ]]>
	</select>
  <update id="coldBoxBatchJobUpdate" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
  UPDATE COLD_BOX_PROFILE
  SET 
  STATUS=#coldBoxStatus#,
  TARGET_TEMP=#targetTemp#,
  LOW_TEMP_RANGE=#lowTempRange#,
  HIGH_TEMP_RANGE=#highTempRange#,
  SET_BY=#setBy#,
  LM_USER_ID=#userID#,
  LM_DATE=SYSDATE
  WHERE TR_NO = #seqNo#
  </update>
  <update id="coldBoxUpdate" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO">
	<![CDATA[
		UPDATE COLD_BOX_PROFILE
SET 
COLD_BOX=#coldBox#,
STATUS=#coldBoxStatus#,
LOC_CODE=#locn#,
SERVICEABLE=#serviceable#,
TARGET_TEMP=#targetTemp#,
LOW_TEMP_RANGE=#lowTempRange#,
HIGH_TEMP_RANGE=#highTempRange#,
MANUAL_SHC=#manualSHC#,
SET_BY=#setBy#,
ACTUAL_TEMP=#actTemp#,
ACTUAL_HUMIDITY=#actHumidity#,
ACTUAL_BATTERY=#actBattery#,
REMARK=#remark#,
COLD_BOX_SWITCH=#coldBoxSwitch#,
PHYSICAL_LOW_TEMP=#lowTemp#,
PHYSICAL_HIGH_TEMP=#highTemp#,
LM_USER_ID=#userID#,
LM_DATE=SYSDATE
WHERE TR_NO = #seqNo#
		]]>    
	</update>
	<insert id="coldBoxCreate" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO" >
	INSERT INTO COLD_BOX_PROFILE (TR_NO,COLD_BOX,STATUS,LOC_CODE,SERVICEABLE,TARGET_TEMP,LOW_TEMP_RANGE,HIGH_TEMP_RANGE,MANUAL_SHC,SET_BY,ACTUAL_TEMP,ACTUAL_HUMIDITY,ACTUAL_BATTERY,REMARK,COLD_BOX_SWITCH,PHYSICAL_LOW_TEMP,PHYSICAL_HIGH_TEMP,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE)
	VALUES (COLD_BOX_PROFILE_SEQ.NEXTVAL,#coldBox#,#coldBoxStatus#,#locn#,#serviceable#,#targetTemp#,#lowTempRange#,#highTempRange#,#manualSHC#,#setBy#,#actTemp#,#actHumidity#,#actBattery#,#remark#,#coldBoxSwitch#,#lowTemp#,#highTemp#,#userID#,SYSDATE,#userID#,SYSDATE)
	</insert>
	<select id="checkmastshctemp" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	<![CDATA[
      SELECT COUNT(1) FROM MAST_SHC_TEMP WHERE instr(SHC,#PARAM#) > 0
      ]]> 
    </select>
    <select id="checkcoldboxstoragerecord" parameterClass="java.lang.String" resultClass="java.lang.Integer">
	<![CDATA[
      SELECT COUNT(1) FROM AWB_INVENTORY WHERE LSP_NO=#PARAM#
      ]]> 
    </select>
    <select id="checkmastshcupdatetemp" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
	<![CDATA[
      SELECT COUNT(1) FROM MAST_SHC_TEMP WHERE instr(SHC,#splCode#) > 0 AND TR_NO !=#seqNo#
      ]]> 
    </select>
     <select id="getConfiguredMastTempSHC" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.DocumentAcceptanceBO">
	<![CDATA[
      SELECT DFLT_TEMP AS targetTemp,LOW_TEMP AS lowTempRange,HIGH_TEMP AS highTempRange FROM MAST_SHC_TEMP WHERE instr(SHC,#PARAM#) > 0
      ]]> 
    </select>
    <update id="coldBoxDelete" parameterClass="cargo.cms.export.bo.DocumentAcceptanceBO">
	<![CDATA[
		UPDATE COLD_BOX_PROFILE
		SET
		DEL_YN = 'Y', 
		LM_USER_ID=#userID#,
		LM_DATE=SYSDATE
		WHERE TR_NO = #seqNo#
		]]>    
	</update>
	<select id="fetchPkgTypeforColdBox" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
		<![CDATA[
		   SELECT (
  CASE
    WHEN (SELECT COUNT(cnt) from (SELECT COUNT(1) AS cnt
      FROM AWB AWB,
        AWB_INVENTORY INV,
        IMP_CAR_SHP SHP
      WHERE INV.AWB_NO  =AWB.AWB_NO
      AND INV.AWB_DATE  = AWB.AWB_DATE
      AND SHP.AWB_NO    = AWB.AWB_NO
      AND SHP.AWB_DATE  = AWB.AWB_DATE
      AND AWB.AWB_NO    = #AWBNO#
      AND AWB.AWB_DATE  = #AWBDATE#
      AND AWB.AWB_TYPE IN ('I','T')
      UNION
      SELECT COUNT(1) AS cnt
      FROM AWB AWB,
        AWB_INVENTORY INV,
        IMP_CAR_SHP SHP
      WHERE INV.AWB_NO =AWB.AWB_NO
      AND INV.AWB_DATE = AWB.AWB_DATE
      AND SHP.AWB_NO   = AWB.AWB_NO
      AND SHP.AWB_DATE = AWB.AWB_DATE
      AND AWB.AWB_NO   = #AWBNO#
      AND AWB.AWB_DATE = #AWBDATE#
      AND AWB.AWB_TYPE ='E'))>0
    THEN 'B'
    ELSE 'P'
  END) AS pkgType
FROM DUAL	
      ]]> 
	</select>
	<select id="fetchAwbSch" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
		<![CDATA[
		  select shc as shcCode from(   
      with test as ( SELECT  SPL_CODE1||'/'||SPL_CODE2||'/'||SPL_CODE3||'/'||SPL_CODE4||'/'||SPL_CODE5||'/'||SPL_CODE6||'/'||SPL_CODE7||'/'||SPL_CODE8||'/'||SPL_CODE9 
       shc from AWB
       where AWB_NO=#AWBNO# and AWB_DATE= TO_DATE(#AWBDATE#,'DDMONYY')) 
      select distinct regexp_substr(shc, '[^/]+', 1, level) shc
      from test  connect by level <= length(regexp_replace(shc, '[^/]+')) + 1) where shc is not null 	
      ]]> 
	</select>
	<select id="getAAHKLogId" resultClass="java.lang.String">
		SELECT AAHK_MSG_BFR_COM_SEQ.NEXTVAL from dual
	</select>
    <insert id="aahkInsertJsonMsgRequest" parameterClass="java.util.Map">
		INSERT INTO AAHK_MSG_BFR_COM (LOG_ID,REQUEST_MSG,MSG_TYPE,STATUS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE,SENT_TO) 
		VALUES (#LOG_ID#,#REQUEST_MSG#,#MSG_TYPE#,'PENDING','SYSTEM',SYSDATE,'SYSTEM',SYSDATE,#SENT_TO#)
	</insert>
	<select id="fetchAAHKPendingMessage" parameterClass="java.lang.String" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO" >
	<![CDATA[
	  SELECT * FROM (SELECT LOG_ID as msgLogId,REQUEST_MSG as messageContentBytes,STATUS as msgStatus,MSG_TYPE as msgType, SENT_TO as SENT_TO  FROM AAHK_MSG_BFR_COM 
      WHERE STATUS= 'PENDING' ORDER BY CR_DATE DESC) WHERE ROWNUM <= NVL((SELECT RULE_VALUE FROM CMSRULES WHERE RULE_CODE='AAHK_JSON_FILE_SIZE'),'10')
      ]]>
	</select>
	<update id="updateAAHKSuccStatus"  parameterClass="java.lang.String">
		DELETE FROM AAHK_MSG_BFR_COM WHERE LOG_ID=#PARAM#
	</update>

	

<select id="getHOAreaULDList" parameterClass="java.util.Map"  resultClass="cargo.cms.common.bo.HOAreaULDBO">
			select DTL.ULD_KEY as uldKey, 'CPCT' as terminal, dtl.ho_area as hoArea
			from TOW_ORDER_IN hd , TOW_ORDER_IN_DTL dtl
			where HD.TO_NO = DTL.TO_NO and hd.flt_key = #FLT_KEY# and hd.flt_date = to_date(#FLT_DATE#,'DDMONYY')
	</select>
	<select id="fetchMastSchDetails" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
	<![CDATA[
		 select DFLT_TEMP as defalutTemp,LOW_TEMP as lowTemp,HIGH_TEMP as highTemp from mast_shc_temp  WHERE instr(SHC,#awbshc#) > 0 
		  ]]>
	</select>
	
	<update id="updatemMnualColdBox" parameterClass="map">
	UPDATE COLD_BOX_PROFILE SET 
		TARGET_TEMP = #defalutTemp#,
		LOW_TEMP_RANGE = #lowTemp#,
		HIGH_TEMP_RANGE = #highTemp#,
        STATUS='Loaded',SET_BY='System'
		WHERE  cold_box=#coldBox#  AND NVL(DEL_YN,'N')='N' AND status in('Empty','Precool') and manual_shc is null
	</update>
	<update id="updatemMnualColdBoxStatus" parameterClass="map">
	UPDATE COLD_BOX_PROFILE SET 
		STATUS='Loaded'
		WHERE  cold_box=#coldBox#  AND NVL(DEL_YN,'N')='N'  and status in('Empty','Precool') and manual_shc is not null
	</update>
	
	<select id="fetchAwbsFromInv" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.AwbInfoBO" >
		select distinct awb_no as awbNo,  TO_CHAR(awb_date,'DDMONYY') as awbDate from  awb_inventory  WHERE   lsp_no=#coldBox# and substr(lsp_no,0,1)='C'
	</select>
	
	<select id="countMastSch"   parameterClass="java.lang.String" resultClass="java.lang.Integer">
	<![CDATA[
		 select  count(1) as cntshc  from mast_shc_temp WHERE  instr(SHC,#awbshc#) > 0 
		  ]]>
	</select>
	<select id="countMastSchSeqnum"   parameterClass="java.lang.String" resultClass="java.lang.String">
	<![CDATA[
	 select TR_NO from mast_shc_temp WHERE  instr(SHC,#awbshc#) > 0
	 ]]> 
	</select>
	
	<select id="gettMastSchManualSCH"   parameterClass="java.lang.String" resultClass="java.lang.String">
	<![CDATA[
	 select SHC from mast_shc_temp WHERE  instr(SHC,#awbshc#) > 0
	 ]]> 
	</select>
	
	<select id="countManualSch"   parameterClass="map" resultClass="java.lang.Integer" >
	<![CDATA[
		 	select  count(1) as cntshc  from COLD_BOX_PROFILE WHERE COLD_BOX = #coldBox# AND instr(manual_shc,#awbshc#) > 0 AND NVL(DEL_YN,'N')='N'
		 	 ]]>
	</select> 
	
	<select id="countManualSchempty"   parameterClass="java.lang.String" resultClass="java.lang.Integer" >
		 	select  count(1) as cntshc from COLD_BOX_PROFILE   WHERE   cold_box=#coldBox# and manual_shc  is not null AND NVL(DEL_YN,'N')='N'
	</select>
	  <select id="countAwbInvoldLsp"   parameterClass="java.lang.String" resultClass="java.lang.Integer" >
             select  count(1) as cntshc from  awb_inventory  WHERE   lsp_no=#coldBox#
    </select>
     <select id="checkmanualshcconditionforjson"   parameterClass="java.lang.String" resultClass="java.lang.Integer" >
             SELECT COUNT(1) FROM COLD_BOX_PROFILE WHERE COLD_BOX=#PARAM# AND MANUAL_SHC IS NULL AND NVL(DEL_YN,'N')='N'
    </select>
     <select id="checkstatusconditionforjson"   parameterClass="java.lang.String" resultClass="java.lang.String" >
             SELECT STATUS FROM COLD_BOX_PROFILE WHERE COLD_BOX=#PARAM# AND NVL(DEL_YN,'N')='N'
    </select>
    <select id="checkswitchconditionforjson"   parameterClass="java.lang.String" resultClass="java.lang.String" >
             SELECT COLD_BOX_SWITCH FROM COLD_BOX_PROFILE WHERE COLD_BOX=#PARAM# AND NVL(DEL_YN,'N')='N'
    </select>
    
    <select id="getawblistforcoldboxsrf"  parameterClass="java.lang.String"  resultClass="cargo.cms.imprt.bo.IssueConsSrfInfoBO">	
		SELECT 
        awb_no                                                       AS awbNo,
  		TO_CHAR(awb_date,'DDMONYY')                                  AS awbDate,
  		lsp_no                                                       AS lsp
		FROM awb_inventory
		WHERE srf_no =#PARAM#
	</select>
    <update id="updatemAwbInvoldLsp" parameterClass="map">    
    <![CDATA[    
        UPDATE COLD_BOX_PROFILE
            SET
            STATUS='Empty',
            TARGET_TEMP='',
            LOW_TEMP_RANGE='',
            HIGH_TEMP_RANGE='',
            MANUAL_SHC='',
            SET_BY='',
            REMARK=''
            WHERE COLD_BOX = #coldBox# and STATUS != 'Damaged' AND NVL(DEL_YN,'N')='N'
            ]]> 
    </update>

<select id="getHOFormULDList" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.bo.HOFormULDBO">
			select HDTL.ULD_KEY AS uldKey,
			(SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = HDTL.ULD_KEY AND ROWNUM &lt; 10) AS shc,
			FULD.NET_WT AS netWeight,
			FULD.GROSS_WT AS grossWeight,
			ULD_TYPE AS loadCategory,
			#ACTION# AS action
			from EXP_ULD_HOVER_DTL HDTL
			LEFT JOIN EXP_FLT_ULD FULD ON FULD.ULD_KEY = HDTL.ULD_KEY AND FULD.FLT_KEY = HDTL.FLT_KEY AND FULD.FLT_DATE = HDTL.FLT_DATE
			where HDTL.flt_key = #FLT_KEY# and HDTL.flt_date = to_date(#FLT_DATE#,'DDMONYY')
			AND HDTL.HO_FORM_NO = #HO_NO#
	</select>
	
	<select id="getHOFormULDDel" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.bo.HOFormULDBO">			
			select HDTL.ULD_KEY AS uldKey,
			(SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = HDTL.ULD_KEY AND ROWNUM &lt; 10) AS shc,
			HDTL.NET_WT AS netWeight,
			HDTL.GROSS_WT AS grossWeight,
			ULD_TYPE AS loadCategory,
			#ACTION# AS action
			from EXP_FLT_ULD HDTL
			where HDTL.flt_key = #FLT_KEY# and HDTL.flt_date = to_date(#FLT_DATE#,'DDMONYY') AND HDTL.ULD_KEY = #ULD_KEY#
	</select>
	
	<select id="getULDInfoRhsMessage" parameterClass="java.util.HashMap"  resultClass="cargo.cms.common.bo.BuildUPULDBO">
			select 
			UNLDG_PT AS unldgPt,
			NET_WT AS netWeight,
			GROSS_WT AS grossWeight,
			ULD_TYPE AS loadCategory			
			from EXP_FLT_ULD 
			where flt_key = #FLT_KEY# and flt_date = to_date(#FLT_DATE#,'DDMONYY') AND ULD_KEY = #ULD_KEY#
	</select>
	
	<select id="getUTCTimeFormatted" parameterClass="java.lang.String"  resultClass="java.lang.String">
			select to_char(TO_DATE(#flightDate#,'DDMONYY'),'YYYY-MM-DD') from dual
	</select>
	
	 <select id="getAWBListForBUULD" parameterClass="java.util.HashMap" resultClass="cargo.cms.common.bo.BuildUPAwbListBO">
		SELECT AWB.AWB_NO as awbNum,
		  (SELECT STRAGG(STRINGDELIM(CODE,',')) FROM V_EXP_ULD_SHC WHERE ULD_KEY = AWB.uld_bt_no AND ROWNUM &lt; 10) AS shc,
		  AWB.ASSIGNED_PCS as pcs,
		  AWB.ASSIGNED_WT as wt,
		  #ACTION# as action
		FROM EXP_PMANIFEST_ULD_AWB AWB		
		WHERE AWB.uld_bt_no = #ULD_KEY# and AWB.FLT_KEY = #FLT_KEY# and AWB.FLT_DATE = to_date(#FLT_DATE#,'DDMONYY')
	  </select>
	  	  
	  <select id="chkAllULDCheckout" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		select count(*) from EXP_CHKOUT_DTL where flt_key = #FLIGHT_NO# and flt_date = to_date(#FLIGHT_DATE#,'DDMONYY') and chkout_date is null
	</select>

<select id="findShipmentsForRetrivalMileStoneCOLDBOX" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
			select  awbNum, CONCAT(CONCAT(SUBSTR(awbNum, 0, 3), '-'), SUBSTR(awbNum, 4)) as awbNumDisp, 
					awbDate,lsp, flightKey, flightDate, awb.COOL_RM_RTV_TIME as coolRoomTrvTime,					
					decode(spl_code1, null, '', spl_code1 || decode(spl_code2, null, '',','))
							               || decode(spl_code2, null, '', spl_code2 || decode(spl_code3, null, '',','))
							               || decode(spl_code3, null, '', spl_code3 || decode(spl_code4, null, '',','))
							               || decode(spl_code4, null, '', spl_code4 || decode(spl_code5, null, '',','))
							               || decode(spl_code5, null, '', spl_code5 || decode(spl_code6, null, '',','))
							               || decode(spl_code6, null, '', spl_code6 || decode(spl_code7, null, '',','))
							               || decode(spl_code7, null, '', spl_code7 || decode(spl_code8, null, '',','))
							               || decode(spl_code8, null, '', spl_code8 || decode(spl_code9, null, '',',')) 
							               || decode(spl_code9, null, '', spl_code9 ) shc,
					          OPR.CGO_ACFT_TYPE airCrftType,
							  'BULK' shipType,
							  nvl(opr.CARR_code,awb.carr_code) flightCarr 
						from 
						(
							 WITH INV_LIST AS (select distinct awb_no as awbNum, to_char(awb_date,'DDMONYY') as awbDate, C.LSP_NO as lsp from AWB_INVENTORY c
                				where loc_code = #newLocCode# AND c.AWB_NO= #awbNum# AND c.AWB_DATE= to_date(#awbDate#,'DDMONYY')					                    
		           		)
	          select awbNum, awbDate,lsp, pman.flt_key as flightKey, to_char(pman.flt_date,'DDMONYY') as flightDate from INV_LIST inv
              join awb awb on awb.awb_no = inv.awbNum and awb.awb_DATE = inv.awbDate
              left join EXP_PMANIFEST_AWB pman on pman.awb_no = inv.awbNum and pman.awb_date = inv.awbDate) dtl
			  left join flt_opr opr on dtl.flightKey = opr.flt_key and opr.SCH_DATE = dtl.flightDate and opr.FLT_TYPE = 'D' 
			  join awb awb on awb.awb_no = dtl.awbNum and awb.awb_DATE = dtl.awbDate
	</select>	
	
	  
	<parameterMap id="mileStoneParamRetrivalMapCOLDBOX" class="map" >
	<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
	<parameter property="mileStone" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	<parameter property="level" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
	<parameter property="carrier" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/> 
	<parameter property="shipType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
	<parameter property="arcfType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
	<parameter property="shc" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  		
	</parameterMap>

	<procedure id="mileStoneRetrivalConfigValueCOLDBOX" parameterMap="mileStoneParamRetrivalMapCOLDBOX" >
			{? = call PKG_SLA_EXPORT_REPT.GET_RTV_MILESTN_CONFIG_COLDBOX(?,?,?,?,?,?)}
	</procedure>
	
	<parameterMap id="mileStoneParamStrgBulkCOLDBOX" class="map" >
		<parameter property="result" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="OUT"/>
		<parameter property="mileStone" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="level" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  
		<parameter property="carrier" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/> 
		<parameter property="shipType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>
		<parameter property="arcfType" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>    
		<parameter property="shc" jdbcType="VARCHAR"	javaType="java.lang.String"	mode="IN"/>  		
	</parameterMap>

	<procedure id="checkStorageConfigExistsCOLDBOX" parameterMap="mileStoneParamStrgBulkCOLDBOX" >
			{? = call PKG_SLA_IMPRT_REPT.GET_MILESTN_CONFIG_COLDBOX(?,?,?,?,?,?)}
	</procedure>
	
	
	<select id="checkALLLocCodeReachDedStrgLocCB" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO"  resultClass="java.lang.Integer">
			WITH BDINFO AS (
				select carshp.awb_no , carshp.awb_date , carshp.flt_key, carshp.flt_date , (carshp.RECD_PCS - nvl(nbk_pcs,0)) bdPcs from IMP_CAR_SHP carshp
		            LEFT JOIN (
		                          SELECT STRG.flt_key,  STRG.flt_date,  STRG.AWB_NO,  STRG.AWB_DATE, sum(STRG.MAN_PCS) nbk_pcs
		                          FROM V_FFM_DTL strg, IMP_ULD_LIST uld
		                          WHERE STRG.ULD_KEY = ULD.ULD_KEY  AND STRG.FLT_KEY = ULD.FLT_KEY
		                          AND STRG.FLT_DATE = ULD.FLT_DATE AND ULD.HANDLING_MODE IN ('PPK','NBK')
		                          group by STRG.flt_key,  STRG.flt_date,  STRG.AWB_NO,  STRG.AWB_DATE
		            ) nbk ON carshp.AWB_NO = nbk.AWB_NO AND carshp.AWB_DATE = nbk.AWB_DATE AND carshp.FLT_KEY = nbk.FLT_KEY AND carshp.FLT_DATE = nbk.FLT_DATE 
				),        
			STRGINFO AS (
				select inv.flt_key,inv.flt_date,AWB_NO,AWB_DATE, sum(locn_pcs) invPcs from awb_inventory inv 
		        left join ULD_INVENTORY uinv on uinv.uld_key = inv.uld_key 
		        where uinv.HANDLING_MODE is null 
		        AND ( exists ( select null from MAST_SLA_MLSTN_CNFG where 
		                        (  exists (
		                            select null from MAST_WH_LOC t1, mast_wh_group t2
		                            where t1.wh_group = t2.WH_GROUP and t2.wh_group = MAST_SLA_MLSTN_CNFG.SLA_LOC_GRP_CODE and t1.code = inv.loc_code
		                          )
		                          OR exists (
		                            select null from MAST_CODE_HD hd , MAST_CODE_dtl dtl
		                            where HD.CODE = DTL.CODE_TYPE and hd.GROUP_CODE = '999' and
		                             HD.CODE = MAST_SLA_MLSTN_CNFG.SLA_LOC_CODE and dtl.CODE  = inv.loc_code
		                          )
		                        ) and sla_id = #slaID#
							) OR exists (select null from COLD_BOX_PROFILE where cold_box = nvl(inv.lsp_no,'XXX') ) 
						)
					group by inv.flt_key,inv.flt_date,inv.AWB_NO,inv.AWB_DATE
				)
				select COUNT(*) from BDINFO bd, STRGINFO strg where 
				strg.flt_key = bd.flt_key and strg.flt_date = bd.flt_date and strg.AWB_NO = bd.awb_no AND strg.AWB_DATE = bd.AWB_DATE
				and bdPcs = invPcs
				and bd.AWB_NO=#awbNum# AND bd.AWB_DATE=  to_date(#awbDate#,'DDMONYY') and bd.flt_key = #flightKey# and bd.flt_date =  to_date(#flightDate#,'DDMONYY')
	</select>

	<select id="checkAllNonBUReachCoolRoomCOLDBOX" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">		
		SELECT NVL(SUM(INV.LOCN_PCS),0)
			FROM AWB_INVENTORY inv
			LEFT JOIN uld_inventory uinv
			ON inv.uld_key                = uinv.uld_key
			WHERE 
			nvl(inv.flt_type,'X') != 'E'
			AND uinv.HANDLING_MODE       IS NULL
			AND NVL(uinv.PPK_IND,'N')     = 'N'
			AND NVL(uinv.MIX_PPK_IND,'N') = 'N'
			AND AWB_NO=#AWB_NO# AND AWB_DATE=#AWB_DATE#
			AND ( inv.loc_code not in (SELECT t1.code
				  FROM MAST_WH_LOC t1,
				    mast_wh_group t2
				  WHERE t1.wh_group    = t2.WH_GROUP
				  AND t1.code          = inv.loc_code
				  AND t1.wh_group IN(SELECT SLA_LOC_GRP_CODE FROM MAST_SLA_MLSTN_CNFG WHERE sla_id = #configID#)
			 ) AND (inv.LSP_NO is null OR (inv.LSP_NO is not null AND not exists (select null from COLD_BOX_PROFILE where cold_box = nvl(inv.lsp_no,'XXX')) ) ) )
			AND (inv.loc_code not in
			  (SELECT NULL
			 	 FROM MAST_CODE_HD hd ,
			    MAST_CODE_dtl dtl
				  WHERE HD.CODE     = DTL.CODE_TYPE
				  AND hd.GROUP_CODE = '999'
				  AND dtl.CODE      = inv.loc_code
				  AND HD.CODE IN (SELECT SLA_LOC_CODE FROM MAST_SLA_MLSTN_CNFG WHERE sla_id = #configID#)
    	  ) AND (inv.LSP_NO is null OR (inv.LSP_NO is not null AND not exists (select null from COLD_BOX_PROFILE where cold_box = nvl(inv.lsp_no,'XXX')) ) ) )
	</select>
	
<select id="getSRFScannerBatchJobNum"  parameterClass="java.lang.String" resultClass="java.lang.String">
		 SELECT MAX(BATCH_JOB_NO) FROM SRF_SCAN_BATCH_JOB_DTLS WHERE TO_CHAR(CR_DATE,'DDMONYY')=(SELECT TO_CHAR(SYSDATE,'DDMONYY') FROM DUAL)
	</select>
	<select id="checkCOLDBOXisserviceable"   parameterClass="java.lang.String" resultClass="java.lang.Integer" >
             SELECT COUNT(1) FROM COLD_BOX_PROFILE WHERE COLD_BOX=#PARAM# AND NVL(SERVICEABLE,'N')='Y' AND NVL(DEL_YN,'N')='N'
    </select>
	<select id="checkSRFScanFileexists" parameterClass="java.lang.String"  resultClass="java.lang.Integer">
		SELECT COUNT(1) FROM SRF_SCAN_BATCH_JOB_DTLS WHERE FILE_NAME=#PARAM#
	</select>
	<insert id="insertSRFScannerImageDtls" parameterClass="java.util.HashMap">
	INSERT INTO SRF_SCAN_BATCH_JOB_DTLS (TR_NO,TIFF_FILE_NAME,FILE_NAME,BATCH_JOB_NO,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) VALUES
    (SRF_SCAN_BATCH_JOB_SEQ.nextval,#tiffFileName#,#fileName#,#batchJobNumber#,'SYSTEM',SYSDATE,'SYSTEM',SYSDATE)
	</insert>
	
	<select id="getSouthboundRcsConfig"  parameterClass="java.lang.String" resultClass="java.lang.String">
		 SELECT NVL(southbound_rcs_config,'N') FROM MAST_CARRIER WHERE CODE = #carrCode#
	</select>
     <select id="fetchGLSAAHKRCLReportData" parameterClass="java.lang.String" resultClass="cargo.cms.export.bo.RCLReportBO">
	SELECT DISTINCT
   		   A.AWB_NO AS awbNo,
		   DECODE(A.PPK_TYPE, 'B', 'Bulk', 'P', 'BUP', 'M', 'MIX') AS pkgType,
		   A.AWB_DEST AS dest,
           DECODE(A.PPK_TYPE, 'M', A.ULD_KEY,'') AS uldKey,
           A.STATUS AS status 
		   FROM
		EXP_RCL_HD A LEFT JOIN EXP_RCL_DTL B ON A.RCL_NO =B.RCL_NO 
		WHERE A.RCL_NO = #PARAM#
	</select>
	<update id="updateSealNumbers" parameterClass="map" >
		UPDATE EXP_RCL_HD SET 
		SEAL_NUM1 = #sealNum1#,
		SEAL_NUM2 = #sealNum2#,
		SEAL_NUM3 = #sealNum3#,
		SEAL_NUM4 = #sealNum4#,
		SEAL_NUM5 = #sealNum5#,
		SEAL_NUM6 = #sealNum6#,
		SEAL_NUM7 = #sealNum7#,
		SEAL_NUM8 = #sealNum8#,
		SEAL_NUM9 = #sealNum9#,
		VKC_CODE = (SELECT VKC_CODE FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRclNum#)
		WHERE RCL_NO=#rclNum#
	</update>
	<update id="updateSecureNetSealNum" parameterClass="map" >
		UPDATE EXP_RCL_DTL SET 
		securenet_serial_no = #secNetSealNum#,
		securenet_count = #sealCount#
		WHERE RCL_NO=#rclNum# and uld_key=#uldNum#
	</update>
	<update id="updateSecureNetSealNumHD" parameterClass="map" >
		UPDATE EXP_RCL_HD SET 
		securenet_serial_no = nvl(#secNetSealNum#,securenet_serial_no),
		securenet_count = #sealCount#
		WHERE RCL_NO=#rclNum# and uld_key=#uldNum#
	</update>
	<select id="getSealnetInfo" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.IssueRCLBO">
		SELECT securenet_serial_no AS secnetSealNo,securenet_count AS sealCount FROM EXP_PRE_RCL_DTL WHERE PRE_RCL_NO=#preRclNum# AND ULD_KEY=#uld#
	</select>
	<select id="getSealnetInfoHD" parameterClass="java.util.HashMap" resultClass="cargo.cms.export.bo.IssueRCLBO">
		SELECT securenet_serial_no AS secnetSealNo,securenet_count AS sealCount FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRclNum# AND ULD_KEY=#uld#
	</select>
	<select id="validateVkcMaster" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT count(1) FROM MAST_VKC_CODE where vkc_code = #vkcCode# AND TRUNC(SYSDATE) between from_date AND to_date
	</select>
	<select id="getSealnetInfocommon" parameterClass="java.util.HashMap" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
		SELECT securenet_serial_no AS secnetSealNo,securenet_count AS sealCount FROM EXP_PRE_RCL_DTL WHERE PRE_RCL_NO=#preRclNum# AND ULD_KEY=#uld#
	</select>
	<select id="getSealnetInfoHDcommon" parameterClass="java.util.HashMap" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
		SELECT securenet_serial_no AS secnetSealNo,securenet_count AS sealCount FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO=#preRclNum# AND ULD_KEY=#uld#
	</select>
	<select id="validateVkcStatus" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT count(1) FROM MAST_VKC_CODE where vkc_code = #vkcCode# and ACTIVE = 'Y'
	</select>

	<select id="isToshibaPrinter"  parameterClass="java.lang.String" resultClass="java.lang.String">
		 select decode(count(1),0,'N','Y') toshibaPrint from MAST_PRT_DTL where code=#printerName# and prt_type='ULD_TAG_6'
	</select>
	
	<select id="getToshibaTemplate"  parameterClass="java.lang.String" resultClass="java.lang.String">
		select read_blob(template_blob) from email_template where code='TOSHIBA_TEMPLATE'
	</select>
	<select id="validateXrayDateDifference" parameterClass="map"  resultClass="java.lang.Integer" >
		SELECT TO_CHAR(TO_DATE(#dateTo#,'DDMONYY') - TO_DATE(#dateFrom#,'DDMONYY')) DAYDIFF FROM DUAL	
	</select>
	<select id="getNotMixAwbsOnULD" parameterClass="java.util.HashMap" resultClass="java.lang.String">
		SELECT STRAGG(STRINGDELIM(awb_no, ',')) 
		FROM awb_inventory WHERE uld_key = #ULD_KEY#
		AND (awb_no,awb_date) NOT IN
		  (SELECT dtl.awb_no,dtl.awb_date
		    FROM exp_rcl_hd hd JOIN exp_rcl_brkdn dtl
		    ON hd.rcl_no = dtl.rcl_no
		    WHERE hd.rcl_no = #RCL_NO#
		  )
	</select>
	
	<update id="updateAWBPrintSendDate" parameterClass="java.util.HashMap" >
		update edi_fwb set awb_send_date=SYSDATE, lm_user_id=#USER_ID#, lm_date=SYSDATE, tr_type='RPFWB' where AWB_NO=#AWB_NO# AND AWB_DATE=to_date(#AWB_DATE#,'DDMONYY')
	</update>
	<update id="updateAWBPrintSendDatePman" parameterClass="java.util.HashMap" >
		update exp_pmanifest_awb set awb_send_date=SYSDATE, lm_user_id=#USER_ID#, lm_date=SYSDATE ,tr_type='RPFWB'
		where AWB_NO=#AWB_NO# AND AWB_DATE=to_date(#AWB_DATE#,'DDMONYY') AND FLT_KEY=#FLT_KEY# AND FLT_DATE=to_date(#FLT_DATE#,'DDMONYY')
	</update>
	<update id="updateAWBPrintSendDateTarmac" parameterClass="java.util.HashMap" >
		update exp_pman_tarmac_awb set awb_send_date=SYSDATE, lm_user_id=#USER_ID#, lm_date=SYSDATE ,tr_type='RPTFWB'
		where AWB_NO=#AWB_NO# AND AWB_DATE=to_date(#AWB_DATE#,'DDMONYY') AND FLT_KEY=#FLT_KEY# AND FLT_DATE=to_date(#FLT_DATE#,'DDMONYY')
	</update>
	
	<update id="updateAWBPrintDate" parameterClass="java.util.HashMap" >
		update edi_fwb set awb_print_date=SYSDATE, lm_user_id=#USER_ID#, lm_date=SYSDATE, tr_type='RPFWB' where AWB_NO=#AWB_NO# AND AWB_DATE=to_date(#AWB_DATE#,'DDMONYY')
	</update>
	<update id="updateAWBPrintDatePman" parameterClass="java.util.HashMap" >
		update exp_pmanifest_awb set awb_print_date=SYSDATE, lm_user_id=#USER_ID#, lm_date=SYSDATE ,tr_type='RPFWB' 
		where AWB_NO=#AWB_NO# AND AWB_DATE=to_date(#AWB_DATE#,'DDMONYY') AND FLT_KEY=#FLT_KEY# AND FLT_DATE=to_date(#FLT_DATE#,'DDMONYY')
	</update>
	<update id="updateAWBPrintDateTarmac" parameterClass="java.util.HashMap" >
		update exp_pman_tarmac_awb set awb_print_date=SYSDATE, lm_user_id=#USER_ID#, lm_date=SYSDATE,tr_type='RPTFWB'
		where AWB_NO=#AWB_NO# AND AWB_DATE=to_date(#AWB_DATE#,'DDMONYY') AND FLT_KEY=#FLT_KEY# AND FLT_DATE=to_date(#FLT_DATE#,'DDMONYY')
	</update>
	
	<select id="getPrinterType" parameterClass="java.lang.String" resultClass="java.lang.String">
		SELECT NVL(prt_category,'N') printerType FROM MAST_PRT_DTL WHERE PRT_TYPE = 'AWB_PRINTER' AND CODE = #PRINTERID# ORDER BY CODE_DESC
	</select>
	
	<select id="select_customout_awb" parameterClass="cargo.cms.export.bo.FlightCustomBO" resultClass="cargo.cms.export.bo.AWBBO">
		SELECT DISTINCT AWB_NO as awbNo, TO_CHAR(AWB_DATE,'DDMONYY') as awbDate ,  FWB_IND as fwbFlag , FHL_IND as fhlFlag
		FROM(
		(SELECT DISTINCT A.AWB_NO, A.AWB_DATE, DECODE(B.AWB_NO,NULL,'N','Y')
		FWB_IND,DECODE(C.AWB_NO,NULL,'N','Y') FHL_IND
		FROM EXP_PMANIFEST_AWB A,
		EDI_FWB B,
		EDI_FHL C
		WHERE A.AWB_NO = B.AWB_NO(+)
		AND A.AWB_NO = C.AWB_NO(+)
		AND A.FLT_KEY = #fltKey#
		AND A.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
		AND FUN_VALIDATE_AWB(A.AWB_NO,(SELECT CARR_CODE FROM AWB WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE),'A') not in ('N','C')
		<isNotEmpty property="unldgPt">
		  AND A.UNLDG_PT = #unldgPt#                                 
		</isNotEmpty>
		)
		UNION ALL
    	(SELECT DISTINCT A.AWB_NO, A.AWB_DATE, DECODE(B.AWB_NO,NULL,'N','Y')
		FWB_IND,DECODE(C.AWB_NO,NULL,'N','Y') FHL_IND
		FROM EXP_PMAN_TARMAC_AWB A,
		EDI_FWB B,
		EDI_FHL C
		WHERE A.AWB_NO = B.AWB_NO(+)
		AND A.AWB_NO = C.AWB_NO(+)
		AND A.FLT_KEY = #fltKey#
		AND A.FLT_DATE = TO_DATE(#fltDate#,'DDMONYY')
		AND FUN_VALIDATE_AWB(A.AWB_NO, (SELECT CARR_CODE FROM AWB WHERE AWB_NO = A.AWB_NO AND AWB_DATE = A.AWB_DATE),'A') not in ('N','C')
		<isNotEmpty property="unldgPt">
		  AND A.UNLDG_PT = #unldgPt#                                 
		</isNotEmpty>
		))
	</select>
	
	<select id="getCARDetailAWBPrint" parameterClass="cargo.cms.edi.report.bo.EnqFWBRept_BO" resultClass="cargo.cms.edi.report.bo.EnqFWBRept_BO">
		select NVL( a.AWB_NO , ' ')  as awbNo,
			NVL( a.ORIGIN , ' ')  as origin,
			NVL( FUN_CONVERT_CONTENT(a.shpr_name) , ' ')  as ShprName,
			NVL( FUN_CONVERT_CONTENT(a.SHPR_ADDR) , ' ')  as ShprAddr1,
			NVL( FUN_CONVERT_CONTENT(a.SHPR_ADDR2) , ' ')  as ShprAddr2,
			NVL( FUN_CONVERT_CONTENT(a.SHPR_PLACE) , ' ')  as ShprCity,
			NVL( a.SHPR_CTRY_CODE , ' ')  as ShpCountry,
			NVL( FUN_CONVERT_CONTENT(a.SHPR_PIN_CODE) , ' ')  as ShpPostal,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_NAME) , ' ')  as CsgnName,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_ADDR) , ' ')  as CsgnAddr1,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_ADDR2) , ' ')  as CsgnAddr2,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_PLACE) , ' ')  as CsgnCity,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_CTRY_CODE) , ' ')  as CsgnCountry,
			NVL( FUN_CONVERT_CONTENT(a.CSGNE_PIN_CODE) , ' ')  as CsgnPostal,
			NVL( FUN_CONVERT_CONTENT(a.agent_code) , ' ')  as AgentAccNo,
			NVL( a.ORIGIN , ' ') as OrginAa,
			pkg_common.get_awb_splcodes(a.AWB_NO,a.AWB_DATE) splCodes
 		 from exp_car a where awb_no=#awbNo# and a.awb_date=to_date(#awbDate#,'DDMONYY')
	</select>

<select id="fetchRecvCargoList" parameterClass="cargo.cms.export.bo.ReceiveCargoBO"
		resultClass="cargo.cms.export.bo.ReceiveCargoBO">
		SELECT
		RECV.tr_no as trNum,
		RECV.AWB_NO AS awbNo,
		CONCAT(CONCAT(SUBSTR(RECV.AWB_NO,0,3),'-'),SUBSTR(RECV.AWB_NO,4)) awbNoDisplay,
		TO_CHAR(RECV.AWB_DATE,'DDMONYY') AS awbDate ,
		NVL(LSP_NO,ULD_KEY) as csdUld,
		LSP_NO AS lspNo,
		ULD_KEY AS uldNo,
		NO_OF_LSP AS lspCount,
		PCS AS pieces,
		GROSS_WT AS grossWeight,
		W_SCALE_WT AS totWeight,		
		IMG_TRANS_ID as imageTransactionId,		
		TO_CHAR(CR_DATE, 'DDMONYY HH24:MI') AS creationDate,
		DECODE(RCL_NO,'','N','Y') AS rclIssued,
		RECV.LOC_CODE AS locn
		FROM EXP_CARGO_RECEIVE_RECORD RECV
		where 1 = 1
		<isEqual property="emptySearch" compareValue="Y" prepend="AND">
			(SYSDATE - CR_DATE) &lt;= 8
		</isEqual>
		<isNotEmpty property="awbNo">
			AND RECV.AWB_NO = #awbNo#
		</isNotEmpty>
		<isNotEmpty property="uldNo">
			AND RECV.ULD_KEY = #uldNo#
		</isNotEmpty>
		<isNotEmpty property="lspNo">
			AND RECV.LSP_NO = #lspNo#
		</isNotEmpty>
		<isNotEmpty property="weightScale">
			AND RECV.W_SCALE_ID = #weightScale#
		</isNotEmpty>
		<isNotEmpty property="rclIssued">
			AND DECODE(RECV.RCL_NO,'','N','Y') = #rclIssued#
		</isNotEmpty>
		ORDER BY CR_DATE desc
	</select>
	
	
	<select id="fetchinvDiscrepancyList" parameterClass="cargo.cms.export.bo.InventoryDiscrepancyBO" resultClass="cargo.cms.export.bo.InventoryDiscrepancyBO">
		SELECT A.* FROM (	
		  SELECT 
		  CASE WHEN recv.LSP_NO  is NOT NULL and SUBSTR(recv.LSP_NO, 1, 1) = 'L' then recv.LSP_NO end as lspSort,
      	  CASE WHEN recv.LSP_NO  is NOT NULL and SUBSTR(recv.LSP_NO, 1, 1) = 'B' then recv.LSP_NO end as binSort,
      	  tr_no                                  AS trNum,
		  AWB_NO                                 AS awbNo,
		  TO_CHAR(AWB_DATE,'DDMONYY')            AS awbDate ,
		  recv.LSP_NO                            AS lspNo,
		  recv.ULD_KEY                           AS uldNo,
		  recv.RCL_NO                            AS rclNum,
		  recv.LOC_CODE                          AS location,
		  recv.NET_WT                            AS receiveCargoWt,
		  recv.GROSS_WT 						 as grossWeight,
	      CASE 
	        when recv.RCL_NO is not null then to_char(recv.REF_WT) 
	        when recv.RCL_NO is null AND uldInv.uld_key is not null AND NVL(ULDENTRY_MSG_RCVD_YN, 'N') = 'Y' then to_char(uldInv.REF_WT)
	        when recv.RCL_NO is null AND lspInv.lsp_no is not null AND NVL(BINENTRY_MSG_RCVD_YN, 'N') = 'Y' then to_char(lspInv.REF_WT)
	        else '' end  refNetWt,                       
			rcl.net_wt AS rclWt,
			DECODE(ENDORSED_BY,'','N','Y') AS endroseInd,
			CASE when recv.ULD_KEY is not null then uldInv.loc_code else lspInv.loc_code end currloc,
			config.ruleValue configLoc,
			CASE 
				when recv.RCL_NO is not null AND NVL(recv.ref_wt,0) = 0 then 'Y' 
		        when recv.RCL_NO is not null AND NVL(recv.ref_wt,0) > 0 AND ABS(NVL(recv.ref_wt,0) -  NVL(rcl.net_wt,0)) > to_number(tolerence.ruleValue) then 'Y' 
		        when recv.RCL_NO is not null AND NVL(recv.ref_wt,0) > 0 AND ABS(NVL(recv.ref_wt,0) -  NVL(rcl.net_wt,0)) &lt;= to_number(tolerence.ruleValue) then 'N' 
		        when recv.RCL_NO is null AND uldInv.uld_key is not null AND NVL(ULDENTRY_MSG_RCVD_YN, 'N') = 'Y'  AND NVL(uldInv.REF_WT,0) > 0 then 'Y' 
		        when recv.RCL_NO is null AND lspInv.lsp_no is not null AND NVL(BINENTRY_MSG_RCVD_YN, 'N') = 'Y' AND NVL(lspInv.REF_WT,0) > 0 then 'Y' 
		        else '' end differenceInd
			FROM EXP_CARGO_RECEIVE_RECORD recv
			left join ULD_INVENTORY uldInv on uldInv.ULD_KEY = recv.ULD_KEY
			left join LSP_INVENTORY lspInv on lspInv.LSP_NO = recv.LSP_NO
			left join (SELECT RULE_VALUE ruleValue from CMSRULES where RULE_CODE = 'NOT_INCLUDE_LOC') config on 1 = 1
			left join (SELECT RULE_VALUE ruleValue from CMSRULES where RULE_CODE = 'INV_TOLERENCE_CONFIG') tolerence on 1 = 1
      		left join (
		        select t1.rcl_no, t2.uld_key , t2.lsp_no, t2.GROSS_WT net_wt
		        from   exp_rcl_hd t1, EXP_RCL_DTL t2 where  t1.rcl_no = t2.rcl_no and STATUS != 'V' AND STATUS != 'R'
     		 ) rcl on rcl.rcl_no = RECV.RCL_NO AND nvl(rcl.uld_key,'*') = nvl(RECV.ULD_KEY,'*') AND nvl(rcl.lsp_no,'*') = nvl(RECV.LSP_NO,'*')
			WHERE 1 =1 
			AND NOT EXISTS (SELECT NULL FROM AWB WHERE AWB_NO = recv.awb_No AND awb_date = recv.awb_Date AND AWB_CLOSED_YN='Y')
			AND NOT EXISTS (SELECT NULL FROM ARCHIVE_LOG_MON WHERE AWB_NO = recv.awb_No AND awb_date = recv.awb_Date)
			  <isNotEmpty prepend="AND" property="fromDate">      
			     trunc(recv.cr_date) BETWEEN TO_DATE(#fromDate#,'DDMONYY') and TO_DATE(#toDate#,'DDMONYY')                        
			  </isNotEmpty> 
			  <isNotEmpty prepend="AND" property="awbNo">
				recv.AWB_NO = #awbNo# AND recv.AWB_DATE = TO_DATE(#awbDate#,'DDMONYY')
			  </isNotEmpty>
			  <isNotEmpty prepend="AND" property="uldNo">
				RECV.ULD_KEY = #uldNo#
			  </isNotEmpty>
			  <isNotEmpty prepend="AND" property="lspNo">
				RECV.LSP_NO = #lspNo#
			 </isNotEmpty>
			 <isNotEmpty prepend="AND" property="endroseInd">
				DECODE(recv.ENDORSED_BY,'','N','Y') = #endroseInd#
			  </isNotEmpty>
			order by rcl.rcl_no desc nulls last , 1 asc , 2 asc , recv.ULD_KEY asc
		  ) A 
		  WHERE 1 = 1 and (A.currloc is null OR instr(A.configLoc,A.currloc) = 0 ) 
		  <isNotEmpty prepend="AND" property="differenceInd">
				A.differenceInd = #differenceInd#
		  </isNotEmpty>   
	</select>
	<select id="sqlGetRclNo"  parameterClass="java.lang.String"  resultClass="cargo.cms.export.bo.ExportULDBO">
		SELECT screening_option as screeningOption,racsf_code as racsfCode,CARR_CODE as carr,screening_method as screeningMethod FROM EXP_RCL_HD WHERE RCL_NO=#PARAM#
	</select>
        <select id="sqlCheckPortConfig" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
        <![CDATA[
		SELECT count(1) from(
		SELECT COUNT(1) AS cnt FROM MAST_SEC_CHECK SECCK
		WHERE SECCK.CARR_CODE=#CARRCODE# AND SECCK.PORT = #PORT#
  		AND NVL(SECCK.ACTIVE,'N')='Y'
		UNION
		SELECT COUNT(1) AS cnt FROM MAST_SEC_CHECK SECCK
		WHERE SECCK.CARR_CODE=#CARRCODE# AND NVL(SECCK.ACTIVE,'N')='Y'
		AND NOT EXISTS (SELECT NULL FROM MAST_SEC_CHECK SECCK
		WHERE SECCK.CARR_CODE=#CARRCODE# AND SECCK.PORT = #PORT#)
		AND SECCK.CTRY_CODE=(SELECT CTRY_CODE FROM MAST_CITY WHERE CODE=#PORT#)) WHERE cnt>0
		]]>
	</select>
	<select id="getTotalAWBPcsWt_PassSCPcsWt_SHCSPopup"  parameterClass="cargo.cms.common.utils.bo.JobOrderCommonBO" resultClass="cargo.cms.common.utils.bo.JobOrderCommonBO" >
		select 
  			awb.PCS as totalAWBPcs,
  			awb.WT as totalAWBWt,
			sum(dtl.PC) as scPassPcs,
 		    sum(dtl.WT) as scPassWt,
 		    SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9 
		from EXP_SEC_CHK_JO jo 
		left join EXP_SEC_CHK_JO_DTL dtl on jo.JO_NO=dtl.JO_NO
		JOIN AWB awb ON awb.AWB_NO = jo.AWB_NO AND 	awb.AWB_DATE = jo.AWB_DATE
		where jo.awb_no=#awbNo# and jo.awb_date=#awbDate# and Upper(dtl.RESULT) = Upper('Pass')  and Upper(jo.status) = Upper('COMPLETED')
		 group by awb.PCS,awb.WT,SPL_CODE1,SPL_CODE2,SPL_CODE3,SPL_CODE4,SPL_CODE5,SPL_CODE6,SPL_CODE7,SPL_CODE8,SPL_CODE9
</select>
<select id="checkRfRaConfigForCarrPopup" parameterClass="cargo.cms.common.utils.bo.ExpCarCommonBO"  resultClass="java.lang.Integer">
		select COUNT(*) from AWB a, MAST_CARRIER b where b.code = #carrCode# and a.awb_type = 'E'
		and nvl(CARR_RF_RA,'N') = 'Y' and AWB_NO = #awb# and AWB_DATE = to_date(#awbDate#,'DDMONYY')
	</select>
	<select id="otherPcsReqForSCpopup" parameterClass="cargo.cms.common.utils.bo.ExpCarCommonBO"  resultClass="java.lang.String">
		WITH RCL_INFO AS (
		        select t1.rcl_no, t1.awb_no, t1.awb_date , t1.rcl_pcs as pcs from exp_rcl_hd t1 
		        where t1.ppk_type in ('B', 'P') and (t1.status != 'V' and t1.status != 'R')
		        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
		                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
		                and nvl(t1.CARR_RF,'N') = 'N' AND NVL(t1.ACCPT_MODE,'XXX') != 'LIT' )
		        union
		        select t1.rcl_no, t2.awb_no, t2.awb_date, t2.pcs as pcs from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
		        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R')
		        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
		                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
		                and nvl(t2.CARR_RF,'N') = 'N' AND NVL(t1.ACCPT_MODE,'XXX') != 'LIT' )
		        union
		        select t1.rcl_no, t1.awb_no, t1.awb_date, t1.rcl_pcs as pcs  from exp_rcl_hd t1 where t1.ppk_type in ('B', 'P')
		        	  	and (t1.status != 'V' and t1.status != 'R') and 
		        	  	( nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no) )
		        union
		        select t1.rcl_no, t2.awb_no, t2.awb_date, t2.pcs as pcs  from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
		        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R') and 
		        (  nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no and awb_no = t2.awb_no and awb_date = t2.awb_date) )
			)
			select nvl(SUM(pcs),0) from RCL_INFO where awb_no =  #awb# and awb_date = to_date(#awbDate#,'DDMONYY')
	</select>
	<select id="rclComplPcCheckingPopup" parameterClass="cargo.cms.common.utils.bo.ExpCarCommonBO"  resultClass="java.lang.String">
			select case when a.pcs = ( b.RCL_PCS-nvl(b.RTN_PCS,0) ) then 'Y' else 'N' end equalRclPcs
				FROM EXP_CAR a, AWB b		
				WHERE a.AWB_NO = B.AWB_NO 
				AND TO_CHAR(a.AWB_DATE,'DDMONYY') = TO_CHAR(b.AWB_DATE,'DDMONYY') and b.awb_type = 'E'
				AND a.AWB_NO= #awb# AND a.AWB_DATE = to_date(#awbDate#,'DDMONYY')
	 </select>
	<select id="otherTypeExistspopup" parameterClass="cargo.cms.common.utils.bo.ExpCarCommonBO"  resultClass="java.lang.Integer">
		WITH RCL_INFO AS (
	        select t1.rcl_no, t1.awb_no, t1.awb_date from exp_rcl_hd t1 
	        where t1.ppk_type in ('B', 'P') and (t1.status != 'V' and t1.status != 'R')
	        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
	                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
	                and nvl(t1.CARR_RF,'Y') = 'N' AND NVL(t1.ACCPT_MODE,'XXX') != 'LIT')
	        union
	        select t1.rcl_no, t2.awb_no, t2.awb_date from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
	        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R')
	        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
	                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
	                and nvl(t2.CARR_RF,'Y') = 'N' AND NVL(t1.ACCPT_MODE,'XXX') != 'LIT')
	         union
			        select t1.rcl_no, t1.awb_no, t1.awb_date  from exp_rcl_hd t1 where t1.ppk_type in ('B', 'P')
			        	  	and (t1.status != 'V' and t1.status != 'R') and 
			        	  	( nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no) )
			        union
			        select t1.rcl_no, t2.awb_no, t2.awb_date from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
			        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R') and 
			        (  nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no and awb_no = t2.awb_no and awb_date = t2.awb_date) )		        
		)
		select count(*) from RCL_INFO where awb_no =  #awb# and awb_date = to_date(#awbDate#,'DDMONYY')
	</select>
    
	<select id="applicableCaseCntPopup" parameterClass="cargo.cms.common.utils.bo.ExpCarCommonBO"  resultClass="java.lang.Integer">
		WITH RCL_INFO AS (
		        select t1.rcl_no, t1.awb_no, t1.awb_date from exp_rcl_hd t1 
		        where t1.ppk_type in ('B', 'P') and (t1.status != 'V' and t1.status != 'R')
		        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
		                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
		                AND  NVL(t1.ACCPT_MODE,'XXX') != 'LIT')
		        union
		        select t1.rcl_no, t2.awb_no, t2.awb_date from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
		        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R')
		        and ( (nvl(t1.aside_accept,'N') = 'N' and nvl(t1.sec_check,'N') = 'N')
		                and (nvl(SCREENING_OPTION,'N') != 'EXEMPTED_SC' and nvl(SCREENING_OPTION,'N') != 'VKC_CODE' and nvl(SCREENING_OPTION,'N') != 'RAKC_SC') 
		                AND  NVL(t1.ACCPT_MODE,'XXX') != 'LIT')
		        union
		        select t1.rcl_no, t1.awb_no, t1.awb_date  from exp_rcl_hd t1 where t1.ppk_type in ('B', 'P')
		        	  	and (t1.status != 'V' and t1.status != 'R') and 
		        	  	( nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no) )
		        union
		        select t1.rcl_no, t2.awb_no, t2.awb_date from exp_rcl_hd t1, exp_rcl_brkdn t2 where  t1.rcl_no = t2.rcl_no 
		        and t1.ppk_type = 'M' and (t1.status != 'V' and t1.status != 'R') and 
		        (  nvl(t1.sec_check,'N') = 'Y' AND not exists (select null from EXP_RCL_SEC_CHK_DTL where rcl_no = t1.rcl_no and awb_no = t2.awb_no and awb_date = t2.awb_date) )
			)		
		select count(*) from RCL_INFO where awb_no =  #awb# and awb_date = to_date(#awbDate#,'DDMONYY')
	</select>

	<select id="getHOFormULDAWBList" parameterClass="cargo.cms.export.bo.RampExportBO" resultClass="cargo.cms.export.bo.RampExportBO">
		  select eua.awb_no as awbNumber,to_char(eua.awb_date,'DDMONYY') as awbDate 	
		  from
		  exp_pmanifest_uld_awb  eua 	  
	 	  where eua.flt_key = #fltNo# and eua.flt_date = to_date(#fltDate# ,'DDMONYY') and eua.uld_bt_no = #uldNo#
	 	  union 
	 	  select ept.awb_no as awbNumber,to_char(ept.awb_date,'DDMONYY') as awbDate 
		  from
		  EXP_PMAN_TARMAC_ULD_AWB  ept 	  
	 	  where ept.flt_key = #fltNo#  and ept.flt_date = to_date(#fltDate# ,'DDMONYY') and ept.uld_bt_no = #uldNo# 
	</select>
		
<select id="validateHandOverAndManfPcs" parameterClass="map" resultClass="java.lang.String">
		WITH HOVER_OVER AS (SELECT pman.flt_key,pman.flt_date,pman.AWB_NO,pman.AWB_DATE,pman.uld_bt_no as uld_key,nvl(pman.ASSIGNED_PCS,0)  pcs  FROM exp_pmanifest_uld_awb pman
		left join  EXP_ULD_HOVER_DTL handOver ON pman.flt_key  = handOver.flt_key AND pman.flt_date= handOver.flt_date and pman.uld_bt_no = handOver.uld_key
		where pman.flt_key = #flt_no#
		    AND pman.flt_date  = #flt_date#
		    AND pman.awb_no    = #awb_no#
		    AND pman.awb_date  = #awb_date#
		    and HANDOVER.ULD_KEY is not null and  HANDOVER.SEND_HANDOVER_DATE is not null
		UNION ALL
		SELECT pman.flt_key,pman.flt_date,pman.AWB_NO,pman.AWB_DATE,pman.uld_bt_no as uld_key,nvl(pman.ASSIGNED_PCS,0) pcs  FROM EXP_PMAN_TARMAC_ULD_AWB pman
		left join  EXP_ULD_HOVER_DTL handOver ON pman.flt_key  = handOver.flt_key AND pman.flt_date= handOver.flt_date and pman.uld_bt_no = handOver.uld_key
		where pman.flt_key = #flt_no#
		    AND pman.flt_date  = #flt_date#
		    AND pman.awb_no    = #awb_no#
		    AND pman.awb_date  = #awb_date#
		    and HANDOVER.ULD_KEY is not null and  HANDOVER.SEND_HANDOVER_DATE is not null ),
		PMAN AS (SELECT pman.flt_key,pman.flt_date,pman.AWB_NO,pman.AWB_DATE,nvl(pman.PMAN_PCS,0) pcs  FROM exp_pmanifest_awb pman
		where pman.flt_key = #flt_no#
		    AND pman.flt_date  = #flt_date#
		    AND pman.awb_no    = #awb_no#
		    AND pman.awb_date  = #awb_date#
		UNION ALL
		SELECT pman.flt_key,pman.flt_date,pman.AWB_NO,pman.AWB_DATE,(NVL(bulk_pcs, 0) + NVL(ppk_pcs, 0)) pcs  FROM EXP_PMAN_TARMAC_AWB pman
		where pman.flt_key = #flt_no#
		    AND pman.flt_date  = #flt_date#
		    AND pman.awb_no    = #awb_no#
		    AND pman.awb_date  = #awb_date#    
		)
		select CASE when (select sum(pcs) from HOVER_OVER) = (select sum(pcs) from PMAN) then 'Y' else 'N' end as equalPman from DUAL
	</select>
        <update id="update_TSA_START_PASS_EXP_CAR" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO">
		UPDATE AWB SET TSA_PASS_IND = 'Y' WHERE AWB_NO=#awbNo# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and awb_type  ='T' and nvl(TSA_PASS_IND,'N') = 'N'
	</update>
	<update id="update_TSA_START_FAIL_EXP_CAR" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO">
		UPDATE AWB SET TSA_PASS_IND = 'N',TSA_START_PREP='Y' WHERE AWB_NO=#awbNo# AND AWB_DATE= to_date(#awbDate#,'DDMONYY') and awb_type = 'T' 
	</update>
	<select id="fetchSecTransAwbType" parameterClass="cargo.cms.export.buildup.bo.AwbInfoBO"  resultClass="cargo.cms.export.buildup.bo.AwbInfoBO">
	SELECT AWB_TYPE as awbType,PCS as awbPcs,WT as awbWt FROM AWB WHERE AWB_NO=#awbNo# AND AWB_DATE=#awbDate# AND ROWNUM = 1
	</select>
	<delete id="deleteRecvCargoRecord" parameterClass="cargo.cms.export.bo.ReceiveCargoBO">
		delete from EXP_CARGO_RECEIVE_RECORD where tr_no = #trNum#
	</delete>
	
	<update id="endorseSaveInvDiscrebency" parameterClass="cargo.cms.export.bo.InventoryDiscrepancyBO" >
		update EXP_CARGO_RECEIVE_RECORD set ENDORSED_BY=#username#, ENDORSED_DATE=SYSDATE , lm_user_id=#userID#, lm_date=SYSDATE, tr_type='IDEDR'  where tr_no = #trNum#
	</update>	
	
	<select id="checkDateDifferenceDays" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer" >
		SELECT TO_CHAR(TO_DATE(#dateTo#,'DDMONYY') - TO_DATE(#dateFrom#,'DDMONYY')) DAYDIFF FROM DUAL	
	</select>
	
		<select id="getWScaleIDCCTVConfig" parameterClass="java.lang.String" resultClass="java.lang.String">
			SELECT CCTV_IMG_IP_CONFIG as cctvIPConfig FROM WEIGHING_SCALE_DET where scale_name = #wScaleID#
	</select>
        <update id="update_TSA_TRANS_PASS_ACCEPT_TRANSFER" parameterClass="map">
		UPDATE AWB SET TSA_PASS_IND = 'Y' WHERE AWB_NO=#AWB_NO# AND AWB_DATE= to_date(#AWB_DATE#,'DDMONYY') 
	</update>
	
	<update id="update_TSA_TRANS_FAIL_ACCEPT_TRANSFER" parameterClass="map">
		UPDATE AWB SET TSA_PASS_IND = 'N' WHERE AWB_NO=#AWB_NO# AND AWB_DATE= to_date(#AWB_DATE#,'DDMONYY') 
	</update>
	<select id="getAcceptModeAcctTransferCargo" parameterClass="map"  resultClass="java.lang.String">
	    SELECT ACCEPT_MODE FROM AWB WHERE AWB_NO=#AWB_NO# AND AWB_DATE= to_date(#AWB_DATE#,'DDMONYY')
	</select>
	
	<update id="update_Print_uld_YN" parameterClass="map">
		UPDATE exp_flt_uld SET UIT_PRINT = 'Y' WHERE FLT_KEY=#fltKey# AND FLT_DATE= to_date(#fltDate#,'DDMONYY') AND ULD_KEY= #uldKey#
	</update>
	







<select id="check_uld_already_returned" parameterClass="map" resultClass="java.lang.Integer">
		  select count(1) 
		  from IMP_RAMP_DOLLY_DTL 
		  where 1=1
		<isNotEmpty property="tripNumber">
		AND DOLLY_ID = #tripNumber# 
		</isNotEmpty>
		<isNotEmpty property="fltKey">
		AND flt_key = #fltKey# 
		</isNotEmpty>
		<isNotEmpty property="fltDate">
		AND FLT_DATE = #fltDate# 
		</isNotEmpty>
		AND ULD_KEY = #uld#
		and RTN_LOCN is not null and RTN_USER is not null and RTN_DATE is not null 
	</select>
	<select id="check_uld_already_rejected" parameterClass="map" resultClass="java.lang.Integer">
		  select count(1) 
		  from IMP_RAMP_DOLLY_DTL 
		  where 1=1
		<isNotEmpty property="tripNumber">
		AND DOLLY_ID = #tripNumber# 
		</isNotEmpty>
		<isNotEmpty property="fltKey">
		AND flt_key = #fltKey# 
		</isNotEmpty>
		<isNotEmpty property="fltDate">
		AND FLT_DATE = #fltDate# 
		</isNotEmpty>
		AND ULD_KEY = #uld#
		and nvl(REJECT_IND,'N')='Y' and REJECT_RMK is not null and REJECT_DATE is not null 
	</select>






<select id="handoverFormListSearch" parameterClass="cargo.cms.export.bo.HandoverFormListBO"  resultClass="cargo.cms.export.bo.HandoverFormListBO"> 
SELECT HODTL.FLT_KEY AS flightNo ,
TO_CHAR(HODTL.FLT_DATE,'DDMONYY') AS fltDate,
HODTL.ho_form_no AS hoFormNo,
HODTL.ho_status AS hoFormStat,
NVL(PKG_COMMON.GET_FLT_ETA(HODTL.FLT_KEY,HODTL.FLT_DATE, 'D', 'DD'),PKG_COMMON.GET_FLT_STA(HODTL.FLT_KEY,HODTL.FLT_DATE, 'D', 'DD')) estDispl,
HODTL.RAMP_USER as rHO
FROM FLT_OPR OPR
JOIN
(SELECT HODTL.FLT_KEY,
HODTL.FLT_DATE,
HODTL.ho_form_no,
 HODTL.ho_status,
HODTL.RAMP_USER
FROM EXP_ULD_HOVER_DTL HODTL
WHERE 1=1 
<isNotEmpty property="hoFormNo">
AND HODTL.ho_form_no=#hoFormNo#
</isNotEmpty>
<isNotEmpty property="searchFlt">
AND HODTL.FLT_KEY=#searchFlt#
</isNotEmpty>
<isNotEmpty property="flightDate">
AND HODTL.FLT_DATE =#flightDate#
</isNotEmpty>
GROUP BY HODTL.FLT_KEY,
HODTL.FLT_DATE,
HODTL.ho_form_no,
HODTL.ho_status,
 HODTL.RAMP_USER
 ) HODTL
ON HODTL.FLT_KEY =OPR.FLT_KEY
AND HODTL.FLT_DATE=OPR.SCH_DATE
WHERE 1=1
<isNotEmpty property="searchFlt">
         and OPR.FLT_KEY = #searchFlt#
</isNotEmpty>

<isNotEmpty property="flightDate">
        AND OPR.SCH_DATE =#flightDate#
</isNotEmpty>
</select>


<select id="getHandoverFormListDetails" parameterClass="cargo.cms.export.bo.HandoverFormListBO"  resultClass="cargo.cms.export.bo.HandoverFormListBO">
<![CDATA[
SELECT HODTL.ho_form_no AS hoFormNo,hodtl.uld_key AS uld,
(SELECT STRAGG(STRINGDELIM(CODE,',')) FROM(SELECT B.CODE FROM V_EXP_ULD_SHC A,  MAST_SPL_HAND_CODE B WHERE B.CODE = A.CODE AND ULD_KEY  = HODTL.uld_key ORDER BY PRIORITY DESC) WHERE ROWNUM <=9) as shc,
COOL_DOLLY_ID AS coolDollyId, (SELECT 
to_char(CHKDTL.chkout_date, 'DDMONYY') || ' ' ||decode(CHKDTL.chkout_time, null, '', SUBSTR(lpad(CHKDTL.chkout_time,4,0), 1, 2)|| ':'||  SUBSTR(lpad(CHKDTL.chkout_time,4,0), 3))   
FROM EXP_CHKOUT_DTL CHKDTL WHERE CHKDTL.FLT_KEY = HODTL.FLT_KEY AND CHKDTL.FLT_DATE=HODTL.FLT_DATE AND CHKDTL.ULD_KEY=HODTL.ULD_KEY) as checkOutTime
FROM EXP_ULD_HOVER_DTL HODTL
]]>
WHERE HODTL.HO_FORM_NO = #hoFormNo#
</select>


<update id="handoverFormListDelete" parameterClass="map">
		DELETE FROM EXP_ULD_HOVER_DTL WHERE ho_form_no =#hoFormNo#
</update>

<update id="handoverFormListCheckoutUpdate" parameterClass="map">
		UPDATE EXP_CHKOUT_DTL     SET     HO_FORM_NO='' WHERE ho_form_no =#hoFormNo#   
</update>

	<select id="get_eRCLPI_Count" parameterClass="java.util.HashMap" resultClass="java.lang.Integer" >
<![CDATA[
    SELECT COUNT(1) FROM EXP_PRE_RCL_PI_DTL WHERE TR_NO=#trNo# AND PRE_RCL_NO=#prerclno# AND (pi_pcs != #pipcs# OR PI_WT != #piwt#)
]]>
</select>

<select id="getCBXTrkflightinfo" parameterClass="map" resultClass="cargo.cms.export.bo.IssueRCLHeaderBO">		
		SELECT ffm.*,
			(SELECT org FROM edi_trk_ffm_shp where tr_no = ffm.trNo and awb_no = ffm.awbNo and awb_date = ffm.awbdate and rownum = 1) awbOrig,
			(SELECT dest FROM edi_trk_ffm_shp where tr_no = ffm.trNo and awb_no = ffm.awbNo and awb_date = ffm.awbdate and rownum = 1) awbDest,
			( to_char(trk.sch_arr_date,'DDMONYY')   || ' ' ||  
			           (ltrim(SUBSTR(TRIM(TO_CHAR(trk.sch_arr_time,'0000')),0,2) || ':'|| 
			            SUBSTR(TRIM(TO_CHAR(trk.sch_arr_time,'0000')),3,2),':'))  ) trkArrivalDate
			FROM  (
			SELECT SUM(a.man_pcs)  AS manfPcs,
			  sum(a.man_wt)       AS manfWt,
			  b.FLT_KEY trkFlightKey ,
			  TO_CHAR(b.FLT_DATE,'DDMONYY') trkFlightDate,
			  a.awb_no AS awbNo,
			  TO_CHAR(a.awb_date,'DDMONYY') awbDate,
			  b.tr_no as trNo
			FROM edi_trk_ffm_shp a
			JOIN EDI_TRK_FFM_MSG b ON a.tr_no     = b.tr_no
			WHERE FFM_STATUS = 'P' AND SI_TYPE    ='I' and a.AWB_NO= #awbNo# AND a.AWB_DATE=TO_DATE(#awbDate#,'DDMONYY')		
			GROUP BY b.FLT_KEY ,  b.FLT_DATE ,  a.awb_no ,  a.awb_date , b.tr_no
			) ffm
			left join (
		        SELECT truck_flt_no,truck_flt_date,sch_arr_date,sch_arr_time,truck_flt_type FROM itm_trk_flt where UNLDG_PT2 = 'HKG'	AND TRUCK_FLT_TYPE = 'A'	
		        UNION
		        SELECT truck_flt_no,truck_flt_date,sch_arr_date,sch_arr_time,'A' FROM itm_trk_flt_leg WHERE  DEST = 'HKG' 
		      ) trk on trk.truck_flt_type = 'A' and trk.truck_flt_no = ffm.trkFlightKey and trk.truck_flt_date = ffm.trkFlightDate
	</select>

	<select id="getCBXTruckNumber" parameterClass="map" resultClass="cargo.cms.afw.bo.MasterBO">
		SELECT distinct (b.FLT_KEY || '/' || to_char(b.FLT_DATE,'DDMONYY')) AS codeId,  (b.FLT_KEY || '/' || to_char(b.FLT_DATE,'DDMONYY'))  AS codeDesc FROM edi_trk_ffm_shp a, EDI_TRK_FFM_MSG b
	    WHERE a.tr_no  =b.tr_no AND FFM_STATUS = 'P' AND SI_TYPE    ='I'
	    <!-- and not exists (select null from exp_rcl_hd where ppk_type = 'B' and AWB_NO= #awbNum# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY') AND truck_flt_no = b.FLT_KEY and truck_flt_date = b.FLT_DATE ) -->
	    AND AWB_NO= #awbNo# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY')
	</select>

	<select id="getCBXTrkflightArrivalTime" parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="java.lang.String">	
		SELECT ( to_char(trk.sch_arr_date,'DDMONYY')   || ' ' ||  
			           (ltrim(SUBSTR(TRIM(TO_CHAR(trk.sch_arr_time,'0000')),0,2) || ':'|| 
			            SUBSTR(TRIM(TO_CHAR(trk.sch_arr_time,'0000')),3,2),':'))  ) trkArrivalDate FROM itm_trk_flt trk where UNLDG_PT2 = 'HKG' AND TRUCK_FLT_TYPE = 'A' AND truck_flt_no = #trkFlightKey# and truck_flt_date = #trkFlightDate# 
		        UNION
	    SELECT ( to_char(trk.sch_arr_date,'DDMONYY')   || ' ' ||  
			           (ltrim(SUBSTR(TRIM(TO_CHAR(trk.sch_arr_time,'0000')),0,2) || ':'|| 
			            SUBSTR(TRIM(TO_CHAR(trk.sch_arr_time,'0000')),3,2),':'))  ) trkArrivalDate FROM itm_trk_flt_leg trk WHERE  DEST = 'HKG' AND truck_flt_no = #trkFlightKey# and truck_flt_date = #trkFlightDate# 
    </select>

<select id="validateTruckFlight"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="java.lang.Integer">
		 select count(1) from itm_trk_flt trk where trk.truck_flt_type = 'A' and trk.truck_flt_no = #trkFlightKey# and trk.truck_flt_date = #trkFlightDate#
	</select>

<select id="validateRCLTruckFlight"  parameterClass="cargo.cms.export.bo.IssueRCLHeaderBO" resultClass="java.lang.Integer">
		 select count(1) from exp_rcl_hd  where  truck_flt_no = #trkFlightKey# and truck_flt_date = #trkFlightDate#  AND AWB_NO= #awbNum# AND AWB_DATE=TO_DATE(#awbDate#,'DDMONYY')
		 AND STATUS NOT IN ('V','R') AND PPK_TYPE = 'B'
	</select>

    <select id="getStatusMobile"  parameterClass="cargo.cms.export.bo.EnquiryTowOrderTODetailsBO"  resultClass="java.lang.String">
		SELECT STATUS FROM TOW_ORDER_OUT WHERE TO_NO=#toNo#
	
     </select>
	
	<select id="getAllowUpdatePI" parameterClass="java.lang.String" resultClass="java.lang.String" >
		SELECT (
		  CASE WHEN NVL(hd.eli_yn,'N')= 'N' AND NVL(hd.elm_yn,'N') = 'N' THEN 'Y'
		    ELSE (
		      CASE
		        WHEN hd.STATUS = 'CONFIRMED'
		        THEN (
		          CASE
		            WHEN NVL(hd.UPD_BATTERY_LDG_FORM,'N') = 'Y'
		            THEN 'N'
		            ELSE 'Y'
		          END)
		        ELSE 'N'
		      END)
		  END) AS updatePI
		FROM EXP_PRE_RCL_HD hd
		WHERE hd.pre_rcl_no = #preRclNo#	
	</select>


<select id="checkShipmentASP" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
		SELECT FUN_CHK_ASP_EXISTS(#awbNo# ,#awbDate#) FROM DUAL
	</select>

	<select id="getAPConstraintCode" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
		SELECT V.CC_CODE FROM V_CST_EXP_CC_CODE_ALL V WHERE  V.AWB_NO = #awbNo#  AND V.AWB_DATE = to_date(#awbDate#,'DDMONYY') AND V.CC_CODE='AP' AND ROWNUM = 1
	</select>
	<select id="getCourierSplCode" parameterClass="java.util.HashMap"  resultClass="java.lang.String">
		SELECT STRAGG(STRINGDELIM(SPL_CODE, ',')) FROM(
		SELECT DISTINCT SPL_CODE FROM CUST_AIRL_SPL_CODE SPLCODE, AWB AWB 
		WHERE SPLCODE.SPL_TYPE='SPL_COURIER_SHC'
		AND SPLCODE.CARR_CODE = AWB.CARR_CODE
		AND AWB.AWB_NO = #awbNo#
		AND AWB.AWB_DATE = #awbDate#
		AND (SPLCODE.SPL_CODE = AWB.SPL_CODE1
		OR SPLCODE.SPL_CODE   = AWB.SPL_CODE2
		OR SPLCODE.SPL_CODE   = AWB.SPL_CODE3
		OR SPLCODE.SPL_CODE   = AWB.SPL_CODE4
		OR SPLCODE.SPL_CODE   = AWB.SPL_CODE5
		OR SPLCODE.SPL_CODE   = AWB.SPL_CODE6
		OR SPLCODE.SPL_CODE   = AWB.SPL_CODE7
		OR SPLCODE.SPL_CODE   = AWB.SPL_CODE8
		OR SPLCODE.SPL_CODE   = AWB.SPL_CODE9))
	</select>
	
	<select id="checkBookingAvailableForASP" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		SELECT count(1) FROM edi_fbl fbl
          JOIN edi_fbl_shp shp ON shp.tr_no = fbl.tr_no
          WHERE shp.awb_no is not null AND fbl.si_type IN ('S','I') AND fbl.FBL_STATUS = 'P' 
          AND shp.awb_no = #awbNo# AND shp.awb_date = #awbDate# AND fbl.flt_key = #fltKey# AND fbl.flt_date = #fltDate#	
	</select>

	<select id="getASPSHCSystemParamValue"  resultClass="java.lang.String" >
	 <![CDATA[
		SELECT
  				REGEXP_SUBSTR(RULE_VALUE, '[^,]+', 1, level) AS parts
		FROM (select RULE_VALUE from CMSRULES  where RULE_CODE='ASP_SHC')
      			CONNECT BY REGEXP_SUBSTR(RULE_VALUE, '[^,]+', 1, level) IS NOT NULL
		]]>
	</select>

<select id="checkBookingAvailableForShp" parameterClass="java.util.HashMap"  resultClass="java.lang.Integer">
		SELECT count(1) FROM edi_fbl fbl
          JOIN edi_fbl_shp shp ON shp.tr_no = fbl.tr_no
          WHERE shp.awb_no is not null AND fbl.si_type IN ('S','I') AND fbl.FBL_STATUS = 'P' 
          AND shp.awb_no = #awbNo# AND shp.awb_date = #awbDate#  
	</select>
	<update id="amendAWBCloseDetailsfromuncheckout" parameterClass="cargo.cms.export.bo.ULDCheckOutListBO" >
	update awb set awb_closed_yn = 'N' where awb_no=#awbNo# AND AWB_DATE=to_date(#awbDate#,'DDMONYY') and awb_closed_yn = 'Y'
	</update>
	<insert id="insertAuthTokenDetails" parameterClass="cargo.cms.common.utils.bo.CommonUtilFunBO" >
			INSERT INTO EXT_SYS_AUTH_TOKEN_DTLS (TR_NO,ACCESS_TOKEN,EXPIRES,STATUS,TOKEN_DATE,CLIENT_ID,EXTERNAL_SYS,CR_USER_ID,CR_DATE,LM_USER_ID,LM_DATE) VALUES
		    (EXT_SYS_AUTH_DTLS_SEQ.NEXTVAL,#accessToken#,#expires#,'ACTIVE',SYSDATE,#CLIENT_ID#,#EXTERNAL_SYS#,#crUserId#,SYSDATE,#crUserId#,SYSDATE)
		</insert>
	
 	 	<select id="getActiveAccessToken"  parameterClass="map" resultClass="cargo.cms.common.utils.bo.CommonUtilFunBO">
			select * from (SELECT ACCESS_TOKEN AS accessToken,EXPIRES AS expires,TR_NO AS seqNo,TO_CHAR(TOKEN_DATE,'DDMONYY HH24:MI:SS') AS tokenDate 
			FROM EXT_SYS_AUTH_TOKEN_DTLS WHERE STATUS='ACTIVE' 
			AND CLIENT_ID = #CLIENT_ID# AND EXTERNAL_SYS = #EXTERNAL_SYS# ORDER BY CR_DATE DESC ) where rownum = 1
		</select>
		
		<update id="UpdateAccessTokentoExpire" parameterClass="map">
			<![CDATA[
				UPDATE EXT_SYS_AUTH_TOKEN_DTLS SET STATUS = 'EXPIRED' WHERE TR_NO != #PARAM# AND CLIENT_ID = #CLIENT_ID# AND EXTERNAL_SYS = #EXTERNAL_SYS#
			]]>    
		</update>
		<select id="checkAWBCloseforCheckout"  parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
		select count(1) from AWB where awb_no = #AWB_NO# and awb_date = #AWB_DATE# and awb_closed_yn = 'Y'
	   </select>
<select id="getDeleteULDList"  parameterClass="cargo.cms.export.bo.HandoverFormListBO" resultClass="cargo.cms.export.bo.HandoverFormListBO">
			SELECT FLT_KEY as fltNo,TO_CHAR(FLT_DATE,'DDMONYY') as flightDate,HO_FORM_NO as hoFormNo,ULD_KEY as uld FROM EXP_ULD_HOVER_DTL WHERE HO_FORM_NO=#hoFormNo#
		</select>	
		<select id="getFlightCustomoutSendEmailConfig" parameterClass="java.util.HashMap" resultClass="java.lang.String" >
		SELECT NVL(CARR.SEND_MAIL,'N') FROM FLT_OPR OPR, MAST_CARRIER CARR WHERE OPR.CARR_CODE = CARR.CODE AND OPR.FLT_KEY=#fltKey# AND OPR.SCH_DATE=#fltDate# and OPR.FLT_TYPE='D'
		</select>		
<select id="findRACSFcodeforIssueRCL" parameterClass="java.util.HashMap" resultClass="java.lang.String">
   		SELECT RACSF_CODE FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = #preRCLNum# AND RACSF_CODE IS NOT NULL
   	</select>
	<select id="fetchAgentURFULDGroupList" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
SELECT HD.ENDR_NO AS enrseURF,DTL.ULD_GROUP AS uldGrpType,DTL.ULD_QTY AS uldGrpQty FROM ULD_ENDR_HD HD,ULD_ENDR_DTL DTL WHERE HD.FLT_NO=#fltNo# AND HD.FLT_DATE=#fltDate# 
AND HD.AGENT_CUST_NO=(SELECT CODE FROM CUST_COMPANY WHERE CX_CODE=#agentName#) AND HD.STATUS='PENDING' AND DTL.ULD_EQUIP = 'U'
AND DTL.ENDR_NO = HD.ENDR_NO ORDER BY HD.ENDR_NO ASC
</select>
<select id="fetchAgentURFULDAccessoryList" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
SELECT HD.ENDR_NO AS enrseURF,DTL.EQUIP_TYPE AS accessoryType,DTL.EQUIP_QTY AS accessoryQty FROM ULD_ENDR_HD HD,ULD_ENDR_DTL DTL WHERE HD.FLT_NO=#fltNo# AND HD.FLT_DATE=#fltDate# 
AND HD.AGENT_CUST_NO=(SELECT CODE FROM CUST_COMPANY WHERE CX_CODE=#agentName#) AND HD.STATUS='PENDING' AND DTL.ULD_EQUIP = 'E'
AND DTL.ENDR_NO = HD.ENDR_NO ORDER BY HD.ENDR_NO ASC
</select>
<select id="fetchAgentURFList" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
SELECT ENDR_NO as enrseURF FROM ULD_ENDR_HD WHERE FLT_NO=#fltNo# AND FLT_DATE=#fltDate# AND AGENT_CUST_NO IN (SELECT CODE FROM CUST_COMPANY WHERE CX_CODE=#agentName#) AND STATUS = 'PENDING'
</select>
<select id="fetcholdAgentList" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
SELECT DISTINCT ENDR_NO AS enrseURF,(SELECT CX_CODE FROM CUST_COMPANY WHERE CODE=HD.AGENT_CUST_NO) AS agentName FROM ULD_ENDR_HD HD WHERE HD.FLT_NO=#fltNo# AND HD.FLT_DATE=#fltDate# AND HD.STATUS='PENDING' AND CR_USER_ID='CXELOADAGTULD'
</select>
<select id="fetchURFAgentReleaseCount"  parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="java.lang.Integer">
SELECT COUNT(*) FROM ULD_ISS_HD HD,ULD_ISS_DTL DTL  WHERE HD.FLT_NO=#fltNo# AND HD.FLT_DATE=#fltDate# AND HD.AGENT_CUST_NO IN (SELECT CODE FROM CUST_COMPANY WHERE CX_CODE=#agentName#)
AND DTL.EIR_NO = HD.EIR_NO
<![CDATA[ 
AND (NVL(DTL.EQUIP_REL_QTY,'0') > 0 or NVL(DTL.ULD_REL_QTY,'0')>0)
]]>
</select>
<select id="fetchApprovedURFListforNotification"  parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="java.lang.String">
SELECT STRAGG(STRINGDELIM(HD.EIR_NO, ',')) FROM ULD_ISS_HD HD WHERE HD.FLT_NO=#fltNo# AND HD.FLT_DATE=#fltDate# AND HD.AGENT_CUST_NO IN (SELECT CODE FROM CUST_COMPANY WHERE CX_CODE=#agentName#) AND STATUS = 'APPROVED'
</select>

<select id="fetchEmailforemailfax" parameterClass="java.lang.String" resultClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
		SELECT 
		EMAIL1 AS emailAddress1 ,EMAIL2 AS emailAddress2 , 
		EMAIL3 AS emailAddress3 , EMAIL4 AS emailAddress4 , 
		EMAIL5 AS emailAddress5 
		FROM CUST_CONTACT WHERE CONTACT_TYPE = 'EIR' AND CUST_NO = (SELECT CODE FROM CUST_COMPANY WHERE CX_CODE=#PARAM#)
</select>
<select id="fetchURFAgentApproveCount"  parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO"  resultClass="java.lang.Integer">
SELECT COUNT(*) FROM ULD_ENDR_SUM WHERE FLT_NO=#fltNo# AND FLT_DATE=#fltDate# AND AGENT_CUST_NO IN (SELECT CODE FROM CUST_COMPANY WHERE CX_CODE=#agentName#)
<![CDATA[ 
AND NVL(APR_QTY,0)>0
]]>
</select>
<update id="updateApproveDtlinEndorseURF" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
UPDATE ULD_ENDR_SUM SET APR_QTY = '0' WHERE FLT_NO=#fltNo# AND FLT_DATE=#fltDate# AND AGENT_CUST_NO IN (SELECT CODE FROM CUST_COMPANY WHERE CX_CODE=#agentName#)
</update>
<update id="updateApproveDtlinIssueURF" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
UPDATE ULD_ISS_DTL SET ULD_APR_QTY='',EQUIP_APR_QTY = '',ULD_ENDR_QTY='',EQUIP_ENDR_QTY='' WHERE EIR_NO IN (SELECT EIR_NO FROM ULD_ISS_HD HD WHERE HD.FLT_NO=#fltNo# AND HD.FLT_DATE=#fltDate# AND HD.AGENT_CUST_NO IN (SELECT CODE FROM CUST_COMPANY WHERE CX_CODE=#agentName#))
</update>
<update id="updateApproveDtlinIssueHeaderURF" parameterClass="cargo.cms.export.buildup.bo.FlightAllotmentBO">
UPDATE ULD_ISS_HD    SET ENDR_URF_MSG = 'Y', STATUS = 'PENDING',    ENDR_DATE = '', APR_DATE = '',    ENDR_BY = '', APR_BY = '',    ENDR_EST_TIME = '' , APR_EST_TIME = '', REQ_EST_TIME = '', EST_TIME = '', EIR_EXPIRY_DATE = '',    ENDR_RMK = '', APR_RMK = '' WHERE EIR_NO IN (SELECT EIR_NO FROM ULD_ISS_HD HD WHERE HD.FLT_NO=#fltNo# AND HD.FLT_DATE=#fltDate# AND HD.AGENT_CUST_NO IN (SELECT CODE FROM CUST_COMPANY WHERE CX_CODE=#agentName#) AND STATUS = 'APPROVED')     
</update>



<select id="fetchURFAgentName"  parameterClass="java.lang.String"  resultClass="java.lang.String">
SELECT CODE_DESC FROM CUST_COMPANY WHERE CX_CODE=#PARAM#
</select>
<select id="getErroeDescforEloadPlanAgt" parameterClass="java.lang.String" resultClass="java.lang.String" >
		select err_desc from err_msg where err_code=#PARAM# and err_lcode='en_US'
	</select>
   	<select id="findEndrReqRACSFIssueRCL" parameterClass="java.util.HashMap" resultClass="java.lang.Integer">
   		SELECT COUNT(1) FROM MAST_RCL_RACSF_CNFG WHERE CARR_CODE=#carrCode# AND RACSF_CODE IN (
		SELECT RACSF_CODE FROM EXP_PRE_RCL_HD WHERE PRE_RCL_NO = #preRCLNum# AND RACSF_CODE IS NOT NULL)
   	</select>

   	<select id="sqlGetTotalAllotTowOrder" parameterClass="java.lang.String" resultClass="java.lang.String">
   	SELECT STRAGG(STRINGDELIM(COUNT(uldGroup)||uldGroup,',')) FROM (
    SELECT (SELECT ALLOT.ULD_ALLOT FROM ULD_GROUP_TYPE GRP JOIN MAST_ULD_ALLOT_GROUP ALLOT ON GRP.ULD_GROUP=ALLOT.ULD_GROUP WHERE GRP.ULD_TYPE=substr(dtl.uld_key, 1, 3)) uldGroup FROM TOW_ORDER_OUT_dtl dtl WHERE to_no = #toNo# )
    GROUP BY uldGroup
    </select>
	
</sqlMap>
